package di

import (
	"context"

	"github.com/juicycleff/frank/config"
	"github.com/juicycleff/frank/ent"
	"github.com/juicycleff/frank/internal/authz"
	"github.com/juicycleff/frank/internal/middleware"
	"github.com/juicycleff/frank/internal/services/auth"
	"github.com/juicycleff/frank/internal/services/organization"
	"github.com/juicycleff/frank/internal/services/user"
	"github.com/juicycleff/frank/pkg/logging"
)

// TestContainer provides a test-friendly container
type TestContainer struct {
	ContainerInner
	cleanup func() error
}

// NewTestContainer creates a container for testing
func NewTestContainer(cfg *config.Config) (*TestContainer, error) {
	// Override config for testing
	testCfg := *cfg
	testCfg.Database.Database = cfg.Database.Database + "_test"
	testCfg.Environment = "testing"
	testCfg.Logging.Level = "debug"

	container, err := NewContainer(&testCfg)
	if err != nil {
		return nil, err
	}

	return &TestContainer{
		ContainerInner: container,
		cleanup: func() error {
			return container.Cleanup()
		},
	}, nil
}

// Cleanup cleans up test resources
func (tc *TestContainer) Cleanup() error {
	return tc.cleanup()
}

// MockContainer provides a mock container for testing
type MockContainer struct {
	cfg                 *config.Config
	logger              logging.Logger
	db                  *ent.Client
	authService         auth.AuthService
	userService         *user.Service
	organizationService *organization.Service
}

// NewMockContainer creates a mock container
func NewMockContainer() *MockContainer {
	return &MockContainer{
		cfg:    &config.Config{},
		logger: logging.NewDefaultLogger(),
	}
}

// Implement ContainerInner interface for MockContainer
func (m *MockContainer) Config() *config.Config                     { return m.cfg }
func (m *MockContainer) Logger() logging.Logger                     { return m.logger }
func (m *MockContainer) DB() *ent.Client                            { return m.db }
func (m *MockContainer) Auth() auth.AuthService                     { return m.authService }
func (m *MockContainer) AuthZ() *authz.PermissionsService           { return nil }
func (m *MockContainer) AuthMiddleware() *middleware.AuthMiddleware { return nil }
func (m *MockContainer) UserService() *user.Service                 { return m.userService }
func (m *MockContainer) OrganizationService() *organization.Service { return m.organizationService }
func (m *MockContainer) Cleanup() error                             { return nil }
func (m *MockContainer) HealthCheck(ctx context.Context) error      { return nil }

// Setter methods for testing
func (m *MockContainer) SetAuth(service *auth.AuthService) {
	m.authService = service
}

func (m *MockContainer) SetUserService(service *user.Service) {
	m.userService = service
}

func (m *MockContainer) SetOrganizationService(service *organization.Service) {
	m.organizationService = service
}

func (m *MockContainer) SetDB(db *ent.Client) {
	m.db = db
}
