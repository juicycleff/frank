// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juicycleff/frank/internal/auth/oauth2 (interfaces: Storage)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	oauth2 "github.com/juicycleff/frank/internal/auth/oauth2"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// GetAccessToken mocks base method.
func (m *MockStorage) GetAccessToken(arg0 context.Context, arg1 string) (*oauth2.TokenInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessToken", arg0, arg1)
	ret0, _ := ret[0].(*oauth2.TokenInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccessToken indicates an expected call of GetAccessToken.
func (mr *MockStorageMockRecorder) GetAccessToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessToken", reflect.TypeOf((*MockStorage)(nil).GetAccessToken), arg0, arg1)
}

// GetAuthorizationCode mocks base method.
func (m *MockStorage) GetAuthorizationCode(arg0 context.Context, arg1 string) (*oauth2.AuthorizationCode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthorizationCode", arg0, arg1)
	ret0, _ := ret[0].(*oauth2.AuthorizationCode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthorizationCode indicates an expected call of GetAuthorizationCode.
func (mr *MockStorageMockRecorder) GetAuthorizationCode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorizationCode", reflect.TypeOf((*MockStorage)(nil).GetAuthorizationCode), arg0, arg1)
}

// GetClient mocks base method.
func (m *MockStorage) GetClient(arg0 context.Context, arg1 string) (*oauth2.ClientConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClient", arg0, arg1)
	ret0, _ := ret[0].(*oauth2.ClientConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClient indicates an expected call of GetClient.
func (mr *MockStorageMockRecorder) GetClient(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClient", reflect.TypeOf((*MockStorage)(nil).GetClient), arg0, arg1)
}

// GetDefaultScopes mocks base method.
func (m *MockStorage) GetDefaultScopes(arg0 context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultScopes", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDefaultScopes indicates an expected call of GetDefaultScopes.
func (mr *MockStorageMockRecorder) GetDefaultScopes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultScopes", reflect.TypeOf((*MockStorage)(nil).GetDefaultScopes), arg0)
}

// GetRefreshToken mocks base method.
func (m *MockStorage) GetRefreshToken(arg0 context.Context, arg1 string) (*oauth2.TokenInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefreshToken", arg0, arg1)
	ret0, _ := ret[0].(*oauth2.TokenInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRefreshToken indicates an expected call of GetRefreshToken.
func (mr *MockStorageMockRecorder) GetRefreshToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefreshToken", reflect.TypeOf((*MockStorage)(nil).GetRefreshToken), arg0, arg1)
}

// MarkAuthorizationCodeAsUsed mocks base method.
func (m *MockStorage) MarkAuthorizationCodeAsUsed(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkAuthorizationCodeAsUsed", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkAuthorizationCodeAsUsed indicates an expected call of MarkAuthorizationCodeAsUsed.
func (mr *MockStorageMockRecorder) MarkAuthorizationCodeAsUsed(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkAuthorizationCodeAsUsed", reflect.TypeOf((*MockStorage)(nil).MarkAuthorizationCodeAsUsed), arg0, arg1)
}

// RevokeAccessToken mocks base method.
func (m *MockStorage) RevokeAccessToken(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeAccessToken", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeAccessToken indicates an expected call of RevokeAccessToken.
func (mr *MockStorageMockRecorder) RevokeAccessToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeAccessToken", reflect.TypeOf((*MockStorage)(nil).RevokeAccessToken), arg0, arg1)
}

// RevokeRefreshToken mocks base method.
func (m *MockStorage) RevokeRefreshToken(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeRefreshToken", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeRefreshToken indicates an expected call of RevokeRefreshToken.
func (mr *MockStorageMockRecorder) RevokeRefreshToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeRefreshToken", reflect.TypeOf((*MockStorage)(nil).RevokeRefreshToken), arg0, arg1)
}

// StoreAccessToken mocks base method.
func (m *MockStorage) StoreAccessToken(arg0 context.Context, arg1 *oauth2.TokenInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreAccessToken", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreAccessToken indicates an expected call of StoreAccessToken.
func (mr *MockStorageMockRecorder) StoreAccessToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreAccessToken", reflect.TypeOf((*MockStorage)(nil).StoreAccessToken), arg0, arg1)
}

// StoreAuthorizationCode mocks base method.
func (m *MockStorage) StoreAuthorizationCode(arg0 context.Context, arg1 *oauth2.AuthorizationCode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreAuthorizationCode", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreAuthorizationCode indicates an expected call of StoreAuthorizationCode.
func (mr *MockStorageMockRecorder) StoreAuthorizationCode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreAuthorizationCode", reflect.TypeOf((*MockStorage)(nil).StoreAuthorizationCode), arg0, arg1)
}

// StoreRefreshToken mocks base method.
func (m *MockStorage) StoreRefreshToken(arg0 context.Context, arg1 *oauth2.TokenInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreRefreshToken", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreRefreshToken indicates an expected call of StoreRefreshToken.
func (mr *MockStorageMockRecorder) StoreRefreshToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreRefreshToken", reflect.TypeOf((*MockStorage)(nil).StoreRefreshToken), arg0, arg1)
}

// ValidateScopes mocks base method.
func (m *MockStorage) ValidateScopes(arg0 context.Context, arg1 string, arg2 []string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateScopes", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateScopes indicates an expected call of ValidateScopes.
func (mr *MockStorageMockRecorder) ValidateScopes(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateScopes", reflect.TypeOf((*MockStorage)(nil).ValidateScopes), arg0, arg1, arg2)
}
