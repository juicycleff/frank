package user

import (
	"context"
	"encoding/json"
	"time"

	"github.com/juicycleff/frank/ent"
	"github.com/juicycleff/frank/internal/repository"
	"github.com/juicycleff/frank/pkg/errors"
	"github.com/rs/xid"
)

// PreferencesService defines the user preferences service interface
type PreferencesService interface {
	// General preferences
	GetPreferences(ctx context.Context, userID xid.ID) (*UserPreferences, error)
	UpdatePreferences(ctx context.Context, userID xid.ID, req UpdatePreferencesRequest) (*UserPreferences, error)
	ResetPreferences(ctx context.Context, userID xid.ID) (*UserPreferences, error)

	// Notification preferences
	GetNotificationPreferences(ctx context.Context, userID xid.ID) (*NotificationPreferences, error)
	UpdateNotificationPreferences(ctx context.Context, userID xid.ID, prefs NotificationPreferences) error

	// Communication preferences
	GetCommunicationPreferences(ctx context.Context, userID xid.ID) (*CommunicationPreferences, error)
	UpdateCommunicationPreferences(ctx context.Context, userID xid.ID, prefs CommunicationPreferences) error

	// UI/UX preferences
	GetUIPreferences(ctx context.Context, userID xid.ID) (*UIPreferences, error)
	UpdateUIPreferences(ctx context.Context, userID xid.ID, prefs UIPreferences) error

	// Security preferences
	GetSecurityPreferences(ctx context.Context, userID xid.ID) (*SecurityPreferences, error)
	UpdateSecurityPreferences(ctx context.Context, userID xid.ID, prefs SecurityPreferences) error

	// Accessibility preferences
	GetAccessibilityPreferences(ctx context.Context, userID xid.ID) (*AccessibilityPreferences, error)
	UpdateAccessibilityPreferences(ctx context.Context, userID xid.ID, prefs AccessibilityPreferences) error

	// Integration preferences
	GetIntegrationPreferences(ctx context.Context, userID xid.ID) (*IntegrationPreferences, error)
	UpdateIntegrationPreferences(ctx context.Context, userID xid.ID, prefs IntegrationPreferences) error

	// Preference categories
	GetPreferenceCategories(ctx context.Context) ([]*PreferenceCategory, error)
	GetPreferenceSchema(ctx context.Context, category string) (*PreferenceSchema, error)

	// Preference validation
	ValidatePreferences(ctx context.Context, userID xid.ID, prefs map[string]interface{}) (*PreferenceValidationResult, error)

	// Preference history and tracking
	GetPreferenceHistory(ctx context.Context, userID xid.ID, opts PreferenceHistoryOptions) (*PreferenceHistoryResult, error)

	// Bulk operations
	ExportPreferences(ctx context.Context, userID xid.ID) (*PreferenceExport, error)
	ImportPreferences(ctx context.Context, userID xid.ID, data PreferenceImport) (*UserPreferences, error)

	// Organization-level preferences
	GetOrganizationDefaultPreferences(ctx context.Context, orgID xid.ID) (*UserPreferences, error)
	SetOrganizationDefaultPreferences(ctx context.Context, orgID xid.ID, prefs UserPreferences) error
}

// Data structures

type UserPreferences struct {
	UserID                   xid.ID                   `json:"userId"`
	NotificationPreferences  NotificationPreferences  `json:"notificationPreferences"`
	CommunicationPreferences CommunicationPreferences `json:"communicationPreferences"`
	UIPreferences            UIPreferences            `json:"uiPreferences"`
	SecurityPreferences      SecurityPreferences      `json:"securityPreferences"`
	AccessibilityPreferences AccessibilityPreferences `json:"accessibilityPreferences"`
	IntegrationPreferences   IntegrationPreferences   `json:"integrationPreferences"`
	CustomPreferences        map[string]interface{}   `json:"customPreferences,omitempty"`
	UpdatedAt                time.Time                `json:"updatedAt"`
	Version                  int                      `json:"version"`
}

type UpdatePreferencesRequest struct {
	NotificationPreferences  *NotificationPreferences  `json:"notificationPreferences,omitempty"`
	CommunicationPreferences *CommunicationPreferences `json:"communicationPreferences,omitempty"`
	UIPreferences            *UIPreferences            `json:"uiPreferences,omitempty"`
	SecurityPreferences      *SecurityPreferences      `json:"securityPreferences,omitempty"`
	AccessibilityPreferences *AccessibilityPreferences `json:"accessibilityPreferences,omitempty"`
	IntegrationPreferences   *IntegrationPreferences   `json:"integrationPreferences,omitempty"`
	CustomPreferences        map[string]interface{}    `json:"customPreferences,omitempty"`
}

type NotificationPreferences struct {
	EmailNotifications    EmailNotificationSettings `json:"emailNotifications"`
	PushNotifications     PushNotificationSettings  `json:"pushNotifications"`
	SMSNotifications      SMSNotificationSettings   `json:"smsNotifications"`
	InAppNotifications    InAppNotificationSettings `json:"inAppNotifications"`
	NotificationSchedule  NotificationSchedule      `json:"notificationSchedule"`
	NotificationFrequency string                    `json:"notificationFrequency"` // immediate, daily, weekly
}

type EmailNotificationSettings struct {
	Enabled              bool `json:"enabled"`
	SecurityAlerts       bool `json:"securityAlerts"`
	LoginNotifications   bool `json:"loginNotifications"`
	PasswordChanges      bool `json:"passwordChanges"`
	AccountUpdates       bool `json:"accountUpdates"`
	OrganizationUpdates  bool `json:"organizationUpdates"`
	BillingNotifications bool `json:"billingNotifications"`
	MarketingEmails      bool `json:"marketingEmails"`
	ProductUpdates       bool `json:"productUpdates"`
	WeeklyDigest         bool `json:"weeklyDigest"`
	MonthlyReport        bool `json:"monthlyReport"`
}

type PushNotificationSettings struct {
	Enabled              bool               `json:"enabled"`
	SecurityAlerts       bool               `json:"securityAlerts"`
	LoginNotifications   bool               `json:"loginNotifications"`
	MessageNotifications bool               `json:"messageNotifications"`
	TaskReminders        bool               `json:"taskReminders"`
	MeetingReminders     bool               `json:"meetingReminders"`
	QuietHours           QuietHoursSettings `json:"quietHours"`
}

type SMSNotificationSettings struct {
	Enabled                 bool `json:"enabled"`
	SecurityAlerts          bool `json:"securityAlerts"`
	TwoFactorAuthentication bool `json:"twoFactorAuthentication"`
	PasswordResets          bool `json:"passwordResets"`
	CriticalAlerts          bool `json:"criticalAlerts"`
}

type InAppNotificationSettings struct {
	Enabled        bool `json:"enabled"`
	Sound          bool `json:"sound"`
	BadgeCount     bool `json:"badgeCount"`
	ShowPreview    bool `json:"showPreview"`
	AutoMarkAsRead bool `json:"autoMarkAsRead"`
	GroupSimilar   bool `json:"groupSimilar"`
}

type NotificationSchedule struct {
	TimeZone    string `json:"timeZone"`
	StartTime   string `json:"startTime"`   // HH:MM format
	EndTime     string `json:"endTime"`     // HH:MM format
	WeekendMode string `json:"weekendMode"` // same, reduced, disabled
	Holidays    bool   `json:"holidays"`    // respect holiday settings
}

type QuietHoursSettings struct {
	Enabled   bool   `json:"enabled"`
	StartTime string `json:"startTime"` // HH:MM format
	EndTime   string `json:"endTime"`   // HH:MM format
	Weekends  bool   `json:"weekends"`  // apply to weekends
}

type CommunicationPreferences struct {
	Language               string          `json:"language"`
	TimeZone               string          `json:"timeZone"`
	DateFormat             string          `json:"dateFormat"`
	TimeFormat             string          `json:"timeFormat"` // 12h, 24h
	NumberFormat           string          `json:"numberFormat"`
	CurrencyFormat         string          `json:"currencyFormat"`
	PreferredContactMethod string          `json:"preferredContactMethod"` // email, phone, app
	CommunicationFrequency string          `json:"communicationFrequency"` // immediate, daily, weekly
	UnsubscribeList        []string        `json:"unsubscribeList,omitempty"`
	OptInPreferences       map[string]bool `json:"optInPreferences,omitempty"`
}

type UIPreferences struct {
	Theme               string                 `json:"theme"`       // light, dark, auto
	ColorScheme         string                 `json:"colorScheme"` // default, blue, green, etc.
	FontSize            string                 `json:"fontSize"`    // small, medium, large
	FontFamily          string                 `json:"fontFamily"`
	Layout              string                 `json:"layout"` // compact, comfortable, spacious
	SidebarCollapsed    bool                   `json:"sidebarCollapsed"`
	ShowProfilePictures bool                   `json:"showProfilePictures"`
	ShowOnlineStatus    bool                   `json:"showOnlineStatus"`
	AnimationsEnabled   bool                   `json:"animationsEnabled"`
	ReducedMotion       bool                   `json:"reducedMotion"`
	HighContrast        bool                   `json:"highContrast"`
	DashboardLayout     DashboardLayout        `json:"dashboardLayout"`
	TablePreferences    TablePreferences       `json:"tablePreferences"`
	ViewPreferences     map[string]interface{} `json:"viewPreferences,omitempty"`
}

type DashboardLayout struct {
	Widgets     []DashboardWidget `json:"widgets"`
	Columns     int               `json:"columns"`
	CompactMode bool              `json:"compactMode"`
	RefreshRate int               `json:"refreshRate"` // seconds
}

type DashboardWidget struct {
	ID       string                 `json:"id"`
	Type     string                 `json:"type"`
	Position int                    `json:"position"`
	Size     string                 `json:"size"` // small, medium, large
	Visible  bool                   `json:"visible"`
	Config   map[string]interface{} `json:"config,omitempty"`
}

type TablePreferences struct {
	DefaultPageSize  int            `json:"defaultPageSize"`
	ShowRowNumbers   bool           `json:"showRowNumbers"`
	ShowGridLines    bool           `json:"showGridLines"`
	StickyHeaders    bool           `json:"stickyHeaders"`
	CompactRows      bool           `json:"compactRows"`
	DefaultSortOrder string         `json:"defaultSortOrder"` // asc, desc
	HiddenColumns    []string       `json:"hiddenColumns,omitempty"`
	ColumnWidths     map[string]int `json:"columnWidths,omitempty"`
}

type SecurityPreferences struct {
	TwoFactorEnabled         bool                   `json:"twoFactorEnabled"`
	PreferredMFAMethod       string                 `json:"preferredMfaMethod"` // totp, sms, email
	SessionTimeout           int                    `json:"sessionTimeout"`     // minutes
	RequirePasswordChange    bool                   `json:"requirePasswordChange"`
	PasswordChangeInterval   int                    `json:"passwordChangeInterval"` // days
	LoginNotifications       bool                   `json:"loginNotifications"`
	SuspiciousActivityAlerts bool                   `json:"suspiciousActivityAlerts"`
	DeviceTrackingEnabled    bool                   `json:"deviceTrackingEnabled"`
	LocationTrackingEnabled  bool                   `json:"locationTrackingEnabled"`
	DataSharingPreferences   DataSharingPreferences `json:"dataSharingPreferences"`
	PrivacyLevel             string                 `json:"privacyLevel"` // low, medium, high
	AllowedIPRanges          []string               `json:"allowedIpRanges,omitempty"`
	BlockedCountries         []string               `json:"blockedCountries,omitempty"`
	SecurityQuestions        []SecurityQuestion     `json:"securityQuestions,omitempty"`
}

type DataSharingPreferences struct {
	ShareUsageData       bool `json:"shareUsageData"`
	ShareAnalyticsData   bool `json:"shareAnalyticsData"`
	ShareCrashReports    bool `json:"shareCrashReports"`
	SharePerformanceData bool `json:"sharePerformanceData"`
	AllowPersonalization bool `json:"allowPersonalization"`
	AllowTargetedAds     bool `json:"allowTargetedAds"`
}

type SecurityQuestion struct {
	Question string `json:"question"`
	Answer   string `json:"answer"` // This should be hashed
}

type AccessibilityPreferences struct {
	ScreenReaderEnabled     bool   `json:"screenReaderEnabled"`
	HighContrastMode        bool   `json:"highContrastMode"`
	LargeTextMode           bool   `json:"largeTextMode"`
	ReducedMotion           bool   `json:"reducedMotion"`
	KeyboardNavigationOnly  bool   `json:"keyboardNavigationOnly"`
	VoiceControlEnabled     bool   `json:"voiceControlEnabled"`
	ColorBlindnessSupport   string `json:"colorBlindnessSupport"` // none, protanopia, deuteranopia, tritanopia
	TextToSpeechEnabled     bool   `json:"textToSpeechEnabled"`
	SpeechToTextEnabled     bool   `json:"speechToTextEnabled"`
	CaptionsEnabled         bool   `json:"captionsEnabled"`
	AudioDescriptionEnabled bool   `json:"audioDescriptionEnabled"`
	FocusIndicatorEnhanced  bool   `json:"focusIndicatorEnhanced"`
	CustomCSSEnabled        bool   `json:"customCssEnabled"`
	CustomCSS               string `json:"customCss,omitempty"`
}

type IntegrationPreferences struct {
	EnabledIntegrations      []string                     `json:"enabledIntegrations"`
	CalendarSyncEnabled      bool                         `json:"calendarSyncEnabled"`
	ContactSyncEnabled       bool                         `json:"contactSyncEnabled"`
	EmailSyncEnabled         bool                         `json:"emailSyncEnabled"`
	SlackIntegration         SlackIntegrationSettings     `json:"slackIntegration"`
	MicrosoftIntegration     MicrosoftIntegrationSettings `json:"microsoftIntegration"`
	GoogleIntegration        GoogleIntegrationSettings    `json:"googleIntegration"`
	WebhookPreferences       WebhookPreferences           `json:"webhookPreferences"`
	APIAccessPreferences     APIAccessPreferences         `json:"apiAccessPreferences"`
	ThirdPartyAppPermissions map[string]AppPermissions    `json:"thirdPartyAppPermissions,omitempty"`
}

type SlackIntegrationSettings struct {
	Enabled              bool     `json:"enabled"`
	WorkspaceID          string   `json:"workspaceId,omitempty"`
	NotificationChannels []string `json:"notificationChannels,omitempty"`
	StatusSyncEnabled    bool     `json:"statusSyncEnabled"`
}

type MicrosoftIntegrationSettings struct {
	Enabled             bool `json:"enabled"`
	OutlookSyncEnabled  bool `json:"outlookSyncEnabled"`
	TeamsSyncEnabled    bool `json:"teamsSyncEnabled"`
	OneDriveSyncEnabled bool `json:"oneDriveSyncEnabled"`
}

type GoogleIntegrationSettings struct {
	Enabled             bool `json:"enabled"`
	CalendarSyncEnabled bool `json:"calendarSyncEnabled"`
	ContactsSyncEnabled bool `json:"contactsSyncEnabled"`
	DriveSyncEnabled    bool `json:"driveSyncEnabled"`
}

type WebhookPreferences struct {
	Enabled        bool     `json:"enabled"`
	AllowedEvents  []string `json:"allowedEvents,omitempty"`
	RetryAttempts  int      `json:"retryAttempts"`
	TimeoutSeconds int      `json:"timeoutSeconds"`
}

type APIAccessPreferences struct {
	Enabled         bool     `json:"enabled"`
	AllowedScopes   []string `json:"allowedScopes,omitempty"`
	RateLimitTier   string   `json:"rateLimitTier"`
	RequireApproval bool     `json:"requireApproval"`
	LogAPIRequests  bool     `json:"logApiRequests"`
}

type AppPermissions struct {
	Granted     []string  `json:"granted"`
	Denied      []string  `json:"denied"`
	LastUpdated time.Time `json:"lastUpdated"`
}

type PreferenceCategory struct {
	ID          string              `json:"id"`
	Name        string              `json:"name"`
	Description string              `json:"description"`
	Icon        string              `json:"icon,omitempty"`
	Order       int                 `json:"order"`
	Settings    []PreferenceSetting `json:"settings"`
}

type PreferenceSetting struct {
	Key         string               `json:"key"`
	Name        string               `json:"name"`
	Description string               `json:"description,omitempty"`
	Type        string               `json:"type"` // boolean, string, number, select, multi-select
	Default     interface{}          `json:"default"`
	Options     []PreferenceOption   `json:"options,omitempty"`
	Validation  PreferenceValidation `json:"validation,omitempty"`
	Sensitive   bool                 `json:"sensitive"`
	Required    bool                 `json:"required"`
	Readonly    bool                 `json:"readonly"`
	Conditional *PreferenceCondition `json:"conditional,omitempty"`
}

type PreferenceOption struct {
	Value       interface{} `json:"value"`
	Label       string      `json:"label"`
	Description string      `json:"description,omitempty"`
	Disabled    bool        `json:"disabled"`
}

type PreferenceValidation struct {
	MinLength *int     `json:"minLength,omitempty"`
	MaxLength *int     `json:"maxLength,omitempty"`
	Min       *float64 `json:"min,omitempty"`
	Max       *float64 `json:"max,omitempty"`
	Pattern   string   `json:"pattern,omitempty"`
	Custom    string   `json:"custom,omitempty"`
}

type PreferenceCondition struct {
	Key      string      `json:"key"`
	Operator string      `json:"operator"` // equals, not_equals, in, not_in
	Value    interface{} `json:"value"`
}

type PreferenceSchema struct {
	Category string              `json:"category"`
	Settings []PreferenceSetting `json:"settings"`
	Version  string              `json:"version"`
}

type PreferenceValidationResult struct {
	Valid    bool                          `json:"valid"`
	Errors   []PreferenceValidationError   `json:"errors,omitempty"`
	Warnings []PreferenceValidationWarning `json:"warnings,omitempty"`
}

type PreferenceValidationError struct {
	Key     string `json:"key"`
	Code    string `json:"code"`
	Message string `json:"message"`
}

type PreferenceValidationWarning struct {
	Key     string `json:"key"`
	Code    string `json:"code"`
	Message string `json:"message"`
}

type PreferenceHistoryOptions struct {
	Category string    `json:"category,omitempty"`
	Since    time.Time `json:"since,omitempty"`
	Until    time.Time `json:"until,omitempty"`
	Limit    int       `json:"limit"`
	Offset   int       `json:"offset"`
}

type PreferenceHistoryResult struct {
	Changes []PreferenceChange `json:"changes"`
	Total   int                `json:"total"`
	HasMore bool               `json:"hasMore"`
}

type PreferenceChange struct {
	ID        xid.ID                 `json:"id"`
	UserID    xid.ID                 `json:"userId"`
	Category  string                 `json:"category"`
	Key       string                 `json:"key"`
	OldValue  interface{}            `json:"oldValue,omitempty"`
	NewValue  interface{}            `json:"newValue,omitempty"`
	ChangedAt time.Time              `json:"changedAt"`
	ChangedBy xid.ID                 `json:"changedBy"`
	Source    string                 `json:"source"` // user, system, admin, api
	Metadata  map[string]interface{} `json:"metadata,omitempty"`
}

type PreferenceExport struct {
	UserID      xid.ID          `json:"userId"`
	Preferences UserPreferences `json:"preferences"`
	ExportedAt  time.Time       `json:"exportedAt"`
	Version     string          `json:"version"`
	Checksum    string          `json:"checksum"`
}

type PreferenceImport struct {
	Preferences UserPreferences `json:"preferences"`
	Overwrite   bool            `json:"overwrite"`
	Version     string          `json:"version"`
	Checksum    string          `json:"checksum"`
}

// preferencesService implements the PreferencesService interface
type preferencesService struct {
	userRepo  repository.UserRepository
	auditRepo repository.AuditRepository
}

// NewPreferencesService creates a new preferences service
func NewPreferencesService(
	userRepo repository.UserRepository,
	auditRepo repository.AuditRepository,
) PreferencesService {
	return &preferencesService{
		userRepo:  userRepo,
		auditRepo: auditRepo,
	}
}

// GetPreferences retrieves user preferences
func (s *preferencesService) GetPreferences(ctx context.Context, userID xid.ID) (*UserPreferences, error) {
	user, err := s.userRepo.GetByID(ctx, userID)
	if err != nil {
		return nil, errors.Wrap(err, errors.CodeNotFound, "user not found")
	}

	// Extract preferences from custom attributes
	prefs := s.extractPreferencesFromUser(user)
	return prefs, nil
}

// UpdatePreferences updates user preferences
func (s *preferencesService) UpdatePreferences(ctx context.Context, userID xid.ID, req UpdatePreferencesRequest) (*UserPreferences, error) {
	// Get current user
	user, err := s.userRepo.GetByID(ctx, userID)
	if err != nil {
		return nil, errors.Wrap(err, errors.CodeNotFound, "user not found")
	}

	// Get current preferences
	currentPrefs := s.extractPreferencesFromUser(user)

	// Update preferences
	if req.NotificationPreferences != nil {
		currentPrefs.NotificationPreferences = *req.NotificationPreferences
	}
	if req.CommunicationPreferences != nil {
		currentPrefs.CommunicationPreferences = *req.CommunicationPreferences
	}
	if req.UIPreferences != nil {
		currentPrefs.UIPreferences = *req.UIPreferences
	}
	if req.SecurityPreferences != nil {
		currentPrefs.SecurityPreferences = *req.SecurityPreferences
	}
	if req.AccessibilityPreferences != nil {
		currentPrefs.AccessibilityPreferences = *req.AccessibilityPreferences
	}
	if req.IntegrationPreferences != nil {
		currentPrefs.IntegrationPreferences = *req.IntegrationPreferences
	}
	if req.CustomPreferences != nil {
		if currentPrefs.CustomPreferences == nil {
			currentPrefs.CustomPreferences = make(map[string]interface{})
		}
		for key, value := range req.CustomPreferences {
			currentPrefs.CustomPreferences[key] = value
		}
	}

	currentPrefs.UpdatedAt = time.Now()
	currentPrefs.Version++

	// Save preferences to user custom attributes
	customAttrs := user.CustomAttributes
	if customAttrs == nil {
		customAttrs = make(map[string]interface{})
	}

	customAttrs["preferences"] = currentPrefs

	// Update user
	input := repository.UpdateUserInput{
		CustomAttributes: customAttrs,
	}

	_, err = s.userRepo.Update(ctx, userID, input)
	if err != nil {
		return nil, errors.Wrap(err, errors.CodeInternalServer, "failed to update preferences")
	}

	// Audit log
	s.auditPreferencesUpdate(ctx, userID, userID, "preferences_updated")

	return currentPrefs, nil
}

// ResetPreferences resets user preferences to defaults
func (s *preferencesService) ResetPreferences(ctx context.Context, userID xid.ID) (*UserPreferences, error) {
	// Get default preferences
	defaultPrefs := s.getDefaultPreferences(userID)

	// Update user with default preferences
	req := UpdatePreferencesRequest{
		NotificationPreferences:  &defaultPrefs.NotificationPreferences,
		CommunicationPreferences: &defaultPrefs.CommunicationPreferences,
		UIPreferences:            &defaultPrefs.UIPreferences,
		SecurityPreferences:      &defaultPrefs.SecurityPreferences,
		AccessibilityPreferences: &defaultPrefs.AccessibilityPreferences,
		IntegrationPreferences:   &defaultPrefs.IntegrationPreferences,
		CustomPreferences:        defaultPrefs.CustomPreferences,
	}

	return s.UpdatePreferences(ctx, userID, req)
}

// Notification preferences
func (s *preferencesService) GetNotificationPreferences(ctx context.Context, userID xid.ID) (*NotificationPreferences, error) {
	prefs, err := s.GetPreferences(ctx, userID)
	if err != nil {
		return nil, err
	}
	return &prefs.NotificationPreferences, nil
}

func (s *preferencesService) UpdateNotificationPreferences(ctx context.Context, userID xid.ID, prefs NotificationPreferences) error {
	req := UpdatePreferencesRequest{
		NotificationPreferences: &prefs,
	}
	_, err := s.UpdatePreferences(ctx, userID, req)
	return err
}

// Communication preferences
func (s *preferencesService) GetCommunicationPreferences(ctx context.Context, userID xid.ID) (*CommunicationPreferences, error) {
	prefs, err := s.GetPreferences(ctx, userID)
	if err != nil {
		return nil, err
	}
	return &prefs.CommunicationPreferences, nil
}

func (s *preferencesService) UpdateCommunicationPreferences(ctx context.Context, userID xid.ID, prefs CommunicationPreferences) error {
	req := UpdatePreferencesRequest{
		CommunicationPreferences: &prefs,
	}
	_, err := s.UpdatePreferences(ctx, userID, req)
	return err
}

// UI preferences
func (s *preferencesService) GetUIPreferences(ctx context.Context, userID xid.ID) (*UIPreferences, error) {
	prefs, err := s.GetPreferences(ctx, userID)
	if err != nil {
		return nil, err
	}
	return &prefs.UIPreferences, nil
}

func (s *preferencesService) UpdateUIPreferences(ctx context.Context, userID xid.ID, prefs UIPreferences) error {
	req := UpdatePreferencesRequest{
		UIPreferences: &prefs,
	}
	_, err := s.UpdatePreferences(ctx, userID, req)
	return err
}

// Security preferences
func (s *preferencesService) GetSecurityPreferences(ctx context.Context, userID xid.ID) (*SecurityPreferences, error) {
	prefs, err := s.GetPreferences(ctx, userID)
	if err != nil {
		return nil, err
	}
	return &prefs.SecurityPreferences, nil
}

func (s *preferencesService) UpdateSecurityPreferences(ctx context.Context, userID xid.ID, prefs SecurityPreferences) error {
	req := UpdatePreferencesRequest{
		SecurityPreferences: &prefs,
	}
	_, err := s.UpdatePreferences(ctx, userID, req)
	return err
}

// Accessibility preferences
func (s *preferencesService) GetAccessibilityPreferences(ctx context.Context, userID xid.ID) (*AccessibilityPreferences, error) {
	prefs, err := s.GetPreferences(ctx, userID)
	if err != nil {
		return nil, err
	}
	return &prefs.AccessibilityPreferences, nil
}

func (s *preferencesService) UpdateAccessibilityPreferences(ctx context.Context, userID xid.ID, prefs AccessibilityPreferences) error {
	req := UpdatePreferencesRequest{
		AccessibilityPreferences: &prefs,
	}
	_, err := s.UpdatePreferences(ctx, userID, req)
	return err
}

// Integration preferences
func (s *preferencesService) GetIntegrationPreferences(ctx context.Context, userID xid.ID) (*IntegrationPreferences, error) {
	prefs, err := s.GetPreferences(ctx, userID)
	if err != nil {
		return nil, err
	}
	return &prefs.IntegrationPreferences, nil
}

func (s *preferencesService) UpdateIntegrationPreferences(ctx context.Context, userID xid.ID, prefs IntegrationPreferences) error {
	req := UpdatePreferencesRequest{
		IntegrationPreferences: &prefs,
	}
	_, err := s.UpdatePreferences(ctx, userID, req)
	return err
}

// Helper methods

func (s *preferencesService) extractPreferencesFromUser(user *ent.User) *UserPreferences {
	// Try to get preferences from custom attributes
	if user.CustomAttributes != nil {
		if prefsData, exists := user.CustomAttributes["preferences"]; exists {
			var prefs UserPreferences
			if prefsBytes, err := json.Marshal(prefsData); err == nil {
				if err := json.Unmarshal(prefsBytes, &prefs); err == nil {
					return &prefs
				}
			}
		}
	}

	// Return default preferences if not found
	return s.getDefaultPreferences(user.ID)
}

func (s *preferencesService) getDefaultPreferences(userID xid.ID) *UserPreferences {
	return &UserPreferences{
		UserID: userID,
		NotificationPreferences: NotificationPreferences{
			EmailNotifications: EmailNotificationSettings{
				Enabled:              true,
				SecurityAlerts:       true,
				LoginNotifications:   true,
				PasswordChanges:      true,
				AccountUpdates:       true,
				OrganizationUpdates:  true,
				BillingNotifications: true,
				MarketingEmails:      false,
				ProductUpdates:       true,
				WeeklyDigest:         false,
				MonthlyReport:        false,
			},
			PushNotifications: PushNotificationSettings{
				Enabled:              true,
				SecurityAlerts:       true,
				LoginNotifications:   false,
				MessageNotifications: true,
				TaskReminders:        true,
				MeetingReminders:     true,
				QuietHours: QuietHoursSettings{
					Enabled:   false,
					StartTime: "22:00",
					EndTime:   "08:00",
					Weekends:  true,
				},
			},
			SMSNotifications: SMSNotificationSettings{
				Enabled:                 true,
				SecurityAlerts:          true,
				TwoFactorAuthentication: true,
				PasswordResets:          true,
				CriticalAlerts:          true,
			},
			InAppNotifications: InAppNotificationSettings{
				Enabled:        true,
				Sound:          true,
				BadgeCount:     true,
				ShowPreview:    true,
				AutoMarkAsRead: false,
				GroupSimilar:   true,
			},
			NotificationSchedule: NotificationSchedule{
				TimeZone:    "UTC",
				StartTime:   "09:00",
				EndTime:     "17:00",
				WeekendMode: "reduced",
				Holidays:    true,
			},
			NotificationFrequency: "immediate",
		},
		CommunicationPreferences: CommunicationPreferences{
			Language:               "en",
			TimeZone:               "UTC",
			DateFormat:             "MM/DD/YYYY",
			TimeFormat:             "12h",
			NumberFormat:           "1,234.56",
			CurrencyFormat:         "USD",
			PreferredContactMethod: "email",
			CommunicationFrequency: "immediate",
			OptInPreferences:       make(map[string]bool),
		},
		UIPreferences: UIPreferences{
			Theme:               "light",
			ColorScheme:         "default",
			FontSize:            "medium",
			FontFamily:          "system",
			Layout:              "comfortable",
			SidebarCollapsed:    false,
			ShowProfilePictures: true,
			ShowOnlineStatus:    true,
			AnimationsEnabled:   true,
			ReducedMotion:       false,
			HighContrast:        false,
			DashboardLayout: DashboardLayout{
				Widgets:     []DashboardWidget{},
				Columns:     3,
				CompactMode: false,
				RefreshRate: 300,
			},
			TablePreferences: TablePreferences{
				DefaultPageSize:  25,
				ShowRowNumbers:   false,
				ShowGridLines:    true,
				StickyHeaders:    true,
				CompactRows:      false,
				DefaultSortOrder: "asc",
				HiddenColumns:    []string{},
				ColumnWidths:     make(map[string]int),
			},
			ViewPreferences: make(map[string]interface{}),
		},
		SecurityPreferences: SecurityPreferences{
			TwoFactorEnabled:         false,
			PreferredMFAMethod:       "totp",
			SessionTimeout:           480, // 8 hours
			RequirePasswordChange:    false,
			PasswordChangeInterval:   90,
			LoginNotifications:       true,
			SuspiciousActivityAlerts: true,
			DeviceTrackingEnabled:    true,
			LocationTrackingEnabled:  false,
			PrivacyLevel:             "medium",
			DataSharingPreferences: DataSharingPreferences{
				ShareUsageData:       true,
				ShareAnalyticsData:   false,
				ShareCrashReports:    true,
				SharePerformanceData: false,
				AllowPersonalization: true,
				AllowTargetedAds:     false,
			},
			AllowedIPRanges:   []string{},
			BlockedCountries:  []string{},
			SecurityQuestions: []SecurityQuestion{},
		},
		AccessibilityPreferences: AccessibilityPreferences{
			ScreenReaderEnabled:     false,
			HighContrastMode:        false,
			LargeTextMode:           false,
			ReducedMotion:           false,
			KeyboardNavigationOnly:  false,
			VoiceControlEnabled:     false,
			ColorBlindnessSupport:   "none",
			TextToSpeechEnabled:     false,
			SpeechToTextEnabled:     false,
			CaptionsEnabled:         false,
			AudioDescriptionEnabled: false,
			FocusIndicatorEnhanced:  false,
			CustomCSSEnabled:        false,
			CustomCSS:               "",
		},
		IntegrationPreferences: IntegrationPreferences{
			EnabledIntegrations: []string{},
			CalendarSyncEnabled: false,
			ContactSyncEnabled:  false,
			EmailSyncEnabled:    false,
			SlackIntegration: SlackIntegrationSettings{
				Enabled:              false,
				NotificationChannels: []string{},
				StatusSyncEnabled:    false,
			},
			MicrosoftIntegration: MicrosoftIntegrationSettings{
				Enabled:             false,
				OutlookSyncEnabled:  false,
				TeamsSyncEnabled:    false,
				OneDriveSyncEnabled: false,
			},
			GoogleIntegration: GoogleIntegrationSettings{
				Enabled:             false,
				CalendarSyncEnabled: false,
				ContactsSyncEnabled: false,
				DriveSyncEnabled:    false,
			},
			WebhookPreferences: WebhookPreferences{
				Enabled:        false,
				AllowedEvents:  []string{},
				RetryAttempts:  3,
				TimeoutSeconds: 30,
			},
			APIAccessPreferences: APIAccessPreferences{
				Enabled:         true,
				AllowedScopes:   []string{},
				RateLimitTier:   "standard",
				RequireApproval: false,
				LogAPIRequests:  true,
			},
			ThirdPartyAppPermissions: make(map[string]AppPermissions),
		},
		CustomPreferences: make(map[string]interface{}),
		UpdatedAt:         time.Now(),
		Version:           1,
	}
}

// Audit helper methods
func (s *preferencesService) auditPreferencesUpdate(ctx context.Context, userID, actorID xid.ID, action string) {
	input := repository.CreateAuditInput{
		UserID:       &userID,
		ActorID:      &actorID,
		Action:       action,
		ResourceType: "user_preferences",
		ResourceID:   &userID,
		Status:       "success",
	}
	s.auditRepo.Create(ctx, input)
}

// Placeholder implementations for interface compliance
func (s *preferencesService) GetPreferenceCategories(ctx context.Context) ([]*PreferenceCategory, error) {
	return nil, errors.New(errors.CodeNotImplemented, "not implemented")
}

func (s *preferencesService) GetPreferenceSchema(ctx context.Context, category string) (*PreferenceSchema, error) {
	return nil, errors.New(errors.CodeNotImplemented, "not implemented")
}

func (s *preferencesService) ValidatePreferences(ctx context.Context, userID xid.ID, prefs map[string]interface{}) (*PreferenceValidationResult, error) {
	return nil, errors.New(errors.CodeNotImplemented, "not implemented")
}

func (s *preferencesService) GetPreferenceHistory(ctx context.Context, userID xid.ID, opts PreferenceHistoryOptions) (*PreferenceHistoryResult, error) {
	return nil, errors.New(errors.CodeNotI
	mplemented, "not implemented")
}

func (s *preferencesService) ExportPreferences(ctx context.Context, userID xid.ID) (*PreferenceExport, error) {
	return nil, errors.New(errors.CodeNotImplemented, "not implemented")
}

func (s *preferencesService) ImportPreferences(ctx context.Context, userID xid.ID, data PreferenceImport) (*UserPreferences, error) {
	return nil, errors.New(errors.CodeNotImplemented, "not implemented")
}

func (s *preferencesService) GetOrganizationDefaultPreferences(ctx context.Context, orgID xid.ID) (*UserPreferences, error) {
	return nil, errors.New(errors.CodeNotImplemented, "not implemented")
}

func (s *preferencesService) SetOrganizationDefaultPreferences(ctx context.Context, orgID xid.ID, prefs UserPreferences) error {
	return errors.New(errors.CodeNotImplemented, "not implemented")
}
