// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.28.2
// source: auth.proto

package auth

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthServiceClient is the client API for AuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthServiceClient interface {
	// Login authenticates a user and returns session information
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	// Register creates a new user account
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	// Logout ends the current user session
	Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error)
	// RefreshToken refreshes an access token using a refresh token
	RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*RefreshTokenResponse, error)
	// ForgotPassword initiates the password reset process
	ForgotPassword(ctx context.Context, in *ForgotPasswordRequest, opts ...grpc.CallOption) (*ForgotPasswordResponse, error)
	// ResetPassword resets a user's password using a token
	ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*ResetPasswordResponse, error)
	// VerifyEmail verifies a user's email address
	VerifyEmail(ctx context.Context, in *VerifyEmailRequest, opts ...grpc.CallOption) (*VerifyEmailResponse, error)
	// MFAEnroll enrolls a user in multi-factor authentication
	MFAEnroll(ctx context.Context, in *MFAEnrollRequest, opts ...grpc.CallOption) (*MFAEnrollResponse, error)
	// MFAVerify verifies a multi-factor authentication code
	MFAVerify(ctx context.Context, in *MFAVerifyRequest, opts ...grpc.CallOption) (*MFAVerifyResponse, error)
	// GetMFAMethods gets the MFA methods enabled for a user
	GetMFAMethods(ctx context.Context, in *GetMFAMethodsRequest, opts ...grpc.CallOption) (*GetMFAMethodsResponse, error)
	// SendMFACode sends a code for MFA verification
	SendMFACode(ctx context.Context, in *SendMFACodeRequest, opts ...grpc.CallOption) (*SendMFACodeResponse, error)
	// PasswordlessLogin initiates a passwordless login
	PasswordlessLogin(ctx context.Context, in *PasswordlessLoginRequest, opts ...grpc.CallOption) (*PasswordlessLoginResponse, error)
	// VerifyPasswordlessLogin verifies a passwordless login
	VerifyPasswordlessLogin(ctx context.Context, in *VerifyPasswordlessLoginRequest, opts ...grpc.CallOption) (*VerifyPasswordlessLoginResponse, error)
	// RegisterPasskey registers a new passkey for the user
	RegisterPasskey(ctx context.Context, in *RegisterPasskeyRequest, opts ...grpc.CallOption) (*RegisterPasskeyResponse, error)
	// AuthenticateWithPasskey authenticates a user with a passkey
	AuthenticateWithPasskey(ctx context.Context, in *AuthenticateWithPasskeyRequest, opts ...grpc.CallOption) (*AuthenticateWithPasskeyResponse, error)
}

type authServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthServiceClient(cc grpc.ClientConnInterface) AuthServiceClient {
	return &authServiceClient{cc}
}

func (c *authServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/auth.AuthService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/auth.AuthService/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error) {
	out := new(LogoutResponse)
	err := c.cc.Invoke(ctx, "/auth.AuthService/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*RefreshTokenResponse, error) {
	out := new(RefreshTokenResponse)
	err := c.cc.Invoke(ctx, "/auth.AuthService/RefreshToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ForgotPassword(ctx context.Context, in *ForgotPasswordRequest, opts ...grpc.CallOption) (*ForgotPasswordResponse, error) {
	out := new(ForgotPasswordResponse)
	err := c.cc.Invoke(ctx, "/auth.AuthService/ForgotPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*ResetPasswordResponse, error) {
	out := new(ResetPasswordResponse)
	err := c.cc.Invoke(ctx, "/auth.AuthService/ResetPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) VerifyEmail(ctx context.Context, in *VerifyEmailRequest, opts ...grpc.CallOption) (*VerifyEmailResponse, error) {
	out := new(VerifyEmailResponse)
	err := c.cc.Invoke(ctx, "/auth.AuthService/VerifyEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) MFAEnroll(ctx context.Context, in *MFAEnrollRequest, opts ...grpc.CallOption) (*MFAEnrollResponse, error) {
	out := new(MFAEnrollResponse)
	err := c.cc.Invoke(ctx, "/auth.AuthService/MFAEnroll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) MFAVerify(ctx context.Context, in *MFAVerifyRequest, opts ...grpc.CallOption) (*MFAVerifyResponse, error) {
	out := new(MFAVerifyResponse)
	err := c.cc.Invoke(ctx, "/auth.AuthService/MFAVerify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetMFAMethods(ctx context.Context, in *GetMFAMethodsRequest, opts ...grpc.CallOption) (*GetMFAMethodsResponse, error) {
	out := new(GetMFAMethodsResponse)
	err := c.cc.Invoke(ctx, "/auth.AuthService/GetMFAMethods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) SendMFACode(ctx context.Context, in *SendMFACodeRequest, opts ...grpc.CallOption) (*SendMFACodeResponse, error) {
	out := new(SendMFACodeResponse)
	err := c.cc.Invoke(ctx, "/auth.AuthService/SendMFACode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) PasswordlessLogin(ctx context.Context, in *PasswordlessLoginRequest, opts ...grpc.CallOption) (*PasswordlessLoginResponse, error) {
	out := new(PasswordlessLoginResponse)
	err := c.cc.Invoke(ctx, "/auth.AuthService/PasswordlessLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) VerifyPasswordlessLogin(ctx context.Context, in *VerifyPasswordlessLoginRequest, opts ...grpc.CallOption) (*VerifyPasswordlessLoginResponse, error) {
	out := new(VerifyPasswordlessLoginResponse)
	err := c.cc.Invoke(ctx, "/auth.AuthService/VerifyPasswordlessLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) RegisterPasskey(ctx context.Context, in *RegisterPasskeyRequest, opts ...grpc.CallOption) (*RegisterPasskeyResponse, error) {
	out := new(RegisterPasskeyResponse)
	err := c.cc.Invoke(ctx, "/auth.AuthService/RegisterPasskey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) AuthenticateWithPasskey(ctx context.Context, in *AuthenticateWithPasskeyRequest, opts ...grpc.CallOption) (*AuthenticateWithPasskeyResponse, error) {
	out := new(AuthenticateWithPasskeyResponse)
	err := c.cc.Invoke(ctx, "/auth.AuthService/AuthenticateWithPasskey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServiceServer is the server API for AuthService service.
// All implementations must embed UnimplementedAuthServiceServer
// for forward compatibility
type AuthServiceServer interface {
	// Login authenticates a user and returns session information
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	// Register creates a new user account
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	// Logout ends the current user session
	Logout(context.Context, *LogoutRequest) (*LogoutResponse, error)
	// RefreshToken refreshes an access token using a refresh token
	RefreshToken(context.Context, *RefreshTokenRequest) (*RefreshTokenResponse, error)
	// ForgotPassword initiates the password reset process
	ForgotPassword(context.Context, *ForgotPasswordRequest) (*ForgotPasswordResponse, error)
	// ResetPassword resets a user's password using a token
	ResetPassword(context.Context, *ResetPasswordRequest) (*ResetPasswordResponse, error)
	// VerifyEmail verifies a user's email address
	VerifyEmail(context.Context, *VerifyEmailRequest) (*VerifyEmailResponse, error)
	// MFAEnroll enrolls a user in multi-factor authentication
	MFAEnroll(context.Context, *MFAEnrollRequest) (*MFAEnrollResponse, error)
	// MFAVerify verifies a multi-factor authentication code
	MFAVerify(context.Context, *MFAVerifyRequest) (*MFAVerifyResponse, error)
	// GetMFAMethods gets the MFA methods enabled for a user
	GetMFAMethods(context.Context, *GetMFAMethodsRequest) (*GetMFAMethodsResponse, error)
	// SendMFACode sends a code for MFA verification
	SendMFACode(context.Context, *SendMFACodeRequest) (*SendMFACodeResponse, error)
	// PasswordlessLogin initiates a passwordless login
	PasswordlessLogin(context.Context, *PasswordlessLoginRequest) (*PasswordlessLoginResponse, error)
	// VerifyPasswordlessLogin verifies a passwordless login
	VerifyPasswordlessLogin(context.Context, *VerifyPasswordlessLoginRequest) (*VerifyPasswordlessLoginResponse, error)
	// RegisterPasskey registers a new passkey for the user
	RegisterPasskey(context.Context, *RegisterPasskeyRequest) (*RegisterPasskeyResponse, error)
	// AuthenticateWithPasskey authenticates a user with a passkey
	AuthenticateWithPasskey(context.Context, *AuthenticateWithPasskeyRequest) (*AuthenticateWithPasskeyResponse, error)
	mustEmbedUnimplementedAuthServiceServer()
}

// UnimplementedAuthServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAuthServiceServer struct {
}

func (UnimplementedAuthServiceServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedAuthServiceServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedAuthServiceServer) Logout(context.Context, *LogoutRequest) (*LogoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedAuthServiceServer) RefreshToken(context.Context, *RefreshTokenRequest) (*RefreshTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshToken not implemented")
}
func (UnimplementedAuthServiceServer) ForgotPassword(context.Context, *ForgotPasswordRequest) (*ForgotPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForgotPassword not implemented")
}
func (UnimplementedAuthServiceServer) ResetPassword(context.Context, *ResetPasswordRequest) (*ResetPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPassword not implemented")
}
func (UnimplementedAuthServiceServer) VerifyEmail(context.Context, *VerifyEmailRequest) (*VerifyEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyEmail not implemented")
}
func (UnimplementedAuthServiceServer) MFAEnroll(context.Context, *MFAEnrollRequest) (*MFAEnrollResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MFAEnroll not implemented")
}
func (UnimplementedAuthServiceServer) MFAVerify(context.Context, *MFAVerifyRequest) (*MFAVerifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MFAVerify not implemented")
}
func (UnimplementedAuthServiceServer) GetMFAMethods(context.Context, *GetMFAMethodsRequest) (*GetMFAMethodsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMFAMethods not implemented")
}
func (UnimplementedAuthServiceServer) SendMFACode(context.Context, *SendMFACodeRequest) (*SendMFACodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMFACode not implemented")
}
func (UnimplementedAuthServiceServer) PasswordlessLogin(context.Context, *PasswordlessLoginRequest) (*PasswordlessLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PasswordlessLogin not implemented")
}
func (UnimplementedAuthServiceServer) VerifyPasswordlessLogin(context.Context, *VerifyPasswordlessLoginRequest) (*VerifyPasswordlessLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyPasswordlessLogin not implemented")
}
func (UnimplementedAuthServiceServer) RegisterPasskey(context.Context, *RegisterPasskeyRequest) (*RegisterPasskeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterPasskey not implemented")
}
func (UnimplementedAuthServiceServer) AuthenticateWithPasskey(context.Context, *AuthenticateWithPasskeyRequest) (*AuthenticateWithPasskeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthenticateWithPasskey not implemented")
}
func (UnimplementedAuthServiceServer) mustEmbedUnimplementedAuthServiceServer() {}

// UnsafeAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServiceServer will
// result in compilation errors.
type UnsafeAuthServiceServer interface {
	mustEmbedUnimplementedAuthServiceServer()
}

func RegisterAuthServiceServer(s grpc.ServiceRegistrar, srv AuthServiceServer) {
	s.RegisterService(&AuthService_ServiceDesc, srv)
}

func _AuthService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).Logout(ctx, req.(*LogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_RefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).RefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/RefreshToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).RefreshToken(ctx, req.(*RefreshTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ForgotPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForgotPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ForgotPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/ForgotPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ForgotPassword(ctx, req.(*ForgotPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/ResetPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ResetPassword(ctx, req.(*ResetPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_VerifyEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).VerifyEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/VerifyEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).VerifyEmail(ctx, req.(*VerifyEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_MFAEnroll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MFAEnrollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).MFAEnroll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/MFAEnroll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).MFAEnroll(ctx, req.(*MFAEnrollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_MFAVerify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MFAVerifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).MFAVerify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/MFAVerify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).MFAVerify(ctx, req.(*MFAVerifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetMFAMethods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMFAMethodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetMFAMethods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/GetMFAMethods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetMFAMethods(ctx, req.(*GetMFAMethodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_SendMFACode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMFACodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).SendMFACode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/SendMFACode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).SendMFACode(ctx, req.(*SendMFACodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_PasswordlessLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasswordlessLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).PasswordlessLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/PasswordlessLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).PasswordlessLogin(ctx, req.(*PasswordlessLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_VerifyPasswordlessLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyPasswordlessLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).VerifyPasswordlessLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/VerifyPasswordlessLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).VerifyPasswordlessLogin(ctx, req.(*VerifyPasswordlessLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_RegisterPasskey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterPasskeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).RegisterPasskey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/RegisterPasskey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).RegisterPasskey(ctx, req.(*RegisterPasskeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_AuthenticateWithPasskey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateWithPasskeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).AuthenticateWithPasskey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/AuthenticateWithPasskey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).AuthenticateWithPasskey(ctx, req.(*AuthenticateWithPasskeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthService_ServiceDesc is the grpc.ServiceDesc for AuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.AuthService",
	HandlerType: (*AuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _AuthService_Login_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _AuthService_Register_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _AuthService_Logout_Handler,
		},
		{
			MethodName: "RefreshToken",
			Handler:    _AuthService_RefreshToken_Handler,
		},
		{
			MethodName: "ForgotPassword",
			Handler:    _AuthService_ForgotPassword_Handler,
		},
		{
			MethodName: "ResetPassword",
			Handler:    _AuthService_ResetPassword_Handler,
		},
		{
			MethodName: "VerifyEmail",
			Handler:    _AuthService_VerifyEmail_Handler,
		},
		{
			MethodName: "MFAEnroll",
			Handler:    _AuthService_MFAEnroll_Handler,
		},
		{
			MethodName: "MFAVerify",
			Handler:    _AuthService_MFAVerify_Handler,
		},
		{
			MethodName: "GetMFAMethods",
			Handler:    _AuthService_GetMFAMethods_Handler,
		},
		{
			MethodName: "SendMFACode",
			Handler:    _AuthService_SendMFACode_Handler,
		},
		{
			MethodName: "PasswordlessLogin",
			Handler:    _AuthService_PasswordlessLogin_Handler,
		},
		{
			MethodName: "VerifyPasswordlessLogin",
			Handler:    _AuthService_VerifyPasswordlessLogin_Handler,
		},
		{
			MethodName: "RegisterPasskey",
			Handler:    _AuthService_RegisterPasskey_Handler,
		},
		{
			MethodName: "AuthenticateWithPasskey",
			Handler:    _AuthService_AuthenticateWithPasskey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth.proto",
}

// OAuth2ServiceClient is the client API for OAuth2Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OAuth2ServiceClient interface {
	// Authorize initiates an OAuth2 authorization flow
	Authorize(ctx context.Context, in *AuthorizeRequest, opts ...grpc.CallOption) (*AuthorizeResponse, error)
	// Token exchanges an authorization code for tokens
	Token(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*TokenResponse, error)
	// IntrospectToken provides information about a token
	IntrospectToken(ctx context.Context, in *IntrospectTokenRequest, opts ...grpc.CallOption) (*IntrospectTokenResponse, error)
	// RevokeToken revokes an access or refresh token
	RevokeToken(ctx context.Context, in *RevokeTokenRequest, opts ...grpc.CallOption) (*RevokeTokenResponse, error)
	// GetUserInfo provides user information using a token
	GetUserInfo(ctx context.Context, in *GetUserInfoRequest, opts ...grpc.CallOption) (*GetUserInfoResponse, error)
}

type oAuth2ServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOAuth2ServiceClient(cc grpc.ClientConnInterface) OAuth2ServiceClient {
	return &oAuth2ServiceClient{cc}
}

func (c *oAuth2ServiceClient) Authorize(ctx context.Context, in *AuthorizeRequest, opts ...grpc.CallOption) (*AuthorizeResponse, error) {
	out := new(AuthorizeResponse)
	err := c.cc.Invoke(ctx, "/auth.OAuth2Service/Authorize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oAuth2ServiceClient) Token(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*TokenResponse, error) {
	out := new(TokenResponse)
	err := c.cc.Invoke(ctx, "/auth.OAuth2Service/Token", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oAuth2ServiceClient) IntrospectToken(ctx context.Context, in *IntrospectTokenRequest, opts ...grpc.CallOption) (*IntrospectTokenResponse, error) {
	out := new(IntrospectTokenResponse)
	err := c.cc.Invoke(ctx, "/auth.OAuth2Service/IntrospectToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oAuth2ServiceClient) RevokeToken(ctx context.Context, in *RevokeTokenRequest, opts ...grpc.CallOption) (*RevokeTokenResponse, error) {
	out := new(RevokeTokenResponse)
	err := c.cc.Invoke(ctx, "/auth.OAuth2Service/RevokeToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oAuth2ServiceClient) GetUserInfo(ctx context.Context, in *GetUserInfoRequest, opts ...grpc.CallOption) (*GetUserInfoResponse, error) {
	out := new(GetUserInfoResponse)
	err := c.cc.Invoke(ctx, "/auth.OAuth2Service/GetUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OAuth2ServiceServer is the server API for OAuth2Service service.
// All implementations must embed UnimplementedOAuth2ServiceServer
// for forward compatibility
type OAuth2ServiceServer interface {
	// Authorize initiates an OAuth2 authorization flow
	Authorize(context.Context, *AuthorizeRequest) (*AuthorizeResponse, error)
	// Token exchanges an authorization code for tokens
	Token(context.Context, *TokenRequest) (*TokenResponse, error)
	// IntrospectToken provides information about a token
	IntrospectToken(context.Context, *IntrospectTokenRequest) (*IntrospectTokenResponse, error)
	// RevokeToken revokes an access or refresh token
	RevokeToken(context.Context, *RevokeTokenRequest) (*RevokeTokenResponse, error)
	// GetUserInfo provides user information using a token
	GetUserInfo(context.Context, *GetUserInfoRequest) (*GetUserInfoResponse, error)
	mustEmbedUnimplementedOAuth2ServiceServer()
}

// UnimplementedOAuth2ServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOAuth2ServiceServer struct {
}

func (UnimplementedOAuth2ServiceServer) Authorize(context.Context, *AuthorizeRequest) (*AuthorizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authorize not implemented")
}
func (UnimplementedOAuth2ServiceServer) Token(context.Context, *TokenRequest) (*TokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Token not implemented")
}
func (UnimplementedOAuth2ServiceServer) IntrospectToken(context.Context, *IntrospectTokenRequest) (*IntrospectTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IntrospectToken not implemented")
}
func (UnimplementedOAuth2ServiceServer) RevokeToken(context.Context, *RevokeTokenRequest) (*RevokeTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeToken not implemented")
}
func (UnimplementedOAuth2ServiceServer) GetUserInfo(context.Context, *GetUserInfoRequest) (*GetUserInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (UnimplementedOAuth2ServiceServer) mustEmbedUnimplementedOAuth2ServiceServer() {}

// UnsafeOAuth2ServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OAuth2ServiceServer will
// result in compilation errors.
type UnsafeOAuth2ServiceServer interface {
	mustEmbedUnimplementedOAuth2ServiceServer()
}

func RegisterOAuth2ServiceServer(s grpc.ServiceRegistrar, srv OAuth2ServiceServer) {
	s.RegisterService(&OAuth2Service_ServiceDesc, srv)
}

func _OAuth2Service_Authorize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OAuth2ServiceServer).Authorize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.OAuth2Service/Authorize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OAuth2ServiceServer).Authorize(ctx, req.(*AuthorizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OAuth2Service_Token_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OAuth2ServiceServer).Token(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.OAuth2Service/Token",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OAuth2ServiceServer).Token(ctx, req.(*TokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OAuth2Service_IntrospectToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntrospectTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OAuth2ServiceServer).IntrospectToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.OAuth2Service/IntrospectToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OAuth2ServiceServer).IntrospectToken(ctx, req.(*IntrospectTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OAuth2Service_RevokeToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OAuth2ServiceServer).RevokeToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.OAuth2Service/RevokeToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OAuth2ServiceServer).RevokeToken(ctx, req.(*RevokeTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OAuth2Service_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OAuth2ServiceServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.OAuth2Service/GetUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OAuth2ServiceServer).GetUserInfo(ctx, req.(*GetUserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OAuth2Service_ServiceDesc is the grpc.ServiceDesc for OAuth2Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OAuth2Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.OAuth2Service",
	HandlerType: (*OAuth2ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authorize",
			Handler:    _OAuth2Service_Authorize_Handler,
		},
		{
			MethodName: "Token",
			Handler:    _OAuth2Service_Token_Handler,
		},
		{
			MethodName: "IntrospectToken",
			Handler:    _OAuth2Service_IntrospectToken_Handler,
		},
		{
			MethodName: "RevokeToken",
			Handler:    _OAuth2Service_RevokeToken_Handler,
		},
		{
			MethodName: "GetUserInfo",
			Handler:    _OAuth2Service_GetUserInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth.proto",
}

// SSOServiceClient is the client API for SSOService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SSOServiceClient interface {
	// GetProviders gets available SSO providers
	GetProviders(ctx context.Context, in *GetProvidersRequest, opts ...grpc.CallOption) (*GetProvidersResponse, error)
	// InitiateSSO initiates an SSO authentication flow
	InitiateSSO(ctx context.Context, in *InitiateSSORequest, opts ...grpc.CallOption) (*InitiateSSOResponse, error)
	// CompleteSSO handles the callback from an SSO provider
	CompleteSSO(ctx context.Context, in *CompleteSSORequest, opts ...grpc.CallOption) (*CompleteSSOResponse, error)
}

type sSOServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSSOServiceClient(cc grpc.ClientConnInterface) SSOServiceClient {
	return &sSOServiceClient{cc}
}

func (c *sSOServiceClient) GetProviders(ctx context.Context, in *GetProvidersRequest, opts ...grpc.CallOption) (*GetProvidersResponse, error) {
	out := new(GetProvidersResponse)
	err := c.cc.Invoke(ctx, "/auth.SSOService/GetProviders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sSOServiceClient) InitiateSSO(ctx context.Context, in *InitiateSSORequest, opts ...grpc.CallOption) (*InitiateSSOResponse, error) {
	out := new(InitiateSSOResponse)
	err := c.cc.Invoke(ctx, "/auth.SSOService/InitiateSSO", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sSOServiceClient) CompleteSSO(ctx context.Context, in *CompleteSSORequest, opts ...grpc.CallOption) (*CompleteSSOResponse, error) {
	out := new(CompleteSSOResponse)
	err := c.cc.Invoke(ctx, "/auth.SSOService/CompleteSSO", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SSOServiceServer is the server API for SSOService service.
// All implementations must embed UnimplementedSSOServiceServer
// for forward compatibility
type SSOServiceServer interface {
	// GetProviders gets available SSO providers
	GetProviders(context.Context, *GetProvidersRequest) (*GetProvidersResponse, error)
	// InitiateSSO initiates an SSO authentication flow
	InitiateSSO(context.Context, *InitiateSSORequest) (*InitiateSSOResponse, error)
	// CompleteSSO handles the callback from an SSO provider
	CompleteSSO(context.Context, *CompleteSSORequest) (*CompleteSSOResponse, error)
	mustEmbedUnimplementedSSOServiceServer()
}

// UnimplementedSSOServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSSOServiceServer struct {
}

func (UnimplementedSSOServiceServer) GetProviders(context.Context, *GetProvidersRequest) (*GetProvidersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProviders not implemented")
}
func (UnimplementedSSOServiceServer) InitiateSSO(context.Context, *InitiateSSORequest) (*InitiateSSOResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitiateSSO not implemented")
}
func (UnimplementedSSOServiceServer) CompleteSSO(context.Context, *CompleteSSORequest) (*CompleteSSOResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteSSO not implemented")
}
func (UnimplementedSSOServiceServer) mustEmbedUnimplementedSSOServiceServer() {}

// UnsafeSSOServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SSOServiceServer will
// result in compilation errors.
type UnsafeSSOServiceServer interface {
	mustEmbedUnimplementedSSOServiceServer()
}

func RegisterSSOServiceServer(s grpc.ServiceRegistrar, srv SSOServiceServer) {
	s.RegisterService(&SSOService_ServiceDesc, srv)
}

func _SSOService_GetProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProvidersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSOServiceServer).GetProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.SSOService/GetProviders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSOServiceServer).GetProviders(ctx, req.(*GetProvidersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SSOService_InitiateSSO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitiateSSORequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSOServiceServer).InitiateSSO(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.SSOService/InitiateSSO",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSOServiceServer).InitiateSSO(ctx, req.(*InitiateSSORequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SSOService_CompleteSSO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteSSORequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSOServiceServer).CompleteSSO(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.SSOService/CompleteSSO",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSOServiceServer).CompleteSSO(ctx, req.(*CompleteSSORequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SSOService_ServiceDesc is the grpc.ServiceDesc for SSOService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SSOService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.SSOService",
	HandlerType: (*SSOServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProviders",
			Handler:    _SSOService_GetProviders_Handler,
		},
		{
			MethodName: "InitiateSSO",
			Handler:    _SSOService_InitiateSSO_Handler,
		},
		{
			MethodName: "CompleteSSO",
			Handler:    _SSOService_CompleteSSO_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth.proto",
}
