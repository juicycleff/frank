openapi: 3.0.3
info:
  title: Frank Auth Server API
  description: "Frank is a comprehensive authentication and authorization server that\
    \ provides OAuth2, passwordless login, MFA, \npasskeys, SSO, enterprise SSO, webhooks,\
    \ organizations, and API keys for machine-to-machine authentication.\n"
  contact:
    name: Frank Auth Server
    url: https://github.com/juicycleff/frank
  version: 1.0.0
servers:
- url: https://auth.example.com/api/v1
  description: Production server
- url: http://localhost:8080/api/v1
  description: Local development server
tags:
- name: Auth
  description: Authentication operations
- name: OAuth2
  description: OAuth2 provider and client operations
- name: Passwordless
  description: Passwordless authentication operations
- name: Passkeys
  description: WebAuthn/Passkey operations
- name: MFA
  description: Multi-factor authentication operations
- name: SSO
  description: Single Sign-On operations
- name: Organizations
  description: Organization management operations
- name: Users
  description: User management operations
- name: API Keys
  description: API key operations for machine-to-machine authentication
- name: Webhooks
  description: Webhook management operations
- name: Session
  description: Session management operations
paths:
  /auth/login:
    post:
      tags:
      - Auth
      summary: Log in with email and password
      description: Authenticate a user with email and password
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/auth_login_body"
        required: true
      responses:
        "200":
          description: Successfully authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
        "401":
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Account locked or requires verification
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /auth/register:
    post:
      tags:
      - Auth
      summary: Register a new user
      description: Create a new user account
      operationId: register
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/auth_register_body"
        required: true
      responses:
        "201":
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "409":
          description: Email already in use
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /auth/logout:
    post:
      tags:
      - Auth
      summary: Log out current user
      description: Invalidate the current session and log out the user
      operationId: logout
      responses:
        "200":
          description: Successfully logged out
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_200"
  /auth/refresh:
    post:
      tags:
      - Auth
      summary: Refresh access token
      description: Get a new access token using a refresh token
      operationId: refreshToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/auth_refresh_body"
        required: true
      responses:
        "200":
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_200_1"
        "401":
          description: Invalid refresh token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /auth/forgot-password:
    post:
      tags:
      - Auth
      summary: Request password reset
      description: Initiate the password reset process
      operationId: forgotPassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/auth_forgotpassword_body"
        required: true
      responses:
        "202":
          description: Password reset email sent (if account exists)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_202"
  /auth/reset-password:
    post:
      tags:
      - Auth
      summary: Reset password
      description: Reset password using a token
      operationId: resetPassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/auth_resetpassword_body"
        required: true
      responses:
        "200":
          description: Password reset successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_200_2"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Invalid token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /auth/verify-email:
    post:
      tags:
      - Auth
      summary: Verify email
      description: Verify email address using a token
      operationId: verifyEmail
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/auth_verifyemail_body"
        required: true
      responses:
        "200":
          description: Email verification successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_200_3"
        "401":
          description: Invalid token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /auth/passwordless/email:
    post:
      tags:
      - Passwordless
      summary: Passwordless email login
      description: Request a magic link login for an email address
      operationId: passwordlessEmail
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/passwordless_email_body"
        required: true
      responses:
        "200":
          description: Magic link sent successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_200_4"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /auth/passwordless/sms:
    post:
      tags:
      - Passwordless
      summary: Passwordless SMS login
      description: Request an SMS code login for a phone number
      operationId: passwordlessSMS
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/passwordless_sms_body"
        required: true
      responses:
        "200":
          description: SMS code sent successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_200_5"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /auth/passwordless/verify:
    post:
      tags:
      - Passwordless
      summary: Verify passwordless login
      description: Verify a passwordless login with token or code
      operationId: passwordlessVerify
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/passwordless_verify_body"
        required: true
      responses:
        "200":
          description: Verification successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_200_6"
        "401":
          description: Invalid verification
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /auth/passwordless/methods:
    get:
      tags:
      - Passwordless
      summary: Get passwordless methods
      description: Get available passwordless authentication methods
      operationId: getPasswordlessMethods
      responses:
        "200":
          description: Available methods
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_200_7"
  /auth/passwordless/magic-link:
    post:
      tags:
      - Passwordless
      summary: Generate magic link
      description: Generate a magic link for a user
      operationId: generateMagicLink
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/passwordless_magiclink_body"
        required: true
      responses:
        "200":
          description: Magic link generated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_200_8"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
      - bearerAuth: []
  /auth/mfa/enroll:
    post:
      tags:
      - MFA
      summary: Enroll in MFA
      description: Enroll in a multi-factor authentication method
      operationId: mfaEnroll
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/mfa_enroll_body"
        required: true
      responses:
        "200":
          description: MFA enrollment successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_200_9"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
      - bearerAuth: []
  /auth/mfa/verify:
    post:
      tags:
      - MFA
      summary: Verify MFA
      description: Verify a multi-factor authentication code
      operationId: mfaVerify
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/mfa_verify_body"
        required: true
      responses:
        "200":
          description: MFA verification successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_200_10"
        "401":
          description: Invalid code
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
      - bearerAuth: []
  /auth/mfa/unenroll:
    post:
      tags:
      - MFA
      summary: Unenroll from MFA
      description: Unenroll from a multi-factor authentication method
      operationId: mfaUnenroll
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/mfa_unenroll_body"
        required: true
      responses:
        "200":
          description: MFA unenrollment successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_200_11"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
      - bearerAuth: []
  /auth/mfa/methods:
    get:
      tags:
      - MFA
      summary: Get MFA methods
      description: Get enabled MFA methods for the current user
      operationId: getMFAMethods
      responses:
        "200":
          description: Enabled MFA methods
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_200_12"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
      - bearerAuth: []
  /auth/mfa/send-code:
    post:
      tags:
      - MFA
      summary: Send MFA code
      description: Send a multi-factor authentication code
      operationId: sendMFACode
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/mfa_sendcode_body"
        required: true
      responses:
        "200":
          description: Code sent successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_200_13"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
      - bearerAuth: []
  /auth/passkeys/register/begin:
    post:
      tags:
      - Passkeys
      summary: Begin passkey registration
      description: Start the process of registering a passkey
      operationId: passkeyRegisterBegin
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/register_begin_body"
        required: false
      responses:
        "200":
          description: Registration options
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_200_14"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
      - bearerAuth: []
  /auth/passkeys/register/complete:
    post:
      tags:
      - Passkeys
      summary: Complete passkey registration
      description: Complete the process of registering a passkey
      operationId: passkeyRegisterComplete
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/register_complete_body"
        required: true
      responses:
        "200":
          description: Registration successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RegisteredPasskey"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
      - bearerAuth: []
  /auth/passkeys/login/begin:
    post:
      tags:
      - Passkeys
      summary: Begin passkey login
      description: Start the process of logging in with a passkey
      operationId: passkeyLoginBegin
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties: {}
        required: false
      responses:
        "200":
          description: Authentication options
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_200_14"
        "400":
          description: No passkeys available
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /auth/passkeys/login/complete:
    post:
      tags:
      - Passkeys
      summary: Complete passkey login
      description: Complete the process of logging in with a passkey
      operationId: passkeyLoginComplete
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/login_complete_body"
        required: true
      responses:
        "200":
          description: Authentication successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_200_15"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /auth/passkeys:
    get:
      tags:
      - Passkeys
      summary: Get user passkeys
      description: Get the list of passkeys for the current user
      operationId: getUserPasskeys
      responses:
        "200":
          description: User passkeys
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_200_16"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
      - bearerAuth: []
  /auth/passkeys/{id}:
    put:
      tags:
      - Passkeys
      summary: Update passkey
      description: Update a passkey's name
      operationId: updatePasskey
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/passkeys_id_body"
        required: true
      responses:
        "200":
          description: Passkey updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_200_17"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Passkey not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
      - bearerAuth: []
    delete:
      tags:
      - Passkeys
      summary: Delete passkey
      description: Delete a passkey
      operationId: deletePasskey
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: Passkey deleted
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Passkey not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
      - bearerAuth: []
  /auth/oauth/providers:
    get:
      tags:
      - OAuth2
      summary: List OAuth providers
      description: Get the list of available OAuth providers
      operationId: oauthProvidersList
      responses:
        "200":
          description: Available OAuth providers
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_200_18"
  /auth/oauth/providers/{provider}:
    get:
      tags:
      - OAuth2
      summary: Authenticate with OAuth provider
      description: Start OAuth authentication with a provider
      operationId: oauthProviderAuth
      parameters:
      - name: provider
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: redirect_uri
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: uri
      responses:
        "302":
          description: Redirect to provider
          headers:
            Location:
              style: simple
              explode: false
              schema:
                type: string
                format: uri
        "400":
          description: Invalid provider
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /auth/oauth/callback/{provider}:
    get:
      tags:
      - OAuth2
      summary: OAuth callback
      description: Handle OAuth callback from a provider
      operationId: oauthProviderCallback
      parameters:
      - name: provider
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: code
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: state
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Authentication successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_200_19"
        "302":
          description: Redirect to application
          headers:
            Location:
              style: simple
              explode: false
              schema:
                type: string
                format: uri
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /auth/sso/providers:
    get:
      tags:
      - SSO
      summary: List SSO providers
      description: Get the list of available SSO providers
      operationId: ssoProvidersList
      parameters:
      - name: organization_id
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Available SSO providers
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_200_20"
  /auth/sso/providers/{provider}:
    get:
      tags:
      - SSO
      summary: Authenticate with SSO provider
      description: Start SSO authentication with a provider
      operationId: ssoProviderAuth
      parameters:
      - name: provider
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: redirect_uri
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: uri
      responses:
        "302":
          description: Redirect to provider
          headers:
            Location:
              style: simple
              explode: false
              schema:
                type: string
                format: uri
        "400":
          description: Invalid provider
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /auth/sso/callback/{provider}:
    get:
      tags:
      - SSO
      summary: SSO callback
      description: Handle SSO callback from a provider
      operationId: ssoProviderCallback
      parameters:
      - name: provider
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: code
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: SAMLResponse
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: state
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Authentication successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_200_19"
        "302":
          description: Redirect to application
          headers:
            Location:
              style: simple
              explode: false
              schema:
                type: string
                format: uri
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users/me:
    get:
      tags:
      - Users
      summary: Get current user
      description: Get the profile of the currently logged in user
      operationId: getCurrentUser
      responses:
        "200":
          description: Current user profile
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
      - bearerAuth: []
    put:
      tags:
      - Users
      summary: Update current user
      description: Update the profile of the currently logged in user
      operationId: updateCurrentUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/users_me_body"
        required: true
      responses:
        "200":
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
      - bearerAuth: []
  /users/me/sessions:
    get:
      tags:
      - Session
      - Users
      summary: Get user sessions
      description: Get the active sessions for the current user
      operationId: getUserSessions
      responses:
        "200":
          description: User sessions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_200_21"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
      - bearerAuth: []
  /users/me/sessions/{id}:
    delete:
      tags:
      - Session
      - Users
      summary: Delete session
      description: Delete a specific session for the current user
      operationId: deleteUserSession
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: Session deleted
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
      - bearerAuth: []
  /users:
    get:
      tags:
      - Users
      summary: List users
      description: List users with pagination and filtering
      operationId: listUsers
      parameters:
      - name: offset
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          default: 0
      - name: limit
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          default: 20
      - name: search
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: organization_id
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: List of users
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_200_22"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
      - bearerAuth: []
    post:
      tags:
      - Users
      summary: Create user
      description: Create a new user
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/users_body"
        required: true
      responses:
        "201":
          description: User created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "409":
          description: User already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
      - bearerAuth: []
  /users/{id}:
    get:
      tags:
      - Users
      summary: Get user
      description: Get a specific user
      operationId: getUser
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: User details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
      - bearerAuth: []
    put:
      tags:
      - Users
      summary: Update user
      description: Update a specific user
      operationId: updateUser
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/users_id_body"
        required: true
      responses:
        "200":
          description: User updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
      - bearerAuth: []
    delete:
      tags:
      - Users
      summary: Delete user
      description: Delete a specific user
      operationId: deleteUser
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: User deleted
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
      - bearerAuth: []
  /organizations:
    get:
      tags:
      - Organizations
      summary: List organizations
      description: List organizations with pagination and filtering
      operationId: listOrganizations
      parameters:
      - name: offset
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          default: 0
      - name: limit
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          default: 20
      - name: search
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: List of organizations
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_200_23"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
      - bearerAuth: []
    post:
      tags:
      - Organizations
      summary: Create organization
      description: Create a new organization
      operationId: createOrganization
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/organizations_body"
        required: true
      responses:
        "201":
          description: Organization created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Organization"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "409":
          description: Organization already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
      - bearerAuth: []
  /organizations/{id}:
    get:
      tags:
      - Organizations
      summary: Get organization
      description: Get a specific organization
      operationId: getOrganization
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Organization details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Organization"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Organization not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
      - bearerAuth: []
    put:
      tags:
      - Organizations
      summary: Update organization
      description: Update a specific organization
      operationId: updateOrganization
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/organizations_id_body"
        required: true
      responses:
        "200":
          description: Organization updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Organization"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Organization not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
      - bearerAuth: []
    delete:
      tags:
      - Organizations
      summary: Delete organization
      description: Delete a specific organization
      operationId: deleteOrganization
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: Organization deleted
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Organization not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
      - bearerAuth: []
  /organizations/{id}/members:
    get:
      tags:
      - Organizations
      summary: List organization members
      description: List members of an organization
      operationId: listOrganizationMembers
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: offset
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          default: 0
      - name: limit
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          default: 20
      - name: search
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: List of organization members
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_200_22"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Organization not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
      - bearerAuth: []
    post:
      tags:
      - Organizations
      summary: Add organization member
      description: Add a user to an organization
      operationId: addOrganizationMember
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/id_members_body"
        required: true
      responses:
        "200":
          description: Member added successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_200_24"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Organization not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "409":
          description: User is already a member
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
      - bearerAuth: []
  /organizations/{id}/members/{userId}:
    put:
      tags:
      - Organizations
      summary: Update organization member
      description: Update a member's roles in an organization
      operationId: updateOrganizationMember
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: userId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/members_userId_body"
        required: true
      responses:
        "200":
          description: Member updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_200_25"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Organization or member not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
      - bearerAuth: []
    delete:
      tags:
      - Organizations
      summary: Remove organization member
      description: Remove a user from an organization
      operationId: removeOrganizationMember
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: userId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: Member removed successfully
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Organization or member not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
      - bearerAuth: []
  /organizations/{id}/features:
    get:
      tags:
      - Organizations
      summary: List organization features
      description: List enabled features for an organization
      operationId: listOrganizationFeatures
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: List of organization features
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_200_26"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Organization not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
      - bearerAuth: []
    post:
      tags:
      - Organizations
      summary: Enable organization feature
      description: Enable a feature for an organization
      operationId: enableOrganizationFeature
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/id_features_body"
        required: true
      responses:
        "200":
          description: Feature enabled successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_200_27"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Organization or feature not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
      - bearerAuth: []
  /organizations/{id}/features/{featureKey}:
    delete:
      tags:
      - Organizations
      summary: Disable organization feature
      description: Disable a feature for an organization
      operationId: disableOrganizationFeature
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: featureKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: Feature disabled successfully
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Organization or feature not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
      - bearerAuth: []
  /api-keys:
    get:
      tags:
      - API Keys
      summary: List API keys
      description: List API keys with pagination
      operationId: listAPIKeys
      parameters:
      - name: offset
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          default: 0
      - name: limit
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          default: 20
      - name: type
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: List of API keys
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_200_28"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
      - bearerAuth: []
    post:
      tags:
      - API Keys
      summary: Create API key
      description: Create a new API key
      operationId: createAPIKey
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/apikeys_body"
        required: true
      responses:
        "201":
          description: API key created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIKeyWithKey"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
      - bearerAuth: []
  /api-keys/{id}:
    get:
      tags:
      - API Keys
      summary: Get API key
      description: Get a specific API key
      operationId: getAPIKey
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: API key details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIKey"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: API key not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
      - bearerAuth: []
    put:
      tags:
      - API Keys
      summary: Update API key
      description: Update a specific API key
      operationId: updateAPIKey
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/apikeys_id_body"
        required: true
      responses:
        "200":
          description: API key updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIKey"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: API key not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
      - bearerAuth: []
    delete:
      tags:
      - API Keys
      summary: Delete API key
      description: Delete a specific API key
      operationId: deleteAPIKey
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: API key deleted
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: API key not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
      - bearerAuth: []
  /api-keys/validate:
    post:
      tags:
      - API Keys
      summary: Validate API key
      description: Validate an API key
      operationId: validateAPIKey
      responses:
        "200":
          description: API key is valid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIKey"
        "401":
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
      - apiKeyAuth: []
  /webhooks:
    get:
      tags:
      - Webhooks
      summary: List webhooks
      description: List webhooks with pagination
      operationId: listWebhooks
      parameters:
      - name: offset
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          default: 0
      - name: limit
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          default: 20
      - name: event_types
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      responses:
        "200":
          description: List of webhooks
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_200_29"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
      - bearerAuth: []
    post:
      tags:
      - Webhooks
      summary: Create webhook
      description: Create a new webhook
      operationId: createWebhook
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/webhooks_body"
        required: true
      responses:
        "201":
          description: Webhook created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Webhook"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
      - bearerAuth: []
  /webhooks/{id}:
    get:
      tags:
      - Webhooks
      summary: Get webhook
      description: Get a specific webhook
      operationId: getWebhook
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Webhook details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Webhook"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Webhook not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
      - bearerAuth: []
    put:
      tags:
      - Webhooks
      summary: Update webhook
      description: Update a specific webhook
      operationId: updateWebhook
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/webhooks_id_body"
        required: true
      responses:
        "200":
          description: Webhook updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Webhook"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Webhook not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
      - bearerAuth: []
    delete:
      tags:
      - Webhooks
      summary: Delete webhook
      description: Delete a specific webhook
      operationId: deleteWebhook
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: Webhook deleted
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Webhook not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
      - bearerAuth: []
  /webhooks/{id}/events:
    get:
      tags:
      - Webhooks
      summary: List webhook events
      description: List events for a specific webhook
      operationId: listWebhookEvents
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: offset
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          default: 0
      - name: limit
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          default: 20
      - name: event_type
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: delivered
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      responses:
        "200":
          description: List of webhook events
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_200_30"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Webhook not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
      - bearerAuth: []
  /webhooks/{id}/events/{eventId}/replay:
    post:
      tags:
      - Webhooks
      summary: Replay webhook event
      description: Replay a specific webhook event
      operationId: replayWebhookEvent
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: eventId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Event replayed successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebhookEvent"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Webhook or event not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
      - bearerAuth: []
  /webhooks/trigger:
    post:
      tags:
      - Webhooks
      summary: Trigger webhook event
      description: Manually trigger a webhook event
      operationId: triggerWebhookEvent
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/webhooks_trigger_body"
        required: true
      responses:
        "200":
          description: Event triggered successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebhookEvent"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
      - bearerAuth: []
  /oauth2/authorize:
    get:
      tags:
      - OAuth2
      summary: OAuth2 authorization endpoint
      description: Initiates the OAuth2 authorization code flow
      operationId: authorizeOAuth2
      parameters:
      - name: client_id
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: redirect_uri
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
          format: uri
      - name: response_type
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
          enum:
          - code
      - name: scope
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: state
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: code_challenge
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: code_challenge_method
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - plain
          - S256
      responses:
        "302":
          description: Redirect to authorization page or redirected to client with
            code
          headers:
            Location:
              style: simple
              explode: false
              schema:
                type: string
                format: uri
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /oauth2/token:
    post:
      tags:
      - OAuth2
      summary: OAuth2 token endpoint
      description: Exchange authorization code for tokens
      operationId: tokenOAuth2
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/oauth2_token_body"
        required: true
      responses:
        "200":
          description: Token response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenResponse"
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Invalid client credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /oauth2/revoke:
    post:
      tags:
      - OAuth2
      summary: OAuth2 token revocation
      description: Revoke an access or refresh token
      operationId: revokeOAuth2
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/oauth2_revoke_body"
        required: true
      responses:
        "200":
          description: Token revoked successfully
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Invalid client credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /oauth2/introspect:
    post:
      tags:
      - OAuth2
      summary: OAuth2 token introspection
      description: Check if a token is valid and get information about it
      operationId: introspectOAuth2
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/oauth2_introspect_body"
        required: true
      responses:
        "200":
          description: Token introspection result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_200_31"
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Invalid client credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /oauth2/userinfo:
    get:
      tags:
      - OAuth2
      summary: OpenID Connect userinfo endpoint
      description: Get information about the authenticated user
      operationId: userInfoOAuth2
      responses:
        "200":
          description: User information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserInfo"
        "401":
          description: Invalid token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
      - bearerAuth: []
  /.well-known/openid-configuration:
    get:
      tags:
      - OAuth2
      summary: OpenID Connect configuration
      description: Get the OpenID Connect configuration
      operationId: oidcConfiguration
      responses:
        "200":
          description: OpenID Connect configuration
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_200_32"
  /.well-known/jwks.json:
    get:
      tags:
      - OAuth2
      summary: JSON Web Key Set
      description: Get the JSON Web Key Set for token verification
      operationId: jwksEndpoint
      responses:
        "200":
          description: JSON Web Key Set
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_200_33"
components:
  schemas:
    Error:
      type: object
      properties:
        error:
          $ref: "#/components/schemas/Error_error"
    LoginResponse:
      type: object
      properties:
        user:
          $ref: "#/components/schemas/User"
        token:
          type: string
          description: JWT access token
        refresh_token:
          type: string
        expires_at:
          type: integer
          format: int64
        mfa_required:
          type: boolean
        mfa_types:
          type: array
          items:
            type: string
      example:
        refresh_token: refresh_token
        expires_at: 0
        mfa_required: true
        user:
          metadata: ""
          last_login_at: 2000-01-23T04:56:07.000+00:00
          email_verified: true
          last_name: last_name
          active: true
          created_at: 2000-01-23T04:56:07.000+00:00
          profile_image_url: http://example.com/aeiou
          locale: locale
          updated_at: 2000-01-23T04:56:07.000+00:00
          phone_number: phone_number
          id: id
          first_name: first_name
          email: ""
        mfa_types:
        - mfa_types
        - mfa_types
        token: token
    User:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
          format: email
        first_name:
          type: string
        last_name:
          type: string
        phone_number:
          type: string
        profile_image_url:
          type: string
          format: uri
        locale:
          type: string
        email_verified:
          type: boolean
        active:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        metadata:
          type: object
          additionalProperties: true
        last_login_at:
          type: string
          format: date-time
      example:
        metadata: ""
        last_login_at: 2000-01-23T04:56:07.000+00:00
        email_verified: true
        last_name: last_name
        active: true
        created_at: 2000-01-23T04:56:07.000+00:00
        profile_image_url: http://example.com/aeiou
        locale: locale
        updated_at: 2000-01-23T04:56:07.000+00:00
        phone_number: phone_number
        id: id
        first_name: first_name
        email: ""
    Organization:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        slug:
          type: string
        domain:
          type: string
        logo_url:
          type: string
          format: uri
        plan:
          type: string
        active:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        metadata:
          type: object
          additionalProperties: true
        owner_id:
          type: string
      example:
        metadata: ""
        updated_at: 2000-01-23T04:56:07.000+00:00
        logo_url: http://example.com/aeiou
        owner_id: owner_id
        domain: domain
        name: name
        active: true
        created_at: 2000-01-23T04:56:07.000+00:00
        id: id
        plan: plan
        slug: slug
    Feature:
      type: object
      properties:
        key:
          type: string
        name:
          type: string
        description:
          type: string
        enabled:
          type: boolean
        settings:
          type: object
          additionalProperties: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      example:
        settings: ""
        updated_at: 2000-01-23T04:56:07.000+00:00
        name: name
        description: description
        created_at: 2000-01-23T04:56:07.000+00:00
        key: key
        enabled: true
    APIKey:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        type:
          type: string
        user_id:
          type: string
        organization_id:
          type: string
        active:
          type: boolean
        permissions:
          type: array
          items:
            type: string
        scopes:
          type: array
          items:
            type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        expires_at:
          type: string
          format: date-time
        last_used:
          type: string
          format: date-time
        metadata:
          type: object
          additionalProperties: true
      example:
        metadata: ""
        last_used: 2000-01-23T04:56:07.000+00:00
        active: true
        created_at: 2000-01-23T04:56:07.000+00:00
        type: type
        expires_at: 2000-01-23T04:56:07.000+00:00
        updated_at: 2000-01-23T04:56:07.000+00:00
        user_id: user_id
        permissions:
        - permissions
        - permissions
        organization_id: organization_id
        name: name
        id: id
        scopes:
        - scopes
        - scopes
    APIKeyWithKey:
      type: object
      properties:
        api_key:
          $ref: "#/components/schemas/APIKey"
        key:
          type: string
          description: The plaintext API key (only shown once at creation)
      example:
        api_key:
          metadata: ""
          last_used: 2000-01-23T04:56:07.000+00:00
          active: true
          created_at: 2000-01-23T04:56:07.000+00:00
          type: type
          expires_at: 2000-01-23T04:56:07.000+00:00
          updated_at: 2000-01-23T04:56:07.000+00:00
          user_id: user_id
          permissions:
          - permissions
          - permissions
          organization_id: organization_id
          name: name
          id: id
          scopes:
          - scopes
          - scopes
        key: key
    Session:
      type: object
      properties:
        id:
          type: string
        user_id:
          type: string
        ip_address:
          type: string
        user_agent:
          type: string
        device_id:
          type: string
        location:
          type: string
        organization_id:
          type: string
        expires_at:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
        last_active_at:
          type: string
          format: date-time
        is_active:
          type: boolean
      example:
        expires_at: 2000-01-23T04:56:07.000+00:00
        is_active: true
        device_id: device_id
        user_id: user_id
        last_active_at: 2000-01-23T04:56:07.000+00:00
        organization_id: organization_id
        created_at: 2000-01-23T04:56:07.000+00:00
        location: location
        id: id
        ip_address: ip_address
        user_agent: user_agent
    Webhook:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        url:
          type: string
          format: uri
        event_types:
          type: array
          items:
            type: string
        active:
          type: boolean
        secret:
          type: string
        retry_count:
          type: integer
        timeout_ms:
          type: integer
        format:
          type: string
          enum:
          - json
          - form
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        organization_id:
          type: string
        metadata:
          type: object
          additionalProperties: true
      example:
        metadata: ""
        format: json
        active: true
        created_at: 2000-01-23T04:56:07.000+00:00
        secret: secret
        url: http://example.com/aeiou
        event_types:
        - event_types
        - event_types
        updated_at: 2000-01-23T04:56:07.000+00:00
        retry_count: 0
        organization_id: organization_id
        name: name
        id: id
        timeout_ms: 6
    WebhookEvent:
      type: object
      properties:
        id:
          type: string
        webhook_id:
          type: string
        event_type:
          type: string
        payload:
          type: object
          additionalProperties: true
        delivered:
          type: boolean
        status_code:
          type: integer
        attempts:
          type: integer
        last_attempt_at:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
        response:
          type: string
        error:
          type: string
      example:
        event_type: event_type
        status_code: 0
        webhook_id: webhook_id
        payload: ""
        response: response
        last_attempt_at: 2000-01-23T04:56:07.000+00:00
        created_at: 2000-01-23T04:56:07.000+00:00
        delivered: true
        id: id
        error: error
        attempts: 6
    RegisteredPasskey:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        device_type:
          type: string
        registered_at:
          type: string
          format: date-time
        last_used:
          type: string
          format: date-time
      example:
        registered_at: 2000-01-23T04:56:07.000+00:00
        last_used: 2000-01-23T04:56:07.000+00:00
        name: name
        device_type: device_type
        id: id
    OAuthProvider:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        type:
          type: string
        logo_url:
          type: string
          format: uri
      example:
        logo_url: http://example.com/aeiou
        name: name
        id: id
        type: type
    SSOProvider:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        type:
          type: string
          enum:
          - saml
          - oidc
        logo_url:
          type: string
          format: uri
        domains:
          type: array
          items:
            type: string
        organization_id:
          type: string
      example:
        logo_url: http://example.com/aeiou
        organization_id: organization_id
        name: name
        domains:
        - domains
        - domains
        id: id
        type: saml
    TokenResponse:
      type: object
      properties:
        access_token:
          type: string
        token_type:
          type: string
          default: Bearer
        expires_in:
          type: integer
        refresh_token:
          type: string
        scope:
          type: string
        id_token:
          type: string
      example:
        access_token: access_token
        refresh_token: refresh_token
        scope: scope
        id_token: id_token
        token_type: Bearer
        expires_in: 0
    UserInfo:
      type: object
      properties:
        sub:
          type: string
        email:
          type: string
          format: email
        email_verified:
          type: boolean
        name:
          type: string
        given_name:
          type: string
        family_name:
          type: string
        picture:
          type: string
          format: uri
        locale:
          type: string
      example:
        sub: sub
        email_verified: true
        name: name
        given_name: given_name
        locale: locale
        family_name: family_name
        email: ""
        picture: http://example.com/aeiou
    auth_login_body:
      required:
      - email
      - password
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        organization_id:
          type: string
        remember_me:
          type: boolean
          default: false
        captcha_response:
          type: string
    auth_register_body:
      required:
      - email
      - password
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        first_name:
          type: string
        last_name:
          type: string
        organization_id:
          type: string
        metadata:
          type: object
          additionalProperties: true
    inline_response_200:
      type: object
      properties:
        message:
          type: string
          example: Successfully logged out
      example:
        message: Successfully logged out
    auth_refresh_body:
      required:
      - refresh_token
      type: object
      properties:
        refresh_token:
          type: string
    inline_response_200_1:
      type: object
      properties:
        token:
          type: string
        refresh_token:
          type: string
        expires_at:
          type: integer
          format: int64
      example:
        refresh_token: refresh_token
        expires_at: 0
        token: token
    auth_forgotpassword_body:
      required:
      - email
      type: object
      properties:
        email:
          type: string
          format: email
    inline_response_202:
      type: object
      properties:
        message:
          type: string
          example: "If your email is registered, you will receive a password reset\
            \ link"
      example:
        message: "If your email is registered, you will receive a password reset link"
    auth_resetpassword_body:
      required:
      - new_password
      - token
      type: object
      properties:
        token:
          type: string
        new_password:
          type: string
          format: password
    inline_response_200_2:
      type: object
      properties:
        message:
          type: string
          example: Password has been reset successfully
      example:
        message: Password has been reset successfully
    auth_verifyemail_body:
      required:
      - token
      type: object
      properties:
        token:
          type: string
    inline_response_200_3:
      type: object
      properties:
        message:
          type: string
          example: Email verification successful
      example:
        message: Email verification successful
    passwordless_email_body:
      required:
      - email
      type: object
      properties:
        email:
          type: string
          format: email
        redirect_url:
          type: string
          format: uri
    inline_response_200_4:
      type: object
      properties:
        message:
          type: string
          example: Passwordless login email sent
        verification_id:
          type: string
      example:
        message: Passwordless login email sent
        verification_id: verification_id
    passwordless_sms_body:
      required:
      - phone_number
      type: object
      properties:
        phone_number:
          type: string
        redirect_url:
          type: string
          format: uri
    inline_response_200_5:
      type: object
      properties:
        message:
          type: string
          example: Passwordless login SMS sent
        verification_id:
          type: string
      example:
        message: Passwordless login SMS sent
        verification_id: verification_id
    passwordless_verify_body:
      required:
      - auth_type
      type: object
      properties:
        token:
          type: string
        phone_number:
          type: string
        code:
          type: string
        auth_type:
          type: string
          enum:
          - email
          - sms
    inline_response_200_6:
      type: object
      properties:
        authenticated:
          type: boolean
        user_id:
          type: string
        email:
          type: string
        user:
          $ref: "#/components/schemas/User"
      example:
        authenticated: true
        user_id: user_id
        user:
          metadata: ""
          last_login_at: 2000-01-23T04:56:07.000+00:00
          email_verified: true
          last_name: last_name
          active: true
          created_at: 2000-01-23T04:56:07.000+00:00
          profile_image_url: http://example.com/aeiou
          locale: locale
          updated_at: 2000-01-23T04:56:07.000+00:00
          phone_number: phone_number
          id: id
          first_name: first_name
          email: ""
        email: email
    inline_response_200_7:
      type: object
      properties:
        enabled:
          type: boolean
        methods:
          type: array
          items:
            type: string
            enum:
            - email
            - sms
      example:
        methods:
        - email
        - email
        enabled: true
    passwordless_magiclink_body:
      required:
      - email
      - redirect_url
      - user_id
      type: object
      properties:
        email:
          type: string
          format: email
        user_id:
          type: string
        redirect_url:
          type: string
          format: uri
        expires_in:
          type: integer
          description: Expiration time in seconds
          default: 86400
    inline_response_200_8:
      type: object
      properties:
        magic_link:
          type: string
        expires_in:
          type: integer
          description: Expiration time in seconds
      example:
        magic_link: magic_link
        expires_in: 0
    mfa_enroll_body:
      required:
      - method
      type: object
      properties:
        method:
          type: string
          enum:
          - totp
          - sms
          - email
          - backup_codes
        phone_number:
          type: string
          description: Required for SMS method
        email:
          type: string
          description: Required for email method
          format: email
    inline_response_200_9:
      oneOf:
      - type: object
        properties:
          secret:
            type: string
          uri:
            type: string
          qr_code_data:
            type: string
      - type: object
        properties:
          message:
            type: string
      - type: object
        properties:
          backup_codes:
            type: array
            items:
              type: string
    mfa_verify_body:
      required:
      - code
      - method
      type: object
      properties:
        method:
          type: string
          enum:
          - totp
          - sms
          - email
          - backup_codes
        code:
          type: string
        phone_number:
          type: string
          description: Required for SMS method
    inline_response_200_10:
      type: object
      properties:
        verified:
          type: boolean
      example:
        verified: true
    mfa_unenroll_body:
      required:
      - method
      type: object
      properties:
        method:
          type: string
          enum:
          - totp
          - sms
          - email
          - backup_codes
          - all
    inline_response_200_11:
      type: object
      properties:
        message:
          type: string
          example: MFA method disabled successfully
      example:
        message: MFA method disabled successfully
    inline_response_200_12:
      type: object
      properties:
        methods:
          type: array
          items:
            type: string
      example:
        methods:
        - methods
        - methods
    mfa_sendcode_body:
      required:
      - method
      type: object
      properties:
        method:
          type: string
          enum:
          - sms
          - email
    inline_response_200_13:
      type: object
      properties:
        message:
          type: string
          example: Verification code sent successfully
        expires_at:
          type: integer
          format: int64
      example:
        expires_at: 0
        message: Verification code sent successfully
    register_begin_body:
      type: object
      properties:
        device_name:
          type: string
        device_type:
          type: string
    inline_response_200_14:
      type: object
      properties:
        options:
          type: object
        session_id:
          type: string
      example:
        options: {}
        session_id: session_id
    register_complete_body:
      required:
      - response
      - session_id
      type: object
      properties:
        session_id:
          type: string
        response:
          type: object
        device_name:
          type: string
        device_type:
          type: string
    login_complete_body:
      required:
      - response
      - session_id
      type: object
      properties:
        session_id:
          type: string
        response:
          type: object
    inline_response_200_15:
      type: object
      properties:
        authenticated:
          type: boolean
        user_id:
          type: string
      example:
        authenticated: true
        user_id: user_id
    inline_response_200_16:
      type: object
      properties:
        passkeys:
          type: array
          items:
            $ref: "#/components/schemas/RegisteredPasskey"
      example:
        passkeys:
        - registered_at: 2000-01-23T04:56:07.000+00:00
          last_used: 2000-01-23T04:56:07.000+00:00
          name: name
          device_type: device_type
          id: id
        - registered_at: 2000-01-23T04:56:07.000+00:00
          last_used: 2000-01-23T04:56:07.000+00:00
          name: name
          device_type: device_type
          id: id
    passkeys_id_body:
      required:
      - name
      type: object
      properties:
        name:
          type: string
    inline_response_200_17:
      type: object
      properties:
        message:
          type: string
          example: Passkey updated successfully
      example:
        message: Passkey updated successfully
    inline_response_200_18:
      type: object
      properties:
        providers:
          type: array
          items:
            $ref: "#/components/schemas/OAuthProvider"
      example:
        providers:
        - logo_url: http://example.com/aeiou
          name: name
          id: id
          type: type
        - logo_url: http://example.com/aeiou
          name: name
          id: id
          type: type
    inline_response_200_19:
      type: object
      properties:
        message:
          type: string
        user:
          $ref: "#/components/schemas/User"
      example:
        message: message
        user:
          metadata: ""
          last_login_at: 2000-01-23T04:56:07.000+00:00
          email_verified: true
          last_name: last_name
          active: true
          created_at: 2000-01-23T04:56:07.000+00:00
          profile_image_url: http://example.com/aeiou
          locale: locale
          updated_at: 2000-01-23T04:56:07.000+00:00
          phone_number: phone_number
          id: id
          first_name: first_name
          email: ""
    inline_response_200_20:
      type: object
      properties:
        providers:
          type: array
          items:
            $ref: "#/components/schemas/SSOProvider"
      example:
        providers:
        - logo_url: http://example.com/aeiou
          organization_id: organization_id
          name: name
          domains:
          - domains
          - domains
          id: id
          type: saml
        - logo_url: http://example.com/aeiou
          organization_id: organization_id
          name: name
          domains:
          - domains
          - domains
          id: id
          type: saml
    users_me_body:
      type: object
      properties:
        first_name:
          type: string
        last_name:
          type: string
        phone_number:
          type: string
        profile_image_url:
          type: string
          format: uri
        locale:
          type: string
        metadata:
          type: object
          additionalProperties: true
    inline_response_200_21:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Session"
      example:
        data:
        - expires_at: 2000-01-23T04:56:07.000+00:00
          is_active: true
          device_id: device_id
          user_id: user_id
          last_active_at: 2000-01-23T04:56:07.000+00:00
          organization_id: organization_id
          created_at: 2000-01-23T04:56:07.000+00:00
          location: location
          id: id
          ip_address: ip_address
          user_agent: user_agent
        - expires_at: 2000-01-23T04:56:07.000+00:00
          is_active: true
          device_id: device_id
          user_id: user_id
          last_active_at: 2000-01-23T04:56:07.000+00:00
          organization_id: organization_id
          created_at: 2000-01-23T04:56:07.000+00:00
          location: location
          id: id
          ip_address: ip_address
          user_agent: user_agent
    inline_response_200_22:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/User"
        total:
          type: integer
        pagination:
          $ref: "#/components/schemas/inline_response_200_22_pagination"
      example:
        total: 0
        pagination:
          total: 5
          offset: 6
          limit: 1
        data:
        - metadata: ""
          last_login_at: 2000-01-23T04:56:07.000+00:00
          email_verified: true
          last_name: last_name
          active: true
          created_at: 2000-01-23T04:56:07.000+00:00
          profile_image_url: http://example.com/aeiou
          locale: locale
          updated_at: 2000-01-23T04:56:07.000+00:00
          phone_number: phone_number
          id: id
          first_name: first_name
          email: ""
        - metadata: ""
          last_login_at: 2000-01-23T04:56:07.000+00:00
          email_verified: true
          last_name: last_name
          active: true
          created_at: 2000-01-23T04:56:07.000+00:00
          profile_image_url: http://example.com/aeiou
          locale: locale
          updated_at: 2000-01-23T04:56:07.000+00:00
          phone_number: phone_number
          id: id
          first_name: first_name
          email: ""
    users_body:
      required:
      - email
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        first_name:
          type: string
        last_name:
          type: string
        phone_number:
          type: string
        profile_image_url:
          type: string
          format: uri
        locale:
          type: string
        metadata:
          type: object
          additionalProperties: true
        active:
          type: boolean
          default: true
        email_verified:
          type: boolean
          default: false
        organization_id:
          type: string
    users_id_body:
      type: object
      properties:
        email:
          type: string
          format: email
        first_name:
          type: string
        last_name:
          type: string
        phone_number:
          type: string
        profile_image_url:
          type: string
          format: uri
        locale:
          type: string
        metadata:
          type: object
          additionalProperties: true
        active:
          type: boolean
        email_verified:
          type: boolean
    inline_response_200_23:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Organization"
        total:
          type: integer
        pagination:
          $ref: "#/components/schemas/inline_response_200_22_pagination"
      example:
        total: 0
        pagination:
          total: 5
          offset: 6
          limit: 1
        data:
        - metadata: ""
          updated_at: 2000-01-23T04:56:07.000+00:00
          logo_url: http://example.com/aeiou
          owner_id: owner_id
          domain: domain
          name: name
          active: true
          created_at: 2000-01-23T04:56:07.000+00:00
          id: id
          plan: plan
          slug: slug
        - metadata: ""
          updated_at: 2000-01-23T04:56:07.000+00:00
          logo_url: http://example.com/aeiou
          owner_id: owner_id
          domain: domain
          name: name
          active: true
          created_at: 2000-01-23T04:56:07.000+00:00
          id: id
          plan: plan
          slug: slug
    organizations_body:
      required:
      - name
      type: object
      properties:
        name:
          type: string
        slug:
          type: string
        domain:
          type: string
        logo_url:
          type: string
          format: uri
        plan:
          type: string
        metadata:
          type: object
          additionalProperties: true
        trial_days:
          type: integer
          default: 0
        features:
          type: array
          items:
            type: string
    organizations_id_body:
      type: object
      properties:
        name:
          type: string
        domain:
          type: string
        logo_url:
          type: string
          format: uri
        plan:
          type: string
        active:
          type: boolean
        metadata:
          type: object
          additionalProperties: true
    id_members_body:
      required:
      - roles
      - user_id
      type: object
      properties:
        user_id:
          type: string
        roles:
          type: array
          items:
            type: string
    inline_response_200_24:
      type: object
      properties:
        message:
          type: string
          example: Member added successfully
      example:
        message: Member added successfully
    members_userId_body:
      required:
      - roles
      type: object
      properties:
        roles:
          type: array
          items:
            type: string
    inline_response_200_25:
      type: object
      properties:
        message:
          type: string
          example: Member updated successfully
      example:
        message: Member updated successfully
    inline_response_200_26:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Feature"
      example:
        data:
        - settings: ""
          updated_at: 2000-01-23T04:56:07.000+00:00
          name: name
          description: description
          created_at: 2000-01-23T04:56:07.000+00:00
          key: key
          enabled: true
        - settings: ""
          updated_at: 2000-01-23T04:56:07.000+00:00
          name: name
          description: description
          created_at: 2000-01-23T04:56:07.000+00:00
          key: key
          enabled: true
    id_features_body:
      required:
      - feature_key
      type: object
      properties:
        feature_key:
          type: string
        settings:
          type: object
          additionalProperties: true
    inline_response_200_27:
      type: object
      properties:
        message:
          type: string
          example: Feature enabled successfully
      example:
        message: Feature enabled successfully
    inline_response_200_28:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/APIKey"
        total:
          type: integer
        pagination:
          $ref: "#/components/schemas/inline_response_200_22_pagination"
      example:
        total: 0
        pagination:
          total: 5
          offset: 6
          limit: 1
        data:
        - metadata: ""
          last_used: 2000-01-23T04:56:07.000+00:00
          active: true
          created_at: 2000-01-23T04:56:07.000+00:00
          type: type
          expires_at: 2000-01-23T04:56:07.000+00:00
          updated_at: 2000-01-23T04:56:07.000+00:00
          user_id: user_id
          permissions:
          - permissions
          - permissions
          organization_id: organization_id
          name: name
          id: id
          scopes:
          - scopes
          - scopes
        - metadata: ""
          last_used: 2000-01-23T04:56:07.000+00:00
          active: true
          created_at: 2000-01-23T04:56:07.000+00:00
          type: type
          expires_at: 2000-01-23T04:56:07.000+00:00
          updated_at: 2000-01-23T04:56:07.000+00:00
          user_id: user_id
          permissions:
          - permissions
          - permissions
          organization_id: organization_id
          name: name
          id: id
          scopes:
          - scopes
          - scopes
    apikeys_body:
      required:
      - name
      type: object
      properties:
        name:
          type: string
        type:
          type: string
          default: client
        permissions:
          type: array
          items:
            type: string
        scopes:
          type: array
          items:
            type: string
        metadata:
          type: object
          additionalProperties: true
        expires_in:
          type: integer
          description: Expiration time in seconds
    apikeys_id_body:
      type: object
      properties:
        name:
          type: string
        active:
          type: boolean
        permissions:
          type: array
          items:
            type: string
        scopes:
          type: array
          items:
            type: string
        metadata:
          type: object
          additionalProperties: true
        expires_at:
          type: string
          format: date-time
    inline_response_200_29:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Webhook"
        total:
          type: integer
        pagination:
          $ref: "#/components/schemas/inline_response_200_22_pagination"
      example:
        total: 1
        pagination:
          total: 5
          offset: 6
          limit: 1
        data:
        - metadata: ""
          format: json
          active: true
          created_at: 2000-01-23T04:56:07.000+00:00
          secret: secret
          url: http://example.com/aeiou
          event_types:
          - event_types
          - event_types
          updated_at: 2000-01-23T04:56:07.000+00:00
          retry_count: 0
          organization_id: organization_id
          name: name
          id: id
          timeout_ms: 6
        - metadata: ""
          format: json
          active: true
          created_at: 2000-01-23T04:56:07.000+00:00
          secret: secret
          url: http://example.com/aeiou
          event_types:
          - event_types
          - event_types
          updated_at: 2000-01-23T04:56:07.000+00:00
          retry_count: 0
          organization_id: organization_id
          name: name
          id: id
          timeout_ms: 6
    webhooks_body:
      required:
      - event_types
      - name
      - url
      type: object
      properties:
        name:
          type: string
        url:
          type: string
          format: uri
        event_types:
          type: array
          items:
            type: string
        retry_count:
          type: integer
        timeout_ms:
          type: integer
        format:
          type: string
          default: json
          enum:
          - json
          - form
        metadata:
          type: object
          additionalProperties: true
    webhooks_id_body:
      type: object
      properties:
        name:
          type: string
        url:
          type: string
          format: uri
        active:
          type: boolean
        event_types:
          type: array
          items:
            type: string
        retry_count:
          type: integer
        timeout_ms:
          type: integer
        format:
          type: string
          enum:
          - json
          - form
        metadata:
          type: object
          additionalProperties: true
    inline_response_200_30:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/WebhookEvent"
        total:
          type: integer
        pagination:
          $ref: "#/components/schemas/inline_response_200_22_pagination"
      example:
        total: 1
        pagination:
          total: 5
          offset: 6
          limit: 1
        data:
        - event_type: event_type
          status_code: 0
          webhook_id: webhook_id
          payload: ""
          response: response
          last_attempt_at: 2000-01-23T04:56:07.000+00:00
          created_at: 2000-01-23T04:56:07.000+00:00
          delivered: true
          id: id
          error: error
          attempts: 6
        - event_type: event_type
          status_code: 0
          webhook_id: webhook_id
          payload: ""
          response: response
          last_attempt_at: 2000-01-23T04:56:07.000+00:00
          created_at: 2000-01-23T04:56:07.000+00:00
          delivered: true
          id: id
          error: error
          attempts: 6
    webhooks_trigger_body:
      required:
      - event_type
      - payload
      type: object
      properties:
        event_type:
          type: string
        payload:
          type: object
          additionalProperties: true
        headers:
          type: object
          additionalProperties:
            type: string
    oauth2_token_body:
      required:
      - grant_type
      type: object
      properties:
        grant_type:
          type: string
          enum:
          - authorization_code
          - refresh_token
          - client_credentials
        code:
          type: string
        redirect_uri:
          type: string
          format: uri
        client_id:
          type: string
        client_secret:
          type: string
        refresh_token:
          type: string
        code_verifier:
          type: string
        scope:
          type: string
    oauth2_revoke_body:
      required:
      - token
      type: object
      properties:
        token:
          type: string
        token_type_hint:
          type: string
          enum:
          - access_token
          - refresh_token
        client_id:
          type: string
        client_secret:
          type: string
    oauth2_introspect_body:
      required:
      - token
      type: object
      properties:
        token:
          type: string
        token_type_hint:
          type: string
          enum:
          - access_token
          - refresh_token
        client_id:
          type: string
        client_secret:
          type: string
    inline_response_200_31:
      type: object
      properties:
        active:
          type: boolean
        client_id:
          type: string
        scope:
          type: string
        sub:
          type: string
        exp:
          type: integer
        iat:
          type: integer
        token_type:
          type: string
        organization_id:
          type: string
      example:
        sub: sub
        scope: scope
        organization_id: organization_id
        active: true
        exp: 0
        token_type: token_type
        iat: 6
        client_id: client_id
    inline_response_200_32:
      type: object
      properties:
        issuer:
          type: string
        authorization_endpoint:
          type: string
          format: uri
        token_endpoint:
          type: string
          format: uri
        userinfo_endpoint:
          type: string
          format: uri
        jwks_uri:
          type: string
          format: uri
        response_types_supported:
          type: array
          items:
            type: string
        subject_types_supported:
          type: array
          items:
            type: string
        id_token_signing_alg_values_supported:
          type: array
          items:
            type: string
        scopes_supported:
          type: array
          items:
            type: string
        token_endpoint_auth_methods_supported:
          type: array
          items:
            type: string
        claims_supported:
          type: array
          items:
            type: string
      example:
        response_types_supported:
        - response_types_supported
        - response_types_supported
        claims_supported:
        - claims_supported
        - claims_supported
        jwks_uri: http://example.com/aeiou
        subject_types_supported:
        - subject_types_supported
        - subject_types_supported
        id_token_signing_alg_values_supported:
        - id_token_signing_alg_values_supported
        - id_token_signing_alg_values_supported
        token_endpoint_auth_methods_supported:
        - token_endpoint_auth_methods_supported
        - token_endpoint_auth_methods_supported
        scopes_supported:
        - scopes_supported
        - scopes_supported
        issuer: issuer
        authorization_endpoint: http://example.com/aeiou
        token_endpoint: http://example.com/aeiou
        userinfo_endpoint: http://example.com/aeiou
    inline_response_200_33:
      type: object
      properties:
        keys:
          type: array
          items:
            type: object
      example:
        keys:
        - {}
        - {}
    Error_error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
        data:
          type: object
          additionalProperties: true
    inline_response_200_22_pagination:
      type: object
      properties:
        offset:
          type: integer
        limit:
          type: integer
        total:
          type: integer
      example:
        total: 5
        offset: 6
        limit: 1
  securitySchemes:
    bearerAuth:
      type: http
      description: JWT token obtained from the /auth/login endpoint
      scheme: bearer
      bearerFormat: JWT
    apiKeyAuth:
      type: apiKey
      description: API key for machine-to-machine authentication
      name: X-API-Key
      in: header
