// Code generated by "go-enumer (github.com/mvrahden/go-enumer)"; DO NOT EDIT.

package rolesenum

import (
	"database/sql/driver"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"strconv"
)

var (
	ErrNoValidEnum = errors.New("not a valid enum")
)

const (
	_AppRoleString      = "viewermemberadminowner"
	_AppRoleLowerString = "viewermemberadminowner"
)

var (
	_AppRoleValues  = [4]AppRole{0, 1, 2, 3}
	_AppRoleStrings = [4]string{_AppRoleString[0:6], _AppRoleString[6:12], _AppRoleString[12:17], _AppRoleString[17:22]}
)

// _AppRoleNoOp is a compile time assertion.
// An "invalid argument/out of bounds" compiler error signifies that the enum values have changed.
// Re-run the enumer command to generate an updated version of AppRole.
func _AppRoleNoOp() {
	var x [1]struct{}
	_ = x[Viewer-(0)]
	_ = x[Member-(1)]
	_ = x[Admin-(2)]
	_ = x[Owner-(3)]
}

// AppRoleValues returns all values of the enum.
func AppRoleValues() []AppRole {
	cp := _AppRoleValues
	return cp[:]
}

// AppRoleStrings returns a slice of all String values of the enum.
func AppRoleStrings() []string {
	cp := _AppRoleStrings
	return cp[:]
}

// IsValid tests whether the value is a valid enum value.
func (_a AppRole) IsValid() bool {
	return _a >= 0 && _a <= 3
}

// Validate whether the value is within the range of enum values.
func (_a AppRole) Validate() error {
	if !_a.IsValid() {
		return fmt.Errorf("AppRole(%d) is %w", _a, ErrNoValidEnum)
	}
	return nil
}

// String returns the string of the enum value.
// If the enum value is invalid, it will produce a string
// of the following pattern AppRole(%d) instead.
func (_a AppRole) String() string {
	if !_a.IsValid() {
		return fmt.Sprintf("AppRole(%d)", _a)
	}
	idx := uint(_a)
	return _AppRoleStrings[idx]
}

var (
	_AppRoleStringToValueMap = map[string]AppRole{
		_AppRoleString[0:6]:   Viewer,
		_AppRoleString[6:12]:  Member,
		_AppRoleString[12:17]: Admin,
		_AppRoleString[17:22]: Owner,
	}
	_AppRoleLowerStringToValueMap = map[string]AppRole{
		_AppRoleLowerString[0:6]:   Viewer,
		_AppRoleLowerString[6:12]:  Member,
		_AppRoleLowerString[12:17]: Admin,
		_AppRoleLowerString[17:22]: Owner,
	}
)

// AppRoleFromString determines the enum value with an exact case match.
func AppRoleFromString(raw string) (AppRole, bool) {
	v, ok := _AppRoleStringToValueMap[raw]
	if !ok {
		return AppRole(0), false
	}
	return v, true
}

// AppRoleFromStringIgnoreCase determines the enum value with a case-insensitive match.
func AppRoleFromStringIgnoreCase(raw string) (AppRole, bool) {
	v, ok := AppRoleFromString(raw)
	if ok {
		return v, ok
	}
	v, ok = _AppRoleLowerStringToValueMap[raw]
	if !ok {
		return AppRole(0), false
	}
	return v, true
}

// MarshalBinary implements the encoding.BinaryMarshaler interface for AppRole.
func (_a AppRole) MarshalBinary() ([]byte, error) {
	if err := _a.Validate(); err != nil {
		return nil, fmt.Errorf("Cannot marshal value %q as AppRole. %w", _a, err)
	}
	return []byte(_a.String()), nil
}

// UnmarshalBinary implements the encoding.BinaryUnmarshaler interface for AppRole.
func (_a *AppRole) UnmarshalBinary(text []byte) error {
	str := string(text)
	if len(str) == 0 {
		return fmt.Errorf("AppRole cannot be derived from empty string")
	}

	var ok bool
	*_a, ok = AppRoleFromString(str)
	if !ok {
		return fmt.Errorf("Value %q does not represent a AppRole", str)
	}
	return nil
}

// MarshalGQL implements the graphql.Marshaler interface for AppRole.
func (_a AppRole) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(_a.String()))
}

// UnmarshalGQL implements the graphql.Unmarshaler interface for AppRole.
func (_a *AppRole) UnmarshalGQL(value interface{}) error {
	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of AppRole: %[1]T(%[1]v)", value)
	}
	if len(str) == 0 {
		return fmt.Errorf("AppRole cannot be derived from empty string")
	}

	var ok bool
	*_a, ok = AppRoleFromString(str)
	if !ok {
		return fmt.Errorf("Value %q does not represent a AppRole", str)
	}
	return nil
}

// MarshalJSON implements the json.Marshaler interface for AppRole.
func (_a AppRole) MarshalJSON() ([]byte, error) {
	if err := _a.Validate(); err != nil {
		return nil, fmt.Errorf("Cannot marshal value %q as AppRole. %w", _a, err)
	}
	return json.Marshal(_a.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for AppRole.
func (_a *AppRole) UnmarshalJSON(data []byte) error {
	var str string
	if err := json.Unmarshal(data, &str); err != nil {
		return fmt.Errorf("AppRole should be a string, got %q", data)
	}
	if len(str) == 0 {
		return fmt.Errorf("AppRole cannot be derived from empty string")
	}

	var ok bool
	*_a, ok = AppRoleFromString(str)
	if !ok {
		return fmt.Errorf("Value %q does not represent a AppRole", str)
	}
	return nil
}

// Value implements the sql/driver.Valuer interface for AppRole.
func (_a AppRole) Value() (driver.Value, error) {
	if err := _a.Validate(); err != nil {
		return nil, fmt.Errorf("Cannot serialize value %q as AppRole. %w", _a, err)
	}
	return _a.String(), nil
}

// Scan implements the sql/driver.Scanner interface for AppRole.
func (_a *AppRole) Scan(value interface{}) error {
	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of AppRole: %[1]T(%[1]v)", value)
	}
	if len(str) == 0 {
		return fmt.Errorf("AppRole cannot be derived from empty string")
	}

	var ok bool
	*_a, ok = AppRoleFromString(str)
	if !ok {
		return fmt.Errorf("Value %q does not represent a AppRole", str)
	}
	return nil
}

// MarshalText implements the encoding.TextMarshaler interface for AppRole.
func (_a AppRole) MarshalText() ([]byte, error) {
	if err := _a.Validate(); err != nil {
		return nil, fmt.Errorf("Cannot marshal value %q as AppRole. %w", _a, err)
	}
	return []byte(_a.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for AppRole.
func (_a *AppRole) UnmarshalText(text []byte) error {
	str := string(text)
	if len(str) == 0 {
		return fmt.Errorf("AppRole cannot be derived from empty string")
	}

	var ok bool
	*_a, ok = AppRoleFromString(str)
	if !ok {
		return fmt.Errorf("Value %q does not represent a AppRole", str)
	}
	return nil
}

// MarshalYAML implements a YAML Marshaler for AppRole.
func (_a AppRole) MarshalYAML() (interface{}, error) {
	if err := _a.Validate(); err != nil {
		return nil, fmt.Errorf("Cannot marshal value %q as AppRole. %w", _a, err)
	}
	return _a.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for AppRole.
func (_a *AppRole) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var str string
	if err := unmarshal(&str); err != nil {
		return err
	}
	if len(str) == 0 {
		return fmt.Errorf("AppRole cannot be derived from empty string")
	}

	var ok bool
	*_a, ok = AppRoleFromString(str)
	if !ok {
		return fmt.Errorf("Value %q does not represent a AppRole", str)
	}
	return nil
}

// Values returns a slice of all String values of the enum.
func (AppRole) Values() []string {
	return AppRoleStrings()
}
