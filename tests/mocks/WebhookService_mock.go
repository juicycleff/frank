// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juicycleff/frank/internal/webhook (interfaces: Service)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	ent "github.com/juicycleff/frank/ent"
	webhook "github.com/juicycleff/frank/internal/webhook"
)

// MockWebhookService is a mock of Service interface.
type MockWebhookService struct {
	ctrl     *gomock.Controller
	recorder *MockWebhookServiceMockRecorder
}

// MockWebhookServiceMockRecorder is the mock recorder for MockWebhookService.
type MockWebhookServiceMockRecorder struct {
	mock *MockWebhookService
}

// NewMockWebhookService creates a new mock instance.
func NewMockWebhookService(ctrl *gomock.Controller) *MockWebhookService {
	mock := &MockWebhookService{ctrl: ctrl}
	mock.recorder = &MockWebhookServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWebhookService) EXPECT() *MockWebhookServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockWebhookService) Create(arg0 context.Context, arg1 webhook.CreateWebhookInput) (*ent.Webhook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*ent.Webhook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockWebhookServiceMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockWebhookService)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockWebhookService) Delete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockWebhookServiceMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockWebhookService)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *MockWebhookService) Get(arg0 context.Context, arg1 string) (*ent.Webhook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*ent.Webhook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockWebhookServiceMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockWebhookService)(nil).Get), arg0, arg1)
}

// GetEvents mocks base method.
func (m *MockWebhookService) GetEvents(arg0 context.Context, arg1 string, arg2 webhook.EventListParams) ([]*ent.WebhookEvent, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvents", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*ent.WebhookEvent)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetEvents indicates an expected call of GetEvents.
func (mr *MockWebhookServiceMockRecorder) GetEvents(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvents", reflect.TypeOf((*MockWebhookService)(nil).GetEvents), arg0, arg1, arg2)
}

// List mocks base method.
func (m *MockWebhookService) List(arg0 context.Context, arg1 webhook.ListParams) ([]*ent.Webhook, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]*ent.Webhook)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockWebhookServiceMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockWebhookService)(nil).List), arg0, arg1)
}

// ReplayEvent mocks base method.
func (m *MockWebhookService) ReplayEvent(arg0 context.Context, arg1 string) (*ent.WebhookEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplayEvent", arg0, arg1)
	ret0, _ := ret[0].(*ent.WebhookEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReplayEvent indicates an expected call of ReplayEvent.
func (mr *MockWebhookServiceMockRecorder) ReplayEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplayEvent", reflect.TypeOf((*MockWebhookService)(nil).ReplayEvent), arg0, arg1)
}

// TriggerEvent mocks base method.
func (m *MockWebhookService) TriggerEvent(arg0 context.Context, arg1 webhook.TriggerEventInput) (*ent.WebhookEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TriggerEvent", arg0, arg1)
	ret0, _ := ret[0].(*ent.WebhookEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TriggerEvent indicates an expected call of TriggerEvent.
func (mr *MockWebhookServiceMockRecorder) TriggerEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TriggerEvent", reflect.TypeOf((*MockWebhookService)(nil).TriggerEvent), arg0, arg1)
}

// Update mocks base method.
func (m *MockWebhookService) Update(arg0 context.Context, arg1 string, arg2 webhook.UpdateWebhookInput) (*ent.Webhook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(*ent.Webhook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockWebhookServiceMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockWebhookService)(nil).Update), arg0, arg1, arg2)
}
