// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juicycleff/frank/internal/email (interfaces: TemplateRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	"context"
	"reflect"

	"github.com/golang/mock/gomock"
	"github.com/juicycleff/frank/email"
	"github.com/juicycleff/frank/ent"
)

// MockEmailTemplateRepository is a mock of TemplateRepository interface.
type MockEmailTemplateRepository struct {
	ctrl     *gomock.Controller
	recorder *MockEmailTemplateRepositoryMockRecorder
}

// MockEmailTemplateRepositoryMockRecorder is the mock recorder for MockEmailTemplateRepository.
type MockEmailTemplateRepositoryMockRecorder struct {
	mock *MockEmailTemplateRepository
}

// NewMockEmailTemplateRepository creates a new mock instance.
func NewMockEmailTemplateRepository(ctrl *gomock.Controller) *MockEmailTemplateRepository {
	mock := &MockEmailTemplateRepository{ctrl: ctrl}
	mock.recorder = &MockEmailTemplateRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailTemplateRepository) EXPECT() *MockEmailTemplateRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockEmailTemplateRepository) Create(arg0 context.Context, arg1 email.TemplateRepositoryCreateInput) (*ent.EmailTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*ent.EmailTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockEmailTemplateRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockEmailTemplateRepository)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockEmailTemplateRepository) Delete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockEmailTemplateRepositoryMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockEmailTemplateRepository)(nil).Delete), arg0, arg1)
}

// GetByID mocks base method.
func (m *MockEmailTemplateRepository) GetByID(arg0 context.Context, arg1 string) (*ent.EmailTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0, arg1)
	ret0, _ := ret[0].(*ent.EmailTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockEmailTemplateRepositoryMockRecorder) GetByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockEmailTemplateRepository)(nil).GetByID), arg0, arg1)
}

// GetByTypeAndOrganization mocks base method.
func (m *MockEmailTemplateRepository) GetByTypeAndOrganization(arg0 context.Context, arg1, arg2, arg3 string) (*ent.EmailTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByTypeAndOrganization", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*ent.EmailTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByTypeAndOrganization indicates an expected call of GetByTypeAndOrganization.
func (mr *MockEmailTemplateRepositoryMockRecorder) GetByTypeAndOrganization(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByTypeAndOrganization", reflect.TypeOf((*MockEmailTemplateRepository)(nil).GetByTypeAndOrganization), arg0, arg1, arg2, arg3)
}

// List mocks base method.
func (m *MockEmailTemplateRepository) List(arg0 context.Context, arg1 email.TemplateRepositoryListInput) ([]*ent.EmailTemplate, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]*ent.EmailTemplate)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockEmailTemplateRepositoryMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockEmailTemplateRepository)(nil).List), arg0, arg1)
}

// Update mocks base method.
func (m *MockEmailTemplateRepository) Update(arg0 context.Context, arg1 string, arg2 email.TemplateRepositoryUpdateInput) (*ent.EmailTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(*ent.EmailTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockEmailTemplateRepositoryMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockEmailTemplateRepository)(nil).Update), arg0, arg1, arg2)
}
