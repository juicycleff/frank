// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juicycleff/frank/internal/auth/passkeys (interfaces: Service)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	passkeys "github.com/juicycleff/frank/internal/auth/passkeys"
)

// MockPasskeysService is a mock of Service interface.
type MockPasskeysService struct {
	ctrl     *gomock.Controller
	recorder *MockPasskeysServiceMockRecorder
}

// MockPasskeysServiceMockRecorder is the mock recorder for MockPasskeysService.
type MockPasskeysServiceMockRecorder struct {
	mock *MockPasskeysService
}

// NewMockPasskeysService creates a new mock instance.
func NewMockPasskeysService(ctrl *gomock.Controller) *MockPasskeysService {
	mock := &MockPasskeysService{ctrl: ctrl}
	mock.recorder = &MockPasskeysServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPasskeysService) EXPECT() *MockPasskeysServiceMockRecorder {
	return m.recorder
}

// BeginAuthentication mocks base method.
func (m *MockPasskeysService) BeginAuthentication(arg0 context.Context, arg1 passkeys.AuthenticationOptions) (map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginAuthentication", arg0, arg1)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginAuthentication indicates an expected call of BeginAuthentication.
func (mr *MockPasskeysServiceMockRecorder) BeginAuthentication(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginAuthentication", reflect.TypeOf((*MockPasskeysService)(nil).BeginAuthentication), arg0, arg1)
}

// BeginRegistration mocks base method.
func (m *MockPasskeysService) BeginRegistration(arg0 context.Context, arg1 passkeys.RegistrationOptions) (map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginRegistration", arg0, arg1)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginRegistration indicates an expected call of BeginRegistration.
func (mr *MockPasskeysServiceMockRecorder) BeginRegistration(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginRegistration", reflect.TypeOf((*MockPasskeysService)(nil).BeginRegistration), arg0, arg1)
}

// DeletePasskey mocks base method.
func (m *MockPasskeysService) DeletePasskey(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePasskey", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePasskey indicates an expected call of DeletePasskey.
func (mr *MockPasskeysServiceMockRecorder) DeletePasskey(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePasskey", reflect.TypeOf((*MockPasskeysService)(nil).DeletePasskey), arg0, arg1, arg2)
}

// FinishAuthentication mocks base method.
func (m *MockPasskeysService) FinishAuthentication(arg0 context.Context, arg1 string, arg2 *http.Request) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinishAuthentication", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FinishAuthentication indicates an expected call of FinishAuthentication.
func (mr *MockPasskeysServiceMockRecorder) FinishAuthentication(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinishAuthentication", reflect.TypeOf((*MockPasskeysService)(nil).FinishAuthentication), arg0, arg1, arg2)
}

// FinishRegistration mocks base method.
func (m *MockPasskeysService) FinishRegistration(arg0 context.Context, arg1 string, arg2 *http.Request, arg3 passkeys.RegistrationOptions) (*passkeys.RegisteredPasskey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinishRegistration", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*passkeys.RegisteredPasskey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FinishRegistration indicates an expected call of FinishRegistration.
func (mr *MockPasskeysServiceMockRecorder) FinishRegistration(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinishRegistration", reflect.TypeOf((*MockPasskeysService)(nil).FinishRegistration), arg0, arg1, arg2, arg3)
}

// GetUserPasskeys mocks base method.
func (m *MockPasskeysService) GetUserPasskeys(arg0 context.Context, arg1 string) ([]*passkeys.RegisteredPasskey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPasskeys", arg0, arg1)
	ret0, _ := ret[0].([]*passkeys.RegisteredPasskey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPasskeys indicates an expected call of GetUserPasskeys.
func (mr *MockPasskeysServiceMockRecorder) GetUserPasskeys(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPasskeys", reflect.TypeOf((*MockPasskeysService)(nil).GetUserPasskeys), arg0, arg1)
}

// UpdatePasskey mocks base method.
func (m *MockPasskeysService) UpdatePasskey(arg0 context.Context, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePasskey", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePasskey indicates an expected call of UpdatePasskey.
func (mr *MockPasskeysServiceMockRecorder) UpdatePasskey(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePasskey", reflect.TypeOf((*MockPasskeysService)(nil).UpdatePasskey), arg0, arg1, arg2, arg3)
}
