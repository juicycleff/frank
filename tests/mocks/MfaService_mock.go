// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juicycleff/frank/internal/auth/mfa (interfaces: Service)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	mfa "github.com/juicycleff/frank/internal/auth/mfa"
)

// MockMfaService is a mock of Service interface.
type MockMfaService struct {
	ctrl     *gomock.Controller
	recorder *MockMfaServiceMockRecorder
}

// MockMfaServiceMockRecorder is the mock recorder for MockMfaService.
type MockMfaServiceMockRecorder struct {
	mock *MockMfaService
}

// NewMockMfaService creates a new mock instance.
func NewMockMfaService(ctrl *gomock.Controller) *MockMfaService {
	mock := &MockMfaService{ctrl: ctrl}
	mock.recorder = &MockMfaServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMfaService) EXPECT() *MockMfaServiceMockRecorder {
	return m.recorder
}

// DisableAllMethods mocks base method.
func (m *MockMfaService) DisableAllMethods(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableAllMethods", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DisableAllMethods indicates an expected call of DisableAllMethods.
func (mr *MockMfaServiceMockRecorder) DisableAllMethods(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableAllMethods", reflect.TypeOf((*MockMfaService)(nil).DisableAllMethods), arg0, arg1)
}

// DisableBackupCodes mocks base method.
func (m *MockMfaService) DisableBackupCodes(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableBackupCodes", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DisableBackupCodes indicates an expected call of DisableBackupCodes.
func (mr *MockMfaServiceMockRecorder) DisableBackupCodes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableBackupCodes", reflect.TypeOf((*MockMfaService)(nil).DisableBackupCodes), arg0, arg1)
}

// DisableEmail mocks base method.
func (m *MockMfaService) DisableEmail(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableEmail", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DisableEmail indicates an expected call of DisableEmail.
func (mr *MockMfaServiceMockRecorder) DisableEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableEmail", reflect.TypeOf((*MockMfaService)(nil).DisableEmail), arg0, arg1)
}

// DisableSMS mocks base method.
func (m *MockMfaService) DisableSMS(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableSMS", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DisableSMS indicates an expected call of DisableSMS.
func (mr *MockMfaServiceMockRecorder) DisableSMS(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableSMS", reflect.TypeOf((*MockMfaService)(nil).DisableSMS), arg0, arg1)
}

// DisableTOTP mocks base method.
func (m *MockMfaService) DisableTOTP(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableTOTP", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DisableTOTP indicates an expected call of DisableTOTP.
func (mr *MockMfaServiceMockRecorder) DisableTOTP(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableTOTP", reflect.TypeOf((*MockMfaService)(nil).DisableTOTP), arg0, arg1)
}

// EnableBackupCodes mocks base method.
func (m *MockMfaService) EnableBackupCodes(arg0 context.Context, arg1 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableBackupCodes", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableBackupCodes indicates an expected call of EnableBackupCodes.
func (mr *MockMfaServiceMockRecorder) EnableBackupCodes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableBackupCodes", reflect.TypeOf((*MockMfaService)(nil).EnableBackupCodes), arg0, arg1)
}

// EnableEmail mocks base method.
func (m *MockMfaService) EnableEmail(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableEmail", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnableEmail indicates an expected call of EnableEmail.
func (mr *MockMfaServiceMockRecorder) EnableEmail(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableEmail", reflect.TypeOf((*MockMfaService)(nil).EnableEmail), arg0, arg1, arg2)
}

// EnableSMS mocks base method.
func (m *MockMfaService) EnableSMS(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableSMS", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnableSMS indicates an expected call of EnableSMS.
func (mr *MockMfaServiceMockRecorder) EnableSMS(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableSMS", reflect.TypeOf((*MockMfaService)(nil).EnableSMS), arg0, arg1, arg2)
}

// EnableTOTP mocks base method.
func (m *MockMfaService) EnableTOTP(arg0 context.Context, arg1, arg2 string) (*mfa.TOTPSecret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableTOTP", arg0, arg1, arg2)
	ret0, _ := ret[0].(*mfa.TOTPSecret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableTOTP indicates an expected call of EnableTOTP.
func (mr *MockMfaServiceMockRecorder) EnableTOTP(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableTOTP", reflect.TypeOf((*MockMfaService)(nil).EnableTOTP), arg0, arg1, arg2)
}

// GetEnabledMethods mocks base method.
func (m *MockMfaService) GetEnabledMethods(arg0 context.Context, arg1 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnabledMethods", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnabledMethods indicates an expected call of GetEnabledMethods.
func (mr *MockMfaServiceMockRecorder) GetEnabledMethods(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnabledMethods", reflect.TypeOf((*MockMfaService)(nil).GetEnabledMethods), arg0, arg1)
}

// GetRemainingBackupCodes mocks base method.
func (m *MockMfaService) GetRemainingBackupCodes(arg0 context.Context, arg1 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRemainingBackupCodes", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRemainingBackupCodes indicates an expected call of GetRemainingBackupCodes.
func (mr *MockMfaServiceMockRecorder) GetRemainingBackupCodes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRemainingBackupCodes", reflect.TypeOf((*MockMfaService)(nil).GetRemainingBackupCodes), arg0, arg1)
}

// IsAnyMethodEnabled mocks base method.
func (m *MockMfaService) IsAnyMethodEnabled(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAnyMethodEnabled", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsAnyMethodEnabled indicates an expected call of IsAnyMethodEnabled.
func (mr *MockMfaServiceMockRecorder) IsAnyMethodEnabled(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAnyMethodEnabled", reflect.TypeOf((*MockMfaService)(nil).IsAnyMethodEnabled), arg0, arg1)
}

// SendEmailCode mocks base method.
func (m *MockMfaService) SendEmailCode(arg0 context.Context, arg1 string) (time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEmailCode", arg0, arg1)
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendEmailCode indicates an expected call of SendEmailCode.
func (mr *MockMfaServiceMockRecorder) SendEmailCode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmailCode", reflect.TypeOf((*MockMfaService)(nil).SendEmailCode), arg0, arg1)
}

// SendSMSCode mocks base method.
func (m *MockMfaService) SendSMSCode(arg0 context.Context, arg1 string) (time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendSMSCode", arg0, arg1)
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendSMSCode indicates an expected call of SendSMSCode.
func (mr *MockMfaServiceMockRecorder) SendSMSCode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendSMSCode", reflect.TypeOf((*MockMfaService)(nil).SendSMSCode), arg0, arg1)
}

// VerifyBackupCode mocks base method.
func (m *MockMfaService) VerifyBackupCode(arg0 context.Context, arg1, arg2 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyBackupCode", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyBackupCode indicates an expected call of VerifyBackupCode.
func (mr *MockMfaServiceMockRecorder) VerifyBackupCode(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyBackupCode", reflect.TypeOf((*MockMfaService)(nil).VerifyBackupCode), arg0, arg1, arg2)
}

// VerifyEmailCode mocks base method.
func (m *MockMfaService) VerifyEmailCode(arg0 context.Context, arg1, arg2 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyEmailCode", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyEmailCode indicates an expected call of VerifyEmailCode.
func (mr *MockMfaServiceMockRecorder) VerifyEmailCode(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyEmailCode", reflect.TypeOf((*MockMfaService)(nil).VerifyEmailCode), arg0, arg1, arg2)
}

// VerifySMSCode mocks base method.
func (m *MockMfaService) VerifySMSCode(arg0 context.Context, arg1, arg2 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifySMSCode", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifySMSCode indicates an expected call of VerifySMSCode.
func (mr *MockMfaServiceMockRecorder) VerifySMSCode(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifySMSCode", reflect.TypeOf((*MockMfaService)(nil).VerifySMSCode), arg0, arg1, arg2)
}

// VerifyTOTP mocks base method.
func (m *MockMfaService) VerifyTOTP(arg0 context.Context, arg1, arg2 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyTOTP", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyTOTP indicates an expected call of VerifyTOTP.
func (mr *MockMfaServiceMockRecorder) VerifyTOTP(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyTOTP", reflect.TypeOf((*MockMfaService)(nil).VerifyTOTP), arg0, arg1, arg2)
}
