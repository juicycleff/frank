// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juicycleff/frank/internal/webhook (interfaces: Repository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	ent "github.com/juicycleff/frank/ent"
	webhook "github.com/juicycleff/frank/internal/webhook"
)

// MockWebhookRepository is a mock of Repository interface.
type MockWebhookRepository struct {
	ctrl     *gomock.Controller
	recorder *MockWebhookRepositoryMockRecorder
}

// MockWebhookRepositoryMockRecorder is the mock recorder for MockWebhookRepository.
type MockWebhookRepositoryMockRecorder struct {
	mock *MockWebhookRepository
}

// NewMockWebhookRepository creates a new mock instance.
func NewMockWebhookRepository(ctrl *gomock.Controller) *MockWebhookRepository {
	mock := &MockWebhookRepository{ctrl: ctrl}
	mock.recorder = &MockWebhookRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWebhookRepository) EXPECT() *MockWebhookRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockWebhookRepository) Create(arg0 context.Context, arg1 webhook.RepositoryCreateInput) (*ent.Webhook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*ent.Webhook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockWebhookRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockWebhookRepository)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockWebhookRepository) Delete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockWebhookRepositoryMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockWebhookRepository)(nil).Delete), arg0, arg1)
}

// FindByEventTypeAndOrganization mocks base method.
func (m *MockWebhookRepository) FindByEventTypeAndOrganization(arg0 context.Context, arg1, arg2 string) ([]*ent.Webhook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByEventTypeAndOrganization", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*ent.Webhook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByEventTypeAndOrganization indicates an expected call of FindByEventTypeAndOrganization.
func (mr *MockWebhookRepositoryMockRecorder) FindByEventTypeAndOrganization(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEventTypeAndOrganization", reflect.TypeOf((*MockWebhookRepository)(nil).FindByEventTypeAndOrganization), arg0, arg1, arg2)
}

// GetByID mocks base method.
func (m *MockWebhookRepository) GetByID(arg0 context.Context, arg1 string) (*ent.Webhook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0, arg1)
	ret0, _ := ret[0].(*ent.Webhook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockWebhookRepositoryMockRecorder) GetByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockWebhookRepository)(nil).GetByID), arg0, arg1)
}

// List mocks base method.
func (m *MockWebhookRepository) List(arg0 context.Context, arg1 webhook.RepositoryListInput) ([]*ent.Webhook, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]*ent.Webhook)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockWebhookRepositoryMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockWebhookRepository)(nil).List), arg0, arg1)
}

// Update mocks base method.
func (m *MockWebhookRepository) Update(arg0 context.Context, arg1 string, arg2 webhook.RepositoryUpdateInput) (*ent.Webhook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(*ent.Webhook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockWebhookRepositoryMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockWebhookRepository)(nil).Update), arg0, arg1, arg2)
}
