// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juicycleff/frank/internal/auth/passkeys (interfaces: Repository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	ent "github.com/juicycleff/frank/ent"
)

// MockPasskeysRepository is a mock of Repository interface.
type MockPasskeysRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPasskeysRepositoryMockRecorder
}

// MockPasskeysRepositoryMockRecorder is the mock recorder for MockPasskeysRepository.
type MockPasskeysRepositoryMockRecorder struct {
	mock *MockPasskeysRepository
}

// NewMockPasskeysRepository creates a new mock instance.
func NewMockPasskeysRepository(ctrl *gomock.Controller) *MockPasskeysRepository {
	mock := &MockPasskeysRepository{ctrl: ctrl}
	mock.recorder = &MockPasskeysRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPasskeysRepository) EXPECT() *MockPasskeysRepositoryMockRecorder {
	return m.recorder
}

// CreatePasskey mocks base method.
func (m *MockPasskeysRepository) CreatePasskey(arg0 context.Context, arg1 *ent.PasskeyCreate) (*ent.Passkey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePasskey", arg0, arg1)
	ret0, _ := ret[0].(*ent.Passkey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePasskey indicates an expected call of CreatePasskey.
func (mr *MockPasskeysRepositoryMockRecorder) CreatePasskey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePasskey", reflect.TypeOf((*MockPasskeysRepository)(nil).CreatePasskey), arg0, arg1)
}

// DeletePasskey mocks base method.
func (m *MockPasskeysRepository) DeletePasskey(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePasskey", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePasskey indicates an expected call of DeletePasskey.
func (mr *MockPasskeysRepositoryMockRecorder) DeletePasskey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePasskey", reflect.TypeOf((*MockPasskeysRepository)(nil).DeletePasskey), arg0, arg1)
}

// GetPasskeyByCredentialID mocks base method.
func (m *MockPasskeysRepository) GetPasskeyByCredentialID(arg0 context.Context, arg1 string) (*ent.Passkey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPasskeyByCredentialID", arg0, arg1)
	ret0, _ := ret[0].(*ent.Passkey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPasskeyByCredentialID indicates an expected call of GetPasskeyByCredentialID.
func (mr *MockPasskeysRepositoryMockRecorder) GetPasskeyByCredentialID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPasskeyByCredentialID", reflect.TypeOf((*MockPasskeysRepository)(nil).GetPasskeyByCredentialID), arg0, arg1)
}

// GetPasskeysByUserID mocks base method.
func (m *MockPasskeysRepository) GetPasskeysByUserID(arg0 context.Context, arg1 string) ([]*ent.Passkey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPasskeysByUserID", arg0, arg1)
	ret0, _ := ret[0].([]*ent.Passkey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPasskeysByUserID indicates an expected call of GetPasskeysByUserID.
func (mr *MockPasskeysRepositoryMockRecorder) GetPasskeysByUserID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPasskeysByUserID", reflect.TypeOf((*MockPasskeysRepository)(nil).GetPasskeysByUserID), arg0, arg1)
}

// GetUserByID mocks base method.
func (m *MockPasskeysRepository) GetUserByID(arg0 context.Context, arg1 string) (*ent.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", arg0, arg1)
	ret0, _ := ret[0].(*ent.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockPasskeysRepositoryMockRecorder) GetUserByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockPasskeysRepository)(nil).GetUserByID), arg0, arg1)
}

// UpdatePasskey mocks base method.
func (m *MockPasskeysRepository) UpdatePasskey(arg0 context.Context, arg1 string, arg2 *ent.PasskeyUpdateOne) (*ent.Passkey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePasskey", arg0, arg1, arg2)
	ret0, _ := ret[0].(*ent.Passkey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePasskey indicates an expected call of UpdatePasskey.
func (mr *MockPasskeysRepositoryMockRecorder) UpdatePasskey(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePasskey", reflect.TypeOf((*MockPasskeysRepository)(nil).UpdatePasskey), arg0, arg1, arg2)
}
