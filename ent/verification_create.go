// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/juicycleff/frank/ent/user"
	"github.com/juicycleff/frank/ent/verification"
)

// VerificationCreate is the builder for creating a Verification entity.
type VerificationCreate struct {
	config
	mutation *VerificationMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (vc *VerificationCreate) SetCreatedAt(t time.Time) *VerificationCreate {
	vc.mutation.SetCreatedAt(t)
	return vc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (vc *VerificationCreate) SetNillableCreatedAt(t *time.Time) *VerificationCreate {
	if t != nil {
		vc.SetCreatedAt(*t)
	}
	return vc
}

// SetUpdatedAt sets the "updated_at" field.
func (vc *VerificationCreate) SetUpdatedAt(t time.Time) *VerificationCreate {
	vc.mutation.SetUpdatedAt(t)
	return vc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (vc *VerificationCreate) SetNillableUpdatedAt(t *time.Time) *VerificationCreate {
	if t != nil {
		vc.SetUpdatedAt(*t)
	}
	return vc
}

// SetUserID sets the "user_id" field.
func (vc *VerificationCreate) SetUserID(s string) *VerificationCreate {
	vc.mutation.SetUserID(s)
	return vc
}

// SetType sets the "type" field.
func (vc *VerificationCreate) SetType(s string) *VerificationCreate {
	vc.mutation.SetType(s)
	return vc
}

// SetToken sets the "token" field.
func (vc *VerificationCreate) SetToken(s string) *VerificationCreate {
	vc.mutation.SetToken(s)
	return vc
}

// SetEmail sets the "email" field.
func (vc *VerificationCreate) SetEmail(s string) *VerificationCreate {
	vc.mutation.SetEmail(s)
	return vc
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (vc *VerificationCreate) SetNillableEmail(s *string) *VerificationCreate {
	if s != nil {
		vc.SetEmail(*s)
	}
	return vc
}

// SetPhoneNumber sets the "phone_number" field.
func (vc *VerificationCreate) SetPhoneNumber(s string) *VerificationCreate {
	vc.mutation.SetPhoneNumber(s)
	return vc
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (vc *VerificationCreate) SetNillablePhoneNumber(s *string) *VerificationCreate {
	if s != nil {
		vc.SetPhoneNumber(*s)
	}
	return vc
}

// SetRedirectURL sets the "redirect_url" field.
func (vc *VerificationCreate) SetRedirectURL(s string) *VerificationCreate {
	vc.mutation.SetRedirectURL(s)
	return vc
}

// SetNillableRedirectURL sets the "redirect_url" field if the given value is not nil.
func (vc *VerificationCreate) SetNillableRedirectURL(s *string) *VerificationCreate {
	if s != nil {
		vc.SetRedirectURL(*s)
	}
	return vc
}

// SetUsed sets the "used" field.
func (vc *VerificationCreate) SetUsed(b bool) *VerificationCreate {
	vc.mutation.SetUsed(b)
	return vc
}

// SetNillableUsed sets the "used" field if the given value is not nil.
func (vc *VerificationCreate) SetNillableUsed(b *bool) *VerificationCreate {
	if b != nil {
		vc.SetUsed(*b)
	}
	return vc
}

// SetUsedAt sets the "used_at" field.
func (vc *VerificationCreate) SetUsedAt(t time.Time) *VerificationCreate {
	vc.mutation.SetUsedAt(t)
	return vc
}

// SetNillableUsedAt sets the "used_at" field if the given value is not nil.
func (vc *VerificationCreate) SetNillableUsedAt(t *time.Time) *VerificationCreate {
	if t != nil {
		vc.SetUsedAt(*t)
	}
	return vc
}

// SetAttempts sets the "attempts" field.
func (vc *VerificationCreate) SetAttempts(i int) *VerificationCreate {
	vc.mutation.SetAttempts(i)
	return vc
}

// SetNillableAttempts sets the "attempts" field if the given value is not nil.
func (vc *VerificationCreate) SetNillableAttempts(i *int) *VerificationCreate {
	if i != nil {
		vc.SetAttempts(*i)
	}
	return vc
}

// SetExpiresAt sets the "expires_at" field.
func (vc *VerificationCreate) SetExpiresAt(t time.Time) *VerificationCreate {
	vc.mutation.SetExpiresAt(t)
	return vc
}

// SetIPAddress sets the "ip_address" field.
func (vc *VerificationCreate) SetIPAddress(s string) *VerificationCreate {
	vc.mutation.SetIPAddress(s)
	return vc
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (vc *VerificationCreate) SetNillableIPAddress(s *string) *VerificationCreate {
	if s != nil {
		vc.SetIPAddress(*s)
	}
	return vc
}

// SetUserAgent sets the "user_agent" field.
func (vc *VerificationCreate) SetUserAgent(s string) *VerificationCreate {
	vc.mutation.SetUserAgent(s)
	return vc
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (vc *VerificationCreate) SetNillableUserAgent(s *string) *VerificationCreate {
	if s != nil {
		vc.SetUserAgent(*s)
	}
	return vc
}

// SetAttestation sets the "attestation" field.
func (vc *VerificationCreate) SetAttestation(m map[string]interface{}) *VerificationCreate {
	vc.mutation.SetAttestation(m)
	return vc
}

// SetID sets the "id" field.
func (vc *VerificationCreate) SetID(s string) *VerificationCreate {
	vc.mutation.SetID(s)
	return vc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (vc *VerificationCreate) SetNillableID(s *string) *VerificationCreate {
	if s != nil {
		vc.SetID(*s)
	}
	return vc
}

// SetUser sets the "user" edge to the User entity.
func (vc *VerificationCreate) SetUser(u *User) *VerificationCreate {
	return vc.SetUserID(u.ID)
}

// Mutation returns the VerificationMutation object of the builder.
func (vc *VerificationCreate) Mutation() *VerificationMutation {
	return vc.mutation
}

// Save creates the Verification in the database.
func (vc *VerificationCreate) Save(ctx context.Context) (*Verification, error) {
	vc.defaults()
	return withHooks(ctx, vc.sqlSave, vc.mutation, vc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (vc *VerificationCreate) SaveX(ctx context.Context) *Verification {
	v, err := vc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vc *VerificationCreate) Exec(ctx context.Context) error {
	_, err := vc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vc *VerificationCreate) ExecX(ctx context.Context) {
	if err := vc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vc *VerificationCreate) defaults() {
	if _, ok := vc.mutation.CreatedAt(); !ok {
		v := verification.DefaultCreatedAt()
		vc.mutation.SetCreatedAt(v)
	}
	if _, ok := vc.mutation.UpdatedAt(); !ok {
		v := verification.DefaultUpdatedAt()
		vc.mutation.SetUpdatedAt(v)
	}
	if _, ok := vc.mutation.Used(); !ok {
		v := verification.DefaultUsed
		vc.mutation.SetUsed(v)
	}
	if _, ok := vc.mutation.Attempts(); !ok {
		v := verification.DefaultAttempts
		vc.mutation.SetAttempts(v)
	}
	if _, ok := vc.mutation.ID(); !ok {
		v := verification.DefaultID()
		vc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vc *VerificationCreate) check() error {
	if _, ok := vc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Verification.created_at"`)}
	}
	if _, ok := vc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Verification.updated_at"`)}
	}
	if _, ok := vc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Verification.user_id"`)}
	}
	if v, ok := vc.mutation.UserID(); ok {
		if err := verification.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "Verification.user_id": %w`, err)}
		}
	}
	if _, ok := vc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Verification.type"`)}
	}
	if v, ok := vc.mutation.GetType(); ok {
		if err := verification.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Verification.type": %w`, err)}
		}
	}
	if _, ok := vc.mutation.Token(); !ok {
		return &ValidationError{Name: "token", err: errors.New(`ent: missing required field "Verification.token"`)}
	}
	if v, ok := vc.mutation.Token(); ok {
		if err := verification.TokenValidator(v); err != nil {
			return &ValidationError{Name: "token", err: fmt.Errorf(`ent: validator failed for field "Verification.token": %w`, err)}
		}
	}
	if _, ok := vc.mutation.Used(); !ok {
		return &ValidationError{Name: "used", err: errors.New(`ent: missing required field "Verification.used"`)}
	}
	if _, ok := vc.mutation.Attempts(); !ok {
		return &ValidationError{Name: "attempts", err: errors.New(`ent: missing required field "Verification.attempts"`)}
	}
	if _, ok := vc.mutation.ExpiresAt(); !ok {
		return &ValidationError{Name: "expires_at", err: errors.New(`ent: missing required field "Verification.expires_at"`)}
	}
	if len(vc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "Verification.user"`)}
	}
	return nil
}

func (vc *VerificationCreate) sqlSave(ctx context.Context) (*Verification, error) {
	if err := vc.check(); err != nil {
		return nil, err
	}
	_node, _spec := vc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Verification.ID type: %T", _spec.ID.Value)
		}
	}
	vc.mutation.id = &_node.ID
	vc.mutation.done = true
	return _node, nil
}

func (vc *VerificationCreate) createSpec() (*Verification, *sqlgraph.CreateSpec) {
	var (
		_node = &Verification{config: vc.config}
		_spec = sqlgraph.NewCreateSpec(verification.Table, sqlgraph.NewFieldSpec(verification.FieldID, field.TypeString))
	)
	if id, ok := vc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := vc.mutation.CreatedAt(); ok {
		_spec.SetField(verification.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := vc.mutation.UpdatedAt(); ok {
		_spec.SetField(verification.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := vc.mutation.GetType(); ok {
		_spec.SetField(verification.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := vc.mutation.Token(); ok {
		_spec.SetField(verification.FieldToken, field.TypeString, value)
		_node.Token = value
	}
	if value, ok := vc.mutation.Email(); ok {
		_spec.SetField(verification.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := vc.mutation.PhoneNumber(); ok {
		_spec.SetField(verification.FieldPhoneNumber, field.TypeString, value)
		_node.PhoneNumber = value
	}
	if value, ok := vc.mutation.RedirectURL(); ok {
		_spec.SetField(verification.FieldRedirectURL, field.TypeString, value)
		_node.RedirectURL = value
	}
	if value, ok := vc.mutation.Used(); ok {
		_spec.SetField(verification.FieldUsed, field.TypeBool, value)
		_node.Used = value
	}
	if value, ok := vc.mutation.UsedAt(); ok {
		_spec.SetField(verification.FieldUsedAt, field.TypeTime, value)
		_node.UsedAt = &value
	}
	if value, ok := vc.mutation.Attempts(); ok {
		_spec.SetField(verification.FieldAttempts, field.TypeInt, value)
		_node.Attempts = value
	}
	if value, ok := vc.mutation.ExpiresAt(); ok {
		_spec.SetField(verification.FieldExpiresAt, field.TypeTime, value)
		_node.ExpiresAt = value
	}
	if value, ok := vc.mutation.IPAddress(); ok {
		_spec.SetField(verification.FieldIPAddress, field.TypeString, value)
		_node.IPAddress = value
	}
	if value, ok := vc.mutation.UserAgent(); ok {
		_spec.SetField(verification.FieldUserAgent, field.TypeString, value)
		_node.UserAgent = value
	}
	if value, ok := vc.mutation.Attestation(); ok {
		_spec.SetField(verification.FieldAttestation, field.TypeJSON, value)
		_node.Attestation = value
	}
	if nodes := vc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   verification.UserTable,
			Columns: []string{verification.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// VerificationCreateBulk is the builder for creating many Verification entities in bulk.
type VerificationCreateBulk struct {
	config
	err      error
	builders []*VerificationCreate
}

// Save creates the Verification entities in the database.
func (vcb *VerificationCreateBulk) Save(ctx context.Context) ([]*Verification, error) {
	if vcb.err != nil {
		return nil, vcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(vcb.builders))
	nodes := make([]*Verification, len(vcb.builders))
	mutators := make([]Mutator, len(vcb.builders))
	for i := range vcb.builders {
		func(i int, root context.Context) {
			builder := vcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VerificationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vcb *VerificationCreateBulk) SaveX(ctx context.Context) []*Verification {
	v, err := vcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vcb *VerificationCreateBulk) Exec(ctx context.Context) error {
	_, err := vcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vcb *VerificationCreateBulk) ExecX(ctx context.Context) {
	if err := vcb.Exec(ctx); err != nil {
		panic(err)
	}
}
