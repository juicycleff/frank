// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/juicycleff/frank/ent/identityprovider"
	"github.com/juicycleff/frank/ent/organization"
	"github.com/juicycleff/frank/ent/predicate"
)

// IdentityProviderUpdate is the builder for updating IdentityProvider entities.
type IdentityProviderUpdate struct {
	config
	hooks    []Hook
	mutation *IdentityProviderMutation
}

// Where appends a list predicates to the IdentityProviderUpdate builder.
func (ipu *IdentityProviderUpdate) Where(ps ...predicate.IdentityProvider) *IdentityProviderUpdate {
	ipu.mutation.Where(ps...)
	return ipu
}

// SetUpdatedAt sets the "updated_at" field.
func (ipu *IdentityProviderUpdate) SetUpdatedAt(t time.Time) *IdentityProviderUpdate {
	ipu.mutation.SetUpdatedAt(t)
	return ipu
}

// SetName sets the "name" field.
func (ipu *IdentityProviderUpdate) SetName(s string) *IdentityProviderUpdate {
	ipu.mutation.SetName(s)
	return ipu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ipu *IdentityProviderUpdate) SetNillableName(s *string) *IdentityProviderUpdate {
	if s != nil {
		ipu.SetName(*s)
	}
	return ipu
}

// SetOrganizationID sets the "organization_id" field.
func (ipu *IdentityProviderUpdate) SetOrganizationID(s string) *IdentityProviderUpdate {
	ipu.mutation.SetOrganizationID(s)
	return ipu
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (ipu *IdentityProviderUpdate) SetNillableOrganizationID(s *string) *IdentityProviderUpdate {
	if s != nil {
		ipu.SetOrganizationID(*s)
	}
	return ipu
}

// SetProviderType sets the "provider_type" field.
func (ipu *IdentityProviderUpdate) SetProviderType(s string) *IdentityProviderUpdate {
	ipu.mutation.SetProviderType(s)
	return ipu
}

// SetNillableProviderType sets the "provider_type" field if the given value is not nil.
func (ipu *IdentityProviderUpdate) SetNillableProviderType(s *string) *IdentityProviderUpdate {
	if s != nil {
		ipu.SetProviderType(*s)
	}
	return ipu
}

// SetClientID sets the "client_id" field.
func (ipu *IdentityProviderUpdate) SetClientID(s string) *IdentityProviderUpdate {
	ipu.mutation.SetClientID(s)
	return ipu
}

// SetNillableClientID sets the "client_id" field if the given value is not nil.
func (ipu *IdentityProviderUpdate) SetNillableClientID(s *string) *IdentityProviderUpdate {
	if s != nil {
		ipu.SetClientID(*s)
	}
	return ipu
}

// ClearClientID clears the value of the "client_id" field.
func (ipu *IdentityProviderUpdate) ClearClientID() *IdentityProviderUpdate {
	ipu.mutation.ClearClientID()
	return ipu
}

// SetClientSecret sets the "client_secret" field.
func (ipu *IdentityProviderUpdate) SetClientSecret(s string) *IdentityProviderUpdate {
	ipu.mutation.SetClientSecret(s)
	return ipu
}

// SetNillableClientSecret sets the "client_secret" field if the given value is not nil.
func (ipu *IdentityProviderUpdate) SetNillableClientSecret(s *string) *IdentityProviderUpdate {
	if s != nil {
		ipu.SetClientSecret(*s)
	}
	return ipu
}

// ClearClientSecret clears the value of the "client_secret" field.
func (ipu *IdentityProviderUpdate) ClearClientSecret() *IdentityProviderUpdate {
	ipu.mutation.ClearClientSecret()
	return ipu
}

// SetIssuer sets the "issuer" field.
func (ipu *IdentityProviderUpdate) SetIssuer(s string) *IdentityProviderUpdate {
	ipu.mutation.SetIssuer(s)
	return ipu
}

// SetNillableIssuer sets the "issuer" field if the given value is not nil.
func (ipu *IdentityProviderUpdate) SetNillableIssuer(s *string) *IdentityProviderUpdate {
	if s != nil {
		ipu.SetIssuer(*s)
	}
	return ipu
}

// ClearIssuer clears the value of the "issuer" field.
func (ipu *IdentityProviderUpdate) ClearIssuer() *IdentityProviderUpdate {
	ipu.mutation.ClearIssuer()
	return ipu
}

// SetAuthorizationEndpoint sets the "authorization_endpoint" field.
func (ipu *IdentityProviderUpdate) SetAuthorizationEndpoint(s string) *IdentityProviderUpdate {
	ipu.mutation.SetAuthorizationEndpoint(s)
	return ipu
}

// SetNillableAuthorizationEndpoint sets the "authorization_endpoint" field if the given value is not nil.
func (ipu *IdentityProviderUpdate) SetNillableAuthorizationEndpoint(s *string) *IdentityProviderUpdate {
	if s != nil {
		ipu.SetAuthorizationEndpoint(*s)
	}
	return ipu
}

// ClearAuthorizationEndpoint clears the value of the "authorization_endpoint" field.
func (ipu *IdentityProviderUpdate) ClearAuthorizationEndpoint() *IdentityProviderUpdate {
	ipu.mutation.ClearAuthorizationEndpoint()
	return ipu
}

// SetTokenEndpoint sets the "token_endpoint" field.
func (ipu *IdentityProviderUpdate) SetTokenEndpoint(s string) *IdentityProviderUpdate {
	ipu.mutation.SetTokenEndpoint(s)
	return ipu
}

// SetNillableTokenEndpoint sets the "token_endpoint" field if the given value is not nil.
func (ipu *IdentityProviderUpdate) SetNillableTokenEndpoint(s *string) *IdentityProviderUpdate {
	if s != nil {
		ipu.SetTokenEndpoint(*s)
	}
	return ipu
}

// ClearTokenEndpoint clears the value of the "token_endpoint" field.
func (ipu *IdentityProviderUpdate) ClearTokenEndpoint() *IdentityProviderUpdate {
	ipu.mutation.ClearTokenEndpoint()
	return ipu
}

// SetUserinfoEndpoint sets the "userinfo_endpoint" field.
func (ipu *IdentityProviderUpdate) SetUserinfoEndpoint(s string) *IdentityProviderUpdate {
	ipu.mutation.SetUserinfoEndpoint(s)
	return ipu
}

// SetNillableUserinfoEndpoint sets the "userinfo_endpoint" field if the given value is not nil.
func (ipu *IdentityProviderUpdate) SetNillableUserinfoEndpoint(s *string) *IdentityProviderUpdate {
	if s != nil {
		ipu.SetUserinfoEndpoint(*s)
	}
	return ipu
}

// ClearUserinfoEndpoint clears the value of the "userinfo_endpoint" field.
func (ipu *IdentityProviderUpdate) ClearUserinfoEndpoint() *IdentityProviderUpdate {
	ipu.mutation.ClearUserinfoEndpoint()
	return ipu
}

// SetJwksURI sets the "jwks_uri" field.
func (ipu *IdentityProviderUpdate) SetJwksURI(s string) *IdentityProviderUpdate {
	ipu.mutation.SetJwksURI(s)
	return ipu
}

// SetNillableJwksURI sets the "jwks_uri" field if the given value is not nil.
func (ipu *IdentityProviderUpdate) SetNillableJwksURI(s *string) *IdentityProviderUpdate {
	if s != nil {
		ipu.SetJwksURI(*s)
	}
	return ipu
}

// ClearJwksURI clears the value of the "jwks_uri" field.
func (ipu *IdentityProviderUpdate) ClearJwksURI() *IdentityProviderUpdate {
	ipu.mutation.ClearJwksURI()
	return ipu
}

// SetMetadataURL sets the "metadata_url" field.
func (ipu *IdentityProviderUpdate) SetMetadataURL(s string) *IdentityProviderUpdate {
	ipu.mutation.SetMetadataURL(s)
	return ipu
}

// SetNillableMetadataURL sets the "metadata_url" field if the given value is not nil.
func (ipu *IdentityProviderUpdate) SetNillableMetadataURL(s *string) *IdentityProviderUpdate {
	if s != nil {
		ipu.SetMetadataURL(*s)
	}
	return ipu
}

// ClearMetadataURL clears the value of the "metadata_url" field.
func (ipu *IdentityProviderUpdate) ClearMetadataURL() *IdentityProviderUpdate {
	ipu.mutation.ClearMetadataURL()
	return ipu
}

// SetRedirectURI sets the "redirect_uri" field.
func (ipu *IdentityProviderUpdate) SetRedirectURI(s string) *IdentityProviderUpdate {
	ipu.mutation.SetRedirectURI(s)
	return ipu
}

// SetNillableRedirectURI sets the "redirect_uri" field if the given value is not nil.
func (ipu *IdentityProviderUpdate) SetNillableRedirectURI(s *string) *IdentityProviderUpdate {
	if s != nil {
		ipu.SetRedirectURI(*s)
	}
	return ipu
}

// ClearRedirectURI clears the value of the "redirect_uri" field.
func (ipu *IdentityProviderUpdate) ClearRedirectURI() *IdentityProviderUpdate {
	ipu.mutation.ClearRedirectURI()
	return ipu
}

// SetCertificate sets the "certificate" field.
func (ipu *IdentityProviderUpdate) SetCertificate(s string) *IdentityProviderUpdate {
	ipu.mutation.SetCertificate(s)
	return ipu
}

// SetNillableCertificate sets the "certificate" field if the given value is not nil.
func (ipu *IdentityProviderUpdate) SetNillableCertificate(s *string) *IdentityProviderUpdate {
	if s != nil {
		ipu.SetCertificate(*s)
	}
	return ipu
}

// ClearCertificate clears the value of the "certificate" field.
func (ipu *IdentityProviderUpdate) ClearCertificate() *IdentityProviderUpdate {
	ipu.mutation.ClearCertificate()
	return ipu
}

// SetPrivateKey sets the "private_key" field.
func (ipu *IdentityProviderUpdate) SetPrivateKey(s string) *IdentityProviderUpdate {
	ipu.mutation.SetPrivateKey(s)
	return ipu
}

// SetNillablePrivateKey sets the "private_key" field if the given value is not nil.
func (ipu *IdentityProviderUpdate) SetNillablePrivateKey(s *string) *IdentityProviderUpdate {
	if s != nil {
		ipu.SetPrivateKey(*s)
	}
	return ipu
}

// ClearPrivateKey clears the value of the "private_key" field.
func (ipu *IdentityProviderUpdate) ClearPrivateKey() *IdentityProviderUpdate {
	ipu.mutation.ClearPrivateKey()
	return ipu
}

// SetActive sets the "active" field.
func (ipu *IdentityProviderUpdate) SetActive(b bool) *IdentityProviderUpdate {
	ipu.mutation.SetActive(b)
	return ipu
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (ipu *IdentityProviderUpdate) SetNillableActive(b *bool) *IdentityProviderUpdate {
	if b != nil {
		ipu.SetActive(*b)
	}
	return ipu
}

// SetPrimary sets the "primary" field.
func (ipu *IdentityProviderUpdate) SetPrimary(b bool) *IdentityProviderUpdate {
	ipu.mutation.SetPrimary(b)
	return ipu
}

// SetNillablePrimary sets the "primary" field if the given value is not nil.
func (ipu *IdentityProviderUpdate) SetNillablePrimary(b *bool) *IdentityProviderUpdate {
	if b != nil {
		ipu.SetPrimary(*b)
	}
	return ipu
}

// SetDomains sets the "domains" field.
func (ipu *IdentityProviderUpdate) SetDomains(s []string) *IdentityProviderUpdate {
	ipu.mutation.SetDomains(s)
	return ipu
}

// AppendDomains appends s to the "domains" field.
func (ipu *IdentityProviderUpdate) AppendDomains(s []string) *IdentityProviderUpdate {
	ipu.mutation.AppendDomains(s)
	return ipu
}

// ClearDomains clears the value of the "domains" field.
func (ipu *IdentityProviderUpdate) ClearDomains() *IdentityProviderUpdate {
	ipu.mutation.ClearDomains()
	return ipu
}

// SetAttributesMapping sets the "attributes_mapping" field.
func (ipu *IdentityProviderUpdate) SetAttributesMapping(m map[string]string) *IdentityProviderUpdate {
	ipu.mutation.SetAttributesMapping(m)
	return ipu
}

// ClearAttributesMapping clears the value of the "attributes_mapping" field.
func (ipu *IdentityProviderUpdate) ClearAttributesMapping() *IdentityProviderUpdate {
	ipu.mutation.ClearAttributesMapping()
	return ipu
}

// SetMetadata sets the "metadata" field.
func (ipu *IdentityProviderUpdate) SetMetadata(m map[string]interface{}) *IdentityProviderUpdate {
	ipu.mutation.SetMetadata(m)
	return ipu
}

// ClearMetadata clears the value of the "metadata" field.
func (ipu *IdentityProviderUpdate) ClearMetadata() *IdentityProviderUpdate {
	ipu.mutation.ClearMetadata()
	return ipu
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (ipu *IdentityProviderUpdate) SetOrganization(o *Organization) *IdentityProviderUpdate {
	return ipu.SetOrganizationID(o.ID)
}

// Mutation returns the IdentityProviderMutation object of the builder.
func (ipu *IdentityProviderUpdate) Mutation() *IdentityProviderMutation {
	return ipu.mutation
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (ipu *IdentityProviderUpdate) ClearOrganization() *IdentityProviderUpdate {
	ipu.mutation.ClearOrganization()
	return ipu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ipu *IdentityProviderUpdate) Save(ctx context.Context) (int, error) {
	ipu.defaults()
	return withHooks(ctx, ipu.sqlSave, ipu.mutation, ipu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ipu *IdentityProviderUpdate) SaveX(ctx context.Context) int {
	affected, err := ipu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ipu *IdentityProviderUpdate) Exec(ctx context.Context) error {
	_, err := ipu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ipu *IdentityProviderUpdate) ExecX(ctx context.Context) {
	if err := ipu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ipu *IdentityProviderUpdate) defaults() {
	if _, ok := ipu.mutation.UpdatedAt(); !ok {
		v := identityprovider.UpdateDefaultUpdatedAt()
		ipu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ipu *IdentityProviderUpdate) check() error {
	if v, ok := ipu.mutation.Name(); ok {
		if err := identityprovider.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "IdentityProvider.name": %w`, err)}
		}
	}
	if v, ok := ipu.mutation.OrganizationID(); ok {
		if err := identityprovider.OrganizationIDValidator(v); err != nil {
			return &ValidationError{Name: "organization_id", err: fmt.Errorf(`ent: validator failed for field "IdentityProvider.organization_id": %w`, err)}
		}
	}
	if v, ok := ipu.mutation.ProviderType(); ok {
		if err := identityprovider.ProviderTypeValidator(v); err != nil {
			return &ValidationError{Name: "provider_type", err: fmt.Errorf(`ent: validator failed for field "IdentityProvider.provider_type": %w`, err)}
		}
	}
	if ipu.mutation.OrganizationCleared() && len(ipu.mutation.OrganizationIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "IdentityProvider.organization"`)
	}
	return nil
}

func (ipu *IdentityProviderUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ipu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(identityprovider.Table, identityprovider.Columns, sqlgraph.NewFieldSpec(identityprovider.FieldID, field.TypeString))
	if ps := ipu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ipu.mutation.UpdatedAt(); ok {
		_spec.SetField(identityprovider.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ipu.mutation.Name(); ok {
		_spec.SetField(identityprovider.FieldName, field.TypeString, value)
	}
	if value, ok := ipu.mutation.ProviderType(); ok {
		_spec.SetField(identityprovider.FieldProviderType, field.TypeString, value)
	}
	if value, ok := ipu.mutation.ClientID(); ok {
		_spec.SetField(identityprovider.FieldClientID, field.TypeString, value)
	}
	if ipu.mutation.ClientIDCleared() {
		_spec.ClearField(identityprovider.FieldClientID, field.TypeString)
	}
	if value, ok := ipu.mutation.ClientSecret(); ok {
		_spec.SetField(identityprovider.FieldClientSecret, field.TypeString, value)
	}
	if ipu.mutation.ClientSecretCleared() {
		_spec.ClearField(identityprovider.FieldClientSecret, field.TypeString)
	}
	if value, ok := ipu.mutation.Issuer(); ok {
		_spec.SetField(identityprovider.FieldIssuer, field.TypeString, value)
	}
	if ipu.mutation.IssuerCleared() {
		_spec.ClearField(identityprovider.FieldIssuer, field.TypeString)
	}
	if value, ok := ipu.mutation.AuthorizationEndpoint(); ok {
		_spec.SetField(identityprovider.FieldAuthorizationEndpoint, field.TypeString, value)
	}
	if ipu.mutation.AuthorizationEndpointCleared() {
		_spec.ClearField(identityprovider.FieldAuthorizationEndpoint, field.TypeString)
	}
	if value, ok := ipu.mutation.TokenEndpoint(); ok {
		_spec.SetField(identityprovider.FieldTokenEndpoint, field.TypeString, value)
	}
	if ipu.mutation.TokenEndpointCleared() {
		_spec.ClearField(identityprovider.FieldTokenEndpoint, field.TypeString)
	}
	if value, ok := ipu.mutation.UserinfoEndpoint(); ok {
		_spec.SetField(identityprovider.FieldUserinfoEndpoint, field.TypeString, value)
	}
	if ipu.mutation.UserinfoEndpointCleared() {
		_spec.ClearField(identityprovider.FieldUserinfoEndpoint, field.TypeString)
	}
	if value, ok := ipu.mutation.JwksURI(); ok {
		_spec.SetField(identityprovider.FieldJwksURI, field.TypeString, value)
	}
	if ipu.mutation.JwksURICleared() {
		_spec.ClearField(identityprovider.FieldJwksURI, field.TypeString)
	}
	if value, ok := ipu.mutation.MetadataURL(); ok {
		_spec.SetField(identityprovider.FieldMetadataURL, field.TypeString, value)
	}
	if ipu.mutation.MetadataURLCleared() {
		_spec.ClearField(identityprovider.FieldMetadataURL, field.TypeString)
	}
	if value, ok := ipu.mutation.RedirectURI(); ok {
		_spec.SetField(identityprovider.FieldRedirectURI, field.TypeString, value)
	}
	if ipu.mutation.RedirectURICleared() {
		_spec.ClearField(identityprovider.FieldRedirectURI, field.TypeString)
	}
	if value, ok := ipu.mutation.Certificate(); ok {
		_spec.SetField(identityprovider.FieldCertificate, field.TypeString, value)
	}
	if ipu.mutation.CertificateCleared() {
		_spec.ClearField(identityprovider.FieldCertificate, field.TypeString)
	}
	if value, ok := ipu.mutation.PrivateKey(); ok {
		_spec.SetField(identityprovider.FieldPrivateKey, field.TypeString, value)
	}
	if ipu.mutation.PrivateKeyCleared() {
		_spec.ClearField(identityprovider.FieldPrivateKey, field.TypeString)
	}
	if value, ok := ipu.mutation.Active(); ok {
		_spec.SetField(identityprovider.FieldActive, field.TypeBool, value)
	}
	if value, ok := ipu.mutation.Primary(); ok {
		_spec.SetField(identityprovider.FieldPrimary, field.TypeBool, value)
	}
	if value, ok := ipu.mutation.Domains(); ok {
		_spec.SetField(identityprovider.FieldDomains, field.TypeJSON, value)
	}
	if value, ok := ipu.mutation.AppendedDomains(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, identityprovider.FieldDomains, value)
		})
	}
	if ipu.mutation.DomainsCleared() {
		_spec.ClearField(identityprovider.FieldDomains, field.TypeJSON)
	}
	if value, ok := ipu.mutation.AttributesMapping(); ok {
		_spec.SetField(identityprovider.FieldAttributesMapping, field.TypeJSON, value)
	}
	if ipu.mutation.AttributesMappingCleared() {
		_spec.ClearField(identityprovider.FieldAttributesMapping, field.TypeJSON)
	}
	if value, ok := ipu.mutation.Metadata(); ok {
		_spec.SetField(identityprovider.FieldMetadata, field.TypeJSON, value)
	}
	if ipu.mutation.MetadataCleared() {
		_spec.ClearField(identityprovider.FieldMetadata, field.TypeJSON)
	}
	if ipu.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   identityprovider.OrganizationTable,
			Columns: []string{identityprovider.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ipu.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   identityprovider.OrganizationTable,
			Columns: []string{identityprovider.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ipu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{identityprovider.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ipu.mutation.done = true
	return n, nil
}

// IdentityProviderUpdateOne is the builder for updating a single IdentityProvider entity.
type IdentityProviderUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *IdentityProviderMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (ipuo *IdentityProviderUpdateOne) SetUpdatedAt(t time.Time) *IdentityProviderUpdateOne {
	ipuo.mutation.SetUpdatedAt(t)
	return ipuo
}

// SetName sets the "name" field.
func (ipuo *IdentityProviderUpdateOne) SetName(s string) *IdentityProviderUpdateOne {
	ipuo.mutation.SetName(s)
	return ipuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ipuo *IdentityProviderUpdateOne) SetNillableName(s *string) *IdentityProviderUpdateOne {
	if s != nil {
		ipuo.SetName(*s)
	}
	return ipuo
}

// SetOrganizationID sets the "organization_id" field.
func (ipuo *IdentityProviderUpdateOne) SetOrganizationID(s string) *IdentityProviderUpdateOne {
	ipuo.mutation.SetOrganizationID(s)
	return ipuo
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (ipuo *IdentityProviderUpdateOne) SetNillableOrganizationID(s *string) *IdentityProviderUpdateOne {
	if s != nil {
		ipuo.SetOrganizationID(*s)
	}
	return ipuo
}

// SetProviderType sets the "provider_type" field.
func (ipuo *IdentityProviderUpdateOne) SetProviderType(s string) *IdentityProviderUpdateOne {
	ipuo.mutation.SetProviderType(s)
	return ipuo
}

// SetNillableProviderType sets the "provider_type" field if the given value is not nil.
func (ipuo *IdentityProviderUpdateOne) SetNillableProviderType(s *string) *IdentityProviderUpdateOne {
	if s != nil {
		ipuo.SetProviderType(*s)
	}
	return ipuo
}

// SetClientID sets the "client_id" field.
func (ipuo *IdentityProviderUpdateOne) SetClientID(s string) *IdentityProviderUpdateOne {
	ipuo.mutation.SetClientID(s)
	return ipuo
}

// SetNillableClientID sets the "client_id" field if the given value is not nil.
func (ipuo *IdentityProviderUpdateOne) SetNillableClientID(s *string) *IdentityProviderUpdateOne {
	if s != nil {
		ipuo.SetClientID(*s)
	}
	return ipuo
}

// ClearClientID clears the value of the "client_id" field.
func (ipuo *IdentityProviderUpdateOne) ClearClientID() *IdentityProviderUpdateOne {
	ipuo.mutation.ClearClientID()
	return ipuo
}

// SetClientSecret sets the "client_secret" field.
func (ipuo *IdentityProviderUpdateOne) SetClientSecret(s string) *IdentityProviderUpdateOne {
	ipuo.mutation.SetClientSecret(s)
	return ipuo
}

// SetNillableClientSecret sets the "client_secret" field if the given value is not nil.
func (ipuo *IdentityProviderUpdateOne) SetNillableClientSecret(s *string) *IdentityProviderUpdateOne {
	if s != nil {
		ipuo.SetClientSecret(*s)
	}
	return ipuo
}

// ClearClientSecret clears the value of the "client_secret" field.
func (ipuo *IdentityProviderUpdateOne) ClearClientSecret() *IdentityProviderUpdateOne {
	ipuo.mutation.ClearClientSecret()
	return ipuo
}

// SetIssuer sets the "issuer" field.
func (ipuo *IdentityProviderUpdateOne) SetIssuer(s string) *IdentityProviderUpdateOne {
	ipuo.mutation.SetIssuer(s)
	return ipuo
}

// SetNillableIssuer sets the "issuer" field if the given value is not nil.
func (ipuo *IdentityProviderUpdateOne) SetNillableIssuer(s *string) *IdentityProviderUpdateOne {
	if s != nil {
		ipuo.SetIssuer(*s)
	}
	return ipuo
}

// ClearIssuer clears the value of the "issuer" field.
func (ipuo *IdentityProviderUpdateOne) ClearIssuer() *IdentityProviderUpdateOne {
	ipuo.mutation.ClearIssuer()
	return ipuo
}

// SetAuthorizationEndpoint sets the "authorization_endpoint" field.
func (ipuo *IdentityProviderUpdateOne) SetAuthorizationEndpoint(s string) *IdentityProviderUpdateOne {
	ipuo.mutation.SetAuthorizationEndpoint(s)
	return ipuo
}

// SetNillableAuthorizationEndpoint sets the "authorization_endpoint" field if the given value is not nil.
func (ipuo *IdentityProviderUpdateOne) SetNillableAuthorizationEndpoint(s *string) *IdentityProviderUpdateOne {
	if s != nil {
		ipuo.SetAuthorizationEndpoint(*s)
	}
	return ipuo
}

// ClearAuthorizationEndpoint clears the value of the "authorization_endpoint" field.
func (ipuo *IdentityProviderUpdateOne) ClearAuthorizationEndpoint() *IdentityProviderUpdateOne {
	ipuo.mutation.ClearAuthorizationEndpoint()
	return ipuo
}

// SetTokenEndpoint sets the "token_endpoint" field.
func (ipuo *IdentityProviderUpdateOne) SetTokenEndpoint(s string) *IdentityProviderUpdateOne {
	ipuo.mutation.SetTokenEndpoint(s)
	return ipuo
}

// SetNillableTokenEndpoint sets the "token_endpoint" field if the given value is not nil.
func (ipuo *IdentityProviderUpdateOne) SetNillableTokenEndpoint(s *string) *IdentityProviderUpdateOne {
	if s != nil {
		ipuo.SetTokenEndpoint(*s)
	}
	return ipuo
}

// ClearTokenEndpoint clears the value of the "token_endpoint" field.
func (ipuo *IdentityProviderUpdateOne) ClearTokenEndpoint() *IdentityProviderUpdateOne {
	ipuo.mutation.ClearTokenEndpoint()
	return ipuo
}

// SetUserinfoEndpoint sets the "userinfo_endpoint" field.
func (ipuo *IdentityProviderUpdateOne) SetUserinfoEndpoint(s string) *IdentityProviderUpdateOne {
	ipuo.mutation.SetUserinfoEndpoint(s)
	return ipuo
}

// SetNillableUserinfoEndpoint sets the "userinfo_endpoint" field if the given value is not nil.
func (ipuo *IdentityProviderUpdateOne) SetNillableUserinfoEndpoint(s *string) *IdentityProviderUpdateOne {
	if s != nil {
		ipuo.SetUserinfoEndpoint(*s)
	}
	return ipuo
}

// ClearUserinfoEndpoint clears the value of the "userinfo_endpoint" field.
func (ipuo *IdentityProviderUpdateOne) ClearUserinfoEndpoint() *IdentityProviderUpdateOne {
	ipuo.mutation.ClearUserinfoEndpoint()
	return ipuo
}

// SetJwksURI sets the "jwks_uri" field.
func (ipuo *IdentityProviderUpdateOne) SetJwksURI(s string) *IdentityProviderUpdateOne {
	ipuo.mutation.SetJwksURI(s)
	return ipuo
}

// SetNillableJwksURI sets the "jwks_uri" field if the given value is not nil.
func (ipuo *IdentityProviderUpdateOne) SetNillableJwksURI(s *string) *IdentityProviderUpdateOne {
	if s != nil {
		ipuo.SetJwksURI(*s)
	}
	return ipuo
}

// ClearJwksURI clears the value of the "jwks_uri" field.
func (ipuo *IdentityProviderUpdateOne) ClearJwksURI() *IdentityProviderUpdateOne {
	ipuo.mutation.ClearJwksURI()
	return ipuo
}

// SetMetadataURL sets the "metadata_url" field.
func (ipuo *IdentityProviderUpdateOne) SetMetadataURL(s string) *IdentityProviderUpdateOne {
	ipuo.mutation.SetMetadataURL(s)
	return ipuo
}

// SetNillableMetadataURL sets the "metadata_url" field if the given value is not nil.
func (ipuo *IdentityProviderUpdateOne) SetNillableMetadataURL(s *string) *IdentityProviderUpdateOne {
	if s != nil {
		ipuo.SetMetadataURL(*s)
	}
	return ipuo
}

// ClearMetadataURL clears the value of the "metadata_url" field.
func (ipuo *IdentityProviderUpdateOne) ClearMetadataURL() *IdentityProviderUpdateOne {
	ipuo.mutation.ClearMetadataURL()
	return ipuo
}

// SetRedirectURI sets the "redirect_uri" field.
func (ipuo *IdentityProviderUpdateOne) SetRedirectURI(s string) *IdentityProviderUpdateOne {
	ipuo.mutation.SetRedirectURI(s)
	return ipuo
}

// SetNillableRedirectURI sets the "redirect_uri" field if the given value is not nil.
func (ipuo *IdentityProviderUpdateOne) SetNillableRedirectURI(s *string) *IdentityProviderUpdateOne {
	if s != nil {
		ipuo.SetRedirectURI(*s)
	}
	return ipuo
}

// ClearRedirectURI clears the value of the "redirect_uri" field.
func (ipuo *IdentityProviderUpdateOne) ClearRedirectURI() *IdentityProviderUpdateOne {
	ipuo.mutation.ClearRedirectURI()
	return ipuo
}

// SetCertificate sets the "certificate" field.
func (ipuo *IdentityProviderUpdateOne) SetCertificate(s string) *IdentityProviderUpdateOne {
	ipuo.mutation.SetCertificate(s)
	return ipuo
}

// SetNillableCertificate sets the "certificate" field if the given value is not nil.
func (ipuo *IdentityProviderUpdateOne) SetNillableCertificate(s *string) *IdentityProviderUpdateOne {
	if s != nil {
		ipuo.SetCertificate(*s)
	}
	return ipuo
}

// ClearCertificate clears the value of the "certificate" field.
func (ipuo *IdentityProviderUpdateOne) ClearCertificate() *IdentityProviderUpdateOne {
	ipuo.mutation.ClearCertificate()
	return ipuo
}

// SetPrivateKey sets the "private_key" field.
func (ipuo *IdentityProviderUpdateOne) SetPrivateKey(s string) *IdentityProviderUpdateOne {
	ipuo.mutation.SetPrivateKey(s)
	return ipuo
}

// SetNillablePrivateKey sets the "private_key" field if the given value is not nil.
func (ipuo *IdentityProviderUpdateOne) SetNillablePrivateKey(s *string) *IdentityProviderUpdateOne {
	if s != nil {
		ipuo.SetPrivateKey(*s)
	}
	return ipuo
}

// ClearPrivateKey clears the value of the "private_key" field.
func (ipuo *IdentityProviderUpdateOne) ClearPrivateKey() *IdentityProviderUpdateOne {
	ipuo.mutation.ClearPrivateKey()
	return ipuo
}

// SetActive sets the "active" field.
func (ipuo *IdentityProviderUpdateOne) SetActive(b bool) *IdentityProviderUpdateOne {
	ipuo.mutation.SetActive(b)
	return ipuo
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (ipuo *IdentityProviderUpdateOne) SetNillableActive(b *bool) *IdentityProviderUpdateOne {
	if b != nil {
		ipuo.SetActive(*b)
	}
	return ipuo
}

// SetPrimary sets the "primary" field.
func (ipuo *IdentityProviderUpdateOne) SetPrimary(b bool) *IdentityProviderUpdateOne {
	ipuo.mutation.SetPrimary(b)
	return ipuo
}

// SetNillablePrimary sets the "primary" field if the given value is not nil.
func (ipuo *IdentityProviderUpdateOne) SetNillablePrimary(b *bool) *IdentityProviderUpdateOne {
	if b != nil {
		ipuo.SetPrimary(*b)
	}
	return ipuo
}

// SetDomains sets the "domains" field.
func (ipuo *IdentityProviderUpdateOne) SetDomains(s []string) *IdentityProviderUpdateOne {
	ipuo.mutation.SetDomains(s)
	return ipuo
}

// AppendDomains appends s to the "domains" field.
func (ipuo *IdentityProviderUpdateOne) AppendDomains(s []string) *IdentityProviderUpdateOne {
	ipuo.mutation.AppendDomains(s)
	return ipuo
}

// ClearDomains clears the value of the "domains" field.
func (ipuo *IdentityProviderUpdateOne) ClearDomains() *IdentityProviderUpdateOne {
	ipuo.mutation.ClearDomains()
	return ipuo
}

// SetAttributesMapping sets the "attributes_mapping" field.
func (ipuo *IdentityProviderUpdateOne) SetAttributesMapping(m map[string]string) *IdentityProviderUpdateOne {
	ipuo.mutation.SetAttributesMapping(m)
	return ipuo
}

// ClearAttributesMapping clears the value of the "attributes_mapping" field.
func (ipuo *IdentityProviderUpdateOne) ClearAttributesMapping() *IdentityProviderUpdateOne {
	ipuo.mutation.ClearAttributesMapping()
	return ipuo
}

// SetMetadata sets the "metadata" field.
func (ipuo *IdentityProviderUpdateOne) SetMetadata(m map[string]interface{}) *IdentityProviderUpdateOne {
	ipuo.mutation.SetMetadata(m)
	return ipuo
}

// ClearMetadata clears the value of the "metadata" field.
func (ipuo *IdentityProviderUpdateOne) ClearMetadata() *IdentityProviderUpdateOne {
	ipuo.mutation.ClearMetadata()
	return ipuo
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (ipuo *IdentityProviderUpdateOne) SetOrganization(o *Organization) *IdentityProviderUpdateOne {
	return ipuo.SetOrganizationID(o.ID)
}

// Mutation returns the IdentityProviderMutation object of the builder.
func (ipuo *IdentityProviderUpdateOne) Mutation() *IdentityProviderMutation {
	return ipuo.mutation
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (ipuo *IdentityProviderUpdateOne) ClearOrganization() *IdentityProviderUpdateOne {
	ipuo.mutation.ClearOrganization()
	return ipuo
}

// Where appends a list predicates to the IdentityProviderUpdate builder.
func (ipuo *IdentityProviderUpdateOne) Where(ps ...predicate.IdentityProvider) *IdentityProviderUpdateOne {
	ipuo.mutation.Where(ps...)
	return ipuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ipuo *IdentityProviderUpdateOne) Select(field string, fields ...string) *IdentityProviderUpdateOne {
	ipuo.fields = append([]string{field}, fields...)
	return ipuo
}

// Save executes the query and returns the updated IdentityProvider entity.
func (ipuo *IdentityProviderUpdateOne) Save(ctx context.Context) (*IdentityProvider, error) {
	ipuo.defaults()
	return withHooks(ctx, ipuo.sqlSave, ipuo.mutation, ipuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ipuo *IdentityProviderUpdateOne) SaveX(ctx context.Context) *IdentityProvider {
	node, err := ipuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ipuo *IdentityProviderUpdateOne) Exec(ctx context.Context) error {
	_, err := ipuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ipuo *IdentityProviderUpdateOne) ExecX(ctx context.Context) {
	if err := ipuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ipuo *IdentityProviderUpdateOne) defaults() {
	if _, ok := ipuo.mutation.UpdatedAt(); !ok {
		v := identityprovider.UpdateDefaultUpdatedAt()
		ipuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ipuo *IdentityProviderUpdateOne) check() error {
	if v, ok := ipuo.mutation.Name(); ok {
		if err := identityprovider.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "IdentityProvider.name": %w`, err)}
		}
	}
	if v, ok := ipuo.mutation.OrganizationID(); ok {
		if err := identityprovider.OrganizationIDValidator(v); err != nil {
			return &ValidationError{Name: "organization_id", err: fmt.Errorf(`ent: validator failed for field "IdentityProvider.organization_id": %w`, err)}
		}
	}
	if v, ok := ipuo.mutation.ProviderType(); ok {
		if err := identityprovider.ProviderTypeValidator(v); err != nil {
			return &ValidationError{Name: "provider_type", err: fmt.Errorf(`ent: validator failed for field "IdentityProvider.provider_type": %w`, err)}
		}
	}
	if ipuo.mutation.OrganizationCleared() && len(ipuo.mutation.OrganizationIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "IdentityProvider.organization"`)
	}
	return nil
}

func (ipuo *IdentityProviderUpdateOne) sqlSave(ctx context.Context) (_node *IdentityProvider, err error) {
	if err := ipuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(identityprovider.Table, identityprovider.Columns, sqlgraph.NewFieldSpec(identityprovider.FieldID, field.TypeString))
	id, ok := ipuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "IdentityProvider.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ipuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, identityprovider.FieldID)
		for _, f := range fields {
			if !identityprovider.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != identityprovider.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ipuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ipuo.mutation.UpdatedAt(); ok {
		_spec.SetField(identityprovider.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ipuo.mutation.Name(); ok {
		_spec.SetField(identityprovider.FieldName, field.TypeString, value)
	}
	if value, ok := ipuo.mutation.ProviderType(); ok {
		_spec.SetField(identityprovider.FieldProviderType, field.TypeString, value)
	}
	if value, ok := ipuo.mutation.ClientID(); ok {
		_spec.SetField(identityprovider.FieldClientID, field.TypeString, value)
	}
	if ipuo.mutation.ClientIDCleared() {
		_spec.ClearField(identityprovider.FieldClientID, field.TypeString)
	}
	if value, ok := ipuo.mutation.ClientSecret(); ok {
		_spec.SetField(identityprovider.FieldClientSecret, field.TypeString, value)
	}
	if ipuo.mutation.ClientSecretCleared() {
		_spec.ClearField(identityprovider.FieldClientSecret, field.TypeString)
	}
	if value, ok := ipuo.mutation.Issuer(); ok {
		_spec.SetField(identityprovider.FieldIssuer, field.TypeString, value)
	}
	if ipuo.mutation.IssuerCleared() {
		_spec.ClearField(identityprovider.FieldIssuer, field.TypeString)
	}
	if value, ok := ipuo.mutation.AuthorizationEndpoint(); ok {
		_spec.SetField(identityprovider.FieldAuthorizationEndpoint, field.TypeString, value)
	}
	if ipuo.mutation.AuthorizationEndpointCleared() {
		_spec.ClearField(identityprovider.FieldAuthorizationEndpoint, field.TypeString)
	}
	if value, ok := ipuo.mutation.TokenEndpoint(); ok {
		_spec.SetField(identityprovider.FieldTokenEndpoint, field.TypeString, value)
	}
	if ipuo.mutation.TokenEndpointCleared() {
		_spec.ClearField(identityprovider.FieldTokenEndpoint, field.TypeString)
	}
	if value, ok := ipuo.mutation.UserinfoEndpoint(); ok {
		_spec.SetField(identityprovider.FieldUserinfoEndpoint, field.TypeString, value)
	}
	if ipuo.mutation.UserinfoEndpointCleared() {
		_spec.ClearField(identityprovider.FieldUserinfoEndpoint, field.TypeString)
	}
	if value, ok := ipuo.mutation.JwksURI(); ok {
		_spec.SetField(identityprovider.FieldJwksURI, field.TypeString, value)
	}
	if ipuo.mutation.JwksURICleared() {
		_spec.ClearField(identityprovider.FieldJwksURI, field.TypeString)
	}
	if value, ok := ipuo.mutation.MetadataURL(); ok {
		_spec.SetField(identityprovider.FieldMetadataURL, field.TypeString, value)
	}
	if ipuo.mutation.MetadataURLCleared() {
		_spec.ClearField(identityprovider.FieldMetadataURL, field.TypeString)
	}
	if value, ok := ipuo.mutation.RedirectURI(); ok {
		_spec.SetField(identityprovider.FieldRedirectURI, field.TypeString, value)
	}
	if ipuo.mutation.RedirectURICleared() {
		_spec.ClearField(identityprovider.FieldRedirectURI, field.TypeString)
	}
	if value, ok := ipuo.mutation.Certificate(); ok {
		_spec.SetField(identityprovider.FieldCertificate, field.TypeString, value)
	}
	if ipuo.mutation.CertificateCleared() {
		_spec.ClearField(identityprovider.FieldCertificate, field.TypeString)
	}
	if value, ok := ipuo.mutation.PrivateKey(); ok {
		_spec.SetField(identityprovider.FieldPrivateKey, field.TypeString, value)
	}
	if ipuo.mutation.PrivateKeyCleared() {
		_spec.ClearField(identityprovider.FieldPrivateKey, field.TypeString)
	}
	if value, ok := ipuo.mutation.Active(); ok {
		_spec.SetField(identityprovider.FieldActive, field.TypeBool, value)
	}
	if value, ok := ipuo.mutation.Primary(); ok {
		_spec.SetField(identityprovider.FieldPrimary, field.TypeBool, value)
	}
	if value, ok := ipuo.mutation.Domains(); ok {
		_spec.SetField(identityprovider.FieldDomains, field.TypeJSON, value)
	}
	if value, ok := ipuo.mutation.AppendedDomains(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, identityprovider.FieldDomains, value)
		})
	}
	if ipuo.mutation.DomainsCleared() {
		_spec.ClearField(identityprovider.FieldDomains, field.TypeJSON)
	}
	if value, ok := ipuo.mutation.AttributesMapping(); ok {
		_spec.SetField(identityprovider.FieldAttributesMapping, field.TypeJSON, value)
	}
	if ipuo.mutation.AttributesMappingCleared() {
		_spec.ClearField(identityprovider.FieldAttributesMapping, field.TypeJSON)
	}
	if value, ok := ipuo.mutation.Metadata(); ok {
		_spec.SetField(identityprovider.FieldMetadata, field.TypeJSON, value)
	}
	if ipuo.mutation.MetadataCleared() {
		_spec.ClearField(identityprovider.FieldMetadata, field.TypeJSON)
	}
	if ipuo.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   identityprovider.OrganizationTable,
			Columns: []string{identityprovider.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ipuo.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   identityprovider.OrganizationTable,
			Columns: []string{identityprovider.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &IdentityProvider{config: ipuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ipuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{identityprovider.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ipuo.mutation.done = true
	return _node, nil
}
