// Copyright 2023-present XRaph LLC. All rights reserved.
// This source code is licensed under the XRaph LLC license found
// in the LICENSE file in the root directory of this source tree.
// Code generated by ent, DO NOT EDIT.

package intercept

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"github.com/juicycleff/frank/ent"
	"github.com/juicycleff/frank/ent/apikey"
	"github.com/juicycleff/frank/ent/audit"
	"github.com/juicycleff/frank/ent/emailtemplate"
	"github.com/juicycleff/frank/ent/featureflag"
	"github.com/juicycleff/frank/ent/identityprovider"
	"github.com/juicycleff/frank/ent/membership"
	"github.com/juicycleff/frank/ent/mfa"
	"github.com/juicycleff/frank/ent/oauthauthorization"
	"github.com/juicycleff/frank/ent/oauthclient"
	"github.com/juicycleff/frank/ent/oauthscope"
	"github.com/juicycleff/frank/ent/oauthtoken"
	"github.com/juicycleff/frank/ent/organization"
	"github.com/juicycleff/frank/ent/organizationfeature"
	"github.com/juicycleff/frank/ent/passkey"
	"github.com/juicycleff/frank/ent/permission"
	"github.com/juicycleff/frank/ent/permissiondependency"
	"github.com/juicycleff/frank/ent/predicate"
	"github.com/juicycleff/frank/ent/role"
	"github.com/juicycleff/frank/ent/session"
	"github.com/juicycleff/frank/ent/smstemplate"
	"github.com/juicycleff/frank/ent/ssostate"
	"github.com/juicycleff/frank/ent/user"
	"github.com/juicycleff/frank/ent/userpermission"
	"github.com/juicycleff/frank/ent/userrole"
	"github.com/juicycleff/frank/ent/verification"
	"github.com/juicycleff/frank/ent/webhook"
	"github.com/juicycleff/frank/ent/webhookevent"
)

// The Query interface represents an operation that queries a graph.
// By using this interface, users can write generic code that manipulates
// query builders of different types.
type Query interface {
	// Type returns the string representation of the query type.
	Type() string
	// Limit the number of records to be returned by this query.
	Limit(int)
	// Offset to start from.
	Offset(int)
	// Unique configures the query builder to filter duplicate records.
	Unique(bool)
	// Order specifies how the records should be ordered.
	Order(...func(*sql.Selector))
	// WhereP appends storage-level predicates to the query builder. Using this method, users
	// can use type-assertion to append predicates that do not depend on any generated package.
	WhereP(...func(*sql.Selector))
}

// The Func type is an adapter that allows ordinary functions to be used as interceptors.
// Unlike traversal functions, interceptors are skipped during graph traversals. Note that the
// implementation of Func is different from the one defined in entgo.io/ent.InterceptFunc.
type Func func(context.Context, Query) error

// Intercept calls f(ctx, q) and then applied the next Querier.
func (f Func) Intercept(next ent.Querier) ent.Querier {
	return ent.QuerierFunc(func(ctx context.Context, q ent.Query) (ent.Value, error) {
		query, err := NewQuery(q)
		if err != nil {
			return nil, err
		}
		if err := f(ctx, query); err != nil {
			return nil, err
		}
		return next.Query(ctx, q)
	})
}

// The TraverseFunc type is an adapter to allow the use of ordinary function as Traverser.
// If f is a function with the appropriate signature, TraverseFunc(f) is a Traverser that calls f.
type TraverseFunc func(context.Context, Query) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseFunc) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseFunc) Traverse(ctx context.Context, q ent.Query) error {
	query, err := NewQuery(q)
	if err != nil {
		return err
	}
	return f(ctx, query)
}

// The ApiKeyFunc type is an adapter to allow the use of ordinary function as a Querier.
type ApiKeyFunc func(context.Context, *ent.ApiKeyQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f ApiKeyFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.ApiKeyQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.ApiKeyQuery", q)
}

// The TraverseApiKey type is an adapter to allow the use of ordinary function as Traverser.
type TraverseApiKey func(context.Context, *ent.ApiKeyQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseApiKey) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseApiKey) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ApiKeyQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.ApiKeyQuery", q)
}

// The AuditFunc type is an adapter to allow the use of ordinary function as a Querier.
type AuditFunc func(context.Context, *ent.AuditQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f AuditFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.AuditQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.AuditQuery", q)
}

// The TraverseAudit type is an adapter to allow the use of ordinary function as Traverser.
type TraverseAudit func(context.Context, *ent.AuditQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseAudit) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseAudit) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.AuditQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.AuditQuery", q)
}

// The EmailTemplateFunc type is an adapter to allow the use of ordinary function as a Querier.
type EmailTemplateFunc func(context.Context, *ent.EmailTemplateQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f EmailTemplateFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.EmailTemplateQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.EmailTemplateQuery", q)
}

// The TraverseEmailTemplate type is an adapter to allow the use of ordinary function as Traverser.
type TraverseEmailTemplate func(context.Context, *ent.EmailTemplateQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseEmailTemplate) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseEmailTemplate) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.EmailTemplateQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.EmailTemplateQuery", q)
}

// The FeatureFlagFunc type is an adapter to allow the use of ordinary function as a Querier.
type FeatureFlagFunc func(context.Context, *ent.FeatureFlagQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f FeatureFlagFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.FeatureFlagQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.FeatureFlagQuery", q)
}

// The TraverseFeatureFlag type is an adapter to allow the use of ordinary function as Traverser.
type TraverseFeatureFlag func(context.Context, *ent.FeatureFlagQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseFeatureFlag) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseFeatureFlag) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.FeatureFlagQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.FeatureFlagQuery", q)
}

// The IdentityProviderFunc type is an adapter to allow the use of ordinary function as a Querier.
type IdentityProviderFunc func(context.Context, *ent.IdentityProviderQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f IdentityProviderFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.IdentityProviderQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.IdentityProviderQuery", q)
}

// The TraverseIdentityProvider type is an adapter to allow the use of ordinary function as Traverser.
type TraverseIdentityProvider func(context.Context, *ent.IdentityProviderQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseIdentityProvider) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseIdentityProvider) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.IdentityProviderQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.IdentityProviderQuery", q)
}

// The MFAFunc type is an adapter to allow the use of ordinary function as a Querier.
type MFAFunc func(context.Context, *ent.MFAQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f MFAFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.MFAQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.MFAQuery", q)
}

// The TraverseMFA type is an adapter to allow the use of ordinary function as Traverser.
type TraverseMFA func(context.Context, *ent.MFAQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseMFA) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseMFA) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.MFAQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.MFAQuery", q)
}

// The MembershipFunc type is an adapter to allow the use of ordinary function as a Querier.
type MembershipFunc func(context.Context, *ent.MembershipQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f MembershipFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.MembershipQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.MembershipQuery", q)
}

// The TraverseMembership type is an adapter to allow the use of ordinary function as Traverser.
type TraverseMembership func(context.Context, *ent.MembershipQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseMembership) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseMembership) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.MembershipQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.MembershipQuery", q)
}

// The OAuthAuthorizationFunc type is an adapter to allow the use of ordinary function as a Querier.
type OAuthAuthorizationFunc func(context.Context, *ent.OAuthAuthorizationQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f OAuthAuthorizationFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.OAuthAuthorizationQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.OAuthAuthorizationQuery", q)
}

// The TraverseOAuthAuthorization type is an adapter to allow the use of ordinary function as Traverser.
type TraverseOAuthAuthorization func(context.Context, *ent.OAuthAuthorizationQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseOAuthAuthorization) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseOAuthAuthorization) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OAuthAuthorizationQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.OAuthAuthorizationQuery", q)
}

// The OAuthClientFunc type is an adapter to allow the use of ordinary function as a Querier.
type OAuthClientFunc func(context.Context, *ent.OAuthClientQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f OAuthClientFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.OAuthClientQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.OAuthClientQuery", q)
}

// The TraverseOAuthClient type is an adapter to allow the use of ordinary function as Traverser.
type TraverseOAuthClient func(context.Context, *ent.OAuthClientQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseOAuthClient) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseOAuthClient) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OAuthClientQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.OAuthClientQuery", q)
}

// The OAuthScopeFunc type is an adapter to allow the use of ordinary function as a Querier.
type OAuthScopeFunc func(context.Context, *ent.OAuthScopeQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f OAuthScopeFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.OAuthScopeQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.OAuthScopeQuery", q)
}

// The TraverseOAuthScope type is an adapter to allow the use of ordinary function as Traverser.
type TraverseOAuthScope func(context.Context, *ent.OAuthScopeQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseOAuthScope) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseOAuthScope) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OAuthScopeQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.OAuthScopeQuery", q)
}

// The OAuthTokenFunc type is an adapter to allow the use of ordinary function as a Querier.
type OAuthTokenFunc func(context.Context, *ent.OAuthTokenQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f OAuthTokenFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.OAuthTokenQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.OAuthTokenQuery", q)
}

// The TraverseOAuthToken type is an adapter to allow the use of ordinary function as Traverser.
type TraverseOAuthToken func(context.Context, *ent.OAuthTokenQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseOAuthToken) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseOAuthToken) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OAuthTokenQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.OAuthTokenQuery", q)
}

// The OrganizationFunc type is an adapter to allow the use of ordinary function as a Querier.
type OrganizationFunc func(context.Context, *ent.OrganizationQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f OrganizationFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.OrganizationQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.OrganizationQuery", q)
}

// The TraverseOrganization type is an adapter to allow the use of ordinary function as Traverser.
type TraverseOrganization func(context.Context, *ent.OrganizationQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseOrganization) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseOrganization) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OrganizationQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.OrganizationQuery", q)
}

// The OrganizationFeatureFunc type is an adapter to allow the use of ordinary function as a Querier.
type OrganizationFeatureFunc func(context.Context, *ent.OrganizationFeatureQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f OrganizationFeatureFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.OrganizationFeatureQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.OrganizationFeatureQuery", q)
}

// The TraverseOrganizationFeature type is an adapter to allow the use of ordinary function as Traverser.
type TraverseOrganizationFeature func(context.Context, *ent.OrganizationFeatureQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseOrganizationFeature) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseOrganizationFeature) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OrganizationFeatureQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.OrganizationFeatureQuery", q)
}

// The PasskeyFunc type is an adapter to allow the use of ordinary function as a Querier.
type PasskeyFunc func(context.Context, *ent.PasskeyQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f PasskeyFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.PasskeyQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.PasskeyQuery", q)
}

// The TraversePasskey type is an adapter to allow the use of ordinary function as Traverser.
type TraversePasskey func(context.Context, *ent.PasskeyQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraversePasskey) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraversePasskey) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PasskeyQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.PasskeyQuery", q)
}

// The PermissionFunc type is an adapter to allow the use of ordinary function as a Querier.
type PermissionFunc func(context.Context, *ent.PermissionQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f PermissionFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.PermissionQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.PermissionQuery", q)
}

// The TraversePermission type is an adapter to allow the use of ordinary function as Traverser.
type TraversePermission func(context.Context, *ent.PermissionQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraversePermission) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraversePermission) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PermissionQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.PermissionQuery", q)
}

// The PermissionDependencyFunc type is an adapter to allow the use of ordinary function as a Querier.
type PermissionDependencyFunc func(context.Context, *ent.PermissionDependencyQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f PermissionDependencyFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.PermissionDependencyQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.PermissionDependencyQuery", q)
}

// The TraversePermissionDependency type is an adapter to allow the use of ordinary function as Traverser.
type TraversePermissionDependency func(context.Context, *ent.PermissionDependencyQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraversePermissionDependency) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraversePermissionDependency) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PermissionDependencyQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.PermissionDependencyQuery", q)
}

// The RoleFunc type is an adapter to allow the use of ordinary function as a Querier.
type RoleFunc func(context.Context, *ent.RoleQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f RoleFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.RoleQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.RoleQuery", q)
}

// The TraverseRole type is an adapter to allow the use of ordinary function as Traverser.
type TraverseRole func(context.Context, *ent.RoleQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseRole) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseRole) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.RoleQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.RoleQuery", q)
}

// The SMSTemplateFunc type is an adapter to allow the use of ordinary function as a Querier.
type SMSTemplateFunc func(context.Context, *ent.SMSTemplateQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f SMSTemplateFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.SMSTemplateQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.SMSTemplateQuery", q)
}

// The TraverseSMSTemplate type is an adapter to allow the use of ordinary function as Traverser.
type TraverseSMSTemplate func(context.Context, *ent.SMSTemplateQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseSMSTemplate) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseSMSTemplate) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SMSTemplateQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.SMSTemplateQuery", q)
}

// The SSOStateFunc type is an adapter to allow the use of ordinary function as a Querier.
type SSOStateFunc func(context.Context, *ent.SSOStateQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f SSOStateFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.SSOStateQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.SSOStateQuery", q)
}

// The TraverseSSOState type is an adapter to allow the use of ordinary function as Traverser.
type TraverseSSOState func(context.Context, *ent.SSOStateQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseSSOState) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseSSOState) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SSOStateQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.SSOStateQuery", q)
}

// The SessionFunc type is an adapter to allow the use of ordinary function as a Querier.
type SessionFunc func(context.Context, *ent.SessionQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f SessionFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.SessionQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.SessionQuery", q)
}

// The TraverseSession type is an adapter to allow the use of ordinary function as Traverser.
type TraverseSession func(context.Context, *ent.SessionQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseSession) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseSession) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SessionQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.SessionQuery", q)
}

// The UserFunc type is an adapter to allow the use of ordinary function as a Querier.
type UserFunc func(context.Context, *ent.UserQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f UserFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.UserQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.UserQuery", q)
}

// The TraverseUser type is an adapter to allow the use of ordinary function as Traverser.
type TraverseUser func(context.Context, *ent.UserQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseUser) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseUser) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UserQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.UserQuery", q)
}

// The UserPermissionFunc type is an adapter to allow the use of ordinary function as a Querier.
type UserPermissionFunc func(context.Context, *ent.UserPermissionQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f UserPermissionFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.UserPermissionQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.UserPermissionQuery", q)
}

// The TraverseUserPermission type is an adapter to allow the use of ordinary function as Traverser.
type TraverseUserPermission func(context.Context, *ent.UserPermissionQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseUserPermission) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseUserPermission) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UserPermissionQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.UserPermissionQuery", q)
}

// The UserRoleFunc type is an adapter to allow the use of ordinary function as a Querier.
type UserRoleFunc func(context.Context, *ent.UserRoleQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f UserRoleFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.UserRoleQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.UserRoleQuery", q)
}

// The TraverseUserRole type is an adapter to allow the use of ordinary function as Traverser.
type TraverseUserRole func(context.Context, *ent.UserRoleQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseUserRole) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseUserRole) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UserRoleQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.UserRoleQuery", q)
}

// The VerificationFunc type is an adapter to allow the use of ordinary function as a Querier.
type VerificationFunc func(context.Context, *ent.VerificationQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f VerificationFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.VerificationQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.VerificationQuery", q)
}

// The TraverseVerification type is an adapter to allow the use of ordinary function as Traverser.
type TraverseVerification func(context.Context, *ent.VerificationQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseVerification) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseVerification) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.VerificationQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.VerificationQuery", q)
}

// The WebhookFunc type is an adapter to allow the use of ordinary function as a Querier.
type WebhookFunc func(context.Context, *ent.WebhookQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f WebhookFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.WebhookQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.WebhookQuery", q)
}

// The TraverseWebhook type is an adapter to allow the use of ordinary function as Traverser.
type TraverseWebhook func(context.Context, *ent.WebhookQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseWebhook) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseWebhook) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.WebhookQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.WebhookQuery", q)
}

// The WebhookEventFunc type is an adapter to allow the use of ordinary function as a Querier.
type WebhookEventFunc func(context.Context, *ent.WebhookEventQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f WebhookEventFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.WebhookEventQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.WebhookEventQuery", q)
}

// The TraverseWebhookEvent type is an adapter to allow the use of ordinary function as Traverser.
type TraverseWebhookEvent func(context.Context, *ent.WebhookEventQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseWebhookEvent) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseWebhookEvent) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.WebhookEventQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.WebhookEventQuery", q)
}

// NewQuery returns the generic Query interface for the given typed query.
func NewQuery(q ent.Query) (Query, error) {
	switch q := q.(type) {
	case *ent.ApiKeyQuery:
		return &query[*ent.ApiKeyQuery, predicate.ApiKey, apikey.OrderOption]{typ: ent.TypeApiKey, tq: q}, nil
	case *ent.AuditQuery:
		return &query[*ent.AuditQuery, predicate.Audit, audit.OrderOption]{typ: ent.TypeAudit, tq: q}, nil
	case *ent.EmailTemplateQuery:
		return &query[*ent.EmailTemplateQuery, predicate.EmailTemplate, emailtemplate.OrderOption]{typ: ent.TypeEmailTemplate, tq: q}, nil
	case *ent.FeatureFlagQuery:
		return &query[*ent.FeatureFlagQuery, predicate.FeatureFlag, featureflag.OrderOption]{typ: ent.TypeFeatureFlag, tq: q}, nil
	case *ent.IdentityProviderQuery:
		return &query[*ent.IdentityProviderQuery, predicate.IdentityProvider, identityprovider.OrderOption]{typ: ent.TypeIdentityProvider, tq: q}, nil
	case *ent.MFAQuery:
		return &query[*ent.MFAQuery, predicate.MFA, mfa.OrderOption]{typ: ent.TypeMFA, tq: q}, nil
	case *ent.MembershipQuery:
		return &query[*ent.MembershipQuery, predicate.Membership, membership.OrderOption]{typ: ent.TypeMembership, tq: q}, nil
	case *ent.OAuthAuthorizationQuery:
		return &query[*ent.OAuthAuthorizationQuery, predicate.OAuthAuthorization, oauthauthorization.OrderOption]{typ: ent.TypeOAuthAuthorization, tq: q}, nil
	case *ent.OAuthClientQuery:
		return &query[*ent.OAuthClientQuery, predicate.OAuthClient, oauthclient.OrderOption]{typ: ent.TypeOAuthClient, tq: q}, nil
	case *ent.OAuthScopeQuery:
		return &query[*ent.OAuthScopeQuery, predicate.OAuthScope, oauthscope.OrderOption]{typ: ent.TypeOAuthScope, tq: q}, nil
	case *ent.OAuthTokenQuery:
		return &query[*ent.OAuthTokenQuery, predicate.OAuthToken, oauthtoken.OrderOption]{typ: ent.TypeOAuthToken, tq: q}, nil
	case *ent.OrganizationQuery:
		return &query[*ent.OrganizationQuery, predicate.Organization, organization.OrderOption]{typ: ent.TypeOrganization, tq: q}, nil
	case *ent.OrganizationFeatureQuery:
		return &query[*ent.OrganizationFeatureQuery, predicate.OrganizationFeature, organizationfeature.OrderOption]{typ: ent.TypeOrganizationFeature, tq: q}, nil
	case *ent.PasskeyQuery:
		return &query[*ent.PasskeyQuery, predicate.Passkey, passkey.OrderOption]{typ: ent.TypePasskey, tq: q}, nil
	case *ent.PermissionQuery:
		return &query[*ent.PermissionQuery, predicate.Permission, permission.OrderOption]{typ: ent.TypePermission, tq: q}, nil
	case *ent.PermissionDependencyQuery:
		return &query[*ent.PermissionDependencyQuery, predicate.PermissionDependency, permissiondependency.OrderOption]{typ: ent.TypePermissionDependency, tq: q}, nil
	case *ent.RoleQuery:
		return &query[*ent.RoleQuery, predicate.Role, role.OrderOption]{typ: ent.TypeRole, tq: q}, nil
	case *ent.SMSTemplateQuery:
		return &query[*ent.SMSTemplateQuery, predicate.SMSTemplate, smstemplate.OrderOption]{typ: ent.TypeSMSTemplate, tq: q}, nil
	case *ent.SSOStateQuery:
		return &query[*ent.SSOStateQuery, predicate.SSOState, ssostate.OrderOption]{typ: ent.TypeSSOState, tq: q}, nil
	case *ent.SessionQuery:
		return &query[*ent.SessionQuery, predicate.Session, session.OrderOption]{typ: ent.TypeSession, tq: q}, nil
	case *ent.UserQuery:
		return &query[*ent.UserQuery, predicate.User, user.OrderOption]{typ: ent.TypeUser, tq: q}, nil
	case *ent.UserPermissionQuery:
		return &query[*ent.UserPermissionQuery, predicate.UserPermission, userpermission.OrderOption]{typ: ent.TypeUserPermission, tq: q}, nil
	case *ent.UserRoleQuery:
		return &query[*ent.UserRoleQuery, predicate.UserRole, userrole.OrderOption]{typ: ent.TypeUserRole, tq: q}, nil
	case *ent.VerificationQuery:
		return &query[*ent.VerificationQuery, predicate.Verification, verification.OrderOption]{typ: ent.TypeVerification, tq: q}, nil
	case *ent.WebhookQuery:
		return &query[*ent.WebhookQuery, predicate.Webhook, webhook.OrderOption]{typ: ent.TypeWebhook, tq: q}, nil
	case *ent.WebhookEventQuery:
		return &query[*ent.WebhookEventQuery, predicate.WebhookEvent, webhookevent.OrderOption]{typ: ent.TypeWebhookEvent, tq: q}, nil
	default:
		return nil, fmt.Errorf("unknown query type %T", q)
	}
}

type query[T any, P ~func(*sql.Selector), R ~func(*sql.Selector)] struct {
	typ string
	tq  interface {
		Limit(int) T
		Offset(int) T
		Unique(bool) T
		Order(...R) T
		Where(...P) T
	}
}

func (q query[T, P, R]) Type() string {
	return q.typ
}

func (q query[T, P, R]) Limit(limit int) {
	q.tq.Limit(limit)
}

func (q query[T, P, R]) Offset(offset int) {
	q.tq.Offset(offset)
}

func (q query[T, P, R]) Unique(unique bool) {
	q.tq.Unique(unique)
}

func (q query[T, P, R]) Order(orders ...func(*sql.Selector)) {
	rs := make([]R, len(orders))
	for i := range orders {
		rs[i] = orders[i]
	}
	q.tq.Order(rs...)
}

func (q query[T, P, R]) WhereP(ps ...func(*sql.Selector)) {
	p := make([]P, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	q.tq.Where(p...)
}
