// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/juicycleff/frank/ent/apikey"
	"github.com/juicycleff/frank/ent/mfa"
	"github.com/juicycleff/frank/ent/oauthauthorization"
	"github.com/juicycleff/frank/ent/oauthtoken"
	"github.com/juicycleff/frank/ent/organization"
	"github.com/juicycleff/frank/ent/passkey"
	"github.com/juicycleff/frank/ent/predicate"
	"github.com/juicycleff/frank/ent/role"
	"github.com/juicycleff/frank/ent/session"
	"github.com/juicycleff/frank/ent/user"
	"github.com/juicycleff/frank/ent/verification"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetUpdatedAt sets the "updated_at" field.
func (uu *UserUpdate) SetUpdatedAt(t time.Time) *UserUpdate {
	uu.mutation.SetUpdatedAt(t)
	return uu
}

// SetEmail sets the "email" field.
func (uu *UserUpdate) SetEmail(s string) *UserUpdate {
	uu.mutation.SetEmail(s)
	return uu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (uu *UserUpdate) SetNillableEmail(s *string) *UserUpdate {
	if s != nil {
		uu.SetEmail(*s)
	}
	return uu
}

// SetPhoneNumber sets the "phone_number" field.
func (uu *UserUpdate) SetPhoneNumber(s string) *UserUpdate {
	uu.mutation.SetPhoneNumber(s)
	return uu
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePhoneNumber(s *string) *UserUpdate {
	if s != nil {
		uu.SetPhoneNumber(*s)
	}
	return uu
}

// ClearPhoneNumber clears the value of the "phone_number" field.
func (uu *UserUpdate) ClearPhoneNumber() *UserUpdate {
	uu.mutation.ClearPhoneNumber()
	return uu
}

// SetFirstName sets the "first_name" field.
func (uu *UserUpdate) SetFirstName(s string) *UserUpdate {
	uu.mutation.SetFirstName(s)
	return uu
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (uu *UserUpdate) SetNillableFirstName(s *string) *UserUpdate {
	if s != nil {
		uu.SetFirstName(*s)
	}
	return uu
}

// ClearFirstName clears the value of the "first_name" field.
func (uu *UserUpdate) ClearFirstName() *UserUpdate {
	uu.mutation.ClearFirstName()
	return uu
}

// SetLastName sets the "last_name" field.
func (uu *UserUpdate) SetLastName(s string) *UserUpdate {
	uu.mutation.SetLastName(s)
	return uu
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (uu *UserUpdate) SetNillableLastName(s *string) *UserUpdate {
	if s != nil {
		uu.SetLastName(*s)
	}
	return uu
}

// ClearLastName clears the value of the "last_name" field.
func (uu *UserUpdate) ClearLastName() *UserUpdate {
	uu.mutation.ClearLastName()
	return uu
}

// SetPasswordHash sets the "password_hash" field.
func (uu *UserUpdate) SetPasswordHash(s string) *UserUpdate {
	uu.mutation.SetPasswordHash(s)
	return uu
}

// SetNillablePasswordHash sets the "password_hash" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePasswordHash(s *string) *UserUpdate {
	if s != nil {
		uu.SetPasswordHash(*s)
	}
	return uu
}

// ClearPasswordHash clears the value of the "password_hash" field.
func (uu *UserUpdate) ClearPasswordHash() *UserUpdate {
	uu.mutation.ClearPasswordHash()
	return uu
}

// SetEmailVerified sets the "email_verified" field.
func (uu *UserUpdate) SetEmailVerified(b bool) *UserUpdate {
	uu.mutation.SetEmailVerified(b)
	return uu
}

// SetNillableEmailVerified sets the "email_verified" field if the given value is not nil.
func (uu *UserUpdate) SetNillableEmailVerified(b *bool) *UserUpdate {
	if b != nil {
		uu.SetEmailVerified(*b)
	}
	return uu
}

// SetPhoneVerified sets the "phone_verified" field.
func (uu *UserUpdate) SetPhoneVerified(b bool) *UserUpdate {
	uu.mutation.SetPhoneVerified(b)
	return uu
}

// SetNillablePhoneVerified sets the "phone_verified" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePhoneVerified(b *bool) *UserUpdate {
	if b != nil {
		uu.SetPhoneVerified(*b)
	}
	return uu
}

// SetActive sets the "active" field.
func (uu *UserUpdate) SetActive(b bool) *UserUpdate {
	uu.mutation.SetActive(b)
	return uu
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (uu *UserUpdate) SetNillableActive(b *bool) *UserUpdate {
	if b != nil {
		uu.SetActive(*b)
	}
	return uu
}

// SetLastLogin sets the "last_login" field.
func (uu *UserUpdate) SetLastLogin(t time.Time) *UserUpdate {
	uu.mutation.SetLastLogin(t)
	return uu
}

// SetNillableLastLogin sets the "last_login" field if the given value is not nil.
func (uu *UserUpdate) SetNillableLastLogin(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetLastLogin(*t)
	}
	return uu
}

// ClearLastLogin clears the value of the "last_login" field.
func (uu *UserUpdate) ClearLastLogin() *UserUpdate {
	uu.mutation.ClearLastLogin()
	return uu
}

// SetLastPasswordChange sets the "last_password_change" field.
func (uu *UserUpdate) SetLastPasswordChange(t time.Time) *UserUpdate {
	uu.mutation.SetLastPasswordChange(t)
	return uu
}

// SetNillableLastPasswordChange sets the "last_password_change" field if the given value is not nil.
func (uu *UserUpdate) SetNillableLastPasswordChange(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetLastPasswordChange(*t)
	}
	return uu
}

// ClearLastPasswordChange clears the value of the "last_password_change" field.
func (uu *UserUpdate) ClearLastPasswordChange() *UserUpdate {
	uu.mutation.ClearLastPasswordChange()
	return uu
}

// SetMetadata sets the "metadata" field.
func (uu *UserUpdate) SetMetadata(m map[string]interface{}) *UserUpdate {
	uu.mutation.SetMetadata(m)
	return uu
}

// ClearMetadata clears the value of the "metadata" field.
func (uu *UserUpdate) ClearMetadata() *UserUpdate {
	uu.mutation.ClearMetadata()
	return uu
}

// SetProfileImageURL sets the "profile_image_url" field.
func (uu *UserUpdate) SetProfileImageURL(s string) *UserUpdate {
	uu.mutation.SetProfileImageURL(s)
	return uu
}

// SetNillableProfileImageURL sets the "profile_image_url" field if the given value is not nil.
func (uu *UserUpdate) SetNillableProfileImageURL(s *string) *UserUpdate {
	if s != nil {
		uu.SetProfileImageURL(*s)
	}
	return uu
}

// ClearProfileImageURL clears the value of the "profile_image_url" field.
func (uu *UserUpdate) ClearProfileImageURL() *UserUpdate {
	uu.mutation.ClearProfileImageURL()
	return uu
}

// SetPrimaryOrganizationID sets the "primary_organization_id" field.
func (uu *UserUpdate) SetPrimaryOrganizationID(s string) *UserUpdate {
	uu.mutation.SetPrimaryOrganizationID(s)
	return uu
}

// SetNillablePrimaryOrganizationID sets the "primary_organization_id" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePrimaryOrganizationID(s *string) *UserUpdate {
	if s != nil {
		uu.SetPrimaryOrganizationID(*s)
	}
	return uu
}

// ClearPrimaryOrganizationID clears the value of the "primary_organization_id" field.
func (uu *UserUpdate) ClearPrimaryOrganizationID() *UserUpdate {
	uu.mutation.ClearPrimaryOrganizationID()
	return uu
}

// SetLocale sets the "locale" field.
func (uu *UserUpdate) SetLocale(s string) *UserUpdate {
	uu.mutation.SetLocale(s)
	return uu
}

// SetNillableLocale sets the "locale" field if the given value is not nil.
func (uu *UserUpdate) SetNillableLocale(s *string) *UserUpdate {
	if s != nil {
		uu.SetLocale(*s)
	}
	return uu
}

// AddSessionIDs adds the "sessions" edge to the Session entity by IDs.
func (uu *UserUpdate) AddSessionIDs(ids ...string) *UserUpdate {
	uu.mutation.AddSessionIDs(ids...)
	return uu
}

// AddSessions adds the "sessions" edges to the Session entity.
func (uu *UserUpdate) AddSessions(s ...*Session) *UserUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uu.AddSessionIDs(ids...)
}

// AddAPIKeyIDs adds the "api_keys" edge to the ApiKey entity by IDs.
func (uu *UserUpdate) AddAPIKeyIDs(ids ...string) *UserUpdate {
	uu.mutation.AddAPIKeyIDs(ids...)
	return uu
}

// AddAPIKeys adds the "api_keys" edges to the ApiKey entity.
func (uu *UserUpdate) AddAPIKeys(a ...*ApiKey) *UserUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uu.AddAPIKeyIDs(ids...)
}

// AddOrganizationIDs adds the "organizations" edge to the Organization entity by IDs.
func (uu *UserUpdate) AddOrganizationIDs(ids ...string) *UserUpdate {
	uu.mutation.AddOrganizationIDs(ids...)
	return uu
}

// AddOrganizations adds the "organizations" edges to the Organization entity.
func (uu *UserUpdate) AddOrganizations(o ...*Organization) *UserUpdate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uu.AddOrganizationIDs(ids...)
}

// AddMfaMethodIDs adds the "mfa_methods" edge to the MFA entity by IDs.
func (uu *UserUpdate) AddMfaMethodIDs(ids ...string) *UserUpdate {
	uu.mutation.AddMfaMethodIDs(ids...)
	return uu
}

// AddMfaMethods adds the "mfa_methods" edges to the MFA entity.
func (uu *UserUpdate) AddMfaMethods(m ...*MFA) *UserUpdate {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uu.AddMfaMethodIDs(ids...)
}

// AddPasskeyIDs adds the "passkeys" edge to the Passkey entity by IDs.
func (uu *UserUpdate) AddPasskeyIDs(ids ...string) *UserUpdate {
	uu.mutation.AddPasskeyIDs(ids...)
	return uu
}

// AddPasskeys adds the "passkeys" edges to the Passkey entity.
func (uu *UserUpdate) AddPasskeys(p ...*Passkey) *UserUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.AddPasskeyIDs(ids...)
}

// AddOauthTokenIDs adds the "oauth_tokens" edge to the OAuthToken entity by IDs.
func (uu *UserUpdate) AddOauthTokenIDs(ids ...string) *UserUpdate {
	uu.mutation.AddOauthTokenIDs(ids...)
	return uu
}

// AddOauthTokens adds the "oauth_tokens" edges to the OAuthToken entity.
func (uu *UserUpdate) AddOauthTokens(o ...*OAuthToken) *UserUpdate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uu.AddOauthTokenIDs(ids...)
}

// AddOauthAuthorizationIDs adds the "oauth_authorizations" edge to the OAuthAuthorization entity by IDs.
func (uu *UserUpdate) AddOauthAuthorizationIDs(ids ...string) *UserUpdate {
	uu.mutation.AddOauthAuthorizationIDs(ids...)
	return uu
}

// AddOauthAuthorizations adds the "oauth_authorizations" edges to the OAuthAuthorization entity.
func (uu *UserUpdate) AddOauthAuthorizations(o ...*OAuthAuthorization) *UserUpdate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uu.AddOauthAuthorizationIDs(ids...)
}

// AddVerificationIDs adds the "verifications" edge to the Verification entity by IDs.
func (uu *UserUpdate) AddVerificationIDs(ids ...string) *UserUpdate {
	uu.mutation.AddVerificationIDs(ids...)
	return uu
}

// AddVerifications adds the "verifications" edges to the Verification entity.
func (uu *UserUpdate) AddVerifications(v ...*Verification) *UserUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return uu.AddVerificationIDs(ids...)
}

// AddRoleIDs adds the "roles" edge to the Role entity by IDs.
func (uu *UserUpdate) AddRoleIDs(ids ...string) *UserUpdate {
	uu.mutation.AddRoleIDs(ids...)
	return uu
}

// AddRoles adds the "roles" edges to the Role entity.
func (uu *UserUpdate) AddRoles(r ...*Role) *UserUpdate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uu.AddRoleIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// ClearSessions clears all "sessions" edges to the Session entity.
func (uu *UserUpdate) ClearSessions() *UserUpdate {
	uu.mutation.ClearSessions()
	return uu
}

// RemoveSessionIDs removes the "sessions" edge to Session entities by IDs.
func (uu *UserUpdate) RemoveSessionIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveSessionIDs(ids...)
	return uu
}

// RemoveSessions removes "sessions" edges to Session entities.
func (uu *UserUpdate) RemoveSessions(s ...*Session) *UserUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uu.RemoveSessionIDs(ids...)
}

// ClearAPIKeys clears all "api_keys" edges to the ApiKey entity.
func (uu *UserUpdate) ClearAPIKeys() *UserUpdate {
	uu.mutation.ClearAPIKeys()
	return uu
}

// RemoveAPIKeyIDs removes the "api_keys" edge to ApiKey entities by IDs.
func (uu *UserUpdate) RemoveAPIKeyIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveAPIKeyIDs(ids...)
	return uu
}

// RemoveAPIKeys removes "api_keys" edges to ApiKey entities.
func (uu *UserUpdate) RemoveAPIKeys(a ...*ApiKey) *UserUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uu.RemoveAPIKeyIDs(ids...)
}

// ClearOrganizations clears all "organizations" edges to the Organization entity.
func (uu *UserUpdate) ClearOrganizations() *UserUpdate {
	uu.mutation.ClearOrganizations()
	return uu
}

// RemoveOrganizationIDs removes the "organizations" edge to Organization entities by IDs.
func (uu *UserUpdate) RemoveOrganizationIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveOrganizationIDs(ids...)
	return uu
}

// RemoveOrganizations removes "organizations" edges to Organization entities.
func (uu *UserUpdate) RemoveOrganizations(o ...*Organization) *UserUpdate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uu.RemoveOrganizationIDs(ids...)
}

// ClearMfaMethods clears all "mfa_methods" edges to the MFA entity.
func (uu *UserUpdate) ClearMfaMethods() *UserUpdate {
	uu.mutation.ClearMfaMethods()
	return uu
}

// RemoveMfaMethodIDs removes the "mfa_methods" edge to MFA entities by IDs.
func (uu *UserUpdate) RemoveMfaMethodIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveMfaMethodIDs(ids...)
	return uu
}

// RemoveMfaMethods removes "mfa_methods" edges to MFA entities.
func (uu *UserUpdate) RemoveMfaMethods(m ...*MFA) *UserUpdate {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uu.RemoveMfaMethodIDs(ids...)
}

// ClearPasskeys clears all "passkeys" edges to the Passkey entity.
func (uu *UserUpdate) ClearPasskeys() *UserUpdate {
	uu.mutation.ClearPasskeys()
	return uu
}

// RemovePasskeyIDs removes the "passkeys" edge to Passkey entities by IDs.
func (uu *UserUpdate) RemovePasskeyIDs(ids ...string) *UserUpdate {
	uu.mutation.RemovePasskeyIDs(ids...)
	return uu
}

// RemovePasskeys removes "passkeys" edges to Passkey entities.
func (uu *UserUpdate) RemovePasskeys(p ...*Passkey) *UserUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.RemovePasskeyIDs(ids...)
}

// ClearOauthTokens clears all "oauth_tokens" edges to the OAuthToken entity.
func (uu *UserUpdate) ClearOauthTokens() *UserUpdate {
	uu.mutation.ClearOauthTokens()
	return uu
}

// RemoveOauthTokenIDs removes the "oauth_tokens" edge to OAuthToken entities by IDs.
func (uu *UserUpdate) RemoveOauthTokenIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveOauthTokenIDs(ids...)
	return uu
}

// RemoveOauthTokens removes "oauth_tokens" edges to OAuthToken entities.
func (uu *UserUpdate) RemoveOauthTokens(o ...*OAuthToken) *UserUpdate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uu.RemoveOauthTokenIDs(ids...)
}

// ClearOauthAuthorizations clears all "oauth_authorizations" edges to the OAuthAuthorization entity.
func (uu *UserUpdate) ClearOauthAuthorizations() *UserUpdate {
	uu.mutation.ClearOauthAuthorizations()
	return uu
}

// RemoveOauthAuthorizationIDs removes the "oauth_authorizations" edge to OAuthAuthorization entities by IDs.
func (uu *UserUpdate) RemoveOauthAuthorizationIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveOauthAuthorizationIDs(ids...)
	return uu
}

// RemoveOauthAuthorizations removes "oauth_authorizations" edges to OAuthAuthorization entities.
func (uu *UserUpdate) RemoveOauthAuthorizations(o ...*OAuthAuthorization) *UserUpdate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uu.RemoveOauthAuthorizationIDs(ids...)
}

// ClearVerifications clears all "verifications" edges to the Verification entity.
func (uu *UserUpdate) ClearVerifications() *UserUpdate {
	uu.mutation.ClearVerifications()
	return uu
}

// RemoveVerificationIDs removes the "verifications" edge to Verification entities by IDs.
func (uu *UserUpdate) RemoveVerificationIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveVerificationIDs(ids...)
	return uu
}

// RemoveVerifications removes "verifications" edges to Verification entities.
func (uu *UserUpdate) RemoveVerifications(v ...*Verification) *UserUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return uu.RemoveVerificationIDs(ids...)
}

// ClearRoles clears all "roles" edges to the Role entity.
func (uu *UserUpdate) ClearRoles() *UserUpdate {
	uu.mutation.ClearRoles()
	return uu
}

// RemoveRoleIDs removes the "roles" edge to Role entities by IDs.
func (uu *UserUpdate) RemoveRoleIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveRoleIDs(ids...)
	return uu
}

// RemoveRoles removes "roles" edges to Role entities.
func (uu *UserUpdate) RemoveRoles(r ...*Role) *UserUpdate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uu.RemoveRoleIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	uu.defaults()
	return withHooks(ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uu *UserUpdate) defaults() {
	if _, ok := uu.mutation.UpdatedAt(); !ok {
		v := user.UpdateDefaultUpdatedAt()
		uu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uu *UserUpdate) check() error {
	if v, ok := uu.mutation.Email(); ok {
		if err := user.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "User.email": %w`, err)}
		}
	}
	return nil
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeString))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := uu.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := uu.mutation.PhoneNumber(); ok {
		_spec.SetField(user.FieldPhoneNumber, field.TypeString, value)
	}
	if uu.mutation.PhoneNumberCleared() {
		_spec.ClearField(user.FieldPhoneNumber, field.TypeString)
	}
	if value, ok := uu.mutation.FirstName(); ok {
		_spec.SetField(user.FieldFirstName, field.TypeString, value)
	}
	if uu.mutation.FirstNameCleared() {
		_spec.ClearField(user.FieldFirstName, field.TypeString)
	}
	if value, ok := uu.mutation.LastName(); ok {
		_spec.SetField(user.FieldLastName, field.TypeString, value)
	}
	if uu.mutation.LastNameCleared() {
		_spec.ClearField(user.FieldLastName, field.TypeString)
	}
	if value, ok := uu.mutation.PasswordHash(); ok {
		_spec.SetField(user.FieldPasswordHash, field.TypeString, value)
	}
	if uu.mutation.PasswordHashCleared() {
		_spec.ClearField(user.FieldPasswordHash, field.TypeString)
	}
	if value, ok := uu.mutation.EmailVerified(); ok {
		_spec.SetField(user.FieldEmailVerified, field.TypeBool, value)
	}
	if value, ok := uu.mutation.PhoneVerified(); ok {
		_spec.SetField(user.FieldPhoneVerified, field.TypeBool, value)
	}
	if value, ok := uu.mutation.Active(); ok {
		_spec.SetField(user.FieldActive, field.TypeBool, value)
	}
	if value, ok := uu.mutation.LastLogin(); ok {
		_spec.SetField(user.FieldLastLogin, field.TypeTime, value)
	}
	if uu.mutation.LastLoginCleared() {
		_spec.ClearField(user.FieldLastLogin, field.TypeTime)
	}
	if value, ok := uu.mutation.LastPasswordChange(); ok {
		_spec.SetField(user.FieldLastPasswordChange, field.TypeTime, value)
	}
	if uu.mutation.LastPasswordChangeCleared() {
		_spec.ClearField(user.FieldLastPasswordChange, field.TypeTime)
	}
	if value, ok := uu.mutation.Metadata(); ok {
		_spec.SetField(user.FieldMetadata, field.TypeJSON, value)
	}
	if uu.mutation.MetadataCleared() {
		_spec.ClearField(user.FieldMetadata, field.TypeJSON)
	}
	if value, ok := uu.mutation.ProfileImageURL(); ok {
		_spec.SetField(user.FieldProfileImageURL, field.TypeString, value)
	}
	if uu.mutation.ProfileImageURLCleared() {
		_spec.ClearField(user.FieldProfileImageURL, field.TypeString)
	}
	if value, ok := uu.mutation.PrimaryOrganizationID(); ok {
		_spec.SetField(user.FieldPrimaryOrganizationID, field.TypeString, value)
	}
	if uu.mutation.PrimaryOrganizationIDCleared() {
		_spec.ClearField(user.FieldPrimaryOrganizationID, field.TypeString)
	}
	if value, ok := uu.mutation.Locale(); ok {
		_spec.SetField(user.FieldLocale, field.TypeString, value)
	}
	if uu.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionsTable,
			Columns: []string{user.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedSessionsIDs(); len(nodes) > 0 && !uu.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionsTable,
			Columns: []string{user.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.SessionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionsTable,
			Columns: []string{user.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.APIKeysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.APIKeysTable,
			Columns: []string{user.APIKeysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apikey.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedAPIKeysIDs(); len(nodes) > 0 && !uu.mutation.APIKeysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.APIKeysTable,
			Columns: []string{user.APIKeysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apikey.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.APIKeysIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.APIKeysTable,
			Columns: []string{user.APIKeysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apikey.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.OrganizationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.OrganizationsTable,
			Columns: user.OrganizationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedOrganizationsIDs(); len(nodes) > 0 && !uu.mutation.OrganizationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.OrganizationsTable,
			Columns: user.OrganizationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.OrganizationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.OrganizationsTable,
			Columns: user.OrganizationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.MfaMethodsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.MfaMethodsTable,
			Columns: []string{user.MfaMethodsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mfa.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedMfaMethodsIDs(); len(nodes) > 0 && !uu.mutation.MfaMethodsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.MfaMethodsTable,
			Columns: []string{user.MfaMethodsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mfa.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.MfaMethodsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.MfaMethodsTable,
			Columns: []string{user.MfaMethodsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mfa.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.PasskeysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PasskeysTable,
			Columns: []string{user.PasskeysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(passkey.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedPasskeysIDs(); len(nodes) > 0 && !uu.mutation.PasskeysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PasskeysTable,
			Columns: []string{user.PasskeysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(passkey.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.PasskeysIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PasskeysTable,
			Columns: []string{user.PasskeysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(passkey.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.OauthTokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OauthTokensTable,
			Columns: []string{user.OauthTokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthtoken.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedOauthTokensIDs(); len(nodes) > 0 && !uu.mutation.OauthTokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OauthTokensTable,
			Columns: []string{user.OauthTokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthtoken.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.OauthTokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OauthTokensTable,
			Columns: []string{user.OauthTokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthtoken.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.OauthAuthorizationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OauthAuthorizationsTable,
			Columns: []string{user.OauthAuthorizationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthauthorization.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedOauthAuthorizationsIDs(); len(nodes) > 0 && !uu.mutation.OauthAuthorizationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OauthAuthorizationsTable,
			Columns: []string{user.OauthAuthorizationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthauthorization.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.OauthAuthorizationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OauthAuthorizationsTable,
			Columns: []string{user.OauthAuthorizationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthauthorization.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.VerificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.VerificationsTable,
			Columns: []string{user.VerificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(verification.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedVerificationsIDs(); len(nodes) > 0 && !uu.mutation.VerificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.VerificationsTable,
			Columns: []string{user.VerificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(verification.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.VerificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.VerificationsTable,
			Columns: []string{user.VerificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(verification.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.RolesTable,
			Columns: user.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedRolesIDs(); len(nodes) > 0 && !uu.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.RolesTable,
			Columns: user.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.RolesTable,
			Columns: user.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (uuo *UserUpdateOne) SetUpdatedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetUpdatedAt(t)
	return uuo
}

// SetEmail sets the "email" field.
func (uuo *UserUpdateOne) SetEmail(s string) *UserUpdateOne {
	uuo.mutation.SetEmail(s)
	return uuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableEmail(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetEmail(*s)
	}
	return uuo
}

// SetPhoneNumber sets the "phone_number" field.
func (uuo *UserUpdateOne) SetPhoneNumber(s string) *UserUpdateOne {
	uuo.mutation.SetPhoneNumber(s)
	return uuo
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePhoneNumber(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPhoneNumber(*s)
	}
	return uuo
}

// ClearPhoneNumber clears the value of the "phone_number" field.
func (uuo *UserUpdateOne) ClearPhoneNumber() *UserUpdateOne {
	uuo.mutation.ClearPhoneNumber()
	return uuo
}

// SetFirstName sets the "first_name" field.
func (uuo *UserUpdateOne) SetFirstName(s string) *UserUpdateOne {
	uuo.mutation.SetFirstName(s)
	return uuo
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableFirstName(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetFirstName(*s)
	}
	return uuo
}

// ClearFirstName clears the value of the "first_name" field.
func (uuo *UserUpdateOne) ClearFirstName() *UserUpdateOne {
	uuo.mutation.ClearFirstName()
	return uuo
}

// SetLastName sets the "last_name" field.
func (uuo *UserUpdateOne) SetLastName(s string) *UserUpdateOne {
	uuo.mutation.SetLastName(s)
	return uuo
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLastName(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetLastName(*s)
	}
	return uuo
}

// ClearLastName clears the value of the "last_name" field.
func (uuo *UserUpdateOne) ClearLastName() *UserUpdateOne {
	uuo.mutation.ClearLastName()
	return uuo
}

// SetPasswordHash sets the "password_hash" field.
func (uuo *UserUpdateOne) SetPasswordHash(s string) *UserUpdateOne {
	uuo.mutation.SetPasswordHash(s)
	return uuo
}

// SetNillablePasswordHash sets the "password_hash" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePasswordHash(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPasswordHash(*s)
	}
	return uuo
}

// ClearPasswordHash clears the value of the "password_hash" field.
func (uuo *UserUpdateOne) ClearPasswordHash() *UserUpdateOne {
	uuo.mutation.ClearPasswordHash()
	return uuo
}

// SetEmailVerified sets the "email_verified" field.
func (uuo *UserUpdateOne) SetEmailVerified(b bool) *UserUpdateOne {
	uuo.mutation.SetEmailVerified(b)
	return uuo
}

// SetNillableEmailVerified sets the "email_verified" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableEmailVerified(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetEmailVerified(*b)
	}
	return uuo
}

// SetPhoneVerified sets the "phone_verified" field.
func (uuo *UserUpdateOne) SetPhoneVerified(b bool) *UserUpdateOne {
	uuo.mutation.SetPhoneVerified(b)
	return uuo
}

// SetNillablePhoneVerified sets the "phone_verified" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePhoneVerified(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetPhoneVerified(*b)
	}
	return uuo
}

// SetActive sets the "active" field.
func (uuo *UserUpdateOne) SetActive(b bool) *UserUpdateOne {
	uuo.mutation.SetActive(b)
	return uuo
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableActive(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetActive(*b)
	}
	return uuo
}

// SetLastLogin sets the "last_login" field.
func (uuo *UserUpdateOne) SetLastLogin(t time.Time) *UserUpdateOne {
	uuo.mutation.SetLastLogin(t)
	return uuo
}

// SetNillableLastLogin sets the "last_login" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLastLogin(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetLastLogin(*t)
	}
	return uuo
}

// ClearLastLogin clears the value of the "last_login" field.
func (uuo *UserUpdateOne) ClearLastLogin() *UserUpdateOne {
	uuo.mutation.ClearLastLogin()
	return uuo
}

// SetLastPasswordChange sets the "last_password_change" field.
func (uuo *UserUpdateOne) SetLastPasswordChange(t time.Time) *UserUpdateOne {
	uuo.mutation.SetLastPasswordChange(t)
	return uuo
}

// SetNillableLastPasswordChange sets the "last_password_change" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLastPasswordChange(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetLastPasswordChange(*t)
	}
	return uuo
}

// ClearLastPasswordChange clears the value of the "last_password_change" field.
func (uuo *UserUpdateOne) ClearLastPasswordChange() *UserUpdateOne {
	uuo.mutation.ClearLastPasswordChange()
	return uuo
}

// SetMetadata sets the "metadata" field.
func (uuo *UserUpdateOne) SetMetadata(m map[string]interface{}) *UserUpdateOne {
	uuo.mutation.SetMetadata(m)
	return uuo
}

// ClearMetadata clears the value of the "metadata" field.
func (uuo *UserUpdateOne) ClearMetadata() *UserUpdateOne {
	uuo.mutation.ClearMetadata()
	return uuo
}

// SetProfileImageURL sets the "profile_image_url" field.
func (uuo *UserUpdateOne) SetProfileImageURL(s string) *UserUpdateOne {
	uuo.mutation.SetProfileImageURL(s)
	return uuo
}

// SetNillableProfileImageURL sets the "profile_image_url" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableProfileImageURL(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetProfileImageURL(*s)
	}
	return uuo
}

// ClearProfileImageURL clears the value of the "profile_image_url" field.
func (uuo *UserUpdateOne) ClearProfileImageURL() *UserUpdateOne {
	uuo.mutation.ClearProfileImageURL()
	return uuo
}

// SetPrimaryOrganizationID sets the "primary_organization_id" field.
func (uuo *UserUpdateOne) SetPrimaryOrganizationID(s string) *UserUpdateOne {
	uuo.mutation.SetPrimaryOrganizationID(s)
	return uuo
}

// SetNillablePrimaryOrganizationID sets the "primary_organization_id" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePrimaryOrganizationID(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPrimaryOrganizationID(*s)
	}
	return uuo
}

// ClearPrimaryOrganizationID clears the value of the "primary_organization_id" field.
func (uuo *UserUpdateOne) ClearPrimaryOrganizationID() *UserUpdateOne {
	uuo.mutation.ClearPrimaryOrganizationID()
	return uuo
}

// SetLocale sets the "locale" field.
func (uuo *UserUpdateOne) SetLocale(s string) *UserUpdateOne {
	uuo.mutation.SetLocale(s)
	return uuo
}

// SetNillableLocale sets the "locale" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLocale(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetLocale(*s)
	}
	return uuo
}

// AddSessionIDs adds the "sessions" edge to the Session entity by IDs.
func (uuo *UserUpdateOne) AddSessionIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddSessionIDs(ids...)
	return uuo
}

// AddSessions adds the "sessions" edges to the Session entity.
func (uuo *UserUpdateOne) AddSessions(s ...*Session) *UserUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uuo.AddSessionIDs(ids...)
}

// AddAPIKeyIDs adds the "api_keys" edge to the ApiKey entity by IDs.
func (uuo *UserUpdateOne) AddAPIKeyIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddAPIKeyIDs(ids...)
	return uuo
}

// AddAPIKeys adds the "api_keys" edges to the ApiKey entity.
func (uuo *UserUpdateOne) AddAPIKeys(a ...*ApiKey) *UserUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uuo.AddAPIKeyIDs(ids...)
}

// AddOrganizationIDs adds the "organizations" edge to the Organization entity by IDs.
func (uuo *UserUpdateOne) AddOrganizationIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddOrganizationIDs(ids...)
	return uuo
}

// AddOrganizations adds the "organizations" edges to the Organization entity.
func (uuo *UserUpdateOne) AddOrganizations(o ...*Organization) *UserUpdateOne {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uuo.AddOrganizationIDs(ids...)
}

// AddMfaMethodIDs adds the "mfa_methods" edge to the MFA entity by IDs.
func (uuo *UserUpdateOne) AddMfaMethodIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddMfaMethodIDs(ids...)
	return uuo
}

// AddMfaMethods adds the "mfa_methods" edges to the MFA entity.
func (uuo *UserUpdateOne) AddMfaMethods(m ...*MFA) *UserUpdateOne {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uuo.AddMfaMethodIDs(ids...)
}

// AddPasskeyIDs adds the "passkeys" edge to the Passkey entity by IDs.
func (uuo *UserUpdateOne) AddPasskeyIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddPasskeyIDs(ids...)
	return uuo
}

// AddPasskeys adds the "passkeys" edges to the Passkey entity.
func (uuo *UserUpdateOne) AddPasskeys(p ...*Passkey) *UserUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.AddPasskeyIDs(ids...)
}

// AddOauthTokenIDs adds the "oauth_tokens" edge to the OAuthToken entity by IDs.
func (uuo *UserUpdateOne) AddOauthTokenIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddOauthTokenIDs(ids...)
	return uuo
}

// AddOauthTokens adds the "oauth_tokens" edges to the OAuthToken entity.
func (uuo *UserUpdateOne) AddOauthTokens(o ...*OAuthToken) *UserUpdateOne {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uuo.AddOauthTokenIDs(ids...)
}

// AddOauthAuthorizationIDs adds the "oauth_authorizations" edge to the OAuthAuthorization entity by IDs.
func (uuo *UserUpdateOne) AddOauthAuthorizationIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddOauthAuthorizationIDs(ids...)
	return uuo
}

// AddOauthAuthorizations adds the "oauth_authorizations" edges to the OAuthAuthorization entity.
func (uuo *UserUpdateOne) AddOauthAuthorizations(o ...*OAuthAuthorization) *UserUpdateOne {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uuo.AddOauthAuthorizationIDs(ids...)
}

// AddVerificationIDs adds the "verifications" edge to the Verification entity by IDs.
func (uuo *UserUpdateOne) AddVerificationIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddVerificationIDs(ids...)
	return uuo
}

// AddVerifications adds the "verifications" edges to the Verification entity.
func (uuo *UserUpdateOne) AddVerifications(v ...*Verification) *UserUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return uuo.AddVerificationIDs(ids...)
}

// AddRoleIDs adds the "roles" edge to the Role entity by IDs.
func (uuo *UserUpdateOne) AddRoleIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddRoleIDs(ids...)
	return uuo
}

// AddRoles adds the "roles" edges to the Role entity.
func (uuo *UserUpdateOne) AddRoles(r ...*Role) *UserUpdateOne {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uuo.AddRoleIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// ClearSessions clears all "sessions" edges to the Session entity.
func (uuo *UserUpdateOne) ClearSessions() *UserUpdateOne {
	uuo.mutation.ClearSessions()
	return uuo
}

// RemoveSessionIDs removes the "sessions" edge to Session entities by IDs.
func (uuo *UserUpdateOne) RemoveSessionIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveSessionIDs(ids...)
	return uuo
}

// RemoveSessions removes "sessions" edges to Session entities.
func (uuo *UserUpdateOne) RemoveSessions(s ...*Session) *UserUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uuo.RemoveSessionIDs(ids...)
}

// ClearAPIKeys clears all "api_keys" edges to the ApiKey entity.
func (uuo *UserUpdateOne) ClearAPIKeys() *UserUpdateOne {
	uuo.mutation.ClearAPIKeys()
	return uuo
}

// RemoveAPIKeyIDs removes the "api_keys" edge to ApiKey entities by IDs.
func (uuo *UserUpdateOne) RemoveAPIKeyIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveAPIKeyIDs(ids...)
	return uuo
}

// RemoveAPIKeys removes "api_keys" edges to ApiKey entities.
func (uuo *UserUpdateOne) RemoveAPIKeys(a ...*ApiKey) *UserUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uuo.RemoveAPIKeyIDs(ids...)
}

// ClearOrganizations clears all "organizations" edges to the Organization entity.
func (uuo *UserUpdateOne) ClearOrganizations() *UserUpdateOne {
	uuo.mutation.ClearOrganizations()
	return uuo
}

// RemoveOrganizationIDs removes the "organizations" edge to Organization entities by IDs.
func (uuo *UserUpdateOne) RemoveOrganizationIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveOrganizationIDs(ids...)
	return uuo
}

// RemoveOrganizations removes "organizations" edges to Organization entities.
func (uuo *UserUpdateOne) RemoveOrganizations(o ...*Organization) *UserUpdateOne {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uuo.RemoveOrganizationIDs(ids...)
}

// ClearMfaMethods clears all "mfa_methods" edges to the MFA entity.
func (uuo *UserUpdateOne) ClearMfaMethods() *UserUpdateOne {
	uuo.mutation.ClearMfaMethods()
	return uuo
}

// RemoveMfaMethodIDs removes the "mfa_methods" edge to MFA entities by IDs.
func (uuo *UserUpdateOne) RemoveMfaMethodIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveMfaMethodIDs(ids...)
	return uuo
}

// RemoveMfaMethods removes "mfa_methods" edges to MFA entities.
func (uuo *UserUpdateOne) RemoveMfaMethods(m ...*MFA) *UserUpdateOne {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uuo.RemoveMfaMethodIDs(ids...)
}

// ClearPasskeys clears all "passkeys" edges to the Passkey entity.
func (uuo *UserUpdateOne) ClearPasskeys() *UserUpdateOne {
	uuo.mutation.ClearPasskeys()
	return uuo
}

// RemovePasskeyIDs removes the "passkeys" edge to Passkey entities by IDs.
func (uuo *UserUpdateOne) RemovePasskeyIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemovePasskeyIDs(ids...)
	return uuo
}

// RemovePasskeys removes "passkeys" edges to Passkey entities.
func (uuo *UserUpdateOne) RemovePasskeys(p ...*Passkey) *UserUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.RemovePasskeyIDs(ids...)
}

// ClearOauthTokens clears all "oauth_tokens" edges to the OAuthToken entity.
func (uuo *UserUpdateOne) ClearOauthTokens() *UserUpdateOne {
	uuo.mutation.ClearOauthTokens()
	return uuo
}

// RemoveOauthTokenIDs removes the "oauth_tokens" edge to OAuthToken entities by IDs.
func (uuo *UserUpdateOne) RemoveOauthTokenIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveOauthTokenIDs(ids...)
	return uuo
}

// RemoveOauthTokens removes "oauth_tokens" edges to OAuthToken entities.
func (uuo *UserUpdateOne) RemoveOauthTokens(o ...*OAuthToken) *UserUpdateOne {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uuo.RemoveOauthTokenIDs(ids...)
}

// ClearOauthAuthorizations clears all "oauth_authorizations" edges to the OAuthAuthorization entity.
func (uuo *UserUpdateOne) ClearOauthAuthorizations() *UserUpdateOne {
	uuo.mutation.ClearOauthAuthorizations()
	return uuo
}

// RemoveOauthAuthorizationIDs removes the "oauth_authorizations" edge to OAuthAuthorization entities by IDs.
func (uuo *UserUpdateOne) RemoveOauthAuthorizationIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveOauthAuthorizationIDs(ids...)
	return uuo
}

// RemoveOauthAuthorizations removes "oauth_authorizations" edges to OAuthAuthorization entities.
func (uuo *UserUpdateOne) RemoveOauthAuthorizations(o ...*OAuthAuthorization) *UserUpdateOne {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uuo.RemoveOauthAuthorizationIDs(ids...)
}

// ClearVerifications clears all "verifications" edges to the Verification entity.
func (uuo *UserUpdateOne) ClearVerifications() *UserUpdateOne {
	uuo.mutation.ClearVerifications()
	return uuo
}

// RemoveVerificationIDs removes the "verifications" edge to Verification entities by IDs.
func (uuo *UserUpdateOne) RemoveVerificationIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveVerificationIDs(ids...)
	return uuo
}

// RemoveVerifications removes "verifications" edges to Verification entities.
func (uuo *UserUpdateOne) RemoveVerifications(v ...*Verification) *UserUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return uuo.RemoveVerificationIDs(ids...)
}

// ClearRoles clears all "roles" edges to the Role entity.
func (uuo *UserUpdateOne) ClearRoles() *UserUpdateOne {
	uuo.mutation.ClearRoles()
	return uuo
}

// RemoveRoleIDs removes the "roles" edge to Role entities by IDs.
func (uuo *UserUpdateOne) RemoveRoleIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveRoleIDs(ids...)
	return uuo
}

// RemoveRoles removes "roles" edges to Role entities.
func (uuo *UserUpdateOne) RemoveRoles(r ...*Role) *UserUpdateOne {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uuo.RemoveRoleIDs(ids...)
}

// Where appends a list predicates to the UserUpdate builder.
func (uuo *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	uuo.defaults()
	return withHooks(ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uuo *UserUpdateOne) defaults() {
	if _, ok := uuo.mutation.UpdatedAt(); !ok {
		v := user.UpdateDefaultUpdatedAt()
		uuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uuo *UserUpdateOne) check() error {
	if v, ok := uuo.mutation.Email(); ok {
		if err := user.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "User.email": %w`, err)}
		}
	}
	return nil
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	if err := uuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeString))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := uuo.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := uuo.mutation.PhoneNumber(); ok {
		_spec.SetField(user.FieldPhoneNumber, field.TypeString, value)
	}
	if uuo.mutation.PhoneNumberCleared() {
		_spec.ClearField(user.FieldPhoneNumber, field.TypeString)
	}
	if value, ok := uuo.mutation.FirstName(); ok {
		_spec.SetField(user.FieldFirstName, field.TypeString, value)
	}
	if uuo.mutation.FirstNameCleared() {
		_spec.ClearField(user.FieldFirstName, field.TypeString)
	}
	if value, ok := uuo.mutation.LastName(); ok {
		_spec.SetField(user.FieldLastName, field.TypeString, value)
	}
	if uuo.mutation.LastNameCleared() {
		_spec.ClearField(user.FieldLastName, field.TypeString)
	}
	if value, ok := uuo.mutation.PasswordHash(); ok {
		_spec.SetField(user.FieldPasswordHash, field.TypeString, value)
	}
	if uuo.mutation.PasswordHashCleared() {
		_spec.ClearField(user.FieldPasswordHash, field.TypeString)
	}
	if value, ok := uuo.mutation.EmailVerified(); ok {
		_spec.SetField(user.FieldEmailVerified, field.TypeBool, value)
	}
	if value, ok := uuo.mutation.PhoneVerified(); ok {
		_spec.SetField(user.FieldPhoneVerified, field.TypeBool, value)
	}
	if value, ok := uuo.mutation.Active(); ok {
		_spec.SetField(user.FieldActive, field.TypeBool, value)
	}
	if value, ok := uuo.mutation.LastLogin(); ok {
		_spec.SetField(user.FieldLastLogin, field.TypeTime, value)
	}
	if uuo.mutation.LastLoginCleared() {
		_spec.ClearField(user.FieldLastLogin, field.TypeTime)
	}
	if value, ok := uuo.mutation.LastPasswordChange(); ok {
		_spec.SetField(user.FieldLastPasswordChange, field.TypeTime, value)
	}
	if uuo.mutation.LastPasswordChangeCleared() {
		_spec.ClearField(user.FieldLastPasswordChange, field.TypeTime)
	}
	if value, ok := uuo.mutation.Metadata(); ok {
		_spec.SetField(user.FieldMetadata, field.TypeJSON, value)
	}
	if uuo.mutation.MetadataCleared() {
		_spec.ClearField(user.FieldMetadata, field.TypeJSON)
	}
	if value, ok := uuo.mutation.ProfileImageURL(); ok {
		_spec.SetField(user.FieldProfileImageURL, field.TypeString, value)
	}
	if uuo.mutation.ProfileImageURLCleared() {
		_spec.ClearField(user.FieldProfileImageURL, field.TypeString)
	}
	if value, ok := uuo.mutation.PrimaryOrganizationID(); ok {
		_spec.SetField(user.FieldPrimaryOrganizationID, field.TypeString, value)
	}
	if uuo.mutation.PrimaryOrganizationIDCleared() {
		_spec.ClearField(user.FieldPrimaryOrganizationID, field.TypeString)
	}
	if value, ok := uuo.mutation.Locale(); ok {
		_spec.SetField(user.FieldLocale, field.TypeString, value)
	}
	if uuo.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionsTable,
			Columns: []string{user.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedSessionsIDs(); len(nodes) > 0 && !uuo.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionsTable,
			Columns: []string{user.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.SessionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionsTable,
			Columns: []string{user.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.APIKeysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.APIKeysTable,
			Columns: []string{user.APIKeysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apikey.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedAPIKeysIDs(); len(nodes) > 0 && !uuo.mutation.APIKeysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.APIKeysTable,
			Columns: []string{user.APIKeysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apikey.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.APIKeysIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.APIKeysTable,
			Columns: []string{user.APIKeysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apikey.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.OrganizationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.OrganizationsTable,
			Columns: user.OrganizationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedOrganizationsIDs(); len(nodes) > 0 && !uuo.mutation.OrganizationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.OrganizationsTable,
			Columns: user.OrganizationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.OrganizationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.OrganizationsTable,
			Columns: user.OrganizationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.MfaMethodsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.MfaMethodsTable,
			Columns: []string{user.MfaMethodsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mfa.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedMfaMethodsIDs(); len(nodes) > 0 && !uuo.mutation.MfaMethodsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.MfaMethodsTable,
			Columns: []string{user.MfaMethodsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mfa.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.MfaMethodsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.MfaMethodsTable,
			Columns: []string{user.MfaMethodsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mfa.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.PasskeysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PasskeysTable,
			Columns: []string{user.PasskeysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(passkey.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedPasskeysIDs(); len(nodes) > 0 && !uuo.mutation.PasskeysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PasskeysTable,
			Columns: []string{user.PasskeysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(passkey.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.PasskeysIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PasskeysTable,
			Columns: []string{user.PasskeysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(passkey.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.OauthTokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OauthTokensTable,
			Columns: []string{user.OauthTokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthtoken.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedOauthTokensIDs(); len(nodes) > 0 && !uuo.mutation.OauthTokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OauthTokensTable,
			Columns: []string{user.OauthTokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthtoken.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.OauthTokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OauthTokensTable,
			Columns: []string{user.OauthTokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthtoken.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.OauthAuthorizationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OauthAuthorizationsTable,
			Columns: []string{user.OauthAuthorizationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthauthorization.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedOauthAuthorizationsIDs(); len(nodes) > 0 && !uuo.mutation.OauthAuthorizationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OauthAuthorizationsTable,
			Columns: []string{user.OauthAuthorizationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthauthorization.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.OauthAuthorizationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OauthAuthorizationsTable,
			Columns: []string{user.OauthAuthorizationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthauthorization.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.VerificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.VerificationsTable,
			Columns: []string{user.VerificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(verification.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedVerificationsIDs(); len(nodes) > 0 && !uuo.mutation.VerificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.VerificationsTable,
			Columns: []string{user.VerificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(verification.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.VerificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.VerificationsTable,
			Columns: []string{user.VerificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(verification.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.RolesTable,
			Columns: user.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedRolesIDs(); len(nodes) > 0 && !uuo.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.RolesTable,
			Columns: user.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.RolesTable,
			Columns: user.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}
