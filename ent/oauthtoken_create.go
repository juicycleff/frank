// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/juicycleff/frank/ent/oauthclient"
	"github.com/juicycleff/frank/ent/oauthscope"
	"github.com/juicycleff/frank/ent/oauthtoken"
	"github.com/juicycleff/frank/ent/user"
)

// OAuthTokenCreate is the builder for creating a OAuthToken entity.
type OAuthTokenCreate struct {
	config
	mutation *OAuthTokenMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (otc *OAuthTokenCreate) SetCreatedAt(t time.Time) *OAuthTokenCreate {
	otc.mutation.SetCreatedAt(t)
	return otc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (otc *OAuthTokenCreate) SetNillableCreatedAt(t *time.Time) *OAuthTokenCreate {
	if t != nil {
		otc.SetCreatedAt(*t)
	}
	return otc
}

// SetUpdatedAt sets the "updated_at" field.
func (otc *OAuthTokenCreate) SetUpdatedAt(t time.Time) *OAuthTokenCreate {
	otc.mutation.SetUpdatedAt(t)
	return otc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (otc *OAuthTokenCreate) SetNillableUpdatedAt(t *time.Time) *OAuthTokenCreate {
	if t != nil {
		otc.SetUpdatedAt(*t)
	}
	return otc
}

// SetAccessToken sets the "access_token" field.
func (otc *OAuthTokenCreate) SetAccessToken(s string) *OAuthTokenCreate {
	otc.mutation.SetAccessToken(s)
	return otc
}

// SetRefreshToken sets the "refresh_token" field.
func (otc *OAuthTokenCreate) SetRefreshToken(s string) *OAuthTokenCreate {
	otc.mutation.SetRefreshToken(s)
	return otc
}

// SetNillableRefreshToken sets the "refresh_token" field if the given value is not nil.
func (otc *OAuthTokenCreate) SetNillableRefreshToken(s *string) *OAuthTokenCreate {
	if s != nil {
		otc.SetRefreshToken(*s)
	}
	return otc
}

// SetTokenType sets the "token_type" field.
func (otc *OAuthTokenCreate) SetTokenType(s string) *OAuthTokenCreate {
	otc.mutation.SetTokenType(s)
	return otc
}

// SetNillableTokenType sets the "token_type" field if the given value is not nil.
func (otc *OAuthTokenCreate) SetNillableTokenType(s *string) *OAuthTokenCreate {
	if s != nil {
		otc.SetTokenType(*s)
	}
	return otc
}

// SetClientID sets the "client_id" field.
func (otc *OAuthTokenCreate) SetClientID(s string) *OAuthTokenCreate {
	otc.mutation.SetClientID(s)
	return otc
}

// SetUserID sets the "user_id" field.
func (otc *OAuthTokenCreate) SetUserID(s string) *OAuthTokenCreate {
	otc.mutation.SetUserID(s)
	return otc
}

// SetOrganizationID sets the "organization_id" field.
func (otc *OAuthTokenCreate) SetOrganizationID(s string) *OAuthTokenCreate {
	otc.mutation.SetOrganizationID(s)
	return otc
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (otc *OAuthTokenCreate) SetNillableOrganizationID(s *string) *OAuthTokenCreate {
	if s != nil {
		otc.SetOrganizationID(*s)
	}
	return otc
}

// SetScopeNames sets the "scope_names" field.
func (otc *OAuthTokenCreate) SetScopeNames(s []string) *OAuthTokenCreate {
	otc.mutation.SetScopeNames(s)
	return otc
}

// SetExpiresIn sets the "expires_in" field.
func (otc *OAuthTokenCreate) SetExpiresIn(i int) *OAuthTokenCreate {
	otc.mutation.SetExpiresIn(i)
	return otc
}

// SetNillableExpiresIn sets the "expires_in" field if the given value is not nil.
func (otc *OAuthTokenCreate) SetNillableExpiresIn(i *int) *OAuthTokenCreate {
	if i != nil {
		otc.SetExpiresIn(*i)
	}
	return otc
}

// SetExpiresAt sets the "expires_at" field.
func (otc *OAuthTokenCreate) SetExpiresAt(t time.Time) *OAuthTokenCreate {
	otc.mutation.SetExpiresAt(t)
	return otc
}

// SetRefreshTokenExpiresAt sets the "refresh_token_expires_at" field.
func (otc *OAuthTokenCreate) SetRefreshTokenExpiresAt(t time.Time) *OAuthTokenCreate {
	otc.mutation.SetRefreshTokenExpiresAt(t)
	return otc
}

// SetNillableRefreshTokenExpiresAt sets the "refresh_token_expires_at" field if the given value is not nil.
func (otc *OAuthTokenCreate) SetNillableRefreshTokenExpiresAt(t *time.Time) *OAuthTokenCreate {
	if t != nil {
		otc.SetRefreshTokenExpiresAt(*t)
	}
	return otc
}

// SetRevoked sets the "revoked" field.
func (otc *OAuthTokenCreate) SetRevoked(b bool) *OAuthTokenCreate {
	otc.mutation.SetRevoked(b)
	return otc
}

// SetNillableRevoked sets the "revoked" field if the given value is not nil.
func (otc *OAuthTokenCreate) SetNillableRevoked(b *bool) *OAuthTokenCreate {
	if b != nil {
		otc.SetRevoked(*b)
	}
	return otc
}

// SetRevokedAt sets the "revoked_at" field.
func (otc *OAuthTokenCreate) SetRevokedAt(t time.Time) *OAuthTokenCreate {
	otc.mutation.SetRevokedAt(t)
	return otc
}

// SetNillableRevokedAt sets the "revoked_at" field if the given value is not nil.
func (otc *OAuthTokenCreate) SetNillableRevokedAt(t *time.Time) *OAuthTokenCreate {
	if t != nil {
		otc.SetRevokedAt(*t)
	}
	return otc
}

// SetIPAddress sets the "ip_address" field.
func (otc *OAuthTokenCreate) SetIPAddress(s string) *OAuthTokenCreate {
	otc.mutation.SetIPAddress(s)
	return otc
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (otc *OAuthTokenCreate) SetNillableIPAddress(s *string) *OAuthTokenCreate {
	if s != nil {
		otc.SetIPAddress(*s)
	}
	return otc
}

// SetUserAgent sets the "user_agent" field.
func (otc *OAuthTokenCreate) SetUserAgent(s string) *OAuthTokenCreate {
	otc.mutation.SetUserAgent(s)
	return otc
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (otc *OAuthTokenCreate) SetNillableUserAgent(s *string) *OAuthTokenCreate {
	if s != nil {
		otc.SetUserAgent(*s)
	}
	return otc
}

// SetID sets the "id" field.
func (otc *OAuthTokenCreate) SetID(s string) *OAuthTokenCreate {
	otc.mutation.SetID(s)
	return otc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (otc *OAuthTokenCreate) SetNillableID(s *string) *OAuthTokenCreate {
	if s != nil {
		otc.SetID(*s)
	}
	return otc
}

// SetClient sets the "client" edge to the OAuthClient entity.
func (otc *OAuthTokenCreate) SetClient(o *OAuthClient) *OAuthTokenCreate {
	return otc.SetClientID(o.ID)
}

// SetUser sets the "user" edge to the User entity.
func (otc *OAuthTokenCreate) SetUser(u *User) *OAuthTokenCreate {
	return otc.SetUserID(u.ID)
}

// AddScopeIDs adds the "scopes" edge to the OAuthScope entity by IDs.
func (otc *OAuthTokenCreate) AddScopeIDs(ids ...string) *OAuthTokenCreate {
	otc.mutation.AddScopeIDs(ids...)
	return otc
}

// AddScopes adds the "scopes" edges to the OAuthScope entity.
func (otc *OAuthTokenCreate) AddScopes(o ...*OAuthScope) *OAuthTokenCreate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return otc.AddScopeIDs(ids...)
}

// Mutation returns the OAuthTokenMutation object of the builder.
func (otc *OAuthTokenCreate) Mutation() *OAuthTokenMutation {
	return otc.mutation
}

// Save creates the OAuthToken in the database.
func (otc *OAuthTokenCreate) Save(ctx context.Context) (*OAuthToken, error) {
	otc.defaults()
	return withHooks(ctx, otc.sqlSave, otc.mutation, otc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (otc *OAuthTokenCreate) SaveX(ctx context.Context) *OAuthToken {
	v, err := otc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (otc *OAuthTokenCreate) Exec(ctx context.Context) error {
	_, err := otc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (otc *OAuthTokenCreate) ExecX(ctx context.Context) {
	if err := otc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (otc *OAuthTokenCreate) defaults() {
	if _, ok := otc.mutation.CreatedAt(); !ok {
		v := oauthtoken.DefaultCreatedAt()
		otc.mutation.SetCreatedAt(v)
	}
	if _, ok := otc.mutation.UpdatedAt(); !ok {
		v := oauthtoken.DefaultUpdatedAt()
		otc.mutation.SetUpdatedAt(v)
	}
	if _, ok := otc.mutation.TokenType(); !ok {
		v := oauthtoken.DefaultTokenType
		otc.mutation.SetTokenType(v)
	}
	if _, ok := otc.mutation.ExpiresIn(); !ok {
		v := oauthtoken.DefaultExpiresIn
		otc.mutation.SetExpiresIn(v)
	}
	if _, ok := otc.mutation.Revoked(); !ok {
		v := oauthtoken.DefaultRevoked
		otc.mutation.SetRevoked(v)
	}
	if _, ok := otc.mutation.ID(); !ok {
		v := oauthtoken.DefaultID()
		otc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (otc *OAuthTokenCreate) check() error {
	if _, ok := otc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "OAuthToken.created_at"`)}
	}
	if _, ok := otc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "OAuthToken.updated_at"`)}
	}
	if _, ok := otc.mutation.AccessToken(); !ok {
		return &ValidationError{Name: "access_token", err: errors.New(`ent: missing required field "OAuthToken.access_token"`)}
	}
	if v, ok := otc.mutation.AccessToken(); ok {
		if err := oauthtoken.AccessTokenValidator(v); err != nil {
			return &ValidationError{Name: "access_token", err: fmt.Errorf(`ent: validator failed for field "OAuthToken.access_token": %w`, err)}
		}
	}
	if _, ok := otc.mutation.TokenType(); !ok {
		return &ValidationError{Name: "token_type", err: errors.New(`ent: missing required field "OAuthToken.token_type"`)}
	}
	if _, ok := otc.mutation.ClientID(); !ok {
		return &ValidationError{Name: "client_id", err: errors.New(`ent: missing required field "OAuthToken.client_id"`)}
	}
	if v, ok := otc.mutation.ClientID(); ok {
		if err := oauthtoken.ClientIDValidator(v); err != nil {
			return &ValidationError{Name: "client_id", err: fmt.Errorf(`ent: validator failed for field "OAuthToken.client_id": %w`, err)}
		}
	}
	if _, ok := otc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "OAuthToken.user_id"`)}
	}
	if v, ok := otc.mutation.UserID(); ok {
		if err := oauthtoken.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "OAuthToken.user_id": %w`, err)}
		}
	}
	if _, ok := otc.mutation.ExpiresIn(); !ok {
		return &ValidationError{Name: "expires_in", err: errors.New(`ent: missing required field "OAuthToken.expires_in"`)}
	}
	if _, ok := otc.mutation.ExpiresAt(); !ok {
		return &ValidationError{Name: "expires_at", err: errors.New(`ent: missing required field "OAuthToken.expires_at"`)}
	}
	if _, ok := otc.mutation.Revoked(); !ok {
		return &ValidationError{Name: "revoked", err: errors.New(`ent: missing required field "OAuthToken.revoked"`)}
	}
	if len(otc.mutation.ClientIDs()) == 0 {
		return &ValidationError{Name: "client", err: errors.New(`ent: missing required edge "OAuthToken.client"`)}
	}
	if len(otc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "OAuthToken.user"`)}
	}
	return nil
}

func (otc *OAuthTokenCreate) sqlSave(ctx context.Context) (*OAuthToken, error) {
	if err := otc.check(); err != nil {
		return nil, err
	}
	_node, _spec := otc.createSpec()
	if err := sqlgraph.CreateNode(ctx, otc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected OAuthToken.ID type: %T", _spec.ID.Value)
		}
	}
	otc.mutation.id = &_node.ID
	otc.mutation.done = true
	return _node, nil
}

func (otc *OAuthTokenCreate) createSpec() (*OAuthToken, *sqlgraph.CreateSpec) {
	var (
		_node = &OAuthToken{config: otc.config}
		_spec = sqlgraph.NewCreateSpec(oauthtoken.Table, sqlgraph.NewFieldSpec(oauthtoken.FieldID, field.TypeString))
	)
	if id, ok := otc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := otc.mutation.CreatedAt(); ok {
		_spec.SetField(oauthtoken.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := otc.mutation.UpdatedAt(); ok {
		_spec.SetField(oauthtoken.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := otc.mutation.AccessToken(); ok {
		_spec.SetField(oauthtoken.FieldAccessToken, field.TypeString, value)
		_node.AccessToken = value
	}
	if value, ok := otc.mutation.RefreshToken(); ok {
		_spec.SetField(oauthtoken.FieldRefreshToken, field.TypeString, value)
		_node.RefreshToken = value
	}
	if value, ok := otc.mutation.TokenType(); ok {
		_spec.SetField(oauthtoken.FieldTokenType, field.TypeString, value)
		_node.TokenType = value
	}
	if value, ok := otc.mutation.OrganizationID(); ok {
		_spec.SetField(oauthtoken.FieldOrganizationID, field.TypeString, value)
		_node.OrganizationID = value
	}
	if value, ok := otc.mutation.ScopeNames(); ok {
		_spec.SetField(oauthtoken.FieldScopeNames, field.TypeJSON, value)
		_node.ScopeNames = value
	}
	if value, ok := otc.mutation.ExpiresIn(); ok {
		_spec.SetField(oauthtoken.FieldExpiresIn, field.TypeInt, value)
		_node.ExpiresIn = value
	}
	if value, ok := otc.mutation.ExpiresAt(); ok {
		_spec.SetField(oauthtoken.FieldExpiresAt, field.TypeTime, value)
		_node.ExpiresAt = value
	}
	if value, ok := otc.mutation.RefreshTokenExpiresAt(); ok {
		_spec.SetField(oauthtoken.FieldRefreshTokenExpiresAt, field.TypeTime, value)
		_node.RefreshTokenExpiresAt = &value
	}
	if value, ok := otc.mutation.Revoked(); ok {
		_spec.SetField(oauthtoken.FieldRevoked, field.TypeBool, value)
		_node.Revoked = value
	}
	if value, ok := otc.mutation.RevokedAt(); ok {
		_spec.SetField(oauthtoken.FieldRevokedAt, field.TypeTime, value)
		_node.RevokedAt = &value
	}
	if value, ok := otc.mutation.IPAddress(); ok {
		_spec.SetField(oauthtoken.FieldIPAddress, field.TypeString, value)
		_node.IPAddress = value
	}
	if value, ok := otc.mutation.UserAgent(); ok {
		_spec.SetField(oauthtoken.FieldUserAgent, field.TypeString, value)
		_node.UserAgent = value
	}
	if nodes := otc.mutation.ClientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauthtoken.ClientTable,
			Columns: []string{oauthtoken.ClientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthclient.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ClientID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := otc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauthtoken.UserTable,
			Columns: []string{oauthtoken.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := otc.mutation.ScopesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   oauthtoken.ScopesTable,
			Columns: oauthtoken.ScopesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthscope.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OAuthTokenCreateBulk is the builder for creating many OAuthToken entities in bulk.
type OAuthTokenCreateBulk struct {
	config
	err      error
	builders []*OAuthTokenCreate
}

// Save creates the OAuthToken entities in the database.
func (otcb *OAuthTokenCreateBulk) Save(ctx context.Context) ([]*OAuthToken, error) {
	if otcb.err != nil {
		return nil, otcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(otcb.builders))
	nodes := make([]*OAuthToken, len(otcb.builders))
	mutators := make([]Mutator, len(otcb.builders))
	for i := range otcb.builders {
		func(i int, root context.Context) {
			builder := otcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OAuthTokenMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, otcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, otcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, otcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (otcb *OAuthTokenCreateBulk) SaveX(ctx context.Context) []*OAuthToken {
	v, err := otcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (otcb *OAuthTokenCreateBulk) Exec(ctx context.Context) error {
	_, err := otcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (otcb *OAuthTokenCreateBulk) ExecX(ctx context.Context) {
	if err := otcb.Exec(ctx); err != nil {
		panic(err)
	}
}
