// Copyright 2023-present XRaph LLC. All rights reserved.
// This source code is licensed under the XRaph LLC license found
// in the LICENSE file in the root directory of this source tree.
// Code generated by ent, DO NOT EDIT.

package providertemplate

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/rs/xid"
)

const (
	// Label holds the string label denoting the providertemplate type in the database.
	Label = "provider_template"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldKey holds the string denoting the key field in the database.
	FieldKey = "key"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDisplayName holds the string denoting the display_name field in the database.
	FieldDisplayName = "display_name"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldProtocol holds the string denoting the protocol field in the database.
	FieldProtocol = "protocol"
	// FieldIconURL holds the string denoting the icon_url field in the database.
	FieldIconURL = "icon_url"
	// FieldCategory holds the string denoting the category field in the database.
	FieldCategory = "category"
	// FieldPopular holds the string denoting the popular field in the database.
	FieldPopular = "popular"
	// FieldActive holds the string denoting the active field in the database.
	FieldActive = "active"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldConfigTemplate holds the string denoting the config_template field in the database.
	FieldConfigTemplate = "config_template"
	// FieldRequiredFields holds the string denoting the required_fields field in the database.
	FieldRequiredFields = "required_fields"
	// FieldSupportedFeatures holds the string denoting the supported_features field in the database.
	FieldSupportedFeatures = "supported_features"
	// FieldDocumentationURL holds the string denoting the documentation_url field in the database.
	FieldDocumentationURL = "documentation_url"
	// FieldSetupGuideURL holds the string denoting the setup_guide_url field in the database.
	FieldSetupGuideURL = "setup_guide_url"
	// FieldUsageCount holds the string denoting the usage_count field in the database.
	FieldUsageCount = "usage_count"
	// FieldAverageSetupTime holds the string denoting the average_setup_time field in the database.
	FieldAverageSetupTime = "average_setup_time"
	// FieldSuccessRate holds the string denoting the success_rate field in the database.
	FieldSuccessRate = "success_rate"
	// FieldPopularityRank holds the string denoting the popularity_rank field in the database.
	FieldPopularityRank = "popularity_rank"
	// FieldMetadata holds the string denoting the metadata field in the database.
	FieldMetadata = "metadata"
	// EdgeOrganizationProviders holds the string denoting the organization_providers edge name in mutations.
	EdgeOrganizationProviders = "organization_providers"
	// Table holds the table name of the providertemplate in the database.
	Table = "provider_templates"
	// OrganizationProvidersTable is the table that holds the organization_providers relation/edge.
	OrganizationProvidersTable = "organization_providers"
	// OrganizationProvidersInverseTable is the table name for the OrganizationProvider entity.
	// It exists in this package in order to avoid circular dependency with the "organizationprovider" package.
	OrganizationProvidersInverseTable = "organization_providers"
	// OrganizationProvidersColumn is the table column denoting the organization_providers relation/edge.
	OrganizationProvidersColumn = "template_id"
)

// Columns holds all SQL columns for providertemplate fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldKey,
	FieldName,
	FieldDisplayName,
	FieldType,
	FieldProtocol,
	FieldIconURL,
	FieldCategory,
	FieldPopular,
	FieldActive,
	FieldDescription,
	FieldConfigTemplate,
	FieldRequiredFields,
	FieldSupportedFeatures,
	FieldDocumentationURL,
	FieldSetupGuideURL,
	FieldUsageCount,
	FieldAverageSetupTime,
	FieldSuccessRate,
	FieldPopularityRank,
	FieldMetadata,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// KeyValidator is a validator for the "key" field. It is called by the builders before save.
	KeyValidator func(string) error
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DisplayNameValidator is a validator for the "display_name" field. It is called by the builders before save.
	DisplayNameValidator func(string) error
	// TypeValidator is a validator for the "type" field. It is called by the builders before save.
	TypeValidator func(string) error
	// ProtocolValidator is a validator for the "protocol" field. It is called by the builders before save.
	ProtocolValidator func(string) error
	// DefaultCategory holds the default value on creation for the "category" field.
	DefaultCategory string
	// DefaultPopular holds the default value on creation for the "popular" field.
	DefaultPopular bool
	// DefaultActive holds the default value on creation for the "active" field.
	DefaultActive bool
	// DefaultUsageCount holds the default value on creation for the "usage_count" field.
	DefaultUsageCount int
	// DefaultSuccessRate holds the default value on creation for the "success_rate" field.
	DefaultSuccessRate float64
	// DefaultPopularityRank holds the default value on creation for the "popularity_rank" field.
	DefaultPopularityRank int
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() xid.ID
)

// OrderOption defines the ordering options for the ProviderTemplate queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByKey orders the results by the key field.
func ByKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKey, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDisplayName orders the results by the display_name field.
func ByDisplayName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisplayName, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByProtocol orders the results by the protocol field.
func ByProtocol(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProtocol, opts...).ToFunc()
}

// ByIconURL orders the results by the icon_url field.
func ByIconURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIconURL, opts...).ToFunc()
}

// ByCategory orders the results by the category field.
func ByCategory(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCategory, opts...).ToFunc()
}

// ByPopular orders the results by the popular field.
func ByPopular(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPopular, opts...).ToFunc()
}

// ByActive orders the results by the active field.
func ByActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActive, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByDocumentationURL orders the results by the documentation_url field.
func ByDocumentationURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDocumentationURL, opts...).ToFunc()
}

// BySetupGuideURL orders the results by the setup_guide_url field.
func BySetupGuideURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSetupGuideURL, opts...).ToFunc()
}

// ByUsageCount orders the results by the usage_count field.
func ByUsageCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsageCount, opts...).ToFunc()
}

// ByAverageSetupTime orders the results by the average_setup_time field.
func ByAverageSetupTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAverageSetupTime, opts...).ToFunc()
}

// BySuccessRate orders the results by the success_rate field.
func BySuccessRate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSuccessRate, opts...).ToFunc()
}

// ByPopularityRank orders the results by the popularity_rank field.
func ByPopularityRank(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPopularityRank, opts...).ToFunc()
}

// ByOrganizationProvidersCount orders the results by organization_providers count.
func ByOrganizationProvidersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOrganizationProvidersStep(), opts...)
	}
}

// ByOrganizationProviders orders the results by organization_providers terms.
func ByOrganizationProviders(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrganizationProvidersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newOrganizationProvidersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrganizationProvidersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, OrganizationProvidersTable, OrganizationProvidersColumn),
	)
}
