// Code generated by ent, DO NOT EDIT.

package emailtemplate

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the emailtemplate type in the database.
	Label = "email_template"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldSubject holds the string denoting the subject field in the database.
	FieldSubject = "subject"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldHTMLContent holds the string denoting the html_content field in the database.
	FieldHTMLContent = "html_content"
	// FieldTextContent holds the string denoting the text_content field in the database.
	FieldTextContent = "text_content"
	// FieldOrganizationID holds the string denoting the organization_id field in the database.
	FieldOrganizationID = "organization_id"
	// FieldActive holds the string denoting the active field in the database.
	FieldActive = "active"
	// FieldSystem holds the string denoting the system field in the database.
	FieldSystem = "system"
	// FieldLocale holds the string denoting the locale field in the database.
	FieldLocale = "locale"
	// FieldMetadata holds the string denoting the metadata field in the database.
	FieldMetadata = "metadata"
	// Table holds the table name of the emailtemplate in the database.
	Table = "email_templates"
)

// Columns holds all SQL columns for emailtemplate fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldName,
	FieldSubject,
	FieldType,
	FieldHTMLContent,
	FieldTextContent,
	FieldOrganizationID,
	FieldActive,
	FieldSystem,
	FieldLocale,
	FieldMetadata,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// SubjectValidator is a validator for the "subject" field. It is called by the builders before save.
	SubjectValidator func(string) error
	// TypeValidator is a validator for the "type" field. It is called by the builders before save.
	TypeValidator func(string) error
	// HTMLContentValidator is a validator for the "html_content" field. It is called by the builders before save.
	HTMLContentValidator func(string) error
	// DefaultActive holds the default value on creation for the "active" field.
	DefaultActive bool
	// DefaultSystem holds the default value on creation for the "system" field.
	DefaultSystem bool
	// DefaultLocale holds the default value on creation for the "locale" field.
	DefaultLocale string
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
)

// OrderOption defines the ordering options for the EmailTemplate queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// BySubject orders the results by the subject field.
func BySubject(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubject, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByHTMLContent orders the results by the html_content field.
func ByHTMLContent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHTMLContent, opts...).ToFunc()
}

// ByTextContent orders the results by the text_content field.
func ByTextContent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTextContent, opts...).ToFunc()
}

// ByOrganizationID orders the results by the organization_id field.
func ByOrganizationID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrganizationID, opts...).ToFunc()
}

// ByActive orders the results by the active field.
func ByActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActive, opts...).ToFunc()
}

// BySystem orders the results by the system field.
func BySystem(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSystem, opts...).ToFunc()
}

// ByLocale orders the results by the locale field.
func ByLocale(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocale, opts...).ToFunc()
}
