// Copyright 2023-present XRaph LLC. All rights reserved.
// This source code is licensed under the XRaph LLC license found
// in the LICENSE file in the root directory of this source tree.
// Code generated by ent, DO NOT EDIT.

package emailtemplate

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/juicycleff/frank/ent/predicate"
	"github.com/rs/xid"
)

// ID filters vertices based on their ID field.
func ID(id xid.ID) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id xid.ID) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id xid.ID) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...xid.ID) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...xid.ID) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id xid.ID) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id xid.ID) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id xid.ID) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id xid.ID) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldEQ(FieldUpdatedAt, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldEQ(FieldName, v))
}

// Subject applies equality check predicate on the "subject" field. It's identical to SubjectEQ.
func Subject(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldEQ(FieldSubject, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldEQ(FieldType, v))
}

// HTMLContent applies equality check predicate on the "html_content" field. It's identical to HTMLContentEQ.
func HTMLContent(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldEQ(FieldHTMLContent, v))
}

// TextContent applies equality check predicate on the "text_content" field. It's identical to TextContentEQ.
func TextContent(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldEQ(FieldTextContent, v))
}

// OrganizationID applies equality check predicate on the "organization_id" field. It's identical to OrganizationIDEQ.
func OrganizationID(v xid.ID) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldEQ(FieldOrganizationID, v))
}

// Active applies equality check predicate on the "active" field. It's identical to ActiveEQ.
func Active(v bool) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldEQ(FieldActive, v))
}

// System applies equality check predicate on the "system" field. It's identical to SystemEQ.
func System(v bool) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldEQ(FieldSystem, v))
}

// Locale applies equality check predicate on the "locale" field. It's identical to LocaleEQ.
func Locale(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldEQ(FieldLocale, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldLTE(FieldUpdatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldContainsFold(FieldName, v))
}

// SubjectEQ applies the EQ predicate on the "subject" field.
func SubjectEQ(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldEQ(FieldSubject, v))
}

// SubjectNEQ applies the NEQ predicate on the "subject" field.
func SubjectNEQ(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldNEQ(FieldSubject, v))
}

// SubjectIn applies the In predicate on the "subject" field.
func SubjectIn(vs ...string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldIn(FieldSubject, vs...))
}

// SubjectNotIn applies the NotIn predicate on the "subject" field.
func SubjectNotIn(vs ...string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldNotIn(FieldSubject, vs...))
}

// SubjectGT applies the GT predicate on the "subject" field.
func SubjectGT(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldGT(FieldSubject, v))
}

// SubjectGTE applies the GTE predicate on the "subject" field.
func SubjectGTE(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldGTE(FieldSubject, v))
}

// SubjectLT applies the LT predicate on the "subject" field.
func SubjectLT(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldLT(FieldSubject, v))
}

// SubjectLTE applies the LTE predicate on the "subject" field.
func SubjectLTE(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldLTE(FieldSubject, v))
}

// SubjectContains applies the Contains predicate on the "subject" field.
func SubjectContains(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldContains(FieldSubject, v))
}

// SubjectHasPrefix applies the HasPrefix predicate on the "subject" field.
func SubjectHasPrefix(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldHasPrefix(FieldSubject, v))
}

// SubjectHasSuffix applies the HasSuffix predicate on the "subject" field.
func SubjectHasSuffix(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldHasSuffix(FieldSubject, v))
}

// SubjectEqualFold applies the EqualFold predicate on the "subject" field.
func SubjectEqualFold(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldEqualFold(FieldSubject, v))
}

// SubjectContainsFold applies the ContainsFold predicate on the "subject" field.
func SubjectContainsFold(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldContainsFold(FieldSubject, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldHasSuffix(FieldType, v))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldContainsFold(FieldType, v))
}

// HTMLContentEQ applies the EQ predicate on the "html_content" field.
func HTMLContentEQ(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldEQ(FieldHTMLContent, v))
}

// HTMLContentNEQ applies the NEQ predicate on the "html_content" field.
func HTMLContentNEQ(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldNEQ(FieldHTMLContent, v))
}

// HTMLContentIn applies the In predicate on the "html_content" field.
func HTMLContentIn(vs ...string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldIn(FieldHTMLContent, vs...))
}

// HTMLContentNotIn applies the NotIn predicate on the "html_content" field.
func HTMLContentNotIn(vs ...string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldNotIn(FieldHTMLContent, vs...))
}

// HTMLContentGT applies the GT predicate on the "html_content" field.
func HTMLContentGT(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldGT(FieldHTMLContent, v))
}

// HTMLContentGTE applies the GTE predicate on the "html_content" field.
func HTMLContentGTE(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldGTE(FieldHTMLContent, v))
}

// HTMLContentLT applies the LT predicate on the "html_content" field.
func HTMLContentLT(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldLT(FieldHTMLContent, v))
}

// HTMLContentLTE applies the LTE predicate on the "html_content" field.
func HTMLContentLTE(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldLTE(FieldHTMLContent, v))
}

// HTMLContentContains applies the Contains predicate on the "html_content" field.
func HTMLContentContains(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldContains(FieldHTMLContent, v))
}

// HTMLContentHasPrefix applies the HasPrefix predicate on the "html_content" field.
func HTMLContentHasPrefix(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldHasPrefix(FieldHTMLContent, v))
}

// HTMLContentHasSuffix applies the HasSuffix predicate on the "html_content" field.
func HTMLContentHasSuffix(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldHasSuffix(FieldHTMLContent, v))
}

// HTMLContentEqualFold applies the EqualFold predicate on the "html_content" field.
func HTMLContentEqualFold(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldEqualFold(FieldHTMLContent, v))
}

// HTMLContentContainsFold applies the ContainsFold predicate on the "html_content" field.
func HTMLContentContainsFold(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldContainsFold(FieldHTMLContent, v))
}

// TextContentEQ applies the EQ predicate on the "text_content" field.
func TextContentEQ(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldEQ(FieldTextContent, v))
}

// TextContentNEQ applies the NEQ predicate on the "text_content" field.
func TextContentNEQ(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldNEQ(FieldTextContent, v))
}

// TextContentIn applies the In predicate on the "text_content" field.
func TextContentIn(vs ...string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldIn(FieldTextContent, vs...))
}

// TextContentNotIn applies the NotIn predicate on the "text_content" field.
func TextContentNotIn(vs ...string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldNotIn(FieldTextContent, vs...))
}

// TextContentGT applies the GT predicate on the "text_content" field.
func TextContentGT(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldGT(FieldTextContent, v))
}

// TextContentGTE applies the GTE predicate on the "text_content" field.
func TextContentGTE(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldGTE(FieldTextContent, v))
}

// TextContentLT applies the LT predicate on the "text_content" field.
func TextContentLT(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldLT(FieldTextContent, v))
}

// TextContentLTE applies the LTE predicate on the "text_content" field.
func TextContentLTE(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldLTE(FieldTextContent, v))
}

// TextContentContains applies the Contains predicate on the "text_content" field.
func TextContentContains(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldContains(FieldTextContent, v))
}

// TextContentHasPrefix applies the HasPrefix predicate on the "text_content" field.
func TextContentHasPrefix(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldHasPrefix(FieldTextContent, v))
}

// TextContentHasSuffix applies the HasSuffix predicate on the "text_content" field.
func TextContentHasSuffix(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldHasSuffix(FieldTextContent, v))
}

// TextContentIsNil applies the IsNil predicate on the "text_content" field.
func TextContentIsNil() predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldIsNull(FieldTextContent))
}

// TextContentNotNil applies the NotNil predicate on the "text_content" field.
func TextContentNotNil() predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldNotNull(FieldTextContent))
}

// TextContentEqualFold applies the EqualFold predicate on the "text_content" field.
func TextContentEqualFold(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldEqualFold(FieldTextContent, v))
}

// TextContentContainsFold applies the ContainsFold predicate on the "text_content" field.
func TextContentContainsFold(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldContainsFold(FieldTextContent, v))
}

// OrganizationIDEQ applies the EQ predicate on the "organization_id" field.
func OrganizationIDEQ(v xid.ID) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldEQ(FieldOrganizationID, v))
}

// OrganizationIDNEQ applies the NEQ predicate on the "organization_id" field.
func OrganizationIDNEQ(v xid.ID) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldNEQ(FieldOrganizationID, v))
}

// OrganizationIDIn applies the In predicate on the "organization_id" field.
func OrganizationIDIn(vs ...xid.ID) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldIn(FieldOrganizationID, vs...))
}

// OrganizationIDNotIn applies the NotIn predicate on the "organization_id" field.
func OrganizationIDNotIn(vs ...xid.ID) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldNotIn(FieldOrganizationID, vs...))
}

// OrganizationIDGT applies the GT predicate on the "organization_id" field.
func OrganizationIDGT(v xid.ID) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldGT(FieldOrganizationID, v))
}

// OrganizationIDGTE applies the GTE predicate on the "organization_id" field.
func OrganizationIDGTE(v xid.ID) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldGTE(FieldOrganizationID, v))
}

// OrganizationIDLT applies the LT predicate on the "organization_id" field.
func OrganizationIDLT(v xid.ID) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldLT(FieldOrganizationID, v))
}

// OrganizationIDLTE applies the LTE predicate on the "organization_id" field.
func OrganizationIDLTE(v xid.ID) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldLTE(FieldOrganizationID, v))
}

// OrganizationIDContains applies the Contains predicate on the "organization_id" field.
func OrganizationIDContains(v xid.ID) predicate.EmailTemplate {
	vc := v.String()
	return predicate.EmailTemplate(sql.FieldContains(FieldOrganizationID, vc))
}

// OrganizationIDHasPrefix applies the HasPrefix predicate on the "organization_id" field.
func OrganizationIDHasPrefix(v xid.ID) predicate.EmailTemplate {
	vc := v.String()
	return predicate.EmailTemplate(sql.FieldHasPrefix(FieldOrganizationID, vc))
}

// OrganizationIDHasSuffix applies the HasSuffix predicate on the "organization_id" field.
func OrganizationIDHasSuffix(v xid.ID) predicate.EmailTemplate {
	vc := v.String()
	return predicate.EmailTemplate(sql.FieldHasSuffix(FieldOrganizationID, vc))
}

// OrganizationIDIsNil applies the IsNil predicate on the "organization_id" field.
func OrganizationIDIsNil() predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldIsNull(FieldOrganizationID))
}

// OrganizationIDNotNil applies the NotNil predicate on the "organization_id" field.
func OrganizationIDNotNil() predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldNotNull(FieldOrganizationID))
}

// OrganizationIDEqualFold applies the EqualFold predicate on the "organization_id" field.
func OrganizationIDEqualFold(v xid.ID) predicate.EmailTemplate {
	vc := v.String()
	return predicate.EmailTemplate(sql.FieldEqualFold(FieldOrganizationID, vc))
}

// OrganizationIDContainsFold applies the ContainsFold predicate on the "organization_id" field.
func OrganizationIDContainsFold(v xid.ID) predicate.EmailTemplate {
	vc := v.String()
	return predicate.EmailTemplate(sql.FieldContainsFold(FieldOrganizationID, vc))
}

// ActiveEQ applies the EQ predicate on the "active" field.
func ActiveEQ(v bool) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldEQ(FieldActive, v))
}

// ActiveNEQ applies the NEQ predicate on the "active" field.
func ActiveNEQ(v bool) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldNEQ(FieldActive, v))
}

// SystemEQ applies the EQ predicate on the "system" field.
func SystemEQ(v bool) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldEQ(FieldSystem, v))
}

// SystemNEQ applies the NEQ predicate on the "system" field.
func SystemNEQ(v bool) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldNEQ(FieldSystem, v))
}

// LocaleEQ applies the EQ predicate on the "locale" field.
func LocaleEQ(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldEQ(FieldLocale, v))
}

// LocaleNEQ applies the NEQ predicate on the "locale" field.
func LocaleNEQ(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldNEQ(FieldLocale, v))
}

// LocaleIn applies the In predicate on the "locale" field.
func LocaleIn(vs ...string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldIn(FieldLocale, vs...))
}

// LocaleNotIn applies the NotIn predicate on the "locale" field.
func LocaleNotIn(vs ...string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldNotIn(FieldLocale, vs...))
}

// LocaleGT applies the GT predicate on the "locale" field.
func LocaleGT(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldGT(FieldLocale, v))
}

// LocaleGTE applies the GTE predicate on the "locale" field.
func LocaleGTE(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldGTE(FieldLocale, v))
}

// LocaleLT applies the LT predicate on the "locale" field.
func LocaleLT(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldLT(FieldLocale, v))
}

// LocaleLTE applies the LTE predicate on the "locale" field.
func LocaleLTE(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldLTE(FieldLocale, v))
}

// LocaleContains applies the Contains predicate on the "locale" field.
func LocaleContains(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldContains(FieldLocale, v))
}

// LocaleHasPrefix applies the HasPrefix predicate on the "locale" field.
func LocaleHasPrefix(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldHasPrefix(FieldLocale, v))
}

// LocaleHasSuffix applies the HasSuffix predicate on the "locale" field.
func LocaleHasSuffix(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldHasSuffix(FieldLocale, v))
}

// LocaleEqualFold applies the EqualFold predicate on the "locale" field.
func LocaleEqualFold(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldEqualFold(FieldLocale, v))
}

// LocaleContainsFold applies the ContainsFold predicate on the "locale" field.
func LocaleContainsFold(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldContainsFold(FieldLocale, v))
}

// MetadataIsNil applies the IsNil predicate on the "metadata" field.
func MetadataIsNil() predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldIsNull(FieldMetadata))
}

// MetadataNotNil applies the NotNil predicate on the "metadata" field.
func MetadataNotNil() predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldNotNull(FieldMetadata))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.EmailTemplate) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.EmailTemplate) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.EmailTemplate) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.NotPredicates(p))
}
