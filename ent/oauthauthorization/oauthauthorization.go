// Code generated by ent, DO NOT EDIT.

package oauthauthorization

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the oauthauthorization type in the database.
	Label = "oauth_authorization"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldClientID holds the string denoting the client_id field in the database.
	FieldClientID = "client_id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldOrganizationID holds the string denoting the organization_id field in the database.
	FieldOrganizationID = "organization_id"
	// FieldCode holds the string denoting the code field in the database.
	FieldCode = "code"
	// FieldCodeChallenge holds the string denoting the code_challenge field in the database.
	FieldCodeChallenge = "code_challenge"
	// FieldCodeChallengeMethod holds the string denoting the code_challenge_method field in the database.
	FieldCodeChallengeMethod = "code_challenge_method"
	// FieldRedirectURI holds the string denoting the redirect_uri field in the database.
	FieldRedirectURI = "redirect_uri"
	// FieldScopeNames holds the string denoting the scope_names field in the database.
	FieldScopeNames = "scope_names"
	// FieldUsed holds the string denoting the used field in the database.
	FieldUsed = "used"
	// FieldUsedAt holds the string denoting the used_at field in the database.
	FieldUsedAt = "used_at"
	// FieldExpiresAt holds the string denoting the expires_at field in the database.
	FieldExpiresAt = "expires_at"
	// FieldState holds the string denoting the state field in the database.
	FieldState = "state"
	// FieldNonce holds the string denoting the nonce field in the database.
	FieldNonce = "nonce"
	// EdgeClient holds the string denoting the client edge name in mutations.
	EdgeClient = "client"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeScopes holds the string denoting the scopes edge name in mutations.
	EdgeScopes = "scopes"
	// Table holds the table name of the oauthauthorization in the database.
	Table = "oauth_authorizations"
	// ClientTable is the table that holds the client relation/edge.
	ClientTable = "oauth_authorizations"
	// ClientInverseTable is the table name for the OAuthClient entity.
	// It exists in this package in order to avoid circular dependency with the "oauthclient" package.
	ClientInverseTable = "oauth_clients"
	// ClientColumn is the table column denoting the client relation/edge.
	ClientColumn = "client_id"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "oauth_authorizations"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
	// ScopesTable is the table that holds the scopes relation/edge. The primary key declared below.
	ScopesTable = "oauth_authorization_scopes"
	// ScopesInverseTable is the table name for the OAuthScope entity.
	// It exists in this package in order to avoid circular dependency with the "oauthscope" package.
	ScopesInverseTable = "oauth_scopes"
)

// Columns holds all SQL columns for oauthauthorization fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldClientID,
	FieldUserID,
	FieldOrganizationID,
	FieldCode,
	FieldCodeChallenge,
	FieldCodeChallengeMethod,
	FieldRedirectURI,
	FieldScopeNames,
	FieldUsed,
	FieldUsedAt,
	FieldExpiresAt,
	FieldState,
	FieldNonce,
}

var (
	// ScopesPrimaryKey and ScopesColumn2 are the table columns denoting the
	// primary key for the scopes relation (M2M).
	ScopesPrimaryKey = []string{"oauth_authorization_id", "oauth_scope_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// ClientIDValidator is a validator for the "client_id" field. It is called by the builders before save.
	ClientIDValidator func(string) error
	// UserIDValidator is a validator for the "user_id" field. It is called by the builders before save.
	UserIDValidator func(string) error
	// RedirectURIValidator is a validator for the "redirect_uri" field. It is called by the builders before save.
	RedirectURIValidator func(string) error
	// DefaultUsed holds the default value on creation for the "used" field.
	DefaultUsed bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
)

// OrderOption defines the ordering options for the OAuthAuthorization queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByClientID orders the results by the client_id field.
func ByClientID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClientID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByOrganizationID orders the results by the organization_id field.
func ByOrganizationID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrganizationID, opts...).ToFunc()
}

// ByCode orders the results by the code field.
func ByCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCode, opts...).ToFunc()
}

// ByCodeChallenge orders the results by the code_challenge field.
func ByCodeChallenge(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCodeChallenge, opts...).ToFunc()
}

// ByCodeChallengeMethod orders the results by the code_challenge_method field.
func ByCodeChallengeMethod(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCodeChallengeMethod, opts...).ToFunc()
}

// ByRedirectURI orders the results by the redirect_uri field.
func ByRedirectURI(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRedirectURI, opts...).ToFunc()
}

// ByUsed orders the results by the used field.
func ByUsed(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsed, opts...).ToFunc()
}

// ByUsedAt orders the results by the used_at field.
func ByUsedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsedAt, opts...).ToFunc()
}

// ByExpiresAt orders the results by the expires_at field.
func ByExpiresAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExpiresAt, opts...).ToFunc()
}

// ByState orders the results by the state field.
func ByState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldState, opts...).ToFunc()
}

// ByNonce orders the results by the nonce field.
func ByNonce(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNonce, opts...).ToFunc()
}

// ByClientField orders the results by client field.
func ByClientField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newClientStep(), sql.OrderByField(field, opts...))
	}
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByScopesCount orders the results by scopes count.
func ByScopesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newScopesStep(), opts...)
	}
}

// ByScopes orders the results by scopes terms.
func ByScopes(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newScopesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newClientStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ClientInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ClientTable, ClientColumn),
	)
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
func newScopesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ScopesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, ScopesTable, ScopesPrimaryKey...),
	)
}
