// Copyright 2023-present XRaph LLC. All rights reserved.
// This source code is licensed under the XRaph LLC license found
// in the LICENSE file in the root directory of this source tree.
// Code generated by ent, DO NOT EDIT.

package oauthauthorization

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/rs/xid"
	"github.com/xraph/frank/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id xid.ID) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id xid.ID) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id xid.ID) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...xid.ID) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...xid.ID) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id xid.ID) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id xid.ID) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id xid.ID) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id xid.ID) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldEQ(FieldDeletedAt, v))
}

// ClientID applies equality check predicate on the "client_id" field. It's identical to ClientIDEQ.
func ClientID(v xid.ID) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldEQ(FieldClientID, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v xid.ID) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldEQ(FieldUserID, v))
}

// OrganizationID applies equality check predicate on the "organization_id" field. It's identical to OrganizationIDEQ.
func OrganizationID(v xid.ID) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldEQ(FieldOrganizationID, v))
}

// Code applies equality check predicate on the "code" field. It's identical to CodeEQ.
func Code(v string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldEQ(FieldCode, v))
}

// CodeChallenge applies equality check predicate on the "code_challenge" field. It's identical to CodeChallengeEQ.
func CodeChallenge(v string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldEQ(FieldCodeChallenge, v))
}

// CodeChallengeMethod applies equality check predicate on the "code_challenge_method" field. It's identical to CodeChallengeMethodEQ.
func CodeChallengeMethod(v string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldEQ(FieldCodeChallengeMethod, v))
}

// RedirectURI applies equality check predicate on the "redirect_uri" field. It's identical to RedirectURIEQ.
func RedirectURI(v string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldEQ(FieldRedirectURI, v))
}

// Used applies equality check predicate on the "used" field. It's identical to UsedEQ.
func Used(v bool) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldEQ(FieldUsed, v))
}

// UsedAt applies equality check predicate on the "used_at" field. It's identical to UsedAtEQ.
func UsedAt(v time.Time) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldEQ(FieldUsedAt, v))
}

// ExpiresAt applies equality check predicate on the "expires_at" field. It's identical to ExpiresAtEQ.
func ExpiresAt(v time.Time) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldEQ(FieldExpiresAt, v))
}

// State applies equality check predicate on the "state" field. It's identical to StateEQ.
func State(v string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldEQ(FieldState, v))
}

// Nonce applies equality check predicate on the "nonce" field. It's identical to NonceEQ.
func Nonce(v string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldEQ(FieldNonce, v))
}

// UserAgent applies equality check predicate on the "user_agent" field. It's identical to UserAgentEQ.
func UserAgent(v string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldEQ(FieldUserAgent, v))
}

// IPAddress applies equality check predicate on the "ip_address" field. It's identical to IPAddressEQ.
func IPAddress(v string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldEQ(FieldIPAddress, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldNotNull(FieldDeletedAt))
}

// ClientIDEQ applies the EQ predicate on the "client_id" field.
func ClientIDEQ(v xid.ID) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldEQ(FieldClientID, v))
}

// ClientIDNEQ applies the NEQ predicate on the "client_id" field.
func ClientIDNEQ(v xid.ID) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldNEQ(FieldClientID, v))
}

// ClientIDIn applies the In predicate on the "client_id" field.
func ClientIDIn(vs ...xid.ID) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldIn(FieldClientID, vs...))
}

// ClientIDNotIn applies the NotIn predicate on the "client_id" field.
func ClientIDNotIn(vs ...xid.ID) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldNotIn(FieldClientID, vs...))
}

// ClientIDGT applies the GT predicate on the "client_id" field.
func ClientIDGT(v xid.ID) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldGT(FieldClientID, v))
}

// ClientIDGTE applies the GTE predicate on the "client_id" field.
func ClientIDGTE(v xid.ID) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldGTE(FieldClientID, v))
}

// ClientIDLT applies the LT predicate on the "client_id" field.
func ClientIDLT(v xid.ID) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldLT(FieldClientID, v))
}

// ClientIDLTE applies the LTE predicate on the "client_id" field.
func ClientIDLTE(v xid.ID) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldLTE(FieldClientID, v))
}

// ClientIDContains applies the Contains predicate on the "client_id" field.
func ClientIDContains(v xid.ID) predicate.OAuthAuthorization {
	vc := v.String()
	return predicate.OAuthAuthorization(sql.FieldContains(FieldClientID, vc))
}

// ClientIDHasPrefix applies the HasPrefix predicate on the "client_id" field.
func ClientIDHasPrefix(v xid.ID) predicate.OAuthAuthorization {
	vc := v.String()
	return predicate.OAuthAuthorization(sql.FieldHasPrefix(FieldClientID, vc))
}

// ClientIDHasSuffix applies the HasSuffix predicate on the "client_id" field.
func ClientIDHasSuffix(v xid.ID) predicate.OAuthAuthorization {
	vc := v.String()
	return predicate.OAuthAuthorization(sql.FieldHasSuffix(FieldClientID, vc))
}

// ClientIDEqualFold applies the EqualFold predicate on the "client_id" field.
func ClientIDEqualFold(v xid.ID) predicate.OAuthAuthorization {
	vc := v.String()
	return predicate.OAuthAuthorization(sql.FieldEqualFold(FieldClientID, vc))
}

// ClientIDContainsFold applies the ContainsFold predicate on the "client_id" field.
func ClientIDContainsFold(v xid.ID) predicate.OAuthAuthorization {
	vc := v.String()
	return predicate.OAuthAuthorization(sql.FieldContainsFold(FieldClientID, vc))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v xid.ID) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v xid.ID) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...xid.ID) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...xid.ID) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v xid.ID) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v xid.ID) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v xid.ID) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v xid.ID) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldLTE(FieldUserID, v))
}

// UserIDContains applies the Contains predicate on the "user_id" field.
func UserIDContains(v xid.ID) predicate.OAuthAuthorization {
	vc := v.String()
	return predicate.OAuthAuthorization(sql.FieldContains(FieldUserID, vc))
}

// UserIDHasPrefix applies the HasPrefix predicate on the "user_id" field.
func UserIDHasPrefix(v xid.ID) predicate.OAuthAuthorization {
	vc := v.String()
	return predicate.OAuthAuthorization(sql.FieldHasPrefix(FieldUserID, vc))
}

// UserIDHasSuffix applies the HasSuffix predicate on the "user_id" field.
func UserIDHasSuffix(v xid.ID) predicate.OAuthAuthorization {
	vc := v.String()
	return predicate.OAuthAuthorization(sql.FieldHasSuffix(FieldUserID, vc))
}

// UserIDEqualFold applies the EqualFold predicate on the "user_id" field.
func UserIDEqualFold(v xid.ID) predicate.OAuthAuthorization {
	vc := v.String()
	return predicate.OAuthAuthorization(sql.FieldEqualFold(FieldUserID, vc))
}

// UserIDContainsFold applies the ContainsFold predicate on the "user_id" field.
func UserIDContainsFold(v xid.ID) predicate.OAuthAuthorization {
	vc := v.String()
	return predicate.OAuthAuthorization(sql.FieldContainsFold(FieldUserID, vc))
}

// OrganizationIDEQ applies the EQ predicate on the "organization_id" field.
func OrganizationIDEQ(v xid.ID) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldEQ(FieldOrganizationID, v))
}

// OrganizationIDNEQ applies the NEQ predicate on the "organization_id" field.
func OrganizationIDNEQ(v xid.ID) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldNEQ(FieldOrganizationID, v))
}

// OrganizationIDIn applies the In predicate on the "organization_id" field.
func OrganizationIDIn(vs ...xid.ID) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldIn(FieldOrganizationID, vs...))
}

// OrganizationIDNotIn applies the NotIn predicate on the "organization_id" field.
func OrganizationIDNotIn(vs ...xid.ID) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldNotIn(FieldOrganizationID, vs...))
}

// OrganizationIDGT applies the GT predicate on the "organization_id" field.
func OrganizationIDGT(v xid.ID) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldGT(FieldOrganizationID, v))
}

// OrganizationIDGTE applies the GTE predicate on the "organization_id" field.
func OrganizationIDGTE(v xid.ID) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldGTE(FieldOrganizationID, v))
}

// OrganizationIDLT applies the LT predicate on the "organization_id" field.
func OrganizationIDLT(v xid.ID) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldLT(FieldOrganizationID, v))
}

// OrganizationIDLTE applies the LTE predicate on the "organization_id" field.
func OrganizationIDLTE(v xid.ID) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldLTE(FieldOrganizationID, v))
}

// OrganizationIDContains applies the Contains predicate on the "organization_id" field.
func OrganizationIDContains(v xid.ID) predicate.OAuthAuthorization {
	vc := v.String()
	return predicate.OAuthAuthorization(sql.FieldContains(FieldOrganizationID, vc))
}

// OrganizationIDHasPrefix applies the HasPrefix predicate on the "organization_id" field.
func OrganizationIDHasPrefix(v xid.ID) predicate.OAuthAuthorization {
	vc := v.String()
	return predicate.OAuthAuthorization(sql.FieldHasPrefix(FieldOrganizationID, vc))
}

// OrganizationIDHasSuffix applies the HasSuffix predicate on the "organization_id" field.
func OrganizationIDHasSuffix(v xid.ID) predicate.OAuthAuthorization {
	vc := v.String()
	return predicate.OAuthAuthorization(sql.FieldHasSuffix(FieldOrganizationID, vc))
}

// OrganizationIDIsNil applies the IsNil predicate on the "organization_id" field.
func OrganizationIDIsNil() predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldIsNull(FieldOrganizationID))
}

// OrganizationIDNotNil applies the NotNil predicate on the "organization_id" field.
func OrganizationIDNotNil() predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldNotNull(FieldOrganizationID))
}

// OrganizationIDEqualFold applies the EqualFold predicate on the "organization_id" field.
func OrganizationIDEqualFold(v xid.ID) predicate.OAuthAuthorization {
	vc := v.String()
	return predicate.OAuthAuthorization(sql.FieldEqualFold(FieldOrganizationID, vc))
}

// OrganizationIDContainsFold applies the ContainsFold predicate on the "organization_id" field.
func OrganizationIDContainsFold(v xid.ID) predicate.OAuthAuthorization {
	vc := v.String()
	return predicate.OAuthAuthorization(sql.FieldContainsFold(FieldOrganizationID, vc))
}

// CodeEQ applies the EQ predicate on the "code" field.
func CodeEQ(v string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldEQ(FieldCode, v))
}

// CodeNEQ applies the NEQ predicate on the "code" field.
func CodeNEQ(v string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldNEQ(FieldCode, v))
}

// CodeIn applies the In predicate on the "code" field.
func CodeIn(vs ...string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldIn(FieldCode, vs...))
}

// CodeNotIn applies the NotIn predicate on the "code" field.
func CodeNotIn(vs ...string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldNotIn(FieldCode, vs...))
}

// CodeGT applies the GT predicate on the "code" field.
func CodeGT(v string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldGT(FieldCode, v))
}

// CodeGTE applies the GTE predicate on the "code" field.
func CodeGTE(v string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldGTE(FieldCode, v))
}

// CodeLT applies the LT predicate on the "code" field.
func CodeLT(v string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldLT(FieldCode, v))
}

// CodeLTE applies the LTE predicate on the "code" field.
func CodeLTE(v string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldLTE(FieldCode, v))
}

// CodeContains applies the Contains predicate on the "code" field.
func CodeContains(v string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldContains(FieldCode, v))
}

// CodeHasPrefix applies the HasPrefix predicate on the "code" field.
func CodeHasPrefix(v string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldHasPrefix(FieldCode, v))
}

// CodeHasSuffix applies the HasSuffix predicate on the "code" field.
func CodeHasSuffix(v string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldHasSuffix(FieldCode, v))
}

// CodeIsNil applies the IsNil predicate on the "code" field.
func CodeIsNil() predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldIsNull(FieldCode))
}

// CodeNotNil applies the NotNil predicate on the "code" field.
func CodeNotNil() predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldNotNull(FieldCode))
}

// CodeEqualFold applies the EqualFold predicate on the "code" field.
func CodeEqualFold(v string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldEqualFold(FieldCode, v))
}

// CodeContainsFold applies the ContainsFold predicate on the "code" field.
func CodeContainsFold(v string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldContainsFold(FieldCode, v))
}

// CodeChallengeEQ applies the EQ predicate on the "code_challenge" field.
func CodeChallengeEQ(v string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldEQ(FieldCodeChallenge, v))
}

// CodeChallengeNEQ applies the NEQ predicate on the "code_challenge" field.
func CodeChallengeNEQ(v string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldNEQ(FieldCodeChallenge, v))
}

// CodeChallengeIn applies the In predicate on the "code_challenge" field.
func CodeChallengeIn(vs ...string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldIn(FieldCodeChallenge, vs...))
}

// CodeChallengeNotIn applies the NotIn predicate on the "code_challenge" field.
func CodeChallengeNotIn(vs ...string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldNotIn(FieldCodeChallenge, vs...))
}

// CodeChallengeGT applies the GT predicate on the "code_challenge" field.
func CodeChallengeGT(v string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldGT(FieldCodeChallenge, v))
}

// CodeChallengeGTE applies the GTE predicate on the "code_challenge" field.
func CodeChallengeGTE(v string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldGTE(FieldCodeChallenge, v))
}

// CodeChallengeLT applies the LT predicate on the "code_challenge" field.
func CodeChallengeLT(v string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldLT(FieldCodeChallenge, v))
}

// CodeChallengeLTE applies the LTE predicate on the "code_challenge" field.
func CodeChallengeLTE(v string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldLTE(FieldCodeChallenge, v))
}

// CodeChallengeContains applies the Contains predicate on the "code_challenge" field.
func CodeChallengeContains(v string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldContains(FieldCodeChallenge, v))
}

// CodeChallengeHasPrefix applies the HasPrefix predicate on the "code_challenge" field.
func CodeChallengeHasPrefix(v string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldHasPrefix(FieldCodeChallenge, v))
}

// CodeChallengeHasSuffix applies the HasSuffix predicate on the "code_challenge" field.
func CodeChallengeHasSuffix(v string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldHasSuffix(FieldCodeChallenge, v))
}

// CodeChallengeIsNil applies the IsNil predicate on the "code_challenge" field.
func CodeChallengeIsNil() predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldIsNull(FieldCodeChallenge))
}

// CodeChallengeNotNil applies the NotNil predicate on the "code_challenge" field.
func CodeChallengeNotNil() predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldNotNull(FieldCodeChallenge))
}

// CodeChallengeEqualFold applies the EqualFold predicate on the "code_challenge" field.
func CodeChallengeEqualFold(v string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldEqualFold(FieldCodeChallenge, v))
}

// CodeChallengeContainsFold applies the ContainsFold predicate on the "code_challenge" field.
func CodeChallengeContainsFold(v string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldContainsFold(FieldCodeChallenge, v))
}

// CodeChallengeMethodEQ applies the EQ predicate on the "code_challenge_method" field.
func CodeChallengeMethodEQ(v string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldEQ(FieldCodeChallengeMethod, v))
}

// CodeChallengeMethodNEQ applies the NEQ predicate on the "code_challenge_method" field.
func CodeChallengeMethodNEQ(v string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldNEQ(FieldCodeChallengeMethod, v))
}

// CodeChallengeMethodIn applies the In predicate on the "code_challenge_method" field.
func CodeChallengeMethodIn(vs ...string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldIn(FieldCodeChallengeMethod, vs...))
}

// CodeChallengeMethodNotIn applies the NotIn predicate on the "code_challenge_method" field.
func CodeChallengeMethodNotIn(vs ...string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldNotIn(FieldCodeChallengeMethod, vs...))
}

// CodeChallengeMethodGT applies the GT predicate on the "code_challenge_method" field.
func CodeChallengeMethodGT(v string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldGT(FieldCodeChallengeMethod, v))
}

// CodeChallengeMethodGTE applies the GTE predicate on the "code_challenge_method" field.
func CodeChallengeMethodGTE(v string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldGTE(FieldCodeChallengeMethod, v))
}

// CodeChallengeMethodLT applies the LT predicate on the "code_challenge_method" field.
func CodeChallengeMethodLT(v string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldLT(FieldCodeChallengeMethod, v))
}

// CodeChallengeMethodLTE applies the LTE predicate on the "code_challenge_method" field.
func CodeChallengeMethodLTE(v string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldLTE(FieldCodeChallengeMethod, v))
}

// CodeChallengeMethodContains applies the Contains predicate on the "code_challenge_method" field.
func CodeChallengeMethodContains(v string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldContains(FieldCodeChallengeMethod, v))
}

// CodeChallengeMethodHasPrefix applies the HasPrefix predicate on the "code_challenge_method" field.
func CodeChallengeMethodHasPrefix(v string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldHasPrefix(FieldCodeChallengeMethod, v))
}

// CodeChallengeMethodHasSuffix applies the HasSuffix predicate on the "code_challenge_method" field.
func CodeChallengeMethodHasSuffix(v string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldHasSuffix(FieldCodeChallengeMethod, v))
}

// CodeChallengeMethodIsNil applies the IsNil predicate on the "code_challenge_method" field.
func CodeChallengeMethodIsNil() predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldIsNull(FieldCodeChallengeMethod))
}

// CodeChallengeMethodNotNil applies the NotNil predicate on the "code_challenge_method" field.
func CodeChallengeMethodNotNil() predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldNotNull(FieldCodeChallengeMethod))
}

// CodeChallengeMethodEqualFold applies the EqualFold predicate on the "code_challenge_method" field.
func CodeChallengeMethodEqualFold(v string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldEqualFold(FieldCodeChallengeMethod, v))
}

// CodeChallengeMethodContainsFold applies the ContainsFold predicate on the "code_challenge_method" field.
func CodeChallengeMethodContainsFold(v string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldContainsFold(FieldCodeChallengeMethod, v))
}

// RedirectURIEQ applies the EQ predicate on the "redirect_uri" field.
func RedirectURIEQ(v string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldEQ(FieldRedirectURI, v))
}

// RedirectURINEQ applies the NEQ predicate on the "redirect_uri" field.
func RedirectURINEQ(v string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldNEQ(FieldRedirectURI, v))
}

// RedirectURIIn applies the In predicate on the "redirect_uri" field.
func RedirectURIIn(vs ...string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldIn(FieldRedirectURI, vs...))
}

// RedirectURINotIn applies the NotIn predicate on the "redirect_uri" field.
func RedirectURINotIn(vs ...string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldNotIn(FieldRedirectURI, vs...))
}

// RedirectURIGT applies the GT predicate on the "redirect_uri" field.
func RedirectURIGT(v string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldGT(FieldRedirectURI, v))
}

// RedirectURIGTE applies the GTE predicate on the "redirect_uri" field.
func RedirectURIGTE(v string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldGTE(FieldRedirectURI, v))
}

// RedirectURILT applies the LT predicate on the "redirect_uri" field.
func RedirectURILT(v string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldLT(FieldRedirectURI, v))
}

// RedirectURILTE applies the LTE predicate on the "redirect_uri" field.
func RedirectURILTE(v string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldLTE(FieldRedirectURI, v))
}

// RedirectURIContains applies the Contains predicate on the "redirect_uri" field.
func RedirectURIContains(v string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldContains(FieldRedirectURI, v))
}

// RedirectURIHasPrefix applies the HasPrefix predicate on the "redirect_uri" field.
func RedirectURIHasPrefix(v string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldHasPrefix(FieldRedirectURI, v))
}

// RedirectURIHasSuffix applies the HasSuffix predicate on the "redirect_uri" field.
func RedirectURIHasSuffix(v string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldHasSuffix(FieldRedirectURI, v))
}

// RedirectURIEqualFold applies the EqualFold predicate on the "redirect_uri" field.
func RedirectURIEqualFold(v string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldEqualFold(FieldRedirectURI, v))
}

// RedirectURIContainsFold applies the ContainsFold predicate on the "redirect_uri" field.
func RedirectURIContainsFold(v string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldContainsFold(FieldRedirectURI, v))
}

// ScopeNamesIsNil applies the IsNil predicate on the "scope_names" field.
func ScopeNamesIsNil() predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldIsNull(FieldScopeNames))
}

// ScopeNamesNotNil applies the NotNil predicate on the "scope_names" field.
func ScopeNamesNotNil() predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldNotNull(FieldScopeNames))
}

// UsedEQ applies the EQ predicate on the "used" field.
func UsedEQ(v bool) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldEQ(FieldUsed, v))
}

// UsedNEQ applies the NEQ predicate on the "used" field.
func UsedNEQ(v bool) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldNEQ(FieldUsed, v))
}

// UsedAtEQ applies the EQ predicate on the "used_at" field.
func UsedAtEQ(v time.Time) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldEQ(FieldUsedAt, v))
}

// UsedAtNEQ applies the NEQ predicate on the "used_at" field.
func UsedAtNEQ(v time.Time) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldNEQ(FieldUsedAt, v))
}

// UsedAtIn applies the In predicate on the "used_at" field.
func UsedAtIn(vs ...time.Time) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldIn(FieldUsedAt, vs...))
}

// UsedAtNotIn applies the NotIn predicate on the "used_at" field.
func UsedAtNotIn(vs ...time.Time) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldNotIn(FieldUsedAt, vs...))
}

// UsedAtGT applies the GT predicate on the "used_at" field.
func UsedAtGT(v time.Time) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldGT(FieldUsedAt, v))
}

// UsedAtGTE applies the GTE predicate on the "used_at" field.
func UsedAtGTE(v time.Time) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldGTE(FieldUsedAt, v))
}

// UsedAtLT applies the LT predicate on the "used_at" field.
func UsedAtLT(v time.Time) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldLT(FieldUsedAt, v))
}

// UsedAtLTE applies the LTE predicate on the "used_at" field.
func UsedAtLTE(v time.Time) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldLTE(FieldUsedAt, v))
}

// ExpiresAtEQ applies the EQ predicate on the "expires_at" field.
func ExpiresAtEQ(v time.Time) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldEQ(FieldExpiresAt, v))
}

// ExpiresAtNEQ applies the NEQ predicate on the "expires_at" field.
func ExpiresAtNEQ(v time.Time) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldNEQ(FieldExpiresAt, v))
}

// ExpiresAtIn applies the In predicate on the "expires_at" field.
func ExpiresAtIn(vs ...time.Time) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldIn(FieldExpiresAt, vs...))
}

// ExpiresAtNotIn applies the NotIn predicate on the "expires_at" field.
func ExpiresAtNotIn(vs ...time.Time) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldNotIn(FieldExpiresAt, vs...))
}

// ExpiresAtGT applies the GT predicate on the "expires_at" field.
func ExpiresAtGT(v time.Time) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldGT(FieldExpiresAt, v))
}

// ExpiresAtGTE applies the GTE predicate on the "expires_at" field.
func ExpiresAtGTE(v time.Time) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldGTE(FieldExpiresAt, v))
}

// ExpiresAtLT applies the LT predicate on the "expires_at" field.
func ExpiresAtLT(v time.Time) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldLT(FieldExpiresAt, v))
}

// ExpiresAtLTE applies the LTE predicate on the "expires_at" field.
func ExpiresAtLTE(v time.Time) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldLTE(FieldExpiresAt, v))
}

// StateEQ applies the EQ predicate on the "state" field.
func StateEQ(v string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldEQ(FieldState, v))
}

// StateNEQ applies the NEQ predicate on the "state" field.
func StateNEQ(v string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldNEQ(FieldState, v))
}

// StateIn applies the In predicate on the "state" field.
func StateIn(vs ...string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldIn(FieldState, vs...))
}

// StateNotIn applies the NotIn predicate on the "state" field.
func StateNotIn(vs ...string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldNotIn(FieldState, vs...))
}

// StateGT applies the GT predicate on the "state" field.
func StateGT(v string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldGT(FieldState, v))
}

// StateGTE applies the GTE predicate on the "state" field.
func StateGTE(v string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldGTE(FieldState, v))
}

// StateLT applies the LT predicate on the "state" field.
func StateLT(v string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldLT(FieldState, v))
}

// StateLTE applies the LTE predicate on the "state" field.
func StateLTE(v string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldLTE(FieldState, v))
}

// StateContains applies the Contains predicate on the "state" field.
func StateContains(v string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldContains(FieldState, v))
}

// StateHasPrefix applies the HasPrefix predicate on the "state" field.
func StateHasPrefix(v string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldHasPrefix(FieldState, v))
}

// StateHasSuffix applies the HasSuffix predicate on the "state" field.
func StateHasSuffix(v string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldHasSuffix(FieldState, v))
}

// StateIsNil applies the IsNil predicate on the "state" field.
func StateIsNil() predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldIsNull(FieldState))
}

// StateNotNil applies the NotNil predicate on the "state" field.
func StateNotNil() predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldNotNull(FieldState))
}

// StateEqualFold applies the EqualFold predicate on the "state" field.
func StateEqualFold(v string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldEqualFold(FieldState, v))
}

// StateContainsFold applies the ContainsFold predicate on the "state" field.
func StateContainsFold(v string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldContainsFold(FieldState, v))
}

// NonceEQ applies the EQ predicate on the "nonce" field.
func NonceEQ(v string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldEQ(FieldNonce, v))
}

// NonceNEQ applies the NEQ predicate on the "nonce" field.
func NonceNEQ(v string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldNEQ(FieldNonce, v))
}

// NonceIn applies the In predicate on the "nonce" field.
func NonceIn(vs ...string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldIn(FieldNonce, vs...))
}

// NonceNotIn applies the NotIn predicate on the "nonce" field.
func NonceNotIn(vs ...string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldNotIn(FieldNonce, vs...))
}

// NonceGT applies the GT predicate on the "nonce" field.
func NonceGT(v string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldGT(FieldNonce, v))
}

// NonceGTE applies the GTE predicate on the "nonce" field.
func NonceGTE(v string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldGTE(FieldNonce, v))
}

// NonceLT applies the LT predicate on the "nonce" field.
func NonceLT(v string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldLT(FieldNonce, v))
}

// NonceLTE applies the LTE predicate on the "nonce" field.
func NonceLTE(v string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldLTE(FieldNonce, v))
}

// NonceContains applies the Contains predicate on the "nonce" field.
func NonceContains(v string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldContains(FieldNonce, v))
}

// NonceHasPrefix applies the HasPrefix predicate on the "nonce" field.
func NonceHasPrefix(v string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldHasPrefix(FieldNonce, v))
}

// NonceHasSuffix applies the HasSuffix predicate on the "nonce" field.
func NonceHasSuffix(v string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldHasSuffix(FieldNonce, v))
}

// NonceIsNil applies the IsNil predicate on the "nonce" field.
func NonceIsNil() predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldIsNull(FieldNonce))
}

// NonceNotNil applies the NotNil predicate on the "nonce" field.
func NonceNotNil() predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldNotNull(FieldNonce))
}

// NonceEqualFold applies the EqualFold predicate on the "nonce" field.
func NonceEqualFold(v string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldEqualFold(FieldNonce, v))
}

// NonceContainsFold applies the ContainsFold predicate on the "nonce" field.
func NonceContainsFold(v string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldContainsFold(FieldNonce, v))
}

// UserAgentEQ applies the EQ predicate on the "user_agent" field.
func UserAgentEQ(v string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldEQ(FieldUserAgent, v))
}

// UserAgentNEQ applies the NEQ predicate on the "user_agent" field.
func UserAgentNEQ(v string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldNEQ(FieldUserAgent, v))
}

// UserAgentIn applies the In predicate on the "user_agent" field.
func UserAgentIn(vs ...string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldIn(FieldUserAgent, vs...))
}

// UserAgentNotIn applies the NotIn predicate on the "user_agent" field.
func UserAgentNotIn(vs ...string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldNotIn(FieldUserAgent, vs...))
}

// UserAgentGT applies the GT predicate on the "user_agent" field.
func UserAgentGT(v string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldGT(FieldUserAgent, v))
}

// UserAgentGTE applies the GTE predicate on the "user_agent" field.
func UserAgentGTE(v string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldGTE(FieldUserAgent, v))
}

// UserAgentLT applies the LT predicate on the "user_agent" field.
func UserAgentLT(v string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldLT(FieldUserAgent, v))
}

// UserAgentLTE applies the LTE predicate on the "user_agent" field.
func UserAgentLTE(v string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldLTE(FieldUserAgent, v))
}

// UserAgentContains applies the Contains predicate on the "user_agent" field.
func UserAgentContains(v string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldContains(FieldUserAgent, v))
}

// UserAgentHasPrefix applies the HasPrefix predicate on the "user_agent" field.
func UserAgentHasPrefix(v string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldHasPrefix(FieldUserAgent, v))
}

// UserAgentHasSuffix applies the HasSuffix predicate on the "user_agent" field.
func UserAgentHasSuffix(v string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldHasSuffix(FieldUserAgent, v))
}

// UserAgentIsNil applies the IsNil predicate on the "user_agent" field.
func UserAgentIsNil() predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldIsNull(FieldUserAgent))
}

// UserAgentNotNil applies the NotNil predicate on the "user_agent" field.
func UserAgentNotNil() predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldNotNull(FieldUserAgent))
}

// UserAgentEqualFold applies the EqualFold predicate on the "user_agent" field.
func UserAgentEqualFold(v string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldEqualFold(FieldUserAgent, v))
}

// UserAgentContainsFold applies the ContainsFold predicate on the "user_agent" field.
func UserAgentContainsFold(v string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldContainsFold(FieldUserAgent, v))
}

// IPAddressEQ applies the EQ predicate on the "ip_address" field.
func IPAddressEQ(v string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldEQ(FieldIPAddress, v))
}

// IPAddressNEQ applies the NEQ predicate on the "ip_address" field.
func IPAddressNEQ(v string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldNEQ(FieldIPAddress, v))
}

// IPAddressIn applies the In predicate on the "ip_address" field.
func IPAddressIn(vs ...string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldIn(FieldIPAddress, vs...))
}

// IPAddressNotIn applies the NotIn predicate on the "ip_address" field.
func IPAddressNotIn(vs ...string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldNotIn(FieldIPAddress, vs...))
}

// IPAddressGT applies the GT predicate on the "ip_address" field.
func IPAddressGT(v string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldGT(FieldIPAddress, v))
}

// IPAddressGTE applies the GTE predicate on the "ip_address" field.
func IPAddressGTE(v string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldGTE(FieldIPAddress, v))
}

// IPAddressLT applies the LT predicate on the "ip_address" field.
func IPAddressLT(v string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldLT(FieldIPAddress, v))
}

// IPAddressLTE applies the LTE predicate on the "ip_address" field.
func IPAddressLTE(v string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldLTE(FieldIPAddress, v))
}

// IPAddressContains applies the Contains predicate on the "ip_address" field.
func IPAddressContains(v string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldContains(FieldIPAddress, v))
}

// IPAddressHasPrefix applies the HasPrefix predicate on the "ip_address" field.
func IPAddressHasPrefix(v string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldHasPrefix(FieldIPAddress, v))
}

// IPAddressHasSuffix applies the HasSuffix predicate on the "ip_address" field.
func IPAddressHasSuffix(v string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldHasSuffix(FieldIPAddress, v))
}

// IPAddressIsNil applies the IsNil predicate on the "ip_address" field.
func IPAddressIsNil() predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldIsNull(FieldIPAddress))
}

// IPAddressNotNil applies the NotNil predicate on the "ip_address" field.
func IPAddressNotNil() predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldNotNull(FieldIPAddress))
}

// IPAddressEqualFold applies the EqualFold predicate on the "ip_address" field.
func IPAddressEqualFold(v string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldEqualFold(FieldIPAddress, v))
}

// IPAddressContainsFold applies the ContainsFold predicate on the "ip_address" field.
func IPAddressContainsFold(v string) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.FieldContainsFold(FieldIPAddress, v))
}

// HasClient applies the HasEdge predicate on the "client" edge.
func HasClient() predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ClientTable, ClientColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasClientWith applies the HasEdge predicate on the "client" edge with a given conditions (other predicates).
func HasClientWith(preds ...predicate.OAuthClient) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(func(s *sql.Selector) {
		step := newClientStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasScopes applies the HasEdge predicate on the "scopes" edge.
func HasScopes() predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, ScopesTable, ScopesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasScopesWith applies the HasEdge predicate on the "scopes" edge with a given conditions (other predicates).
func HasScopesWith(preds ...predicate.OAuthScope) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(func(s *sql.Selector) {
		step := newScopesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.OAuthAuthorization) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.OAuthAuthorization) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.OAuthAuthorization) predicate.OAuthAuthorization {
	return predicate.OAuthAuthorization(sql.NotPredicates(p))
}
