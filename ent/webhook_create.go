// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/juicycleff/frank/ent/organization"
	"github.com/juicycleff/frank/ent/webhook"
	"github.com/juicycleff/frank/ent/webhookevent"
)

// WebhookCreate is the builder for creating a Webhook entity.
type WebhookCreate struct {
	config
	mutation *WebhookMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (wc *WebhookCreate) SetCreatedAt(t time.Time) *WebhookCreate {
	wc.mutation.SetCreatedAt(t)
	return wc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (wc *WebhookCreate) SetNillableCreatedAt(t *time.Time) *WebhookCreate {
	if t != nil {
		wc.SetCreatedAt(*t)
	}
	return wc
}

// SetUpdatedAt sets the "updated_at" field.
func (wc *WebhookCreate) SetUpdatedAt(t time.Time) *WebhookCreate {
	wc.mutation.SetUpdatedAt(t)
	return wc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (wc *WebhookCreate) SetNillableUpdatedAt(t *time.Time) *WebhookCreate {
	if t != nil {
		wc.SetUpdatedAt(*t)
	}
	return wc
}

// SetName sets the "name" field.
func (wc *WebhookCreate) SetName(s string) *WebhookCreate {
	wc.mutation.SetName(s)
	return wc
}

// SetURL sets the "url" field.
func (wc *WebhookCreate) SetURL(s string) *WebhookCreate {
	wc.mutation.SetURL(s)
	return wc
}

// SetOrganizationID sets the "organization_id" field.
func (wc *WebhookCreate) SetOrganizationID(s string) *WebhookCreate {
	wc.mutation.SetOrganizationID(s)
	return wc
}

// SetSecret sets the "secret" field.
func (wc *WebhookCreate) SetSecret(s string) *WebhookCreate {
	wc.mutation.SetSecret(s)
	return wc
}

// SetActive sets the "active" field.
func (wc *WebhookCreate) SetActive(b bool) *WebhookCreate {
	wc.mutation.SetActive(b)
	return wc
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (wc *WebhookCreate) SetNillableActive(b *bool) *WebhookCreate {
	if b != nil {
		wc.SetActive(*b)
	}
	return wc
}

// SetEventTypes sets the "event_types" field.
func (wc *WebhookCreate) SetEventTypes(s []string) *WebhookCreate {
	wc.mutation.SetEventTypes(s)
	return wc
}

// SetVersion sets the "version" field.
func (wc *WebhookCreate) SetVersion(s string) *WebhookCreate {
	wc.mutation.SetVersion(s)
	return wc
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (wc *WebhookCreate) SetNillableVersion(s *string) *WebhookCreate {
	if s != nil {
		wc.SetVersion(*s)
	}
	return wc
}

// SetRetryCount sets the "retry_count" field.
func (wc *WebhookCreate) SetRetryCount(i int) *WebhookCreate {
	wc.mutation.SetRetryCount(i)
	return wc
}

// SetNillableRetryCount sets the "retry_count" field if the given value is not nil.
func (wc *WebhookCreate) SetNillableRetryCount(i *int) *WebhookCreate {
	if i != nil {
		wc.SetRetryCount(*i)
	}
	return wc
}

// SetTimeoutMs sets the "timeout_ms" field.
func (wc *WebhookCreate) SetTimeoutMs(i int) *WebhookCreate {
	wc.mutation.SetTimeoutMs(i)
	return wc
}

// SetNillableTimeoutMs sets the "timeout_ms" field if the given value is not nil.
func (wc *WebhookCreate) SetNillableTimeoutMs(i *int) *WebhookCreate {
	if i != nil {
		wc.SetTimeoutMs(*i)
	}
	return wc
}

// SetFormat sets the "format" field.
func (wc *WebhookCreate) SetFormat(w webhook.Format) *WebhookCreate {
	wc.mutation.SetFormat(w)
	return wc
}

// SetNillableFormat sets the "format" field if the given value is not nil.
func (wc *WebhookCreate) SetNillableFormat(w *webhook.Format) *WebhookCreate {
	if w != nil {
		wc.SetFormat(*w)
	}
	return wc
}

// SetMetadata sets the "metadata" field.
func (wc *WebhookCreate) SetMetadata(m map[string]interface{}) *WebhookCreate {
	wc.mutation.SetMetadata(m)
	return wc
}

// SetID sets the "id" field.
func (wc *WebhookCreate) SetID(s string) *WebhookCreate {
	wc.mutation.SetID(s)
	return wc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (wc *WebhookCreate) SetNillableID(s *string) *WebhookCreate {
	if s != nil {
		wc.SetID(*s)
	}
	return wc
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (wc *WebhookCreate) SetOrganization(o *Organization) *WebhookCreate {
	return wc.SetOrganizationID(o.ID)
}

// AddEventIDs adds the "events" edge to the WebhookEvent entity by IDs.
func (wc *WebhookCreate) AddEventIDs(ids ...string) *WebhookCreate {
	wc.mutation.AddEventIDs(ids...)
	return wc
}

// AddEvents adds the "events" edges to the WebhookEvent entity.
func (wc *WebhookCreate) AddEvents(w ...*WebhookEvent) *WebhookCreate {
	ids := make([]string, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wc.AddEventIDs(ids...)
}

// Mutation returns the WebhookMutation object of the builder.
func (wc *WebhookCreate) Mutation() *WebhookMutation {
	return wc.mutation
}

// Save creates the Webhook in the database.
func (wc *WebhookCreate) Save(ctx context.Context) (*Webhook, error) {
	wc.defaults()
	return withHooks(ctx, wc.sqlSave, wc.mutation, wc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (wc *WebhookCreate) SaveX(ctx context.Context) *Webhook {
	v, err := wc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wc *WebhookCreate) Exec(ctx context.Context) error {
	_, err := wc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wc *WebhookCreate) ExecX(ctx context.Context) {
	if err := wc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wc *WebhookCreate) defaults() {
	if _, ok := wc.mutation.CreatedAt(); !ok {
		v := webhook.DefaultCreatedAt()
		wc.mutation.SetCreatedAt(v)
	}
	if _, ok := wc.mutation.UpdatedAt(); !ok {
		v := webhook.DefaultUpdatedAt()
		wc.mutation.SetUpdatedAt(v)
	}
	if _, ok := wc.mutation.Active(); !ok {
		v := webhook.DefaultActive
		wc.mutation.SetActive(v)
	}
	if _, ok := wc.mutation.Version(); !ok {
		v := webhook.DefaultVersion
		wc.mutation.SetVersion(v)
	}
	if _, ok := wc.mutation.RetryCount(); !ok {
		v := webhook.DefaultRetryCount
		wc.mutation.SetRetryCount(v)
	}
	if _, ok := wc.mutation.TimeoutMs(); !ok {
		v := webhook.DefaultTimeoutMs
		wc.mutation.SetTimeoutMs(v)
	}
	if _, ok := wc.mutation.Format(); !ok {
		v := webhook.DefaultFormat
		wc.mutation.SetFormat(v)
	}
	if _, ok := wc.mutation.ID(); !ok {
		v := webhook.DefaultID()
		wc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wc *WebhookCreate) check() error {
	if _, ok := wc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Webhook.created_at"`)}
	}
	if _, ok := wc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Webhook.updated_at"`)}
	}
	if _, ok := wc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Webhook.name"`)}
	}
	if v, ok := wc.mutation.Name(); ok {
		if err := webhook.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Webhook.name": %w`, err)}
		}
	}
	if _, ok := wc.mutation.URL(); !ok {
		return &ValidationError{Name: "url", err: errors.New(`ent: missing required field "Webhook.url"`)}
	}
	if v, ok := wc.mutation.URL(); ok {
		if err := webhook.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`ent: validator failed for field "Webhook.url": %w`, err)}
		}
	}
	if _, ok := wc.mutation.OrganizationID(); !ok {
		return &ValidationError{Name: "organization_id", err: errors.New(`ent: missing required field "Webhook.organization_id"`)}
	}
	if v, ok := wc.mutation.OrganizationID(); ok {
		if err := webhook.OrganizationIDValidator(v); err != nil {
			return &ValidationError{Name: "organization_id", err: fmt.Errorf(`ent: validator failed for field "Webhook.organization_id": %w`, err)}
		}
	}
	if _, ok := wc.mutation.Secret(); !ok {
		return &ValidationError{Name: "secret", err: errors.New(`ent: missing required field "Webhook.secret"`)}
	}
	if v, ok := wc.mutation.Secret(); ok {
		if err := webhook.SecretValidator(v); err != nil {
			return &ValidationError{Name: "secret", err: fmt.Errorf(`ent: validator failed for field "Webhook.secret": %w`, err)}
		}
	}
	if _, ok := wc.mutation.Active(); !ok {
		return &ValidationError{Name: "active", err: errors.New(`ent: missing required field "Webhook.active"`)}
	}
	if _, ok := wc.mutation.EventTypes(); !ok {
		return &ValidationError{Name: "event_types", err: errors.New(`ent: missing required field "Webhook.event_types"`)}
	}
	if _, ok := wc.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`ent: missing required field "Webhook.version"`)}
	}
	if _, ok := wc.mutation.RetryCount(); !ok {
		return &ValidationError{Name: "retry_count", err: errors.New(`ent: missing required field "Webhook.retry_count"`)}
	}
	if _, ok := wc.mutation.TimeoutMs(); !ok {
		return &ValidationError{Name: "timeout_ms", err: errors.New(`ent: missing required field "Webhook.timeout_ms"`)}
	}
	if _, ok := wc.mutation.Format(); !ok {
		return &ValidationError{Name: "format", err: errors.New(`ent: missing required field "Webhook.format"`)}
	}
	if v, ok := wc.mutation.Format(); ok {
		if err := webhook.FormatValidator(v); err != nil {
			return &ValidationError{Name: "format", err: fmt.Errorf(`ent: validator failed for field "Webhook.format": %w`, err)}
		}
	}
	if len(wc.mutation.OrganizationIDs()) == 0 {
		return &ValidationError{Name: "organization", err: errors.New(`ent: missing required edge "Webhook.organization"`)}
	}
	return nil
}

func (wc *WebhookCreate) sqlSave(ctx context.Context) (*Webhook, error) {
	if err := wc.check(); err != nil {
		return nil, err
	}
	_node, _spec := wc.createSpec()
	if err := sqlgraph.CreateNode(ctx, wc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Webhook.ID type: %T", _spec.ID.Value)
		}
	}
	wc.mutation.id = &_node.ID
	wc.mutation.done = true
	return _node, nil
}

func (wc *WebhookCreate) createSpec() (*Webhook, *sqlgraph.CreateSpec) {
	var (
		_node = &Webhook{config: wc.config}
		_spec = sqlgraph.NewCreateSpec(webhook.Table, sqlgraph.NewFieldSpec(webhook.FieldID, field.TypeString))
	)
	if id, ok := wc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := wc.mutation.CreatedAt(); ok {
		_spec.SetField(webhook.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := wc.mutation.UpdatedAt(); ok {
		_spec.SetField(webhook.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := wc.mutation.Name(); ok {
		_spec.SetField(webhook.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := wc.mutation.URL(); ok {
		_spec.SetField(webhook.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if value, ok := wc.mutation.Secret(); ok {
		_spec.SetField(webhook.FieldSecret, field.TypeString, value)
		_node.Secret = value
	}
	if value, ok := wc.mutation.Active(); ok {
		_spec.SetField(webhook.FieldActive, field.TypeBool, value)
		_node.Active = value
	}
	if value, ok := wc.mutation.EventTypes(); ok {
		_spec.SetField(webhook.FieldEventTypes, field.TypeJSON, value)
		_node.EventTypes = value
	}
	if value, ok := wc.mutation.Version(); ok {
		_spec.SetField(webhook.FieldVersion, field.TypeString, value)
		_node.Version = value
	}
	if value, ok := wc.mutation.RetryCount(); ok {
		_spec.SetField(webhook.FieldRetryCount, field.TypeInt, value)
		_node.RetryCount = value
	}
	if value, ok := wc.mutation.TimeoutMs(); ok {
		_spec.SetField(webhook.FieldTimeoutMs, field.TypeInt, value)
		_node.TimeoutMs = value
	}
	if value, ok := wc.mutation.Format(); ok {
		_spec.SetField(webhook.FieldFormat, field.TypeEnum, value)
		_node.Format = value
	}
	if value, ok := wc.mutation.Metadata(); ok {
		_spec.SetField(webhook.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if nodes := wc.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   webhook.OrganizationTable,
			Columns: []string{webhook.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OrganizationID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wc.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   webhook.EventsTable,
			Columns: []string{webhook.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(webhookevent.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// WebhookCreateBulk is the builder for creating many Webhook entities in bulk.
type WebhookCreateBulk struct {
	config
	err      error
	builders []*WebhookCreate
}

// Save creates the Webhook entities in the database.
func (wcb *WebhookCreateBulk) Save(ctx context.Context) ([]*Webhook, error) {
	if wcb.err != nil {
		return nil, wcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(wcb.builders))
	nodes := make([]*Webhook, len(wcb.builders))
	mutators := make([]Mutator, len(wcb.builders))
	for i := range wcb.builders {
		func(i int, root context.Context) {
			builder := wcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WebhookMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wcb *WebhookCreateBulk) SaveX(ctx context.Context) []*Webhook {
	v, err := wcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wcb *WebhookCreateBulk) Exec(ctx context.Context) error {
	_, err := wcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wcb *WebhookCreateBulk) ExecX(ctx context.Context) {
	if err := wcb.Exec(ctx); err != nil {
		panic(err)
	}
}
