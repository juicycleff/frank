// Copyright 2023-present XRaph LLC. All rights reserved.
// This source code is licensed under the XRaph LLC license found
// in the LICENSE file in the root directory of this source tree.
// Code generated by ent, DO NOT EDIT.

package apikeyactivity

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/rs/xid"
	"github.com/xraph/frank/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id xid.ID) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id xid.ID) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id xid.ID) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...xid.ID) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...xid.ID) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id xid.ID) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id xid.ID) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id xid.ID) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id xid.ID) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldLTE(FieldID, id))
}

// KeyID applies equality check predicate on the "key_id" field. It's identical to KeyIDEQ.
func KeyID(v xid.ID) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldEQ(FieldKeyID, v))
}

// Action applies equality check predicate on the "action" field. It's identical to ActionEQ.
func Action(v string) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldEQ(FieldAction, v))
}

// Endpoint applies equality check predicate on the "endpoint" field. It's identical to EndpointEQ.
func Endpoint(v string) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldEQ(FieldEndpoint, v))
}

// Method applies equality check predicate on the "method" field. It's identical to MethodEQ.
func Method(v string) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldEQ(FieldMethod, v))
}

// StatusCode applies equality check predicate on the "status_code" field. It's identical to StatusCodeEQ.
func StatusCode(v int) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldEQ(FieldStatusCode, v))
}

// ResponseTime applies equality check predicate on the "response_time" field. It's identical to ResponseTimeEQ.
func ResponseTime(v int) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldEQ(FieldResponseTime, v))
}

// IPAddress applies equality check predicate on the "ip_address" field. It's identical to IPAddressEQ.
func IPAddress(v string) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldEQ(FieldIPAddress, v))
}

// UserAgent applies equality check predicate on the "user_agent" field. It's identical to UserAgentEQ.
func UserAgent(v string) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldEQ(FieldUserAgent, v))
}

// Success applies equality check predicate on the "success" field. It's identical to SuccessEQ.
func Success(v bool) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldEQ(FieldSuccess, v))
}

// Error applies equality check predicate on the "error" field. It's identical to ErrorEQ.
func Error(v string) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldEQ(FieldError, v))
}

// Timestamp applies equality check predicate on the "timestamp" field. It's identical to TimestampEQ.
func Timestamp(v time.Time) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldEQ(FieldTimestamp, v))
}

// KeyIDEQ applies the EQ predicate on the "key_id" field.
func KeyIDEQ(v xid.ID) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldEQ(FieldKeyID, v))
}

// KeyIDNEQ applies the NEQ predicate on the "key_id" field.
func KeyIDNEQ(v xid.ID) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldNEQ(FieldKeyID, v))
}

// KeyIDIn applies the In predicate on the "key_id" field.
func KeyIDIn(vs ...xid.ID) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldIn(FieldKeyID, vs...))
}

// KeyIDNotIn applies the NotIn predicate on the "key_id" field.
func KeyIDNotIn(vs ...xid.ID) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldNotIn(FieldKeyID, vs...))
}

// KeyIDGT applies the GT predicate on the "key_id" field.
func KeyIDGT(v xid.ID) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldGT(FieldKeyID, v))
}

// KeyIDGTE applies the GTE predicate on the "key_id" field.
func KeyIDGTE(v xid.ID) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldGTE(FieldKeyID, v))
}

// KeyIDLT applies the LT predicate on the "key_id" field.
func KeyIDLT(v xid.ID) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldLT(FieldKeyID, v))
}

// KeyIDLTE applies the LTE predicate on the "key_id" field.
func KeyIDLTE(v xid.ID) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldLTE(FieldKeyID, v))
}

// KeyIDContains applies the Contains predicate on the "key_id" field.
func KeyIDContains(v xid.ID) predicate.ApiKeyActivity {
	vc := v.String()
	return predicate.ApiKeyActivity(sql.FieldContains(FieldKeyID, vc))
}

// KeyIDHasPrefix applies the HasPrefix predicate on the "key_id" field.
func KeyIDHasPrefix(v xid.ID) predicate.ApiKeyActivity {
	vc := v.String()
	return predicate.ApiKeyActivity(sql.FieldHasPrefix(FieldKeyID, vc))
}

// KeyIDHasSuffix applies the HasSuffix predicate on the "key_id" field.
func KeyIDHasSuffix(v xid.ID) predicate.ApiKeyActivity {
	vc := v.String()
	return predicate.ApiKeyActivity(sql.FieldHasSuffix(FieldKeyID, vc))
}

// KeyIDEqualFold applies the EqualFold predicate on the "key_id" field.
func KeyIDEqualFold(v xid.ID) predicate.ApiKeyActivity {
	vc := v.String()
	return predicate.ApiKeyActivity(sql.FieldEqualFold(FieldKeyID, vc))
}

// KeyIDContainsFold applies the ContainsFold predicate on the "key_id" field.
func KeyIDContainsFold(v xid.ID) predicate.ApiKeyActivity {
	vc := v.String()
	return predicate.ApiKeyActivity(sql.FieldContainsFold(FieldKeyID, vc))
}

// ActionEQ applies the EQ predicate on the "action" field.
func ActionEQ(v string) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldEQ(FieldAction, v))
}

// ActionNEQ applies the NEQ predicate on the "action" field.
func ActionNEQ(v string) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldNEQ(FieldAction, v))
}

// ActionIn applies the In predicate on the "action" field.
func ActionIn(vs ...string) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldIn(FieldAction, vs...))
}

// ActionNotIn applies the NotIn predicate on the "action" field.
func ActionNotIn(vs ...string) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldNotIn(FieldAction, vs...))
}

// ActionGT applies the GT predicate on the "action" field.
func ActionGT(v string) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldGT(FieldAction, v))
}

// ActionGTE applies the GTE predicate on the "action" field.
func ActionGTE(v string) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldGTE(FieldAction, v))
}

// ActionLT applies the LT predicate on the "action" field.
func ActionLT(v string) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldLT(FieldAction, v))
}

// ActionLTE applies the LTE predicate on the "action" field.
func ActionLTE(v string) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldLTE(FieldAction, v))
}

// ActionContains applies the Contains predicate on the "action" field.
func ActionContains(v string) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldContains(FieldAction, v))
}

// ActionHasPrefix applies the HasPrefix predicate on the "action" field.
func ActionHasPrefix(v string) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldHasPrefix(FieldAction, v))
}

// ActionHasSuffix applies the HasSuffix predicate on the "action" field.
func ActionHasSuffix(v string) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldHasSuffix(FieldAction, v))
}

// ActionEqualFold applies the EqualFold predicate on the "action" field.
func ActionEqualFold(v string) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldEqualFold(FieldAction, v))
}

// ActionContainsFold applies the ContainsFold predicate on the "action" field.
func ActionContainsFold(v string) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldContainsFold(FieldAction, v))
}

// EndpointEQ applies the EQ predicate on the "endpoint" field.
func EndpointEQ(v string) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldEQ(FieldEndpoint, v))
}

// EndpointNEQ applies the NEQ predicate on the "endpoint" field.
func EndpointNEQ(v string) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldNEQ(FieldEndpoint, v))
}

// EndpointIn applies the In predicate on the "endpoint" field.
func EndpointIn(vs ...string) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldIn(FieldEndpoint, vs...))
}

// EndpointNotIn applies the NotIn predicate on the "endpoint" field.
func EndpointNotIn(vs ...string) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldNotIn(FieldEndpoint, vs...))
}

// EndpointGT applies the GT predicate on the "endpoint" field.
func EndpointGT(v string) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldGT(FieldEndpoint, v))
}

// EndpointGTE applies the GTE predicate on the "endpoint" field.
func EndpointGTE(v string) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldGTE(FieldEndpoint, v))
}

// EndpointLT applies the LT predicate on the "endpoint" field.
func EndpointLT(v string) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldLT(FieldEndpoint, v))
}

// EndpointLTE applies the LTE predicate on the "endpoint" field.
func EndpointLTE(v string) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldLTE(FieldEndpoint, v))
}

// EndpointContains applies the Contains predicate on the "endpoint" field.
func EndpointContains(v string) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldContains(FieldEndpoint, v))
}

// EndpointHasPrefix applies the HasPrefix predicate on the "endpoint" field.
func EndpointHasPrefix(v string) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldHasPrefix(FieldEndpoint, v))
}

// EndpointHasSuffix applies the HasSuffix predicate on the "endpoint" field.
func EndpointHasSuffix(v string) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldHasSuffix(FieldEndpoint, v))
}

// EndpointIsNil applies the IsNil predicate on the "endpoint" field.
func EndpointIsNil() predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldIsNull(FieldEndpoint))
}

// EndpointNotNil applies the NotNil predicate on the "endpoint" field.
func EndpointNotNil() predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldNotNull(FieldEndpoint))
}

// EndpointEqualFold applies the EqualFold predicate on the "endpoint" field.
func EndpointEqualFold(v string) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldEqualFold(FieldEndpoint, v))
}

// EndpointContainsFold applies the ContainsFold predicate on the "endpoint" field.
func EndpointContainsFold(v string) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldContainsFold(FieldEndpoint, v))
}

// MethodEQ applies the EQ predicate on the "method" field.
func MethodEQ(v string) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldEQ(FieldMethod, v))
}

// MethodNEQ applies the NEQ predicate on the "method" field.
func MethodNEQ(v string) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldNEQ(FieldMethod, v))
}

// MethodIn applies the In predicate on the "method" field.
func MethodIn(vs ...string) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldIn(FieldMethod, vs...))
}

// MethodNotIn applies the NotIn predicate on the "method" field.
func MethodNotIn(vs ...string) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldNotIn(FieldMethod, vs...))
}

// MethodGT applies the GT predicate on the "method" field.
func MethodGT(v string) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldGT(FieldMethod, v))
}

// MethodGTE applies the GTE predicate on the "method" field.
func MethodGTE(v string) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldGTE(FieldMethod, v))
}

// MethodLT applies the LT predicate on the "method" field.
func MethodLT(v string) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldLT(FieldMethod, v))
}

// MethodLTE applies the LTE predicate on the "method" field.
func MethodLTE(v string) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldLTE(FieldMethod, v))
}

// MethodContains applies the Contains predicate on the "method" field.
func MethodContains(v string) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldContains(FieldMethod, v))
}

// MethodHasPrefix applies the HasPrefix predicate on the "method" field.
func MethodHasPrefix(v string) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldHasPrefix(FieldMethod, v))
}

// MethodHasSuffix applies the HasSuffix predicate on the "method" field.
func MethodHasSuffix(v string) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldHasSuffix(FieldMethod, v))
}

// MethodIsNil applies the IsNil predicate on the "method" field.
func MethodIsNil() predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldIsNull(FieldMethod))
}

// MethodNotNil applies the NotNil predicate on the "method" field.
func MethodNotNil() predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldNotNull(FieldMethod))
}

// MethodEqualFold applies the EqualFold predicate on the "method" field.
func MethodEqualFold(v string) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldEqualFold(FieldMethod, v))
}

// MethodContainsFold applies the ContainsFold predicate on the "method" field.
func MethodContainsFold(v string) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldContainsFold(FieldMethod, v))
}

// StatusCodeEQ applies the EQ predicate on the "status_code" field.
func StatusCodeEQ(v int) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldEQ(FieldStatusCode, v))
}

// StatusCodeNEQ applies the NEQ predicate on the "status_code" field.
func StatusCodeNEQ(v int) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldNEQ(FieldStatusCode, v))
}

// StatusCodeIn applies the In predicate on the "status_code" field.
func StatusCodeIn(vs ...int) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldIn(FieldStatusCode, vs...))
}

// StatusCodeNotIn applies the NotIn predicate on the "status_code" field.
func StatusCodeNotIn(vs ...int) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldNotIn(FieldStatusCode, vs...))
}

// StatusCodeGT applies the GT predicate on the "status_code" field.
func StatusCodeGT(v int) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldGT(FieldStatusCode, v))
}

// StatusCodeGTE applies the GTE predicate on the "status_code" field.
func StatusCodeGTE(v int) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldGTE(FieldStatusCode, v))
}

// StatusCodeLT applies the LT predicate on the "status_code" field.
func StatusCodeLT(v int) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldLT(FieldStatusCode, v))
}

// StatusCodeLTE applies the LTE predicate on the "status_code" field.
func StatusCodeLTE(v int) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldLTE(FieldStatusCode, v))
}

// StatusCodeIsNil applies the IsNil predicate on the "status_code" field.
func StatusCodeIsNil() predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldIsNull(FieldStatusCode))
}

// StatusCodeNotNil applies the NotNil predicate on the "status_code" field.
func StatusCodeNotNil() predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldNotNull(FieldStatusCode))
}

// ResponseTimeEQ applies the EQ predicate on the "response_time" field.
func ResponseTimeEQ(v int) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldEQ(FieldResponseTime, v))
}

// ResponseTimeNEQ applies the NEQ predicate on the "response_time" field.
func ResponseTimeNEQ(v int) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldNEQ(FieldResponseTime, v))
}

// ResponseTimeIn applies the In predicate on the "response_time" field.
func ResponseTimeIn(vs ...int) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldIn(FieldResponseTime, vs...))
}

// ResponseTimeNotIn applies the NotIn predicate on the "response_time" field.
func ResponseTimeNotIn(vs ...int) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldNotIn(FieldResponseTime, vs...))
}

// ResponseTimeGT applies the GT predicate on the "response_time" field.
func ResponseTimeGT(v int) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldGT(FieldResponseTime, v))
}

// ResponseTimeGTE applies the GTE predicate on the "response_time" field.
func ResponseTimeGTE(v int) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldGTE(FieldResponseTime, v))
}

// ResponseTimeLT applies the LT predicate on the "response_time" field.
func ResponseTimeLT(v int) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldLT(FieldResponseTime, v))
}

// ResponseTimeLTE applies the LTE predicate on the "response_time" field.
func ResponseTimeLTE(v int) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldLTE(FieldResponseTime, v))
}

// ResponseTimeIsNil applies the IsNil predicate on the "response_time" field.
func ResponseTimeIsNil() predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldIsNull(FieldResponseTime))
}

// ResponseTimeNotNil applies the NotNil predicate on the "response_time" field.
func ResponseTimeNotNil() predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldNotNull(FieldResponseTime))
}

// IPAddressEQ applies the EQ predicate on the "ip_address" field.
func IPAddressEQ(v string) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldEQ(FieldIPAddress, v))
}

// IPAddressNEQ applies the NEQ predicate on the "ip_address" field.
func IPAddressNEQ(v string) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldNEQ(FieldIPAddress, v))
}

// IPAddressIn applies the In predicate on the "ip_address" field.
func IPAddressIn(vs ...string) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldIn(FieldIPAddress, vs...))
}

// IPAddressNotIn applies the NotIn predicate on the "ip_address" field.
func IPAddressNotIn(vs ...string) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldNotIn(FieldIPAddress, vs...))
}

// IPAddressGT applies the GT predicate on the "ip_address" field.
func IPAddressGT(v string) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldGT(FieldIPAddress, v))
}

// IPAddressGTE applies the GTE predicate on the "ip_address" field.
func IPAddressGTE(v string) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldGTE(FieldIPAddress, v))
}

// IPAddressLT applies the LT predicate on the "ip_address" field.
func IPAddressLT(v string) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldLT(FieldIPAddress, v))
}

// IPAddressLTE applies the LTE predicate on the "ip_address" field.
func IPAddressLTE(v string) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldLTE(FieldIPAddress, v))
}

// IPAddressContains applies the Contains predicate on the "ip_address" field.
func IPAddressContains(v string) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldContains(FieldIPAddress, v))
}

// IPAddressHasPrefix applies the HasPrefix predicate on the "ip_address" field.
func IPAddressHasPrefix(v string) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldHasPrefix(FieldIPAddress, v))
}

// IPAddressHasSuffix applies the HasSuffix predicate on the "ip_address" field.
func IPAddressHasSuffix(v string) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldHasSuffix(FieldIPAddress, v))
}

// IPAddressIsNil applies the IsNil predicate on the "ip_address" field.
func IPAddressIsNil() predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldIsNull(FieldIPAddress))
}

// IPAddressNotNil applies the NotNil predicate on the "ip_address" field.
func IPAddressNotNil() predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldNotNull(FieldIPAddress))
}

// IPAddressEqualFold applies the EqualFold predicate on the "ip_address" field.
func IPAddressEqualFold(v string) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldEqualFold(FieldIPAddress, v))
}

// IPAddressContainsFold applies the ContainsFold predicate on the "ip_address" field.
func IPAddressContainsFold(v string) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldContainsFold(FieldIPAddress, v))
}

// UserAgentEQ applies the EQ predicate on the "user_agent" field.
func UserAgentEQ(v string) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldEQ(FieldUserAgent, v))
}

// UserAgentNEQ applies the NEQ predicate on the "user_agent" field.
func UserAgentNEQ(v string) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldNEQ(FieldUserAgent, v))
}

// UserAgentIn applies the In predicate on the "user_agent" field.
func UserAgentIn(vs ...string) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldIn(FieldUserAgent, vs...))
}

// UserAgentNotIn applies the NotIn predicate on the "user_agent" field.
func UserAgentNotIn(vs ...string) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldNotIn(FieldUserAgent, vs...))
}

// UserAgentGT applies the GT predicate on the "user_agent" field.
func UserAgentGT(v string) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldGT(FieldUserAgent, v))
}

// UserAgentGTE applies the GTE predicate on the "user_agent" field.
func UserAgentGTE(v string) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldGTE(FieldUserAgent, v))
}

// UserAgentLT applies the LT predicate on the "user_agent" field.
func UserAgentLT(v string) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldLT(FieldUserAgent, v))
}

// UserAgentLTE applies the LTE predicate on the "user_agent" field.
func UserAgentLTE(v string) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldLTE(FieldUserAgent, v))
}

// UserAgentContains applies the Contains predicate on the "user_agent" field.
func UserAgentContains(v string) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldContains(FieldUserAgent, v))
}

// UserAgentHasPrefix applies the HasPrefix predicate on the "user_agent" field.
func UserAgentHasPrefix(v string) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldHasPrefix(FieldUserAgent, v))
}

// UserAgentHasSuffix applies the HasSuffix predicate on the "user_agent" field.
func UserAgentHasSuffix(v string) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldHasSuffix(FieldUserAgent, v))
}

// UserAgentIsNil applies the IsNil predicate on the "user_agent" field.
func UserAgentIsNil() predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldIsNull(FieldUserAgent))
}

// UserAgentNotNil applies the NotNil predicate on the "user_agent" field.
func UserAgentNotNil() predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldNotNull(FieldUserAgent))
}

// UserAgentEqualFold applies the EqualFold predicate on the "user_agent" field.
func UserAgentEqualFold(v string) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldEqualFold(FieldUserAgent, v))
}

// UserAgentContainsFold applies the ContainsFold predicate on the "user_agent" field.
func UserAgentContainsFold(v string) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldContainsFold(FieldUserAgent, v))
}

// SuccessEQ applies the EQ predicate on the "success" field.
func SuccessEQ(v bool) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldEQ(FieldSuccess, v))
}

// SuccessNEQ applies the NEQ predicate on the "success" field.
func SuccessNEQ(v bool) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldNEQ(FieldSuccess, v))
}

// ErrorEQ applies the EQ predicate on the "error" field.
func ErrorEQ(v string) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldEQ(FieldError, v))
}

// ErrorNEQ applies the NEQ predicate on the "error" field.
func ErrorNEQ(v string) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldNEQ(FieldError, v))
}

// ErrorIn applies the In predicate on the "error" field.
func ErrorIn(vs ...string) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldIn(FieldError, vs...))
}

// ErrorNotIn applies the NotIn predicate on the "error" field.
func ErrorNotIn(vs ...string) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldNotIn(FieldError, vs...))
}

// ErrorGT applies the GT predicate on the "error" field.
func ErrorGT(v string) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldGT(FieldError, v))
}

// ErrorGTE applies the GTE predicate on the "error" field.
func ErrorGTE(v string) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldGTE(FieldError, v))
}

// ErrorLT applies the LT predicate on the "error" field.
func ErrorLT(v string) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldLT(FieldError, v))
}

// ErrorLTE applies the LTE predicate on the "error" field.
func ErrorLTE(v string) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldLTE(FieldError, v))
}

// ErrorContains applies the Contains predicate on the "error" field.
func ErrorContains(v string) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldContains(FieldError, v))
}

// ErrorHasPrefix applies the HasPrefix predicate on the "error" field.
func ErrorHasPrefix(v string) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldHasPrefix(FieldError, v))
}

// ErrorHasSuffix applies the HasSuffix predicate on the "error" field.
func ErrorHasSuffix(v string) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldHasSuffix(FieldError, v))
}

// ErrorIsNil applies the IsNil predicate on the "error" field.
func ErrorIsNil() predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldIsNull(FieldError))
}

// ErrorNotNil applies the NotNil predicate on the "error" field.
func ErrorNotNil() predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldNotNull(FieldError))
}

// ErrorEqualFold applies the EqualFold predicate on the "error" field.
func ErrorEqualFold(v string) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldEqualFold(FieldError, v))
}

// ErrorContainsFold applies the ContainsFold predicate on the "error" field.
func ErrorContainsFold(v string) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldContainsFold(FieldError, v))
}

// TimestampEQ applies the EQ predicate on the "timestamp" field.
func TimestampEQ(v time.Time) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldEQ(FieldTimestamp, v))
}

// TimestampNEQ applies the NEQ predicate on the "timestamp" field.
func TimestampNEQ(v time.Time) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldNEQ(FieldTimestamp, v))
}

// TimestampIn applies the In predicate on the "timestamp" field.
func TimestampIn(vs ...time.Time) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldIn(FieldTimestamp, vs...))
}

// TimestampNotIn applies the NotIn predicate on the "timestamp" field.
func TimestampNotIn(vs ...time.Time) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldNotIn(FieldTimestamp, vs...))
}

// TimestampGT applies the GT predicate on the "timestamp" field.
func TimestampGT(v time.Time) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldGT(FieldTimestamp, v))
}

// TimestampGTE applies the GTE predicate on the "timestamp" field.
func TimestampGTE(v time.Time) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldGTE(FieldTimestamp, v))
}

// TimestampLT applies the LT predicate on the "timestamp" field.
func TimestampLT(v time.Time) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldLT(FieldTimestamp, v))
}

// TimestampLTE applies the LTE predicate on the "timestamp" field.
func TimestampLTE(v time.Time) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldLTE(FieldTimestamp, v))
}

// MetadataIsNil applies the IsNil predicate on the "metadata" field.
func MetadataIsNil() predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldIsNull(FieldMetadata))
}

// MetadataNotNil applies the NotNil predicate on the "metadata" field.
func MetadataNotNil() predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.FieldNotNull(FieldMetadata))
}

// HasKey applies the HasEdge predicate on the "key" edge.
func HasKey() predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, KeyTable, KeyColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasKeyWith applies the HasEdge predicate on the "key" edge with a given conditions (other predicates).
func HasKeyWith(preds ...predicate.ApiKey) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(func(s *sql.Selector) {
		step := newKeyStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ApiKeyActivity) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ApiKeyActivity) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ApiKeyActivity) predicate.ApiKeyActivity {
	return predicate.ApiKeyActivity(sql.NotPredicates(p))
}
