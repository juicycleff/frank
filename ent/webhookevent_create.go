// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/juicycleff/frank/ent/webhook"
	"github.com/juicycleff/frank/ent/webhookevent"
)

// WebhookEventCreate is the builder for creating a WebhookEvent entity.
type WebhookEventCreate struct {
	config
	mutation *WebhookEventMutation
	hooks    []Hook
}

// SetWebhookID sets the "webhook_id" field.
func (wec *WebhookEventCreate) SetWebhookID(s string) *WebhookEventCreate {
	wec.mutation.SetWebhookID(s)
	return wec
}

// SetEventType sets the "event_type" field.
func (wec *WebhookEventCreate) SetEventType(s string) *WebhookEventCreate {
	wec.mutation.SetEventType(s)
	return wec
}

// SetHeaders sets the "headers" field.
func (wec *WebhookEventCreate) SetHeaders(m map[string]string) *WebhookEventCreate {
	wec.mutation.SetHeaders(m)
	return wec
}

// SetPayload sets the "payload" field.
func (wec *WebhookEventCreate) SetPayload(m map[string]interface{}) *WebhookEventCreate {
	wec.mutation.SetPayload(m)
	return wec
}

// SetDelivered sets the "delivered" field.
func (wec *WebhookEventCreate) SetDelivered(b bool) *WebhookEventCreate {
	wec.mutation.SetDelivered(b)
	return wec
}

// SetNillableDelivered sets the "delivered" field if the given value is not nil.
func (wec *WebhookEventCreate) SetNillableDelivered(b *bool) *WebhookEventCreate {
	if b != nil {
		wec.SetDelivered(*b)
	}
	return wec
}

// SetDeliveredAt sets the "delivered_at" field.
func (wec *WebhookEventCreate) SetDeliveredAt(t time.Time) *WebhookEventCreate {
	wec.mutation.SetDeliveredAt(t)
	return wec
}

// SetNillableDeliveredAt sets the "delivered_at" field if the given value is not nil.
func (wec *WebhookEventCreate) SetNillableDeliveredAt(t *time.Time) *WebhookEventCreate {
	if t != nil {
		wec.SetDeliveredAt(*t)
	}
	return wec
}

// SetAttempts sets the "attempts" field.
func (wec *WebhookEventCreate) SetAttempts(i int) *WebhookEventCreate {
	wec.mutation.SetAttempts(i)
	return wec
}

// SetNillableAttempts sets the "attempts" field if the given value is not nil.
func (wec *WebhookEventCreate) SetNillableAttempts(i *int) *WebhookEventCreate {
	if i != nil {
		wec.SetAttempts(*i)
	}
	return wec
}

// SetNextRetry sets the "next_retry" field.
func (wec *WebhookEventCreate) SetNextRetry(t time.Time) *WebhookEventCreate {
	wec.mutation.SetNextRetry(t)
	return wec
}

// SetNillableNextRetry sets the "next_retry" field if the given value is not nil.
func (wec *WebhookEventCreate) SetNillableNextRetry(t *time.Time) *WebhookEventCreate {
	if t != nil {
		wec.SetNextRetry(*t)
	}
	return wec
}

// SetStatusCode sets the "status_code" field.
func (wec *WebhookEventCreate) SetStatusCode(i int) *WebhookEventCreate {
	wec.mutation.SetStatusCode(i)
	return wec
}

// SetNillableStatusCode sets the "status_code" field if the given value is not nil.
func (wec *WebhookEventCreate) SetNillableStatusCode(i *int) *WebhookEventCreate {
	if i != nil {
		wec.SetStatusCode(*i)
	}
	return wec
}

// SetResponseBody sets the "response_body" field.
func (wec *WebhookEventCreate) SetResponseBody(s string) *WebhookEventCreate {
	wec.mutation.SetResponseBody(s)
	return wec
}

// SetNillableResponseBody sets the "response_body" field if the given value is not nil.
func (wec *WebhookEventCreate) SetNillableResponseBody(s *string) *WebhookEventCreate {
	if s != nil {
		wec.SetResponseBody(*s)
	}
	return wec
}

// SetError sets the "error" field.
func (wec *WebhookEventCreate) SetError(s string) *WebhookEventCreate {
	wec.mutation.SetError(s)
	return wec
}

// SetNillableError sets the "error" field if the given value is not nil.
func (wec *WebhookEventCreate) SetNillableError(s *string) *WebhookEventCreate {
	if s != nil {
		wec.SetError(*s)
	}
	return wec
}

// SetCreatedAt sets the "created_at" field.
func (wec *WebhookEventCreate) SetCreatedAt(t time.Time) *WebhookEventCreate {
	wec.mutation.SetCreatedAt(t)
	return wec
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (wec *WebhookEventCreate) SetNillableCreatedAt(t *time.Time) *WebhookEventCreate {
	if t != nil {
		wec.SetCreatedAt(*t)
	}
	return wec
}

// SetUpdatedAt sets the "updated_at" field.
func (wec *WebhookEventCreate) SetUpdatedAt(t time.Time) *WebhookEventCreate {
	wec.mutation.SetUpdatedAt(t)
	return wec
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (wec *WebhookEventCreate) SetNillableUpdatedAt(t *time.Time) *WebhookEventCreate {
	if t != nil {
		wec.SetUpdatedAt(*t)
	}
	return wec
}

// SetID sets the "id" field.
func (wec *WebhookEventCreate) SetID(s string) *WebhookEventCreate {
	wec.mutation.SetID(s)
	return wec
}

// SetWebhook sets the "webhook" edge to the Webhook entity.
func (wec *WebhookEventCreate) SetWebhook(w *Webhook) *WebhookEventCreate {
	return wec.SetWebhookID(w.ID)
}

// Mutation returns the WebhookEventMutation object of the builder.
func (wec *WebhookEventCreate) Mutation() *WebhookEventMutation {
	return wec.mutation
}

// Save creates the WebhookEvent in the database.
func (wec *WebhookEventCreate) Save(ctx context.Context) (*WebhookEvent, error) {
	wec.defaults()
	return withHooks(ctx, wec.sqlSave, wec.mutation, wec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (wec *WebhookEventCreate) SaveX(ctx context.Context) *WebhookEvent {
	v, err := wec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wec *WebhookEventCreate) Exec(ctx context.Context) error {
	_, err := wec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wec *WebhookEventCreate) ExecX(ctx context.Context) {
	if err := wec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wec *WebhookEventCreate) defaults() {
	if _, ok := wec.mutation.Delivered(); !ok {
		v := webhookevent.DefaultDelivered
		wec.mutation.SetDelivered(v)
	}
	if _, ok := wec.mutation.Attempts(); !ok {
		v := webhookevent.DefaultAttempts
		wec.mutation.SetAttempts(v)
	}
	if _, ok := wec.mutation.CreatedAt(); !ok {
		v := webhookevent.DefaultCreatedAt()
		wec.mutation.SetCreatedAt(v)
	}
	if _, ok := wec.mutation.UpdatedAt(); !ok {
		v := webhookevent.DefaultUpdatedAt()
		wec.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wec *WebhookEventCreate) check() error {
	if _, ok := wec.mutation.WebhookID(); !ok {
		return &ValidationError{Name: "webhook_id", err: errors.New(`ent: missing required field "WebhookEvent.webhook_id"`)}
	}
	if v, ok := wec.mutation.WebhookID(); ok {
		if err := webhookevent.WebhookIDValidator(v); err != nil {
			return &ValidationError{Name: "webhook_id", err: fmt.Errorf(`ent: validator failed for field "WebhookEvent.webhook_id": %w`, err)}
		}
	}
	if _, ok := wec.mutation.EventType(); !ok {
		return &ValidationError{Name: "event_type", err: errors.New(`ent: missing required field "WebhookEvent.event_type"`)}
	}
	if v, ok := wec.mutation.EventType(); ok {
		if err := webhookevent.EventTypeValidator(v); err != nil {
			return &ValidationError{Name: "event_type", err: fmt.Errorf(`ent: validator failed for field "WebhookEvent.event_type": %w`, err)}
		}
	}
	if _, ok := wec.mutation.Delivered(); !ok {
		return &ValidationError{Name: "delivered", err: errors.New(`ent: missing required field "WebhookEvent.delivered"`)}
	}
	if _, ok := wec.mutation.Attempts(); !ok {
		return &ValidationError{Name: "attempts", err: errors.New(`ent: missing required field "WebhookEvent.attempts"`)}
	}
	if _, ok := wec.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "WebhookEvent.created_at"`)}
	}
	if _, ok := wec.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "WebhookEvent.updated_at"`)}
	}
	if len(wec.mutation.WebhookIDs()) == 0 {
		return &ValidationError{Name: "webhook", err: errors.New(`ent: missing required edge "WebhookEvent.webhook"`)}
	}
	return nil
}

func (wec *WebhookEventCreate) sqlSave(ctx context.Context) (*WebhookEvent, error) {
	if err := wec.check(); err != nil {
		return nil, err
	}
	_node, _spec := wec.createSpec()
	if err := sqlgraph.CreateNode(ctx, wec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected WebhookEvent.ID type: %T", _spec.ID.Value)
		}
	}
	wec.mutation.id = &_node.ID
	wec.mutation.done = true
	return _node, nil
}

func (wec *WebhookEventCreate) createSpec() (*WebhookEvent, *sqlgraph.CreateSpec) {
	var (
		_node = &WebhookEvent{config: wec.config}
		_spec = sqlgraph.NewCreateSpec(webhookevent.Table, sqlgraph.NewFieldSpec(webhookevent.FieldID, field.TypeString))
	)
	if id, ok := wec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := wec.mutation.EventType(); ok {
		_spec.SetField(webhookevent.FieldEventType, field.TypeString, value)
		_node.EventType = value
	}
	if value, ok := wec.mutation.Headers(); ok {
		_spec.SetField(webhookevent.FieldHeaders, field.TypeJSON, value)
		_node.Headers = value
	}
	if value, ok := wec.mutation.Payload(); ok {
		_spec.SetField(webhookevent.FieldPayload, field.TypeJSON, value)
		_node.Payload = value
	}
	if value, ok := wec.mutation.Delivered(); ok {
		_spec.SetField(webhookevent.FieldDelivered, field.TypeBool, value)
		_node.Delivered = value
	}
	if value, ok := wec.mutation.DeliveredAt(); ok {
		_spec.SetField(webhookevent.FieldDeliveredAt, field.TypeTime, value)
		_node.DeliveredAt = &value
	}
	if value, ok := wec.mutation.Attempts(); ok {
		_spec.SetField(webhookevent.FieldAttempts, field.TypeInt, value)
		_node.Attempts = value
	}
	if value, ok := wec.mutation.NextRetry(); ok {
		_spec.SetField(webhookevent.FieldNextRetry, field.TypeTime, value)
		_node.NextRetry = &value
	}
	if value, ok := wec.mutation.StatusCode(); ok {
		_spec.SetField(webhookevent.FieldStatusCode, field.TypeInt, value)
		_node.StatusCode = &value
	}
	if value, ok := wec.mutation.ResponseBody(); ok {
		_spec.SetField(webhookevent.FieldResponseBody, field.TypeString, value)
		_node.ResponseBody = value
	}
	if value, ok := wec.mutation.Error(); ok {
		_spec.SetField(webhookevent.FieldError, field.TypeString, value)
		_node.Error = value
	}
	if value, ok := wec.mutation.CreatedAt(); ok {
		_spec.SetField(webhookevent.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := wec.mutation.UpdatedAt(); ok {
		_spec.SetField(webhookevent.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := wec.mutation.WebhookIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   webhookevent.WebhookTable,
			Columns: []string{webhookevent.WebhookColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(webhook.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.WebhookID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// WebhookEventCreateBulk is the builder for creating many WebhookEvent entities in bulk.
type WebhookEventCreateBulk struct {
	config
	err      error
	builders []*WebhookEventCreate
}

// Save creates the WebhookEvent entities in the database.
func (wecb *WebhookEventCreateBulk) Save(ctx context.Context) ([]*WebhookEvent, error) {
	if wecb.err != nil {
		return nil, wecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(wecb.builders))
	nodes := make([]*WebhookEvent, len(wecb.builders))
	mutators := make([]Mutator, len(wecb.builders))
	for i := range wecb.builders {
		func(i int, root context.Context) {
			builder := wecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WebhookEventMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wecb *WebhookEventCreateBulk) SaveX(ctx context.Context) []*WebhookEvent {
	v, err := wecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wecb *WebhookEventCreateBulk) Exec(ctx context.Context) error {
	_, err := wecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wecb *WebhookEventCreateBulk) ExecX(ctx context.Context) {
	if err := wecb.Exec(ctx); err != nil {
		panic(err)
	}
}
