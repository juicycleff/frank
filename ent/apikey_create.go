// Copyright 2023-present XRaph LLC. All rights reserved.
// This source code is licensed under the XRaph LLC license found
// in the LICENSE file in the root directory of this source tree.
// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/juicycleff/frank/ent/apikey"
	"github.com/juicycleff/frank/ent/organization"
	"github.com/juicycleff/frank/ent/user"
	"github.com/rs/xid"
)

// ApiKeyCreate is the builder for creating a ApiKey entity.
type ApiKeyCreate struct {
	config
	mutation *ApiKeyMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (akc *ApiKeyCreate) SetCreatedAt(t time.Time) *ApiKeyCreate {
	akc.mutation.SetCreatedAt(t)
	return akc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (akc *ApiKeyCreate) SetNillableCreatedAt(t *time.Time) *ApiKeyCreate {
	if t != nil {
		akc.SetCreatedAt(*t)
	}
	return akc
}

// SetUpdatedAt sets the "updated_at" field.
func (akc *ApiKeyCreate) SetUpdatedAt(t time.Time) *ApiKeyCreate {
	akc.mutation.SetUpdatedAt(t)
	return akc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (akc *ApiKeyCreate) SetNillableUpdatedAt(t *time.Time) *ApiKeyCreate {
	if t != nil {
		akc.SetUpdatedAt(*t)
	}
	return akc
}

// SetDeletedAt sets the "deleted_at" field.
func (akc *ApiKeyCreate) SetDeletedAt(t time.Time) *ApiKeyCreate {
	akc.mutation.SetDeletedAt(t)
	return akc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (akc *ApiKeyCreate) SetNillableDeletedAt(t *time.Time) *ApiKeyCreate {
	if t != nil {
		akc.SetDeletedAt(*t)
	}
	return akc
}

// SetName sets the "name" field.
func (akc *ApiKeyCreate) SetName(s string) *ApiKeyCreate {
	akc.mutation.SetName(s)
	return akc
}

// SetKey sets the "key" field.
func (akc *ApiKeyCreate) SetKey(s string) *ApiKeyCreate {
	akc.mutation.SetKey(s)
	return akc
}

// SetHashedKey sets the "hashed_key" field.
func (akc *ApiKeyCreate) SetHashedKey(s string) *ApiKeyCreate {
	akc.mutation.SetHashedKey(s)
	return akc
}

// SetUserID sets the "user_id" field.
func (akc *ApiKeyCreate) SetUserID(x xid.ID) *ApiKeyCreate {
	akc.mutation.SetUserID(x)
	return akc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (akc *ApiKeyCreate) SetNillableUserID(x *xid.ID) *ApiKeyCreate {
	if x != nil {
		akc.SetUserID(*x)
	}
	return akc
}

// SetOrganizationID sets the "organization_id" field.
func (akc *ApiKeyCreate) SetOrganizationID(x xid.ID) *ApiKeyCreate {
	akc.mutation.SetOrganizationID(x)
	return akc
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (akc *ApiKeyCreate) SetNillableOrganizationID(x *xid.ID) *ApiKeyCreate {
	if x != nil {
		akc.SetOrganizationID(*x)
	}
	return akc
}

// SetType sets the "type" field.
func (akc *ApiKeyCreate) SetType(s string) *ApiKeyCreate {
	akc.mutation.SetType(s)
	return akc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (akc *ApiKeyCreate) SetNillableType(s *string) *ApiKeyCreate {
	if s != nil {
		akc.SetType(*s)
	}
	return akc
}

// SetActive sets the "active" field.
func (akc *ApiKeyCreate) SetActive(b bool) *ApiKeyCreate {
	akc.mutation.SetActive(b)
	return akc
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (akc *ApiKeyCreate) SetNillableActive(b *bool) *ApiKeyCreate {
	if b != nil {
		akc.SetActive(*b)
	}
	return akc
}

// SetPermissions sets the "permissions" field.
func (akc *ApiKeyCreate) SetPermissions(s []string) *ApiKeyCreate {
	akc.mutation.SetPermissions(s)
	return akc
}

// SetScopes sets the "scopes" field.
func (akc *ApiKeyCreate) SetScopes(s []string) *ApiKeyCreate {
	akc.mutation.SetScopes(s)
	return akc
}

// SetMetadata sets the "metadata" field.
func (akc *ApiKeyCreate) SetMetadata(m map[string]interface{}) *ApiKeyCreate {
	akc.mutation.SetMetadata(m)
	return akc
}

// SetLastUsed sets the "last_used" field.
func (akc *ApiKeyCreate) SetLastUsed(t time.Time) *ApiKeyCreate {
	akc.mutation.SetLastUsed(t)
	return akc
}

// SetNillableLastUsed sets the "last_used" field if the given value is not nil.
func (akc *ApiKeyCreate) SetNillableLastUsed(t *time.Time) *ApiKeyCreate {
	if t != nil {
		akc.SetLastUsed(*t)
	}
	return akc
}

// SetExpiresAt sets the "expires_at" field.
func (akc *ApiKeyCreate) SetExpiresAt(t time.Time) *ApiKeyCreate {
	akc.mutation.SetExpiresAt(t)
	return akc
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (akc *ApiKeyCreate) SetNillableExpiresAt(t *time.Time) *ApiKeyCreate {
	if t != nil {
		akc.SetExpiresAt(*t)
	}
	return akc
}

// SetID sets the "id" field.
func (akc *ApiKeyCreate) SetID(x xid.ID) *ApiKeyCreate {
	akc.mutation.SetID(x)
	return akc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (akc *ApiKeyCreate) SetNillableID(x *xid.ID) *ApiKeyCreate {
	if x != nil {
		akc.SetID(*x)
	}
	return akc
}

// SetUser sets the "user" edge to the User entity.
func (akc *ApiKeyCreate) SetUser(u *User) *ApiKeyCreate {
	return akc.SetUserID(u.ID)
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (akc *ApiKeyCreate) SetOrganization(o *Organization) *ApiKeyCreate {
	return akc.SetOrganizationID(o.ID)
}

// Mutation returns the ApiKeyMutation object of the builder.
func (akc *ApiKeyCreate) Mutation() *ApiKeyMutation {
	return akc.mutation
}

// Save creates the ApiKey in the database.
func (akc *ApiKeyCreate) Save(ctx context.Context) (*ApiKey, error) {
	akc.defaults()
	return withHooks(ctx, akc.sqlSave, akc.mutation, akc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (akc *ApiKeyCreate) SaveX(ctx context.Context) *ApiKey {
	v, err := akc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (akc *ApiKeyCreate) Exec(ctx context.Context) error {
	_, err := akc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (akc *ApiKeyCreate) ExecX(ctx context.Context) {
	if err := akc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (akc *ApiKeyCreate) defaults() {
	if _, ok := akc.mutation.CreatedAt(); !ok {
		v := apikey.DefaultCreatedAt()
		akc.mutation.SetCreatedAt(v)
	}
	if _, ok := akc.mutation.UpdatedAt(); !ok {
		v := apikey.DefaultUpdatedAt()
		akc.mutation.SetUpdatedAt(v)
	}
	if _, ok := akc.mutation.GetType(); !ok {
		v := apikey.DefaultType
		akc.mutation.SetType(v)
	}
	if _, ok := akc.mutation.Active(); !ok {
		v := apikey.DefaultActive
		akc.mutation.SetActive(v)
	}
	if _, ok := akc.mutation.ID(); !ok {
		v := apikey.DefaultID()
		akc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (akc *ApiKeyCreate) check() error {
	if _, ok := akc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ApiKey.created_at"`)}
	}
	if _, ok := akc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ApiKey.updated_at"`)}
	}
	if _, ok := akc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "ApiKey.name"`)}
	}
	if v, ok := akc.mutation.Name(); ok {
		if err := apikey.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "ApiKey.name": %w`, err)}
		}
	}
	if _, ok := akc.mutation.Key(); !ok {
		return &ValidationError{Name: "key", err: errors.New(`ent: missing required field "ApiKey.key"`)}
	}
	if _, ok := akc.mutation.HashedKey(); !ok {
		return &ValidationError{Name: "hashed_key", err: errors.New(`ent: missing required field "ApiKey.hashed_key"`)}
	}
	if v, ok := akc.mutation.HashedKey(); ok {
		if err := apikey.HashedKeyValidator(v); err != nil {
			return &ValidationError{Name: "hashed_key", err: fmt.Errorf(`ent: validator failed for field "ApiKey.hashed_key": %w`, err)}
		}
	}
	if _, ok := akc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "ApiKey.type"`)}
	}
	if _, ok := akc.mutation.Active(); !ok {
		return &ValidationError{Name: "active", err: errors.New(`ent: missing required field "ApiKey.active"`)}
	}
	return nil
}

func (akc *ApiKeyCreate) sqlSave(ctx context.Context) (*ApiKey, error) {
	if err := akc.check(); err != nil {
		return nil, err
	}
	_node, _spec := akc.createSpec()
	if err := sqlgraph.CreateNode(ctx, akc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*xid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	akc.mutation.id = &_node.ID
	akc.mutation.done = true
	return _node, nil
}

func (akc *ApiKeyCreate) createSpec() (*ApiKey, *sqlgraph.CreateSpec) {
	var (
		_node = &ApiKey{config: akc.config}
		_spec = sqlgraph.NewCreateSpec(apikey.Table, sqlgraph.NewFieldSpec(apikey.FieldID, field.TypeString))
	)
	_spec.OnConflict = akc.conflict
	if id, ok := akc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := akc.mutation.CreatedAt(); ok {
		_spec.SetField(apikey.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := akc.mutation.UpdatedAt(); ok {
		_spec.SetField(apikey.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := akc.mutation.DeletedAt(); ok {
		_spec.SetField(apikey.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := akc.mutation.Name(); ok {
		_spec.SetField(apikey.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := akc.mutation.Key(); ok {
		_spec.SetField(apikey.FieldKey, field.TypeString, value)
		_node.Key = value
	}
	if value, ok := akc.mutation.HashedKey(); ok {
		_spec.SetField(apikey.FieldHashedKey, field.TypeString, value)
		_node.HashedKey = value
	}
	if value, ok := akc.mutation.GetType(); ok {
		_spec.SetField(apikey.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := akc.mutation.Active(); ok {
		_spec.SetField(apikey.FieldActive, field.TypeBool, value)
		_node.Active = value
	}
	if value, ok := akc.mutation.Permissions(); ok {
		_spec.SetField(apikey.FieldPermissions, field.TypeJSON, value)
		_node.Permissions = value
	}
	if value, ok := akc.mutation.Scopes(); ok {
		_spec.SetField(apikey.FieldScopes, field.TypeJSON, value)
		_node.Scopes = value
	}
	if value, ok := akc.mutation.Metadata(); ok {
		_spec.SetField(apikey.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if value, ok := akc.mutation.LastUsed(); ok {
		_spec.SetField(apikey.FieldLastUsed, field.TypeTime, value)
		_node.LastUsed = &value
	}
	if value, ok := akc.mutation.ExpiresAt(); ok {
		_spec.SetField(apikey.FieldExpiresAt, field.TypeTime, value)
		_node.ExpiresAt = &value
	}
	if nodes := akc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   apikey.UserTable,
			Columns: []string{apikey.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := akc.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   apikey.OrganizationTable,
			Columns: []string{apikey.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OrganizationID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ApiKey.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ApiKeyUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (akc *ApiKeyCreate) OnConflict(opts ...sql.ConflictOption) *ApiKeyUpsertOne {
	akc.conflict = opts
	return &ApiKeyUpsertOne{
		create: akc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ApiKey.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (akc *ApiKeyCreate) OnConflictColumns(columns ...string) *ApiKeyUpsertOne {
	akc.conflict = append(akc.conflict, sql.ConflictColumns(columns...))
	return &ApiKeyUpsertOne{
		create: akc,
	}
}

type (
	// ApiKeyUpsertOne is the builder for "upsert"-ing
	//  one ApiKey node.
	ApiKeyUpsertOne struct {
		create *ApiKeyCreate
	}

	// ApiKeyUpsert is the "OnConflict" setter.
	ApiKeyUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *ApiKeyUpsert) SetUpdatedAt(v time.Time) *ApiKeyUpsert {
	u.Set(apikey.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ApiKeyUpsert) UpdateUpdatedAt() *ApiKeyUpsert {
	u.SetExcluded(apikey.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ApiKeyUpsert) SetDeletedAt(v time.Time) *ApiKeyUpsert {
	u.Set(apikey.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ApiKeyUpsert) UpdateDeletedAt() *ApiKeyUpsert {
	u.SetExcluded(apikey.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ApiKeyUpsert) ClearDeletedAt() *ApiKeyUpsert {
	u.SetNull(apikey.FieldDeletedAt)
	return u
}

// SetName sets the "name" field.
func (u *ApiKeyUpsert) SetName(v string) *ApiKeyUpsert {
	u.Set(apikey.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ApiKeyUpsert) UpdateName() *ApiKeyUpsert {
	u.SetExcluded(apikey.FieldName)
	return u
}

// SetKey sets the "key" field.
func (u *ApiKeyUpsert) SetKey(v string) *ApiKeyUpsert {
	u.Set(apikey.FieldKey, v)
	return u
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *ApiKeyUpsert) UpdateKey() *ApiKeyUpsert {
	u.SetExcluded(apikey.FieldKey)
	return u
}

// SetHashedKey sets the "hashed_key" field.
func (u *ApiKeyUpsert) SetHashedKey(v string) *ApiKeyUpsert {
	u.Set(apikey.FieldHashedKey, v)
	return u
}

// UpdateHashedKey sets the "hashed_key" field to the value that was provided on create.
func (u *ApiKeyUpsert) UpdateHashedKey() *ApiKeyUpsert {
	u.SetExcluded(apikey.FieldHashedKey)
	return u
}

// SetUserID sets the "user_id" field.
func (u *ApiKeyUpsert) SetUserID(v xid.ID) *ApiKeyUpsert {
	u.Set(apikey.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *ApiKeyUpsert) UpdateUserID() *ApiKeyUpsert {
	u.SetExcluded(apikey.FieldUserID)
	return u
}

// ClearUserID clears the value of the "user_id" field.
func (u *ApiKeyUpsert) ClearUserID() *ApiKeyUpsert {
	u.SetNull(apikey.FieldUserID)
	return u
}

// SetOrganizationID sets the "organization_id" field.
func (u *ApiKeyUpsert) SetOrganizationID(v xid.ID) *ApiKeyUpsert {
	u.Set(apikey.FieldOrganizationID, v)
	return u
}

// UpdateOrganizationID sets the "organization_id" field to the value that was provided on create.
func (u *ApiKeyUpsert) UpdateOrganizationID() *ApiKeyUpsert {
	u.SetExcluded(apikey.FieldOrganizationID)
	return u
}

// ClearOrganizationID clears the value of the "organization_id" field.
func (u *ApiKeyUpsert) ClearOrganizationID() *ApiKeyUpsert {
	u.SetNull(apikey.FieldOrganizationID)
	return u
}

// SetType sets the "type" field.
func (u *ApiKeyUpsert) SetType(v string) *ApiKeyUpsert {
	u.Set(apikey.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *ApiKeyUpsert) UpdateType() *ApiKeyUpsert {
	u.SetExcluded(apikey.FieldType)
	return u
}

// SetActive sets the "active" field.
func (u *ApiKeyUpsert) SetActive(v bool) *ApiKeyUpsert {
	u.Set(apikey.FieldActive, v)
	return u
}

// UpdateActive sets the "active" field to the value that was provided on create.
func (u *ApiKeyUpsert) UpdateActive() *ApiKeyUpsert {
	u.SetExcluded(apikey.FieldActive)
	return u
}

// SetPermissions sets the "permissions" field.
func (u *ApiKeyUpsert) SetPermissions(v []string) *ApiKeyUpsert {
	u.Set(apikey.FieldPermissions, v)
	return u
}

// UpdatePermissions sets the "permissions" field to the value that was provided on create.
func (u *ApiKeyUpsert) UpdatePermissions() *ApiKeyUpsert {
	u.SetExcluded(apikey.FieldPermissions)
	return u
}

// ClearPermissions clears the value of the "permissions" field.
func (u *ApiKeyUpsert) ClearPermissions() *ApiKeyUpsert {
	u.SetNull(apikey.FieldPermissions)
	return u
}

// SetScopes sets the "scopes" field.
func (u *ApiKeyUpsert) SetScopes(v []string) *ApiKeyUpsert {
	u.Set(apikey.FieldScopes, v)
	return u
}

// UpdateScopes sets the "scopes" field to the value that was provided on create.
func (u *ApiKeyUpsert) UpdateScopes() *ApiKeyUpsert {
	u.SetExcluded(apikey.FieldScopes)
	return u
}

// ClearScopes clears the value of the "scopes" field.
func (u *ApiKeyUpsert) ClearScopes() *ApiKeyUpsert {
	u.SetNull(apikey.FieldScopes)
	return u
}

// SetMetadata sets the "metadata" field.
func (u *ApiKeyUpsert) SetMetadata(v map[string]interface{}) *ApiKeyUpsert {
	u.Set(apikey.FieldMetadata, v)
	return u
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *ApiKeyUpsert) UpdateMetadata() *ApiKeyUpsert {
	u.SetExcluded(apikey.FieldMetadata)
	return u
}

// ClearMetadata clears the value of the "metadata" field.
func (u *ApiKeyUpsert) ClearMetadata() *ApiKeyUpsert {
	u.SetNull(apikey.FieldMetadata)
	return u
}

// SetLastUsed sets the "last_used" field.
func (u *ApiKeyUpsert) SetLastUsed(v time.Time) *ApiKeyUpsert {
	u.Set(apikey.FieldLastUsed, v)
	return u
}

// UpdateLastUsed sets the "last_used" field to the value that was provided on create.
func (u *ApiKeyUpsert) UpdateLastUsed() *ApiKeyUpsert {
	u.SetExcluded(apikey.FieldLastUsed)
	return u
}

// ClearLastUsed clears the value of the "last_used" field.
func (u *ApiKeyUpsert) ClearLastUsed() *ApiKeyUpsert {
	u.SetNull(apikey.FieldLastUsed)
	return u
}

// SetExpiresAt sets the "expires_at" field.
func (u *ApiKeyUpsert) SetExpiresAt(v time.Time) *ApiKeyUpsert {
	u.Set(apikey.FieldExpiresAt, v)
	return u
}

// UpdateExpiresAt sets the "expires_at" field to the value that was provided on create.
func (u *ApiKeyUpsert) UpdateExpiresAt() *ApiKeyUpsert {
	u.SetExcluded(apikey.FieldExpiresAt)
	return u
}

// ClearExpiresAt clears the value of the "expires_at" field.
func (u *ApiKeyUpsert) ClearExpiresAt() *ApiKeyUpsert {
	u.SetNull(apikey.FieldExpiresAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ApiKey.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(apikey.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ApiKeyUpsertOne) UpdateNewValues() *ApiKeyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(apikey.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(apikey.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ApiKey.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ApiKeyUpsertOne) Ignore() *ApiKeyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ApiKeyUpsertOne) DoNothing() *ApiKeyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ApiKeyCreate.OnConflict
// documentation for more info.
func (u *ApiKeyUpsertOne) Update(set func(*ApiKeyUpsert)) *ApiKeyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ApiKeyUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ApiKeyUpsertOne) SetUpdatedAt(v time.Time) *ApiKeyUpsertOne {
	return u.Update(func(s *ApiKeyUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ApiKeyUpsertOne) UpdateUpdatedAt() *ApiKeyUpsertOne {
	return u.Update(func(s *ApiKeyUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ApiKeyUpsertOne) SetDeletedAt(v time.Time) *ApiKeyUpsertOne {
	return u.Update(func(s *ApiKeyUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ApiKeyUpsertOne) UpdateDeletedAt() *ApiKeyUpsertOne {
	return u.Update(func(s *ApiKeyUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ApiKeyUpsertOne) ClearDeletedAt() *ApiKeyUpsertOne {
	return u.Update(func(s *ApiKeyUpsert) {
		s.ClearDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *ApiKeyUpsertOne) SetName(v string) *ApiKeyUpsertOne {
	return u.Update(func(s *ApiKeyUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ApiKeyUpsertOne) UpdateName() *ApiKeyUpsertOne {
	return u.Update(func(s *ApiKeyUpsert) {
		s.UpdateName()
	})
}

// SetKey sets the "key" field.
func (u *ApiKeyUpsertOne) SetKey(v string) *ApiKeyUpsertOne {
	return u.Update(func(s *ApiKeyUpsert) {
		s.SetKey(v)
	})
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *ApiKeyUpsertOne) UpdateKey() *ApiKeyUpsertOne {
	return u.Update(func(s *ApiKeyUpsert) {
		s.UpdateKey()
	})
}

// SetHashedKey sets the "hashed_key" field.
func (u *ApiKeyUpsertOne) SetHashedKey(v string) *ApiKeyUpsertOne {
	return u.Update(func(s *ApiKeyUpsert) {
		s.SetHashedKey(v)
	})
}

// UpdateHashedKey sets the "hashed_key" field to the value that was provided on create.
func (u *ApiKeyUpsertOne) UpdateHashedKey() *ApiKeyUpsertOne {
	return u.Update(func(s *ApiKeyUpsert) {
		s.UpdateHashedKey()
	})
}

// SetUserID sets the "user_id" field.
func (u *ApiKeyUpsertOne) SetUserID(v xid.ID) *ApiKeyUpsertOne {
	return u.Update(func(s *ApiKeyUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *ApiKeyUpsertOne) UpdateUserID() *ApiKeyUpsertOne {
	return u.Update(func(s *ApiKeyUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *ApiKeyUpsertOne) ClearUserID() *ApiKeyUpsertOne {
	return u.Update(func(s *ApiKeyUpsert) {
		s.ClearUserID()
	})
}

// SetOrganizationID sets the "organization_id" field.
func (u *ApiKeyUpsertOne) SetOrganizationID(v xid.ID) *ApiKeyUpsertOne {
	return u.Update(func(s *ApiKeyUpsert) {
		s.SetOrganizationID(v)
	})
}

// UpdateOrganizationID sets the "organization_id" field to the value that was provided on create.
func (u *ApiKeyUpsertOne) UpdateOrganizationID() *ApiKeyUpsertOne {
	return u.Update(func(s *ApiKeyUpsert) {
		s.UpdateOrganizationID()
	})
}

// ClearOrganizationID clears the value of the "organization_id" field.
func (u *ApiKeyUpsertOne) ClearOrganizationID() *ApiKeyUpsertOne {
	return u.Update(func(s *ApiKeyUpsert) {
		s.ClearOrganizationID()
	})
}

// SetType sets the "type" field.
func (u *ApiKeyUpsertOne) SetType(v string) *ApiKeyUpsertOne {
	return u.Update(func(s *ApiKeyUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *ApiKeyUpsertOne) UpdateType() *ApiKeyUpsertOne {
	return u.Update(func(s *ApiKeyUpsert) {
		s.UpdateType()
	})
}

// SetActive sets the "active" field.
func (u *ApiKeyUpsertOne) SetActive(v bool) *ApiKeyUpsertOne {
	return u.Update(func(s *ApiKeyUpsert) {
		s.SetActive(v)
	})
}

// UpdateActive sets the "active" field to the value that was provided on create.
func (u *ApiKeyUpsertOne) UpdateActive() *ApiKeyUpsertOne {
	return u.Update(func(s *ApiKeyUpsert) {
		s.UpdateActive()
	})
}

// SetPermissions sets the "permissions" field.
func (u *ApiKeyUpsertOne) SetPermissions(v []string) *ApiKeyUpsertOne {
	return u.Update(func(s *ApiKeyUpsert) {
		s.SetPermissions(v)
	})
}

// UpdatePermissions sets the "permissions" field to the value that was provided on create.
func (u *ApiKeyUpsertOne) UpdatePermissions() *ApiKeyUpsertOne {
	return u.Update(func(s *ApiKeyUpsert) {
		s.UpdatePermissions()
	})
}

// ClearPermissions clears the value of the "permissions" field.
func (u *ApiKeyUpsertOne) ClearPermissions() *ApiKeyUpsertOne {
	return u.Update(func(s *ApiKeyUpsert) {
		s.ClearPermissions()
	})
}

// SetScopes sets the "scopes" field.
func (u *ApiKeyUpsertOne) SetScopes(v []string) *ApiKeyUpsertOne {
	return u.Update(func(s *ApiKeyUpsert) {
		s.SetScopes(v)
	})
}

// UpdateScopes sets the "scopes" field to the value that was provided on create.
func (u *ApiKeyUpsertOne) UpdateScopes() *ApiKeyUpsertOne {
	return u.Update(func(s *ApiKeyUpsert) {
		s.UpdateScopes()
	})
}

// ClearScopes clears the value of the "scopes" field.
func (u *ApiKeyUpsertOne) ClearScopes() *ApiKeyUpsertOne {
	return u.Update(func(s *ApiKeyUpsert) {
		s.ClearScopes()
	})
}

// SetMetadata sets the "metadata" field.
func (u *ApiKeyUpsertOne) SetMetadata(v map[string]interface{}) *ApiKeyUpsertOne {
	return u.Update(func(s *ApiKeyUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *ApiKeyUpsertOne) UpdateMetadata() *ApiKeyUpsertOne {
	return u.Update(func(s *ApiKeyUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *ApiKeyUpsertOne) ClearMetadata() *ApiKeyUpsertOne {
	return u.Update(func(s *ApiKeyUpsert) {
		s.ClearMetadata()
	})
}

// SetLastUsed sets the "last_used" field.
func (u *ApiKeyUpsertOne) SetLastUsed(v time.Time) *ApiKeyUpsertOne {
	return u.Update(func(s *ApiKeyUpsert) {
		s.SetLastUsed(v)
	})
}

// UpdateLastUsed sets the "last_used" field to the value that was provided on create.
func (u *ApiKeyUpsertOne) UpdateLastUsed() *ApiKeyUpsertOne {
	return u.Update(func(s *ApiKeyUpsert) {
		s.UpdateLastUsed()
	})
}

// ClearLastUsed clears the value of the "last_used" field.
func (u *ApiKeyUpsertOne) ClearLastUsed() *ApiKeyUpsertOne {
	return u.Update(func(s *ApiKeyUpsert) {
		s.ClearLastUsed()
	})
}

// SetExpiresAt sets the "expires_at" field.
func (u *ApiKeyUpsertOne) SetExpiresAt(v time.Time) *ApiKeyUpsertOne {
	return u.Update(func(s *ApiKeyUpsert) {
		s.SetExpiresAt(v)
	})
}

// UpdateExpiresAt sets the "expires_at" field to the value that was provided on create.
func (u *ApiKeyUpsertOne) UpdateExpiresAt() *ApiKeyUpsertOne {
	return u.Update(func(s *ApiKeyUpsert) {
		s.UpdateExpiresAt()
	})
}

// ClearExpiresAt clears the value of the "expires_at" field.
func (u *ApiKeyUpsertOne) ClearExpiresAt() *ApiKeyUpsertOne {
	return u.Update(func(s *ApiKeyUpsert) {
		s.ClearExpiresAt()
	})
}

// Exec executes the query.
func (u *ApiKeyUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ApiKeyCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ApiKeyUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ApiKeyUpsertOne) ID(ctx context.Context) (id xid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: ApiKeyUpsertOne.ID is not supported by MySQL driver. Use ApiKeyUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ApiKeyUpsertOne) IDX(ctx context.Context) xid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ApiKeyCreateBulk is the builder for creating many ApiKey entities in bulk.
type ApiKeyCreateBulk struct {
	config
	err      error
	builders []*ApiKeyCreate
	conflict []sql.ConflictOption
}

// Save creates the ApiKey entities in the database.
func (akcb *ApiKeyCreateBulk) Save(ctx context.Context) ([]*ApiKey, error) {
	if akcb.err != nil {
		return nil, akcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(akcb.builders))
	nodes := make([]*ApiKey, len(akcb.builders))
	mutators := make([]Mutator, len(akcb.builders))
	for i := range akcb.builders {
		func(i int, root context.Context) {
			builder := akcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ApiKeyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, akcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = akcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, akcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, akcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (akcb *ApiKeyCreateBulk) SaveX(ctx context.Context) []*ApiKey {
	v, err := akcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (akcb *ApiKeyCreateBulk) Exec(ctx context.Context) error {
	_, err := akcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (akcb *ApiKeyCreateBulk) ExecX(ctx context.Context) {
	if err := akcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ApiKey.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ApiKeyUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (akcb *ApiKeyCreateBulk) OnConflict(opts ...sql.ConflictOption) *ApiKeyUpsertBulk {
	akcb.conflict = opts
	return &ApiKeyUpsertBulk{
		create: akcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ApiKey.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (akcb *ApiKeyCreateBulk) OnConflictColumns(columns ...string) *ApiKeyUpsertBulk {
	akcb.conflict = append(akcb.conflict, sql.ConflictColumns(columns...))
	return &ApiKeyUpsertBulk{
		create: akcb,
	}
}

// ApiKeyUpsertBulk is the builder for "upsert"-ing
// a bulk of ApiKey nodes.
type ApiKeyUpsertBulk struct {
	create *ApiKeyCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ApiKey.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(apikey.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ApiKeyUpsertBulk) UpdateNewValues() *ApiKeyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(apikey.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(apikey.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ApiKey.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ApiKeyUpsertBulk) Ignore() *ApiKeyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ApiKeyUpsertBulk) DoNothing() *ApiKeyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ApiKeyCreateBulk.OnConflict
// documentation for more info.
func (u *ApiKeyUpsertBulk) Update(set func(*ApiKeyUpsert)) *ApiKeyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ApiKeyUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ApiKeyUpsertBulk) SetUpdatedAt(v time.Time) *ApiKeyUpsertBulk {
	return u.Update(func(s *ApiKeyUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ApiKeyUpsertBulk) UpdateUpdatedAt() *ApiKeyUpsertBulk {
	return u.Update(func(s *ApiKeyUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ApiKeyUpsertBulk) SetDeletedAt(v time.Time) *ApiKeyUpsertBulk {
	return u.Update(func(s *ApiKeyUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ApiKeyUpsertBulk) UpdateDeletedAt() *ApiKeyUpsertBulk {
	return u.Update(func(s *ApiKeyUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ApiKeyUpsertBulk) ClearDeletedAt() *ApiKeyUpsertBulk {
	return u.Update(func(s *ApiKeyUpsert) {
		s.ClearDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *ApiKeyUpsertBulk) SetName(v string) *ApiKeyUpsertBulk {
	return u.Update(func(s *ApiKeyUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ApiKeyUpsertBulk) UpdateName() *ApiKeyUpsertBulk {
	return u.Update(func(s *ApiKeyUpsert) {
		s.UpdateName()
	})
}

// SetKey sets the "key" field.
func (u *ApiKeyUpsertBulk) SetKey(v string) *ApiKeyUpsertBulk {
	return u.Update(func(s *ApiKeyUpsert) {
		s.SetKey(v)
	})
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *ApiKeyUpsertBulk) UpdateKey() *ApiKeyUpsertBulk {
	return u.Update(func(s *ApiKeyUpsert) {
		s.UpdateKey()
	})
}

// SetHashedKey sets the "hashed_key" field.
func (u *ApiKeyUpsertBulk) SetHashedKey(v string) *ApiKeyUpsertBulk {
	return u.Update(func(s *ApiKeyUpsert) {
		s.SetHashedKey(v)
	})
}

// UpdateHashedKey sets the "hashed_key" field to the value that was provided on create.
func (u *ApiKeyUpsertBulk) UpdateHashedKey() *ApiKeyUpsertBulk {
	return u.Update(func(s *ApiKeyUpsert) {
		s.UpdateHashedKey()
	})
}

// SetUserID sets the "user_id" field.
func (u *ApiKeyUpsertBulk) SetUserID(v xid.ID) *ApiKeyUpsertBulk {
	return u.Update(func(s *ApiKeyUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *ApiKeyUpsertBulk) UpdateUserID() *ApiKeyUpsertBulk {
	return u.Update(func(s *ApiKeyUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *ApiKeyUpsertBulk) ClearUserID() *ApiKeyUpsertBulk {
	return u.Update(func(s *ApiKeyUpsert) {
		s.ClearUserID()
	})
}

// SetOrganizationID sets the "organization_id" field.
func (u *ApiKeyUpsertBulk) SetOrganizationID(v xid.ID) *ApiKeyUpsertBulk {
	return u.Update(func(s *ApiKeyUpsert) {
		s.SetOrganizationID(v)
	})
}

// UpdateOrganizationID sets the "organization_id" field to the value that was provided on create.
func (u *ApiKeyUpsertBulk) UpdateOrganizationID() *ApiKeyUpsertBulk {
	return u.Update(func(s *ApiKeyUpsert) {
		s.UpdateOrganizationID()
	})
}

// ClearOrganizationID clears the value of the "organization_id" field.
func (u *ApiKeyUpsertBulk) ClearOrganizationID() *ApiKeyUpsertBulk {
	return u.Update(func(s *ApiKeyUpsert) {
		s.ClearOrganizationID()
	})
}

// SetType sets the "type" field.
func (u *ApiKeyUpsertBulk) SetType(v string) *ApiKeyUpsertBulk {
	return u.Update(func(s *ApiKeyUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *ApiKeyUpsertBulk) UpdateType() *ApiKeyUpsertBulk {
	return u.Update(func(s *ApiKeyUpsert) {
		s.UpdateType()
	})
}

// SetActive sets the "active" field.
func (u *ApiKeyUpsertBulk) SetActive(v bool) *ApiKeyUpsertBulk {
	return u.Update(func(s *ApiKeyUpsert) {
		s.SetActive(v)
	})
}

// UpdateActive sets the "active" field to the value that was provided on create.
func (u *ApiKeyUpsertBulk) UpdateActive() *ApiKeyUpsertBulk {
	return u.Update(func(s *ApiKeyUpsert) {
		s.UpdateActive()
	})
}

// SetPermissions sets the "permissions" field.
func (u *ApiKeyUpsertBulk) SetPermissions(v []string) *ApiKeyUpsertBulk {
	return u.Update(func(s *ApiKeyUpsert) {
		s.SetPermissions(v)
	})
}

// UpdatePermissions sets the "permissions" field to the value that was provided on create.
func (u *ApiKeyUpsertBulk) UpdatePermissions() *ApiKeyUpsertBulk {
	return u.Update(func(s *ApiKeyUpsert) {
		s.UpdatePermissions()
	})
}

// ClearPermissions clears the value of the "permissions" field.
func (u *ApiKeyUpsertBulk) ClearPermissions() *ApiKeyUpsertBulk {
	return u.Update(func(s *ApiKeyUpsert) {
		s.ClearPermissions()
	})
}

// SetScopes sets the "scopes" field.
func (u *ApiKeyUpsertBulk) SetScopes(v []string) *ApiKeyUpsertBulk {
	return u.Update(func(s *ApiKeyUpsert) {
		s.SetScopes(v)
	})
}

// UpdateScopes sets the "scopes" field to the value that was provided on create.
func (u *ApiKeyUpsertBulk) UpdateScopes() *ApiKeyUpsertBulk {
	return u.Update(func(s *ApiKeyUpsert) {
		s.UpdateScopes()
	})
}

// ClearScopes clears the value of the "scopes" field.
func (u *ApiKeyUpsertBulk) ClearScopes() *ApiKeyUpsertBulk {
	return u.Update(func(s *ApiKeyUpsert) {
		s.ClearScopes()
	})
}

// SetMetadata sets the "metadata" field.
func (u *ApiKeyUpsertBulk) SetMetadata(v map[string]interface{}) *ApiKeyUpsertBulk {
	return u.Update(func(s *ApiKeyUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *ApiKeyUpsertBulk) UpdateMetadata() *ApiKeyUpsertBulk {
	return u.Update(func(s *ApiKeyUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *ApiKeyUpsertBulk) ClearMetadata() *ApiKeyUpsertBulk {
	return u.Update(func(s *ApiKeyUpsert) {
		s.ClearMetadata()
	})
}

// SetLastUsed sets the "last_used" field.
func (u *ApiKeyUpsertBulk) SetLastUsed(v time.Time) *ApiKeyUpsertBulk {
	return u.Update(func(s *ApiKeyUpsert) {
		s.SetLastUsed(v)
	})
}

// UpdateLastUsed sets the "last_used" field to the value that was provided on create.
func (u *ApiKeyUpsertBulk) UpdateLastUsed() *ApiKeyUpsertBulk {
	return u.Update(func(s *ApiKeyUpsert) {
		s.UpdateLastUsed()
	})
}

// ClearLastUsed clears the value of the "last_used" field.
func (u *ApiKeyUpsertBulk) ClearLastUsed() *ApiKeyUpsertBulk {
	return u.Update(func(s *ApiKeyUpsert) {
		s.ClearLastUsed()
	})
}

// SetExpiresAt sets the "expires_at" field.
func (u *ApiKeyUpsertBulk) SetExpiresAt(v time.Time) *ApiKeyUpsertBulk {
	return u.Update(func(s *ApiKeyUpsert) {
		s.SetExpiresAt(v)
	})
}

// UpdateExpiresAt sets the "expires_at" field to the value that was provided on create.
func (u *ApiKeyUpsertBulk) UpdateExpiresAt() *ApiKeyUpsertBulk {
	return u.Update(func(s *ApiKeyUpsert) {
		s.UpdateExpiresAt()
	})
}

// ClearExpiresAt clears the value of the "expires_at" field.
func (u *ApiKeyUpsertBulk) ClearExpiresAt() *ApiKeyUpsertBulk {
	return u.Update(func(s *ApiKeyUpsert) {
		s.ClearExpiresAt()
	})
}

// Exec executes the query.
func (u *ApiKeyUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ApiKeyCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ApiKeyCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ApiKeyUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
