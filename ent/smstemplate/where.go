// Copyright 2023-present XRaph LLC. All rights reserved.
// This source code is licensed under the XRaph LLC license found
// in the LICENSE file in the root directory of this source tree.
// Code generated by ent, DO NOT EDIT.

package smstemplate

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/juicycleff/frank/ent/predicate"
	"github.com/rs/xid"
)

// ID filters vertices based on their ID field.
func ID(id xid.ID) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id xid.ID) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id xid.ID) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...xid.ID) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...xid.ID) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id xid.ID) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id xid.ID) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id xid.ID) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id xid.ID) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldEQ(FieldDeletedAt, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldEQ(FieldName, v))
}

// Content applies equality check predicate on the "content" field. It's identical to ContentEQ.
func Content(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldEQ(FieldContent, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldEQ(FieldType, v))
}

// OrganizationID applies equality check predicate on the "organization_id" field. It's identical to OrganizationIDEQ.
func OrganizationID(v xid.ID) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldEQ(FieldOrganizationID, v))
}

// Active applies equality check predicate on the "active" field. It's identical to ActiveEQ.
func Active(v bool) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldEQ(FieldActive, v))
}

// System applies equality check predicate on the "system" field. It's identical to SystemEQ.
func System(v bool) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldEQ(FieldSystem, v))
}

// Locale applies equality check predicate on the "locale" field. It's identical to LocaleEQ.
func Locale(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldEQ(FieldLocale, v))
}

// MaxLength applies equality check predicate on the "max_length" field. It's identical to MaxLengthEQ.
func MaxLength(v int) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldEQ(FieldMaxLength, v))
}

// MessageType applies equality check predicate on the "message_type" field. It's identical to MessageTypeEQ.
func MessageType(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldEQ(FieldMessageType, v))
}

// EstimatedSegments applies equality check predicate on the "estimated_segments" field. It's identical to EstimatedSegmentsEQ.
func EstimatedSegments(v int) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldEQ(FieldEstimatedSegments, v))
}

// EstimatedCost applies equality check predicate on the "estimated_cost" field. It's identical to EstimatedCostEQ.
func EstimatedCost(v float64) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldEQ(FieldEstimatedCost, v))
}

// Currency applies equality check predicate on the "currency" field. It's identical to CurrencyEQ.
func Currency(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldEQ(FieldCurrency, v))
}

// LastUsedAt applies equality check predicate on the "last_used_at" field. It's identical to LastUsedAtEQ.
func LastUsedAt(v time.Time) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldEQ(FieldLastUsedAt, v))
}

// UsageCount applies equality check predicate on the "usage_count" field. It's identical to UsageCountEQ.
func UsageCount(v int) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldEQ(FieldUsageCount, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldNotNull(FieldDeletedAt))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldContainsFold(FieldName, v))
}

// ContentEQ applies the EQ predicate on the "content" field.
func ContentEQ(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldEQ(FieldContent, v))
}

// ContentNEQ applies the NEQ predicate on the "content" field.
func ContentNEQ(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldNEQ(FieldContent, v))
}

// ContentIn applies the In predicate on the "content" field.
func ContentIn(vs ...string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldIn(FieldContent, vs...))
}

// ContentNotIn applies the NotIn predicate on the "content" field.
func ContentNotIn(vs ...string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldNotIn(FieldContent, vs...))
}

// ContentGT applies the GT predicate on the "content" field.
func ContentGT(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldGT(FieldContent, v))
}

// ContentGTE applies the GTE predicate on the "content" field.
func ContentGTE(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldGTE(FieldContent, v))
}

// ContentLT applies the LT predicate on the "content" field.
func ContentLT(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldLT(FieldContent, v))
}

// ContentLTE applies the LTE predicate on the "content" field.
func ContentLTE(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldLTE(FieldContent, v))
}

// ContentContains applies the Contains predicate on the "content" field.
func ContentContains(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldContains(FieldContent, v))
}

// ContentHasPrefix applies the HasPrefix predicate on the "content" field.
func ContentHasPrefix(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldHasPrefix(FieldContent, v))
}

// ContentHasSuffix applies the HasSuffix predicate on the "content" field.
func ContentHasSuffix(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldHasSuffix(FieldContent, v))
}

// ContentEqualFold applies the EqualFold predicate on the "content" field.
func ContentEqualFold(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldEqualFold(FieldContent, v))
}

// ContentContainsFold applies the ContainsFold predicate on the "content" field.
func ContentContainsFold(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldContainsFold(FieldContent, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldHasSuffix(FieldType, v))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldContainsFold(FieldType, v))
}

// OrganizationIDEQ applies the EQ predicate on the "organization_id" field.
func OrganizationIDEQ(v xid.ID) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldEQ(FieldOrganizationID, v))
}

// OrganizationIDNEQ applies the NEQ predicate on the "organization_id" field.
func OrganizationIDNEQ(v xid.ID) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldNEQ(FieldOrganizationID, v))
}

// OrganizationIDIn applies the In predicate on the "organization_id" field.
func OrganizationIDIn(vs ...xid.ID) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldIn(FieldOrganizationID, vs...))
}

// OrganizationIDNotIn applies the NotIn predicate on the "organization_id" field.
func OrganizationIDNotIn(vs ...xid.ID) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldNotIn(FieldOrganizationID, vs...))
}

// OrganizationIDGT applies the GT predicate on the "organization_id" field.
func OrganizationIDGT(v xid.ID) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldGT(FieldOrganizationID, v))
}

// OrganizationIDGTE applies the GTE predicate on the "organization_id" field.
func OrganizationIDGTE(v xid.ID) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldGTE(FieldOrganizationID, v))
}

// OrganizationIDLT applies the LT predicate on the "organization_id" field.
func OrganizationIDLT(v xid.ID) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldLT(FieldOrganizationID, v))
}

// OrganizationIDLTE applies the LTE predicate on the "organization_id" field.
func OrganizationIDLTE(v xid.ID) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldLTE(FieldOrganizationID, v))
}

// OrganizationIDContains applies the Contains predicate on the "organization_id" field.
func OrganizationIDContains(v xid.ID) predicate.SMSTemplate {
	vc := v.String()
	return predicate.SMSTemplate(sql.FieldContains(FieldOrganizationID, vc))
}

// OrganizationIDHasPrefix applies the HasPrefix predicate on the "organization_id" field.
func OrganizationIDHasPrefix(v xid.ID) predicate.SMSTemplate {
	vc := v.String()
	return predicate.SMSTemplate(sql.FieldHasPrefix(FieldOrganizationID, vc))
}

// OrganizationIDHasSuffix applies the HasSuffix predicate on the "organization_id" field.
func OrganizationIDHasSuffix(v xid.ID) predicate.SMSTemplate {
	vc := v.String()
	return predicate.SMSTemplate(sql.FieldHasSuffix(FieldOrganizationID, vc))
}

// OrganizationIDIsNil applies the IsNil predicate on the "organization_id" field.
func OrganizationIDIsNil() predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldIsNull(FieldOrganizationID))
}

// OrganizationIDNotNil applies the NotNil predicate on the "organization_id" field.
func OrganizationIDNotNil() predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldNotNull(FieldOrganizationID))
}

// OrganizationIDEqualFold applies the EqualFold predicate on the "organization_id" field.
func OrganizationIDEqualFold(v xid.ID) predicate.SMSTemplate {
	vc := v.String()
	return predicate.SMSTemplate(sql.FieldEqualFold(FieldOrganizationID, vc))
}

// OrganizationIDContainsFold applies the ContainsFold predicate on the "organization_id" field.
func OrganizationIDContainsFold(v xid.ID) predicate.SMSTemplate {
	vc := v.String()
	return predicate.SMSTemplate(sql.FieldContainsFold(FieldOrganizationID, vc))
}

// ActiveEQ applies the EQ predicate on the "active" field.
func ActiveEQ(v bool) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldEQ(FieldActive, v))
}

// ActiveNEQ applies the NEQ predicate on the "active" field.
func ActiveNEQ(v bool) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldNEQ(FieldActive, v))
}

// SystemEQ applies the EQ predicate on the "system" field.
func SystemEQ(v bool) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldEQ(FieldSystem, v))
}

// SystemNEQ applies the NEQ predicate on the "system" field.
func SystemNEQ(v bool) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldNEQ(FieldSystem, v))
}

// LocaleEQ applies the EQ predicate on the "locale" field.
func LocaleEQ(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldEQ(FieldLocale, v))
}

// LocaleNEQ applies the NEQ predicate on the "locale" field.
func LocaleNEQ(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldNEQ(FieldLocale, v))
}

// LocaleIn applies the In predicate on the "locale" field.
func LocaleIn(vs ...string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldIn(FieldLocale, vs...))
}

// LocaleNotIn applies the NotIn predicate on the "locale" field.
func LocaleNotIn(vs ...string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldNotIn(FieldLocale, vs...))
}

// LocaleGT applies the GT predicate on the "locale" field.
func LocaleGT(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldGT(FieldLocale, v))
}

// LocaleGTE applies the GTE predicate on the "locale" field.
func LocaleGTE(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldGTE(FieldLocale, v))
}

// LocaleLT applies the LT predicate on the "locale" field.
func LocaleLT(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldLT(FieldLocale, v))
}

// LocaleLTE applies the LTE predicate on the "locale" field.
func LocaleLTE(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldLTE(FieldLocale, v))
}

// LocaleContains applies the Contains predicate on the "locale" field.
func LocaleContains(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldContains(FieldLocale, v))
}

// LocaleHasPrefix applies the HasPrefix predicate on the "locale" field.
func LocaleHasPrefix(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldHasPrefix(FieldLocale, v))
}

// LocaleHasSuffix applies the HasSuffix predicate on the "locale" field.
func LocaleHasSuffix(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldHasSuffix(FieldLocale, v))
}

// LocaleEqualFold applies the EqualFold predicate on the "locale" field.
func LocaleEqualFold(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldEqualFold(FieldLocale, v))
}

// LocaleContainsFold applies the ContainsFold predicate on the "locale" field.
func LocaleContainsFold(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldContainsFold(FieldLocale, v))
}

// MaxLengthEQ applies the EQ predicate on the "max_length" field.
func MaxLengthEQ(v int) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldEQ(FieldMaxLength, v))
}

// MaxLengthNEQ applies the NEQ predicate on the "max_length" field.
func MaxLengthNEQ(v int) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldNEQ(FieldMaxLength, v))
}

// MaxLengthIn applies the In predicate on the "max_length" field.
func MaxLengthIn(vs ...int) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldIn(FieldMaxLength, vs...))
}

// MaxLengthNotIn applies the NotIn predicate on the "max_length" field.
func MaxLengthNotIn(vs ...int) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldNotIn(FieldMaxLength, vs...))
}

// MaxLengthGT applies the GT predicate on the "max_length" field.
func MaxLengthGT(v int) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldGT(FieldMaxLength, v))
}

// MaxLengthGTE applies the GTE predicate on the "max_length" field.
func MaxLengthGTE(v int) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldGTE(FieldMaxLength, v))
}

// MaxLengthLT applies the LT predicate on the "max_length" field.
func MaxLengthLT(v int) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldLT(FieldMaxLength, v))
}

// MaxLengthLTE applies the LTE predicate on the "max_length" field.
func MaxLengthLTE(v int) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldLTE(FieldMaxLength, v))
}

// MessageTypeEQ applies the EQ predicate on the "message_type" field.
func MessageTypeEQ(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldEQ(FieldMessageType, v))
}

// MessageTypeNEQ applies the NEQ predicate on the "message_type" field.
func MessageTypeNEQ(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldNEQ(FieldMessageType, v))
}

// MessageTypeIn applies the In predicate on the "message_type" field.
func MessageTypeIn(vs ...string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldIn(FieldMessageType, vs...))
}

// MessageTypeNotIn applies the NotIn predicate on the "message_type" field.
func MessageTypeNotIn(vs ...string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldNotIn(FieldMessageType, vs...))
}

// MessageTypeGT applies the GT predicate on the "message_type" field.
func MessageTypeGT(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldGT(FieldMessageType, v))
}

// MessageTypeGTE applies the GTE predicate on the "message_type" field.
func MessageTypeGTE(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldGTE(FieldMessageType, v))
}

// MessageTypeLT applies the LT predicate on the "message_type" field.
func MessageTypeLT(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldLT(FieldMessageType, v))
}

// MessageTypeLTE applies the LTE predicate on the "message_type" field.
func MessageTypeLTE(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldLTE(FieldMessageType, v))
}

// MessageTypeContains applies the Contains predicate on the "message_type" field.
func MessageTypeContains(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldContains(FieldMessageType, v))
}

// MessageTypeHasPrefix applies the HasPrefix predicate on the "message_type" field.
func MessageTypeHasPrefix(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldHasPrefix(FieldMessageType, v))
}

// MessageTypeHasSuffix applies the HasSuffix predicate on the "message_type" field.
func MessageTypeHasSuffix(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldHasSuffix(FieldMessageType, v))
}

// MessageTypeEqualFold applies the EqualFold predicate on the "message_type" field.
func MessageTypeEqualFold(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldEqualFold(FieldMessageType, v))
}

// MessageTypeContainsFold applies the ContainsFold predicate on the "message_type" field.
func MessageTypeContainsFold(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldContainsFold(FieldMessageType, v))
}

// EstimatedSegmentsEQ applies the EQ predicate on the "estimated_segments" field.
func EstimatedSegmentsEQ(v int) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldEQ(FieldEstimatedSegments, v))
}

// EstimatedSegmentsNEQ applies the NEQ predicate on the "estimated_segments" field.
func EstimatedSegmentsNEQ(v int) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldNEQ(FieldEstimatedSegments, v))
}

// EstimatedSegmentsIn applies the In predicate on the "estimated_segments" field.
func EstimatedSegmentsIn(vs ...int) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldIn(FieldEstimatedSegments, vs...))
}

// EstimatedSegmentsNotIn applies the NotIn predicate on the "estimated_segments" field.
func EstimatedSegmentsNotIn(vs ...int) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldNotIn(FieldEstimatedSegments, vs...))
}

// EstimatedSegmentsGT applies the GT predicate on the "estimated_segments" field.
func EstimatedSegmentsGT(v int) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldGT(FieldEstimatedSegments, v))
}

// EstimatedSegmentsGTE applies the GTE predicate on the "estimated_segments" field.
func EstimatedSegmentsGTE(v int) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldGTE(FieldEstimatedSegments, v))
}

// EstimatedSegmentsLT applies the LT predicate on the "estimated_segments" field.
func EstimatedSegmentsLT(v int) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldLT(FieldEstimatedSegments, v))
}

// EstimatedSegmentsLTE applies the LTE predicate on the "estimated_segments" field.
func EstimatedSegmentsLTE(v int) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldLTE(FieldEstimatedSegments, v))
}

// EstimatedSegmentsIsNil applies the IsNil predicate on the "estimated_segments" field.
func EstimatedSegmentsIsNil() predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldIsNull(FieldEstimatedSegments))
}

// EstimatedSegmentsNotNil applies the NotNil predicate on the "estimated_segments" field.
func EstimatedSegmentsNotNil() predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldNotNull(FieldEstimatedSegments))
}

// EstimatedCostEQ applies the EQ predicate on the "estimated_cost" field.
func EstimatedCostEQ(v float64) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldEQ(FieldEstimatedCost, v))
}

// EstimatedCostNEQ applies the NEQ predicate on the "estimated_cost" field.
func EstimatedCostNEQ(v float64) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldNEQ(FieldEstimatedCost, v))
}

// EstimatedCostIn applies the In predicate on the "estimated_cost" field.
func EstimatedCostIn(vs ...float64) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldIn(FieldEstimatedCost, vs...))
}

// EstimatedCostNotIn applies the NotIn predicate on the "estimated_cost" field.
func EstimatedCostNotIn(vs ...float64) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldNotIn(FieldEstimatedCost, vs...))
}

// EstimatedCostGT applies the GT predicate on the "estimated_cost" field.
func EstimatedCostGT(v float64) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldGT(FieldEstimatedCost, v))
}

// EstimatedCostGTE applies the GTE predicate on the "estimated_cost" field.
func EstimatedCostGTE(v float64) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldGTE(FieldEstimatedCost, v))
}

// EstimatedCostLT applies the LT predicate on the "estimated_cost" field.
func EstimatedCostLT(v float64) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldLT(FieldEstimatedCost, v))
}

// EstimatedCostLTE applies the LTE predicate on the "estimated_cost" field.
func EstimatedCostLTE(v float64) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldLTE(FieldEstimatedCost, v))
}

// EstimatedCostIsNil applies the IsNil predicate on the "estimated_cost" field.
func EstimatedCostIsNil() predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldIsNull(FieldEstimatedCost))
}

// EstimatedCostNotNil applies the NotNil predicate on the "estimated_cost" field.
func EstimatedCostNotNil() predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldNotNull(FieldEstimatedCost))
}

// CurrencyEQ applies the EQ predicate on the "currency" field.
func CurrencyEQ(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldEQ(FieldCurrency, v))
}

// CurrencyNEQ applies the NEQ predicate on the "currency" field.
func CurrencyNEQ(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldNEQ(FieldCurrency, v))
}

// CurrencyIn applies the In predicate on the "currency" field.
func CurrencyIn(vs ...string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldIn(FieldCurrency, vs...))
}

// CurrencyNotIn applies the NotIn predicate on the "currency" field.
func CurrencyNotIn(vs ...string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldNotIn(FieldCurrency, vs...))
}

// CurrencyGT applies the GT predicate on the "currency" field.
func CurrencyGT(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldGT(FieldCurrency, v))
}

// CurrencyGTE applies the GTE predicate on the "currency" field.
func CurrencyGTE(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldGTE(FieldCurrency, v))
}

// CurrencyLT applies the LT predicate on the "currency" field.
func CurrencyLT(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldLT(FieldCurrency, v))
}

// CurrencyLTE applies the LTE predicate on the "currency" field.
func CurrencyLTE(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldLTE(FieldCurrency, v))
}

// CurrencyContains applies the Contains predicate on the "currency" field.
func CurrencyContains(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldContains(FieldCurrency, v))
}

// CurrencyHasPrefix applies the HasPrefix predicate on the "currency" field.
func CurrencyHasPrefix(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldHasPrefix(FieldCurrency, v))
}

// CurrencyHasSuffix applies the HasSuffix predicate on the "currency" field.
func CurrencyHasSuffix(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldHasSuffix(FieldCurrency, v))
}

// CurrencyIsNil applies the IsNil predicate on the "currency" field.
func CurrencyIsNil() predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldIsNull(FieldCurrency))
}

// CurrencyNotNil applies the NotNil predicate on the "currency" field.
func CurrencyNotNil() predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldNotNull(FieldCurrency))
}

// CurrencyEqualFold applies the EqualFold predicate on the "currency" field.
func CurrencyEqualFold(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldEqualFold(FieldCurrency, v))
}

// CurrencyContainsFold applies the ContainsFold predicate on the "currency" field.
func CurrencyContainsFold(v string) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldContainsFold(FieldCurrency, v))
}

// VariablesIsNil applies the IsNil predicate on the "variables" field.
func VariablesIsNil() predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldIsNull(FieldVariables))
}

// VariablesNotNil applies the NotNil predicate on the "variables" field.
func VariablesNotNil() predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldNotNull(FieldVariables))
}

// MetadataIsNil applies the IsNil predicate on the "metadata" field.
func MetadataIsNil() predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldIsNull(FieldMetadata))
}

// MetadataNotNil applies the NotNil predicate on the "metadata" field.
func MetadataNotNil() predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldNotNull(FieldMetadata))
}

// LastUsedAtEQ applies the EQ predicate on the "last_used_at" field.
func LastUsedAtEQ(v time.Time) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldEQ(FieldLastUsedAt, v))
}

// LastUsedAtNEQ applies the NEQ predicate on the "last_used_at" field.
func LastUsedAtNEQ(v time.Time) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldNEQ(FieldLastUsedAt, v))
}

// LastUsedAtIn applies the In predicate on the "last_used_at" field.
func LastUsedAtIn(vs ...time.Time) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldIn(FieldLastUsedAt, vs...))
}

// LastUsedAtNotIn applies the NotIn predicate on the "last_used_at" field.
func LastUsedAtNotIn(vs ...time.Time) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldNotIn(FieldLastUsedAt, vs...))
}

// LastUsedAtGT applies the GT predicate on the "last_used_at" field.
func LastUsedAtGT(v time.Time) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldGT(FieldLastUsedAt, v))
}

// LastUsedAtGTE applies the GTE predicate on the "last_used_at" field.
func LastUsedAtGTE(v time.Time) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldGTE(FieldLastUsedAt, v))
}

// LastUsedAtLT applies the LT predicate on the "last_used_at" field.
func LastUsedAtLT(v time.Time) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldLT(FieldLastUsedAt, v))
}

// LastUsedAtLTE applies the LTE predicate on the "last_used_at" field.
func LastUsedAtLTE(v time.Time) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldLTE(FieldLastUsedAt, v))
}

// LastUsedAtIsNil applies the IsNil predicate on the "last_used_at" field.
func LastUsedAtIsNil() predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldIsNull(FieldLastUsedAt))
}

// LastUsedAtNotNil applies the NotNil predicate on the "last_used_at" field.
func LastUsedAtNotNil() predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldNotNull(FieldLastUsedAt))
}

// UsageCountEQ applies the EQ predicate on the "usage_count" field.
func UsageCountEQ(v int) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldEQ(FieldUsageCount, v))
}

// UsageCountNEQ applies the NEQ predicate on the "usage_count" field.
func UsageCountNEQ(v int) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldNEQ(FieldUsageCount, v))
}

// UsageCountIn applies the In predicate on the "usage_count" field.
func UsageCountIn(vs ...int) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldIn(FieldUsageCount, vs...))
}

// UsageCountNotIn applies the NotIn predicate on the "usage_count" field.
func UsageCountNotIn(vs ...int) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldNotIn(FieldUsageCount, vs...))
}

// UsageCountGT applies the GT predicate on the "usage_count" field.
func UsageCountGT(v int) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldGT(FieldUsageCount, v))
}

// UsageCountGTE applies the GTE predicate on the "usage_count" field.
func UsageCountGTE(v int) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldGTE(FieldUsageCount, v))
}

// UsageCountLT applies the LT predicate on the "usage_count" field.
func UsageCountLT(v int) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldLT(FieldUsageCount, v))
}

// UsageCountLTE applies the LTE predicate on the "usage_count" field.
func UsageCountLTE(v int) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.FieldLTE(FieldUsageCount, v))
}

// HasOrganization applies the HasEdge predicate on the "organization" edge.
func HasOrganization() predicate.SMSTemplate {
	return predicate.SMSTemplate(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrganizationTable, OrganizationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrganizationWith applies the HasEdge predicate on the "organization" edge with a given conditions (other predicates).
func HasOrganizationWith(preds ...predicate.Organization) predicate.SMSTemplate {
	return predicate.SMSTemplate(func(s *sql.Selector) {
		step := newOrganizationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SMSTemplate) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SMSTemplate) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SMSTemplate) predicate.SMSTemplate {
	return predicate.SMSTemplate(sql.NotPredicates(p))
}
