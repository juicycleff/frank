// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// APIKeysColumns holds the columns for the "api_keys" table.
	APIKeysColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString},
		{Name: "key", Type: field.TypeString, Unique: true},
		{Name: "hashed_key", Type: field.TypeString, Unique: true},
		{Name: "type", Type: field.TypeString, Default: "server"},
		{Name: "active", Type: field.TypeBool, Default: true},
		{Name: "permissions", Type: field.TypeJSON, Nullable: true},
		{Name: "scopes", Type: field.TypeJSON, Nullable: true},
		{Name: "metadata", Type: field.TypeJSON, Nullable: true, SchemaType: map[string]string{"mysql": "json", "postgres": "jsonb", "sqlite3": "text"}},
		{Name: "last_used", Type: field.TypeTime, Nullable: true},
		{Name: "expires_at", Type: field.TypeTime, Nullable: true},
		{Name: "organization_id", Type: field.TypeString, Nullable: true},
		{Name: "user_id", Type: field.TypeString, Nullable: true},
	}
	// APIKeysTable holds the schema information for the "api_keys" table.
	APIKeysTable = &schema.Table{
		Name:       "api_keys",
		Columns:    APIKeysColumns,
		PrimaryKey: []*schema.Column{APIKeysColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "api_keys_organizations_api_keys",
				Columns:    []*schema.Column{APIKeysColumns[13]},
				RefColumns: []*schema.Column{OrganizationsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "api_keys_users_api_keys",
				Columns:    []*schema.Column{APIKeysColumns[14]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "apikey_user_id",
				Unique:  false,
				Columns: []*schema.Column{APIKeysColumns[14]},
			},
			{
				Name:    "apikey_organization_id",
				Unique:  false,
				Columns: []*schema.Column{APIKeysColumns[13]},
			},
			{
				Name:    "apikey_hashed_key",
				Unique:  false,
				Columns: []*schema.Column{APIKeysColumns[5]},
			},
		},
	}
	// EmailTemplatesColumns holds the columns for the "email_templates" table.
	EmailTemplatesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString},
		{Name: "subject", Type: field.TypeString},
		{Name: "type", Type: field.TypeString},
		{Name: "html_content", Type: field.TypeString},
		{Name: "text_content", Type: field.TypeString, Nullable: true},
		{Name: "organization_id", Type: field.TypeString, Nullable: true},
		{Name: "active", Type: field.TypeBool, Default: true},
		{Name: "system", Type: field.TypeBool, Default: false},
		{Name: "locale", Type: field.TypeString, Default: "en"},
		{Name: "metadata", Type: field.TypeJSON, Nullable: true, SchemaType: map[string]string{"mysql": "json", "postgres": "jsonb", "sqlite3": "text"}},
	}
	// EmailTemplatesTable holds the schema information for the "email_templates" table.
	EmailTemplatesTable = &schema.Table{
		Name:       "email_templates",
		Columns:    EmailTemplatesColumns,
		PrimaryKey: []*schema.Column{EmailTemplatesColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "emailtemplate_organization_id",
				Unique:  false,
				Columns: []*schema.Column{EmailTemplatesColumns[8]},
			},
			{
				Name:    "emailtemplate_type",
				Unique:  false,
				Columns: []*schema.Column{EmailTemplatesColumns[5]},
			},
			{
				Name:    "emailtemplate_organization_id_type_locale",
				Unique:  true,
				Columns: []*schema.Column{EmailTemplatesColumns[8], EmailTemplatesColumns[5], EmailTemplatesColumns[11]},
			},
		},
	}
	// FeatureFlagsColumns holds the columns for the "feature_flags" table.
	FeatureFlagsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString, Unique: true},
		{Name: "key", Type: field.TypeString, Unique: true},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "enabled", Type: field.TypeBool, Default: false},
		{Name: "is_premium", Type: field.TypeBool, Default: false},
		{Name: "component", Type: field.TypeEnum, Enums: []string{"oauth2", "passwordless", "mfa", "passkeys", "sso", "enterprise", "webhooks", "api_keys"}},
	}
	// FeatureFlagsTable holds the schema information for the "feature_flags" table.
	FeatureFlagsTable = &schema.Table{
		Name:       "feature_flags",
		Columns:    FeatureFlagsColumns,
		PrimaryKey: []*schema.Column{FeatureFlagsColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "featureflag_key",
				Unique:  false,
				Columns: []*schema.Column{FeatureFlagsColumns[4]},
			},
			{
				Name:    "featureflag_component",
				Unique:  false,
				Columns: []*schema.Column{FeatureFlagsColumns[8]},
			},
		},
	}
	// IdentityProvidersColumns holds the columns for the "identity_providers" table.
	IdentityProvidersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString},
		{Name: "provider_type", Type: field.TypeString},
		{Name: "client_id", Type: field.TypeString, Nullable: true},
		{Name: "client_secret", Type: field.TypeString, Nullable: true},
		{Name: "issuer", Type: field.TypeString, Nullable: true},
		{Name: "authorization_endpoint", Type: field.TypeString, Nullable: true},
		{Name: "token_endpoint", Type: field.TypeString, Nullable: true},
		{Name: "userinfo_endpoint", Type: field.TypeString, Nullable: true},
		{Name: "jwks_uri", Type: field.TypeString, Nullable: true},
		{Name: "metadata_url", Type: field.TypeString, Nullable: true},
		{Name: "redirect_uri", Type: field.TypeString, Nullable: true},
		{Name: "certificate", Type: field.TypeString, Nullable: true},
		{Name: "private_key", Type: field.TypeString, Nullable: true},
		{Name: "active", Type: field.TypeBool, Default: true},
		{Name: "primary", Type: field.TypeBool, Default: false},
		{Name: "domains", Type: field.TypeJSON, Nullable: true},
		{Name: "attributes_mapping", Type: field.TypeJSON, Nullable: true, SchemaType: map[string]string{"mysql": "json", "postgres": "jsonb", "sqlite3": "text"}},
		{Name: "metadata", Type: field.TypeJSON, Nullable: true, SchemaType: map[string]string{"mysql": "json", "postgres": "jsonb", "sqlite3": "text"}},
		{Name: "organization_id", Type: field.TypeString},
	}
	// IdentityProvidersTable holds the schema information for the "identity_providers" table.
	IdentityProvidersTable = &schema.Table{
		Name:       "identity_providers",
		Columns:    IdentityProvidersColumns,
		PrimaryKey: []*schema.Column{IdentityProvidersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "identity_providers_organizations_identity_providers",
				Columns:    []*schema.Column{IdentityProvidersColumns[21]},
				RefColumns: []*schema.Column{OrganizationsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "identityprovider_organization_id",
				Unique:  false,
				Columns: []*schema.Column{IdentityProvidersColumns[21]},
			},
			{
				Name:    "identityprovider_provider_type",
				Unique:  false,
				Columns: []*schema.Column{IdentityProvidersColumns[4]},
			},
		},
	}
	// MfAsColumns holds the columns for the "mf_as" table.
	MfAsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "method", Type: field.TypeString},
		{Name: "secret", Type: field.TypeString},
		{Name: "verified", Type: field.TypeBool, Default: false},
		{Name: "active", Type: field.TypeBool, Default: true},
		{Name: "backup_codes", Type: field.TypeJSON, Nullable: true},
		{Name: "phone_number", Type: field.TypeString, Nullable: true},
		{Name: "email", Type: field.TypeString, Nullable: true},
		{Name: "last_used", Type: field.TypeTime, Nullable: true},
		{Name: "metadata", Type: field.TypeJSON, Nullable: true, SchemaType: map[string]string{"mysql": "json", "postgres": "jsonb", "sqlite3": "text"}},
		{Name: "user_id", Type: field.TypeString},
	}
	// MfAsTable holds the schema information for the "mf_as" table.
	MfAsTable = &schema.Table{
		Name:       "mf_as",
		Columns:    MfAsColumns,
		PrimaryKey: []*schema.Column{MfAsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "mf_as_users_mfa_methods",
				Columns:    []*schema.Column{MfAsColumns[12]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "mfa_user_id",
				Unique:  false,
				Columns: []*schema.Column{MfAsColumns[12]},
			},
			{
				Name:    "mfa_method_user_id",
				Unique:  true,
				Columns: []*schema.Column{MfAsColumns[3], MfAsColumns[12]},
			},
		},
	}
	// OauthAuthorizationsColumns holds the columns for the "oauth_authorizations" table.
	OauthAuthorizationsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "organization_id", Type: field.TypeString, Nullable: true},
		{Name: "code", Type: field.TypeString, Unique: true, Nullable: true},
		{Name: "code_challenge", Type: field.TypeString, Nullable: true},
		{Name: "code_challenge_method", Type: field.TypeString, Nullable: true},
		{Name: "redirect_uri", Type: field.TypeString},
		{Name: "scope_names", Type: field.TypeJSON, Nullable: true},
		{Name: "used", Type: field.TypeBool, Default: false},
		{Name: "used_at", Type: field.TypeTime},
		{Name: "expires_at", Type: field.TypeTime},
		{Name: "state", Type: field.TypeString, Nullable: true},
		{Name: "nonce", Type: field.TypeString, Nullable: true},
		{Name: "client_id", Type: field.TypeString},
		{Name: "user_id", Type: field.TypeString},
	}
	// OauthAuthorizationsTable holds the schema information for the "oauth_authorizations" table.
	OauthAuthorizationsTable = &schema.Table{
		Name:       "oauth_authorizations",
		Columns:    OauthAuthorizationsColumns,
		PrimaryKey: []*schema.Column{OauthAuthorizationsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "oauth_authorizations_oauth_clients_authorizations",
				Columns:    []*schema.Column{OauthAuthorizationsColumns[14]},
				RefColumns: []*schema.Column{OauthClientsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "oauth_authorizations_users_oauth_authorizations",
				Columns:    []*schema.Column{OauthAuthorizationsColumns[15]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "oauthauthorization_code",
				Unique:  false,
				Columns: []*schema.Column{OauthAuthorizationsColumns[4]},
			},
			{
				Name:    "oauthauthorization_client_id",
				Unique:  false,
				Columns: []*schema.Column{OauthAuthorizationsColumns[14]},
			},
			{
				Name:    "oauthauthorization_user_id",
				Unique:  false,
				Columns: []*schema.Column{OauthAuthorizationsColumns[15]},
			},
			{
				Name:    "oauthauthorization_organization_id",
				Unique:  false,
				Columns: []*schema.Column{OauthAuthorizationsColumns[3]},
			},
			{
				Name:    "oauthauthorization_expires_at",
				Unique:  false,
				Columns: []*schema.Column{OauthAuthorizationsColumns[11]},
			},
		},
	}
	// OauthClientsColumns holds the columns for the "oauth_clients" table.
	OauthClientsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "client_id", Type: field.TypeString, Unique: true},
		{Name: "client_secret", Type: field.TypeString},
		{Name: "client_name", Type: field.TypeString},
		{Name: "client_description", Type: field.TypeString, Nullable: true},
		{Name: "client_uri", Type: field.TypeString, Nullable: true},
		{Name: "logo_uri", Type: field.TypeString, Nullable: true},
		{Name: "redirect_uris", Type: field.TypeJSON},
		{Name: "post_logout_redirect_uris", Type: field.TypeJSON, Nullable: true},
		{Name: "public", Type: field.TypeBool, Default: false},
		{Name: "active", Type: field.TypeBool, Default: true},
		{Name: "allowed_cors_origins", Type: field.TypeJSON, Nullable: true},
		{Name: "allowed_grant_types", Type: field.TypeJSON},
		{Name: "token_expiry_seconds", Type: field.TypeInt, Default: 3600},
		{Name: "refresh_token_expiry_seconds", Type: field.TypeInt, Default: 2592000},
		{Name: "auth_code_expiry_seconds", Type: field.TypeInt, Default: 600},
		{Name: "requires_pkce", Type: field.TypeBool, Default: true},
		{Name: "requires_consent", Type: field.TypeBool, Default: true},
		{Name: "organization_id", Type: field.TypeString, Nullable: true},
	}
	// OauthClientsTable holds the schema information for the "oauth_clients" table.
	OauthClientsTable = &schema.Table{
		Name:       "oauth_clients",
		Columns:    OauthClientsColumns,
		PrimaryKey: []*schema.Column{OauthClientsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "oauth_clients_organizations_oauth_clients",
				Columns:    []*schema.Column{OauthClientsColumns[20]},
				RefColumns: []*schema.Column{OrganizationsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "oauthclient_client_id",
				Unique:  false,
				Columns: []*schema.Column{OauthClientsColumns[3]},
			},
			{
				Name:    "oauthclient_organization_id",
				Unique:  false,
				Columns: []*schema.Column{OauthClientsColumns[20]},
			},
		},
	}
	// OauthScopesColumns holds the columns for the "oauth_scopes" table.
	OauthScopesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString, Unique: true},
		{Name: "description", Type: field.TypeString},
		{Name: "default_scope", Type: field.TypeBool, Default: false},
		{Name: "public", Type: field.TypeBool, Default: true},
	}
	// OauthScopesTable holds the schema information for the "oauth_scopes" table.
	OauthScopesTable = &schema.Table{
		Name:       "oauth_scopes",
		Columns:    OauthScopesColumns,
		PrimaryKey: []*schema.Column{OauthScopesColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "oauthscope_name",
				Unique:  false,
				Columns: []*schema.Column{OauthScopesColumns[3]},
			},
		},
	}
	// OauthTokensColumns holds the columns for the "oauth_tokens" table.
	OauthTokensColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "access_token", Type: field.TypeString, Unique: true},
		{Name: "refresh_token", Type: field.TypeString, Unique: true, Nullable: true},
		{Name: "token_type", Type: field.TypeString, Default: "bearer"},
		{Name: "organization_id", Type: field.TypeString, Nullable: true},
		{Name: "scope_names", Type: field.TypeJSON, Nullable: true},
		{Name: "expires_in", Type: field.TypeInt, Default: 3600},
		{Name: "expires_at", Type: field.TypeTime},
		{Name: "refresh_token_expires_at", Type: field.TypeTime, Nullable: true},
		{Name: "revoked", Type: field.TypeBool, Default: false},
		{Name: "revoked_at", Type: field.TypeTime, Nullable: true},
		{Name: "ip_address", Type: field.TypeString, Nullable: true},
		{Name: "user_agent", Type: field.TypeString, Nullable: true},
		{Name: "client_id", Type: field.TypeString},
		{Name: "user_id", Type: field.TypeString},
	}
	// OauthTokensTable holds the schema information for the "oauth_tokens" table.
	OauthTokensTable = &schema.Table{
		Name:       "oauth_tokens",
		Columns:    OauthTokensColumns,
		PrimaryKey: []*schema.Column{OauthTokensColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "oauth_tokens_oauth_clients_tokens",
				Columns:    []*schema.Column{OauthTokensColumns[15]},
				RefColumns: []*schema.Column{OauthClientsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "oauth_tokens_users_oauth_tokens",
				Columns:    []*schema.Column{OauthTokensColumns[16]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "oauthtoken_access_token",
				Unique:  false,
				Columns: []*schema.Column{OauthTokensColumns[3]},
			},
			{
				Name:    "oauthtoken_refresh_token",
				Unique:  false,
				Columns: []*schema.Column{OauthTokensColumns[4]},
			},
			{
				Name:    "oauthtoken_client_id",
				Unique:  false,
				Columns: []*schema.Column{OauthTokensColumns[15]},
			},
			{
				Name:    "oauthtoken_user_id",
				Unique:  false,
				Columns: []*schema.Column{OauthTokensColumns[16]},
			},
			{
				Name:    "oauthtoken_organization_id",
				Unique:  false,
				Columns: []*schema.Column{OauthTokensColumns[6]},
			},
			{
				Name:    "oauthtoken_expires_at",
				Unique:  false,
				Columns: []*schema.Column{OauthTokensColumns[9]},
			},
		},
	}
	// OrganizationsColumns holds the columns for the "organizations" table.
	OrganizationsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString},
		{Name: "slug", Type: field.TypeString, Unique: true},
		{Name: "domain", Type: field.TypeString, Nullable: true},
		{Name: "logo_url", Type: field.TypeString, Nullable: true},
		{Name: "plan", Type: field.TypeString, Default: "free"},
		{Name: "active", Type: field.TypeBool, Default: true},
		{Name: "metadata", Type: field.TypeJSON, Nullable: true, SchemaType: map[string]string{"mysql": "json", "postgres": "jsonb", "sqlite3": "text"}},
		{Name: "trial_ends_at", Type: field.TypeTime, Nullable: true},
		{Name: "trial_used", Type: field.TypeBool, Default: false},
	}
	// OrganizationsTable holds the schema information for the "organizations" table.
	OrganizationsTable = &schema.Table{
		Name:       "organizations",
		Columns:    OrganizationsColumns,
		PrimaryKey: []*schema.Column{OrganizationsColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "organization_domain",
				Unique:  false,
				Columns: []*schema.Column{OrganizationsColumns[5]},
			},
			{
				Name:    "organization_slug",
				Unique:  false,
				Columns: []*schema.Column{OrganizationsColumns[4]},
			},
		},
	}
	// OrganizationFeaturesColumns holds the columns for the "organization_features" table.
	OrganizationFeaturesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "enabled", Type: field.TypeBool, Default: true},
		{Name: "settings", Type: field.TypeJSON, Nullable: true, SchemaType: map[string]string{"mysql": "json", "postgres": "jsonb", "sqlite3": "text"}},
		{Name: "organization_id", Type: field.TypeString},
		{Name: "feature_id", Type: field.TypeString},
	}
	// OrganizationFeaturesTable holds the schema information for the "organization_features" table.
	OrganizationFeaturesTable = &schema.Table{
		Name:       "organization_features",
		Columns:    OrganizationFeaturesColumns,
		PrimaryKey: []*schema.Column{OrganizationFeaturesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "organization_features_organizations_feature_flags",
				Columns:    []*schema.Column{OrganizationFeaturesColumns[5]},
				RefColumns: []*schema.Column{OrganizationsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "organization_features_feature_flags_feature",
				Columns:    []*schema.Column{OrganizationFeaturesColumns[6]},
				RefColumns: []*schema.Column{FeatureFlagsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "organizationfeature_organization_id",
				Unique:  false,
				Columns: []*schema.Column{OrganizationFeaturesColumns[5]},
			},
			{
				Name:    "organizationfeature_feature_id",
				Unique:  false,
				Columns: []*schema.Column{OrganizationFeaturesColumns[6]},
			},
			{
				Name:    "organizationfeature_organization_id_feature_id",
				Unique:  true,
				Columns: []*schema.Column{OrganizationFeaturesColumns[5], OrganizationFeaturesColumns[6]},
			},
		},
	}
	// PasskeysColumns holds the columns for the "passkeys" table.
	PasskeysColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString},
		{Name: "credential_id", Type: field.TypeString, Unique: true},
		{Name: "public_key", Type: field.TypeBytes},
		{Name: "sign_count", Type: field.TypeInt, Default: 0},
		{Name: "active", Type: field.TypeBool, Default: true},
		{Name: "device_type", Type: field.TypeString, Nullable: true},
		{Name: "aaguid", Type: field.TypeString, Nullable: true},
		{Name: "last_used", Type: field.TypeTime, Nullable: true},
		{Name: "transports", Type: field.TypeJSON, Nullable: true},
		{Name: "attestation", Type: field.TypeJSON, Nullable: true, SchemaType: map[string]string{"mysql": "json", "postgres": "jsonb", "sqlite3": "text"}},
		{Name: "user_id", Type: field.TypeString},
	}
	// PasskeysTable holds the schema information for the "passkeys" table.
	PasskeysTable = &schema.Table{
		Name:       "passkeys",
		Columns:    PasskeysColumns,
		PrimaryKey: []*schema.Column{PasskeysColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "passkeys_users_passkeys",
				Columns:    []*schema.Column{PasskeysColumns[13]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "passkey_user_id",
				Unique:  false,
				Columns: []*schema.Column{PasskeysColumns[13]},
			},
			{
				Name:    "passkey_credential_id",
				Unique:  false,
				Columns: []*schema.Column{PasskeysColumns[4]},
			},
		},
	}
	// PermissionsColumns holds the columns for the "permissions" table.
	PermissionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString, Unique: true},
		{Name: "description", Type: field.TypeString},
		{Name: "resource", Type: field.TypeString},
		{Name: "action", Type: field.TypeString},
		{Name: "conditions", Type: field.TypeString, Nullable: true},
		{Name: "system", Type: field.TypeBool, Default: false},
	}
	// PermissionsTable holds the schema information for the "permissions" table.
	PermissionsTable = &schema.Table{
		Name:       "permissions",
		Columns:    PermissionsColumns,
		PrimaryKey: []*schema.Column{PermissionsColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "permission_name",
				Unique:  false,
				Columns: []*schema.Column{PermissionsColumns[3]},
			},
			{
				Name:    "permission_resource_action",
				Unique:  true,
				Columns: []*schema.Column{PermissionsColumns[5], PermissionsColumns[6]},
			},
		},
	}
	// RolesColumns holds the columns for the "roles" table.
	RolesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "organization_id", Type: field.TypeString, Nullable: true},
		{Name: "system", Type: field.TypeBool, Default: false},
		{Name: "is_default", Type: field.TypeBool, Default: false},
	}
	// RolesTable holds the schema information for the "roles" table.
	RolesTable = &schema.Table{
		Name:       "roles",
		Columns:    RolesColumns,
		PrimaryKey: []*schema.Column{RolesColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "role_organization_id",
				Unique:  false,
				Columns: []*schema.Column{RolesColumns[5]},
			},
			{
				Name:    "role_organization_id_name",
				Unique:  true,
				Columns: []*schema.Column{RolesColumns[5], RolesColumns[3]},
			},
		},
	}
	// SSOStatesColumns holds the columns for the "sso_states" table.
	SSOStatesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "state", Type: field.TypeString, Unique: true},
		{Name: "data", Type: field.TypeString, Size: 4096},
		{Name: "expires_at", Type: field.TypeTime},
	}
	// SSOStatesTable holds the schema information for the "sso_states" table.
	SSOStatesTable = &schema.Table{
		Name:       "sso_states",
		Columns:    SSOStatesColumns,
		PrimaryKey: []*schema.Column{SSOStatesColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "ssostate_expires_at",
				Unique:  false,
				Columns: []*schema.Column{SSOStatesColumns[5]},
			},
		},
	}
	// SessionsColumns holds the columns for the "sessions" table.
	SessionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "token", Type: field.TypeString, Unique: true},
		{Name: "ip_address", Type: field.TypeString, Nullable: true},
		{Name: "user_agent", Type: field.TypeString, Nullable: true},
		{Name: "device_id", Type: field.TypeString, Nullable: true},
		{Name: "location", Type: field.TypeString, Nullable: true},
		{Name: "organization_id", Type: field.TypeString, Nullable: true},
		{Name: "active", Type: field.TypeBool, Default: true},
		{Name: "expires_at", Type: field.TypeTime},
		{Name: "last_active_at", Type: field.TypeTime},
		{Name: "metadata", Type: field.TypeJSON, Nullable: true, SchemaType: map[string]string{"mysql": "json", "postgres": "jsonb", "sqlite3": "text"}},
		{Name: "user_id", Type: field.TypeString},
	}
	// SessionsTable holds the schema information for the "sessions" table.
	SessionsTable = &schema.Table{
		Name:       "sessions",
		Columns:    SessionsColumns,
		PrimaryKey: []*schema.Column{SessionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "sessions_users_sessions",
				Columns:    []*schema.Column{SessionsColumns[13]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "session_user_id",
				Unique:  false,
				Columns: []*schema.Column{SessionsColumns[13]},
			},
			{
				Name:    "session_organization_id",
				Unique:  false,
				Columns: []*schema.Column{SessionsColumns[8]},
			},
			{
				Name:    "session_token",
				Unique:  false,
				Columns: []*schema.Column{SessionsColumns[3]},
			},
			{
				Name:    "session_expires_at",
				Unique:  false,
				Columns: []*schema.Column{SessionsColumns[10]},
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "email", Type: field.TypeString, Unique: true},
		{Name: "phone_number", Type: field.TypeString, Nullable: true},
		{Name: "first_name", Type: field.TypeString, Nullable: true},
		{Name: "last_name", Type: field.TypeString, Nullable: true},
		{Name: "password_hash", Type: field.TypeString, Nullable: true},
		{Name: "email_verified", Type: field.TypeBool, Default: false},
		{Name: "phone_verified", Type: field.TypeBool, Default: false},
		{Name: "active", Type: field.TypeBool, Default: true},
		{Name: "last_login", Type: field.TypeTime, Nullable: true},
		{Name: "last_password_change", Type: field.TypeTime, Nullable: true},
		{Name: "metadata", Type: field.TypeJSON, Nullable: true, SchemaType: map[string]string{"mysql": "json", "postgres": "jsonb", "sqlite3": "text"}},
		{Name: "profile_image_url", Type: field.TypeString, Nullable: true},
		{Name: "primary_organization_id", Type: field.TypeString, Nullable: true},
		{Name: "locale", Type: field.TypeString, Default: "en"},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "user_email",
				Unique:  false,
				Columns: []*schema.Column{UsersColumns[3]},
			},
			{
				Name:    "user_phone_number",
				Unique:  true,
				Columns: []*schema.Column{UsersColumns[4]},
			},
		},
	}
	// VerificationsColumns holds the columns for the "verifications" table.
	VerificationsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "type", Type: field.TypeString},
		{Name: "token", Type: field.TypeString, Unique: true},
		{Name: "email", Type: field.TypeString, Nullable: true},
		{Name: "phone_number", Type: field.TypeString, Nullable: true},
		{Name: "redirect_url", Type: field.TypeString, Nullable: true},
		{Name: "used", Type: field.TypeBool, Default: false},
		{Name: "used_at", Type: field.TypeTime, Nullable: true},
		{Name: "attempts", Type: field.TypeInt, Default: 0},
		{Name: "expires_at", Type: field.TypeTime},
		{Name: "ip_address", Type: field.TypeString, Nullable: true},
		{Name: "user_agent", Type: field.TypeString, Nullable: true},
		{Name: "attestation", Type: field.TypeJSON, Nullable: true, SchemaType: map[string]string{"mysql": "json", "postgres": "jsonb", "sqlite3": "text"}},
		{Name: "user_id", Type: field.TypeString},
	}
	// VerificationsTable holds the schema information for the "verifications" table.
	VerificationsTable = &schema.Table{
		Name:       "verifications",
		Columns:    VerificationsColumns,
		PrimaryKey: []*schema.Column{VerificationsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "verifications_users_verifications",
				Columns:    []*schema.Column{VerificationsColumns[15]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "verification_user_id",
				Unique:  false,
				Columns: []*schema.Column{VerificationsColumns[15]},
			},
			{
				Name:    "verification_token",
				Unique:  false,
				Columns: []*schema.Column{VerificationsColumns[4]},
			},
			{
				Name:    "verification_email",
				Unique:  false,
				Columns: []*schema.Column{VerificationsColumns[5]},
			},
			{
				Name:    "verification_phone_number",
				Unique:  false,
				Columns: []*schema.Column{VerificationsColumns[6]},
			},
			{
				Name:    "verification_expires_at",
				Unique:  false,
				Columns: []*schema.Column{VerificationsColumns[11]},
			},
		},
	}
	// WebhooksColumns holds the columns for the "webhooks" table.
	WebhooksColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString},
		{Name: "url", Type: field.TypeString},
		{Name: "secret", Type: field.TypeString},
		{Name: "active", Type: field.TypeBool, Default: true},
		{Name: "event_types", Type: field.TypeJSON},
		{Name: "version", Type: field.TypeString, Default: "v1"},
		{Name: "retry_count", Type: field.TypeInt, Default: 3},
		{Name: "timeout_ms", Type: field.TypeInt, Default: 5000},
		{Name: "format", Type: field.TypeEnum, Enums: []string{"json", "form"}, Default: "json"},
		{Name: "metadata", Type: field.TypeJSON, Nullable: true, SchemaType: map[string]string{"mysql": "json", "postgres": "jsonb", "sqlite3": "text"}},
		{Name: "organization_id", Type: field.TypeString},
	}
	// WebhooksTable holds the schema information for the "webhooks" table.
	WebhooksTable = &schema.Table{
		Name:       "webhooks",
		Columns:    WebhooksColumns,
		PrimaryKey: []*schema.Column{WebhooksColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "webhooks_organizations_webhooks",
				Columns:    []*schema.Column{WebhooksColumns[13]},
				RefColumns: []*schema.Column{OrganizationsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "webhook_organization_id",
				Unique:  false,
				Columns: []*schema.Column{WebhooksColumns[13]},
			},
		},
	}
	// WebhookEventsColumns holds the columns for the "webhook_events" table.
	WebhookEventsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "event_type", Type: field.TypeString},
		{Name: "headers", Type: field.TypeJSON, Nullable: true, SchemaType: map[string]string{"mysql": "json", "postgres": "jsonb", "sqlite3": "text"}},
		{Name: "payload", Type: field.TypeJSON, Nullable: true, SchemaType: map[string]string{"mysql": "json", "postgres": "jsonb", "sqlite3": "text"}},
		{Name: "delivered", Type: field.TypeBool, Default: false},
		{Name: "delivered_at", Type: field.TypeTime, Nullable: true},
		{Name: "attempts", Type: field.TypeInt, Default: 0},
		{Name: "next_retry", Type: field.TypeTime, Nullable: true},
		{Name: "status_code", Type: field.TypeInt, Nullable: true},
		{Name: "response_body", Type: field.TypeString, Nullable: true},
		{Name: "error", Type: field.TypeString, Nullable: true},
		{Name: "webhook_id", Type: field.TypeString},
	}
	// WebhookEventsTable holds the schema information for the "webhook_events" table.
	WebhookEventsTable = &schema.Table{
		Name:       "webhook_events",
		Columns:    WebhookEventsColumns,
		PrimaryKey: []*schema.Column{WebhookEventsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "webhook_events_webhooks_events",
				Columns:    []*schema.Column{WebhookEventsColumns[13]},
				RefColumns: []*schema.Column{WebhooksColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "webhookevent_webhook_id",
				Unique:  false,
				Columns: []*schema.Column{WebhookEventsColumns[13]},
			},
			{
				Name:    "webhookevent_event_type",
				Unique:  false,
				Columns: []*schema.Column{WebhookEventsColumns[3]},
			},
			{
				Name:    "webhookevent_delivered",
				Unique:  false,
				Columns: []*schema.Column{WebhookEventsColumns[6]},
			},
			{
				Name:    "webhookevent_next_retry",
				Unique:  false,
				Columns: []*schema.Column{WebhookEventsColumns[9]},
			},
		},
	}
	// OauthAuthorizationScopesColumns holds the columns for the "oauth_authorization_scopes" table.
	OauthAuthorizationScopesColumns = []*schema.Column{
		{Name: "oauth_authorization_id", Type: field.TypeString},
		{Name: "oauth_scope_id", Type: field.TypeString},
	}
	// OauthAuthorizationScopesTable holds the schema information for the "oauth_authorization_scopes" table.
	OauthAuthorizationScopesTable = &schema.Table{
		Name:       "oauth_authorization_scopes",
		Columns:    OauthAuthorizationScopesColumns,
		PrimaryKey: []*schema.Column{OauthAuthorizationScopesColumns[0], OauthAuthorizationScopesColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "oauth_authorization_scopes_oauth_authorization_id",
				Columns:    []*schema.Column{OauthAuthorizationScopesColumns[0]},
				RefColumns: []*schema.Column{OauthAuthorizationsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "oauth_authorization_scopes_oauth_scope_id",
				Columns:    []*schema.Column{OauthAuthorizationScopesColumns[1]},
				RefColumns: []*schema.Column{OauthScopesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// OauthClientScopesColumns holds the columns for the "oauth_client_scopes" table.
	OauthClientScopesColumns = []*schema.Column{
		{Name: "oauth_client_id", Type: field.TypeString},
		{Name: "oauth_scope_id", Type: field.TypeString},
	}
	// OauthClientScopesTable holds the schema information for the "oauth_client_scopes" table.
	OauthClientScopesTable = &schema.Table{
		Name:       "oauth_client_scopes",
		Columns:    OauthClientScopesColumns,
		PrimaryKey: []*schema.Column{OauthClientScopesColumns[0], OauthClientScopesColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "oauth_client_scopes_oauth_client_id",
				Columns:    []*schema.Column{OauthClientScopesColumns[0]},
				RefColumns: []*schema.Column{OauthClientsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "oauth_client_scopes_oauth_scope_id",
				Columns:    []*schema.Column{OauthClientScopesColumns[1]},
				RefColumns: []*schema.Column{OauthScopesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// OauthTokenScopesColumns holds the columns for the "oauth_token_scopes" table.
	OauthTokenScopesColumns = []*schema.Column{
		{Name: "oauth_token_id", Type: field.TypeString},
		{Name: "oauth_scope_id", Type: field.TypeString},
	}
	// OauthTokenScopesTable holds the schema information for the "oauth_token_scopes" table.
	OauthTokenScopesTable = &schema.Table{
		Name:       "oauth_token_scopes",
		Columns:    OauthTokenScopesColumns,
		PrimaryKey: []*schema.Column{OauthTokenScopesColumns[0], OauthTokenScopesColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "oauth_token_scopes_oauth_token_id",
				Columns:    []*schema.Column{OauthTokenScopesColumns[0]},
				RefColumns: []*schema.Column{OauthTokensColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "oauth_token_scopes_oauth_scope_id",
				Columns:    []*schema.Column{OauthTokenScopesColumns[1]},
				RefColumns: []*schema.Column{OauthScopesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// OrganizationUsersColumns holds the columns for the "organization_users" table.
	OrganizationUsersColumns = []*schema.Column{
		{Name: "organization_id", Type: field.TypeString},
		{Name: "user_id", Type: field.TypeString},
	}
	// OrganizationUsersTable holds the schema information for the "organization_users" table.
	OrganizationUsersTable = &schema.Table{
		Name:       "organization_users",
		Columns:    OrganizationUsersColumns,
		PrimaryKey: []*schema.Column{OrganizationUsersColumns[0], OrganizationUsersColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "organization_users_organization_id",
				Columns:    []*schema.Column{OrganizationUsersColumns[0]},
				RefColumns: []*schema.Column{OrganizationsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "organization_users_user_id",
				Columns:    []*schema.Column{OrganizationUsersColumns[1]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// RolePermissionsColumns holds the columns for the "role_permissions" table.
	RolePermissionsColumns = []*schema.Column{
		{Name: "role_id", Type: field.TypeString},
		{Name: "permission_id", Type: field.TypeString},
	}
	// RolePermissionsTable holds the schema information for the "role_permissions" table.
	RolePermissionsTable = &schema.Table{
		Name:       "role_permissions",
		Columns:    RolePermissionsColumns,
		PrimaryKey: []*schema.Column{RolePermissionsColumns[0], RolePermissionsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "role_permissions_role_id",
				Columns:    []*schema.Column{RolePermissionsColumns[0]},
				RefColumns: []*schema.Column{RolesColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "role_permissions_permission_id",
				Columns:    []*schema.Column{RolePermissionsColumns[1]},
				RefColumns: []*schema.Column{PermissionsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// UserRolesColumns holds the columns for the "user_roles" table.
	UserRolesColumns = []*schema.Column{
		{Name: "user_id", Type: field.TypeString},
		{Name: "role_id", Type: field.TypeString},
	}
	// UserRolesTable holds the schema information for the "user_roles" table.
	UserRolesTable = &schema.Table{
		Name:       "user_roles",
		Columns:    UserRolesColumns,
		PrimaryKey: []*schema.Column{UserRolesColumns[0], UserRolesColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_roles_user_id",
				Columns:    []*schema.Column{UserRolesColumns[0]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "user_roles_role_id",
				Columns:    []*schema.Column{UserRolesColumns[1]},
				RefColumns: []*schema.Column{RolesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		APIKeysTable,
		EmailTemplatesTable,
		FeatureFlagsTable,
		IdentityProvidersTable,
		MfAsTable,
		OauthAuthorizationsTable,
		OauthClientsTable,
		OauthScopesTable,
		OauthTokensTable,
		OrganizationsTable,
		OrganizationFeaturesTable,
		PasskeysTable,
		PermissionsTable,
		RolesTable,
		SSOStatesTable,
		SessionsTable,
		UsersTable,
		VerificationsTable,
		WebhooksTable,
		WebhookEventsTable,
		OauthAuthorizationScopesTable,
		OauthClientScopesTable,
		OauthTokenScopesTable,
		OrganizationUsersTable,
		RolePermissionsTable,
		UserRolesTable,
	}
)

func init() {
	APIKeysTable.ForeignKeys[0].RefTable = OrganizationsTable
	APIKeysTable.ForeignKeys[1].RefTable = UsersTable
	IdentityProvidersTable.ForeignKeys[0].RefTable = OrganizationsTable
	MfAsTable.ForeignKeys[0].RefTable = UsersTable
	OauthAuthorizationsTable.ForeignKeys[0].RefTable = OauthClientsTable
	OauthAuthorizationsTable.ForeignKeys[1].RefTable = UsersTable
	OauthClientsTable.ForeignKeys[0].RefTable = OrganizationsTable
	OauthTokensTable.ForeignKeys[0].RefTable = OauthClientsTable
	OauthTokensTable.ForeignKeys[1].RefTable = UsersTable
	OrganizationFeaturesTable.ForeignKeys[0].RefTable = OrganizationsTable
	OrganizationFeaturesTable.ForeignKeys[1].RefTable = FeatureFlagsTable
	PasskeysTable.ForeignKeys[0].RefTable = UsersTable
	SessionsTable.ForeignKeys[0].RefTable = UsersTable
	VerificationsTable.ForeignKeys[0].RefTable = UsersTable
	WebhooksTable.ForeignKeys[0].RefTable = OrganizationsTable
	WebhookEventsTable.ForeignKeys[0].RefTable = WebhooksTable
	OauthAuthorizationScopesTable.ForeignKeys[0].RefTable = OauthAuthorizationsTable
	OauthAuthorizationScopesTable.ForeignKeys[1].RefTable = OauthScopesTable
	OauthClientScopesTable.ForeignKeys[0].RefTable = OauthClientsTable
	OauthClientScopesTable.ForeignKeys[1].RefTable = OauthScopesTable
	OauthTokenScopesTable.ForeignKeys[0].RefTable = OauthTokensTable
	OauthTokenScopesTable.ForeignKeys[1].RefTable = OauthScopesTable
	OrganizationUsersTable.ForeignKeys[0].RefTable = OrganizationsTable
	OrganizationUsersTable.ForeignKeys[1].RefTable = UsersTable
	RolePermissionsTable.ForeignKeys[0].RefTable = RolesTable
	RolePermissionsTable.ForeignKeys[1].RefTable = PermissionsTable
	UserRolesTable.ForeignKeys[0].RefTable = UsersTable
	UserRolesTable.ForeignKeys[1].RefTable = RolesTable
}
