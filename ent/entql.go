// Copyright 2023-present XRaph LLC. All rights reserved.
// This source code is licensed under the XRaph LLC license found
// in the LICENSE file in the root directory of this source tree.
// Code generated by ent, DO NOT EDIT.

package ent

import (
	"github.com/xraph/frank/ent/activity"
	"github.com/xraph/frank/ent/apikey"
	"github.com/xraph/frank/ent/apikeyactivity"
	"github.com/xraph/frank/ent/audit"
	"github.com/xraph/frank/ent/emailtemplate"
	"github.com/xraph/frank/ent/featureflag"
	"github.com/xraph/frank/ent/identityprovider"
	"github.com/xraph/frank/ent/membership"
	"github.com/xraph/frank/ent/mfa"
	"github.com/xraph/frank/ent/oauthauthorization"
	"github.com/xraph/frank/ent/oauthclient"
	"github.com/xraph/frank/ent/oauthscope"
	"github.com/xraph/frank/ent/oauthtoken"
	"github.com/xraph/frank/ent/organization"
	"github.com/xraph/frank/ent/organizationfeature"
	"github.com/xraph/frank/ent/organizationprovider"
	"github.com/xraph/frank/ent/passkey"
	"github.com/xraph/frank/ent/permission"
	"github.com/xraph/frank/ent/permissiondependency"
	"github.com/xraph/frank/ent/predicate"
	"github.com/xraph/frank/ent/providertemplate"
	"github.com/xraph/frank/ent/role"
	"github.com/xraph/frank/ent/session"
	"github.com/xraph/frank/ent/smstemplate"
	"github.com/xraph/frank/ent/ssostate"
	"github.com/xraph/frank/ent/user"
	"github.com/xraph/frank/ent/userpermission"
	"github.com/xraph/frank/ent/userrole"
	"github.com/xraph/frank/ent/verification"
	"github.com/xraph/frank/ent/webhook"
	"github.com/xraph/frank/ent/webhookevent"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 30)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   activity.Table,
			Columns: activity.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: activity.FieldID,
			},
		},
		Type: "Activity",
		Fields: map[string]*sqlgraph.FieldSpec{
			activity.FieldResourceType:   {Type: field.TypeEnum, Column: activity.FieldResourceType},
			activity.FieldResourceID:     {Type: field.TypeString, Column: activity.FieldResourceID},
			activity.FieldUserID:         {Type: field.TypeString, Column: activity.FieldUserID},
			activity.FieldOrganizationID: {Type: field.TypeString, Column: activity.FieldOrganizationID},
			activity.FieldSessionID:      {Type: field.TypeString, Column: activity.FieldSessionID},
			activity.FieldAction:         {Type: field.TypeString, Column: activity.FieldAction},
			activity.FieldCategory:       {Type: field.TypeString, Column: activity.FieldCategory},
			activity.FieldSource:         {Type: field.TypeString, Column: activity.FieldSource},
			activity.FieldEndpoint:       {Type: field.TypeString, Column: activity.FieldEndpoint},
			activity.FieldMethod:         {Type: field.TypeString, Column: activity.FieldMethod},
			activity.FieldStatusCode:     {Type: field.TypeInt, Column: activity.FieldStatusCode},
			activity.FieldResponseTime:   {Type: field.TypeInt, Column: activity.FieldResponseTime},
			activity.FieldIPAddress:      {Type: field.TypeString, Column: activity.FieldIPAddress},
			activity.FieldUserAgent:      {Type: field.TypeString, Column: activity.FieldUserAgent},
			activity.FieldLocation:       {Type: field.TypeString, Column: activity.FieldLocation},
			activity.FieldSuccess:        {Type: field.TypeBool, Column: activity.FieldSuccess},
			activity.FieldError:          {Type: field.TypeString, Column: activity.FieldError},
			activity.FieldErrorCode:      {Type: field.TypeString, Column: activity.FieldErrorCode},
			activity.FieldSize:           {Type: field.TypeInt, Column: activity.FieldSize},
			activity.FieldCount:          {Type: field.TypeInt, Column: activity.FieldCount},
			activity.FieldValue:          {Type: field.TypeFloat64, Column: activity.FieldValue},
			activity.FieldTimestamp:      {Type: field.TypeTime, Column: activity.FieldTimestamp},
			activity.FieldExpiresAt:      {Type: field.TypeTime, Column: activity.FieldExpiresAt},
			activity.FieldMetadata:       {Type: field.TypeJSON, Column: activity.FieldMetadata},
			activity.FieldTags:           {Type: field.TypeJSON, Column: activity.FieldTags},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   apikey.Table,
			Columns: apikey.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: apikey.FieldID,
			},
		},
		Type: "ApiKey",
		Fields: map[string]*sqlgraph.FieldSpec{
			apikey.FieldCreatedAt:       {Type: field.TypeTime, Column: apikey.FieldCreatedAt},
			apikey.FieldUpdatedAt:       {Type: field.TypeTime, Column: apikey.FieldUpdatedAt},
			apikey.FieldDeletedAt:       {Type: field.TypeTime, Column: apikey.FieldDeletedAt},
			apikey.FieldName:            {Type: field.TypeString, Column: apikey.FieldName},
			apikey.FieldPublicKey:       {Type: field.TypeString, Column: apikey.FieldPublicKey},
			apikey.FieldSecretKey:       {Type: field.TypeString, Column: apikey.FieldSecretKey},
			apikey.FieldHashedSecretKey: {Type: field.TypeString, Column: apikey.FieldHashedSecretKey},
			apikey.FieldKey:             {Type: field.TypeString, Column: apikey.FieldKey},
			apikey.FieldHashedKey:       {Type: field.TypeString, Column: apikey.FieldHashedKey},
			apikey.FieldUserID:          {Type: field.TypeString, Column: apikey.FieldUserID},
			apikey.FieldOrganizationID:  {Type: field.TypeString, Column: apikey.FieldOrganizationID},
			apikey.FieldType:            {Type: field.TypeEnum, Column: apikey.FieldType},
			apikey.FieldEnvironment:     {Type: field.TypeEnum, Column: apikey.FieldEnvironment},
			apikey.FieldActive:          {Type: field.TypeBool, Column: apikey.FieldActive},
			apikey.FieldPermissions:     {Type: field.TypeJSON, Column: apikey.FieldPermissions},
			apikey.FieldScopes:          {Type: field.TypeJSON, Column: apikey.FieldScopes},
			apikey.FieldIPWhitelist:     {Type: field.TypeJSON, Column: apikey.FieldIPWhitelist},
			apikey.FieldRateLimits:      {Type: field.TypeJSON, Column: apikey.FieldRateLimits},
			apikey.FieldMetadata:        {Type: field.TypeJSON, Column: apikey.FieldMetadata},
			apikey.FieldLastUsed:        {Type: field.TypeTime, Column: apikey.FieldLastUsed},
			apikey.FieldExpiresAt:       {Type: field.TypeTime, Column: apikey.FieldExpiresAt},
		},
	}
	graph.Nodes[2] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   apikeyactivity.Table,
			Columns: apikeyactivity.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: apikeyactivity.FieldID,
			},
		},
		Type: "ApiKeyActivity",
		Fields: map[string]*sqlgraph.FieldSpec{
			apikeyactivity.FieldKeyID:        {Type: field.TypeString, Column: apikeyactivity.FieldKeyID},
			apikeyactivity.FieldAction:       {Type: field.TypeString, Column: apikeyactivity.FieldAction},
			apikeyactivity.FieldEndpoint:     {Type: field.TypeString, Column: apikeyactivity.FieldEndpoint},
			apikeyactivity.FieldMethod:       {Type: field.TypeString, Column: apikeyactivity.FieldMethod},
			apikeyactivity.FieldStatusCode:   {Type: field.TypeInt, Column: apikeyactivity.FieldStatusCode},
			apikeyactivity.FieldResponseTime: {Type: field.TypeInt, Column: apikeyactivity.FieldResponseTime},
			apikeyactivity.FieldIPAddress:    {Type: field.TypeString, Column: apikeyactivity.FieldIPAddress},
			apikeyactivity.FieldUserAgent:    {Type: field.TypeString, Column: apikeyactivity.FieldUserAgent},
			apikeyactivity.FieldSuccess:      {Type: field.TypeBool, Column: apikeyactivity.FieldSuccess},
			apikeyactivity.FieldError:        {Type: field.TypeString, Column: apikeyactivity.FieldError},
			apikeyactivity.FieldTimestamp:    {Type: field.TypeTime, Column: apikeyactivity.FieldTimestamp},
			apikeyactivity.FieldMetadata:     {Type: field.TypeJSON, Column: apikeyactivity.FieldMetadata},
		},
	}
	graph.Nodes[3] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   audit.Table,
			Columns: audit.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: audit.FieldID,
			},
		},
		Type: "Audit",
		Fields: map[string]*sqlgraph.FieldSpec{
			audit.FieldDeletedAt:      {Type: field.TypeTime, Column: audit.FieldDeletedAt},
			audit.FieldCreatedAt:      {Type: field.TypeTime, Column: audit.FieldCreatedAt},
			audit.FieldUpdatedAt:      {Type: field.TypeTime, Column: audit.FieldUpdatedAt},
			audit.FieldUserID:         {Type: field.TypeString, Column: audit.FieldUserID},
			audit.FieldOrganizationID: {Type: field.TypeString, Column: audit.FieldOrganizationID},
			audit.FieldSessionID:      {Type: field.TypeString, Column: audit.FieldSessionID},
			audit.FieldAction:         {Type: field.TypeString, Column: audit.FieldAction},
			audit.FieldResourceType:   {Type: field.TypeString, Column: audit.FieldResourceType},
			audit.FieldResourceID:     {Type: field.TypeString, Column: audit.FieldResourceID},
			audit.FieldStatus:         {Type: field.TypeString, Column: audit.FieldStatus},
			audit.FieldIPAddress:      {Type: field.TypeString, Column: audit.FieldIPAddress},
			audit.FieldUserAgent:      {Type: field.TypeString, Column: audit.FieldUserAgent},
			audit.FieldLocation:       {Type: field.TypeString, Column: audit.FieldLocation},
			audit.FieldDeviceID:       {Type: field.TypeString, Column: audit.FieldDeviceID},
			audit.FieldRequestID:      {Type: field.TypeString, Column: audit.FieldRequestID},
			audit.FieldErrorCode:      {Type: field.TypeString, Column: audit.FieldErrorCode},
			audit.FieldErrorMessage:   {Type: field.TypeString, Column: audit.FieldErrorMessage},
			audit.FieldDescription:    {Type: field.TypeString, Column: audit.FieldDescription},
			audit.FieldMetadata:       {Type: field.TypeJSON, Column: audit.FieldMetadata},
			audit.FieldOldValues:      {Type: field.TypeJSON, Column: audit.FieldOldValues},
			audit.FieldCurrentValues:  {Type: field.TypeJSON, Column: audit.FieldCurrentValues},
			audit.FieldTimestamp:      {Type: field.TypeTime, Column: audit.FieldTimestamp},
		},
	}
	graph.Nodes[4] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   emailtemplate.Table,
			Columns: emailtemplate.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: emailtemplate.FieldID,
			},
		},
		Type: "EmailTemplate",
		Fields: map[string]*sqlgraph.FieldSpec{
			emailtemplate.FieldCreatedAt:      {Type: field.TypeTime, Column: emailtemplate.FieldCreatedAt},
			emailtemplate.FieldUpdatedAt:      {Type: field.TypeTime, Column: emailtemplate.FieldUpdatedAt},
			emailtemplate.FieldDeletedAt:      {Type: field.TypeTime, Column: emailtemplate.FieldDeletedAt},
			emailtemplate.FieldName:           {Type: field.TypeString, Column: emailtemplate.FieldName},
			emailtemplate.FieldSubject:        {Type: field.TypeString, Column: emailtemplate.FieldSubject},
			emailtemplate.FieldType:           {Type: field.TypeString, Column: emailtemplate.FieldType},
			emailtemplate.FieldHTMLContent:    {Type: field.TypeString, Column: emailtemplate.FieldHTMLContent},
			emailtemplate.FieldTextContent:    {Type: field.TypeString, Column: emailtemplate.FieldTextContent},
			emailtemplate.FieldOrganizationID: {Type: field.TypeString, Column: emailtemplate.FieldOrganizationID},
			emailtemplate.FieldActive:         {Type: field.TypeBool, Column: emailtemplate.FieldActive},
			emailtemplate.FieldSystem:         {Type: field.TypeBool, Column: emailtemplate.FieldSystem},
			emailtemplate.FieldLocale:         {Type: field.TypeString, Column: emailtemplate.FieldLocale},
			emailtemplate.FieldMetadata:       {Type: field.TypeJSON, Column: emailtemplate.FieldMetadata},
		},
	}
	graph.Nodes[5] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   featureflag.Table,
			Columns: featureflag.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: featureflag.FieldID,
			},
		},
		Type: "FeatureFlag",
		Fields: map[string]*sqlgraph.FieldSpec{
			featureflag.FieldCreatedAt:   {Type: field.TypeTime, Column: featureflag.FieldCreatedAt},
			featureflag.FieldUpdatedAt:   {Type: field.TypeTime, Column: featureflag.FieldUpdatedAt},
			featureflag.FieldDeletedAt:   {Type: field.TypeTime, Column: featureflag.FieldDeletedAt},
			featureflag.FieldName:        {Type: field.TypeString, Column: featureflag.FieldName},
			featureflag.FieldKey:         {Type: field.TypeString, Column: featureflag.FieldKey},
			featureflag.FieldDescription: {Type: field.TypeString, Column: featureflag.FieldDescription},
			featureflag.FieldEnabled:     {Type: field.TypeBool, Column: featureflag.FieldEnabled},
			featureflag.FieldIsPremium:   {Type: field.TypeBool, Column: featureflag.FieldIsPremium},
			featureflag.FieldComponent:   {Type: field.TypeEnum, Column: featureflag.FieldComponent},
		},
	}
	graph.Nodes[6] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   identityprovider.Table,
			Columns: identityprovider.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: identityprovider.FieldID,
			},
		},
		Type: "IdentityProvider",
		Fields: map[string]*sqlgraph.FieldSpec{
			identityprovider.FieldCreatedAt:             {Type: field.TypeTime, Column: identityprovider.FieldCreatedAt},
			identityprovider.FieldUpdatedAt:             {Type: field.TypeTime, Column: identityprovider.FieldUpdatedAt},
			identityprovider.FieldDeletedAt:             {Type: field.TypeTime, Column: identityprovider.FieldDeletedAt},
			identityprovider.FieldName:                  {Type: field.TypeString, Column: identityprovider.FieldName},
			identityprovider.FieldOrganizationID:        {Type: field.TypeString, Column: identityprovider.FieldOrganizationID},
			identityprovider.FieldProviderType:          {Type: field.TypeString, Column: identityprovider.FieldProviderType},
			identityprovider.FieldClientID:              {Type: field.TypeString, Column: identityprovider.FieldClientID},
			identityprovider.FieldClientSecret:          {Type: field.TypeString, Column: identityprovider.FieldClientSecret},
			identityprovider.FieldIssuer:                {Type: field.TypeString, Column: identityprovider.FieldIssuer},
			identityprovider.FieldAuthorizationEndpoint: {Type: field.TypeString, Column: identityprovider.FieldAuthorizationEndpoint},
			identityprovider.FieldTokenEndpoint:         {Type: field.TypeString, Column: identityprovider.FieldTokenEndpoint},
			identityprovider.FieldUserinfoEndpoint:      {Type: field.TypeString, Column: identityprovider.FieldUserinfoEndpoint},
			identityprovider.FieldJwksURI:               {Type: field.TypeString, Column: identityprovider.FieldJwksURI},
			identityprovider.FieldMetadataURL:           {Type: field.TypeString, Column: identityprovider.FieldMetadataURL},
			identityprovider.FieldRedirectURI:           {Type: field.TypeString, Column: identityprovider.FieldRedirectURI},
			identityprovider.FieldCertificate:           {Type: field.TypeString, Column: identityprovider.FieldCertificate},
			identityprovider.FieldPrivateKey:            {Type: field.TypeString, Column: identityprovider.FieldPrivateKey},
			identityprovider.FieldActive:                {Type: field.TypeBool, Column: identityprovider.FieldActive},
			identityprovider.FieldEnabled:               {Type: field.TypeBool, Column: identityprovider.FieldEnabled},
			identityprovider.FieldPrimary:               {Type: field.TypeBool, Column: identityprovider.FieldPrimary},
			identityprovider.FieldAutoProvision:         {Type: field.TypeBool, Column: identityprovider.FieldAutoProvision},
			identityprovider.FieldDefaultRole:           {Type: field.TypeString, Column: identityprovider.FieldDefaultRole},
			identityprovider.FieldDomain:                {Type: field.TypeString, Column: identityprovider.FieldDomain},
			identityprovider.FieldIconURL:               {Type: field.TypeString, Column: identityprovider.FieldIconURL},
			identityprovider.FieldButtonText:            {Type: field.TypeString, Column: identityprovider.FieldButtonText},
			identityprovider.FieldProtocol:              {Type: field.TypeString, Column: identityprovider.FieldProtocol},
			identityprovider.FieldDomains:               {Type: field.TypeJSON, Column: identityprovider.FieldDomains},
			identityprovider.FieldAttributesMapping:     {Type: field.TypeJSON, Column: identityprovider.FieldAttributesMapping},
			identityprovider.FieldMetadata:              {Type: field.TypeJSON, Column: identityprovider.FieldMetadata},
		},
	}
	graph.Nodes[7] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   mfa.Table,
			Columns: mfa.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: mfa.FieldID,
			},
		},
		Type: "MFA",
		Fields: map[string]*sqlgraph.FieldSpec{
			mfa.FieldCreatedAt:   {Type: field.TypeTime, Column: mfa.FieldCreatedAt},
			mfa.FieldUpdatedAt:   {Type: field.TypeTime, Column: mfa.FieldUpdatedAt},
			mfa.FieldDeletedAt:   {Type: field.TypeTime, Column: mfa.FieldDeletedAt},
			mfa.FieldUserID:      {Type: field.TypeString, Column: mfa.FieldUserID},
			mfa.FieldMethod:      {Type: field.TypeString, Column: mfa.FieldMethod},
			mfa.FieldSecret:      {Type: field.TypeString, Column: mfa.FieldSecret},
			mfa.FieldVerified:    {Type: field.TypeBool, Column: mfa.FieldVerified},
			mfa.FieldActive:      {Type: field.TypeBool, Column: mfa.FieldActive},
			mfa.FieldBackupCodes: {Type: field.TypeJSON, Column: mfa.FieldBackupCodes},
			mfa.FieldPhoneNumber: {Type: field.TypeString, Column: mfa.FieldPhoneNumber},
			mfa.FieldEmail:       {Type: field.TypeString, Column: mfa.FieldEmail},
			mfa.FieldLastUsed:    {Type: field.TypeTime, Column: mfa.FieldLastUsed},
			mfa.FieldMetadata:    {Type: field.TypeJSON, Column: mfa.FieldMetadata},
		},
	}
	graph.Nodes[8] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   membership.Table,
			Columns: membership.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: membership.FieldID,
			},
		},
		Type: "Membership",
		Fields: map[string]*sqlgraph.FieldSpec{
			membership.FieldCreatedAt:        {Type: field.TypeTime, Column: membership.FieldCreatedAt},
			membership.FieldUpdatedAt:        {Type: field.TypeTime, Column: membership.FieldUpdatedAt},
			membership.FieldDeletedAt:        {Type: field.TypeTime, Column: membership.FieldDeletedAt},
			membership.FieldUserID:           {Type: field.TypeString, Column: membership.FieldUserID},
			membership.FieldOrganizationID:   {Type: field.TypeString, Column: membership.FieldOrganizationID},
			membership.FieldRoleID:           {Type: field.TypeString, Column: membership.FieldRoleID},
			membership.FieldEmail:            {Type: field.TypeString, Column: membership.FieldEmail},
			membership.FieldStatus:           {Type: field.TypeEnum, Column: membership.FieldStatus},
			membership.FieldInvitedBy:        {Type: field.TypeString, Column: membership.FieldInvitedBy},
			membership.FieldInvitedAt:        {Type: field.TypeTime, Column: membership.FieldInvitedAt},
			membership.FieldJoinedAt:         {Type: field.TypeTime, Column: membership.FieldJoinedAt},
			membership.FieldExpiresAt:        {Type: field.TypeTime, Column: membership.FieldExpiresAt},
			membership.FieldInvitationToken:  {Type: field.TypeString, Column: membership.FieldInvitationToken},
			membership.FieldIsBillingContact: {Type: field.TypeBool, Column: membership.FieldIsBillingContact},
			membership.FieldIsPrimaryContact: {Type: field.TypeBool, Column: membership.FieldIsPrimaryContact},
			membership.FieldLeftAt:           {Type: field.TypeTime, Column: membership.FieldLeftAt},
			membership.FieldMetadata:         {Type: field.TypeJSON, Column: membership.FieldMetadata},
			membership.FieldCustomFields:     {Type: field.TypeJSON, Column: membership.FieldCustomFields},
		},
	}
	graph.Nodes[9] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   oauthauthorization.Table,
			Columns: oauthauthorization.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: oauthauthorization.FieldID,
			},
		},
		Type: "OAuthAuthorization",
		Fields: map[string]*sqlgraph.FieldSpec{
			oauthauthorization.FieldCreatedAt:           {Type: field.TypeTime, Column: oauthauthorization.FieldCreatedAt},
			oauthauthorization.FieldUpdatedAt:           {Type: field.TypeTime, Column: oauthauthorization.FieldUpdatedAt},
			oauthauthorization.FieldDeletedAt:           {Type: field.TypeTime, Column: oauthauthorization.FieldDeletedAt},
			oauthauthorization.FieldClientID:            {Type: field.TypeString, Column: oauthauthorization.FieldClientID},
			oauthauthorization.FieldUserID:              {Type: field.TypeString, Column: oauthauthorization.FieldUserID},
			oauthauthorization.FieldOrganizationID:      {Type: field.TypeString, Column: oauthauthorization.FieldOrganizationID},
			oauthauthorization.FieldCode:                {Type: field.TypeString, Column: oauthauthorization.FieldCode},
			oauthauthorization.FieldCodeChallenge:       {Type: field.TypeString, Column: oauthauthorization.FieldCodeChallenge},
			oauthauthorization.FieldCodeChallengeMethod: {Type: field.TypeString, Column: oauthauthorization.FieldCodeChallengeMethod},
			oauthauthorization.FieldRedirectURI:         {Type: field.TypeString, Column: oauthauthorization.FieldRedirectURI},
			oauthauthorization.FieldScopeNames:          {Type: field.TypeJSON, Column: oauthauthorization.FieldScopeNames},
			oauthauthorization.FieldUsed:                {Type: field.TypeBool, Column: oauthauthorization.FieldUsed},
			oauthauthorization.FieldUsedAt:              {Type: field.TypeTime, Column: oauthauthorization.FieldUsedAt},
			oauthauthorization.FieldExpiresAt:           {Type: field.TypeTime, Column: oauthauthorization.FieldExpiresAt},
			oauthauthorization.FieldState:               {Type: field.TypeString, Column: oauthauthorization.FieldState},
			oauthauthorization.FieldNonce:               {Type: field.TypeString, Column: oauthauthorization.FieldNonce},
			oauthauthorization.FieldUserAgent:           {Type: field.TypeString, Column: oauthauthorization.FieldUserAgent},
			oauthauthorization.FieldIPAddress:           {Type: field.TypeString, Column: oauthauthorization.FieldIPAddress},
		},
	}
	graph.Nodes[10] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   oauthclient.Table,
			Columns: oauthclient.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: oauthclient.FieldID,
			},
		},
		Type: "OAuthClient",
		Fields: map[string]*sqlgraph.FieldSpec{
			oauthclient.FieldCreatedAt:                 {Type: field.TypeTime, Column: oauthclient.FieldCreatedAt},
			oauthclient.FieldUpdatedAt:                 {Type: field.TypeTime, Column: oauthclient.FieldUpdatedAt},
			oauthclient.FieldDeletedAt:                 {Type: field.TypeTime, Column: oauthclient.FieldDeletedAt},
			oauthclient.FieldClientID:                  {Type: field.TypeString, Column: oauthclient.FieldClientID},
			oauthclient.FieldClientSecret:              {Type: field.TypeString, Column: oauthclient.FieldClientSecret},
			oauthclient.FieldClientName:                {Type: field.TypeString, Column: oauthclient.FieldClientName},
			oauthclient.FieldClientDescription:         {Type: field.TypeString, Column: oauthclient.FieldClientDescription},
			oauthclient.FieldClientURI:                 {Type: field.TypeString, Column: oauthclient.FieldClientURI},
			oauthclient.FieldLogoURI:                   {Type: field.TypeString, Column: oauthclient.FieldLogoURI},
			oauthclient.FieldRedirectUris:              {Type: field.TypeJSON, Column: oauthclient.FieldRedirectUris},
			oauthclient.FieldPostLogoutRedirectUris:    {Type: field.TypeJSON, Column: oauthclient.FieldPostLogoutRedirectUris},
			oauthclient.FieldOrganizationID:            {Type: field.TypeString, Column: oauthclient.FieldOrganizationID},
			oauthclient.FieldPublic:                    {Type: field.TypeBool, Column: oauthclient.FieldPublic},
			oauthclient.FieldActive:                    {Type: field.TypeBool, Column: oauthclient.FieldActive},
			oauthclient.FieldAllowedCorsOrigins:        {Type: field.TypeJSON, Column: oauthclient.FieldAllowedCorsOrigins},
			oauthclient.FieldAllowedGrantTypes:         {Type: field.TypeJSON, Column: oauthclient.FieldAllowedGrantTypes},
			oauthclient.FieldTokenExpirySeconds:        {Type: field.TypeInt, Column: oauthclient.FieldTokenExpirySeconds},
			oauthclient.FieldRefreshTokenExpirySeconds: {Type: field.TypeInt, Column: oauthclient.FieldRefreshTokenExpirySeconds},
			oauthclient.FieldAuthCodeExpirySeconds:     {Type: field.TypeInt, Column: oauthclient.FieldAuthCodeExpirySeconds},
			oauthclient.FieldRequiresPkce:              {Type: field.TypeBool, Column: oauthclient.FieldRequiresPkce},
			oauthclient.FieldRequiresConsent:           {Type: field.TypeBool, Column: oauthclient.FieldRequiresConsent},
		},
	}
	graph.Nodes[11] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   oauthscope.Table,
			Columns: oauthscope.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: oauthscope.FieldID,
			},
		},
		Type: "OAuthScope",
		Fields: map[string]*sqlgraph.FieldSpec{
			oauthscope.FieldCreatedAt:    {Type: field.TypeTime, Column: oauthscope.FieldCreatedAt},
			oauthscope.FieldUpdatedAt:    {Type: field.TypeTime, Column: oauthscope.FieldUpdatedAt},
			oauthscope.FieldDeletedAt:    {Type: field.TypeTime, Column: oauthscope.FieldDeletedAt},
			oauthscope.FieldName:         {Type: field.TypeString, Column: oauthscope.FieldName},
			oauthscope.FieldDescription:  {Type: field.TypeString, Column: oauthscope.FieldDescription},
			oauthscope.FieldDefaultScope: {Type: field.TypeBool, Column: oauthscope.FieldDefaultScope},
			oauthscope.FieldPublic:       {Type: field.TypeBool, Column: oauthscope.FieldPublic},
		},
	}
	graph.Nodes[12] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   oauthtoken.Table,
			Columns: oauthtoken.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: oauthtoken.FieldID,
			},
		},
		Type: "OAuthToken",
		Fields: map[string]*sqlgraph.FieldSpec{
			oauthtoken.FieldCreatedAt:             {Type: field.TypeTime, Column: oauthtoken.FieldCreatedAt},
			oauthtoken.FieldUpdatedAt:             {Type: field.TypeTime, Column: oauthtoken.FieldUpdatedAt},
			oauthtoken.FieldDeletedAt:             {Type: field.TypeTime, Column: oauthtoken.FieldDeletedAt},
			oauthtoken.FieldAccessToken:           {Type: field.TypeString, Column: oauthtoken.FieldAccessToken},
			oauthtoken.FieldRefreshToken:          {Type: field.TypeString, Column: oauthtoken.FieldRefreshToken},
			oauthtoken.FieldTokenType:             {Type: field.TypeString, Column: oauthtoken.FieldTokenType},
			oauthtoken.FieldClientID:              {Type: field.TypeString, Column: oauthtoken.FieldClientID},
			oauthtoken.FieldUserID:                {Type: field.TypeString, Column: oauthtoken.FieldUserID},
			oauthtoken.FieldOrganizationID:        {Type: field.TypeString, Column: oauthtoken.FieldOrganizationID},
			oauthtoken.FieldScopeNames:            {Type: field.TypeJSON, Column: oauthtoken.FieldScopeNames},
			oauthtoken.FieldExpiresIn:             {Type: field.TypeInt, Column: oauthtoken.FieldExpiresIn},
			oauthtoken.FieldExpiresAt:             {Type: field.TypeTime, Column: oauthtoken.FieldExpiresAt},
			oauthtoken.FieldRefreshTokenExpiresAt: {Type: field.TypeTime, Column: oauthtoken.FieldRefreshTokenExpiresAt},
			oauthtoken.FieldRevoked:               {Type: field.TypeBool, Column: oauthtoken.FieldRevoked},
			oauthtoken.FieldRevokedAt:             {Type: field.TypeTime, Column: oauthtoken.FieldRevokedAt},
			oauthtoken.FieldIPAddress:             {Type: field.TypeString, Column: oauthtoken.FieldIPAddress},
			oauthtoken.FieldUserAgent:             {Type: field.TypeString, Column: oauthtoken.FieldUserAgent},
		},
	}
	graph.Nodes[13] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   organization.Table,
			Columns: organization.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: organization.FieldID,
			},
		},
		Type: "Organization",
		Fields: map[string]*sqlgraph.FieldSpec{
			organization.FieldCreatedAt:              {Type: field.TypeTime, Column: organization.FieldCreatedAt},
			organization.FieldUpdatedAt:              {Type: field.TypeTime, Column: organization.FieldUpdatedAt},
			organization.FieldDeletedAt:              {Type: field.TypeTime, Column: organization.FieldDeletedAt},
			organization.FieldName:                   {Type: field.TypeString, Column: organization.FieldName},
			organization.FieldSlug:                   {Type: field.TypeString, Column: organization.FieldSlug},
			organization.FieldDomains:                {Type: field.TypeJSON, Column: organization.FieldDomains},
			organization.FieldVerifiedDomains:        {Type: field.TypeJSON, Column: organization.FieldVerifiedDomains},
			organization.FieldDomain:                 {Type: field.TypeString, Column: organization.FieldDomain},
			organization.FieldLogoURL:                {Type: field.TypeString, Column: organization.FieldLogoURL},
			organization.FieldPlan:                   {Type: field.TypeString, Column: organization.FieldPlan},
			organization.FieldActive:                 {Type: field.TypeBool, Column: organization.FieldActive},
			organization.FieldMetadata:               {Type: field.TypeJSON, Column: organization.FieldMetadata},
			organization.FieldTrialEndsAt:            {Type: field.TypeTime, Column: organization.FieldTrialEndsAt},
			organization.FieldTrialUsed:              {Type: field.TypeBool, Column: organization.FieldTrialUsed},
			organization.FieldOwnerID:                {Type: field.TypeString, Column: organization.FieldOwnerID},
			organization.FieldOrgType:                {Type: field.TypeEnum, Column: organization.FieldOrgType},
			organization.FieldIsPlatformOrganization: {Type: field.TypeBool, Column: organization.FieldIsPlatformOrganization},
			organization.FieldExternalUserLimit:      {Type: field.TypeInt, Column: organization.FieldExternalUserLimit},
			organization.FieldEndUserLimit:           {Type: field.TypeInt, Column: organization.FieldEndUserLimit},
			organization.FieldSSOEnabled:             {Type: field.TypeBool, Column: organization.FieldSSOEnabled},
			organization.FieldSSODomain:              {Type: field.TypeString, Column: organization.FieldSSODomain},
			organization.FieldSubscriptionID:         {Type: field.TypeString, Column: organization.FieldSubscriptionID},
			organization.FieldCustomerID:             {Type: field.TypeString, Column: organization.FieldCustomerID},
			organization.FieldSubscriptionStatus:     {Type: field.TypeEnum, Column: organization.FieldSubscriptionStatus},
			organization.FieldAuthServiceEnabled:     {Type: field.TypeBool, Column: organization.FieldAuthServiceEnabled},
			organization.FieldAuthConfig:             {Type: field.TypeJSON, Column: organization.FieldAuthConfig},
			organization.FieldAuthDomain:             {Type: field.TypeString, Column: organization.FieldAuthDomain},
			organization.FieldAPIRequestLimit:        {Type: field.TypeInt, Column: organization.FieldAPIRequestLimit},
			organization.FieldAPIRequestsUsed:        {Type: field.TypeInt, Column: organization.FieldAPIRequestsUsed},
			organization.FieldCurrentExternalUsers:   {Type: field.TypeInt, Column: organization.FieldCurrentExternalUsers},
			organization.FieldCurrentEndUsers:        {Type: field.TypeInt, Column: organization.FieldCurrentEndUsers},
		},
	}
	graph.Nodes[14] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   organizationfeature.Table,
			Columns: organizationfeature.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: organizationfeature.FieldID,
			},
		},
		Type: "OrganizationFeature",
		Fields: map[string]*sqlgraph.FieldSpec{
			organizationfeature.FieldCreatedAt:      {Type: field.TypeTime, Column: organizationfeature.FieldCreatedAt},
			organizationfeature.FieldUpdatedAt:      {Type: field.TypeTime, Column: organizationfeature.FieldUpdatedAt},
			organizationfeature.FieldDeletedAt:      {Type: field.TypeTime, Column: organizationfeature.FieldDeletedAt},
			organizationfeature.FieldOrganizationID: {Type: field.TypeString, Column: organizationfeature.FieldOrganizationID},
			organizationfeature.FieldFeatureID:      {Type: field.TypeString, Column: organizationfeature.FieldFeatureID},
			organizationfeature.FieldEnabled:        {Type: field.TypeBool, Column: organizationfeature.FieldEnabled},
			organizationfeature.FieldSettings:       {Type: field.TypeJSON, Column: organizationfeature.FieldSettings},
		},
	}
	graph.Nodes[15] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   organizationprovider.Table,
			Columns: organizationprovider.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: organizationprovider.FieldID,
			},
		},
		Type: "OrganizationProvider",
		Fields: map[string]*sqlgraph.FieldSpec{
			organizationprovider.FieldCreatedAt:           {Type: field.TypeTime, Column: organizationprovider.FieldCreatedAt},
			organizationprovider.FieldUpdatedAt:           {Type: field.TypeTime, Column: organizationprovider.FieldUpdatedAt},
			organizationprovider.FieldDeletedAt:           {Type: field.TypeTime, Column: organizationprovider.FieldDeletedAt},
			organizationprovider.FieldOrganizationID:      {Type: field.TypeString, Column: organizationprovider.FieldOrganizationID},
			organizationprovider.FieldProviderID:          {Type: field.TypeString, Column: organizationprovider.FieldProviderID},
			organizationprovider.FieldTemplateID:          {Type: field.TypeString, Column: organizationprovider.FieldTemplateID},
			organizationprovider.FieldTemplateKey:         {Type: field.TypeString, Column: organizationprovider.FieldTemplateKey},
			organizationprovider.FieldCustomConfig:        {Type: field.TypeJSON, Column: organizationprovider.FieldCustomConfig},
			organizationprovider.FieldEnabledAt:           {Type: field.TypeTime, Column: organizationprovider.FieldEnabledAt},
			organizationprovider.FieldLastUsed:            {Type: field.TypeTime, Column: organizationprovider.FieldLastUsed},
			organizationprovider.FieldUsageCount:          {Type: field.TypeInt, Column: organizationprovider.FieldUsageCount},
			organizationprovider.FieldEnabled:             {Type: field.TypeBool, Column: organizationprovider.FieldEnabled},
			organizationprovider.FieldSuccessRate:         {Type: field.TypeFloat64, Column: organizationprovider.FieldSuccessRate},
			organizationprovider.FieldTotalLogins:         {Type: field.TypeInt, Column: organizationprovider.FieldTotalLogins},
			organizationprovider.FieldSuccessfulLogins:    {Type: field.TypeInt, Column: organizationprovider.FieldSuccessfulLogins},
			organizationprovider.FieldFailedLogins:        {Type: field.TypeInt, Column: organizationprovider.FieldFailedLogins},
			organizationprovider.FieldLastSuccess:         {Type: field.TypeTime, Column: organizationprovider.FieldLastSuccess},
			organizationprovider.FieldLastFailure:         {Type: field.TypeTime, Column: organizationprovider.FieldLastFailure},
			organizationprovider.FieldConfigErrors:        {Type: field.TypeInt, Column: organizationprovider.FieldConfigErrors},
			organizationprovider.FieldAverageResponseTime: {Type: field.TypeFloat64, Column: organizationprovider.FieldAverageResponseTime},
			organizationprovider.FieldAnalyticsData:       {Type: field.TypeJSON, Column: organizationprovider.FieldAnalyticsData},
			organizationprovider.FieldMetadata:            {Type: field.TypeJSON, Column: organizationprovider.FieldMetadata},
		},
	}
	graph.Nodes[16] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   passkey.Table,
			Columns: passkey.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: passkey.FieldID,
			},
		},
		Type: "Passkey",
		Fields: map[string]*sqlgraph.FieldSpec{
			passkey.FieldCreatedAt:      {Type: field.TypeTime, Column: passkey.FieldCreatedAt},
			passkey.FieldUpdatedAt:      {Type: field.TypeTime, Column: passkey.FieldUpdatedAt},
			passkey.FieldDeletedAt:      {Type: field.TypeTime, Column: passkey.FieldDeletedAt},
			passkey.FieldUserID:         {Type: field.TypeString, Column: passkey.FieldUserID},
			passkey.FieldName:           {Type: field.TypeString, Column: passkey.FieldName},
			passkey.FieldCredentialID:   {Type: field.TypeString, Column: passkey.FieldCredentialID},
			passkey.FieldPublicKey:      {Type: field.TypeBytes, Column: passkey.FieldPublicKey},
			passkey.FieldSignCount:      {Type: field.TypeInt, Column: passkey.FieldSignCount},
			passkey.FieldActive:         {Type: field.TypeBool, Column: passkey.FieldActive},
			passkey.FieldDeviceType:     {Type: field.TypeString, Column: passkey.FieldDeviceType},
			passkey.FieldAaguid:         {Type: field.TypeString, Column: passkey.FieldAaguid},
			passkey.FieldLastUsed:       {Type: field.TypeTime, Column: passkey.FieldLastUsed},
			passkey.FieldTransports:     {Type: field.TypeJSON, Column: passkey.FieldTransports},
			passkey.FieldAttestation:    {Type: field.TypeJSON, Column: passkey.FieldAttestation},
			passkey.FieldBackupState:    {Type: field.TypeBool, Column: passkey.FieldBackupState},
			passkey.FieldBackupEligible: {Type: field.TypeBool, Column: passkey.FieldBackupEligible},
			passkey.FieldUserAgent:      {Type: field.TypeString, Column: passkey.FieldUserAgent},
			passkey.FieldIPAddress:      {Type: field.TypeString, Column: passkey.FieldIPAddress},
		},
	}
	graph.Nodes[17] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   permission.Table,
			Columns: permission.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: permission.FieldID,
			},
		},
		Type: "Permission",
		Fields: map[string]*sqlgraph.FieldSpec{
			permission.FieldCreatedAt:           {Type: field.TypeTime, Column: permission.FieldCreatedAt},
			permission.FieldUpdatedAt:           {Type: field.TypeTime, Column: permission.FieldUpdatedAt},
			permission.FieldDeletedAt:           {Type: field.TypeTime, Column: permission.FieldDeletedAt},
			permission.FieldName:                {Type: field.TypeString, Column: permission.FieldName},
			permission.FieldDisplayName:         {Type: field.TypeString, Column: permission.FieldDisplayName},
			permission.FieldDescription:         {Type: field.TypeString, Column: permission.FieldDescription},
			permission.FieldResource:            {Type: field.TypeString, Column: permission.FieldResource},
			permission.FieldAction:              {Type: field.TypeString, Column: permission.FieldAction},
			permission.FieldCategory:            {Type: field.TypeEnum, Column: permission.FieldCategory},
			permission.FieldApplicableUserTypes: {Type: field.TypeJSON, Column: permission.FieldApplicableUserTypes},
			permission.FieldApplicableContexts:  {Type: field.TypeJSON, Column: permission.FieldApplicableContexts},
			permission.FieldConditions:          {Type: field.TypeString, Column: permission.FieldConditions},
			permission.FieldSystem:              {Type: field.TypeBool, Column: permission.FieldSystem},
			permission.FieldDangerous:           {Type: field.TypeBool, Column: permission.FieldDangerous},
			permission.FieldRiskLevel:           {Type: field.TypeInt, Column: permission.FieldRiskLevel},
			permission.FieldCreatedBy:           {Type: field.TypeString, Column: permission.FieldCreatedBy},
			permission.FieldActive:              {Type: field.TypeBool, Column: permission.FieldActive},
			permission.FieldPermissionGroup:     {Type: field.TypeString, Column: permission.FieldPermissionGroup},
		},
	}
	graph.Nodes[18] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   permissiondependency.Table,
			Columns: permissiondependency.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: permissiondependency.FieldID,
			},
		},
		Type: "PermissionDependency",
		Fields: map[string]*sqlgraph.FieldSpec{
			permissiondependency.FieldCreatedAt:            {Type: field.TypeTime, Column: permissiondependency.FieldCreatedAt},
			permissiondependency.FieldUpdatedAt:            {Type: field.TypeTime, Column: permissiondependency.FieldUpdatedAt},
			permissiondependency.FieldDeletedAt:            {Type: field.TypeTime, Column: permissiondependency.FieldDeletedAt},
			permissiondependency.FieldPermissionID:         {Type: field.TypeString, Column: permissiondependency.FieldPermissionID},
			permissiondependency.FieldRequiredPermissionID: {Type: field.TypeString, Column: permissiondependency.FieldRequiredPermissionID},
			permissiondependency.FieldDependencyType:       {Type: field.TypeEnum, Column: permissiondependency.FieldDependencyType},
			permissiondependency.FieldCondition:            {Type: field.TypeString, Column: permissiondependency.FieldCondition},
			permissiondependency.FieldActive:               {Type: field.TypeBool, Column: permissiondependency.FieldActive},
			permissiondependency.FieldCreatedBy:            {Type: field.TypeString, Column: permissiondependency.FieldCreatedBy},
		},
	}
	graph.Nodes[19] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   providertemplate.Table,
			Columns: providertemplate.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: providertemplate.FieldID,
			},
		},
		Type: "ProviderTemplate",
		Fields: map[string]*sqlgraph.FieldSpec{
			providertemplate.FieldCreatedAt:         {Type: field.TypeTime, Column: providertemplate.FieldCreatedAt},
			providertemplate.FieldUpdatedAt:         {Type: field.TypeTime, Column: providertemplate.FieldUpdatedAt},
			providertemplate.FieldDeletedAt:         {Type: field.TypeTime, Column: providertemplate.FieldDeletedAt},
			providertemplate.FieldKey:               {Type: field.TypeString, Column: providertemplate.FieldKey},
			providertemplate.FieldName:              {Type: field.TypeString, Column: providertemplate.FieldName},
			providertemplate.FieldDisplayName:       {Type: field.TypeString, Column: providertemplate.FieldDisplayName},
			providertemplate.FieldType:              {Type: field.TypeString, Column: providertemplate.FieldType},
			providertemplate.FieldProtocol:          {Type: field.TypeString, Column: providertemplate.FieldProtocol},
			providertemplate.FieldIconURL:           {Type: field.TypeString, Column: providertemplate.FieldIconURL},
			providertemplate.FieldCategory:          {Type: field.TypeString, Column: providertemplate.FieldCategory},
			providertemplate.FieldPopular:           {Type: field.TypeBool, Column: providertemplate.FieldPopular},
			providertemplate.FieldActive:            {Type: field.TypeBool, Column: providertemplate.FieldActive},
			providertemplate.FieldDescription:       {Type: field.TypeString, Column: providertemplate.FieldDescription},
			providertemplate.FieldConfigTemplate:    {Type: field.TypeJSON, Column: providertemplate.FieldConfigTemplate},
			providertemplate.FieldRequiredFields:    {Type: field.TypeJSON, Column: providertemplate.FieldRequiredFields},
			providertemplate.FieldSupportedFeatures: {Type: field.TypeJSON, Column: providertemplate.FieldSupportedFeatures},
			providertemplate.FieldDocumentationURL:  {Type: field.TypeString, Column: providertemplate.FieldDocumentationURL},
			providertemplate.FieldSetupGuideURL:     {Type: field.TypeString, Column: providertemplate.FieldSetupGuideURL},
			providertemplate.FieldUsageCount:        {Type: field.TypeInt, Column: providertemplate.FieldUsageCount},
			providertemplate.FieldAverageSetupTime:  {Type: field.TypeFloat64, Column: providertemplate.FieldAverageSetupTime},
			providertemplate.FieldSuccessRate:       {Type: field.TypeFloat64, Column: providertemplate.FieldSuccessRate},
			providertemplate.FieldPopularityRank:    {Type: field.TypeInt, Column: providertemplate.FieldPopularityRank},
			providertemplate.FieldMetadata:          {Type: field.TypeJSON, Column: providertemplate.FieldMetadata},
		},
	}
	graph.Nodes[20] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   role.Table,
			Columns: role.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: role.FieldID,
			},
		},
		Type: "Role",
		Fields: map[string]*sqlgraph.FieldSpec{
			role.FieldCreatedAt:           {Type: field.TypeTime, Column: role.FieldCreatedAt},
			role.FieldUpdatedAt:           {Type: field.TypeTime, Column: role.FieldUpdatedAt},
			role.FieldDeletedAt:           {Type: field.TypeTime, Column: role.FieldDeletedAt},
			role.FieldName:                {Type: field.TypeString, Column: role.FieldName},
			role.FieldDisplayName:         {Type: field.TypeString, Column: role.FieldDisplayName},
			role.FieldDescription:         {Type: field.TypeString, Column: role.FieldDescription},
			role.FieldRoleType:            {Type: field.TypeEnum, Column: role.FieldRoleType},
			role.FieldOrganizationID:      {Type: field.TypeString, Column: role.FieldOrganizationID},
			role.FieldApplicationID:       {Type: field.TypeString, Column: role.FieldApplicationID},
			role.FieldSystem:              {Type: field.TypeBool, Column: role.FieldSystem},
			role.FieldIsDefault:           {Type: field.TypeBool, Column: role.FieldIsDefault},
			role.FieldPriority:            {Type: field.TypeInt, Column: role.FieldPriority},
			role.FieldColor:               {Type: field.TypeString, Column: role.FieldColor},
			role.FieldApplicableUserTypes: {Type: field.TypeJSON, Column: role.FieldApplicableUserTypes},
			role.FieldCreatedBy:           {Type: field.TypeString, Column: role.FieldCreatedBy},
			role.FieldActive:              {Type: field.TypeBool, Column: role.FieldActive},
			role.FieldParentID:            {Type: field.TypeString, Column: role.FieldParentID},
		},
	}
	graph.Nodes[21] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   smstemplate.Table,
			Columns: smstemplate.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: smstemplate.FieldID,
			},
		},
		Type: "SMSTemplate",
		Fields: map[string]*sqlgraph.FieldSpec{
			smstemplate.FieldCreatedAt:         {Type: field.TypeTime, Column: smstemplate.FieldCreatedAt},
			smstemplate.FieldUpdatedAt:         {Type: field.TypeTime, Column: smstemplate.FieldUpdatedAt},
			smstemplate.FieldDeletedAt:         {Type: field.TypeTime, Column: smstemplate.FieldDeletedAt},
			smstemplate.FieldName:              {Type: field.TypeString, Column: smstemplate.FieldName},
			smstemplate.FieldContent:           {Type: field.TypeString, Column: smstemplate.FieldContent},
			smstemplate.FieldType:              {Type: field.TypeString, Column: smstemplate.FieldType},
			smstemplate.FieldOrganizationID:    {Type: field.TypeString, Column: smstemplate.FieldOrganizationID},
			smstemplate.FieldActive:            {Type: field.TypeBool, Column: smstemplate.FieldActive},
			smstemplate.FieldSystem:            {Type: field.TypeBool, Column: smstemplate.FieldSystem},
			smstemplate.FieldLocale:            {Type: field.TypeString, Column: smstemplate.FieldLocale},
			smstemplate.FieldMaxLength:         {Type: field.TypeInt, Column: smstemplate.FieldMaxLength},
			smstemplate.FieldMessageType:       {Type: field.TypeString, Column: smstemplate.FieldMessageType},
			smstemplate.FieldEstimatedSegments: {Type: field.TypeInt, Column: smstemplate.FieldEstimatedSegments},
			smstemplate.FieldEstimatedCost:     {Type: field.TypeFloat64, Column: smstemplate.FieldEstimatedCost},
			smstemplate.FieldCurrency:          {Type: field.TypeString, Column: smstemplate.FieldCurrency},
			smstemplate.FieldVariables:         {Type: field.TypeJSON, Column: smstemplate.FieldVariables},
			smstemplate.FieldMetadata:          {Type: field.TypeJSON, Column: smstemplate.FieldMetadata},
			smstemplate.FieldLastUsedAt:        {Type: field.TypeTime, Column: smstemplate.FieldLastUsedAt},
			smstemplate.FieldUsageCount:        {Type: field.TypeInt, Column: smstemplate.FieldUsageCount},
		},
	}
	graph.Nodes[22] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   ssostate.Table,
			Columns: ssostate.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: ssostate.FieldID,
			},
		},
		Type: "SSOState",
		Fields: map[string]*sqlgraph.FieldSpec{
			ssostate.FieldCreatedAt:   {Type: field.TypeTime, Column: ssostate.FieldCreatedAt},
			ssostate.FieldUpdatedAt:   {Type: field.TypeTime, Column: ssostate.FieldUpdatedAt},
			ssostate.FieldDeletedAt:   {Type: field.TypeTime, Column: ssostate.FieldDeletedAt},
			ssostate.FieldState:       {Type: field.TypeString, Column: ssostate.FieldState},
			ssostate.FieldData:        {Type: field.TypeString, Column: ssostate.FieldData},
			ssostate.FieldExpiresAt:   {Type: field.TypeTime, Column: ssostate.FieldExpiresAt},
			ssostate.FieldRedirectURL: {Type: field.TypeString, Column: ssostate.FieldRedirectURL},
		},
	}
	graph.Nodes[23] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   session.Table,
			Columns: session.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: session.FieldID,
			},
		},
		Type: "Session",
		Fields: map[string]*sqlgraph.FieldSpec{
			session.FieldCreatedAt:      {Type: field.TypeTime, Column: session.FieldCreatedAt},
			session.FieldUpdatedAt:      {Type: field.TypeTime, Column: session.FieldUpdatedAt},
			session.FieldUserID:         {Type: field.TypeString, Column: session.FieldUserID},
			session.FieldToken:          {Type: field.TypeString, Column: session.FieldToken},
			session.FieldIPAddress:      {Type: field.TypeString, Column: session.FieldIPAddress},
			session.FieldUserAgent:      {Type: field.TypeString, Column: session.FieldUserAgent},
			session.FieldDeviceID:       {Type: field.TypeString, Column: session.FieldDeviceID},
			session.FieldLocation:       {Type: field.TypeString, Column: session.FieldLocation},
			session.FieldOrganizationID: {Type: field.TypeString, Column: session.FieldOrganizationID},
			session.FieldActive:         {Type: field.TypeBool, Column: session.FieldActive},
			session.FieldExpiresAt:      {Type: field.TypeTime, Column: session.FieldExpiresAt},
			session.FieldLastActiveAt:   {Type: field.TypeTime, Column: session.FieldLastActiveAt},
			session.FieldMetadata:       {Type: field.TypeJSON, Column: session.FieldMetadata},
		},
	}
	graph.Nodes[24] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: user.FieldID,
			},
		},
		Type: "User",
		Fields: map[string]*sqlgraph.FieldSpec{
			user.FieldCreatedAt:                 {Type: field.TypeTime, Column: user.FieldCreatedAt},
			user.FieldUpdatedAt:                 {Type: field.TypeTime, Column: user.FieldUpdatedAt},
			user.FieldEmail:                     {Type: field.TypeString, Column: user.FieldEmail},
			user.FieldPhoneNumber:               {Type: field.TypeString, Column: user.FieldPhoneNumber},
			user.FieldFirstName:                 {Type: field.TypeString, Column: user.FieldFirstName},
			user.FieldLastName:                  {Type: field.TypeString, Column: user.FieldLastName},
			user.FieldUsername:                  {Type: field.TypeString, Column: user.FieldUsername},
			user.FieldPasswordHash:              {Type: field.TypeString, Column: user.FieldPasswordHash},
			user.FieldEmailVerified:             {Type: field.TypeBool, Column: user.FieldEmailVerified},
			user.FieldPhoneVerified:             {Type: field.TypeBool, Column: user.FieldPhoneVerified},
			user.FieldActive:                    {Type: field.TypeBool, Column: user.FieldActive},
			user.FieldBlocked:                   {Type: field.TypeBool, Column: user.FieldBlocked},
			user.FieldLastLogin:                 {Type: field.TypeTime, Column: user.FieldLastLogin},
			user.FieldLastPasswordChange:        {Type: field.TypeTime, Column: user.FieldLastPasswordChange},
			user.FieldMetadata:                  {Type: field.TypeJSON, Column: user.FieldMetadata},
			user.FieldProfileImageURL:           {Type: field.TypeString, Column: user.FieldProfileImageURL},
			user.FieldLocale:                    {Type: field.TypeString, Column: user.FieldLocale},
			user.FieldTimezone:                  {Type: field.TypeString, Column: user.FieldTimezone},
			user.FieldUserType:                  {Type: field.TypeEnum, Column: user.FieldUserType},
			user.FieldOrganizationID:            {Type: field.TypeString, Column: user.FieldOrganizationID},
			user.FieldPrimaryOrganizationID:     {Type: field.TypeString, Column: user.FieldPrimaryOrganizationID},
			user.FieldIsPlatformAdmin:           {Type: field.TypeBool, Column: user.FieldIsPlatformAdmin},
			user.FieldAuthProvider:              {Type: field.TypeString, Column: user.FieldAuthProvider},
			user.FieldExternalID:                {Type: field.TypeString, Column: user.FieldExternalID},
			user.FieldCustomerID:                {Type: field.TypeString, Column: user.FieldCustomerID},
			user.FieldCustomAttributes:          {Type: field.TypeJSON, Column: user.FieldCustomAttributes},
			user.FieldCreatedBy:                 {Type: field.TypeString, Column: user.FieldCreatedBy},
			user.FieldPasswordResetTokenExpires: {Type: field.TypeTime, Column: user.FieldPasswordResetTokenExpires},
			user.FieldPasswordResetToken:        {Type: field.TypeString, Column: user.FieldPasswordResetToken},
			user.FieldLoginCount:                {Type: field.TypeInt, Column: user.FieldLoginCount},
			user.FieldLastLoginIP:               {Type: field.TypeString, Column: user.FieldLastLoginIP},
		},
	}
	graph.Nodes[25] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   userpermission.Table,
			Columns: userpermission.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: userpermission.FieldID,
			},
		},
		Type: "UserPermission",
		Fields: map[string]*sqlgraph.FieldSpec{
			userpermission.FieldCreatedAt:      {Type: field.TypeTime, Column: userpermission.FieldCreatedAt},
			userpermission.FieldUpdatedAt:      {Type: field.TypeTime, Column: userpermission.FieldUpdatedAt},
			userpermission.FieldDeletedAt:      {Type: field.TypeTime, Column: userpermission.FieldDeletedAt},
			userpermission.FieldUserID:         {Type: field.TypeString, Column: userpermission.FieldUserID},
			userpermission.FieldPermissionID:   {Type: field.TypeString, Column: userpermission.FieldPermissionID},
			userpermission.FieldContextType:    {Type: field.TypeEnum, Column: userpermission.FieldContextType},
			userpermission.FieldContextID:      {Type: field.TypeString, Column: userpermission.FieldContextID},
			userpermission.FieldResourceType:   {Type: field.TypeString, Column: userpermission.FieldResourceType},
			userpermission.FieldResourceID:     {Type: field.TypeString, Column: userpermission.FieldResourceID},
			userpermission.FieldPermissionType: {Type: field.TypeEnum, Column: userpermission.FieldPermissionType},
			userpermission.FieldAssignedBy:     {Type: field.TypeString, Column: userpermission.FieldAssignedBy},
			userpermission.FieldAssignedAt:     {Type: field.TypeTime, Column: userpermission.FieldAssignedAt},
			userpermission.FieldExpiresAt:      {Type: field.TypeTime, Column: userpermission.FieldExpiresAt},
			userpermission.FieldActive:         {Type: field.TypeBool, Column: userpermission.FieldActive},
			userpermission.FieldConditions:     {Type: field.TypeJSON, Column: userpermission.FieldConditions},
			userpermission.FieldReason:         {Type: field.TypeString, Column: userpermission.FieldReason},
		},
	}
	graph.Nodes[26] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   userrole.Table,
			Columns: userrole.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: userrole.FieldID,
			},
		},
		Type: "UserRole",
		Fields: map[string]*sqlgraph.FieldSpec{
			userrole.FieldCreatedAt:   {Type: field.TypeTime, Column: userrole.FieldCreatedAt},
			userrole.FieldUpdatedAt:   {Type: field.TypeTime, Column: userrole.FieldUpdatedAt},
			userrole.FieldDeletedAt:   {Type: field.TypeTime, Column: userrole.FieldDeletedAt},
			userrole.FieldUserID:      {Type: field.TypeString, Column: userrole.FieldUserID},
			userrole.FieldRoleID:      {Type: field.TypeString, Column: userrole.FieldRoleID},
			userrole.FieldContextType: {Type: field.TypeEnum, Column: userrole.FieldContextType},
			userrole.FieldContextID:   {Type: field.TypeString, Column: userrole.FieldContextID},
			userrole.FieldAssignedBy:  {Type: field.TypeString, Column: userrole.FieldAssignedBy},
			userrole.FieldAssignedAt:  {Type: field.TypeTime, Column: userrole.FieldAssignedAt},
			userrole.FieldExpiresAt:   {Type: field.TypeTime, Column: userrole.FieldExpiresAt},
			userrole.FieldActive:      {Type: field.TypeBool, Column: userrole.FieldActive},
			userrole.FieldConditions:  {Type: field.TypeJSON, Column: userrole.FieldConditions},
		},
	}
	graph.Nodes[27] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   verification.Table,
			Columns: verification.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: verification.FieldID,
			},
		},
		Type: "Verification",
		Fields: map[string]*sqlgraph.FieldSpec{
			verification.FieldCreatedAt:   {Type: field.TypeTime, Column: verification.FieldCreatedAt},
			verification.FieldUpdatedAt:   {Type: field.TypeTime, Column: verification.FieldUpdatedAt},
			verification.FieldDeletedAt:   {Type: field.TypeTime, Column: verification.FieldDeletedAt},
			verification.FieldUserID:      {Type: field.TypeString, Column: verification.FieldUserID},
			verification.FieldType:        {Type: field.TypeString, Column: verification.FieldType},
			verification.FieldToken:       {Type: field.TypeString, Column: verification.FieldToken},
			verification.FieldEmail:       {Type: field.TypeString, Column: verification.FieldEmail},
			verification.FieldPhoneNumber: {Type: field.TypeString, Column: verification.FieldPhoneNumber},
			verification.FieldRedirectURL: {Type: field.TypeString, Column: verification.FieldRedirectURL},
			verification.FieldUsed:        {Type: field.TypeBool, Column: verification.FieldUsed},
			verification.FieldUsedAt:      {Type: field.TypeTime, Column: verification.FieldUsedAt},
			verification.FieldAttempts:    {Type: field.TypeInt, Column: verification.FieldAttempts},
			verification.FieldExpiresAt:   {Type: field.TypeTime, Column: verification.FieldExpiresAt},
			verification.FieldIPAddress:   {Type: field.TypeString, Column: verification.FieldIPAddress},
			verification.FieldUserAgent:   {Type: field.TypeString, Column: verification.FieldUserAgent},
			verification.FieldAttestation: {Type: field.TypeJSON, Column: verification.FieldAttestation},
			verification.FieldMetadata:    {Type: field.TypeJSON, Column: verification.FieldMetadata},
		},
	}
	graph.Nodes[28] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   webhook.Table,
			Columns: webhook.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: webhook.FieldID,
			},
		},
		Type: "Webhook",
		Fields: map[string]*sqlgraph.FieldSpec{
			webhook.FieldCreatedAt:      {Type: field.TypeTime, Column: webhook.FieldCreatedAt},
			webhook.FieldUpdatedAt:      {Type: field.TypeTime, Column: webhook.FieldUpdatedAt},
			webhook.FieldDeletedAt:      {Type: field.TypeTime, Column: webhook.FieldDeletedAt},
			webhook.FieldName:           {Type: field.TypeString, Column: webhook.FieldName},
			webhook.FieldURL:            {Type: field.TypeString, Column: webhook.FieldURL},
			webhook.FieldOrganizationID: {Type: field.TypeString, Column: webhook.FieldOrganizationID},
			webhook.FieldSecret:         {Type: field.TypeString, Column: webhook.FieldSecret},
			webhook.FieldActive:         {Type: field.TypeBool, Column: webhook.FieldActive},
			webhook.FieldEventTypes:     {Type: field.TypeJSON, Column: webhook.FieldEventTypes},
			webhook.FieldVersion:        {Type: field.TypeString, Column: webhook.FieldVersion},
			webhook.FieldRetryCount:     {Type: field.TypeInt, Column: webhook.FieldRetryCount},
			webhook.FieldTimeoutMs:      {Type: field.TypeInt, Column: webhook.FieldTimeoutMs},
			webhook.FieldFormat:         {Type: field.TypeEnum, Column: webhook.FieldFormat},
			webhook.FieldMetadata:       {Type: field.TypeJSON, Column: webhook.FieldMetadata},
			webhook.FieldHeaders:        {Type: field.TypeJSON, Column: webhook.FieldHeaders},
		},
	}
	graph.Nodes[29] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   webhookevent.Table,
			Columns: webhookevent.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: webhookevent.FieldID,
			},
		},
		Type: "WebhookEvent",
		Fields: map[string]*sqlgraph.FieldSpec{
			webhookevent.FieldCreatedAt:    {Type: field.TypeTime, Column: webhookevent.FieldCreatedAt},
			webhookevent.FieldUpdatedAt:    {Type: field.TypeTime, Column: webhookevent.FieldUpdatedAt},
			webhookevent.FieldDeletedAt:    {Type: field.TypeTime, Column: webhookevent.FieldDeletedAt},
			webhookevent.FieldWebhookID:    {Type: field.TypeString, Column: webhookevent.FieldWebhookID},
			webhookevent.FieldEventType:    {Type: field.TypeString, Column: webhookevent.FieldEventType},
			webhookevent.FieldHeaders:      {Type: field.TypeJSON, Column: webhookevent.FieldHeaders},
			webhookevent.FieldPayload:      {Type: field.TypeJSON, Column: webhookevent.FieldPayload},
			webhookevent.FieldDelivered:    {Type: field.TypeBool, Column: webhookevent.FieldDelivered},
			webhookevent.FieldDeliveredAt:  {Type: field.TypeTime, Column: webhookevent.FieldDeliveredAt},
			webhookevent.FieldAttempts:     {Type: field.TypeInt, Column: webhookevent.FieldAttempts},
			webhookevent.FieldNextRetry:    {Type: field.TypeTime, Column: webhookevent.FieldNextRetry},
			webhookevent.FieldStatusCode:   {Type: field.TypeInt, Column: webhookevent.FieldStatusCode},
			webhookevent.FieldResponseBody: {Type: field.TypeString, Column: webhookevent.FieldResponseBody},
			webhookevent.FieldError:        {Type: field.TypeString, Column: webhookevent.FieldError},
		},
	}
	graph.MustAddE(
		"user",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activity.UserTable,
			Columns: []string{activity.UserColumn},
			Bidi:    false,
		},
		"Activity",
		"User",
	)
	graph.MustAddE(
		"organization",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activity.OrganizationTable,
			Columns: []string{activity.OrganizationColumn},
			Bidi:    false,
		},
		"Activity",
		"Organization",
	)
	graph.MustAddE(
		"session",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activity.SessionTable,
			Columns: []string{activity.SessionColumn},
			Bidi:    false,
		},
		"Activity",
		"Session",
	)
	graph.MustAddE(
		"user",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   apikey.UserTable,
			Columns: []string{apikey.UserColumn},
			Bidi:    false,
		},
		"ApiKey",
		"User",
	)
	graph.MustAddE(
		"organization",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   apikey.OrganizationTable,
			Columns: []string{apikey.OrganizationColumn},
			Bidi:    false,
		},
		"ApiKey",
		"Organization",
	)
	graph.MustAddE(
		"activities",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apikey.ActivitiesTable,
			Columns: []string{apikey.ActivitiesColumn},
			Bidi:    false,
		},
		"ApiKey",
		"ApiKeyActivity",
	)
	graph.MustAddE(
		"key",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   apikeyactivity.KeyTable,
			Columns: []string{apikeyactivity.KeyColumn},
			Bidi:    false,
		},
		"ApiKeyActivity",
		"ApiKey",
	)
	graph.MustAddE(
		"user",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   audit.UserTable,
			Columns: []string{audit.UserColumn},
			Bidi:    false,
		},
		"Audit",
		"User",
	)
	graph.MustAddE(
		"organization",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   audit.OrganizationTable,
			Columns: []string{audit.OrganizationColumn},
			Bidi:    false,
		},
		"Audit",
		"Organization",
	)
	graph.MustAddE(
		"session",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   audit.SessionTable,
			Columns: []string{audit.SessionColumn},
			Bidi:    false,
		},
		"Audit",
		"Session",
	)
	graph.MustAddE(
		"organization",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   emailtemplate.OrganizationTable,
			Columns: []string{emailtemplate.OrganizationColumn},
			Bidi:    false,
		},
		"EmailTemplate",
		"Organization",
	)
	graph.MustAddE(
		"organization_features",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   featureflag.OrganizationFeaturesTable,
			Columns: []string{featureflag.OrganizationFeaturesColumn},
			Bidi:    false,
		},
		"FeatureFlag",
		"OrganizationFeature",
	)
	graph.MustAddE(
		"organization",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   identityprovider.OrganizationTable,
			Columns: []string{identityprovider.OrganizationColumn},
			Bidi:    false,
		},
		"IdentityProvider",
		"Organization",
	)
	graph.MustAddE(
		"organization_providers",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   identityprovider.OrganizationProvidersTable,
			Columns: []string{identityprovider.OrganizationProvidersColumn},
			Bidi:    false,
		},
		"IdentityProvider",
		"OrganizationProvider",
	)
	graph.MustAddE(
		"user",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mfa.UserTable,
			Columns: []string{mfa.UserColumn},
			Bidi:    false,
		},
		"MFA",
		"User",
	)
	graph.MustAddE(
		"user",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   membership.UserTable,
			Columns: []string{membership.UserColumn},
			Bidi:    false,
		},
		"Membership",
		"User",
	)
	graph.MustAddE(
		"organization",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   membership.OrganizationTable,
			Columns: []string{membership.OrganizationColumn},
			Bidi:    false,
		},
		"Membership",
		"Organization",
	)
	graph.MustAddE(
		"role",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   membership.RoleTable,
			Columns: []string{membership.RoleColumn},
			Bidi:    false,
		},
		"Membership",
		"Role",
	)
	graph.MustAddE(
		"inviter",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   membership.InviterTable,
			Columns: []string{membership.InviterColumn},
			Bidi:    false,
		},
		"Membership",
		"User",
	)
	graph.MustAddE(
		"client",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauthauthorization.ClientTable,
			Columns: []string{oauthauthorization.ClientColumn},
			Bidi:    false,
		},
		"OAuthAuthorization",
		"OAuthClient",
	)
	graph.MustAddE(
		"user",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauthauthorization.UserTable,
			Columns: []string{oauthauthorization.UserColumn},
			Bidi:    false,
		},
		"OAuthAuthorization",
		"User",
	)
	graph.MustAddE(
		"scopes",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   oauthauthorization.ScopesTable,
			Columns: oauthauthorization.ScopesPrimaryKey,
			Bidi:    false,
		},
		"OAuthAuthorization",
		"OAuthScope",
	)
	graph.MustAddE(
		"organization",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauthclient.OrganizationTable,
			Columns: []string{oauthclient.OrganizationColumn},
			Bidi:    false,
		},
		"OAuthClient",
		"Organization",
	)
	graph.MustAddE(
		"tokens",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oauthclient.TokensTable,
			Columns: []string{oauthclient.TokensColumn},
			Bidi:    false,
		},
		"OAuthClient",
		"OAuthToken",
	)
	graph.MustAddE(
		"authorizations",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oauthclient.AuthorizationsTable,
			Columns: []string{oauthclient.AuthorizationsColumn},
			Bidi:    false,
		},
		"OAuthClient",
		"OAuthAuthorization",
	)
	graph.MustAddE(
		"scopes",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   oauthclient.ScopesTable,
			Columns: oauthclient.ScopesPrimaryKey,
			Bidi:    false,
		},
		"OAuthClient",
		"OAuthScope",
	)
	graph.MustAddE(
		"clients",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   oauthscope.ClientsTable,
			Columns: oauthscope.ClientsPrimaryKey,
			Bidi:    false,
		},
		"OAuthScope",
		"OAuthClient",
	)
	graph.MustAddE(
		"tokens",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   oauthscope.TokensTable,
			Columns: oauthscope.TokensPrimaryKey,
			Bidi:    false,
		},
		"OAuthScope",
		"OAuthToken",
	)
	graph.MustAddE(
		"authorizations",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   oauthscope.AuthorizationsTable,
			Columns: oauthscope.AuthorizationsPrimaryKey,
			Bidi:    false,
		},
		"OAuthScope",
		"OAuthAuthorization",
	)
	graph.MustAddE(
		"client",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauthtoken.ClientTable,
			Columns: []string{oauthtoken.ClientColumn},
			Bidi:    false,
		},
		"OAuthToken",
		"OAuthClient",
	)
	graph.MustAddE(
		"user",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauthtoken.UserTable,
			Columns: []string{oauthtoken.UserColumn},
			Bidi:    false,
		},
		"OAuthToken",
		"User",
	)
	graph.MustAddE(
		"scopes",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   oauthtoken.ScopesTable,
			Columns: oauthtoken.ScopesPrimaryKey,
			Bidi:    false,
		},
		"OAuthToken",
		"OAuthScope",
	)
	graph.MustAddE(
		"users",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.UsersTable,
			Columns: []string{organization.UsersColumn},
			Bidi:    false,
		},
		"Organization",
		"User",
	)
	graph.MustAddE(
		"memberships",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.MembershipsTable,
			Columns: []string{organization.MembershipsColumn},
			Bidi:    false,
		},
		"Organization",
		"Membership",
	)
	graph.MustAddE(
		"sms_templates",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.SmsTemplatesTable,
			Columns: []string{organization.SmsTemplatesColumn},
			Bidi:    false,
		},
		"Organization",
		"SMSTemplate",
	)
	graph.MustAddE(
		"email_templates",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.EmailTemplatesTable,
			Columns: []string{organization.EmailTemplatesColumn},
			Bidi:    false,
		},
		"Organization",
		"EmailTemplate",
	)
	graph.MustAddE(
		"api_keys",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.APIKeysTable,
			Columns: []string{organization.APIKeysColumn},
			Bidi:    false,
		},
		"Organization",
		"ApiKey",
	)
	graph.MustAddE(
		"webhooks",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.WebhooksTable,
			Columns: []string{organization.WebhooksColumn},
			Bidi:    false,
		},
		"Organization",
		"Webhook",
	)
	graph.MustAddE(
		"feature_flags",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.FeatureFlagsTable,
			Columns: []string{organization.FeatureFlagsColumn},
			Bidi:    false,
		},
		"Organization",
		"OrganizationFeature",
	)
	graph.MustAddE(
		"identity_providers",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.IdentityProvidersTable,
			Columns: []string{organization.IdentityProvidersColumn},
			Bidi:    false,
		},
		"Organization",
		"IdentityProvider",
	)
	graph.MustAddE(
		"oauth_clients",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.OauthClientsTable,
			Columns: []string{organization.OauthClientsColumn},
			Bidi:    false,
		},
		"Organization",
		"OAuthClient",
	)
	graph.MustAddE(
		"roles",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.RolesTable,
			Columns: []string{organization.RolesColumn},
			Bidi:    false,
		},
		"Organization",
		"Role",
	)
	graph.MustAddE(
		"user_role_contexts",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   organization.UserRoleContextsTable,
			Columns: []string{organization.UserRoleContextsColumn},
			Bidi:    false,
		},
		"Organization",
		"UserRole",
	)
	graph.MustAddE(
		"user_permission_contexts",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   organization.UserPermissionContextsTable,
			Columns: []string{organization.UserPermissionContextsColumn},
			Bidi:    false,
		},
		"Organization",
		"UserPermission",
	)
	graph.MustAddE(
		"audit_logs",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.AuditLogsTable,
			Columns: []string{organization.AuditLogsColumn},
			Bidi:    false,
		},
		"Organization",
		"Audit",
	)
	graph.MustAddE(
		"organization_providers",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.OrganizationProvidersTable,
			Columns: []string{organization.OrganizationProvidersColumn},
			Bidi:    false,
		},
		"Organization",
		"OrganizationProvider",
	)
	graph.MustAddE(
		"activities",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ActivitiesTable,
			Columns: []string{organization.ActivitiesColumn},
			Bidi:    false,
		},
		"Organization",
		"Activity",
	)
	graph.MustAddE(
		"organization",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   organizationfeature.OrganizationTable,
			Columns: []string{organizationfeature.OrganizationColumn},
			Bidi:    false,
		},
		"OrganizationFeature",
		"Organization",
	)
	graph.MustAddE(
		"feature",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   organizationfeature.FeatureTable,
			Columns: []string{organizationfeature.FeatureColumn},
			Bidi:    false,
		},
		"OrganizationFeature",
		"FeatureFlag",
	)
	graph.MustAddE(
		"organization",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   organizationprovider.OrganizationTable,
			Columns: []string{organizationprovider.OrganizationColumn},
			Bidi:    false,
		},
		"OrganizationProvider",
		"Organization",
	)
	graph.MustAddE(
		"provider",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   organizationprovider.ProviderTable,
			Columns: []string{organizationprovider.ProviderColumn},
			Bidi:    false,
		},
		"OrganizationProvider",
		"IdentityProvider",
	)
	graph.MustAddE(
		"template",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   organizationprovider.TemplateTable,
			Columns: []string{organizationprovider.TemplateColumn},
			Bidi:    false,
		},
		"OrganizationProvider",
		"ProviderTemplate",
	)
	graph.MustAddE(
		"user",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   passkey.UserTable,
			Columns: []string{passkey.UserColumn},
			Bidi:    false,
		},
		"Passkey",
		"User",
	)
	graph.MustAddE(
		"roles",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   permission.RolesTable,
			Columns: permission.RolesPrimaryKey,
			Bidi:    false,
		},
		"Permission",
		"Role",
	)
	graph.MustAddE(
		"user_assignments",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   permission.UserAssignmentsTable,
			Columns: []string{permission.UserAssignmentsColumn},
			Bidi:    false,
		},
		"Permission",
		"UserPermission",
	)
	graph.MustAddE(
		"dependencies",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   permission.DependenciesTable,
			Columns: []string{permission.DependenciesColumn},
			Bidi:    false,
		},
		"Permission",
		"PermissionDependency",
	)
	graph.MustAddE(
		"dependents",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   permission.DependentsTable,
			Columns: []string{permission.DependentsColumn},
			Bidi:    false,
		},
		"Permission",
		"PermissionDependency",
	)
	graph.MustAddE(
		"dependent_permissions",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   permission.DependentPermissionsTable,
			Columns: permission.DependentPermissionsPrimaryKey,
			Bidi:    false,
		},
		"Permission",
		"Permission",
	)
	graph.MustAddE(
		"required_permissions",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   permission.RequiredPermissionsTable,
			Columns: permission.RequiredPermissionsPrimaryKey,
			Bidi:    false,
		},
		"Permission",
		"Permission",
	)
	graph.MustAddE(
		"permission",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   permissiondependency.PermissionTable,
			Columns: []string{permissiondependency.PermissionColumn},
			Bidi:    false,
		},
		"PermissionDependency",
		"Permission",
	)
	graph.MustAddE(
		"required_permission",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   permissiondependency.RequiredPermissionTable,
			Columns: []string{permissiondependency.RequiredPermissionColumn},
			Bidi:    false,
		},
		"PermissionDependency",
		"Permission",
	)
	graph.MustAddE(
		"organization_providers",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   providertemplate.OrganizationProvidersTable,
			Columns: []string{providertemplate.OrganizationProvidersColumn},
			Bidi:    false,
		},
		"ProviderTemplate",
		"OrganizationProvider",
	)
	graph.MustAddE(
		"organization",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   role.OrganizationTable,
			Columns: []string{role.OrganizationColumn},
			Bidi:    false,
		},
		"Role",
		"Organization",
	)
	graph.MustAddE(
		"user_assignments",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   role.UserAssignmentsTable,
			Columns: []string{role.UserAssignmentsColumn},
			Bidi:    false,
		},
		"Role",
		"UserRole",
	)
	graph.MustAddE(
		"system_users",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   role.SystemUsersTable,
			Columns: role.SystemUsersPrimaryKey,
			Bidi:    false,
		},
		"Role",
		"User",
	)
	graph.MustAddE(
		"permissions",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   role.PermissionsTable,
			Columns: role.PermissionsPrimaryKey,
			Bidi:    false,
		},
		"Role",
		"Permission",
	)
	graph.MustAddE(
		"memberships",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   role.MembershipsTable,
			Columns: []string{role.MembershipsColumn},
			Bidi:    false,
		},
		"Role",
		"Membership",
	)
	graph.MustAddE(
		"parent",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   role.ParentTable,
			Columns: []string{role.ParentColumn},
			Bidi:    false,
		},
		"Role",
		"Role",
	)
	graph.MustAddE(
		"children",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   role.ChildrenTable,
			Columns: []string{role.ChildrenColumn},
			Bidi:    false,
		},
		"Role",
		"Role",
	)
	graph.MustAddE(
		"organization",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   smstemplate.OrganizationTable,
			Columns: []string{smstemplate.OrganizationColumn},
			Bidi:    false,
		},
		"SMSTemplate",
		"Organization",
	)
	graph.MustAddE(
		"user",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   session.UserTable,
			Columns: []string{session.UserColumn},
			Bidi:    false,
		},
		"Session",
		"User",
	)
	graph.MustAddE(
		"audit_logs",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   session.AuditLogsTable,
			Columns: []string{session.AuditLogsColumn},
			Bidi:    false,
		},
		"Session",
		"Audit",
	)
	graph.MustAddE(
		"activities",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   session.ActivitiesTable,
			Columns: []string{session.ActivitiesColumn},
			Bidi:    false,
		},
		"Session",
		"Activity",
	)
	graph.MustAddE(
		"organization",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.OrganizationTable,
			Columns: []string{user.OrganizationColumn},
			Bidi:    false,
		},
		"User",
		"Organization",
	)
	graph.MustAddE(
		"memberships",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.MembershipsTable,
			Columns: []string{user.MembershipsColumn},
			Bidi:    false,
		},
		"User",
		"Membership",
	)
	graph.MustAddE(
		"sent_invitations",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SentInvitationsTable,
			Columns: []string{user.SentInvitationsColumn},
			Bidi:    false,
		},
		"User",
		"Membership",
	)
	graph.MustAddE(
		"sessions",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionsTable,
			Columns: []string{user.SessionsColumn},
			Bidi:    false,
		},
		"User",
		"Session",
	)
	graph.MustAddE(
		"api_keys",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.APIKeysTable,
			Columns: []string{user.APIKeysColumn},
			Bidi:    false,
		},
		"User",
		"ApiKey",
	)
	graph.MustAddE(
		"mfa_methods",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.MfaMethodsTable,
			Columns: []string{user.MfaMethodsColumn},
			Bidi:    false,
		},
		"User",
		"MFA",
	)
	graph.MustAddE(
		"passkeys",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PasskeysTable,
			Columns: []string{user.PasskeysColumn},
			Bidi:    false,
		},
		"User",
		"Passkey",
	)
	graph.MustAddE(
		"oauth_tokens",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OauthTokensTable,
			Columns: []string{user.OauthTokensColumn},
			Bidi:    false,
		},
		"User",
		"OAuthToken",
	)
	graph.MustAddE(
		"oauth_authorizations",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OauthAuthorizationsTable,
			Columns: []string{user.OauthAuthorizationsColumn},
			Bidi:    false,
		},
		"User",
		"OAuthAuthorization",
	)
	graph.MustAddE(
		"verifications",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.VerificationsTable,
			Columns: []string{user.VerificationsColumn},
			Bidi:    false,
		},
		"User",
		"Verification",
	)
	graph.MustAddE(
		"user_roles",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserRolesTable,
			Columns: []string{user.UserRolesColumn},
			Bidi:    false,
		},
		"User",
		"UserRole",
	)
	graph.MustAddE(
		"user_permissions",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserPermissionsTable,
			Columns: []string{user.UserPermissionsColumn},
			Bidi:    false,
		},
		"User",
		"UserPermission",
	)
	graph.MustAddE(
		"system_roles",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.SystemRolesTable,
			Columns: user.SystemRolesPrimaryKey,
			Bidi:    false,
		},
		"User",
		"Role",
	)
	graph.MustAddE(
		"assigned_user_roles",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AssignedUserRolesTable,
			Columns: []string{user.AssignedUserRolesColumn},
			Bidi:    false,
		},
		"User",
		"UserRole",
	)
	graph.MustAddE(
		"assigned_user_permissions",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AssignedUserPermissionsTable,
			Columns: []string{user.AssignedUserPermissionsColumn},
			Bidi:    false,
		},
		"User",
		"UserPermission",
	)
	graph.MustAddE(
		"audit_logs",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AuditLogsTable,
			Columns: []string{user.AuditLogsColumn},
			Bidi:    false,
		},
		"User",
		"Audit",
	)
	graph.MustAddE(
		"activities",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ActivitiesTable,
			Columns: []string{user.ActivitiesColumn},
			Bidi:    false,
		},
		"User",
		"Activity",
	)
	graph.MustAddE(
		"user",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userpermission.UserTable,
			Columns: []string{userpermission.UserColumn},
			Bidi:    false,
		},
		"UserPermission",
		"User",
	)
	graph.MustAddE(
		"permission",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userpermission.PermissionTable,
			Columns: []string{userpermission.PermissionColumn},
			Bidi:    false,
		},
		"UserPermission",
		"Permission",
	)
	graph.MustAddE(
		"assigned_by_user",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userpermission.AssignedByUserTable,
			Columns: []string{userpermission.AssignedByUserColumn},
			Bidi:    false,
		},
		"UserPermission",
		"User",
	)
	graph.MustAddE(
		"organization_context",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userpermission.OrganizationContextTable,
			Columns: []string{userpermission.OrganizationContextColumn},
			Bidi:    false,
		},
		"UserPermission",
		"Organization",
	)
	graph.MustAddE(
		"user",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userrole.UserTable,
			Columns: []string{userrole.UserColumn},
			Bidi:    false,
		},
		"UserRole",
		"User",
	)
	graph.MustAddE(
		"role",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userrole.RoleTable,
			Columns: []string{userrole.RoleColumn},
			Bidi:    false,
		},
		"UserRole",
		"Role",
	)
	graph.MustAddE(
		"organization_context",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userrole.OrganizationContextTable,
			Columns: []string{userrole.OrganizationContextColumn},
			Bidi:    false,
		},
		"UserRole",
		"Organization",
	)
	graph.MustAddE(
		"assigned_by_user",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userrole.AssignedByUserTable,
			Columns: []string{userrole.AssignedByUserColumn},
			Bidi:    false,
		},
		"UserRole",
		"User",
	)
	graph.MustAddE(
		"user",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   verification.UserTable,
			Columns: []string{verification.UserColumn},
			Bidi:    false,
		},
		"Verification",
		"User",
	)
	graph.MustAddE(
		"organization",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   webhook.OrganizationTable,
			Columns: []string{webhook.OrganizationColumn},
			Bidi:    false,
		},
		"Webhook",
		"Organization",
	)
	graph.MustAddE(
		"events",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   webhook.EventsTable,
			Columns: []string{webhook.EventsColumn},
			Bidi:    false,
		},
		"Webhook",
		"WebhookEvent",
	)
	graph.MustAddE(
		"webhook",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   webhookevent.WebhookTable,
			Columns: []string{webhookevent.WebhookColumn},
			Bidi:    false,
		},
		"WebhookEvent",
		"Webhook",
	)
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (aq *ActivityQuery) addPredicate(pred func(s *sql.Selector)) {
	aq.predicates = append(aq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ActivityQuery builder.
func (aq *ActivityQuery) Filter() *ActivityFilter {
	return &ActivityFilter{config: aq.config, predicateAdder: aq}
}

// addPredicate implements the predicateAdder interface.
func (m *ActivityMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ActivityMutation builder.
func (m *ActivityMutation) Filter() *ActivityFilter {
	return &ActivityFilter{config: m.config, predicateAdder: m}
}

// ActivityFilter provides a generic filtering capability at runtime for ActivityQuery.
type ActivityFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ActivityFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *ActivityFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(activity.FieldID))
}

// WhereResourceType applies the entql string predicate on the resource_type field.
func (f *ActivityFilter) WhereResourceType(p entql.StringP) {
	f.Where(p.Field(activity.FieldResourceType))
}

// WhereResourceID applies the entql string predicate on the resource_id field.
func (f *ActivityFilter) WhereResourceID(p entql.StringP) {
	f.Where(p.Field(activity.FieldResourceID))
}

// WhereUserID applies the entql string predicate on the user_id field.
func (f *ActivityFilter) WhereUserID(p entql.StringP) {
	f.Where(p.Field(activity.FieldUserID))
}

// WhereOrganizationID applies the entql string predicate on the organization_id field.
func (f *ActivityFilter) WhereOrganizationID(p entql.StringP) {
	f.Where(p.Field(activity.FieldOrganizationID))
}

// WhereSessionID applies the entql string predicate on the session_id field.
func (f *ActivityFilter) WhereSessionID(p entql.StringP) {
	f.Where(p.Field(activity.FieldSessionID))
}

// WhereAction applies the entql string predicate on the action field.
func (f *ActivityFilter) WhereAction(p entql.StringP) {
	f.Where(p.Field(activity.FieldAction))
}

// WhereCategory applies the entql string predicate on the category field.
func (f *ActivityFilter) WhereCategory(p entql.StringP) {
	f.Where(p.Field(activity.FieldCategory))
}

// WhereSource applies the entql string predicate on the source field.
func (f *ActivityFilter) WhereSource(p entql.StringP) {
	f.Where(p.Field(activity.FieldSource))
}

// WhereEndpoint applies the entql string predicate on the endpoint field.
func (f *ActivityFilter) WhereEndpoint(p entql.StringP) {
	f.Where(p.Field(activity.FieldEndpoint))
}

// WhereMethod applies the entql string predicate on the method field.
func (f *ActivityFilter) WhereMethod(p entql.StringP) {
	f.Where(p.Field(activity.FieldMethod))
}

// WhereStatusCode applies the entql int predicate on the status_code field.
func (f *ActivityFilter) WhereStatusCode(p entql.IntP) {
	f.Where(p.Field(activity.FieldStatusCode))
}

// WhereResponseTime applies the entql int predicate on the response_time field.
func (f *ActivityFilter) WhereResponseTime(p entql.IntP) {
	f.Where(p.Field(activity.FieldResponseTime))
}

// WhereIPAddress applies the entql string predicate on the ip_address field.
func (f *ActivityFilter) WhereIPAddress(p entql.StringP) {
	f.Where(p.Field(activity.FieldIPAddress))
}

// WhereUserAgent applies the entql string predicate on the user_agent field.
func (f *ActivityFilter) WhereUserAgent(p entql.StringP) {
	f.Where(p.Field(activity.FieldUserAgent))
}

// WhereLocation applies the entql string predicate on the location field.
func (f *ActivityFilter) WhereLocation(p entql.StringP) {
	f.Where(p.Field(activity.FieldLocation))
}

// WhereSuccess applies the entql bool predicate on the success field.
func (f *ActivityFilter) WhereSuccess(p entql.BoolP) {
	f.Where(p.Field(activity.FieldSuccess))
}

// WhereError applies the entql string predicate on the error field.
func (f *ActivityFilter) WhereError(p entql.StringP) {
	f.Where(p.Field(activity.FieldError))
}

// WhereErrorCode applies the entql string predicate on the error_code field.
func (f *ActivityFilter) WhereErrorCode(p entql.StringP) {
	f.Where(p.Field(activity.FieldErrorCode))
}

// WhereSize applies the entql int predicate on the size field.
func (f *ActivityFilter) WhereSize(p entql.IntP) {
	f.Where(p.Field(activity.FieldSize))
}

// WhereCount applies the entql int predicate on the count field.
func (f *ActivityFilter) WhereCount(p entql.IntP) {
	f.Where(p.Field(activity.FieldCount))
}

// WhereValue applies the entql float64 predicate on the value field.
func (f *ActivityFilter) WhereValue(p entql.Float64P) {
	f.Where(p.Field(activity.FieldValue))
}

// WhereTimestamp applies the entql time.Time predicate on the timestamp field.
func (f *ActivityFilter) WhereTimestamp(p entql.TimeP) {
	f.Where(p.Field(activity.FieldTimestamp))
}

// WhereExpiresAt applies the entql time.Time predicate on the expires_at field.
func (f *ActivityFilter) WhereExpiresAt(p entql.TimeP) {
	f.Where(p.Field(activity.FieldExpiresAt))
}

// WhereMetadata applies the entql json.RawMessage predicate on the metadata field.
func (f *ActivityFilter) WhereMetadata(p entql.BytesP) {
	f.Where(p.Field(activity.FieldMetadata))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *ActivityFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(activity.FieldTags))
}

// WhereHasUser applies a predicate to check if query has an edge user.
func (f *ActivityFilter) WhereHasUser() {
	f.Where(entql.HasEdge("user"))
}

// WhereHasUserWith applies a predicate to check if query has an edge user with a given conditions (other predicates).
func (f *ActivityFilter) WhereHasUserWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("user", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrganization applies a predicate to check if query has an edge organization.
func (f *ActivityFilter) WhereHasOrganization() {
	f.Where(entql.HasEdge("organization"))
}

// WhereHasOrganizationWith applies a predicate to check if query has an edge organization with a given conditions (other predicates).
func (f *ActivityFilter) WhereHasOrganizationWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("organization", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSession applies a predicate to check if query has an edge session.
func (f *ActivityFilter) WhereHasSession() {
	f.Where(entql.HasEdge("session"))
}

// WhereHasSessionWith applies a predicate to check if query has an edge session with a given conditions (other predicates).
func (f *ActivityFilter) WhereHasSessionWith(preds ...predicate.Session) {
	f.Where(entql.HasEdgeWith("session", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (akq *ApiKeyQuery) addPredicate(pred func(s *sql.Selector)) {
	akq.predicates = append(akq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ApiKeyQuery builder.
func (akq *ApiKeyQuery) Filter() *ApiKeyFilter {
	return &ApiKeyFilter{config: akq.config, predicateAdder: akq}
}

// addPredicate implements the predicateAdder interface.
func (m *ApiKeyMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ApiKeyMutation builder.
func (m *ApiKeyMutation) Filter() *ApiKeyFilter {
	return &ApiKeyFilter{config: m.config, predicateAdder: m}
}

// ApiKeyFilter provides a generic filtering capability at runtime for ApiKeyQuery.
type ApiKeyFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ApiKeyFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *ApiKeyFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(apikey.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *ApiKeyFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(apikey.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *ApiKeyFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(apikey.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *ApiKeyFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(apikey.FieldDeletedAt))
}

// WhereName applies the entql string predicate on the name field.
func (f *ApiKeyFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(apikey.FieldName))
}

// WherePublicKey applies the entql string predicate on the public_key field.
func (f *ApiKeyFilter) WherePublicKey(p entql.StringP) {
	f.Where(p.Field(apikey.FieldPublicKey))
}

// WhereSecretKey applies the entql string predicate on the secret_key field.
func (f *ApiKeyFilter) WhereSecretKey(p entql.StringP) {
	f.Where(p.Field(apikey.FieldSecretKey))
}

// WhereHashedSecretKey applies the entql string predicate on the hashed_secret_key field.
func (f *ApiKeyFilter) WhereHashedSecretKey(p entql.StringP) {
	f.Where(p.Field(apikey.FieldHashedSecretKey))
}

// WhereKey applies the entql string predicate on the key field.
func (f *ApiKeyFilter) WhereKey(p entql.StringP) {
	f.Where(p.Field(apikey.FieldKey))
}

// WhereHashedKey applies the entql string predicate on the hashed_key field.
func (f *ApiKeyFilter) WhereHashedKey(p entql.StringP) {
	f.Where(p.Field(apikey.FieldHashedKey))
}

// WhereUserID applies the entql string predicate on the user_id field.
func (f *ApiKeyFilter) WhereUserID(p entql.StringP) {
	f.Where(p.Field(apikey.FieldUserID))
}

// WhereOrganizationID applies the entql string predicate on the organization_id field.
func (f *ApiKeyFilter) WhereOrganizationID(p entql.StringP) {
	f.Where(p.Field(apikey.FieldOrganizationID))
}

// WhereType applies the entql string predicate on the type field.
func (f *ApiKeyFilter) WhereType(p entql.StringP) {
	f.Where(p.Field(apikey.FieldType))
}

// WhereEnvironment applies the entql string predicate on the environment field.
func (f *ApiKeyFilter) WhereEnvironment(p entql.StringP) {
	f.Where(p.Field(apikey.FieldEnvironment))
}

// WhereActive applies the entql bool predicate on the active field.
func (f *ApiKeyFilter) WhereActive(p entql.BoolP) {
	f.Where(p.Field(apikey.FieldActive))
}

// WherePermissions applies the entql json.RawMessage predicate on the permissions field.
func (f *ApiKeyFilter) WherePermissions(p entql.BytesP) {
	f.Where(p.Field(apikey.FieldPermissions))
}

// WhereScopes applies the entql json.RawMessage predicate on the scopes field.
func (f *ApiKeyFilter) WhereScopes(p entql.BytesP) {
	f.Where(p.Field(apikey.FieldScopes))
}

// WhereIPWhitelist applies the entql json.RawMessage predicate on the ip_whitelist field.
func (f *ApiKeyFilter) WhereIPWhitelist(p entql.BytesP) {
	f.Where(p.Field(apikey.FieldIPWhitelist))
}

// WhereRateLimits applies the entql json.RawMessage predicate on the rate_limits field.
func (f *ApiKeyFilter) WhereRateLimits(p entql.BytesP) {
	f.Where(p.Field(apikey.FieldRateLimits))
}

// WhereMetadata applies the entql json.RawMessage predicate on the metadata field.
func (f *ApiKeyFilter) WhereMetadata(p entql.BytesP) {
	f.Where(p.Field(apikey.FieldMetadata))
}

// WhereLastUsed applies the entql time.Time predicate on the last_used field.
func (f *ApiKeyFilter) WhereLastUsed(p entql.TimeP) {
	f.Where(p.Field(apikey.FieldLastUsed))
}

// WhereExpiresAt applies the entql time.Time predicate on the expires_at field.
func (f *ApiKeyFilter) WhereExpiresAt(p entql.TimeP) {
	f.Where(p.Field(apikey.FieldExpiresAt))
}

// WhereHasUser applies a predicate to check if query has an edge user.
func (f *ApiKeyFilter) WhereHasUser() {
	f.Where(entql.HasEdge("user"))
}

// WhereHasUserWith applies a predicate to check if query has an edge user with a given conditions (other predicates).
func (f *ApiKeyFilter) WhereHasUserWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("user", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrganization applies a predicate to check if query has an edge organization.
func (f *ApiKeyFilter) WhereHasOrganization() {
	f.Where(entql.HasEdge("organization"))
}

// WhereHasOrganizationWith applies a predicate to check if query has an edge organization with a given conditions (other predicates).
func (f *ApiKeyFilter) WhereHasOrganizationWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("organization", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasActivities applies a predicate to check if query has an edge activities.
func (f *ApiKeyFilter) WhereHasActivities() {
	f.Where(entql.HasEdge("activities"))
}

// WhereHasActivitiesWith applies a predicate to check if query has an edge activities with a given conditions (other predicates).
func (f *ApiKeyFilter) WhereHasActivitiesWith(preds ...predicate.ApiKeyActivity) {
	f.Where(entql.HasEdgeWith("activities", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (akaq *ApiKeyActivityQuery) addPredicate(pred func(s *sql.Selector)) {
	akaq.predicates = append(akaq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ApiKeyActivityQuery builder.
func (akaq *ApiKeyActivityQuery) Filter() *ApiKeyActivityFilter {
	return &ApiKeyActivityFilter{config: akaq.config, predicateAdder: akaq}
}

// addPredicate implements the predicateAdder interface.
func (m *ApiKeyActivityMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ApiKeyActivityMutation builder.
func (m *ApiKeyActivityMutation) Filter() *ApiKeyActivityFilter {
	return &ApiKeyActivityFilter{config: m.config, predicateAdder: m}
}

// ApiKeyActivityFilter provides a generic filtering capability at runtime for ApiKeyActivityQuery.
type ApiKeyActivityFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ApiKeyActivityFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[2].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *ApiKeyActivityFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(apikeyactivity.FieldID))
}

// WhereKeyID applies the entql string predicate on the key_id field.
func (f *ApiKeyActivityFilter) WhereKeyID(p entql.StringP) {
	f.Where(p.Field(apikeyactivity.FieldKeyID))
}

// WhereAction applies the entql string predicate on the action field.
func (f *ApiKeyActivityFilter) WhereAction(p entql.StringP) {
	f.Where(p.Field(apikeyactivity.FieldAction))
}

// WhereEndpoint applies the entql string predicate on the endpoint field.
func (f *ApiKeyActivityFilter) WhereEndpoint(p entql.StringP) {
	f.Where(p.Field(apikeyactivity.FieldEndpoint))
}

// WhereMethod applies the entql string predicate on the method field.
func (f *ApiKeyActivityFilter) WhereMethod(p entql.StringP) {
	f.Where(p.Field(apikeyactivity.FieldMethod))
}

// WhereStatusCode applies the entql int predicate on the status_code field.
func (f *ApiKeyActivityFilter) WhereStatusCode(p entql.IntP) {
	f.Where(p.Field(apikeyactivity.FieldStatusCode))
}

// WhereResponseTime applies the entql int predicate on the response_time field.
func (f *ApiKeyActivityFilter) WhereResponseTime(p entql.IntP) {
	f.Where(p.Field(apikeyactivity.FieldResponseTime))
}

// WhereIPAddress applies the entql string predicate on the ip_address field.
func (f *ApiKeyActivityFilter) WhereIPAddress(p entql.StringP) {
	f.Where(p.Field(apikeyactivity.FieldIPAddress))
}

// WhereUserAgent applies the entql string predicate on the user_agent field.
func (f *ApiKeyActivityFilter) WhereUserAgent(p entql.StringP) {
	f.Where(p.Field(apikeyactivity.FieldUserAgent))
}

// WhereSuccess applies the entql bool predicate on the success field.
func (f *ApiKeyActivityFilter) WhereSuccess(p entql.BoolP) {
	f.Where(p.Field(apikeyactivity.FieldSuccess))
}

// WhereError applies the entql string predicate on the error field.
func (f *ApiKeyActivityFilter) WhereError(p entql.StringP) {
	f.Where(p.Field(apikeyactivity.FieldError))
}

// WhereTimestamp applies the entql time.Time predicate on the timestamp field.
func (f *ApiKeyActivityFilter) WhereTimestamp(p entql.TimeP) {
	f.Where(p.Field(apikeyactivity.FieldTimestamp))
}

// WhereMetadata applies the entql json.RawMessage predicate on the metadata field.
func (f *ApiKeyActivityFilter) WhereMetadata(p entql.BytesP) {
	f.Where(p.Field(apikeyactivity.FieldMetadata))
}

// WhereHasKey applies a predicate to check if query has an edge key.
func (f *ApiKeyActivityFilter) WhereHasKey() {
	f.Where(entql.HasEdge("key"))
}

// WhereHasKeyWith applies a predicate to check if query has an edge key with a given conditions (other predicates).
func (f *ApiKeyActivityFilter) WhereHasKeyWith(preds ...predicate.ApiKey) {
	f.Where(entql.HasEdgeWith("key", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (aq *AuditQuery) addPredicate(pred func(s *sql.Selector)) {
	aq.predicates = append(aq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AuditQuery builder.
func (aq *AuditQuery) Filter() *AuditFilter {
	return &AuditFilter{config: aq.config, predicateAdder: aq}
}

// addPredicate implements the predicateAdder interface.
func (m *AuditMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AuditMutation builder.
func (m *AuditMutation) Filter() *AuditFilter {
	return &AuditFilter{config: m.config, predicateAdder: m}
}

// AuditFilter provides a generic filtering capability at runtime for AuditQuery.
type AuditFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *AuditFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[3].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *AuditFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(audit.FieldID))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *AuditFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(audit.FieldDeletedAt))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *AuditFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(audit.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *AuditFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(audit.FieldUpdatedAt))
}

// WhereUserID applies the entql string predicate on the user_id field.
func (f *AuditFilter) WhereUserID(p entql.StringP) {
	f.Where(p.Field(audit.FieldUserID))
}

// WhereOrganizationID applies the entql string predicate on the organization_id field.
func (f *AuditFilter) WhereOrganizationID(p entql.StringP) {
	f.Where(p.Field(audit.FieldOrganizationID))
}

// WhereSessionID applies the entql string predicate on the session_id field.
func (f *AuditFilter) WhereSessionID(p entql.StringP) {
	f.Where(p.Field(audit.FieldSessionID))
}

// WhereAction applies the entql string predicate on the action field.
func (f *AuditFilter) WhereAction(p entql.StringP) {
	f.Where(p.Field(audit.FieldAction))
}

// WhereResourceType applies the entql string predicate on the resource_type field.
func (f *AuditFilter) WhereResourceType(p entql.StringP) {
	f.Where(p.Field(audit.FieldResourceType))
}

// WhereResourceID applies the entql string predicate on the resource_id field.
func (f *AuditFilter) WhereResourceID(p entql.StringP) {
	f.Where(p.Field(audit.FieldResourceID))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *AuditFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(audit.FieldStatus))
}

// WhereIPAddress applies the entql string predicate on the ip_address field.
func (f *AuditFilter) WhereIPAddress(p entql.StringP) {
	f.Where(p.Field(audit.FieldIPAddress))
}

// WhereUserAgent applies the entql string predicate on the user_agent field.
func (f *AuditFilter) WhereUserAgent(p entql.StringP) {
	f.Where(p.Field(audit.FieldUserAgent))
}

// WhereLocation applies the entql string predicate on the location field.
func (f *AuditFilter) WhereLocation(p entql.StringP) {
	f.Where(p.Field(audit.FieldLocation))
}

// WhereDeviceID applies the entql string predicate on the device_id field.
func (f *AuditFilter) WhereDeviceID(p entql.StringP) {
	f.Where(p.Field(audit.FieldDeviceID))
}

// WhereRequestID applies the entql string predicate on the request_id field.
func (f *AuditFilter) WhereRequestID(p entql.StringP) {
	f.Where(p.Field(audit.FieldRequestID))
}

// WhereErrorCode applies the entql string predicate on the error_code field.
func (f *AuditFilter) WhereErrorCode(p entql.StringP) {
	f.Where(p.Field(audit.FieldErrorCode))
}

// WhereErrorMessage applies the entql string predicate on the error_message field.
func (f *AuditFilter) WhereErrorMessage(p entql.StringP) {
	f.Where(p.Field(audit.FieldErrorMessage))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *AuditFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(audit.FieldDescription))
}

// WhereMetadata applies the entql json.RawMessage predicate on the metadata field.
func (f *AuditFilter) WhereMetadata(p entql.BytesP) {
	f.Where(p.Field(audit.FieldMetadata))
}

// WhereOldValues applies the entql json.RawMessage predicate on the old_values field.
func (f *AuditFilter) WhereOldValues(p entql.BytesP) {
	f.Where(p.Field(audit.FieldOldValues))
}

// WhereCurrentValues applies the entql json.RawMessage predicate on the current_values field.
func (f *AuditFilter) WhereCurrentValues(p entql.BytesP) {
	f.Where(p.Field(audit.FieldCurrentValues))
}

// WhereTimestamp applies the entql time.Time predicate on the timestamp field.
func (f *AuditFilter) WhereTimestamp(p entql.TimeP) {
	f.Where(p.Field(audit.FieldTimestamp))
}

// WhereHasUser applies a predicate to check if query has an edge user.
func (f *AuditFilter) WhereHasUser() {
	f.Where(entql.HasEdge("user"))
}

// WhereHasUserWith applies a predicate to check if query has an edge user with a given conditions (other predicates).
func (f *AuditFilter) WhereHasUserWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("user", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrganization applies a predicate to check if query has an edge organization.
func (f *AuditFilter) WhereHasOrganization() {
	f.Where(entql.HasEdge("organization"))
}

// WhereHasOrganizationWith applies a predicate to check if query has an edge organization with a given conditions (other predicates).
func (f *AuditFilter) WhereHasOrganizationWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("organization", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSession applies a predicate to check if query has an edge session.
func (f *AuditFilter) WhereHasSession() {
	f.Where(entql.HasEdge("session"))
}

// WhereHasSessionWith applies a predicate to check if query has an edge session with a given conditions (other predicates).
func (f *AuditFilter) WhereHasSessionWith(preds ...predicate.Session) {
	f.Where(entql.HasEdgeWith("session", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (etq *EmailTemplateQuery) addPredicate(pred func(s *sql.Selector)) {
	etq.predicates = append(etq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the EmailTemplateQuery builder.
func (etq *EmailTemplateQuery) Filter() *EmailTemplateFilter {
	return &EmailTemplateFilter{config: etq.config, predicateAdder: etq}
}

// addPredicate implements the predicateAdder interface.
func (m *EmailTemplateMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the EmailTemplateMutation builder.
func (m *EmailTemplateMutation) Filter() *EmailTemplateFilter {
	return &EmailTemplateFilter{config: m.config, predicateAdder: m}
}

// EmailTemplateFilter provides a generic filtering capability at runtime for EmailTemplateQuery.
type EmailTemplateFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *EmailTemplateFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[4].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *EmailTemplateFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(emailtemplate.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *EmailTemplateFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(emailtemplate.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *EmailTemplateFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(emailtemplate.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *EmailTemplateFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(emailtemplate.FieldDeletedAt))
}

// WhereName applies the entql string predicate on the name field.
func (f *EmailTemplateFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(emailtemplate.FieldName))
}

// WhereSubject applies the entql string predicate on the subject field.
func (f *EmailTemplateFilter) WhereSubject(p entql.StringP) {
	f.Where(p.Field(emailtemplate.FieldSubject))
}

// WhereType applies the entql string predicate on the type field.
func (f *EmailTemplateFilter) WhereType(p entql.StringP) {
	f.Where(p.Field(emailtemplate.FieldType))
}

// WhereHTMLContent applies the entql string predicate on the html_content field.
func (f *EmailTemplateFilter) WhereHTMLContent(p entql.StringP) {
	f.Where(p.Field(emailtemplate.FieldHTMLContent))
}

// WhereTextContent applies the entql string predicate on the text_content field.
func (f *EmailTemplateFilter) WhereTextContent(p entql.StringP) {
	f.Where(p.Field(emailtemplate.FieldTextContent))
}

// WhereOrganizationID applies the entql string predicate on the organization_id field.
func (f *EmailTemplateFilter) WhereOrganizationID(p entql.StringP) {
	f.Where(p.Field(emailtemplate.FieldOrganizationID))
}

// WhereActive applies the entql bool predicate on the active field.
func (f *EmailTemplateFilter) WhereActive(p entql.BoolP) {
	f.Where(p.Field(emailtemplate.FieldActive))
}

// WhereSystem applies the entql bool predicate on the system field.
func (f *EmailTemplateFilter) WhereSystem(p entql.BoolP) {
	f.Where(p.Field(emailtemplate.FieldSystem))
}

// WhereLocale applies the entql string predicate on the locale field.
func (f *EmailTemplateFilter) WhereLocale(p entql.StringP) {
	f.Where(p.Field(emailtemplate.FieldLocale))
}

// WhereMetadata applies the entql json.RawMessage predicate on the metadata field.
func (f *EmailTemplateFilter) WhereMetadata(p entql.BytesP) {
	f.Where(p.Field(emailtemplate.FieldMetadata))
}

// WhereHasOrganization applies a predicate to check if query has an edge organization.
func (f *EmailTemplateFilter) WhereHasOrganization() {
	f.Where(entql.HasEdge("organization"))
}

// WhereHasOrganizationWith applies a predicate to check if query has an edge organization with a given conditions (other predicates).
func (f *EmailTemplateFilter) WhereHasOrganizationWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("organization", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (ffq *FeatureFlagQuery) addPredicate(pred func(s *sql.Selector)) {
	ffq.predicates = append(ffq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the FeatureFlagQuery builder.
func (ffq *FeatureFlagQuery) Filter() *FeatureFlagFilter {
	return &FeatureFlagFilter{config: ffq.config, predicateAdder: ffq}
}

// addPredicate implements the predicateAdder interface.
func (m *FeatureFlagMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the FeatureFlagMutation builder.
func (m *FeatureFlagMutation) Filter() *FeatureFlagFilter {
	return &FeatureFlagFilter{config: m.config, predicateAdder: m}
}

// FeatureFlagFilter provides a generic filtering capability at runtime for FeatureFlagQuery.
type FeatureFlagFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *FeatureFlagFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[5].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *FeatureFlagFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(featureflag.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *FeatureFlagFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(featureflag.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *FeatureFlagFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(featureflag.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *FeatureFlagFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(featureflag.FieldDeletedAt))
}

// WhereName applies the entql string predicate on the name field.
func (f *FeatureFlagFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(featureflag.FieldName))
}

// WhereKey applies the entql string predicate on the key field.
func (f *FeatureFlagFilter) WhereKey(p entql.StringP) {
	f.Where(p.Field(featureflag.FieldKey))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *FeatureFlagFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(featureflag.FieldDescription))
}

// WhereEnabled applies the entql bool predicate on the enabled field.
func (f *FeatureFlagFilter) WhereEnabled(p entql.BoolP) {
	f.Where(p.Field(featureflag.FieldEnabled))
}

// WhereIsPremium applies the entql bool predicate on the is_premium field.
func (f *FeatureFlagFilter) WhereIsPremium(p entql.BoolP) {
	f.Where(p.Field(featureflag.FieldIsPremium))
}

// WhereComponent applies the entql string predicate on the component field.
func (f *FeatureFlagFilter) WhereComponent(p entql.StringP) {
	f.Where(p.Field(featureflag.FieldComponent))
}

// WhereHasOrganizationFeatures applies a predicate to check if query has an edge organization_features.
func (f *FeatureFlagFilter) WhereHasOrganizationFeatures() {
	f.Where(entql.HasEdge("organization_features"))
}

// WhereHasOrganizationFeaturesWith applies a predicate to check if query has an edge organization_features with a given conditions (other predicates).
func (f *FeatureFlagFilter) WhereHasOrganizationFeaturesWith(preds ...predicate.OrganizationFeature) {
	f.Where(entql.HasEdgeWith("organization_features", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (ipq *IdentityProviderQuery) addPredicate(pred func(s *sql.Selector)) {
	ipq.predicates = append(ipq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the IdentityProviderQuery builder.
func (ipq *IdentityProviderQuery) Filter() *IdentityProviderFilter {
	return &IdentityProviderFilter{config: ipq.config, predicateAdder: ipq}
}

// addPredicate implements the predicateAdder interface.
func (m *IdentityProviderMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the IdentityProviderMutation builder.
func (m *IdentityProviderMutation) Filter() *IdentityProviderFilter {
	return &IdentityProviderFilter{config: m.config, predicateAdder: m}
}

// IdentityProviderFilter provides a generic filtering capability at runtime for IdentityProviderQuery.
type IdentityProviderFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *IdentityProviderFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[6].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *IdentityProviderFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(identityprovider.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *IdentityProviderFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(identityprovider.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *IdentityProviderFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(identityprovider.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *IdentityProviderFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(identityprovider.FieldDeletedAt))
}

// WhereName applies the entql string predicate on the name field.
func (f *IdentityProviderFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(identityprovider.FieldName))
}

// WhereOrganizationID applies the entql string predicate on the organization_id field.
func (f *IdentityProviderFilter) WhereOrganizationID(p entql.StringP) {
	f.Where(p.Field(identityprovider.FieldOrganizationID))
}

// WhereProviderType applies the entql string predicate on the provider_type field.
func (f *IdentityProviderFilter) WhereProviderType(p entql.StringP) {
	f.Where(p.Field(identityprovider.FieldProviderType))
}

// WhereClientID applies the entql string predicate on the client_id field.
func (f *IdentityProviderFilter) WhereClientID(p entql.StringP) {
	f.Where(p.Field(identityprovider.FieldClientID))
}

// WhereClientSecret applies the entql string predicate on the client_secret field.
func (f *IdentityProviderFilter) WhereClientSecret(p entql.StringP) {
	f.Where(p.Field(identityprovider.FieldClientSecret))
}

// WhereIssuer applies the entql string predicate on the issuer field.
func (f *IdentityProviderFilter) WhereIssuer(p entql.StringP) {
	f.Where(p.Field(identityprovider.FieldIssuer))
}

// WhereAuthorizationEndpoint applies the entql string predicate on the authorization_endpoint field.
func (f *IdentityProviderFilter) WhereAuthorizationEndpoint(p entql.StringP) {
	f.Where(p.Field(identityprovider.FieldAuthorizationEndpoint))
}

// WhereTokenEndpoint applies the entql string predicate on the token_endpoint field.
func (f *IdentityProviderFilter) WhereTokenEndpoint(p entql.StringP) {
	f.Where(p.Field(identityprovider.FieldTokenEndpoint))
}

// WhereUserinfoEndpoint applies the entql string predicate on the userinfo_endpoint field.
func (f *IdentityProviderFilter) WhereUserinfoEndpoint(p entql.StringP) {
	f.Where(p.Field(identityprovider.FieldUserinfoEndpoint))
}

// WhereJwksURI applies the entql string predicate on the jwks_uri field.
func (f *IdentityProviderFilter) WhereJwksURI(p entql.StringP) {
	f.Where(p.Field(identityprovider.FieldJwksURI))
}

// WhereMetadataURL applies the entql string predicate on the metadata_url field.
func (f *IdentityProviderFilter) WhereMetadataURL(p entql.StringP) {
	f.Where(p.Field(identityprovider.FieldMetadataURL))
}

// WhereRedirectURI applies the entql string predicate on the redirect_uri field.
func (f *IdentityProviderFilter) WhereRedirectURI(p entql.StringP) {
	f.Where(p.Field(identityprovider.FieldRedirectURI))
}

// WhereCertificate applies the entql string predicate on the certificate field.
func (f *IdentityProviderFilter) WhereCertificate(p entql.StringP) {
	f.Where(p.Field(identityprovider.FieldCertificate))
}

// WherePrivateKey applies the entql string predicate on the private_key field.
func (f *IdentityProviderFilter) WherePrivateKey(p entql.StringP) {
	f.Where(p.Field(identityprovider.FieldPrivateKey))
}

// WhereActive applies the entql bool predicate on the active field.
func (f *IdentityProviderFilter) WhereActive(p entql.BoolP) {
	f.Where(p.Field(identityprovider.FieldActive))
}

// WhereEnabled applies the entql bool predicate on the enabled field.
func (f *IdentityProviderFilter) WhereEnabled(p entql.BoolP) {
	f.Where(p.Field(identityprovider.FieldEnabled))
}

// WherePrimary applies the entql bool predicate on the primary field.
func (f *IdentityProviderFilter) WherePrimary(p entql.BoolP) {
	f.Where(p.Field(identityprovider.FieldPrimary))
}

// WhereAutoProvision applies the entql bool predicate on the auto_provision field.
func (f *IdentityProviderFilter) WhereAutoProvision(p entql.BoolP) {
	f.Where(p.Field(identityprovider.FieldAutoProvision))
}

// WhereDefaultRole applies the entql string predicate on the default_role field.
func (f *IdentityProviderFilter) WhereDefaultRole(p entql.StringP) {
	f.Where(p.Field(identityprovider.FieldDefaultRole))
}

// WhereDomain applies the entql string predicate on the domain field.
func (f *IdentityProviderFilter) WhereDomain(p entql.StringP) {
	f.Where(p.Field(identityprovider.FieldDomain))
}

// WhereIconURL applies the entql string predicate on the icon_url field.
func (f *IdentityProviderFilter) WhereIconURL(p entql.StringP) {
	f.Where(p.Field(identityprovider.FieldIconURL))
}

// WhereButtonText applies the entql string predicate on the button_text field.
func (f *IdentityProviderFilter) WhereButtonText(p entql.StringP) {
	f.Where(p.Field(identityprovider.FieldButtonText))
}

// WhereProtocol applies the entql string predicate on the protocol field.
func (f *IdentityProviderFilter) WhereProtocol(p entql.StringP) {
	f.Where(p.Field(identityprovider.FieldProtocol))
}

// WhereDomains applies the entql json.RawMessage predicate on the domains field.
func (f *IdentityProviderFilter) WhereDomains(p entql.BytesP) {
	f.Where(p.Field(identityprovider.FieldDomains))
}

// WhereAttributesMapping applies the entql json.RawMessage predicate on the attributes_mapping field.
func (f *IdentityProviderFilter) WhereAttributesMapping(p entql.BytesP) {
	f.Where(p.Field(identityprovider.FieldAttributesMapping))
}

// WhereMetadata applies the entql json.RawMessage predicate on the metadata field.
func (f *IdentityProviderFilter) WhereMetadata(p entql.BytesP) {
	f.Where(p.Field(identityprovider.FieldMetadata))
}

// WhereHasOrganization applies a predicate to check if query has an edge organization.
func (f *IdentityProviderFilter) WhereHasOrganization() {
	f.Where(entql.HasEdge("organization"))
}

// WhereHasOrganizationWith applies a predicate to check if query has an edge organization with a given conditions (other predicates).
func (f *IdentityProviderFilter) WhereHasOrganizationWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("organization", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrganizationProviders applies a predicate to check if query has an edge organization_providers.
func (f *IdentityProviderFilter) WhereHasOrganizationProviders() {
	f.Where(entql.HasEdge("organization_providers"))
}

// WhereHasOrganizationProvidersWith applies a predicate to check if query has an edge organization_providers with a given conditions (other predicates).
func (f *IdentityProviderFilter) WhereHasOrganizationProvidersWith(preds ...predicate.OrganizationProvider) {
	f.Where(entql.HasEdgeWith("organization_providers", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (mq *MFAQuery) addPredicate(pred func(s *sql.Selector)) {
	mq.predicates = append(mq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the MFAQuery builder.
func (mq *MFAQuery) Filter() *MFAFilter {
	return &MFAFilter{config: mq.config, predicateAdder: mq}
}

// addPredicate implements the predicateAdder interface.
func (m *MFAMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the MFAMutation builder.
func (m *MFAMutation) Filter() *MFAFilter {
	return &MFAFilter{config: m.config, predicateAdder: m}
}

// MFAFilter provides a generic filtering capability at runtime for MFAQuery.
type MFAFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *MFAFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[7].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *MFAFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(mfa.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *MFAFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(mfa.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *MFAFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(mfa.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *MFAFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(mfa.FieldDeletedAt))
}

// WhereUserID applies the entql string predicate on the user_id field.
func (f *MFAFilter) WhereUserID(p entql.StringP) {
	f.Where(p.Field(mfa.FieldUserID))
}

// WhereMethod applies the entql string predicate on the method field.
func (f *MFAFilter) WhereMethod(p entql.StringP) {
	f.Where(p.Field(mfa.FieldMethod))
}

// WhereSecret applies the entql string predicate on the secret field.
func (f *MFAFilter) WhereSecret(p entql.StringP) {
	f.Where(p.Field(mfa.FieldSecret))
}

// WhereVerified applies the entql bool predicate on the verified field.
func (f *MFAFilter) WhereVerified(p entql.BoolP) {
	f.Where(p.Field(mfa.FieldVerified))
}

// WhereActive applies the entql bool predicate on the active field.
func (f *MFAFilter) WhereActive(p entql.BoolP) {
	f.Where(p.Field(mfa.FieldActive))
}

// WhereBackupCodes applies the entql json.RawMessage predicate on the backup_codes field.
func (f *MFAFilter) WhereBackupCodes(p entql.BytesP) {
	f.Where(p.Field(mfa.FieldBackupCodes))
}

// WherePhoneNumber applies the entql string predicate on the phone_number field.
func (f *MFAFilter) WherePhoneNumber(p entql.StringP) {
	f.Where(p.Field(mfa.FieldPhoneNumber))
}

// WhereEmail applies the entql string predicate on the email field.
func (f *MFAFilter) WhereEmail(p entql.StringP) {
	f.Where(p.Field(mfa.FieldEmail))
}

// WhereLastUsed applies the entql time.Time predicate on the last_used field.
func (f *MFAFilter) WhereLastUsed(p entql.TimeP) {
	f.Where(p.Field(mfa.FieldLastUsed))
}

// WhereMetadata applies the entql json.RawMessage predicate on the metadata field.
func (f *MFAFilter) WhereMetadata(p entql.BytesP) {
	f.Where(p.Field(mfa.FieldMetadata))
}

// WhereHasUser applies a predicate to check if query has an edge user.
func (f *MFAFilter) WhereHasUser() {
	f.Where(entql.HasEdge("user"))
}

// WhereHasUserWith applies a predicate to check if query has an edge user with a given conditions (other predicates).
func (f *MFAFilter) WhereHasUserWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("user", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (mq *MembershipQuery) addPredicate(pred func(s *sql.Selector)) {
	mq.predicates = append(mq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the MembershipQuery builder.
func (mq *MembershipQuery) Filter() *MembershipFilter {
	return &MembershipFilter{config: mq.config, predicateAdder: mq}
}

// addPredicate implements the predicateAdder interface.
func (m *MembershipMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the MembershipMutation builder.
func (m *MembershipMutation) Filter() *MembershipFilter {
	return &MembershipFilter{config: m.config, predicateAdder: m}
}

// MembershipFilter provides a generic filtering capability at runtime for MembershipQuery.
type MembershipFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *MembershipFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[8].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *MembershipFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(membership.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *MembershipFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(membership.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *MembershipFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(membership.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *MembershipFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(membership.FieldDeletedAt))
}

// WhereUserID applies the entql string predicate on the user_id field.
func (f *MembershipFilter) WhereUserID(p entql.StringP) {
	f.Where(p.Field(membership.FieldUserID))
}

// WhereOrganizationID applies the entql string predicate on the organization_id field.
func (f *MembershipFilter) WhereOrganizationID(p entql.StringP) {
	f.Where(p.Field(membership.FieldOrganizationID))
}

// WhereRoleID applies the entql string predicate on the role_id field.
func (f *MembershipFilter) WhereRoleID(p entql.StringP) {
	f.Where(p.Field(membership.FieldRoleID))
}

// WhereEmail applies the entql string predicate on the email field.
func (f *MembershipFilter) WhereEmail(p entql.StringP) {
	f.Where(p.Field(membership.FieldEmail))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *MembershipFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(membership.FieldStatus))
}

// WhereInvitedBy applies the entql string predicate on the invited_by field.
func (f *MembershipFilter) WhereInvitedBy(p entql.StringP) {
	f.Where(p.Field(membership.FieldInvitedBy))
}

// WhereInvitedAt applies the entql time.Time predicate on the invited_at field.
func (f *MembershipFilter) WhereInvitedAt(p entql.TimeP) {
	f.Where(p.Field(membership.FieldInvitedAt))
}

// WhereJoinedAt applies the entql time.Time predicate on the joined_at field.
func (f *MembershipFilter) WhereJoinedAt(p entql.TimeP) {
	f.Where(p.Field(membership.FieldJoinedAt))
}

// WhereExpiresAt applies the entql time.Time predicate on the expires_at field.
func (f *MembershipFilter) WhereExpiresAt(p entql.TimeP) {
	f.Where(p.Field(membership.FieldExpiresAt))
}

// WhereInvitationToken applies the entql string predicate on the invitation_token field.
func (f *MembershipFilter) WhereInvitationToken(p entql.StringP) {
	f.Where(p.Field(membership.FieldInvitationToken))
}

// WhereIsBillingContact applies the entql bool predicate on the is_billing_contact field.
func (f *MembershipFilter) WhereIsBillingContact(p entql.BoolP) {
	f.Where(p.Field(membership.FieldIsBillingContact))
}

// WhereIsPrimaryContact applies the entql bool predicate on the is_primary_contact field.
func (f *MembershipFilter) WhereIsPrimaryContact(p entql.BoolP) {
	f.Where(p.Field(membership.FieldIsPrimaryContact))
}

// WhereLeftAt applies the entql time.Time predicate on the left_at field.
func (f *MembershipFilter) WhereLeftAt(p entql.TimeP) {
	f.Where(p.Field(membership.FieldLeftAt))
}

// WhereMetadata applies the entql json.RawMessage predicate on the metadata field.
func (f *MembershipFilter) WhereMetadata(p entql.BytesP) {
	f.Where(p.Field(membership.FieldMetadata))
}

// WhereCustomFields applies the entql json.RawMessage predicate on the custom_fields field.
func (f *MembershipFilter) WhereCustomFields(p entql.BytesP) {
	f.Where(p.Field(membership.FieldCustomFields))
}

// WhereHasUser applies a predicate to check if query has an edge user.
func (f *MembershipFilter) WhereHasUser() {
	f.Where(entql.HasEdge("user"))
}

// WhereHasUserWith applies a predicate to check if query has an edge user with a given conditions (other predicates).
func (f *MembershipFilter) WhereHasUserWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("user", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrganization applies a predicate to check if query has an edge organization.
func (f *MembershipFilter) WhereHasOrganization() {
	f.Where(entql.HasEdge("organization"))
}

// WhereHasOrganizationWith applies a predicate to check if query has an edge organization with a given conditions (other predicates).
func (f *MembershipFilter) WhereHasOrganizationWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("organization", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRole applies a predicate to check if query has an edge role.
func (f *MembershipFilter) WhereHasRole() {
	f.Where(entql.HasEdge("role"))
}

// WhereHasRoleWith applies a predicate to check if query has an edge role with a given conditions (other predicates).
func (f *MembershipFilter) WhereHasRoleWith(preds ...predicate.Role) {
	f.Where(entql.HasEdgeWith("role", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasInviter applies a predicate to check if query has an edge inviter.
func (f *MembershipFilter) WhereHasInviter() {
	f.Where(entql.HasEdge("inviter"))
}

// WhereHasInviterWith applies a predicate to check if query has an edge inviter with a given conditions (other predicates).
func (f *MembershipFilter) WhereHasInviterWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("inviter", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (oaq *OAuthAuthorizationQuery) addPredicate(pred func(s *sql.Selector)) {
	oaq.predicates = append(oaq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OAuthAuthorizationQuery builder.
func (oaq *OAuthAuthorizationQuery) Filter() *OAuthAuthorizationFilter {
	return &OAuthAuthorizationFilter{config: oaq.config, predicateAdder: oaq}
}

// addPredicate implements the predicateAdder interface.
func (m *OAuthAuthorizationMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OAuthAuthorizationMutation builder.
func (m *OAuthAuthorizationMutation) Filter() *OAuthAuthorizationFilter {
	return &OAuthAuthorizationFilter{config: m.config, predicateAdder: m}
}

// OAuthAuthorizationFilter provides a generic filtering capability at runtime for OAuthAuthorizationQuery.
type OAuthAuthorizationFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *OAuthAuthorizationFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[9].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *OAuthAuthorizationFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(oauthauthorization.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *OAuthAuthorizationFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(oauthauthorization.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *OAuthAuthorizationFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(oauthauthorization.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *OAuthAuthorizationFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(oauthauthorization.FieldDeletedAt))
}

// WhereClientID applies the entql string predicate on the client_id field.
func (f *OAuthAuthorizationFilter) WhereClientID(p entql.StringP) {
	f.Where(p.Field(oauthauthorization.FieldClientID))
}

// WhereUserID applies the entql string predicate on the user_id field.
func (f *OAuthAuthorizationFilter) WhereUserID(p entql.StringP) {
	f.Where(p.Field(oauthauthorization.FieldUserID))
}

// WhereOrganizationID applies the entql string predicate on the organization_id field.
func (f *OAuthAuthorizationFilter) WhereOrganizationID(p entql.StringP) {
	f.Where(p.Field(oauthauthorization.FieldOrganizationID))
}

// WhereCode applies the entql string predicate on the code field.
func (f *OAuthAuthorizationFilter) WhereCode(p entql.StringP) {
	f.Where(p.Field(oauthauthorization.FieldCode))
}

// WhereCodeChallenge applies the entql string predicate on the code_challenge field.
func (f *OAuthAuthorizationFilter) WhereCodeChallenge(p entql.StringP) {
	f.Where(p.Field(oauthauthorization.FieldCodeChallenge))
}

// WhereCodeChallengeMethod applies the entql string predicate on the code_challenge_method field.
func (f *OAuthAuthorizationFilter) WhereCodeChallengeMethod(p entql.StringP) {
	f.Where(p.Field(oauthauthorization.FieldCodeChallengeMethod))
}

// WhereRedirectURI applies the entql string predicate on the redirect_uri field.
func (f *OAuthAuthorizationFilter) WhereRedirectURI(p entql.StringP) {
	f.Where(p.Field(oauthauthorization.FieldRedirectURI))
}

// WhereScopeNames applies the entql json.RawMessage predicate on the scope_names field.
func (f *OAuthAuthorizationFilter) WhereScopeNames(p entql.BytesP) {
	f.Where(p.Field(oauthauthorization.FieldScopeNames))
}

// WhereUsed applies the entql bool predicate on the used field.
func (f *OAuthAuthorizationFilter) WhereUsed(p entql.BoolP) {
	f.Where(p.Field(oauthauthorization.FieldUsed))
}

// WhereUsedAt applies the entql time.Time predicate on the used_at field.
func (f *OAuthAuthorizationFilter) WhereUsedAt(p entql.TimeP) {
	f.Where(p.Field(oauthauthorization.FieldUsedAt))
}

// WhereExpiresAt applies the entql time.Time predicate on the expires_at field.
func (f *OAuthAuthorizationFilter) WhereExpiresAt(p entql.TimeP) {
	f.Where(p.Field(oauthauthorization.FieldExpiresAt))
}

// WhereState applies the entql string predicate on the state field.
func (f *OAuthAuthorizationFilter) WhereState(p entql.StringP) {
	f.Where(p.Field(oauthauthorization.FieldState))
}

// WhereNonce applies the entql string predicate on the nonce field.
func (f *OAuthAuthorizationFilter) WhereNonce(p entql.StringP) {
	f.Where(p.Field(oauthauthorization.FieldNonce))
}

// WhereUserAgent applies the entql string predicate on the user_agent field.
func (f *OAuthAuthorizationFilter) WhereUserAgent(p entql.StringP) {
	f.Where(p.Field(oauthauthorization.FieldUserAgent))
}

// WhereIPAddress applies the entql string predicate on the ip_address field.
func (f *OAuthAuthorizationFilter) WhereIPAddress(p entql.StringP) {
	f.Where(p.Field(oauthauthorization.FieldIPAddress))
}

// WhereHasClient applies a predicate to check if query has an edge client.
func (f *OAuthAuthorizationFilter) WhereHasClient() {
	f.Where(entql.HasEdge("client"))
}

// WhereHasClientWith applies a predicate to check if query has an edge client with a given conditions (other predicates).
func (f *OAuthAuthorizationFilter) WhereHasClientWith(preds ...predicate.OAuthClient) {
	f.Where(entql.HasEdgeWith("client", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUser applies a predicate to check if query has an edge user.
func (f *OAuthAuthorizationFilter) WhereHasUser() {
	f.Where(entql.HasEdge("user"))
}

// WhereHasUserWith applies a predicate to check if query has an edge user with a given conditions (other predicates).
func (f *OAuthAuthorizationFilter) WhereHasUserWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("user", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasScopes applies a predicate to check if query has an edge scopes.
func (f *OAuthAuthorizationFilter) WhereHasScopes() {
	f.Where(entql.HasEdge("scopes"))
}

// WhereHasScopesWith applies a predicate to check if query has an edge scopes with a given conditions (other predicates).
func (f *OAuthAuthorizationFilter) WhereHasScopesWith(preds ...predicate.OAuthScope) {
	f.Where(entql.HasEdgeWith("scopes", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (ocq *OAuthClientQuery) addPredicate(pred func(s *sql.Selector)) {
	ocq.predicates = append(ocq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OAuthClientQuery builder.
func (ocq *OAuthClientQuery) Filter() *OAuthClientFilter {
	return &OAuthClientFilter{config: ocq.config, predicateAdder: ocq}
}

// addPredicate implements the predicateAdder interface.
func (m *OAuthClientMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OAuthClientMutation builder.
func (m *OAuthClientMutation) Filter() *OAuthClientFilter {
	return &OAuthClientFilter{config: m.config, predicateAdder: m}
}

// OAuthClientFilter provides a generic filtering capability at runtime for OAuthClientQuery.
type OAuthClientFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *OAuthClientFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[10].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *OAuthClientFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(oauthclient.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *OAuthClientFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(oauthclient.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *OAuthClientFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(oauthclient.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *OAuthClientFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(oauthclient.FieldDeletedAt))
}

// WhereClientID applies the entql string predicate on the client_id field.
func (f *OAuthClientFilter) WhereClientID(p entql.StringP) {
	f.Where(p.Field(oauthclient.FieldClientID))
}

// WhereClientSecret applies the entql string predicate on the client_secret field.
func (f *OAuthClientFilter) WhereClientSecret(p entql.StringP) {
	f.Where(p.Field(oauthclient.FieldClientSecret))
}

// WhereClientName applies the entql string predicate on the client_name field.
func (f *OAuthClientFilter) WhereClientName(p entql.StringP) {
	f.Where(p.Field(oauthclient.FieldClientName))
}

// WhereClientDescription applies the entql string predicate on the client_description field.
func (f *OAuthClientFilter) WhereClientDescription(p entql.StringP) {
	f.Where(p.Field(oauthclient.FieldClientDescription))
}

// WhereClientURI applies the entql string predicate on the client_uri field.
func (f *OAuthClientFilter) WhereClientURI(p entql.StringP) {
	f.Where(p.Field(oauthclient.FieldClientURI))
}

// WhereLogoURI applies the entql string predicate on the logo_uri field.
func (f *OAuthClientFilter) WhereLogoURI(p entql.StringP) {
	f.Where(p.Field(oauthclient.FieldLogoURI))
}

// WhereRedirectUris applies the entql json.RawMessage predicate on the redirect_uris field.
func (f *OAuthClientFilter) WhereRedirectUris(p entql.BytesP) {
	f.Where(p.Field(oauthclient.FieldRedirectUris))
}

// WherePostLogoutRedirectUris applies the entql json.RawMessage predicate on the post_logout_redirect_uris field.
func (f *OAuthClientFilter) WherePostLogoutRedirectUris(p entql.BytesP) {
	f.Where(p.Field(oauthclient.FieldPostLogoutRedirectUris))
}

// WhereOrganizationID applies the entql string predicate on the organization_id field.
func (f *OAuthClientFilter) WhereOrganizationID(p entql.StringP) {
	f.Where(p.Field(oauthclient.FieldOrganizationID))
}

// WherePublic applies the entql bool predicate on the public field.
func (f *OAuthClientFilter) WherePublic(p entql.BoolP) {
	f.Where(p.Field(oauthclient.FieldPublic))
}

// WhereActive applies the entql bool predicate on the active field.
func (f *OAuthClientFilter) WhereActive(p entql.BoolP) {
	f.Where(p.Field(oauthclient.FieldActive))
}

// WhereAllowedCorsOrigins applies the entql json.RawMessage predicate on the allowed_cors_origins field.
func (f *OAuthClientFilter) WhereAllowedCorsOrigins(p entql.BytesP) {
	f.Where(p.Field(oauthclient.FieldAllowedCorsOrigins))
}

// WhereAllowedGrantTypes applies the entql json.RawMessage predicate on the allowed_grant_types field.
func (f *OAuthClientFilter) WhereAllowedGrantTypes(p entql.BytesP) {
	f.Where(p.Field(oauthclient.FieldAllowedGrantTypes))
}

// WhereTokenExpirySeconds applies the entql int predicate on the token_expiry_seconds field.
func (f *OAuthClientFilter) WhereTokenExpirySeconds(p entql.IntP) {
	f.Where(p.Field(oauthclient.FieldTokenExpirySeconds))
}

// WhereRefreshTokenExpirySeconds applies the entql int predicate on the refresh_token_expiry_seconds field.
func (f *OAuthClientFilter) WhereRefreshTokenExpirySeconds(p entql.IntP) {
	f.Where(p.Field(oauthclient.FieldRefreshTokenExpirySeconds))
}

// WhereAuthCodeExpirySeconds applies the entql int predicate on the auth_code_expiry_seconds field.
func (f *OAuthClientFilter) WhereAuthCodeExpirySeconds(p entql.IntP) {
	f.Where(p.Field(oauthclient.FieldAuthCodeExpirySeconds))
}

// WhereRequiresPkce applies the entql bool predicate on the requires_pkce field.
func (f *OAuthClientFilter) WhereRequiresPkce(p entql.BoolP) {
	f.Where(p.Field(oauthclient.FieldRequiresPkce))
}

// WhereRequiresConsent applies the entql bool predicate on the requires_consent field.
func (f *OAuthClientFilter) WhereRequiresConsent(p entql.BoolP) {
	f.Where(p.Field(oauthclient.FieldRequiresConsent))
}

// WhereHasOrganization applies a predicate to check if query has an edge organization.
func (f *OAuthClientFilter) WhereHasOrganization() {
	f.Where(entql.HasEdge("organization"))
}

// WhereHasOrganizationWith applies a predicate to check if query has an edge organization with a given conditions (other predicates).
func (f *OAuthClientFilter) WhereHasOrganizationWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("organization", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasTokens applies a predicate to check if query has an edge tokens.
func (f *OAuthClientFilter) WhereHasTokens() {
	f.Where(entql.HasEdge("tokens"))
}

// WhereHasTokensWith applies a predicate to check if query has an edge tokens with a given conditions (other predicates).
func (f *OAuthClientFilter) WhereHasTokensWith(preds ...predicate.OAuthToken) {
	f.Where(entql.HasEdgeWith("tokens", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAuthorizations applies a predicate to check if query has an edge authorizations.
func (f *OAuthClientFilter) WhereHasAuthorizations() {
	f.Where(entql.HasEdge("authorizations"))
}

// WhereHasAuthorizationsWith applies a predicate to check if query has an edge authorizations with a given conditions (other predicates).
func (f *OAuthClientFilter) WhereHasAuthorizationsWith(preds ...predicate.OAuthAuthorization) {
	f.Where(entql.HasEdgeWith("authorizations", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasScopes applies a predicate to check if query has an edge scopes.
func (f *OAuthClientFilter) WhereHasScopes() {
	f.Where(entql.HasEdge("scopes"))
}

// WhereHasScopesWith applies a predicate to check if query has an edge scopes with a given conditions (other predicates).
func (f *OAuthClientFilter) WhereHasScopesWith(preds ...predicate.OAuthScope) {
	f.Where(entql.HasEdgeWith("scopes", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (osq *OAuthScopeQuery) addPredicate(pred func(s *sql.Selector)) {
	osq.predicates = append(osq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OAuthScopeQuery builder.
func (osq *OAuthScopeQuery) Filter() *OAuthScopeFilter {
	return &OAuthScopeFilter{config: osq.config, predicateAdder: osq}
}

// addPredicate implements the predicateAdder interface.
func (m *OAuthScopeMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OAuthScopeMutation builder.
func (m *OAuthScopeMutation) Filter() *OAuthScopeFilter {
	return &OAuthScopeFilter{config: m.config, predicateAdder: m}
}

// OAuthScopeFilter provides a generic filtering capability at runtime for OAuthScopeQuery.
type OAuthScopeFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *OAuthScopeFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[11].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *OAuthScopeFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(oauthscope.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *OAuthScopeFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(oauthscope.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *OAuthScopeFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(oauthscope.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *OAuthScopeFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(oauthscope.FieldDeletedAt))
}

// WhereName applies the entql string predicate on the name field.
func (f *OAuthScopeFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(oauthscope.FieldName))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *OAuthScopeFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(oauthscope.FieldDescription))
}

// WhereDefaultScope applies the entql bool predicate on the default_scope field.
func (f *OAuthScopeFilter) WhereDefaultScope(p entql.BoolP) {
	f.Where(p.Field(oauthscope.FieldDefaultScope))
}

// WherePublic applies the entql bool predicate on the public field.
func (f *OAuthScopeFilter) WherePublic(p entql.BoolP) {
	f.Where(p.Field(oauthscope.FieldPublic))
}

// WhereHasClients applies a predicate to check if query has an edge clients.
func (f *OAuthScopeFilter) WhereHasClients() {
	f.Where(entql.HasEdge("clients"))
}

// WhereHasClientsWith applies a predicate to check if query has an edge clients with a given conditions (other predicates).
func (f *OAuthScopeFilter) WhereHasClientsWith(preds ...predicate.OAuthClient) {
	f.Where(entql.HasEdgeWith("clients", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasTokens applies a predicate to check if query has an edge tokens.
func (f *OAuthScopeFilter) WhereHasTokens() {
	f.Where(entql.HasEdge("tokens"))
}

// WhereHasTokensWith applies a predicate to check if query has an edge tokens with a given conditions (other predicates).
func (f *OAuthScopeFilter) WhereHasTokensWith(preds ...predicate.OAuthToken) {
	f.Where(entql.HasEdgeWith("tokens", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAuthorizations applies a predicate to check if query has an edge authorizations.
func (f *OAuthScopeFilter) WhereHasAuthorizations() {
	f.Where(entql.HasEdge("authorizations"))
}

// WhereHasAuthorizationsWith applies a predicate to check if query has an edge authorizations with a given conditions (other predicates).
func (f *OAuthScopeFilter) WhereHasAuthorizationsWith(preds ...predicate.OAuthAuthorization) {
	f.Where(entql.HasEdgeWith("authorizations", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (otq *OAuthTokenQuery) addPredicate(pred func(s *sql.Selector)) {
	otq.predicates = append(otq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OAuthTokenQuery builder.
func (otq *OAuthTokenQuery) Filter() *OAuthTokenFilter {
	return &OAuthTokenFilter{config: otq.config, predicateAdder: otq}
}

// addPredicate implements the predicateAdder interface.
func (m *OAuthTokenMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OAuthTokenMutation builder.
func (m *OAuthTokenMutation) Filter() *OAuthTokenFilter {
	return &OAuthTokenFilter{config: m.config, predicateAdder: m}
}

// OAuthTokenFilter provides a generic filtering capability at runtime for OAuthTokenQuery.
type OAuthTokenFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *OAuthTokenFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[12].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *OAuthTokenFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(oauthtoken.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *OAuthTokenFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(oauthtoken.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *OAuthTokenFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(oauthtoken.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *OAuthTokenFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(oauthtoken.FieldDeletedAt))
}

// WhereAccessToken applies the entql string predicate on the access_token field.
func (f *OAuthTokenFilter) WhereAccessToken(p entql.StringP) {
	f.Where(p.Field(oauthtoken.FieldAccessToken))
}

// WhereRefreshToken applies the entql string predicate on the refresh_token field.
func (f *OAuthTokenFilter) WhereRefreshToken(p entql.StringP) {
	f.Where(p.Field(oauthtoken.FieldRefreshToken))
}

// WhereTokenType applies the entql string predicate on the token_type field.
func (f *OAuthTokenFilter) WhereTokenType(p entql.StringP) {
	f.Where(p.Field(oauthtoken.FieldTokenType))
}

// WhereClientID applies the entql string predicate on the client_id field.
func (f *OAuthTokenFilter) WhereClientID(p entql.StringP) {
	f.Where(p.Field(oauthtoken.FieldClientID))
}

// WhereUserID applies the entql string predicate on the user_id field.
func (f *OAuthTokenFilter) WhereUserID(p entql.StringP) {
	f.Where(p.Field(oauthtoken.FieldUserID))
}

// WhereOrganizationID applies the entql string predicate on the organization_id field.
func (f *OAuthTokenFilter) WhereOrganizationID(p entql.StringP) {
	f.Where(p.Field(oauthtoken.FieldOrganizationID))
}

// WhereScopeNames applies the entql json.RawMessage predicate on the scope_names field.
func (f *OAuthTokenFilter) WhereScopeNames(p entql.BytesP) {
	f.Where(p.Field(oauthtoken.FieldScopeNames))
}

// WhereExpiresIn applies the entql int predicate on the expires_in field.
func (f *OAuthTokenFilter) WhereExpiresIn(p entql.IntP) {
	f.Where(p.Field(oauthtoken.FieldExpiresIn))
}

// WhereExpiresAt applies the entql time.Time predicate on the expires_at field.
func (f *OAuthTokenFilter) WhereExpiresAt(p entql.TimeP) {
	f.Where(p.Field(oauthtoken.FieldExpiresAt))
}

// WhereRefreshTokenExpiresAt applies the entql time.Time predicate on the refresh_token_expires_at field.
func (f *OAuthTokenFilter) WhereRefreshTokenExpiresAt(p entql.TimeP) {
	f.Where(p.Field(oauthtoken.FieldRefreshTokenExpiresAt))
}

// WhereRevoked applies the entql bool predicate on the revoked field.
func (f *OAuthTokenFilter) WhereRevoked(p entql.BoolP) {
	f.Where(p.Field(oauthtoken.FieldRevoked))
}

// WhereRevokedAt applies the entql time.Time predicate on the revoked_at field.
func (f *OAuthTokenFilter) WhereRevokedAt(p entql.TimeP) {
	f.Where(p.Field(oauthtoken.FieldRevokedAt))
}

// WhereIPAddress applies the entql string predicate on the ip_address field.
func (f *OAuthTokenFilter) WhereIPAddress(p entql.StringP) {
	f.Where(p.Field(oauthtoken.FieldIPAddress))
}

// WhereUserAgent applies the entql string predicate on the user_agent field.
func (f *OAuthTokenFilter) WhereUserAgent(p entql.StringP) {
	f.Where(p.Field(oauthtoken.FieldUserAgent))
}

// WhereHasClient applies a predicate to check if query has an edge client.
func (f *OAuthTokenFilter) WhereHasClient() {
	f.Where(entql.HasEdge("client"))
}

// WhereHasClientWith applies a predicate to check if query has an edge client with a given conditions (other predicates).
func (f *OAuthTokenFilter) WhereHasClientWith(preds ...predicate.OAuthClient) {
	f.Where(entql.HasEdgeWith("client", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUser applies a predicate to check if query has an edge user.
func (f *OAuthTokenFilter) WhereHasUser() {
	f.Where(entql.HasEdge("user"))
}

// WhereHasUserWith applies a predicate to check if query has an edge user with a given conditions (other predicates).
func (f *OAuthTokenFilter) WhereHasUserWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("user", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasScopes applies a predicate to check if query has an edge scopes.
func (f *OAuthTokenFilter) WhereHasScopes() {
	f.Where(entql.HasEdge("scopes"))
}

// WhereHasScopesWith applies a predicate to check if query has an edge scopes with a given conditions (other predicates).
func (f *OAuthTokenFilter) WhereHasScopesWith(preds ...predicate.OAuthScope) {
	f.Where(entql.HasEdgeWith("scopes", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (oq *OrganizationQuery) addPredicate(pred func(s *sql.Selector)) {
	oq.predicates = append(oq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OrganizationQuery builder.
func (oq *OrganizationQuery) Filter() *OrganizationFilter {
	return &OrganizationFilter{config: oq.config, predicateAdder: oq}
}

// addPredicate implements the predicateAdder interface.
func (m *OrganizationMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OrganizationMutation builder.
func (m *OrganizationMutation) Filter() *OrganizationFilter {
	return &OrganizationFilter{config: m.config, predicateAdder: m}
}

// OrganizationFilter provides a generic filtering capability at runtime for OrganizationQuery.
type OrganizationFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *OrganizationFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[13].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *OrganizationFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(organization.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *OrganizationFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(organization.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *OrganizationFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(organization.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *OrganizationFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(organization.FieldDeletedAt))
}

// WhereName applies the entql string predicate on the name field.
func (f *OrganizationFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(organization.FieldName))
}

// WhereSlug applies the entql string predicate on the slug field.
func (f *OrganizationFilter) WhereSlug(p entql.StringP) {
	f.Where(p.Field(organization.FieldSlug))
}

// WhereDomains applies the entql json.RawMessage predicate on the domains field.
func (f *OrganizationFilter) WhereDomains(p entql.BytesP) {
	f.Where(p.Field(organization.FieldDomains))
}

// WhereVerifiedDomains applies the entql json.RawMessage predicate on the verified_domains field.
func (f *OrganizationFilter) WhereVerifiedDomains(p entql.BytesP) {
	f.Where(p.Field(organization.FieldVerifiedDomains))
}

// WhereDomain applies the entql string predicate on the domain field.
func (f *OrganizationFilter) WhereDomain(p entql.StringP) {
	f.Where(p.Field(organization.FieldDomain))
}

// WhereLogoURL applies the entql string predicate on the logo_url field.
func (f *OrganizationFilter) WhereLogoURL(p entql.StringP) {
	f.Where(p.Field(organization.FieldLogoURL))
}

// WherePlan applies the entql string predicate on the plan field.
func (f *OrganizationFilter) WherePlan(p entql.StringP) {
	f.Where(p.Field(organization.FieldPlan))
}

// WhereActive applies the entql bool predicate on the active field.
func (f *OrganizationFilter) WhereActive(p entql.BoolP) {
	f.Where(p.Field(organization.FieldActive))
}

// WhereMetadata applies the entql json.RawMessage predicate on the metadata field.
func (f *OrganizationFilter) WhereMetadata(p entql.BytesP) {
	f.Where(p.Field(organization.FieldMetadata))
}

// WhereTrialEndsAt applies the entql time.Time predicate on the trial_ends_at field.
func (f *OrganizationFilter) WhereTrialEndsAt(p entql.TimeP) {
	f.Where(p.Field(organization.FieldTrialEndsAt))
}

// WhereTrialUsed applies the entql bool predicate on the trial_used field.
func (f *OrganizationFilter) WhereTrialUsed(p entql.BoolP) {
	f.Where(p.Field(organization.FieldTrialUsed))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *OrganizationFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(organization.FieldOwnerID))
}

// WhereOrgType applies the entql string predicate on the org_type field.
func (f *OrganizationFilter) WhereOrgType(p entql.StringP) {
	f.Where(p.Field(organization.FieldOrgType))
}

// WhereIsPlatformOrganization applies the entql bool predicate on the is_platform_organization field.
func (f *OrganizationFilter) WhereIsPlatformOrganization(p entql.BoolP) {
	f.Where(p.Field(organization.FieldIsPlatformOrganization))
}

// WhereExternalUserLimit applies the entql int predicate on the external_user_limit field.
func (f *OrganizationFilter) WhereExternalUserLimit(p entql.IntP) {
	f.Where(p.Field(organization.FieldExternalUserLimit))
}

// WhereEndUserLimit applies the entql int predicate on the end_user_limit field.
func (f *OrganizationFilter) WhereEndUserLimit(p entql.IntP) {
	f.Where(p.Field(organization.FieldEndUserLimit))
}

// WhereSSOEnabled applies the entql bool predicate on the sso_enabled field.
func (f *OrganizationFilter) WhereSSOEnabled(p entql.BoolP) {
	f.Where(p.Field(organization.FieldSSOEnabled))
}

// WhereSSODomain applies the entql string predicate on the sso_domain field.
func (f *OrganizationFilter) WhereSSODomain(p entql.StringP) {
	f.Where(p.Field(organization.FieldSSODomain))
}

// WhereSubscriptionID applies the entql string predicate on the subscription_id field.
func (f *OrganizationFilter) WhereSubscriptionID(p entql.StringP) {
	f.Where(p.Field(organization.FieldSubscriptionID))
}

// WhereCustomerID applies the entql string predicate on the customer_id field.
func (f *OrganizationFilter) WhereCustomerID(p entql.StringP) {
	f.Where(p.Field(organization.FieldCustomerID))
}

// WhereSubscriptionStatus applies the entql string predicate on the subscription_status field.
func (f *OrganizationFilter) WhereSubscriptionStatus(p entql.StringP) {
	f.Where(p.Field(organization.FieldSubscriptionStatus))
}

// WhereAuthServiceEnabled applies the entql bool predicate on the auth_service_enabled field.
func (f *OrganizationFilter) WhereAuthServiceEnabled(p entql.BoolP) {
	f.Where(p.Field(organization.FieldAuthServiceEnabled))
}

// WhereAuthConfig applies the entql json.RawMessage predicate on the auth_config field.
func (f *OrganizationFilter) WhereAuthConfig(p entql.BytesP) {
	f.Where(p.Field(organization.FieldAuthConfig))
}

// WhereAuthDomain applies the entql string predicate on the auth_domain field.
func (f *OrganizationFilter) WhereAuthDomain(p entql.StringP) {
	f.Where(p.Field(organization.FieldAuthDomain))
}

// WhereAPIRequestLimit applies the entql int predicate on the api_request_limit field.
func (f *OrganizationFilter) WhereAPIRequestLimit(p entql.IntP) {
	f.Where(p.Field(organization.FieldAPIRequestLimit))
}

// WhereAPIRequestsUsed applies the entql int predicate on the api_requests_used field.
func (f *OrganizationFilter) WhereAPIRequestsUsed(p entql.IntP) {
	f.Where(p.Field(organization.FieldAPIRequestsUsed))
}

// WhereCurrentExternalUsers applies the entql int predicate on the current_external_users field.
func (f *OrganizationFilter) WhereCurrentExternalUsers(p entql.IntP) {
	f.Where(p.Field(organization.FieldCurrentExternalUsers))
}

// WhereCurrentEndUsers applies the entql int predicate on the current_end_users field.
func (f *OrganizationFilter) WhereCurrentEndUsers(p entql.IntP) {
	f.Where(p.Field(organization.FieldCurrentEndUsers))
}

// WhereHasUsers applies a predicate to check if query has an edge users.
func (f *OrganizationFilter) WhereHasUsers() {
	f.Where(entql.HasEdge("users"))
}

// WhereHasUsersWith applies a predicate to check if query has an edge users with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasUsersWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("users", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasMemberships applies a predicate to check if query has an edge memberships.
func (f *OrganizationFilter) WhereHasMemberships() {
	f.Where(entql.HasEdge("memberships"))
}

// WhereHasMembershipsWith applies a predicate to check if query has an edge memberships with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasMembershipsWith(preds ...predicate.Membership) {
	f.Where(entql.HasEdgeWith("memberships", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSmsTemplates applies a predicate to check if query has an edge sms_templates.
func (f *OrganizationFilter) WhereHasSmsTemplates() {
	f.Where(entql.HasEdge("sms_templates"))
}

// WhereHasSmsTemplatesWith applies a predicate to check if query has an edge sms_templates with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasSmsTemplatesWith(preds ...predicate.SMSTemplate) {
	f.Where(entql.HasEdgeWith("sms_templates", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEmailTemplates applies a predicate to check if query has an edge email_templates.
func (f *OrganizationFilter) WhereHasEmailTemplates() {
	f.Where(entql.HasEdge("email_templates"))
}

// WhereHasEmailTemplatesWith applies a predicate to check if query has an edge email_templates with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasEmailTemplatesWith(preds ...predicate.EmailTemplate) {
	f.Where(entql.HasEdgeWith("email_templates", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAPIKeys applies a predicate to check if query has an edge api_keys.
func (f *OrganizationFilter) WhereHasAPIKeys() {
	f.Where(entql.HasEdge("api_keys"))
}

// WhereHasAPIKeysWith applies a predicate to check if query has an edge api_keys with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasAPIKeysWith(preds ...predicate.ApiKey) {
	f.Where(entql.HasEdgeWith("api_keys", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasWebhooks applies a predicate to check if query has an edge webhooks.
func (f *OrganizationFilter) WhereHasWebhooks() {
	f.Where(entql.HasEdge("webhooks"))
}

// WhereHasWebhooksWith applies a predicate to check if query has an edge webhooks with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasWebhooksWith(preds ...predicate.Webhook) {
	f.Where(entql.HasEdgeWith("webhooks", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasFeatureFlags applies a predicate to check if query has an edge feature_flags.
func (f *OrganizationFilter) WhereHasFeatureFlags() {
	f.Where(entql.HasEdge("feature_flags"))
}

// WhereHasFeatureFlagsWith applies a predicate to check if query has an edge feature_flags with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasFeatureFlagsWith(preds ...predicate.OrganizationFeature) {
	f.Where(entql.HasEdgeWith("feature_flags", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasIdentityProviders applies a predicate to check if query has an edge identity_providers.
func (f *OrganizationFilter) WhereHasIdentityProviders() {
	f.Where(entql.HasEdge("identity_providers"))
}

// WhereHasIdentityProvidersWith applies a predicate to check if query has an edge identity_providers with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasIdentityProvidersWith(preds ...predicate.IdentityProvider) {
	f.Where(entql.HasEdgeWith("identity_providers", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOauthClients applies a predicate to check if query has an edge oauth_clients.
func (f *OrganizationFilter) WhereHasOauthClients() {
	f.Where(entql.HasEdge("oauth_clients"))
}

// WhereHasOauthClientsWith applies a predicate to check if query has an edge oauth_clients with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasOauthClientsWith(preds ...predicate.OAuthClient) {
	f.Where(entql.HasEdgeWith("oauth_clients", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRoles applies a predicate to check if query has an edge roles.
func (f *OrganizationFilter) WhereHasRoles() {
	f.Where(entql.HasEdge("roles"))
}

// WhereHasRolesWith applies a predicate to check if query has an edge roles with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasRolesWith(preds ...predicate.Role) {
	f.Where(entql.HasEdgeWith("roles", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUserRoleContexts applies a predicate to check if query has an edge user_role_contexts.
func (f *OrganizationFilter) WhereHasUserRoleContexts() {
	f.Where(entql.HasEdge("user_role_contexts"))
}

// WhereHasUserRoleContextsWith applies a predicate to check if query has an edge user_role_contexts with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasUserRoleContextsWith(preds ...predicate.UserRole) {
	f.Where(entql.HasEdgeWith("user_role_contexts", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUserPermissionContexts applies a predicate to check if query has an edge user_permission_contexts.
func (f *OrganizationFilter) WhereHasUserPermissionContexts() {
	f.Where(entql.HasEdge("user_permission_contexts"))
}

// WhereHasUserPermissionContextsWith applies a predicate to check if query has an edge user_permission_contexts with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasUserPermissionContextsWith(preds ...predicate.UserPermission) {
	f.Where(entql.HasEdgeWith("user_permission_contexts", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAuditLogs applies a predicate to check if query has an edge audit_logs.
func (f *OrganizationFilter) WhereHasAuditLogs() {
	f.Where(entql.HasEdge("audit_logs"))
}

// WhereHasAuditLogsWith applies a predicate to check if query has an edge audit_logs with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasAuditLogsWith(preds ...predicate.Audit) {
	f.Where(entql.HasEdgeWith("audit_logs", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrganizationProviders applies a predicate to check if query has an edge organization_providers.
func (f *OrganizationFilter) WhereHasOrganizationProviders() {
	f.Where(entql.HasEdge("organization_providers"))
}

// WhereHasOrganizationProvidersWith applies a predicate to check if query has an edge organization_providers with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasOrganizationProvidersWith(preds ...predicate.OrganizationProvider) {
	f.Where(entql.HasEdgeWith("organization_providers", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasActivities applies a predicate to check if query has an edge activities.
func (f *OrganizationFilter) WhereHasActivities() {
	f.Where(entql.HasEdge("activities"))
}

// WhereHasActivitiesWith applies a predicate to check if query has an edge activities with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasActivitiesWith(preds ...predicate.Activity) {
	f.Where(entql.HasEdgeWith("activities", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (ofq *OrganizationFeatureQuery) addPredicate(pred func(s *sql.Selector)) {
	ofq.predicates = append(ofq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OrganizationFeatureQuery builder.
func (ofq *OrganizationFeatureQuery) Filter() *OrganizationFeatureFilter {
	return &OrganizationFeatureFilter{config: ofq.config, predicateAdder: ofq}
}

// addPredicate implements the predicateAdder interface.
func (m *OrganizationFeatureMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OrganizationFeatureMutation builder.
func (m *OrganizationFeatureMutation) Filter() *OrganizationFeatureFilter {
	return &OrganizationFeatureFilter{config: m.config, predicateAdder: m}
}

// OrganizationFeatureFilter provides a generic filtering capability at runtime for OrganizationFeatureQuery.
type OrganizationFeatureFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *OrganizationFeatureFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[14].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *OrganizationFeatureFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(organizationfeature.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *OrganizationFeatureFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(organizationfeature.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *OrganizationFeatureFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(organizationfeature.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *OrganizationFeatureFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(organizationfeature.FieldDeletedAt))
}

// WhereOrganizationID applies the entql string predicate on the organization_id field.
func (f *OrganizationFeatureFilter) WhereOrganizationID(p entql.StringP) {
	f.Where(p.Field(organizationfeature.FieldOrganizationID))
}

// WhereFeatureID applies the entql string predicate on the feature_id field.
func (f *OrganizationFeatureFilter) WhereFeatureID(p entql.StringP) {
	f.Where(p.Field(organizationfeature.FieldFeatureID))
}

// WhereEnabled applies the entql bool predicate on the enabled field.
func (f *OrganizationFeatureFilter) WhereEnabled(p entql.BoolP) {
	f.Where(p.Field(organizationfeature.FieldEnabled))
}

// WhereSettings applies the entql json.RawMessage predicate on the settings field.
func (f *OrganizationFeatureFilter) WhereSettings(p entql.BytesP) {
	f.Where(p.Field(organizationfeature.FieldSettings))
}

// WhereHasOrganization applies a predicate to check if query has an edge organization.
func (f *OrganizationFeatureFilter) WhereHasOrganization() {
	f.Where(entql.HasEdge("organization"))
}

// WhereHasOrganizationWith applies a predicate to check if query has an edge organization with a given conditions (other predicates).
func (f *OrganizationFeatureFilter) WhereHasOrganizationWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("organization", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasFeature applies a predicate to check if query has an edge feature.
func (f *OrganizationFeatureFilter) WhereHasFeature() {
	f.Where(entql.HasEdge("feature"))
}

// WhereHasFeatureWith applies a predicate to check if query has an edge feature with a given conditions (other predicates).
func (f *OrganizationFeatureFilter) WhereHasFeatureWith(preds ...predicate.FeatureFlag) {
	f.Where(entql.HasEdgeWith("feature", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (opq *OrganizationProviderQuery) addPredicate(pred func(s *sql.Selector)) {
	opq.predicates = append(opq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OrganizationProviderQuery builder.
func (opq *OrganizationProviderQuery) Filter() *OrganizationProviderFilter {
	return &OrganizationProviderFilter{config: opq.config, predicateAdder: opq}
}

// addPredicate implements the predicateAdder interface.
func (m *OrganizationProviderMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OrganizationProviderMutation builder.
func (m *OrganizationProviderMutation) Filter() *OrganizationProviderFilter {
	return &OrganizationProviderFilter{config: m.config, predicateAdder: m}
}

// OrganizationProviderFilter provides a generic filtering capability at runtime for OrganizationProviderQuery.
type OrganizationProviderFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *OrganizationProviderFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[15].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *OrganizationProviderFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(organizationprovider.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *OrganizationProviderFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(organizationprovider.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *OrganizationProviderFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(organizationprovider.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *OrganizationProviderFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(organizationprovider.FieldDeletedAt))
}

// WhereOrganizationID applies the entql string predicate on the organization_id field.
func (f *OrganizationProviderFilter) WhereOrganizationID(p entql.StringP) {
	f.Where(p.Field(organizationprovider.FieldOrganizationID))
}

// WhereProviderID applies the entql string predicate on the provider_id field.
func (f *OrganizationProviderFilter) WhereProviderID(p entql.StringP) {
	f.Where(p.Field(organizationprovider.FieldProviderID))
}

// WhereTemplateID applies the entql string predicate on the template_id field.
func (f *OrganizationProviderFilter) WhereTemplateID(p entql.StringP) {
	f.Where(p.Field(organizationprovider.FieldTemplateID))
}

// WhereTemplateKey applies the entql string predicate on the template_key field.
func (f *OrganizationProviderFilter) WhereTemplateKey(p entql.StringP) {
	f.Where(p.Field(organizationprovider.FieldTemplateKey))
}

// WhereCustomConfig applies the entql json.RawMessage predicate on the custom_config field.
func (f *OrganizationProviderFilter) WhereCustomConfig(p entql.BytesP) {
	f.Where(p.Field(organizationprovider.FieldCustomConfig))
}

// WhereEnabledAt applies the entql time.Time predicate on the enabled_at field.
func (f *OrganizationProviderFilter) WhereEnabledAt(p entql.TimeP) {
	f.Where(p.Field(organizationprovider.FieldEnabledAt))
}

// WhereLastUsed applies the entql time.Time predicate on the last_used field.
func (f *OrganizationProviderFilter) WhereLastUsed(p entql.TimeP) {
	f.Where(p.Field(organizationprovider.FieldLastUsed))
}

// WhereUsageCount applies the entql int predicate on the usage_count field.
func (f *OrganizationProviderFilter) WhereUsageCount(p entql.IntP) {
	f.Where(p.Field(organizationprovider.FieldUsageCount))
}

// WhereEnabled applies the entql bool predicate on the enabled field.
func (f *OrganizationProviderFilter) WhereEnabled(p entql.BoolP) {
	f.Where(p.Field(organizationprovider.FieldEnabled))
}

// WhereSuccessRate applies the entql float64 predicate on the success_rate field.
func (f *OrganizationProviderFilter) WhereSuccessRate(p entql.Float64P) {
	f.Where(p.Field(organizationprovider.FieldSuccessRate))
}

// WhereTotalLogins applies the entql int predicate on the total_logins field.
func (f *OrganizationProviderFilter) WhereTotalLogins(p entql.IntP) {
	f.Where(p.Field(organizationprovider.FieldTotalLogins))
}

// WhereSuccessfulLogins applies the entql int predicate on the successful_logins field.
func (f *OrganizationProviderFilter) WhereSuccessfulLogins(p entql.IntP) {
	f.Where(p.Field(organizationprovider.FieldSuccessfulLogins))
}

// WhereFailedLogins applies the entql int predicate on the failed_logins field.
func (f *OrganizationProviderFilter) WhereFailedLogins(p entql.IntP) {
	f.Where(p.Field(organizationprovider.FieldFailedLogins))
}

// WhereLastSuccess applies the entql time.Time predicate on the last_success field.
func (f *OrganizationProviderFilter) WhereLastSuccess(p entql.TimeP) {
	f.Where(p.Field(organizationprovider.FieldLastSuccess))
}

// WhereLastFailure applies the entql time.Time predicate on the last_failure field.
func (f *OrganizationProviderFilter) WhereLastFailure(p entql.TimeP) {
	f.Where(p.Field(organizationprovider.FieldLastFailure))
}

// WhereConfigErrors applies the entql int predicate on the config_errors field.
func (f *OrganizationProviderFilter) WhereConfigErrors(p entql.IntP) {
	f.Where(p.Field(organizationprovider.FieldConfigErrors))
}

// WhereAverageResponseTime applies the entql float64 predicate on the average_response_time field.
func (f *OrganizationProviderFilter) WhereAverageResponseTime(p entql.Float64P) {
	f.Where(p.Field(organizationprovider.FieldAverageResponseTime))
}

// WhereAnalyticsData applies the entql json.RawMessage predicate on the analytics_data field.
func (f *OrganizationProviderFilter) WhereAnalyticsData(p entql.BytesP) {
	f.Where(p.Field(organizationprovider.FieldAnalyticsData))
}

// WhereMetadata applies the entql json.RawMessage predicate on the metadata field.
func (f *OrganizationProviderFilter) WhereMetadata(p entql.BytesP) {
	f.Where(p.Field(organizationprovider.FieldMetadata))
}

// WhereHasOrganization applies a predicate to check if query has an edge organization.
func (f *OrganizationProviderFilter) WhereHasOrganization() {
	f.Where(entql.HasEdge("organization"))
}

// WhereHasOrganizationWith applies a predicate to check if query has an edge organization with a given conditions (other predicates).
func (f *OrganizationProviderFilter) WhereHasOrganizationWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("organization", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasProvider applies a predicate to check if query has an edge provider.
func (f *OrganizationProviderFilter) WhereHasProvider() {
	f.Where(entql.HasEdge("provider"))
}

// WhereHasProviderWith applies a predicate to check if query has an edge provider with a given conditions (other predicates).
func (f *OrganizationProviderFilter) WhereHasProviderWith(preds ...predicate.IdentityProvider) {
	f.Where(entql.HasEdgeWith("provider", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasTemplate applies a predicate to check if query has an edge template.
func (f *OrganizationProviderFilter) WhereHasTemplate() {
	f.Where(entql.HasEdge("template"))
}

// WhereHasTemplateWith applies a predicate to check if query has an edge template with a given conditions (other predicates).
func (f *OrganizationProviderFilter) WhereHasTemplateWith(preds ...predicate.ProviderTemplate) {
	f.Where(entql.HasEdgeWith("template", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (pq *PasskeyQuery) addPredicate(pred func(s *sql.Selector)) {
	pq.predicates = append(pq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the PasskeyQuery builder.
func (pq *PasskeyQuery) Filter() *PasskeyFilter {
	return &PasskeyFilter{config: pq.config, predicateAdder: pq}
}

// addPredicate implements the predicateAdder interface.
func (m *PasskeyMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the PasskeyMutation builder.
func (m *PasskeyMutation) Filter() *PasskeyFilter {
	return &PasskeyFilter{config: m.config, predicateAdder: m}
}

// PasskeyFilter provides a generic filtering capability at runtime for PasskeyQuery.
type PasskeyFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *PasskeyFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[16].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *PasskeyFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(passkey.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *PasskeyFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(passkey.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *PasskeyFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(passkey.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *PasskeyFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(passkey.FieldDeletedAt))
}

// WhereUserID applies the entql string predicate on the user_id field.
func (f *PasskeyFilter) WhereUserID(p entql.StringP) {
	f.Where(p.Field(passkey.FieldUserID))
}

// WhereName applies the entql string predicate on the name field.
func (f *PasskeyFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(passkey.FieldName))
}

// WhereCredentialID applies the entql string predicate on the credential_id field.
func (f *PasskeyFilter) WhereCredentialID(p entql.StringP) {
	f.Where(p.Field(passkey.FieldCredentialID))
}

// WherePublicKey applies the entql []byte predicate on the public_key field.
func (f *PasskeyFilter) WherePublicKey(p entql.BytesP) {
	f.Where(p.Field(passkey.FieldPublicKey))
}

// WhereSignCount applies the entql int predicate on the sign_count field.
func (f *PasskeyFilter) WhereSignCount(p entql.IntP) {
	f.Where(p.Field(passkey.FieldSignCount))
}

// WhereActive applies the entql bool predicate on the active field.
func (f *PasskeyFilter) WhereActive(p entql.BoolP) {
	f.Where(p.Field(passkey.FieldActive))
}

// WhereDeviceType applies the entql string predicate on the device_type field.
func (f *PasskeyFilter) WhereDeviceType(p entql.StringP) {
	f.Where(p.Field(passkey.FieldDeviceType))
}

// WhereAaguid applies the entql string predicate on the aaguid field.
func (f *PasskeyFilter) WhereAaguid(p entql.StringP) {
	f.Where(p.Field(passkey.FieldAaguid))
}

// WhereLastUsed applies the entql time.Time predicate on the last_used field.
func (f *PasskeyFilter) WhereLastUsed(p entql.TimeP) {
	f.Where(p.Field(passkey.FieldLastUsed))
}

// WhereTransports applies the entql json.RawMessage predicate on the transports field.
func (f *PasskeyFilter) WhereTransports(p entql.BytesP) {
	f.Where(p.Field(passkey.FieldTransports))
}

// WhereAttestation applies the entql json.RawMessage predicate on the attestation field.
func (f *PasskeyFilter) WhereAttestation(p entql.BytesP) {
	f.Where(p.Field(passkey.FieldAttestation))
}

// WhereBackupState applies the entql bool predicate on the backup_state field.
func (f *PasskeyFilter) WhereBackupState(p entql.BoolP) {
	f.Where(p.Field(passkey.FieldBackupState))
}

// WhereBackupEligible applies the entql bool predicate on the backup_eligible field.
func (f *PasskeyFilter) WhereBackupEligible(p entql.BoolP) {
	f.Where(p.Field(passkey.FieldBackupEligible))
}

// WhereUserAgent applies the entql string predicate on the user_agent field.
func (f *PasskeyFilter) WhereUserAgent(p entql.StringP) {
	f.Where(p.Field(passkey.FieldUserAgent))
}

// WhereIPAddress applies the entql string predicate on the ip_address field.
func (f *PasskeyFilter) WhereIPAddress(p entql.StringP) {
	f.Where(p.Field(passkey.FieldIPAddress))
}

// WhereHasUser applies a predicate to check if query has an edge user.
func (f *PasskeyFilter) WhereHasUser() {
	f.Where(entql.HasEdge("user"))
}

// WhereHasUserWith applies a predicate to check if query has an edge user with a given conditions (other predicates).
func (f *PasskeyFilter) WhereHasUserWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("user", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (pq *PermissionQuery) addPredicate(pred func(s *sql.Selector)) {
	pq.predicates = append(pq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the PermissionQuery builder.
func (pq *PermissionQuery) Filter() *PermissionFilter {
	return &PermissionFilter{config: pq.config, predicateAdder: pq}
}

// addPredicate implements the predicateAdder interface.
func (m *PermissionMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the PermissionMutation builder.
func (m *PermissionMutation) Filter() *PermissionFilter {
	return &PermissionFilter{config: m.config, predicateAdder: m}
}

// PermissionFilter provides a generic filtering capability at runtime for PermissionQuery.
type PermissionFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *PermissionFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[17].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *PermissionFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(permission.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *PermissionFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(permission.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *PermissionFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(permission.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *PermissionFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(permission.FieldDeletedAt))
}

// WhereName applies the entql string predicate on the name field.
func (f *PermissionFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(permission.FieldName))
}

// WhereDisplayName applies the entql string predicate on the display_name field.
func (f *PermissionFilter) WhereDisplayName(p entql.StringP) {
	f.Where(p.Field(permission.FieldDisplayName))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *PermissionFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(permission.FieldDescription))
}

// WhereResource applies the entql string predicate on the resource field.
func (f *PermissionFilter) WhereResource(p entql.StringP) {
	f.Where(p.Field(permission.FieldResource))
}

// WhereAction applies the entql string predicate on the action field.
func (f *PermissionFilter) WhereAction(p entql.StringP) {
	f.Where(p.Field(permission.FieldAction))
}

// WhereCategory applies the entql string predicate on the category field.
func (f *PermissionFilter) WhereCategory(p entql.StringP) {
	f.Where(p.Field(permission.FieldCategory))
}

// WhereApplicableUserTypes applies the entql json.RawMessage predicate on the applicable_user_types field.
func (f *PermissionFilter) WhereApplicableUserTypes(p entql.BytesP) {
	f.Where(p.Field(permission.FieldApplicableUserTypes))
}

// WhereApplicableContexts applies the entql json.RawMessage predicate on the applicable_contexts field.
func (f *PermissionFilter) WhereApplicableContexts(p entql.BytesP) {
	f.Where(p.Field(permission.FieldApplicableContexts))
}

// WhereConditions applies the entql string predicate on the conditions field.
func (f *PermissionFilter) WhereConditions(p entql.StringP) {
	f.Where(p.Field(permission.FieldConditions))
}

// WhereSystem applies the entql bool predicate on the system field.
func (f *PermissionFilter) WhereSystem(p entql.BoolP) {
	f.Where(p.Field(permission.FieldSystem))
}

// WhereDangerous applies the entql bool predicate on the dangerous field.
func (f *PermissionFilter) WhereDangerous(p entql.BoolP) {
	f.Where(p.Field(permission.FieldDangerous))
}

// WhereRiskLevel applies the entql int predicate on the risk_level field.
func (f *PermissionFilter) WhereRiskLevel(p entql.IntP) {
	f.Where(p.Field(permission.FieldRiskLevel))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *PermissionFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(permission.FieldCreatedBy))
}

// WhereActive applies the entql bool predicate on the active field.
func (f *PermissionFilter) WhereActive(p entql.BoolP) {
	f.Where(p.Field(permission.FieldActive))
}

// WherePermissionGroup applies the entql string predicate on the permission_group field.
func (f *PermissionFilter) WherePermissionGroup(p entql.StringP) {
	f.Where(p.Field(permission.FieldPermissionGroup))
}

// WhereHasRoles applies a predicate to check if query has an edge roles.
func (f *PermissionFilter) WhereHasRoles() {
	f.Where(entql.HasEdge("roles"))
}

// WhereHasRolesWith applies a predicate to check if query has an edge roles with a given conditions (other predicates).
func (f *PermissionFilter) WhereHasRolesWith(preds ...predicate.Role) {
	f.Where(entql.HasEdgeWith("roles", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUserAssignments applies a predicate to check if query has an edge user_assignments.
func (f *PermissionFilter) WhereHasUserAssignments() {
	f.Where(entql.HasEdge("user_assignments"))
}

// WhereHasUserAssignmentsWith applies a predicate to check if query has an edge user_assignments with a given conditions (other predicates).
func (f *PermissionFilter) WhereHasUserAssignmentsWith(preds ...predicate.UserPermission) {
	f.Where(entql.HasEdgeWith("user_assignments", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDependencies applies a predicate to check if query has an edge dependencies.
func (f *PermissionFilter) WhereHasDependencies() {
	f.Where(entql.HasEdge("dependencies"))
}

// WhereHasDependenciesWith applies a predicate to check if query has an edge dependencies with a given conditions (other predicates).
func (f *PermissionFilter) WhereHasDependenciesWith(preds ...predicate.PermissionDependency) {
	f.Where(entql.HasEdgeWith("dependencies", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDependents applies a predicate to check if query has an edge dependents.
func (f *PermissionFilter) WhereHasDependents() {
	f.Where(entql.HasEdge("dependents"))
}

// WhereHasDependentsWith applies a predicate to check if query has an edge dependents with a given conditions (other predicates).
func (f *PermissionFilter) WhereHasDependentsWith(preds ...predicate.PermissionDependency) {
	f.Where(entql.HasEdgeWith("dependents", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDependentPermissions applies a predicate to check if query has an edge dependent_permissions.
func (f *PermissionFilter) WhereHasDependentPermissions() {
	f.Where(entql.HasEdge("dependent_permissions"))
}

// WhereHasDependentPermissionsWith applies a predicate to check if query has an edge dependent_permissions with a given conditions (other predicates).
func (f *PermissionFilter) WhereHasDependentPermissionsWith(preds ...predicate.Permission) {
	f.Where(entql.HasEdgeWith("dependent_permissions", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRequiredPermissions applies a predicate to check if query has an edge required_permissions.
func (f *PermissionFilter) WhereHasRequiredPermissions() {
	f.Where(entql.HasEdge("required_permissions"))
}

// WhereHasRequiredPermissionsWith applies a predicate to check if query has an edge required_permissions with a given conditions (other predicates).
func (f *PermissionFilter) WhereHasRequiredPermissionsWith(preds ...predicate.Permission) {
	f.Where(entql.HasEdgeWith("required_permissions", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (pdq *PermissionDependencyQuery) addPredicate(pred func(s *sql.Selector)) {
	pdq.predicates = append(pdq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the PermissionDependencyQuery builder.
func (pdq *PermissionDependencyQuery) Filter() *PermissionDependencyFilter {
	return &PermissionDependencyFilter{config: pdq.config, predicateAdder: pdq}
}

// addPredicate implements the predicateAdder interface.
func (m *PermissionDependencyMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the PermissionDependencyMutation builder.
func (m *PermissionDependencyMutation) Filter() *PermissionDependencyFilter {
	return &PermissionDependencyFilter{config: m.config, predicateAdder: m}
}

// PermissionDependencyFilter provides a generic filtering capability at runtime for PermissionDependencyQuery.
type PermissionDependencyFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *PermissionDependencyFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[18].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *PermissionDependencyFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(permissiondependency.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *PermissionDependencyFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(permissiondependency.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *PermissionDependencyFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(permissiondependency.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *PermissionDependencyFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(permissiondependency.FieldDeletedAt))
}

// WherePermissionID applies the entql string predicate on the permission_id field.
func (f *PermissionDependencyFilter) WherePermissionID(p entql.StringP) {
	f.Where(p.Field(permissiondependency.FieldPermissionID))
}

// WhereRequiredPermissionID applies the entql string predicate on the required_permission_id field.
func (f *PermissionDependencyFilter) WhereRequiredPermissionID(p entql.StringP) {
	f.Where(p.Field(permissiondependency.FieldRequiredPermissionID))
}

// WhereDependencyType applies the entql string predicate on the dependency_type field.
func (f *PermissionDependencyFilter) WhereDependencyType(p entql.StringP) {
	f.Where(p.Field(permissiondependency.FieldDependencyType))
}

// WhereCondition applies the entql string predicate on the condition field.
func (f *PermissionDependencyFilter) WhereCondition(p entql.StringP) {
	f.Where(p.Field(permissiondependency.FieldCondition))
}

// WhereActive applies the entql bool predicate on the active field.
func (f *PermissionDependencyFilter) WhereActive(p entql.BoolP) {
	f.Where(p.Field(permissiondependency.FieldActive))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *PermissionDependencyFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(permissiondependency.FieldCreatedBy))
}

// WhereHasPermission applies a predicate to check if query has an edge permission.
func (f *PermissionDependencyFilter) WhereHasPermission() {
	f.Where(entql.HasEdge("permission"))
}

// WhereHasPermissionWith applies a predicate to check if query has an edge permission with a given conditions (other predicates).
func (f *PermissionDependencyFilter) WhereHasPermissionWith(preds ...predicate.Permission) {
	f.Where(entql.HasEdgeWith("permission", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRequiredPermission applies a predicate to check if query has an edge required_permission.
func (f *PermissionDependencyFilter) WhereHasRequiredPermission() {
	f.Where(entql.HasEdge("required_permission"))
}

// WhereHasRequiredPermissionWith applies a predicate to check if query has an edge required_permission with a given conditions (other predicates).
func (f *PermissionDependencyFilter) WhereHasRequiredPermissionWith(preds ...predicate.Permission) {
	f.Where(entql.HasEdgeWith("required_permission", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (ptq *ProviderTemplateQuery) addPredicate(pred func(s *sql.Selector)) {
	ptq.predicates = append(ptq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ProviderTemplateQuery builder.
func (ptq *ProviderTemplateQuery) Filter() *ProviderTemplateFilter {
	return &ProviderTemplateFilter{config: ptq.config, predicateAdder: ptq}
}

// addPredicate implements the predicateAdder interface.
func (m *ProviderTemplateMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ProviderTemplateMutation builder.
func (m *ProviderTemplateMutation) Filter() *ProviderTemplateFilter {
	return &ProviderTemplateFilter{config: m.config, predicateAdder: m}
}

// ProviderTemplateFilter provides a generic filtering capability at runtime for ProviderTemplateQuery.
type ProviderTemplateFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ProviderTemplateFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[19].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *ProviderTemplateFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(providertemplate.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *ProviderTemplateFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(providertemplate.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *ProviderTemplateFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(providertemplate.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *ProviderTemplateFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(providertemplate.FieldDeletedAt))
}

// WhereKey applies the entql string predicate on the key field.
func (f *ProviderTemplateFilter) WhereKey(p entql.StringP) {
	f.Where(p.Field(providertemplate.FieldKey))
}

// WhereName applies the entql string predicate on the name field.
func (f *ProviderTemplateFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(providertemplate.FieldName))
}

// WhereDisplayName applies the entql string predicate on the display_name field.
func (f *ProviderTemplateFilter) WhereDisplayName(p entql.StringP) {
	f.Where(p.Field(providertemplate.FieldDisplayName))
}

// WhereType applies the entql string predicate on the type field.
func (f *ProviderTemplateFilter) WhereType(p entql.StringP) {
	f.Where(p.Field(providertemplate.FieldType))
}

// WhereProtocol applies the entql string predicate on the protocol field.
func (f *ProviderTemplateFilter) WhereProtocol(p entql.StringP) {
	f.Where(p.Field(providertemplate.FieldProtocol))
}

// WhereIconURL applies the entql string predicate on the icon_url field.
func (f *ProviderTemplateFilter) WhereIconURL(p entql.StringP) {
	f.Where(p.Field(providertemplate.FieldIconURL))
}

// WhereCategory applies the entql string predicate on the category field.
func (f *ProviderTemplateFilter) WhereCategory(p entql.StringP) {
	f.Where(p.Field(providertemplate.FieldCategory))
}

// WherePopular applies the entql bool predicate on the popular field.
func (f *ProviderTemplateFilter) WherePopular(p entql.BoolP) {
	f.Where(p.Field(providertemplate.FieldPopular))
}

// WhereActive applies the entql bool predicate on the active field.
func (f *ProviderTemplateFilter) WhereActive(p entql.BoolP) {
	f.Where(p.Field(providertemplate.FieldActive))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *ProviderTemplateFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(providertemplate.FieldDescription))
}

// WhereConfigTemplate applies the entql json.RawMessage predicate on the config_template field.
func (f *ProviderTemplateFilter) WhereConfigTemplate(p entql.BytesP) {
	f.Where(p.Field(providertemplate.FieldConfigTemplate))
}

// WhereRequiredFields applies the entql json.RawMessage predicate on the required_fields field.
func (f *ProviderTemplateFilter) WhereRequiredFields(p entql.BytesP) {
	f.Where(p.Field(providertemplate.FieldRequiredFields))
}

// WhereSupportedFeatures applies the entql json.RawMessage predicate on the supported_features field.
func (f *ProviderTemplateFilter) WhereSupportedFeatures(p entql.BytesP) {
	f.Where(p.Field(providertemplate.FieldSupportedFeatures))
}

// WhereDocumentationURL applies the entql string predicate on the documentation_url field.
func (f *ProviderTemplateFilter) WhereDocumentationURL(p entql.StringP) {
	f.Where(p.Field(providertemplate.FieldDocumentationURL))
}

// WhereSetupGuideURL applies the entql string predicate on the setup_guide_url field.
func (f *ProviderTemplateFilter) WhereSetupGuideURL(p entql.StringP) {
	f.Where(p.Field(providertemplate.FieldSetupGuideURL))
}

// WhereUsageCount applies the entql int predicate on the usage_count field.
func (f *ProviderTemplateFilter) WhereUsageCount(p entql.IntP) {
	f.Where(p.Field(providertemplate.FieldUsageCount))
}

// WhereAverageSetupTime applies the entql float64 predicate on the average_setup_time field.
func (f *ProviderTemplateFilter) WhereAverageSetupTime(p entql.Float64P) {
	f.Where(p.Field(providertemplate.FieldAverageSetupTime))
}

// WhereSuccessRate applies the entql float64 predicate on the success_rate field.
func (f *ProviderTemplateFilter) WhereSuccessRate(p entql.Float64P) {
	f.Where(p.Field(providertemplate.FieldSuccessRate))
}

// WherePopularityRank applies the entql int predicate on the popularity_rank field.
func (f *ProviderTemplateFilter) WherePopularityRank(p entql.IntP) {
	f.Where(p.Field(providertemplate.FieldPopularityRank))
}

// WhereMetadata applies the entql json.RawMessage predicate on the metadata field.
func (f *ProviderTemplateFilter) WhereMetadata(p entql.BytesP) {
	f.Where(p.Field(providertemplate.FieldMetadata))
}

// WhereHasOrganizationProviders applies a predicate to check if query has an edge organization_providers.
func (f *ProviderTemplateFilter) WhereHasOrganizationProviders() {
	f.Where(entql.HasEdge("organization_providers"))
}

// WhereHasOrganizationProvidersWith applies a predicate to check if query has an edge organization_providers with a given conditions (other predicates).
func (f *ProviderTemplateFilter) WhereHasOrganizationProvidersWith(preds ...predicate.OrganizationProvider) {
	f.Where(entql.HasEdgeWith("organization_providers", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (rq *RoleQuery) addPredicate(pred func(s *sql.Selector)) {
	rq.predicates = append(rq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the RoleQuery builder.
func (rq *RoleQuery) Filter() *RoleFilter {
	return &RoleFilter{config: rq.config, predicateAdder: rq}
}

// addPredicate implements the predicateAdder interface.
func (m *RoleMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the RoleMutation builder.
func (m *RoleMutation) Filter() *RoleFilter {
	return &RoleFilter{config: m.config, predicateAdder: m}
}

// RoleFilter provides a generic filtering capability at runtime for RoleQuery.
type RoleFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *RoleFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[20].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *RoleFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(role.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *RoleFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(role.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *RoleFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(role.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *RoleFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(role.FieldDeletedAt))
}

// WhereName applies the entql string predicate on the name field.
func (f *RoleFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(role.FieldName))
}

// WhereDisplayName applies the entql string predicate on the display_name field.
func (f *RoleFilter) WhereDisplayName(p entql.StringP) {
	f.Where(p.Field(role.FieldDisplayName))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *RoleFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(role.FieldDescription))
}

// WhereRoleType applies the entql string predicate on the role_type field.
func (f *RoleFilter) WhereRoleType(p entql.StringP) {
	f.Where(p.Field(role.FieldRoleType))
}

// WhereOrganizationID applies the entql string predicate on the organization_id field.
func (f *RoleFilter) WhereOrganizationID(p entql.StringP) {
	f.Where(p.Field(role.FieldOrganizationID))
}

// WhereApplicationID applies the entql string predicate on the application_id field.
func (f *RoleFilter) WhereApplicationID(p entql.StringP) {
	f.Where(p.Field(role.FieldApplicationID))
}

// WhereSystem applies the entql bool predicate on the system field.
func (f *RoleFilter) WhereSystem(p entql.BoolP) {
	f.Where(p.Field(role.FieldSystem))
}

// WhereIsDefault applies the entql bool predicate on the is_default field.
func (f *RoleFilter) WhereIsDefault(p entql.BoolP) {
	f.Where(p.Field(role.FieldIsDefault))
}

// WherePriority applies the entql int predicate on the priority field.
func (f *RoleFilter) WherePriority(p entql.IntP) {
	f.Where(p.Field(role.FieldPriority))
}

// WhereColor applies the entql string predicate on the color field.
func (f *RoleFilter) WhereColor(p entql.StringP) {
	f.Where(p.Field(role.FieldColor))
}

// WhereApplicableUserTypes applies the entql json.RawMessage predicate on the applicable_user_types field.
func (f *RoleFilter) WhereApplicableUserTypes(p entql.BytesP) {
	f.Where(p.Field(role.FieldApplicableUserTypes))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *RoleFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(role.FieldCreatedBy))
}

// WhereActive applies the entql bool predicate on the active field.
func (f *RoleFilter) WhereActive(p entql.BoolP) {
	f.Where(p.Field(role.FieldActive))
}

// WhereParentID applies the entql string predicate on the parent_id field.
func (f *RoleFilter) WhereParentID(p entql.StringP) {
	f.Where(p.Field(role.FieldParentID))
}

// WhereHasOrganization applies a predicate to check if query has an edge organization.
func (f *RoleFilter) WhereHasOrganization() {
	f.Where(entql.HasEdge("organization"))
}

// WhereHasOrganizationWith applies a predicate to check if query has an edge organization with a given conditions (other predicates).
func (f *RoleFilter) WhereHasOrganizationWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("organization", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUserAssignments applies a predicate to check if query has an edge user_assignments.
func (f *RoleFilter) WhereHasUserAssignments() {
	f.Where(entql.HasEdge("user_assignments"))
}

// WhereHasUserAssignmentsWith applies a predicate to check if query has an edge user_assignments with a given conditions (other predicates).
func (f *RoleFilter) WhereHasUserAssignmentsWith(preds ...predicate.UserRole) {
	f.Where(entql.HasEdgeWith("user_assignments", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSystemUsers applies a predicate to check if query has an edge system_users.
func (f *RoleFilter) WhereHasSystemUsers() {
	f.Where(entql.HasEdge("system_users"))
}

// WhereHasSystemUsersWith applies a predicate to check if query has an edge system_users with a given conditions (other predicates).
func (f *RoleFilter) WhereHasSystemUsersWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("system_users", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPermissions applies a predicate to check if query has an edge permissions.
func (f *RoleFilter) WhereHasPermissions() {
	f.Where(entql.HasEdge("permissions"))
}

// WhereHasPermissionsWith applies a predicate to check if query has an edge permissions with a given conditions (other predicates).
func (f *RoleFilter) WhereHasPermissionsWith(preds ...predicate.Permission) {
	f.Where(entql.HasEdgeWith("permissions", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasMemberships applies a predicate to check if query has an edge memberships.
func (f *RoleFilter) WhereHasMemberships() {
	f.Where(entql.HasEdge("memberships"))
}

// WhereHasMembershipsWith applies a predicate to check if query has an edge memberships with a given conditions (other predicates).
func (f *RoleFilter) WhereHasMembershipsWith(preds ...predicate.Membership) {
	f.Where(entql.HasEdgeWith("memberships", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasParent applies a predicate to check if query has an edge parent.
func (f *RoleFilter) WhereHasParent() {
	f.Where(entql.HasEdge("parent"))
}

// WhereHasParentWith applies a predicate to check if query has an edge parent with a given conditions (other predicates).
func (f *RoleFilter) WhereHasParentWith(preds ...predicate.Role) {
	f.Where(entql.HasEdgeWith("parent", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasChildren applies a predicate to check if query has an edge children.
func (f *RoleFilter) WhereHasChildren() {
	f.Where(entql.HasEdge("children"))
}

// WhereHasChildrenWith applies a predicate to check if query has an edge children with a given conditions (other predicates).
func (f *RoleFilter) WhereHasChildrenWith(preds ...predicate.Role) {
	f.Where(entql.HasEdgeWith("children", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (stq *SMSTemplateQuery) addPredicate(pred func(s *sql.Selector)) {
	stq.predicates = append(stq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the SMSTemplateQuery builder.
func (stq *SMSTemplateQuery) Filter() *SMSTemplateFilter {
	return &SMSTemplateFilter{config: stq.config, predicateAdder: stq}
}

// addPredicate implements the predicateAdder interface.
func (m *SMSTemplateMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the SMSTemplateMutation builder.
func (m *SMSTemplateMutation) Filter() *SMSTemplateFilter {
	return &SMSTemplateFilter{config: m.config, predicateAdder: m}
}

// SMSTemplateFilter provides a generic filtering capability at runtime for SMSTemplateQuery.
type SMSTemplateFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *SMSTemplateFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[21].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *SMSTemplateFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(smstemplate.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *SMSTemplateFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(smstemplate.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *SMSTemplateFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(smstemplate.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *SMSTemplateFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(smstemplate.FieldDeletedAt))
}

// WhereName applies the entql string predicate on the name field.
func (f *SMSTemplateFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(smstemplate.FieldName))
}

// WhereContent applies the entql string predicate on the content field.
func (f *SMSTemplateFilter) WhereContent(p entql.StringP) {
	f.Where(p.Field(smstemplate.FieldContent))
}

// WhereType applies the entql string predicate on the type field.
func (f *SMSTemplateFilter) WhereType(p entql.StringP) {
	f.Where(p.Field(smstemplate.FieldType))
}

// WhereOrganizationID applies the entql string predicate on the organization_id field.
func (f *SMSTemplateFilter) WhereOrganizationID(p entql.StringP) {
	f.Where(p.Field(smstemplate.FieldOrganizationID))
}

// WhereActive applies the entql bool predicate on the active field.
func (f *SMSTemplateFilter) WhereActive(p entql.BoolP) {
	f.Where(p.Field(smstemplate.FieldActive))
}

// WhereSystem applies the entql bool predicate on the system field.
func (f *SMSTemplateFilter) WhereSystem(p entql.BoolP) {
	f.Where(p.Field(smstemplate.FieldSystem))
}

// WhereLocale applies the entql string predicate on the locale field.
func (f *SMSTemplateFilter) WhereLocale(p entql.StringP) {
	f.Where(p.Field(smstemplate.FieldLocale))
}

// WhereMaxLength applies the entql int predicate on the max_length field.
func (f *SMSTemplateFilter) WhereMaxLength(p entql.IntP) {
	f.Where(p.Field(smstemplate.FieldMaxLength))
}

// WhereMessageType applies the entql string predicate on the message_type field.
func (f *SMSTemplateFilter) WhereMessageType(p entql.StringP) {
	f.Where(p.Field(smstemplate.FieldMessageType))
}

// WhereEstimatedSegments applies the entql int predicate on the estimated_segments field.
func (f *SMSTemplateFilter) WhereEstimatedSegments(p entql.IntP) {
	f.Where(p.Field(smstemplate.FieldEstimatedSegments))
}

// WhereEstimatedCost applies the entql float64 predicate on the estimated_cost field.
func (f *SMSTemplateFilter) WhereEstimatedCost(p entql.Float64P) {
	f.Where(p.Field(smstemplate.FieldEstimatedCost))
}

// WhereCurrency applies the entql string predicate on the currency field.
func (f *SMSTemplateFilter) WhereCurrency(p entql.StringP) {
	f.Where(p.Field(smstemplate.FieldCurrency))
}

// WhereVariables applies the entql json.RawMessage predicate on the variables field.
func (f *SMSTemplateFilter) WhereVariables(p entql.BytesP) {
	f.Where(p.Field(smstemplate.FieldVariables))
}

// WhereMetadata applies the entql json.RawMessage predicate on the metadata field.
func (f *SMSTemplateFilter) WhereMetadata(p entql.BytesP) {
	f.Where(p.Field(smstemplate.FieldMetadata))
}

// WhereLastUsedAt applies the entql time.Time predicate on the last_used_at field.
func (f *SMSTemplateFilter) WhereLastUsedAt(p entql.TimeP) {
	f.Where(p.Field(smstemplate.FieldLastUsedAt))
}

// WhereUsageCount applies the entql int predicate on the usage_count field.
func (f *SMSTemplateFilter) WhereUsageCount(p entql.IntP) {
	f.Where(p.Field(smstemplate.FieldUsageCount))
}

// WhereHasOrganization applies a predicate to check if query has an edge organization.
func (f *SMSTemplateFilter) WhereHasOrganization() {
	f.Where(entql.HasEdge("organization"))
}

// WhereHasOrganizationWith applies a predicate to check if query has an edge organization with a given conditions (other predicates).
func (f *SMSTemplateFilter) WhereHasOrganizationWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("organization", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (ssq *SSOStateQuery) addPredicate(pred func(s *sql.Selector)) {
	ssq.predicates = append(ssq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the SSOStateQuery builder.
func (ssq *SSOStateQuery) Filter() *SSOStateFilter {
	return &SSOStateFilter{config: ssq.config, predicateAdder: ssq}
}

// addPredicate implements the predicateAdder interface.
func (m *SSOStateMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the SSOStateMutation builder.
func (m *SSOStateMutation) Filter() *SSOStateFilter {
	return &SSOStateFilter{config: m.config, predicateAdder: m}
}

// SSOStateFilter provides a generic filtering capability at runtime for SSOStateQuery.
type SSOStateFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *SSOStateFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[22].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *SSOStateFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(ssostate.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *SSOStateFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(ssostate.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *SSOStateFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(ssostate.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *SSOStateFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(ssostate.FieldDeletedAt))
}

// WhereState applies the entql string predicate on the state field.
func (f *SSOStateFilter) WhereState(p entql.StringP) {
	f.Where(p.Field(ssostate.FieldState))
}

// WhereData applies the entql string predicate on the data field.
func (f *SSOStateFilter) WhereData(p entql.StringP) {
	f.Where(p.Field(ssostate.FieldData))
}

// WhereExpiresAt applies the entql time.Time predicate on the expires_at field.
func (f *SSOStateFilter) WhereExpiresAt(p entql.TimeP) {
	f.Where(p.Field(ssostate.FieldExpiresAt))
}

// WhereRedirectURL applies the entql string predicate on the redirect_url field.
func (f *SSOStateFilter) WhereRedirectURL(p entql.StringP) {
	f.Where(p.Field(ssostate.FieldRedirectURL))
}

// addPredicate implements the predicateAdder interface.
func (sq *SessionQuery) addPredicate(pred func(s *sql.Selector)) {
	sq.predicates = append(sq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the SessionQuery builder.
func (sq *SessionQuery) Filter() *SessionFilter {
	return &SessionFilter{config: sq.config, predicateAdder: sq}
}

// addPredicate implements the predicateAdder interface.
func (m *SessionMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the SessionMutation builder.
func (m *SessionMutation) Filter() *SessionFilter {
	return &SessionFilter{config: m.config, predicateAdder: m}
}

// SessionFilter provides a generic filtering capability at runtime for SessionQuery.
type SessionFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *SessionFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[23].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *SessionFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(session.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *SessionFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(session.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *SessionFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(session.FieldUpdatedAt))
}

// WhereUserID applies the entql string predicate on the user_id field.
func (f *SessionFilter) WhereUserID(p entql.StringP) {
	f.Where(p.Field(session.FieldUserID))
}

// WhereToken applies the entql string predicate on the token field.
func (f *SessionFilter) WhereToken(p entql.StringP) {
	f.Where(p.Field(session.FieldToken))
}

// WhereIPAddress applies the entql string predicate on the ip_address field.
func (f *SessionFilter) WhereIPAddress(p entql.StringP) {
	f.Where(p.Field(session.FieldIPAddress))
}

// WhereUserAgent applies the entql string predicate on the user_agent field.
func (f *SessionFilter) WhereUserAgent(p entql.StringP) {
	f.Where(p.Field(session.FieldUserAgent))
}

// WhereDeviceID applies the entql string predicate on the device_id field.
func (f *SessionFilter) WhereDeviceID(p entql.StringP) {
	f.Where(p.Field(session.FieldDeviceID))
}

// WhereLocation applies the entql string predicate on the location field.
func (f *SessionFilter) WhereLocation(p entql.StringP) {
	f.Where(p.Field(session.FieldLocation))
}

// WhereOrganizationID applies the entql string predicate on the organization_id field.
func (f *SessionFilter) WhereOrganizationID(p entql.StringP) {
	f.Where(p.Field(session.FieldOrganizationID))
}

// WhereActive applies the entql bool predicate on the active field.
func (f *SessionFilter) WhereActive(p entql.BoolP) {
	f.Where(p.Field(session.FieldActive))
}

// WhereExpiresAt applies the entql time.Time predicate on the expires_at field.
func (f *SessionFilter) WhereExpiresAt(p entql.TimeP) {
	f.Where(p.Field(session.FieldExpiresAt))
}

// WhereLastActiveAt applies the entql time.Time predicate on the last_active_at field.
func (f *SessionFilter) WhereLastActiveAt(p entql.TimeP) {
	f.Where(p.Field(session.FieldLastActiveAt))
}

// WhereMetadata applies the entql json.RawMessage predicate on the metadata field.
func (f *SessionFilter) WhereMetadata(p entql.BytesP) {
	f.Where(p.Field(session.FieldMetadata))
}

// WhereHasUser applies a predicate to check if query has an edge user.
func (f *SessionFilter) WhereHasUser() {
	f.Where(entql.HasEdge("user"))
}

// WhereHasUserWith applies a predicate to check if query has an edge user with a given conditions (other predicates).
func (f *SessionFilter) WhereHasUserWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("user", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAuditLogs applies a predicate to check if query has an edge audit_logs.
func (f *SessionFilter) WhereHasAuditLogs() {
	f.Where(entql.HasEdge("audit_logs"))
}

// WhereHasAuditLogsWith applies a predicate to check if query has an edge audit_logs with a given conditions (other predicates).
func (f *SessionFilter) WhereHasAuditLogsWith(preds ...predicate.Audit) {
	f.Where(entql.HasEdgeWith("audit_logs", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasActivities applies a predicate to check if query has an edge activities.
func (f *SessionFilter) WhereHasActivities() {
	f.Where(entql.HasEdge("activities"))
}

// WhereHasActivitiesWith applies a predicate to check if query has an edge activities with a given conditions (other predicates).
func (f *SessionFilter) WhereHasActivitiesWith(preds ...predicate.Activity) {
	f.Where(entql.HasEdgeWith("activities", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (uq *UserQuery) addPredicate(pred func(s *sql.Selector)) {
	uq.predicates = append(uq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the UserQuery builder.
func (uq *UserQuery) Filter() *UserFilter {
	return &UserFilter{config: uq.config, predicateAdder: uq}
}

// addPredicate implements the predicateAdder interface.
func (m *UserMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the UserMutation builder.
func (m *UserMutation) Filter() *UserFilter {
	return &UserFilter{config: m.config, predicateAdder: m}
}

// UserFilter provides a generic filtering capability at runtime for UserQuery.
type UserFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *UserFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[24].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *UserFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(user.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *UserFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(user.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *UserFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(user.FieldUpdatedAt))
}

// WhereEmail applies the entql string predicate on the email field.
func (f *UserFilter) WhereEmail(p entql.StringP) {
	f.Where(p.Field(user.FieldEmail))
}

// WherePhoneNumber applies the entql string predicate on the phone_number field.
func (f *UserFilter) WherePhoneNumber(p entql.StringP) {
	f.Where(p.Field(user.FieldPhoneNumber))
}

// WhereFirstName applies the entql string predicate on the first_name field.
func (f *UserFilter) WhereFirstName(p entql.StringP) {
	f.Where(p.Field(user.FieldFirstName))
}

// WhereLastName applies the entql string predicate on the last_name field.
func (f *UserFilter) WhereLastName(p entql.StringP) {
	f.Where(p.Field(user.FieldLastName))
}

// WhereUsername applies the entql string predicate on the username field.
func (f *UserFilter) WhereUsername(p entql.StringP) {
	f.Where(p.Field(user.FieldUsername))
}

// WherePasswordHash applies the entql string predicate on the password_hash field.
func (f *UserFilter) WherePasswordHash(p entql.StringP) {
	f.Where(p.Field(user.FieldPasswordHash))
}

// WhereEmailVerified applies the entql bool predicate on the email_verified field.
func (f *UserFilter) WhereEmailVerified(p entql.BoolP) {
	f.Where(p.Field(user.FieldEmailVerified))
}

// WherePhoneVerified applies the entql bool predicate on the phone_verified field.
func (f *UserFilter) WherePhoneVerified(p entql.BoolP) {
	f.Where(p.Field(user.FieldPhoneVerified))
}

// WhereActive applies the entql bool predicate on the active field.
func (f *UserFilter) WhereActive(p entql.BoolP) {
	f.Where(p.Field(user.FieldActive))
}

// WhereBlocked applies the entql bool predicate on the blocked field.
func (f *UserFilter) WhereBlocked(p entql.BoolP) {
	f.Where(p.Field(user.FieldBlocked))
}

// WhereLastLogin applies the entql time.Time predicate on the last_login field.
func (f *UserFilter) WhereLastLogin(p entql.TimeP) {
	f.Where(p.Field(user.FieldLastLogin))
}

// WhereLastPasswordChange applies the entql time.Time predicate on the last_password_change field.
func (f *UserFilter) WhereLastPasswordChange(p entql.TimeP) {
	f.Where(p.Field(user.FieldLastPasswordChange))
}

// WhereMetadata applies the entql json.RawMessage predicate on the metadata field.
func (f *UserFilter) WhereMetadata(p entql.BytesP) {
	f.Where(p.Field(user.FieldMetadata))
}

// WhereProfileImageURL applies the entql string predicate on the profile_image_url field.
func (f *UserFilter) WhereProfileImageURL(p entql.StringP) {
	f.Where(p.Field(user.FieldProfileImageURL))
}

// WhereLocale applies the entql string predicate on the locale field.
func (f *UserFilter) WhereLocale(p entql.StringP) {
	f.Where(p.Field(user.FieldLocale))
}

// WhereTimezone applies the entql string predicate on the timezone field.
func (f *UserFilter) WhereTimezone(p entql.StringP) {
	f.Where(p.Field(user.FieldTimezone))
}

// WhereUserType applies the entql string predicate on the user_type field.
func (f *UserFilter) WhereUserType(p entql.StringP) {
	f.Where(p.Field(user.FieldUserType))
}

// WhereOrganizationID applies the entql string predicate on the organization_id field.
func (f *UserFilter) WhereOrganizationID(p entql.StringP) {
	f.Where(p.Field(user.FieldOrganizationID))
}

// WherePrimaryOrganizationID applies the entql string predicate on the primary_organization_id field.
func (f *UserFilter) WherePrimaryOrganizationID(p entql.StringP) {
	f.Where(p.Field(user.FieldPrimaryOrganizationID))
}

// WhereIsPlatformAdmin applies the entql bool predicate on the is_platform_admin field.
func (f *UserFilter) WhereIsPlatformAdmin(p entql.BoolP) {
	f.Where(p.Field(user.FieldIsPlatformAdmin))
}

// WhereAuthProvider applies the entql string predicate on the auth_provider field.
func (f *UserFilter) WhereAuthProvider(p entql.StringP) {
	f.Where(p.Field(user.FieldAuthProvider))
}

// WhereExternalID applies the entql string predicate on the external_id field.
func (f *UserFilter) WhereExternalID(p entql.StringP) {
	f.Where(p.Field(user.FieldExternalID))
}

// WhereCustomerID applies the entql string predicate on the customer_id field.
func (f *UserFilter) WhereCustomerID(p entql.StringP) {
	f.Where(p.Field(user.FieldCustomerID))
}

// WhereCustomAttributes applies the entql json.RawMessage predicate on the custom_attributes field.
func (f *UserFilter) WhereCustomAttributes(p entql.BytesP) {
	f.Where(p.Field(user.FieldCustomAttributes))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *UserFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(user.FieldCreatedBy))
}

// WherePasswordResetTokenExpires applies the entql time.Time predicate on the password_reset_token_expires field.
func (f *UserFilter) WherePasswordResetTokenExpires(p entql.TimeP) {
	f.Where(p.Field(user.FieldPasswordResetTokenExpires))
}

// WherePasswordResetToken applies the entql string predicate on the password_reset_token field.
func (f *UserFilter) WherePasswordResetToken(p entql.StringP) {
	f.Where(p.Field(user.FieldPasswordResetToken))
}

// WhereLoginCount applies the entql int predicate on the login_count field.
func (f *UserFilter) WhereLoginCount(p entql.IntP) {
	f.Where(p.Field(user.FieldLoginCount))
}

// WhereLastLoginIP applies the entql string predicate on the last_login_ip field.
func (f *UserFilter) WhereLastLoginIP(p entql.StringP) {
	f.Where(p.Field(user.FieldLastLoginIP))
}

// WhereHasOrganization applies a predicate to check if query has an edge organization.
func (f *UserFilter) WhereHasOrganization() {
	f.Where(entql.HasEdge("organization"))
}

// WhereHasOrganizationWith applies a predicate to check if query has an edge organization with a given conditions (other predicates).
func (f *UserFilter) WhereHasOrganizationWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("organization", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasMemberships applies a predicate to check if query has an edge memberships.
func (f *UserFilter) WhereHasMemberships() {
	f.Where(entql.HasEdge("memberships"))
}

// WhereHasMembershipsWith applies a predicate to check if query has an edge memberships with a given conditions (other predicates).
func (f *UserFilter) WhereHasMembershipsWith(preds ...predicate.Membership) {
	f.Where(entql.HasEdgeWith("memberships", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSentInvitations applies a predicate to check if query has an edge sent_invitations.
func (f *UserFilter) WhereHasSentInvitations() {
	f.Where(entql.HasEdge("sent_invitations"))
}

// WhereHasSentInvitationsWith applies a predicate to check if query has an edge sent_invitations with a given conditions (other predicates).
func (f *UserFilter) WhereHasSentInvitationsWith(preds ...predicate.Membership) {
	f.Where(entql.HasEdgeWith("sent_invitations", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSessions applies a predicate to check if query has an edge sessions.
func (f *UserFilter) WhereHasSessions() {
	f.Where(entql.HasEdge("sessions"))
}

// WhereHasSessionsWith applies a predicate to check if query has an edge sessions with a given conditions (other predicates).
func (f *UserFilter) WhereHasSessionsWith(preds ...predicate.Session) {
	f.Where(entql.HasEdgeWith("sessions", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAPIKeys applies a predicate to check if query has an edge api_keys.
func (f *UserFilter) WhereHasAPIKeys() {
	f.Where(entql.HasEdge("api_keys"))
}

// WhereHasAPIKeysWith applies a predicate to check if query has an edge api_keys with a given conditions (other predicates).
func (f *UserFilter) WhereHasAPIKeysWith(preds ...predicate.ApiKey) {
	f.Where(entql.HasEdgeWith("api_keys", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasMfaMethods applies a predicate to check if query has an edge mfa_methods.
func (f *UserFilter) WhereHasMfaMethods() {
	f.Where(entql.HasEdge("mfa_methods"))
}

// WhereHasMfaMethodsWith applies a predicate to check if query has an edge mfa_methods with a given conditions (other predicates).
func (f *UserFilter) WhereHasMfaMethodsWith(preds ...predicate.MFA) {
	f.Where(entql.HasEdgeWith("mfa_methods", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPasskeys applies a predicate to check if query has an edge passkeys.
func (f *UserFilter) WhereHasPasskeys() {
	f.Where(entql.HasEdge("passkeys"))
}

// WhereHasPasskeysWith applies a predicate to check if query has an edge passkeys with a given conditions (other predicates).
func (f *UserFilter) WhereHasPasskeysWith(preds ...predicate.Passkey) {
	f.Where(entql.HasEdgeWith("passkeys", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOauthTokens applies a predicate to check if query has an edge oauth_tokens.
func (f *UserFilter) WhereHasOauthTokens() {
	f.Where(entql.HasEdge("oauth_tokens"))
}

// WhereHasOauthTokensWith applies a predicate to check if query has an edge oauth_tokens with a given conditions (other predicates).
func (f *UserFilter) WhereHasOauthTokensWith(preds ...predicate.OAuthToken) {
	f.Where(entql.HasEdgeWith("oauth_tokens", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOauthAuthorizations applies a predicate to check if query has an edge oauth_authorizations.
func (f *UserFilter) WhereHasOauthAuthorizations() {
	f.Where(entql.HasEdge("oauth_authorizations"))
}

// WhereHasOauthAuthorizationsWith applies a predicate to check if query has an edge oauth_authorizations with a given conditions (other predicates).
func (f *UserFilter) WhereHasOauthAuthorizationsWith(preds ...predicate.OAuthAuthorization) {
	f.Where(entql.HasEdgeWith("oauth_authorizations", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasVerifications applies a predicate to check if query has an edge verifications.
func (f *UserFilter) WhereHasVerifications() {
	f.Where(entql.HasEdge("verifications"))
}

// WhereHasVerificationsWith applies a predicate to check if query has an edge verifications with a given conditions (other predicates).
func (f *UserFilter) WhereHasVerificationsWith(preds ...predicate.Verification) {
	f.Where(entql.HasEdgeWith("verifications", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUserRoles applies a predicate to check if query has an edge user_roles.
func (f *UserFilter) WhereHasUserRoles() {
	f.Where(entql.HasEdge("user_roles"))
}

// WhereHasUserRolesWith applies a predicate to check if query has an edge user_roles with a given conditions (other predicates).
func (f *UserFilter) WhereHasUserRolesWith(preds ...predicate.UserRole) {
	f.Where(entql.HasEdgeWith("user_roles", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUserPermissions applies a predicate to check if query has an edge user_permissions.
func (f *UserFilter) WhereHasUserPermissions() {
	f.Where(entql.HasEdge("user_permissions"))
}

// WhereHasUserPermissionsWith applies a predicate to check if query has an edge user_permissions with a given conditions (other predicates).
func (f *UserFilter) WhereHasUserPermissionsWith(preds ...predicate.UserPermission) {
	f.Where(entql.HasEdgeWith("user_permissions", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSystemRoles applies a predicate to check if query has an edge system_roles.
func (f *UserFilter) WhereHasSystemRoles() {
	f.Where(entql.HasEdge("system_roles"))
}

// WhereHasSystemRolesWith applies a predicate to check if query has an edge system_roles with a given conditions (other predicates).
func (f *UserFilter) WhereHasSystemRolesWith(preds ...predicate.Role) {
	f.Where(entql.HasEdgeWith("system_roles", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAssignedUserRoles applies a predicate to check if query has an edge assigned_user_roles.
func (f *UserFilter) WhereHasAssignedUserRoles() {
	f.Where(entql.HasEdge("assigned_user_roles"))
}

// WhereHasAssignedUserRolesWith applies a predicate to check if query has an edge assigned_user_roles with a given conditions (other predicates).
func (f *UserFilter) WhereHasAssignedUserRolesWith(preds ...predicate.UserRole) {
	f.Where(entql.HasEdgeWith("assigned_user_roles", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAssignedUserPermissions applies a predicate to check if query has an edge assigned_user_permissions.
func (f *UserFilter) WhereHasAssignedUserPermissions() {
	f.Where(entql.HasEdge("assigned_user_permissions"))
}

// WhereHasAssignedUserPermissionsWith applies a predicate to check if query has an edge assigned_user_permissions with a given conditions (other predicates).
func (f *UserFilter) WhereHasAssignedUserPermissionsWith(preds ...predicate.UserPermission) {
	f.Where(entql.HasEdgeWith("assigned_user_permissions", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAuditLogs applies a predicate to check if query has an edge audit_logs.
func (f *UserFilter) WhereHasAuditLogs() {
	f.Where(entql.HasEdge("audit_logs"))
}

// WhereHasAuditLogsWith applies a predicate to check if query has an edge audit_logs with a given conditions (other predicates).
func (f *UserFilter) WhereHasAuditLogsWith(preds ...predicate.Audit) {
	f.Where(entql.HasEdgeWith("audit_logs", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasActivities applies a predicate to check if query has an edge activities.
func (f *UserFilter) WhereHasActivities() {
	f.Where(entql.HasEdge("activities"))
}

// WhereHasActivitiesWith applies a predicate to check if query has an edge activities with a given conditions (other predicates).
func (f *UserFilter) WhereHasActivitiesWith(preds ...predicate.Activity) {
	f.Where(entql.HasEdgeWith("activities", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (upq *UserPermissionQuery) addPredicate(pred func(s *sql.Selector)) {
	upq.predicates = append(upq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the UserPermissionQuery builder.
func (upq *UserPermissionQuery) Filter() *UserPermissionFilter {
	return &UserPermissionFilter{config: upq.config, predicateAdder: upq}
}

// addPredicate implements the predicateAdder interface.
func (m *UserPermissionMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the UserPermissionMutation builder.
func (m *UserPermissionMutation) Filter() *UserPermissionFilter {
	return &UserPermissionFilter{config: m.config, predicateAdder: m}
}

// UserPermissionFilter provides a generic filtering capability at runtime for UserPermissionQuery.
type UserPermissionFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *UserPermissionFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[25].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *UserPermissionFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(userpermission.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *UserPermissionFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(userpermission.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *UserPermissionFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(userpermission.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *UserPermissionFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(userpermission.FieldDeletedAt))
}

// WhereUserID applies the entql string predicate on the user_id field.
func (f *UserPermissionFilter) WhereUserID(p entql.StringP) {
	f.Where(p.Field(userpermission.FieldUserID))
}

// WherePermissionID applies the entql string predicate on the permission_id field.
func (f *UserPermissionFilter) WherePermissionID(p entql.StringP) {
	f.Where(p.Field(userpermission.FieldPermissionID))
}

// WhereContextType applies the entql string predicate on the context_type field.
func (f *UserPermissionFilter) WhereContextType(p entql.StringP) {
	f.Where(p.Field(userpermission.FieldContextType))
}

// WhereContextID applies the entql string predicate on the context_id field.
func (f *UserPermissionFilter) WhereContextID(p entql.StringP) {
	f.Where(p.Field(userpermission.FieldContextID))
}

// WhereResourceType applies the entql string predicate on the resource_type field.
func (f *UserPermissionFilter) WhereResourceType(p entql.StringP) {
	f.Where(p.Field(userpermission.FieldResourceType))
}

// WhereResourceID applies the entql string predicate on the resource_id field.
func (f *UserPermissionFilter) WhereResourceID(p entql.StringP) {
	f.Where(p.Field(userpermission.FieldResourceID))
}

// WherePermissionType applies the entql string predicate on the permission_type field.
func (f *UserPermissionFilter) WherePermissionType(p entql.StringP) {
	f.Where(p.Field(userpermission.FieldPermissionType))
}

// WhereAssignedBy applies the entql string predicate on the assigned_by field.
func (f *UserPermissionFilter) WhereAssignedBy(p entql.StringP) {
	f.Where(p.Field(userpermission.FieldAssignedBy))
}

// WhereAssignedAt applies the entql time.Time predicate on the assigned_at field.
func (f *UserPermissionFilter) WhereAssignedAt(p entql.TimeP) {
	f.Where(p.Field(userpermission.FieldAssignedAt))
}

// WhereExpiresAt applies the entql time.Time predicate on the expires_at field.
func (f *UserPermissionFilter) WhereExpiresAt(p entql.TimeP) {
	f.Where(p.Field(userpermission.FieldExpiresAt))
}

// WhereActive applies the entql bool predicate on the active field.
func (f *UserPermissionFilter) WhereActive(p entql.BoolP) {
	f.Where(p.Field(userpermission.FieldActive))
}

// WhereConditions applies the entql json.RawMessage predicate on the conditions field.
func (f *UserPermissionFilter) WhereConditions(p entql.BytesP) {
	f.Where(p.Field(userpermission.FieldConditions))
}

// WhereReason applies the entql string predicate on the reason field.
func (f *UserPermissionFilter) WhereReason(p entql.StringP) {
	f.Where(p.Field(userpermission.FieldReason))
}

// WhereHasUser applies a predicate to check if query has an edge user.
func (f *UserPermissionFilter) WhereHasUser() {
	f.Where(entql.HasEdge("user"))
}

// WhereHasUserWith applies a predicate to check if query has an edge user with a given conditions (other predicates).
func (f *UserPermissionFilter) WhereHasUserWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("user", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPermission applies a predicate to check if query has an edge permission.
func (f *UserPermissionFilter) WhereHasPermission() {
	f.Where(entql.HasEdge("permission"))
}

// WhereHasPermissionWith applies a predicate to check if query has an edge permission with a given conditions (other predicates).
func (f *UserPermissionFilter) WhereHasPermissionWith(preds ...predicate.Permission) {
	f.Where(entql.HasEdgeWith("permission", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAssignedByUser applies a predicate to check if query has an edge assigned_by_user.
func (f *UserPermissionFilter) WhereHasAssignedByUser() {
	f.Where(entql.HasEdge("assigned_by_user"))
}

// WhereHasAssignedByUserWith applies a predicate to check if query has an edge assigned_by_user with a given conditions (other predicates).
func (f *UserPermissionFilter) WhereHasAssignedByUserWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("assigned_by_user", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrganizationContext applies a predicate to check if query has an edge organization_context.
func (f *UserPermissionFilter) WhereHasOrganizationContext() {
	f.Where(entql.HasEdge("organization_context"))
}

// WhereHasOrganizationContextWith applies a predicate to check if query has an edge organization_context with a given conditions (other predicates).
func (f *UserPermissionFilter) WhereHasOrganizationContextWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("organization_context", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (urq *UserRoleQuery) addPredicate(pred func(s *sql.Selector)) {
	urq.predicates = append(urq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the UserRoleQuery builder.
func (urq *UserRoleQuery) Filter() *UserRoleFilter {
	return &UserRoleFilter{config: urq.config, predicateAdder: urq}
}

// addPredicate implements the predicateAdder interface.
func (m *UserRoleMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the UserRoleMutation builder.
func (m *UserRoleMutation) Filter() *UserRoleFilter {
	return &UserRoleFilter{config: m.config, predicateAdder: m}
}

// UserRoleFilter provides a generic filtering capability at runtime for UserRoleQuery.
type UserRoleFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *UserRoleFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[26].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *UserRoleFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(userrole.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *UserRoleFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(userrole.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *UserRoleFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(userrole.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *UserRoleFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(userrole.FieldDeletedAt))
}

// WhereUserID applies the entql string predicate on the user_id field.
func (f *UserRoleFilter) WhereUserID(p entql.StringP) {
	f.Where(p.Field(userrole.FieldUserID))
}

// WhereRoleID applies the entql string predicate on the role_id field.
func (f *UserRoleFilter) WhereRoleID(p entql.StringP) {
	f.Where(p.Field(userrole.FieldRoleID))
}

// WhereContextType applies the entql string predicate on the context_type field.
func (f *UserRoleFilter) WhereContextType(p entql.StringP) {
	f.Where(p.Field(userrole.FieldContextType))
}

// WhereContextID applies the entql string predicate on the context_id field.
func (f *UserRoleFilter) WhereContextID(p entql.StringP) {
	f.Where(p.Field(userrole.FieldContextID))
}

// WhereAssignedBy applies the entql string predicate on the assigned_by field.
func (f *UserRoleFilter) WhereAssignedBy(p entql.StringP) {
	f.Where(p.Field(userrole.FieldAssignedBy))
}

// WhereAssignedAt applies the entql time.Time predicate on the assigned_at field.
func (f *UserRoleFilter) WhereAssignedAt(p entql.TimeP) {
	f.Where(p.Field(userrole.FieldAssignedAt))
}

// WhereExpiresAt applies the entql time.Time predicate on the expires_at field.
func (f *UserRoleFilter) WhereExpiresAt(p entql.TimeP) {
	f.Where(p.Field(userrole.FieldExpiresAt))
}

// WhereActive applies the entql bool predicate on the active field.
func (f *UserRoleFilter) WhereActive(p entql.BoolP) {
	f.Where(p.Field(userrole.FieldActive))
}

// WhereConditions applies the entql json.RawMessage predicate on the conditions field.
func (f *UserRoleFilter) WhereConditions(p entql.BytesP) {
	f.Where(p.Field(userrole.FieldConditions))
}

// WhereHasUser applies a predicate to check if query has an edge user.
func (f *UserRoleFilter) WhereHasUser() {
	f.Where(entql.HasEdge("user"))
}

// WhereHasUserWith applies a predicate to check if query has an edge user with a given conditions (other predicates).
func (f *UserRoleFilter) WhereHasUserWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("user", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRole applies a predicate to check if query has an edge role.
func (f *UserRoleFilter) WhereHasRole() {
	f.Where(entql.HasEdge("role"))
}

// WhereHasRoleWith applies a predicate to check if query has an edge role with a given conditions (other predicates).
func (f *UserRoleFilter) WhereHasRoleWith(preds ...predicate.Role) {
	f.Where(entql.HasEdgeWith("role", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrganizationContext applies a predicate to check if query has an edge organization_context.
func (f *UserRoleFilter) WhereHasOrganizationContext() {
	f.Where(entql.HasEdge("organization_context"))
}

// WhereHasOrganizationContextWith applies a predicate to check if query has an edge organization_context with a given conditions (other predicates).
func (f *UserRoleFilter) WhereHasOrganizationContextWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("organization_context", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAssignedByUser applies a predicate to check if query has an edge assigned_by_user.
func (f *UserRoleFilter) WhereHasAssignedByUser() {
	f.Where(entql.HasEdge("assigned_by_user"))
}

// WhereHasAssignedByUserWith applies a predicate to check if query has an edge assigned_by_user with a given conditions (other predicates).
func (f *UserRoleFilter) WhereHasAssignedByUserWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("assigned_by_user", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (vq *VerificationQuery) addPredicate(pred func(s *sql.Selector)) {
	vq.predicates = append(vq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the VerificationQuery builder.
func (vq *VerificationQuery) Filter() *VerificationFilter {
	return &VerificationFilter{config: vq.config, predicateAdder: vq}
}

// addPredicate implements the predicateAdder interface.
func (m *VerificationMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the VerificationMutation builder.
func (m *VerificationMutation) Filter() *VerificationFilter {
	return &VerificationFilter{config: m.config, predicateAdder: m}
}

// VerificationFilter provides a generic filtering capability at runtime for VerificationQuery.
type VerificationFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *VerificationFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[27].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *VerificationFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(verification.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *VerificationFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(verification.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *VerificationFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(verification.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *VerificationFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(verification.FieldDeletedAt))
}

// WhereUserID applies the entql string predicate on the user_id field.
func (f *VerificationFilter) WhereUserID(p entql.StringP) {
	f.Where(p.Field(verification.FieldUserID))
}

// WhereType applies the entql string predicate on the type field.
func (f *VerificationFilter) WhereType(p entql.StringP) {
	f.Where(p.Field(verification.FieldType))
}

// WhereToken applies the entql string predicate on the token field.
func (f *VerificationFilter) WhereToken(p entql.StringP) {
	f.Where(p.Field(verification.FieldToken))
}

// WhereEmail applies the entql string predicate on the email field.
func (f *VerificationFilter) WhereEmail(p entql.StringP) {
	f.Where(p.Field(verification.FieldEmail))
}

// WherePhoneNumber applies the entql string predicate on the phone_number field.
func (f *VerificationFilter) WherePhoneNumber(p entql.StringP) {
	f.Where(p.Field(verification.FieldPhoneNumber))
}

// WhereRedirectURL applies the entql string predicate on the redirect_url field.
func (f *VerificationFilter) WhereRedirectURL(p entql.StringP) {
	f.Where(p.Field(verification.FieldRedirectURL))
}

// WhereUsed applies the entql bool predicate on the used field.
func (f *VerificationFilter) WhereUsed(p entql.BoolP) {
	f.Where(p.Field(verification.FieldUsed))
}

// WhereUsedAt applies the entql time.Time predicate on the used_at field.
func (f *VerificationFilter) WhereUsedAt(p entql.TimeP) {
	f.Where(p.Field(verification.FieldUsedAt))
}

// WhereAttempts applies the entql int predicate on the attempts field.
func (f *VerificationFilter) WhereAttempts(p entql.IntP) {
	f.Where(p.Field(verification.FieldAttempts))
}

// WhereExpiresAt applies the entql time.Time predicate on the expires_at field.
func (f *VerificationFilter) WhereExpiresAt(p entql.TimeP) {
	f.Where(p.Field(verification.FieldExpiresAt))
}

// WhereIPAddress applies the entql string predicate on the ip_address field.
func (f *VerificationFilter) WhereIPAddress(p entql.StringP) {
	f.Where(p.Field(verification.FieldIPAddress))
}

// WhereUserAgent applies the entql string predicate on the user_agent field.
func (f *VerificationFilter) WhereUserAgent(p entql.StringP) {
	f.Where(p.Field(verification.FieldUserAgent))
}

// WhereAttestation applies the entql json.RawMessage predicate on the attestation field.
func (f *VerificationFilter) WhereAttestation(p entql.BytesP) {
	f.Where(p.Field(verification.FieldAttestation))
}

// WhereMetadata applies the entql json.RawMessage predicate on the metadata field.
func (f *VerificationFilter) WhereMetadata(p entql.BytesP) {
	f.Where(p.Field(verification.FieldMetadata))
}

// WhereHasUser applies a predicate to check if query has an edge user.
func (f *VerificationFilter) WhereHasUser() {
	f.Where(entql.HasEdge("user"))
}

// WhereHasUserWith applies a predicate to check if query has an edge user with a given conditions (other predicates).
func (f *VerificationFilter) WhereHasUserWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("user", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (wq *WebhookQuery) addPredicate(pred func(s *sql.Selector)) {
	wq.predicates = append(wq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the WebhookQuery builder.
func (wq *WebhookQuery) Filter() *WebhookFilter {
	return &WebhookFilter{config: wq.config, predicateAdder: wq}
}

// addPredicate implements the predicateAdder interface.
func (m *WebhookMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the WebhookMutation builder.
func (m *WebhookMutation) Filter() *WebhookFilter {
	return &WebhookFilter{config: m.config, predicateAdder: m}
}

// WebhookFilter provides a generic filtering capability at runtime for WebhookQuery.
type WebhookFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *WebhookFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[28].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *WebhookFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(webhook.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *WebhookFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(webhook.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *WebhookFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(webhook.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *WebhookFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(webhook.FieldDeletedAt))
}

// WhereName applies the entql string predicate on the name field.
func (f *WebhookFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(webhook.FieldName))
}

// WhereURL applies the entql string predicate on the url field.
func (f *WebhookFilter) WhereURL(p entql.StringP) {
	f.Where(p.Field(webhook.FieldURL))
}

// WhereOrganizationID applies the entql string predicate on the organization_id field.
func (f *WebhookFilter) WhereOrganizationID(p entql.StringP) {
	f.Where(p.Field(webhook.FieldOrganizationID))
}

// WhereSecret applies the entql string predicate on the secret field.
func (f *WebhookFilter) WhereSecret(p entql.StringP) {
	f.Where(p.Field(webhook.FieldSecret))
}

// WhereActive applies the entql bool predicate on the active field.
func (f *WebhookFilter) WhereActive(p entql.BoolP) {
	f.Where(p.Field(webhook.FieldActive))
}

// WhereEventTypes applies the entql json.RawMessage predicate on the event_types field.
func (f *WebhookFilter) WhereEventTypes(p entql.BytesP) {
	f.Where(p.Field(webhook.FieldEventTypes))
}

// WhereVersion applies the entql string predicate on the version field.
func (f *WebhookFilter) WhereVersion(p entql.StringP) {
	f.Where(p.Field(webhook.FieldVersion))
}

// WhereRetryCount applies the entql int predicate on the retry_count field.
func (f *WebhookFilter) WhereRetryCount(p entql.IntP) {
	f.Where(p.Field(webhook.FieldRetryCount))
}

// WhereTimeoutMs applies the entql int predicate on the timeout_ms field.
func (f *WebhookFilter) WhereTimeoutMs(p entql.IntP) {
	f.Where(p.Field(webhook.FieldTimeoutMs))
}

// WhereFormat applies the entql string predicate on the format field.
func (f *WebhookFilter) WhereFormat(p entql.StringP) {
	f.Where(p.Field(webhook.FieldFormat))
}

// WhereMetadata applies the entql json.RawMessage predicate on the metadata field.
func (f *WebhookFilter) WhereMetadata(p entql.BytesP) {
	f.Where(p.Field(webhook.FieldMetadata))
}

// WhereHeaders applies the entql json.RawMessage predicate on the headers field.
func (f *WebhookFilter) WhereHeaders(p entql.BytesP) {
	f.Where(p.Field(webhook.FieldHeaders))
}

// WhereHasOrganization applies a predicate to check if query has an edge organization.
func (f *WebhookFilter) WhereHasOrganization() {
	f.Where(entql.HasEdge("organization"))
}

// WhereHasOrganizationWith applies a predicate to check if query has an edge organization with a given conditions (other predicates).
func (f *WebhookFilter) WhereHasOrganizationWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("organization", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEvents applies a predicate to check if query has an edge events.
func (f *WebhookFilter) WhereHasEvents() {
	f.Where(entql.HasEdge("events"))
}

// WhereHasEventsWith applies a predicate to check if query has an edge events with a given conditions (other predicates).
func (f *WebhookFilter) WhereHasEventsWith(preds ...predicate.WebhookEvent) {
	f.Where(entql.HasEdgeWith("events", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (weq *WebhookEventQuery) addPredicate(pred func(s *sql.Selector)) {
	weq.predicates = append(weq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the WebhookEventQuery builder.
func (weq *WebhookEventQuery) Filter() *WebhookEventFilter {
	return &WebhookEventFilter{config: weq.config, predicateAdder: weq}
}

// addPredicate implements the predicateAdder interface.
func (m *WebhookEventMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the WebhookEventMutation builder.
func (m *WebhookEventMutation) Filter() *WebhookEventFilter {
	return &WebhookEventFilter{config: m.config, predicateAdder: m}
}

// WebhookEventFilter provides a generic filtering capability at runtime for WebhookEventQuery.
type WebhookEventFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *WebhookEventFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[29].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *WebhookEventFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(webhookevent.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *WebhookEventFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(webhookevent.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *WebhookEventFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(webhookevent.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *WebhookEventFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(webhookevent.FieldDeletedAt))
}

// WhereWebhookID applies the entql string predicate on the webhook_id field.
func (f *WebhookEventFilter) WhereWebhookID(p entql.StringP) {
	f.Where(p.Field(webhookevent.FieldWebhookID))
}

// WhereEventType applies the entql string predicate on the event_type field.
func (f *WebhookEventFilter) WhereEventType(p entql.StringP) {
	f.Where(p.Field(webhookevent.FieldEventType))
}

// WhereHeaders applies the entql json.RawMessage predicate on the headers field.
func (f *WebhookEventFilter) WhereHeaders(p entql.BytesP) {
	f.Where(p.Field(webhookevent.FieldHeaders))
}

// WherePayload applies the entql json.RawMessage predicate on the payload field.
func (f *WebhookEventFilter) WherePayload(p entql.BytesP) {
	f.Where(p.Field(webhookevent.FieldPayload))
}

// WhereDelivered applies the entql bool predicate on the delivered field.
func (f *WebhookEventFilter) WhereDelivered(p entql.BoolP) {
	f.Where(p.Field(webhookevent.FieldDelivered))
}

// WhereDeliveredAt applies the entql time.Time predicate on the delivered_at field.
func (f *WebhookEventFilter) WhereDeliveredAt(p entql.TimeP) {
	f.Where(p.Field(webhookevent.FieldDeliveredAt))
}

// WhereAttempts applies the entql int predicate on the attempts field.
func (f *WebhookEventFilter) WhereAttempts(p entql.IntP) {
	f.Where(p.Field(webhookevent.FieldAttempts))
}

// WhereNextRetry applies the entql time.Time predicate on the next_retry field.
func (f *WebhookEventFilter) WhereNextRetry(p entql.TimeP) {
	f.Where(p.Field(webhookevent.FieldNextRetry))
}

// WhereStatusCode applies the entql int predicate on the status_code field.
func (f *WebhookEventFilter) WhereStatusCode(p entql.IntP) {
	f.Where(p.Field(webhookevent.FieldStatusCode))
}

// WhereResponseBody applies the entql string predicate on the response_body field.
func (f *WebhookEventFilter) WhereResponseBody(p entql.StringP) {
	f.Where(p.Field(webhookevent.FieldResponseBody))
}

// WhereError applies the entql string predicate on the error field.
func (f *WebhookEventFilter) WhereError(p entql.StringP) {
	f.Where(p.Field(webhookevent.FieldError))
}

// WhereHasWebhook applies a predicate to check if query has an edge webhook.
func (f *WebhookEventFilter) WhereHasWebhook() {
	f.Where(entql.HasEdge("webhook"))
}

// WhereHasWebhookWith applies a predicate to check if query has an edge webhook with a given conditions (other predicates).
func (f *WebhookEventFilter) WhereHasWebhookWith(preds ...predicate.Webhook) {
	f.Where(entql.HasEdgeWith("webhook", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}
