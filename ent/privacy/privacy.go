// Copyright 2023-present XRaph LLC. All rights reserved.
// This source code is licensed under the XRaph LLC license found
// in the LICENSE file in the root directory of this source tree.
// Code generated by ent, DO NOT EDIT.

package privacy

import (
	"context"

	"github.com/juicycleff/frank/ent"

	"entgo.io/ent/entql"
	"entgo.io/ent/privacy"
)

var (
	// Allow may be returned by rules to indicate that the policy
	// evaluation should terminate with allow decision.
	Allow = privacy.Allow

	// Deny may be returned by rules to indicate that the policy
	// evaluation should terminate with deny decision.
	Deny = privacy.Deny

	// Skip may be returned by rules to indicate that the policy
	// evaluation should continue to the next rule.
	Skip = privacy.Skip
)

// Allowf returns a formatted wrapped Allow decision.
func Allowf(format string, a ...any) error {
	return privacy.Allowf(format, a...)
}

// Denyf returns a formatted wrapped Deny decision.
func Denyf(format string, a ...any) error {
	return privacy.Denyf(format, a...)
}

// Skipf returns a formatted wrapped Skip decision.
func Skipf(format string, a ...any) error {
	return privacy.Skipf(format, a...)
}

// DecisionContext creates a new context from the given parent context with
// a policy decision attach to it.
func DecisionContext(parent context.Context, decision error) context.Context {
	return privacy.DecisionContext(parent, decision)
}

// DecisionFromContext retrieves the policy decision from the context.
func DecisionFromContext(ctx context.Context) (error, bool) {
	return privacy.DecisionFromContext(ctx)
}

type (
	// Policy groups query and mutation policies.
	Policy = privacy.Policy

	// QueryRule defines the interface deciding whether a
	// query is allowed and optionally modify it.
	QueryRule = privacy.QueryRule
	// QueryPolicy combines multiple query rules into a single policy.
	QueryPolicy = privacy.QueryPolicy

	// MutationRule defines the interface which decides whether a
	// mutation is allowed and optionally modifies it.
	MutationRule = privacy.MutationRule
	// MutationPolicy combines multiple mutation rules into a single policy.
	MutationPolicy = privacy.MutationPolicy
	// MutationRuleFunc type is an adapter which allows the use of
	// ordinary functions as mutation rules.
	MutationRuleFunc = privacy.MutationRuleFunc

	// QueryMutationRule is an interface which groups query and mutation rules.
	QueryMutationRule = privacy.QueryMutationRule
)

// QueryRuleFunc type is an adapter to allow the use of
// ordinary functions as query rules.
type QueryRuleFunc func(context.Context, ent.Query) error

// Eval returns f(ctx, q).
func (f QueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	return f(ctx, q)
}

// AlwaysAllowRule returns a rule that returns an allow decision.
func AlwaysAllowRule() QueryMutationRule {
	return privacy.AlwaysAllowRule()
}

// AlwaysDenyRule returns a rule that returns a deny decision.
func AlwaysDenyRule() QueryMutationRule {
	return privacy.AlwaysDenyRule()
}

// ContextQueryMutationRule creates a query/mutation rule from a context eval func.
func ContextQueryMutationRule(eval func(context.Context) error) QueryMutationRule {
	return privacy.ContextQueryMutationRule(eval)
}

// OnMutationOperation evaluates the given rule only on a given mutation operation.
func OnMutationOperation(rule MutationRule, op ent.Op) MutationRule {
	return privacy.OnMutationOperation(rule, op)
}

// DenyMutationOperationRule returns a rule denying specified mutation operation.
func DenyMutationOperationRule(op ent.Op) MutationRule {
	rule := MutationRuleFunc(func(_ context.Context, m ent.Mutation) error {
		return Denyf("ent/privacy: operation %s is not allowed", m.Op())
	})
	return OnMutationOperation(rule, op)
}

// The ApiKeyQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ApiKeyQueryRuleFunc func(context.Context, *ent.ApiKeyQuery) error

// EvalQuery return f(ctx, q).
func (f ApiKeyQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ApiKeyQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ApiKeyQuery", q)
}

// The ApiKeyMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ApiKeyMutationRuleFunc func(context.Context, *ent.ApiKeyMutation) error

// EvalMutation calls f(ctx, m).
func (f ApiKeyMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ApiKeyMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ApiKeyMutation", m)
}

// The AuditQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AuditQueryRuleFunc func(context.Context, *ent.AuditQuery) error

// EvalQuery return f(ctx, q).
func (f AuditQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.AuditQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.AuditQuery", q)
}

// The AuditMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AuditMutationRuleFunc func(context.Context, *ent.AuditMutation) error

// EvalMutation calls f(ctx, m).
func (f AuditMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.AuditMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.AuditMutation", m)
}

// The EmailTemplateQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type EmailTemplateQueryRuleFunc func(context.Context, *ent.EmailTemplateQuery) error

// EvalQuery return f(ctx, q).
func (f EmailTemplateQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.EmailTemplateQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.EmailTemplateQuery", q)
}

// The EmailTemplateMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type EmailTemplateMutationRuleFunc func(context.Context, *ent.EmailTemplateMutation) error

// EvalMutation calls f(ctx, m).
func (f EmailTemplateMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.EmailTemplateMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.EmailTemplateMutation", m)
}

// The FeatureFlagQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type FeatureFlagQueryRuleFunc func(context.Context, *ent.FeatureFlagQuery) error

// EvalQuery return f(ctx, q).
func (f FeatureFlagQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.FeatureFlagQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.FeatureFlagQuery", q)
}

// The FeatureFlagMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type FeatureFlagMutationRuleFunc func(context.Context, *ent.FeatureFlagMutation) error

// EvalMutation calls f(ctx, m).
func (f FeatureFlagMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.FeatureFlagMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.FeatureFlagMutation", m)
}

// The IdentityProviderQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type IdentityProviderQueryRuleFunc func(context.Context, *ent.IdentityProviderQuery) error

// EvalQuery return f(ctx, q).
func (f IdentityProviderQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.IdentityProviderQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.IdentityProviderQuery", q)
}

// The IdentityProviderMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type IdentityProviderMutationRuleFunc func(context.Context, *ent.IdentityProviderMutation) error

// EvalMutation calls f(ctx, m).
func (f IdentityProviderMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.IdentityProviderMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.IdentityProviderMutation", m)
}

// The MFAQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type MFAQueryRuleFunc func(context.Context, *ent.MFAQuery) error

// EvalQuery return f(ctx, q).
func (f MFAQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.MFAQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.MFAQuery", q)
}

// The MFAMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type MFAMutationRuleFunc func(context.Context, *ent.MFAMutation) error

// EvalMutation calls f(ctx, m).
func (f MFAMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.MFAMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.MFAMutation", m)
}

// The MembershipQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type MembershipQueryRuleFunc func(context.Context, *ent.MembershipQuery) error

// EvalQuery return f(ctx, q).
func (f MembershipQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.MembershipQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.MembershipQuery", q)
}

// The MembershipMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type MembershipMutationRuleFunc func(context.Context, *ent.MembershipMutation) error

// EvalMutation calls f(ctx, m).
func (f MembershipMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.MembershipMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.MembershipMutation", m)
}

// The OAuthAuthorizationQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type OAuthAuthorizationQueryRuleFunc func(context.Context, *ent.OAuthAuthorizationQuery) error

// EvalQuery return f(ctx, q).
func (f OAuthAuthorizationQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OAuthAuthorizationQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.OAuthAuthorizationQuery", q)
}

// The OAuthAuthorizationMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type OAuthAuthorizationMutationRuleFunc func(context.Context, *ent.OAuthAuthorizationMutation) error

// EvalMutation calls f(ctx, m).
func (f OAuthAuthorizationMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.OAuthAuthorizationMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.OAuthAuthorizationMutation", m)
}

// The OAuthClientQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type OAuthClientQueryRuleFunc func(context.Context, *ent.OAuthClientQuery) error

// EvalQuery return f(ctx, q).
func (f OAuthClientQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OAuthClientQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.OAuthClientQuery", q)
}

// The OAuthClientMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type OAuthClientMutationRuleFunc func(context.Context, *ent.OAuthClientMutation) error

// EvalMutation calls f(ctx, m).
func (f OAuthClientMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.OAuthClientMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.OAuthClientMutation", m)
}

// The OAuthScopeQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type OAuthScopeQueryRuleFunc func(context.Context, *ent.OAuthScopeQuery) error

// EvalQuery return f(ctx, q).
func (f OAuthScopeQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OAuthScopeQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.OAuthScopeQuery", q)
}

// The OAuthScopeMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type OAuthScopeMutationRuleFunc func(context.Context, *ent.OAuthScopeMutation) error

// EvalMutation calls f(ctx, m).
func (f OAuthScopeMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.OAuthScopeMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.OAuthScopeMutation", m)
}

// The OAuthTokenQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type OAuthTokenQueryRuleFunc func(context.Context, *ent.OAuthTokenQuery) error

// EvalQuery return f(ctx, q).
func (f OAuthTokenQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OAuthTokenQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.OAuthTokenQuery", q)
}

// The OAuthTokenMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type OAuthTokenMutationRuleFunc func(context.Context, *ent.OAuthTokenMutation) error

// EvalMutation calls f(ctx, m).
func (f OAuthTokenMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.OAuthTokenMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.OAuthTokenMutation", m)
}

// The OrganizationQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type OrganizationQueryRuleFunc func(context.Context, *ent.OrganizationQuery) error

// EvalQuery return f(ctx, q).
func (f OrganizationQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OrganizationQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.OrganizationQuery", q)
}

// The OrganizationMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type OrganizationMutationRuleFunc func(context.Context, *ent.OrganizationMutation) error

// EvalMutation calls f(ctx, m).
func (f OrganizationMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.OrganizationMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.OrganizationMutation", m)
}

// The OrganizationFeatureQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type OrganizationFeatureQueryRuleFunc func(context.Context, *ent.OrganizationFeatureQuery) error

// EvalQuery return f(ctx, q).
func (f OrganizationFeatureQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OrganizationFeatureQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.OrganizationFeatureQuery", q)
}

// The OrganizationFeatureMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type OrganizationFeatureMutationRuleFunc func(context.Context, *ent.OrganizationFeatureMutation) error

// EvalMutation calls f(ctx, m).
func (f OrganizationFeatureMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.OrganizationFeatureMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.OrganizationFeatureMutation", m)
}

// The PasskeyQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type PasskeyQueryRuleFunc func(context.Context, *ent.PasskeyQuery) error

// EvalQuery return f(ctx, q).
func (f PasskeyQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PasskeyQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.PasskeyQuery", q)
}

// The PasskeyMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type PasskeyMutationRuleFunc func(context.Context, *ent.PasskeyMutation) error

// EvalMutation calls f(ctx, m).
func (f PasskeyMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.PasskeyMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.PasskeyMutation", m)
}

// The PermissionQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type PermissionQueryRuleFunc func(context.Context, *ent.PermissionQuery) error

// EvalQuery return f(ctx, q).
func (f PermissionQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PermissionQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.PermissionQuery", q)
}

// The PermissionMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type PermissionMutationRuleFunc func(context.Context, *ent.PermissionMutation) error

// EvalMutation calls f(ctx, m).
func (f PermissionMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.PermissionMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.PermissionMutation", m)
}

// The PermissionDependencyQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type PermissionDependencyQueryRuleFunc func(context.Context, *ent.PermissionDependencyQuery) error

// EvalQuery return f(ctx, q).
func (f PermissionDependencyQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PermissionDependencyQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.PermissionDependencyQuery", q)
}

// The PermissionDependencyMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type PermissionDependencyMutationRuleFunc func(context.Context, *ent.PermissionDependencyMutation) error

// EvalMutation calls f(ctx, m).
func (f PermissionDependencyMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.PermissionDependencyMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.PermissionDependencyMutation", m)
}

// The RoleQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type RoleQueryRuleFunc func(context.Context, *ent.RoleQuery) error

// EvalQuery return f(ctx, q).
func (f RoleQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.RoleQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.RoleQuery", q)
}

// The RoleMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type RoleMutationRuleFunc func(context.Context, *ent.RoleMutation) error

// EvalMutation calls f(ctx, m).
func (f RoleMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.RoleMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.RoleMutation", m)
}

// The SMSTemplateQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type SMSTemplateQueryRuleFunc func(context.Context, *ent.SMSTemplateQuery) error

// EvalQuery return f(ctx, q).
func (f SMSTemplateQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SMSTemplateQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.SMSTemplateQuery", q)
}

// The SMSTemplateMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type SMSTemplateMutationRuleFunc func(context.Context, *ent.SMSTemplateMutation) error

// EvalMutation calls f(ctx, m).
func (f SMSTemplateMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.SMSTemplateMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.SMSTemplateMutation", m)
}

// The SSOStateQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type SSOStateQueryRuleFunc func(context.Context, *ent.SSOStateQuery) error

// EvalQuery return f(ctx, q).
func (f SSOStateQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SSOStateQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.SSOStateQuery", q)
}

// The SSOStateMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type SSOStateMutationRuleFunc func(context.Context, *ent.SSOStateMutation) error

// EvalMutation calls f(ctx, m).
func (f SSOStateMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.SSOStateMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.SSOStateMutation", m)
}

// The SessionQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type SessionQueryRuleFunc func(context.Context, *ent.SessionQuery) error

// EvalQuery return f(ctx, q).
func (f SessionQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SessionQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.SessionQuery", q)
}

// The SessionMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type SessionMutationRuleFunc func(context.Context, *ent.SessionMutation) error

// EvalMutation calls f(ctx, m).
func (f SessionMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.SessionMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.SessionMutation", m)
}

// The UserQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type UserQueryRuleFunc func(context.Context, *ent.UserQuery) error

// EvalQuery return f(ctx, q).
func (f UserQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UserQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.UserQuery", q)
}

// The UserMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type UserMutationRuleFunc func(context.Context, *ent.UserMutation) error

// EvalMutation calls f(ctx, m).
func (f UserMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.UserMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.UserMutation", m)
}

// The UserPermissionQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type UserPermissionQueryRuleFunc func(context.Context, *ent.UserPermissionQuery) error

// EvalQuery return f(ctx, q).
func (f UserPermissionQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UserPermissionQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.UserPermissionQuery", q)
}

// The UserPermissionMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type UserPermissionMutationRuleFunc func(context.Context, *ent.UserPermissionMutation) error

// EvalMutation calls f(ctx, m).
func (f UserPermissionMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.UserPermissionMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.UserPermissionMutation", m)
}

// The UserRoleQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type UserRoleQueryRuleFunc func(context.Context, *ent.UserRoleQuery) error

// EvalQuery return f(ctx, q).
func (f UserRoleQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UserRoleQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.UserRoleQuery", q)
}

// The UserRoleMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type UserRoleMutationRuleFunc func(context.Context, *ent.UserRoleMutation) error

// EvalMutation calls f(ctx, m).
func (f UserRoleMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.UserRoleMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.UserRoleMutation", m)
}

// The VerificationQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type VerificationQueryRuleFunc func(context.Context, *ent.VerificationQuery) error

// EvalQuery return f(ctx, q).
func (f VerificationQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.VerificationQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.VerificationQuery", q)
}

// The VerificationMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type VerificationMutationRuleFunc func(context.Context, *ent.VerificationMutation) error

// EvalMutation calls f(ctx, m).
func (f VerificationMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.VerificationMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.VerificationMutation", m)
}

// The WebhookQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type WebhookQueryRuleFunc func(context.Context, *ent.WebhookQuery) error

// EvalQuery return f(ctx, q).
func (f WebhookQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.WebhookQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.WebhookQuery", q)
}

// The WebhookMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type WebhookMutationRuleFunc func(context.Context, *ent.WebhookMutation) error

// EvalMutation calls f(ctx, m).
func (f WebhookMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.WebhookMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.WebhookMutation", m)
}

// The WebhookEventQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type WebhookEventQueryRuleFunc func(context.Context, *ent.WebhookEventQuery) error

// EvalQuery return f(ctx, q).
func (f WebhookEventQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.WebhookEventQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.WebhookEventQuery", q)
}

// The WebhookEventMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type WebhookEventMutationRuleFunc func(context.Context, *ent.WebhookEventMutation) error

// EvalMutation calls f(ctx, m).
func (f WebhookEventMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.WebhookEventMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.WebhookEventMutation", m)
}

type (
	// Filter is the interface that wraps the Where function
	// for filtering nodes in queries and mutations.
	Filter interface {
		// Where applies a filter on the executed query/mutation.
		Where(entql.P)
	}

	// The FilterFunc type is an adapter that allows the use of ordinary
	// functions as filters for query and mutation types.
	FilterFunc func(context.Context, Filter) error
)

// EvalQuery calls f(ctx, q) if the query implements the Filter interface, otherwise it is denied.
func (f FilterFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	fr, err := queryFilter(q)
	if err != nil {
		return err
	}
	return f(ctx, fr)
}

// EvalMutation calls f(ctx, q) if the mutation implements the Filter interface, otherwise it is denied.
func (f FilterFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	fr, err := mutationFilter(m)
	if err != nil {
		return err
	}
	return f(ctx, fr)
}

var _ QueryMutationRule = FilterFunc(nil)

func queryFilter(q ent.Query) (Filter, error) {
	switch q := q.(type) {
	case *ent.ApiKeyQuery:
		return q.Filter(), nil
	case *ent.AuditQuery:
		return q.Filter(), nil
	case *ent.EmailTemplateQuery:
		return q.Filter(), nil
	case *ent.FeatureFlagQuery:
		return q.Filter(), nil
	case *ent.IdentityProviderQuery:
		return q.Filter(), nil
	case *ent.MFAQuery:
		return q.Filter(), nil
	case *ent.MembershipQuery:
		return q.Filter(), nil
	case *ent.OAuthAuthorizationQuery:
		return q.Filter(), nil
	case *ent.OAuthClientQuery:
		return q.Filter(), nil
	case *ent.OAuthScopeQuery:
		return q.Filter(), nil
	case *ent.OAuthTokenQuery:
		return q.Filter(), nil
	case *ent.OrganizationQuery:
		return q.Filter(), nil
	case *ent.OrganizationFeatureQuery:
		return q.Filter(), nil
	case *ent.PasskeyQuery:
		return q.Filter(), nil
	case *ent.PermissionQuery:
		return q.Filter(), nil
	case *ent.PermissionDependencyQuery:
		return q.Filter(), nil
	case *ent.RoleQuery:
		return q.Filter(), nil
	case *ent.SMSTemplateQuery:
		return q.Filter(), nil
	case *ent.SSOStateQuery:
		return q.Filter(), nil
	case *ent.SessionQuery:
		return q.Filter(), nil
	case *ent.UserQuery:
		return q.Filter(), nil
	case *ent.UserPermissionQuery:
		return q.Filter(), nil
	case *ent.UserRoleQuery:
		return q.Filter(), nil
	case *ent.VerificationQuery:
		return q.Filter(), nil
	case *ent.WebhookQuery:
		return q.Filter(), nil
	case *ent.WebhookEventQuery:
		return q.Filter(), nil
	default:
		return nil, Denyf("ent/privacy: unexpected query type %T for query filter", q)
	}
}

func mutationFilter(m ent.Mutation) (Filter, error) {
	switch m := m.(type) {
	case *ent.ApiKeyMutation:
		return m.Filter(), nil
	case *ent.AuditMutation:
		return m.Filter(), nil
	case *ent.EmailTemplateMutation:
		return m.Filter(), nil
	case *ent.FeatureFlagMutation:
		return m.Filter(), nil
	case *ent.IdentityProviderMutation:
		return m.Filter(), nil
	case *ent.MFAMutation:
		return m.Filter(), nil
	case *ent.MembershipMutation:
		return m.Filter(), nil
	case *ent.OAuthAuthorizationMutation:
		return m.Filter(), nil
	case *ent.OAuthClientMutation:
		return m.Filter(), nil
	case *ent.OAuthScopeMutation:
		return m.Filter(), nil
	case *ent.OAuthTokenMutation:
		return m.Filter(), nil
	case *ent.OrganizationMutation:
		return m.Filter(), nil
	case *ent.OrganizationFeatureMutation:
		return m.Filter(), nil
	case *ent.PasskeyMutation:
		return m.Filter(), nil
	case *ent.PermissionMutation:
		return m.Filter(), nil
	case *ent.PermissionDependencyMutation:
		return m.Filter(), nil
	case *ent.RoleMutation:
		return m.Filter(), nil
	case *ent.SMSTemplateMutation:
		return m.Filter(), nil
	case *ent.SSOStateMutation:
		return m.Filter(), nil
	case *ent.SessionMutation:
		return m.Filter(), nil
	case *ent.UserMutation:
		return m.Filter(), nil
	case *ent.UserPermissionMutation:
		return m.Filter(), nil
	case *ent.UserRoleMutation:
		return m.Filter(), nil
	case *ent.VerificationMutation:
		return m.Filter(), nil
	case *ent.WebhookMutation:
		return m.Filter(), nil
	case *ent.WebhookEventMutation:
		return m.Filter(), nil
	default:
		return nil, Denyf("ent/privacy: unexpected mutation type %T for mutation filter", m)
	}
}
