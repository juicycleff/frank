// Code generated by ent, DO NOT EDIT.

package passkey

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/juicycleff/frank/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Passkey {
	return predicate.Passkey(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Passkey {
	return predicate.Passkey(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Passkey {
	return predicate.Passkey(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Passkey {
	return predicate.Passkey(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Passkey {
	return predicate.Passkey(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Passkey {
	return predicate.Passkey(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Passkey {
	return predicate.Passkey(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Passkey {
	return predicate.Passkey(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Passkey {
	return predicate.Passkey(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Passkey {
	return predicate.Passkey(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Passkey {
	return predicate.Passkey(sql.FieldContainsFold(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Passkey {
	return predicate.Passkey(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Passkey {
	return predicate.Passkey(sql.FieldEQ(FieldUpdatedAt, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v string) predicate.Passkey {
	return predicate.Passkey(sql.FieldEQ(FieldUserID, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Passkey {
	return predicate.Passkey(sql.FieldEQ(FieldName, v))
}

// CredentialID applies equality check predicate on the "credential_id" field. It's identical to CredentialIDEQ.
func CredentialID(v string) predicate.Passkey {
	return predicate.Passkey(sql.FieldEQ(FieldCredentialID, v))
}

// PublicKey applies equality check predicate on the "public_key" field. It's identical to PublicKeyEQ.
func PublicKey(v []byte) predicate.Passkey {
	return predicate.Passkey(sql.FieldEQ(FieldPublicKey, v))
}

// SignCount applies equality check predicate on the "sign_count" field. It's identical to SignCountEQ.
func SignCount(v int) predicate.Passkey {
	return predicate.Passkey(sql.FieldEQ(FieldSignCount, v))
}

// Active applies equality check predicate on the "active" field. It's identical to ActiveEQ.
func Active(v bool) predicate.Passkey {
	return predicate.Passkey(sql.FieldEQ(FieldActive, v))
}

// DeviceType applies equality check predicate on the "device_type" field. It's identical to DeviceTypeEQ.
func DeviceType(v string) predicate.Passkey {
	return predicate.Passkey(sql.FieldEQ(FieldDeviceType, v))
}

// Aaguid applies equality check predicate on the "aaguid" field. It's identical to AaguidEQ.
func Aaguid(v string) predicate.Passkey {
	return predicate.Passkey(sql.FieldEQ(FieldAaguid, v))
}

// LastUsed applies equality check predicate on the "last_used" field. It's identical to LastUsedEQ.
func LastUsed(v time.Time) predicate.Passkey {
	return predicate.Passkey(sql.FieldEQ(FieldLastUsed, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Passkey {
	return predicate.Passkey(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Passkey {
	return predicate.Passkey(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Passkey {
	return predicate.Passkey(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Passkey {
	return predicate.Passkey(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Passkey {
	return predicate.Passkey(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Passkey {
	return predicate.Passkey(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Passkey {
	return predicate.Passkey(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Passkey {
	return predicate.Passkey(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Passkey {
	return predicate.Passkey(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Passkey {
	return predicate.Passkey(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Passkey {
	return predicate.Passkey(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Passkey {
	return predicate.Passkey(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Passkey {
	return predicate.Passkey(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Passkey {
	return predicate.Passkey(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Passkey {
	return predicate.Passkey(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Passkey {
	return predicate.Passkey(sql.FieldLTE(FieldUpdatedAt, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v string) predicate.Passkey {
	return predicate.Passkey(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v string) predicate.Passkey {
	return predicate.Passkey(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...string) predicate.Passkey {
	return predicate.Passkey(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...string) predicate.Passkey {
	return predicate.Passkey(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v string) predicate.Passkey {
	return predicate.Passkey(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v string) predicate.Passkey {
	return predicate.Passkey(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v string) predicate.Passkey {
	return predicate.Passkey(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v string) predicate.Passkey {
	return predicate.Passkey(sql.FieldLTE(FieldUserID, v))
}

// UserIDContains applies the Contains predicate on the "user_id" field.
func UserIDContains(v string) predicate.Passkey {
	return predicate.Passkey(sql.FieldContains(FieldUserID, v))
}

// UserIDHasPrefix applies the HasPrefix predicate on the "user_id" field.
func UserIDHasPrefix(v string) predicate.Passkey {
	return predicate.Passkey(sql.FieldHasPrefix(FieldUserID, v))
}

// UserIDHasSuffix applies the HasSuffix predicate on the "user_id" field.
func UserIDHasSuffix(v string) predicate.Passkey {
	return predicate.Passkey(sql.FieldHasSuffix(FieldUserID, v))
}

// UserIDEqualFold applies the EqualFold predicate on the "user_id" field.
func UserIDEqualFold(v string) predicate.Passkey {
	return predicate.Passkey(sql.FieldEqualFold(FieldUserID, v))
}

// UserIDContainsFold applies the ContainsFold predicate on the "user_id" field.
func UserIDContainsFold(v string) predicate.Passkey {
	return predicate.Passkey(sql.FieldContainsFold(FieldUserID, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Passkey {
	return predicate.Passkey(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Passkey {
	return predicate.Passkey(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Passkey {
	return predicate.Passkey(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Passkey {
	return predicate.Passkey(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Passkey {
	return predicate.Passkey(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Passkey {
	return predicate.Passkey(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Passkey {
	return predicate.Passkey(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Passkey {
	return predicate.Passkey(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Passkey {
	return predicate.Passkey(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Passkey {
	return predicate.Passkey(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Passkey {
	return predicate.Passkey(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Passkey {
	return predicate.Passkey(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Passkey {
	return predicate.Passkey(sql.FieldContainsFold(FieldName, v))
}

// CredentialIDEQ applies the EQ predicate on the "credential_id" field.
func CredentialIDEQ(v string) predicate.Passkey {
	return predicate.Passkey(sql.FieldEQ(FieldCredentialID, v))
}

// CredentialIDNEQ applies the NEQ predicate on the "credential_id" field.
func CredentialIDNEQ(v string) predicate.Passkey {
	return predicate.Passkey(sql.FieldNEQ(FieldCredentialID, v))
}

// CredentialIDIn applies the In predicate on the "credential_id" field.
func CredentialIDIn(vs ...string) predicate.Passkey {
	return predicate.Passkey(sql.FieldIn(FieldCredentialID, vs...))
}

// CredentialIDNotIn applies the NotIn predicate on the "credential_id" field.
func CredentialIDNotIn(vs ...string) predicate.Passkey {
	return predicate.Passkey(sql.FieldNotIn(FieldCredentialID, vs...))
}

// CredentialIDGT applies the GT predicate on the "credential_id" field.
func CredentialIDGT(v string) predicate.Passkey {
	return predicate.Passkey(sql.FieldGT(FieldCredentialID, v))
}

// CredentialIDGTE applies the GTE predicate on the "credential_id" field.
func CredentialIDGTE(v string) predicate.Passkey {
	return predicate.Passkey(sql.FieldGTE(FieldCredentialID, v))
}

// CredentialIDLT applies the LT predicate on the "credential_id" field.
func CredentialIDLT(v string) predicate.Passkey {
	return predicate.Passkey(sql.FieldLT(FieldCredentialID, v))
}

// CredentialIDLTE applies the LTE predicate on the "credential_id" field.
func CredentialIDLTE(v string) predicate.Passkey {
	return predicate.Passkey(sql.FieldLTE(FieldCredentialID, v))
}

// CredentialIDContains applies the Contains predicate on the "credential_id" field.
func CredentialIDContains(v string) predicate.Passkey {
	return predicate.Passkey(sql.FieldContains(FieldCredentialID, v))
}

// CredentialIDHasPrefix applies the HasPrefix predicate on the "credential_id" field.
func CredentialIDHasPrefix(v string) predicate.Passkey {
	return predicate.Passkey(sql.FieldHasPrefix(FieldCredentialID, v))
}

// CredentialIDHasSuffix applies the HasSuffix predicate on the "credential_id" field.
func CredentialIDHasSuffix(v string) predicate.Passkey {
	return predicate.Passkey(sql.FieldHasSuffix(FieldCredentialID, v))
}

// CredentialIDEqualFold applies the EqualFold predicate on the "credential_id" field.
func CredentialIDEqualFold(v string) predicate.Passkey {
	return predicate.Passkey(sql.FieldEqualFold(FieldCredentialID, v))
}

// CredentialIDContainsFold applies the ContainsFold predicate on the "credential_id" field.
func CredentialIDContainsFold(v string) predicate.Passkey {
	return predicate.Passkey(sql.FieldContainsFold(FieldCredentialID, v))
}

// PublicKeyEQ applies the EQ predicate on the "public_key" field.
func PublicKeyEQ(v []byte) predicate.Passkey {
	return predicate.Passkey(sql.FieldEQ(FieldPublicKey, v))
}

// PublicKeyNEQ applies the NEQ predicate on the "public_key" field.
func PublicKeyNEQ(v []byte) predicate.Passkey {
	return predicate.Passkey(sql.FieldNEQ(FieldPublicKey, v))
}

// PublicKeyIn applies the In predicate on the "public_key" field.
func PublicKeyIn(vs ...[]byte) predicate.Passkey {
	return predicate.Passkey(sql.FieldIn(FieldPublicKey, vs...))
}

// PublicKeyNotIn applies the NotIn predicate on the "public_key" field.
func PublicKeyNotIn(vs ...[]byte) predicate.Passkey {
	return predicate.Passkey(sql.FieldNotIn(FieldPublicKey, vs...))
}

// PublicKeyGT applies the GT predicate on the "public_key" field.
func PublicKeyGT(v []byte) predicate.Passkey {
	return predicate.Passkey(sql.FieldGT(FieldPublicKey, v))
}

// PublicKeyGTE applies the GTE predicate on the "public_key" field.
func PublicKeyGTE(v []byte) predicate.Passkey {
	return predicate.Passkey(sql.FieldGTE(FieldPublicKey, v))
}

// PublicKeyLT applies the LT predicate on the "public_key" field.
func PublicKeyLT(v []byte) predicate.Passkey {
	return predicate.Passkey(sql.FieldLT(FieldPublicKey, v))
}

// PublicKeyLTE applies the LTE predicate on the "public_key" field.
func PublicKeyLTE(v []byte) predicate.Passkey {
	return predicate.Passkey(sql.FieldLTE(FieldPublicKey, v))
}

// SignCountEQ applies the EQ predicate on the "sign_count" field.
func SignCountEQ(v int) predicate.Passkey {
	return predicate.Passkey(sql.FieldEQ(FieldSignCount, v))
}

// SignCountNEQ applies the NEQ predicate on the "sign_count" field.
func SignCountNEQ(v int) predicate.Passkey {
	return predicate.Passkey(sql.FieldNEQ(FieldSignCount, v))
}

// SignCountIn applies the In predicate on the "sign_count" field.
func SignCountIn(vs ...int) predicate.Passkey {
	return predicate.Passkey(sql.FieldIn(FieldSignCount, vs...))
}

// SignCountNotIn applies the NotIn predicate on the "sign_count" field.
func SignCountNotIn(vs ...int) predicate.Passkey {
	return predicate.Passkey(sql.FieldNotIn(FieldSignCount, vs...))
}

// SignCountGT applies the GT predicate on the "sign_count" field.
func SignCountGT(v int) predicate.Passkey {
	return predicate.Passkey(sql.FieldGT(FieldSignCount, v))
}

// SignCountGTE applies the GTE predicate on the "sign_count" field.
func SignCountGTE(v int) predicate.Passkey {
	return predicate.Passkey(sql.FieldGTE(FieldSignCount, v))
}

// SignCountLT applies the LT predicate on the "sign_count" field.
func SignCountLT(v int) predicate.Passkey {
	return predicate.Passkey(sql.FieldLT(FieldSignCount, v))
}

// SignCountLTE applies the LTE predicate on the "sign_count" field.
func SignCountLTE(v int) predicate.Passkey {
	return predicate.Passkey(sql.FieldLTE(FieldSignCount, v))
}

// ActiveEQ applies the EQ predicate on the "active" field.
func ActiveEQ(v bool) predicate.Passkey {
	return predicate.Passkey(sql.FieldEQ(FieldActive, v))
}

// ActiveNEQ applies the NEQ predicate on the "active" field.
func ActiveNEQ(v bool) predicate.Passkey {
	return predicate.Passkey(sql.FieldNEQ(FieldActive, v))
}

// DeviceTypeEQ applies the EQ predicate on the "device_type" field.
func DeviceTypeEQ(v string) predicate.Passkey {
	return predicate.Passkey(sql.FieldEQ(FieldDeviceType, v))
}

// DeviceTypeNEQ applies the NEQ predicate on the "device_type" field.
func DeviceTypeNEQ(v string) predicate.Passkey {
	return predicate.Passkey(sql.FieldNEQ(FieldDeviceType, v))
}

// DeviceTypeIn applies the In predicate on the "device_type" field.
func DeviceTypeIn(vs ...string) predicate.Passkey {
	return predicate.Passkey(sql.FieldIn(FieldDeviceType, vs...))
}

// DeviceTypeNotIn applies the NotIn predicate on the "device_type" field.
func DeviceTypeNotIn(vs ...string) predicate.Passkey {
	return predicate.Passkey(sql.FieldNotIn(FieldDeviceType, vs...))
}

// DeviceTypeGT applies the GT predicate on the "device_type" field.
func DeviceTypeGT(v string) predicate.Passkey {
	return predicate.Passkey(sql.FieldGT(FieldDeviceType, v))
}

// DeviceTypeGTE applies the GTE predicate on the "device_type" field.
func DeviceTypeGTE(v string) predicate.Passkey {
	return predicate.Passkey(sql.FieldGTE(FieldDeviceType, v))
}

// DeviceTypeLT applies the LT predicate on the "device_type" field.
func DeviceTypeLT(v string) predicate.Passkey {
	return predicate.Passkey(sql.FieldLT(FieldDeviceType, v))
}

// DeviceTypeLTE applies the LTE predicate on the "device_type" field.
func DeviceTypeLTE(v string) predicate.Passkey {
	return predicate.Passkey(sql.FieldLTE(FieldDeviceType, v))
}

// DeviceTypeContains applies the Contains predicate on the "device_type" field.
func DeviceTypeContains(v string) predicate.Passkey {
	return predicate.Passkey(sql.FieldContains(FieldDeviceType, v))
}

// DeviceTypeHasPrefix applies the HasPrefix predicate on the "device_type" field.
func DeviceTypeHasPrefix(v string) predicate.Passkey {
	return predicate.Passkey(sql.FieldHasPrefix(FieldDeviceType, v))
}

// DeviceTypeHasSuffix applies the HasSuffix predicate on the "device_type" field.
func DeviceTypeHasSuffix(v string) predicate.Passkey {
	return predicate.Passkey(sql.FieldHasSuffix(FieldDeviceType, v))
}

// DeviceTypeIsNil applies the IsNil predicate on the "device_type" field.
func DeviceTypeIsNil() predicate.Passkey {
	return predicate.Passkey(sql.FieldIsNull(FieldDeviceType))
}

// DeviceTypeNotNil applies the NotNil predicate on the "device_type" field.
func DeviceTypeNotNil() predicate.Passkey {
	return predicate.Passkey(sql.FieldNotNull(FieldDeviceType))
}

// DeviceTypeEqualFold applies the EqualFold predicate on the "device_type" field.
func DeviceTypeEqualFold(v string) predicate.Passkey {
	return predicate.Passkey(sql.FieldEqualFold(FieldDeviceType, v))
}

// DeviceTypeContainsFold applies the ContainsFold predicate on the "device_type" field.
func DeviceTypeContainsFold(v string) predicate.Passkey {
	return predicate.Passkey(sql.FieldContainsFold(FieldDeviceType, v))
}

// AaguidEQ applies the EQ predicate on the "aaguid" field.
func AaguidEQ(v string) predicate.Passkey {
	return predicate.Passkey(sql.FieldEQ(FieldAaguid, v))
}

// AaguidNEQ applies the NEQ predicate on the "aaguid" field.
func AaguidNEQ(v string) predicate.Passkey {
	return predicate.Passkey(sql.FieldNEQ(FieldAaguid, v))
}

// AaguidIn applies the In predicate on the "aaguid" field.
func AaguidIn(vs ...string) predicate.Passkey {
	return predicate.Passkey(sql.FieldIn(FieldAaguid, vs...))
}

// AaguidNotIn applies the NotIn predicate on the "aaguid" field.
func AaguidNotIn(vs ...string) predicate.Passkey {
	return predicate.Passkey(sql.FieldNotIn(FieldAaguid, vs...))
}

// AaguidGT applies the GT predicate on the "aaguid" field.
func AaguidGT(v string) predicate.Passkey {
	return predicate.Passkey(sql.FieldGT(FieldAaguid, v))
}

// AaguidGTE applies the GTE predicate on the "aaguid" field.
func AaguidGTE(v string) predicate.Passkey {
	return predicate.Passkey(sql.FieldGTE(FieldAaguid, v))
}

// AaguidLT applies the LT predicate on the "aaguid" field.
func AaguidLT(v string) predicate.Passkey {
	return predicate.Passkey(sql.FieldLT(FieldAaguid, v))
}

// AaguidLTE applies the LTE predicate on the "aaguid" field.
func AaguidLTE(v string) predicate.Passkey {
	return predicate.Passkey(sql.FieldLTE(FieldAaguid, v))
}

// AaguidContains applies the Contains predicate on the "aaguid" field.
func AaguidContains(v string) predicate.Passkey {
	return predicate.Passkey(sql.FieldContains(FieldAaguid, v))
}

// AaguidHasPrefix applies the HasPrefix predicate on the "aaguid" field.
func AaguidHasPrefix(v string) predicate.Passkey {
	return predicate.Passkey(sql.FieldHasPrefix(FieldAaguid, v))
}

// AaguidHasSuffix applies the HasSuffix predicate on the "aaguid" field.
func AaguidHasSuffix(v string) predicate.Passkey {
	return predicate.Passkey(sql.FieldHasSuffix(FieldAaguid, v))
}

// AaguidIsNil applies the IsNil predicate on the "aaguid" field.
func AaguidIsNil() predicate.Passkey {
	return predicate.Passkey(sql.FieldIsNull(FieldAaguid))
}

// AaguidNotNil applies the NotNil predicate on the "aaguid" field.
func AaguidNotNil() predicate.Passkey {
	return predicate.Passkey(sql.FieldNotNull(FieldAaguid))
}

// AaguidEqualFold applies the EqualFold predicate on the "aaguid" field.
func AaguidEqualFold(v string) predicate.Passkey {
	return predicate.Passkey(sql.FieldEqualFold(FieldAaguid, v))
}

// AaguidContainsFold applies the ContainsFold predicate on the "aaguid" field.
func AaguidContainsFold(v string) predicate.Passkey {
	return predicate.Passkey(sql.FieldContainsFold(FieldAaguid, v))
}

// LastUsedEQ applies the EQ predicate on the "last_used" field.
func LastUsedEQ(v time.Time) predicate.Passkey {
	return predicate.Passkey(sql.FieldEQ(FieldLastUsed, v))
}

// LastUsedNEQ applies the NEQ predicate on the "last_used" field.
func LastUsedNEQ(v time.Time) predicate.Passkey {
	return predicate.Passkey(sql.FieldNEQ(FieldLastUsed, v))
}

// LastUsedIn applies the In predicate on the "last_used" field.
func LastUsedIn(vs ...time.Time) predicate.Passkey {
	return predicate.Passkey(sql.FieldIn(FieldLastUsed, vs...))
}

// LastUsedNotIn applies the NotIn predicate on the "last_used" field.
func LastUsedNotIn(vs ...time.Time) predicate.Passkey {
	return predicate.Passkey(sql.FieldNotIn(FieldLastUsed, vs...))
}

// LastUsedGT applies the GT predicate on the "last_used" field.
func LastUsedGT(v time.Time) predicate.Passkey {
	return predicate.Passkey(sql.FieldGT(FieldLastUsed, v))
}

// LastUsedGTE applies the GTE predicate on the "last_used" field.
func LastUsedGTE(v time.Time) predicate.Passkey {
	return predicate.Passkey(sql.FieldGTE(FieldLastUsed, v))
}

// LastUsedLT applies the LT predicate on the "last_used" field.
func LastUsedLT(v time.Time) predicate.Passkey {
	return predicate.Passkey(sql.FieldLT(FieldLastUsed, v))
}

// LastUsedLTE applies the LTE predicate on the "last_used" field.
func LastUsedLTE(v time.Time) predicate.Passkey {
	return predicate.Passkey(sql.FieldLTE(FieldLastUsed, v))
}

// LastUsedIsNil applies the IsNil predicate on the "last_used" field.
func LastUsedIsNil() predicate.Passkey {
	return predicate.Passkey(sql.FieldIsNull(FieldLastUsed))
}

// LastUsedNotNil applies the NotNil predicate on the "last_used" field.
func LastUsedNotNil() predicate.Passkey {
	return predicate.Passkey(sql.FieldNotNull(FieldLastUsed))
}

// TransportsIsNil applies the IsNil predicate on the "transports" field.
func TransportsIsNil() predicate.Passkey {
	return predicate.Passkey(sql.FieldIsNull(FieldTransports))
}

// TransportsNotNil applies the NotNil predicate on the "transports" field.
func TransportsNotNil() predicate.Passkey {
	return predicate.Passkey(sql.FieldNotNull(FieldTransports))
}

// AttestationIsNil applies the IsNil predicate on the "attestation" field.
func AttestationIsNil() predicate.Passkey {
	return predicate.Passkey(sql.FieldIsNull(FieldAttestation))
}

// AttestationNotNil applies the NotNil predicate on the "attestation" field.
func AttestationNotNil() predicate.Passkey {
	return predicate.Passkey(sql.FieldNotNull(FieldAttestation))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Passkey {
	return predicate.Passkey(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Passkey {
	return predicate.Passkey(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Passkey) predicate.Passkey {
	return predicate.Passkey(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Passkey) predicate.Passkey {
	return predicate.Passkey(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Passkey) predicate.Passkey {
	return predicate.Passkey(sql.NotPredicates(p))
}
