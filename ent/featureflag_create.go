// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/juicycleff/frank/ent/featureflag"
	"github.com/juicycleff/frank/ent/organizationfeature"
)

// FeatureFlagCreate is the builder for creating a FeatureFlag entity.
type FeatureFlagCreate struct {
	config
	mutation *FeatureFlagMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (ffc *FeatureFlagCreate) SetCreatedAt(t time.Time) *FeatureFlagCreate {
	ffc.mutation.SetCreatedAt(t)
	return ffc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ffc *FeatureFlagCreate) SetNillableCreatedAt(t *time.Time) *FeatureFlagCreate {
	if t != nil {
		ffc.SetCreatedAt(*t)
	}
	return ffc
}

// SetUpdatedAt sets the "updated_at" field.
func (ffc *FeatureFlagCreate) SetUpdatedAt(t time.Time) *FeatureFlagCreate {
	ffc.mutation.SetUpdatedAt(t)
	return ffc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ffc *FeatureFlagCreate) SetNillableUpdatedAt(t *time.Time) *FeatureFlagCreate {
	if t != nil {
		ffc.SetUpdatedAt(*t)
	}
	return ffc
}

// SetName sets the "name" field.
func (ffc *FeatureFlagCreate) SetName(s string) *FeatureFlagCreate {
	ffc.mutation.SetName(s)
	return ffc
}

// SetKey sets the "key" field.
func (ffc *FeatureFlagCreate) SetKey(s string) *FeatureFlagCreate {
	ffc.mutation.SetKey(s)
	return ffc
}

// SetDescription sets the "description" field.
func (ffc *FeatureFlagCreate) SetDescription(s string) *FeatureFlagCreate {
	ffc.mutation.SetDescription(s)
	return ffc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ffc *FeatureFlagCreate) SetNillableDescription(s *string) *FeatureFlagCreate {
	if s != nil {
		ffc.SetDescription(*s)
	}
	return ffc
}

// SetEnabled sets the "enabled" field.
func (ffc *FeatureFlagCreate) SetEnabled(b bool) *FeatureFlagCreate {
	ffc.mutation.SetEnabled(b)
	return ffc
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (ffc *FeatureFlagCreate) SetNillableEnabled(b *bool) *FeatureFlagCreate {
	if b != nil {
		ffc.SetEnabled(*b)
	}
	return ffc
}

// SetIsPremium sets the "is_premium" field.
func (ffc *FeatureFlagCreate) SetIsPremium(b bool) *FeatureFlagCreate {
	ffc.mutation.SetIsPremium(b)
	return ffc
}

// SetNillableIsPremium sets the "is_premium" field if the given value is not nil.
func (ffc *FeatureFlagCreate) SetNillableIsPremium(b *bool) *FeatureFlagCreate {
	if b != nil {
		ffc.SetIsPremium(*b)
	}
	return ffc
}

// SetComponent sets the "component" field.
func (ffc *FeatureFlagCreate) SetComponent(f featureflag.Component) *FeatureFlagCreate {
	ffc.mutation.SetComponent(f)
	return ffc
}

// SetID sets the "id" field.
func (ffc *FeatureFlagCreate) SetID(s string) *FeatureFlagCreate {
	ffc.mutation.SetID(s)
	return ffc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ffc *FeatureFlagCreate) SetNillableID(s *string) *FeatureFlagCreate {
	if s != nil {
		ffc.SetID(*s)
	}
	return ffc
}

// AddOrganizationIDs adds the "organizations" edge to the OrganizationFeature entity by IDs.
func (ffc *FeatureFlagCreate) AddOrganizationIDs(ids ...string) *FeatureFlagCreate {
	ffc.mutation.AddOrganizationIDs(ids...)
	return ffc
}

// AddOrganizations adds the "organizations" edges to the OrganizationFeature entity.
func (ffc *FeatureFlagCreate) AddOrganizations(o ...*OrganizationFeature) *FeatureFlagCreate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ffc.AddOrganizationIDs(ids...)
}

// Mutation returns the FeatureFlagMutation object of the builder.
func (ffc *FeatureFlagCreate) Mutation() *FeatureFlagMutation {
	return ffc.mutation
}

// Save creates the FeatureFlag in the database.
func (ffc *FeatureFlagCreate) Save(ctx context.Context) (*FeatureFlag, error) {
	ffc.defaults()
	return withHooks(ctx, ffc.sqlSave, ffc.mutation, ffc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ffc *FeatureFlagCreate) SaveX(ctx context.Context) *FeatureFlag {
	v, err := ffc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ffc *FeatureFlagCreate) Exec(ctx context.Context) error {
	_, err := ffc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ffc *FeatureFlagCreate) ExecX(ctx context.Context) {
	if err := ffc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ffc *FeatureFlagCreate) defaults() {
	if _, ok := ffc.mutation.CreatedAt(); !ok {
		v := featureflag.DefaultCreatedAt()
		ffc.mutation.SetCreatedAt(v)
	}
	if _, ok := ffc.mutation.UpdatedAt(); !ok {
		v := featureflag.DefaultUpdatedAt()
		ffc.mutation.SetUpdatedAt(v)
	}
	if _, ok := ffc.mutation.Enabled(); !ok {
		v := featureflag.DefaultEnabled
		ffc.mutation.SetEnabled(v)
	}
	if _, ok := ffc.mutation.IsPremium(); !ok {
		v := featureflag.DefaultIsPremium
		ffc.mutation.SetIsPremium(v)
	}
	if _, ok := ffc.mutation.ID(); !ok {
		v := featureflag.DefaultID()
		ffc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ffc *FeatureFlagCreate) check() error {
	if _, ok := ffc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "FeatureFlag.created_at"`)}
	}
	if _, ok := ffc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "FeatureFlag.updated_at"`)}
	}
	if _, ok := ffc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "FeatureFlag.name"`)}
	}
	if v, ok := ffc.mutation.Name(); ok {
		if err := featureflag.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "FeatureFlag.name": %w`, err)}
		}
	}
	if _, ok := ffc.mutation.Key(); !ok {
		return &ValidationError{Name: "key", err: errors.New(`ent: missing required field "FeatureFlag.key"`)}
	}
	if v, ok := ffc.mutation.Key(); ok {
		if err := featureflag.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf(`ent: validator failed for field "FeatureFlag.key": %w`, err)}
		}
	}
	if _, ok := ffc.mutation.Enabled(); !ok {
		return &ValidationError{Name: "enabled", err: errors.New(`ent: missing required field "FeatureFlag.enabled"`)}
	}
	if _, ok := ffc.mutation.IsPremium(); !ok {
		return &ValidationError{Name: "is_premium", err: errors.New(`ent: missing required field "FeatureFlag.is_premium"`)}
	}
	if _, ok := ffc.mutation.Component(); !ok {
		return &ValidationError{Name: "component", err: errors.New(`ent: missing required field "FeatureFlag.component"`)}
	}
	if v, ok := ffc.mutation.Component(); ok {
		if err := featureflag.ComponentValidator(v); err != nil {
			return &ValidationError{Name: "component", err: fmt.Errorf(`ent: validator failed for field "FeatureFlag.component": %w`, err)}
		}
	}
	return nil
}

func (ffc *FeatureFlagCreate) sqlSave(ctx context.Context) (*FeatureFlag, error) {
	if err := ffc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ffc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ffc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected FeatureFlag.ID type: %T", _spec.ID.Value)
		}
	}
	ffc.mutation.id = &_node.ID
	ffc.mutation.done = true
	return _node, nil
}

func (ffc *FeatureFlagCreate) createSpec() (*FeatureFlag, *sqlgraph.CreateSpec) {
	var (
		_node = &FeatureFlag{config: ffc.config}
		_spec = sqlgraph.NewCreateSpec(featureflag.Table, sqlgraph.NewFieldSpec(featureflag.FieldID, field.TypeString))
	)
	if id, ok := ffc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ffc.mutation.CreatedAt(); ok {
		_spec.SetField(featureflag.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ffc.mutation.UpdatedAt(); ok {
		_spec.SetField(featureflag.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ffc.mutation.Name(); ok {
		_spec.SetField(featureflag.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ffc.mutation.Key(); ok {
		_spec.SetField(featureflag.FieldKey, field.TypeString, value)
		_node.Key = value
	}
	if value, ok := ffc.mutation.Description(); ok {
		_spec.SetField(featureflag.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := ffc.mutation.Enabled(); ok {
		_spec.SetField(featureflag.FieldEnabled, field.TypeBool, value)
		_node.Enabled = value
	}
	if value, ok := ffc.mutation.IsPremium(); ok {
		_spec.SetField(featureflag.FieldIsPremium, field.TypeBool, value)
		_node.IsPremium = value
	}
	if value, ok := ffc.mutation.Component(); ok {
		_spec.SetField(featureflag.FieldComponent, field.TypeEnum, value)
		_node.Component = value
	}
	if nodes := ffc.mutation.OrganizationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   featureflag.OrganizationsTable,
			Columns: []string{featureflag.OrganizationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organizationfeature.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// FeatureFlagCreateBulk is the builder for creating many FeatureFlag entities in bulk.
type FeatureFlagCreateBulk struct {
	config
	err      error
	builders []*FeatureFlagCreate
}

// Save creates the FeatureFlag entities in the database.
func (ffcb *FeatureFlagCreateBulk) Save(ctx context.Context) ([]*FeatureFlag, error) {
	if ffcb.err != nil {
		return nil, ffcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ffcb.builders))
	nodes := make([]*FeatureFlag, len(ffcb.builders))
	mutators := make([]Mutator, len(ffcb.builders))
	for i := range ffcb.builders {
		func(i int, root context.Context) {
			builder := ffcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FeatureFlagMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ffcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ffcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ffcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ffcb *FeatureFlagCreateBulk) SaveX(ctx context.Context) []*FeatureFlag {
	v, err := ffcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ffcb *FeatureFlagCreateBulk) Exec(ctx context.Context) error {
	_, err := ffcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ffcb *FeatureFlagCreateBulk) ExecX(ctx context.Context) {
	if err := ffcb.Exec(ctx); err != nil {
		panic(err)
	}
}
