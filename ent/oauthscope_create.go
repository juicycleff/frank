// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/juicycleff/frank/ent/oauthauthorization"
	"github.com/juicycleff/frank/ent/oauthclient"
	"github.com/juicycleff/frank/ent/oauthscope"
	"github.com/juicycleff/frank/ent/oauthtoken"
)

// OAuthScopeCreate is the builder for creating a OAuthScope entity.
type OAuthScopeCreate struct {
	config
	mutation *OAuthScopeMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (osc *OAuthScopeCreate) SetCreatedAt(t time.Time) *OAuthScopeCreate {
	osc.mutation.SetCreatedAt(t)
	return osc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (osc *OAuthScopeCreate) SetNillableCreatedAt(t *time.Time) *OAuthScopeCreate {
	if t != nil {
		osc.SetCreatedAt(*t)
	}
	return osc
}

// SetUpdatedAt sets the "updated_at" field.
func (osc *OAuthScopeCreate) SetUpdatedAt(t time.Time) *OAuthScopeCreate {
	osc.mutation.SetUpdatedAt(t)
	return osc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (osc *OAuthScopeCreate) SetNillableUpdatedAt(t *time.Time) *OAuthScopeCreate {
	if t != nil {
		osc.SetUpdatedAt(*t)
	}
	return osc
}

// SetName sets the "name" field.
func (osc *OAuthScopeCreate) SetName(s string) *OAuthScopeCreate {
	osc.mutation.SetName(s)
	return osc
}

// SetDescription sets the "description" field.
func (osc *OAuthScopeCreate) SetDescription(s string) *OAuthScopeCreate {
	osc.mutation.SetDescription(s)
	return osc
}

// SetDefaultScope sets the "default_scope" field.
func (osc *OAuthScopeCreate) SetDefaultScope(b bool) *OAuthScopeCreate {
	osc.mutation.SetDefaultScope(b)
	return osc
}

// SetNillableDefaultScope sets the "default_scope" field if the given value is not nil.
func (osc *OAuthScopeCreate) SetNillableDefaultScope(b *bool) *OAuthScopeCreate {
	if b != nil {
		osc.SetDefaultScope(*b)
	}
	return osc
}

// SetPublic sets the "public" field.
func (osc *OAuthScopeCreate) SetPublic(b bool) *OAuthScopeCreate {
	osc.mutation.SetPublic(b)
	return osc
}

// SetNillablePublic sets the "public" field if the given value is not nil.
func (osc *OAuthScopeCreate) SetNillablePublic(b *bool) *OAuthScopeCreate {
	if b != nil {
		osc.SetPublic(*b)
	}
	return osc
}

// SetID sets the "id" field.
func (osc *OAuthScopeCreate) SetID(s string) *OAuthScopeCreate {
	osc.mutation.SetID(s)
	return osc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (osc *OAuthScopeCreate) SetNillableID(s *string) *OAuthScopeCreate {
	if s != nil {
		osc.SetID(*s)
	}
	return osc
}

// AddClientIDs adds the "clients" edge to the OAuthClient entity by IDs.
func (osc *OAuthScopeCreate) AddClientIDs(ids ...string) *OAuthScopeCreate {
	osc.mutation.AddClientIDs(ids...)
	return osc
}

// AddClients adds the "clients" edges to the OAuthClient entity.
func (osc *OAuthScopeCreate) AddClients(o ...*OAuthClient) *OAuthScopeCreate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return osc.AddClientIDs(ids...)
}

// AddTokenIDs adds the "tokens" edge to the OAuthToken entity by IDs.
func (osc *OAuthScopeCreate) AddTokenIDs(ids ...string) *OAuthScopeCreate {
	osc.mutation.AddTokenIDs(ids...)
	return osc
}

// AddTokens adds the "tokens" edges to the OAuthToken entity.
func (osc *OAuthScopeCreate) AddTokens(o ...*OAuthToken) *OAuthScopeCreate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return osc.AddTokenIDs(ids...)
}

// AddAuthorizationIDs adds the "authorizations" edge to the OAuthAuthorization entity by IDs.
func (osc *OAuthScopeCreate) AddAuthorizationIDs(ids ...string) *OAuthScopeCreate {
	osc.mutation.AddAuthorizationIDs(ids...)
	return osc
}

// AddAuthorizations adds the "authorizations" edges to the OAuthAuthorization entity.
func (osc *OAuthScopeCreate) AddAuthorizations(o ...*OAuthAuthorization) *OAuthScopeCreate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return osc.AddAuthorizationIDs(ids...)
}

// Mutation returns the OAuthScopeMutation object of the builder.
func (osc *OAuthScopeCreate) Mutation() *OAuthScopeMutation {
	return osc.mutation
}

// Save creates the OAuthScope in the database.
func (osc *OAuthScopeCreate) Save(ctx context.Context) (*OAuthScope, error) {
	osc.defaults()
	return withHooks(ctx, osc.sqlSave, osc.mutation, osc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (osc *OAuthScopeCreate) SaveX(ctx context.Context) *OAuthScope {
	v, err := osc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (osc *OAuthScopeCreate) Exec(ctx context.Context) error {
	_, err := osc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (osc *OAuthScopeCreate) ExecX(ctx context.Context) {
	if err := osc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (osc *OAuthScopeCreate) defaults() {
	if _, ok := osc.mutation.CreatedAt(); !ok {
		v := oauthscope.DefaultCreatedAt()
		osc.mutation.SetCreatedAt(v)
	}
	if _, ok := osc.mutation.UpdatedAt(); !ok {
		v := oauthscope.DefaultUpdatedAt()
		osc.mutation.SetUpdatedAt(v)
	}
	if _, ok := osc.mutation.DefaultScope(); !ok {
		v := oauthscope.DefaultDefaultScope
		osc.mutation.SetDefaultScope(v)
	}
	if _, ok := osc.mutation.Public(); !ok {
		v := oauthscope.DefaultPublic
		osc.mutation.SetPublic(v)
	}
	if _, ok := osc.mutation.ID(); !ok {
		v := oauthscope.DefaultID()
		osc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (osc *OAuthScopeCreate) check() error {
	if _, ok := osc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "OAuthScope.created_at"`)}
	}
	if _, ok := osc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "OAuthScope.updated_at"`)}
	}
	if _, ok := osc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "OAuthScope.name"`)}
	}
	if v, ok := osc.mutation.Name(); ok {
		if err := oauthscope.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "OAuthScope.name": %w`, err)}
		}
	}
	if _, ok := osc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "OAuthScope.description"`)}
	}
	if v, ok := osc.mutation.Description(); ok {
		if err := oauthscope.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "OAuthScope.description": %w`, err)}
		}
	}
	if _, ok := osc.mutation.DefaultScope(); !ok {
		return &ValidationError{Name: "default_scope", err: errors.New(`ent: missing required field "OAuthScope.default_scope"`)}
	}
	if _, ok := osc.mutation.Public(); !ok {
		return &ValidationError{Name: "public", err: errors.New(`ent: missing required field "OAuthScope.public"`)}
	}
	return nil
}

func (osc *OAuthScopeCreate) sqlSave(ctx context.Context) (*OAuthScope, error) {
	if err := osc.check(); err != nil {
		return nil, err
	}
	_node, _spec := osc.createSpec()
	if err := sqlgraph.CreateNode(ctx, osc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected OAuthScope.ID type: %T", _spec.ID.Value)
		}
	}
	osc.mutation.id = &_node.ID
	osc.mutation.done = true
	return _node, nil
}

func (osc *OAuthScopeCreate) createSpec() (*OAuthScope, *sqlgraph.CreateSpec) {
	var (
		_node = &OAuthScope{config: osc.config}
		_spec = sqlgraph.NewCreateSpec(oauthscope.Table, sqlgraph.NewFieldSpec(oauthscope.FieldID, field.TypeString))
	)
	if id, ok := osc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := osc.mutation.CreatedAt(); ok {
		_spec.SetField(oauthscope.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := osc.mutation.UpdatedAt(); ok {
		_spec.SetField(oauthscope.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := osc.mutation.Name(); ok {
		_spec.SetField(oauthscope.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := osc.mutation.Description(); ok {
		_spec.SetField(oauthscope.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := osc.mutation.DefaultScope(); ok {
		_spec.SetField(oauthscope.FieldDefaultScope, field.TypeBool, value)
		_node.DefaultScope = value
	}
	if value, ok := osc.mutation.Public(); ok {
		_spec.SetField(oauthscope.FieldPublic, field.TypeBool, value)
		_node.Public = value
	}
	if nodes := osc.mutation.ClientsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   oauthscope.ClientsTable,
			Columns: oauthscope.ClientsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthclient.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := osc.mutation.TokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   oauthscope.TokensTable,
			Columns: oauthscope.TokensPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthtoken.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := osc.mutation.AuthorizationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   oauthscope.AuthorizationsTable,
			Columns: oauthscope.AuthorizationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthauthorization.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OAuthScopeCreateBulk is the builder for creating many OAuthScope entities in bulk.
type OAuthScopeCreateBulk struct {
	config
	err      error
	builders []*OAuthScopeCreate
}

// Save creates the OAuthScope entities in the database.
func (oscb *OAuthScopeCreateBulk) Save(ctx context.Context) ([]*OAuthScope, error) {
	if oscb.err != nil {
		return nil, oscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(oscb.builders))
	nodes := make([]*OAuthScope, len(oscb.builders))
	mutators := make([]Mutator, len(oscb.builders))
	for i := range oscb.builders {
		func(i int, root context.Context) {
			builder := oscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OAuthScopeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, oscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, oscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, oscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (oscb *OAuthScopeCreateBulk) SaveX(ctx context.Context) []*OAuthScope {
	v, err := oscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oscb *OAuthScopeCreateBulk) Exec(ctx context.Context) error {
	_, err := oscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oscb *OAuthScopeCreateBulk) ExecX(ctx context.Context) {
	if err := oscb.Exec(ctx); err != nil {
		panic(err)
	}
}
