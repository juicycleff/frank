// Copyright 2023-present XRaph LLC. All rights reserved.
// This source code is licensed under the XRaph LLC license found
// in the LICENSE file in the root directory of this source tree.
// Code generated by ent, DO NOT EDIT.

package organization

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/rs/xid"
	
)

const (
	// Label holds the string label denoting the organization type in the database.
	Label = "organization"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldSlug holds the string denoting the slug field in the database.
	FieldSlug = "slug"
	// FieldDomains holds the string denoting the domains field in the database.
	FieldDomains = "domains"
	// FieldVerifiedDomains holds the string denoting the verified_domains field in the database.
	FieldVerifiedDomains = "verified_domains"
	// FieldDomain holds the string denoting the domain field in the database.
	FieldDomain = "domain"
	// FieldLogoURL holds the string denoting the logo_url field in the database.
	FieldLogoURL = "logo_url"
	// FieldPlan holds the string denoting the plan field in the database.
	FieldPlan = "plan"
	// FieldActive holds the string denoting the active field in the database.
	FieldActive = "active"
	// FieldMetadata holds the string denoting the metadata field in the database.
	FieldMetadata = "metadata"
	// FieldTrialEndsAt holds the string denoting the trial_ends_at field in the database.
	FieldTrialEndsAt = "trial_ends_at"
	// FieldTrialUsed holds the string denoting the trial_used field in the database.
	FieldTrialUsed = "trial_used"
	// FieldOwnerID holds the string denoting the owner_id field in the database.
	FieldOwnerID = "owner_id"
	// FieldOrgType holds the string denoting the org_type field in the database.
	FieldOrgType = "org_type"
	// FieldIsPlatformOrganization holds the string denoting the is_platform_organization field in the database.
	FieldIsPlatformOrganization = "is_platform_organization"
	// FieldExternalUserLimit holds the string denoting the external_user_limit field in the database.
	FieldExternalUserLimit = "external_user_limit"
	// FieldEndUserLimit holds the string denoting the end_user_limit field in the database.
	FieldEndUserLimit = "end_user_limit"
	// FieldSSOEnabled holds the string denoting the sso_enabled field in the database.
	FieldSSOEnabled = "sso_enabled"
	// FieldSSODomain holds the string denoting the sso_domain field in the database.
	FieldSSODomain = "sso_domain"
	// FieldSubscriptionID holds the string denoting the subscription_id field in the database.
	FieldSubscriptionID = "subscription_id"
	// FieldCustomerID holds the string denoting the customer_id field in the database.
	FieldCustomerID = "customer_id"
	// FieldSubscriptionStatus holds the string denoting the subscription_status field in the database.
	FieldSubscriptionStatus = "subscription_status"
	// FieldAuthServiceEnabled holds the string denoting the auth_service_enabled field in the database.
	FieldAuthServiceEnabled = "auth_service_enabled"
	// FieldAuthConfig holds the string denoting the auth_config field in the database.
	FieldAuthConfig = "auth_config"
	// FieldAuthDomain holds the string denoting the auth_domain field in the database.
	FieldAuthDomain = "auth_domain"
	// FieldAPIRequestLimit holds the string denoting the api_request_limit field in the database.
	FieldAPIRequestLimit = "api_request_limit"
	// FieldAPIRequestsUsed holds the string denoting the api_requests_used field in the database.
	FieldAPIRequestsUsed = "api_requests_used"
	// FieldCurrentExternalUsers holds the string denoting the current_external_users field in the database.
	FieldCurrentExternalUsers = "current_external_users"
	// FieldCurrentEndUsers holds the string denoting the current_end_users field in the database.
	FieldCurrentEndUsers = "current_end_users"
	// EdgeUsers holds the string denoting the users edge name in mutations.
	EdgeUsers = "users"
	// EdgeMemberships holds the string denoting the memberships edge name in mutations.
	EdgeMemberships = "memberships"
	// EdgeSmsTemplates holds the string denoting the sms_templates edge name in mutations.
	EdgeSmsTemplates = "sms_templates"
	// EdgeEmailTemplates holds the string denoting the email_templates edge name in mutations.
	EdgeEmailTemplates = "email_templates"
	// EdgeAPIKeys holds the string denoting the api_keys edge name in mutations.
	EdgeAPIKeys = "api_keys"
	// EdgeWebhooks holds the string denoting the webhooks edge name in mutations.
	EdgeWebhooks = "webhooks"
	// EdgeFeatureFlags holds the string denoting the feature_flags edge name in mutations.
	EdgeFeatureFlags = "feature_flags"
	// EdgeIdentityProviders holds the string denoting the identity_providers edge name in mutations.
	EdgeIdentityProviders = "identity_providers"
	// EdgeOauthClients holds the string denoting the oauth_clients edge name in mutations.
	EdgeOauthClients = "oauth_clients"
	// EdgeRoles holds the string denoting the roles edge name in mutations.
	EdgeRoles = "roles"
	// EdgeUserRoleContexts holds the string denoting the user_role_contexts edge name in mutations.
	EdgeUserRoleContexts = "user_role_contexts"
	// EdgeUserPermissionContexts holds the string denoting the user_permission_contexts edge name in mutations.
	EdgeUserPermissionContexts = "user_permission_contexts"
	// EdgeAuditLogs holds the string denoting the audit_logs edge name in mutations.
	EdgeAuditLogs = "audit_logs"
	// EdgeOrganizationProviders holds the string denoting the organization_providers edge name in mutations.
	EdgeOrganizationProviders = "organization_providers"
	// EdgeActivities holds the string denoting the activities edge name in mutations.
	EdgeActivities = "activities"
	// Table holds the table name of the organization in the database.
	Table = "organizations"
	// UsersTable is the table that holds the users relation/edge.
	UsersTable = "users"
	// UsersInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UsersInverseTable = "users"
	// UsersColumn is the table column denoting the users relation/edge.
	UsersColumn = "organization_id"
	// MembershipsTable is the table that holds the memberships relation/edge.
	MembershipsTable = "memberships"
	// MembershipsInverseTable is the table name for the Membership entity.
	// It exists in this package in order to avoid circular dependency with the "membership" package.
	MembershipsInverseTable = "memberships"
	// MembershipsColumn is the table column denoting the memberships relation/edge.
	MembershipsColumn = "organization_id"
	// SmsTemplatesTable is the table that holds the sms_templates relation/edge.
	SmsTemplatesTable = "sms_templates"
	// SmsTemplatesInverseTable is the table name for the SMSTemplate entity.
	// It exists in this package in order to avoid circular dependency with the "smstemplate" package.
	SmsTemplatesInverseTable = "sms_templates"
	// SmsTemplatesColumn is the table column denoting the sms_templates relation/edge.
	SmsTemplatesColumn = "organization_id"
	// EmailTemplatesTable is the table that holds the email_templates relation/edge.
	EmailTemplatesTable = "email_templates"
	// EmailTemplatesInverseTable is the table name for the EmailTemplate entity.
	// It exists in this package in order to avoid circular dependency with the "emailtemplate" package.
	EmailTemplatesInverseTable = "email_templates"
	// EmailTemplatesColumn is the table column denoting the email_templates relation/edge.
	EmailTemplatesColumn = "organization_id"
	// APIKeysTable is the table that holds the api_keys relation/edge.
	APIKeysTable = "api_keys"
	// APIKeysInverseTable is the table name for the ApiKey entity.
	// It exists in this package in order to avoid circular dependency with the "apikey" package.
	APIKeysInverseTable = "api_keys"
	// APIKeysColumn is the table column denoting the api_keys relation/edge.
	APIKeysColumn = "organization_id"
	// WebhooksTable is the table that holds the webhooks relation/edge.
	WebhooksTable = "webhooks"
	// WebhooksInverseTable is the table name for the Webhook entity.
	// It exists in this package in order to avoid circular dependency with the "webhook" package.
	WebhooksInverseTable = "webhooks"
	// WebhooksColumn is the table column denoting the webhooks relation/edge.
	WebhooksColumn = "organization_id"
	// FeatureFlagsTable is the table that holds the feature_flags relation/edge.
	FeatureFlagsTable = "organization_features"
	// FeatureFlagsInverseTable is the table name for the OrganizationFeature entity.
	// It exists in this package in order to avoid circular dependency with the "organizationfeature" package.
	FeatureFlagsInverseTable = "organization_features"
	// FeatureFlagsColumn is the table column denoting the feature_flags relation/edge.
	FeatureFlagsColumn = "organization_id"
	// IdentityProvidersTable is the table that holds the identity_providers relation/edge.
	IdentityProvidersTable = "identity_providers"
	// IdentityProvidersInverseTable is the table name for the IdentityProvider entity.
	// It exists in this package in order to avoid circular dependency with the "identityprovider" package.
	IdentityProvidersInverseTable = "identity_providers"
	// IdentityProvidersColumn is the table column denoting the identity_providers relation/edge.
	IdentityProvidersColumn = "organization_id"
	// OauthClientsTable is the table that holds the oauth_clients relation/edge.
	OauthClientsTable = "oauth_clients"
	// OauthClientsInverseTable is the table name for the OAuthClient entity.
	// It exists in this package in order to avoid circular dependency with the "oauthclient" package.
	OauthClientsInverseTable = "oauth_clients"
	// OauthClientsColumn is the table column denoting the oauth_clients relation/edge.
	OauthClientsColumn = "organization_id"
	// RolesTable is the table that holds the roles relation/edge.
	RolesTable = "roles"
	// RolesInverseTable is the table name for the Role entity.
	// It exists in this package in order to avoid circular dependency with the "role" package.
	RolesInverseTable = "roles"
	// RolesColumn is the table column denoting the roles relation/edge.
	RolesColumn = "organization_id"
	// UserRoleContextsTable is the table that holds the user_role_contexts relation/edge.
	UserRoleContextsTable = "user_roles"
	// UserRoleContextsInverseTable is the table name for the UserRole entity.
	// It exists in this package in order to avoid circular dependency with the "userrole" package.
	UserRoleContextsInverseTable = "user_roles"
	// UserRoleContextsColumn is the table column denoting the user_role_contexts relation/edge.
	UserRoleContextsColumn = "context_id"
	// UserPermissionContextsTable is the table that holds the user_permission_contexts relation/edge.
	UserPermissionContextsTable = "user_permissions"
	// UserPermissionContextsInverseTable is the table name for the UserPermission entity.
	// It exists in this package in order to avoid circular dependency with the "userpermission" package.
	UserPermissionContextsInverseTable = "user_permissions"
	// UserPermissionContextsColumn is the table column denoting the user_permission_contexts relation/edge.
	UserPermissionContextsColumn = "context_id"
	// AuditLogsTable is the table that holds the audit_logs relation/edge.
	AuditLogsTable = "audits"
	// AuditLogsInverseTable is the table name for the Audit entity.
	// It exists in this package in order to avoid circular dependency with the "audit" package.
	AuditLogsInverseTable = "audits"
	// AuditLogsColumn is the table column denoting the audit_logs relation/edge.
	AuditLogsColumn = "organization_id"
	// OrganizationProvidersTable is the table that holds the organization_providers relation/edge.
	OrganizationProvidersTable = "organization_providers"
	// OrganizationProvidersInverseTable is the table name for the OrganizationProvider entity.
	// It exists in this package in order to avoid circular dependency with the "organizationprovider" package.
	OrganizationProvidersInverseTable = "organization_providers"
	// OrganizationProvidersColumn is the table column denoting the organization_providers relation/edge.
	OrganizationProvidersColumn = "organization_id"
	// ActivitiesTable is the table that holds the activities relation/edge.
	ActivitiesTable = "activities"
	// ActivitiesInverseTable is the table name for the Activity entity.
	// It exists in this package in order to avoid circular dependency with the "activity" package.
	ActivitiesInverseTable = "activities"
	// ActivitiesColumn is the table column denoting the activities relation/edge.
	ActivitiesColumn = "organization_id"
)

// Columns holds all SQL columns for organization fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldName,
	FieldSlug,
	FieldDomains,
	FieldVerifiedDomains,
	FieldDomain,
	FieldLogoURL,
	FieldPlan,
	FieldActive,
	FieldMetadata,
	FieldTrialEndsAt,
	FieldTrialUsed,
	FieldOwnerID,
	FieldOrgType,
	FieldIsPlatformOrganization,
	FieldExternalUserLimit,
	FieldEndUserLimit,
	FieldSSOEnabled,
	FieldSSODomain,
	FieldSubscriptionID,
	FieldCustomerID,
	FieldSubscriptionStatus,
	FieldAuthServiceEnabled,
	FieldAuthConfig,
	FieldAuthDomain,
	FieldAPIRequestLimit,
	FieldAPIRequestsUsed,
	FieldCurrentExternalUsers,
	FieldCurrentEndUsers,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// SlugValidator is a validator for the "slug" field. It is called by the builders before save.
	SlugValidator func(string) error
	// DefaultPlan holds the default value on creation for the "plan" field.
	DefaultPlan string
	// DefaultActive holds the default value on creation for the "active" field.
	DefaultActive bool
	// DefaultTrialUsed holds the default value on creation for the "trial_used" field.
	DefaultTrialUsed bool
	// DefaultIsPlatformOrganization holds the default value on creation for the "is_platform_organization" field.
	DefaultIsPlatformOrganization bool
	// DefaultExternalUserLimit holds the default value on creation for the "external_user_limit" field.
	DefaultExternalUserLimit int
	// DefaultEndUserLimit holds the default value on creation for the "end_user_limit" field.
	DefaultEndUserLimit int
	// DefaultSSOEnabled holds the default value on creation for the "sso_enabled" field.
	DefaultSSOEnabled bool
	// DefaultAuthServiceEnabled holds the default value on creation for the "auth_service_enabled" field.
	DefaultAuthServiceEnabled bool
	// DefaultAPIRequestLimit holds the default value on creation for the "api_request_limit" field.
	DefaultAPIRequestLimit int
	// DefaultAPIRequestsUsed holds the default value on creation for the "api_requests_used" field.
	DefaultAPIRequestsUsed int
	// DefaultCurrentExternalUsers holds the default value on creation for the "current_external_users" field.
	DefaultCurrentExternalUsers int
	// DefaultCurrentEndUsers holds the default value on creation for the "current_end_users" field.
	DefaultCurrentEndUsers int
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() xid.ID
)

const DefaultOrgType model.OrgType = "customer"

// OrgTypeValidator is a validator for the "org_type" field enum values. It is called by the builders before save.
func OrgTypeValidator(ot model.OrgType) error {
	switch ot.String() {
	case "platform", "customer":
		return nil
	default:
		return fmt.Errorf("organization: invalid enum value for org_type field: %q", ot)
	}
}

// SubscriptionStatus defines the type for the "subscription_status" enum field.
type SubscriptionStatus string

// SubscriptionStatusTrialing is the default value of the SubscriptionStatus enum.
const DefaultSubscriptionStatus = SubscriptionStatusTrialing

// SubscriptionStatus values.
const (
	SubscriptionStatusActive   SubscriptionStatus = "active"
	SubscriptionStatusTrialing SubscriptionStatus = "trialing"
	SubscriptionStatusPastDue  SubscriptionStatus = "past_due"
	SubscriptionStatusCanceled SubscriptionStatus = "canceled"
	SubscriptionStatusUnpaid   SubscriptionStatus = "unpaid"
)

func (ss SubscriptionStatus) String() string {
	return string(ss)
}

// SubscriptionStatusValidator is a validator for the "subscription_status" field enum values. It is called by the builders before save.
func SubscriptionStatusValidator(ss SubscriptionStatus) error {
	switch ss {
	case SubscriptionStatusActive, SubscriptionStatusTrialing, SubscriptionStatusPastDue, SubscriptionStatusCanceled, SubscriptionStatusUnpaid:
		return nil
	default:
		return fmt.Errorf("organization: invalid enum value for subscription_status field: %q", ss)
	}
}

// OrderOption defines the ordering options for the Organization queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// BySlug orders the results by the slug field.
func BySlug(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSlug, opts...).ToFunc()
}

// ByDomain orders the results by the domain field.
func ByDomain(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDomain, opts...).ToFunc()
}

// ByLogoURL orders the results by the logo_url field.
func ByLogoURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLogoURL, opts...).ToFunc()
}

// ByPlan orders the results by the plan field.
func ByPlan(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPlan, opts...).ToFunc()
}

// ByActive orders the results by the active field.
func ByActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActive, opts...).ToFunc()
}

// ByTrialEndsAt orders the results by the trial_ends_at field.
func ByTrialEndsAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTrialEndsAt, opts...).ToFunc()
}

// ByTrialUsed orders the results by the trial_used field.
func ByTrialUsed(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTrialUsed, opts...).ToFunc()
}

// ByOwnerID orders the results by the owner_id field.
func ByOwnerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOwnerID, opts...).ToFunc()
}

// ByOrgType orders the results by the org_type field.
func ByOrgType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrgType, opts...).ToFunc()
}

// ByIsPlatformOrganization orders the results by the is_platform_organization field.
func ByIsPlatformOrganization(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsPlatformOrganization, opts...).ToFunc()
}

// ByExternalUserLimit orders the results by the external_user_limit field.
func ByExternalUserLimit(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExternalUserLimit, opts...).ToFunc()
}

// ByEndUserLimit orders the results by the end_user_limit field.
func ByEndUserLimit(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndUserLimit, opts...).ToFunc()
}

// BySSOEnabled orders the results by the sso_enabled field.
func BySSOEnabled(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSSOEnabled, opts...).ToFunc()
}

// BySSODomain orders the results by the sso_domain field.
func BySSODomain(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSSODomain, opts...).ToFunc()
}

// BySubscriptionID orders the results by the subscription_id field.
func BySubscriptionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubscriptionID, opts...).ToFunc()
}

// ByCustomerID orders the results by the customer_id field.
func ByCustomerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCustomerID, opts...).ToFunc()
}

// BySubscriptionStatus orders the results by the subscription_status field.
func BySubscriptionStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubscriptionStatus, opts...).ToFunc()
}

// ByAuthServiceEnabled orders the results by the auth_service_enabled field.
func ByAuthServiceEnabled(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAuthServiceEnabled, opts...).ToFunc()
}

// ByAuthDomain orders the results by the auth_domain field.
func ByAuthDomain(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAuthDomain, opts...).ToFunc()
}

// ByAPIRequestLimit orders the results by the api_request_limit field.
func ByAPIRequestLimit(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAPIRequestLimit, opts...).ToFunc()
}

// ByAPIRequestsUsed orders the results by the api_requests_used field.
func ByAPIRequestsUsed(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAPIRequestsUsed, opts...).ToFunc()
}

// ByCurrentExternalUsers orders the results by the current_external_users field.
func ByCurrentExternalUsers(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrentExternalUsers, opts...).ToFunc()
}

// ByCurrentEndUsers orders the results by the current_end_users field.
func ByCurrentEndUsers(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrentEndUsers, opts...).ToFunc()
}

// ByUsersCount orders the results by users count.
func ByUsersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUsersStep(), opts...)
	}
}

// ByUsers orders the results by users terms.
func ByUsers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUsersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByMembershipsCount orders the results by memberships count.
func ByMembershipsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMembershipsStep(), opts...)
	}
}

// ByMemberships orders the results by memberships terms.
func ByMemberships(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMembershipsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySmsTemplatesCount orders the results by sms_templates count.
func BySmsTemplatesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSmsTemplatesStep(), opts...)
	}
}

// BySmsTemplates orders the results by sms_templates terms.
func BySmsTemplates(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSmsTemplatesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByEmailTemplatesCount orders the results by email_templates count.
func ByEmailTemplatesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEmailTemplatesStep(), opts...)
	}
}

// ByEmailTemplates orders the results by email_templates terms.
func ByEmailTemplates(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEmailTemplatesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAPIKeysCount orders the results by api_keys count.
func ByAPIKeysCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAPIKeysStep(), opts...)
	}
}

// ByAPIKeys orders the results by api_keys terms.
func ByAPIKeys(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAPIKeysStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByWebhooksCount orders the results by webhooks count.
func ByWebhooksCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newWebhooksStep(), opts...)
	}
}

// ByWebhooks orders the results by webhooks terms.
func ByWebhooks(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newWebhooksStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByFeatureFlagsCount orders the results by feature_flags count.
func ByFeatureFlagsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newFeatureFlagsStep(), opts...)
	}
}

// ByFeatureFlags orders the results by feature_flags terms.
func ByFeatureFlags(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFeatureFlagsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByIdentityProvidersCount orders the results by identity_providers count.
func ByIdentityProvidersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newIdentityProvidersStep(), opts...)
	}
}

// ByIdentityProviders orders the results by identity_providers terms.
func ByIdentityProviders(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newIdentityProvidersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByOauthClientsCount orders the results by oauth_clients count.
func ByOauthClientsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOauthClientsStep(), opts...)
	}
}

// ByOauthClients orders the results by oauth_clients terms.
func ByOauthClients(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOauthClientsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRolesCount orders the results by roles count.
func ByRolesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRolesStep(), opts...)
	}
}

// ByRoles orders the results by roles terms.
func ByRoles(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRolesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUserRoleContextsCount orders the results by user_role_contexts count.
func ByUserRoleContextsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUserRoleContextsStep(), opts...)
	}
}

// ByUserRoleContexts orders the results by user_role_contexts terms.
func ByUserRoleContexts(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserRoleContextsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUserPermissionContextsCount orders the results by user_permission_contexts count.
func ByUserPermissionContextsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUserPermissionContextsStep(), opts...)
	}
}

// ByUserPermissionContexts orders the results by user_permission_contexts terms.
func ByUserPermissionContexts(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserPermissionContextsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAuditLogsCount orders the results by audit_logs count.
func ByAuditLogsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAuditLogsStep(), opts...)
	}
}

// ByAuditLogs orders the results by audit_logs terms.
func ByAuditLogs(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAuditLogsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByOrganizationProvidersCount orders the results by organization_providers count.
func ByOrganizationProvidersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOrganizationProvidersStep(), opts...)
	}
}

// ByOrganizationProviders orders the results by organization_providers terms.
func ByOrganizationProviders(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrganizationProvidersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByActivitiesCount orders the results by activities count.
func ByActivitiesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newActivitiesStep(), opts...)
	}
}

// ByActivities orders the results by activities terms.
func ByActivities(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newActivitiesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newUsersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UsersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, UsersTable, UsersColumn),
	)
}
func newMembershipsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MembershipsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, MembershipsTable, MembershipsColumn),
	)
}
func newSmsTemplatesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SmsTemplatesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SmsTemplatesTable, SmsTemplatesColumn),
	)
}
func newEmailTemplatesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EmailTemplatesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, EmailTemplatesTable, EmailTemplatesColumn),
	)
}
func newAPIKeysStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(APIKeysInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, APIKeysTable, APIKeysColumn),
	)
}
func newWebhooksStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(WebhooksInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, WebhooksTable, WebhooksColumn),
	)
}
func newFeatureFlagsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FeatureFlagsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, FeatureFlagsTable, FeatureFlagsColumn),
	)
}
func newIdentityProvidersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(IdentityProvidersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, IdentityProvidersTable, IdentityProvidersColumn),
	)
}
func newOauthClientsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OauthClientsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, OauthClientsTable, OauthClientsColumn),
	)
}
func newRolesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RolesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RolesTable, RolesColumn),
	)
}
func newUserRoleContextsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserRoleContextsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, UserRoleContextsTable, UserRoleContextsColumn),
	)
}
func newUserPermissionContextsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserPermissionContextsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, UserPermissionContextsTable, UserPermissionContextsColumn),
	)
}
func newAuditLogsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AuditLogsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AuditLogsTable, AuditLogsColumn),
	)
}
func newOrganizationProvidersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrganizationProvidersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, OrganizationProvidersTable, OrganizationProvidersColumn),
	)
}
func newActivitiesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ActivitiesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ActivitiesTable, ActivitiesColumn),
	)
}
