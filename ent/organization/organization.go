// Code generated by ent, DO NOT EDIT.

package organization

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the organization type in the database.
	Label = "organization"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldSlug holds the string denoting the slug field in the database.
	FieldSlug = "slug"
	// FieldDomain holds the string denoting the domain field in the database.
	FieldDomain = "domain"
	// FieldLogoURL holds the string denoting the logo_url field in the database.
	FieldLogoURL = "logo_url"
	// FieldPlan holds the string denoting the plan field in the database.
	FieldPlan = "plan"
	// FieldActive holds the string denoting the active field in the database.
	FieldActive = "active"
	// FieldMetadata holds the string denoting the metadata field in the database.
	FieldMetadata = "metadata"
	// FieldTrialEndsAt holds the string denoting the trial_ends_at field in the database.
	FieldTrialEndsAt = "trial_ends_at"
	// FieldTrialUsed holds the string denoting the trial_used field in the database.
	FieldTrialUsed = "trial_used"
	// EdgeUsers holds the string denoting the users edge name in mutations.
	EdgeUsers = "users"
	// EdgeAPIKeys holds the string denoting the api_keys edge name in mutations.
	EdgeAPIKeys = "api_keys"
	// EdgeWebhooks holds the string denoting the webhooks edge name in mutations.
	EdgeWebhooks = "webhooks"
	// EdgeFeatureFlags holds the string denoting the feature_flags edge name in mutations.
	EdgeFeatureFlags = "feature_flags"
	// EdgeIdentityProviders holds the string denoting the identity_providers edge name in mutations.
	EdgeIdentityProviders = "identity_providers"
	// EdgeOauthClients holds the string denoting the oauth_clients edge name in mutations.
	EdgeOauthClients = "oauth_clients"
	// Table holds the table name of the organization in the database.
	Table = "organizations"
	// UsersTable is the table that holds the users relation/edge. The primary key declared below.
	UsersTable = "organization_users"
	// UsersInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UsersInverseTable = "users"
	// APIKeysTable is the table that holds the api_keys relation/edge.
	APIKeysTable = "api_keys"
	// APIKeysInverseTable is the table name for the ApiKey entity.
	// It exists in this package in order to avoid circular dependency with the "apikey" package.
	APIKeysInverseTable = "api_keys"
	// APIKeysColumn is the table column denoting the api_keys relation/edge.
	APIKeysColumn = "organization_id"
	// WebhooksTable is the table that holds the webhooks relation/edge.
	WebhooksTable = "webhooks"
	// WebhooksInverseTable is the table name for the Webhook entity.
	// It exists in this package in order to avoid circular dependency with the "webhook" package.
	WebhooksInverseTable = "webhooks"
	// WebhooksColumn is the table column denoting the webhooks relation/edge.
	WebhooksColumn = "organization_id"
	// FeatureFlagsTable is the table that holds the feature_flags relation/edge.
	FeatureFlagsTable = "organization_features"
	// FeatureFlagsInverseTable is the table name for the OrganizationFeature entity.
	// It exists in this package in order to avoid circular dependency with the "organizationfeature" package.
	FeatureFlagsInverseTable = "organization_features"
	// FeatureFlagsColumn is the table column denoting the feature_flags relation/edge.
	FeatureFlagsColumn = "organization_id"
	// IdentityProvidersTable is the table that holds the identity_providers relation/edge.
	IdentityProvidersTable = "identity_providers"
	// IdentityProvidersInverseTable is the table name for the IdentityProvider entity.
	// It exists in this package in order to avoid circular dependency with the "identityprovider" package.
	IdentityProvidersInverseTable = "identity_providers"
	// IdentityProvidersColumn is the table column denoting the identity_providers relation/edge.
	IdentityProvidersColumn = "organization_id"
	// OauthClientsTable is the table that holds the oauth_clients relation/edge.
	OauthClientsTable = "oauth_clients"
	// OauthClientsInverseTable is the table name for the OAuthClient entity.
	// It exists in this package in order to avoid circular dependency with the "oauthclient" package.
	OauthClientsInverseTable = "oauth_clients"
	// OauthClientsColumn is the table column denoting the oauth_clients relation/edge.
	OauthClientsColumn = "organization_id"
)

// Columns holds all SQL columns for organization fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldName,
	FieldSlug,
	FieldDomain,
	FieldLogoURL,
	FieldPlan,
	FieldActive,
	FieldMetadata,
	FieldTrialEndsAt,
	FieldTrialUsed,
}

var (
	// UsersPrimaryKey and UsersColumn2 are the table columns denoting the
	// primary key for the users relation (M2M).
	UsersPrimaryKey = []string{"organization_id", "user_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// SlugValidator is a validator for the "slug" field. It is called by the builders before save.
	SlugValidator func(string) error
	// DefaultPlan holds the default value on creation for the "plan" field.
	DefaultPlan string
	// DefaultActive holds the default value on creation for the "active" field.
	DefaultActive bool
	// DefaultTrialUsed holds the default value on creation for the "trial_used" field.
	DefaultTrialUsed bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
)

// OrderOption defines the ordering options for the Organization queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// BySlug orders the results by the slug field.
func BySlug(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSlug, opts...).ToFunc()
}

// ByDomain orders the results by the domain field.
func ByDomain(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDomain, opts...).ToFunc()
}

// ByLogoURL orders the results by the logo_url field.
func ByLogoURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLogoURL, opts...).ToFunc()
}

// ByPlan orders the results by the plan field.
func ByPlan(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPlan, opts...).ToFunc()
}

// ByActive orders the results by the active field.
func ByActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActive, opts...).ToFunc()
}

// ByTrialEndsAt orders the results by the trial_ends_at field.
func ByTrialEndsAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTrialEndsAt, opts...).ToFunc()
}

// ByTrialUsed orders the results by the trial_used field.
func ByTrialUsed(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTrialUsed, opts...).ToFunc()
}

// ByUsersCount orders the results by users count.
func ByUsersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUsersStep(), opts...)
	}
}

// ByUsers orders the results by users terms.
func ByUsers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUsersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAPIKeysCount orders the results by api_keys count.
func ByAPIKeysCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAPIKeysStep(), opts...)
	}
}

// ByAPIKeys orders the results by api_keys terms.
func ByAPIKeys(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAPIKeysStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByWebhooksCount orders the results by webhooks count.
func ByWebhooksCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newWebhooksStep(), opts...)
	}
}

// ByWebhooks orders the results by webhooks terms.
func ByWebhooks(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newWebhooksStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByFeatureFlagsCount orders the results by feature_flags count.
func ByFeatureFlagsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newFeatureFlagsStep(), opts...)
	}
}

// ByFeatureFlags orders the results by feature_flags terms.
func ByFeatureFlags(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFeatureFlagsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByIdentityProvidersCount orders the results by identity_providers count.
func ByIdentityProvidersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newIdentityProvidersStep(), opts...)
	}
}

// ByIdentityProviders orders the results by identity_providers terms.
func ByIdentityProviders(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newIdentityProvidersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByOauthClientsCount orders the results by oauth_clients count.
func ByOauthClientsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOauthClientsStep(), opts...)
	}
}

// ByOauthClients orders the results by oauth_clients terms.
func ByOauthClients(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOauthClientsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newUsersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UsersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, UsersTable, UsersPrimaryKey...),
	)
}
func newAPIKeysStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(APIKeysInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, APIKeysTable, APIKeysColumn),
	)
}
func newWebhooksStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(WebhooksInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, WebhooksTable, WebhooksColumn),
	)
}
func newFeatureFlagsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FeatureFlagsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, FeatureFlagsTable, FeatureFlagsColumn),
	)
}
func newIdentityProvidersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(IdentityProvidersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, IdentityProvidersTable, IdentityProvidersColumn),
	)
}
func newOauthClientsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OauthClientsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, OauthClientsTable, OauthClientsColumn),
	)
}
