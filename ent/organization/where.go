// Copyright 2023-present XRaph LLC. All rights reserved.
// This source code is licensed under the XRaph LLC license found
// in the LICENSE file in the root directory of this source tree.
// Code generated by ent, DO NOT EDIT.

package organization

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/juicycleff/frank/ent/predicate"
	"github.com/juicycleff/frank/pkg/model"
	"github.com/rs/xid"
)

// ID filters vertices based on their ID field.
func ID(id xid.ID) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id xid.ID) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id xid.ID) predicate.Organization {
	return predicate.Organization(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...xid.ID) predicate.Organization {
	return predicate.Organization(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...xid.ID) predicate.Organization {
	return predicate.Organization(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id xid.ID) predicate.Organization {
	return predicate.Organization(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id xid.ID) predicate.Organization {
	return predicate.Organization(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id xid.ID) predicate.Organization {
	return predicate.Organization(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id xid.ID) predicate.Organization {
	return predicate.Organization(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldDeletedAt, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldName, v))
}

// Slug applies equality check predicate on the "slug" field. It's identical to SlugEQ.
func Slug(v string) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldSlug, v))
}

// Domain applies equality check predicate on the "domain" field. It's identical to DomainEQ.
func Domain(v string) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldDomain, v))
}

// LogoURL applies equality check predicate on the "logo_url" field. It's identical to LogoURLEQ.
func LogoURL(v string) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldLogoURL, v))
}

// Plan applies equality check predicate on the "plan" field. It's identical to PlanEQ.
func Plan(v string) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldPlan, v))
}

// Active applies equality check predicate on the "active" field. It's identical to ActiveEQ.
func Active(v bool) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldActive, v))
}

// TrialEndsAt applies equality check predicate on the "trial_ends_at" field. It's identical to TrialEndsAtEQ.
func TrialEndsAt(v time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldTrialEndsAt, v))
}

// TrialUsed applies equality check predicate on the "trial_used" field. It's identical to TrialUsedEQ.
func TrialUsed(v bool) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldTrialUsed, v))
}

// OwnerID applies equality check predicate on the "owner_id" field. It's identical to OwnerIDEQ.
func OwnerID(v xid.ID) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldOwnerID, v))
}

// IsPlatformOrganization applies equality check predicate on the "is_platform_organization" field. It's identical to IsPlatformOrganizationEQ.
func IsPlatformOrganization(v bool) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldIsPlatformOrganization, v))
}

// ExternalUserLimit applies equality check predicate on the "external_user_limit" field. It's identical to ExternalUserLimitEQ.
func ExternalUserLimit(v int) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldExternalUserLimit, v))
}

// EndUserLimit applies equality check predicate on the "end_user_limit" field. It's identical to EndUserLimitEQ.
func EndUserLimit(v int) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldEndUserLimit, v))
}

// SSOEnabled applies equality check predicate on the "sso_enabled" field. It's identical to SSOEnabledEQ.
func SSOEnabled(v bool) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldSSOEnabled, v))
}

// SSODomain applies equality check predicate on the "sso_domain" field. It's identical to SSODomainEQ.
func SSODomain(v string) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldSSODomain, v))
}

// SubscriptionID applies equality check predicate on the "subscription_id" field. It's identical to SubscriptionIDEQ.
func SubscriptionID(v string) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldSubscriptionID, v))
}

// CustomerID applies equality check predicate on the "customer_id" field. It's identical to CustomerIDEQ.
func CustomerID(v string) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldCustomerID, v))
}

// AuthServiceEnabled applies equality check predicate on the "auth_service_enabled" field. It's identical to AuthServiceEnabledEQ.
func AuthServiceEnabled(v bool) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldAuthServiceEnabled, v))
}

// AuthDomain applies equality check predicate on the "auth_domain" field. It's identical to AuthDomainEQ.
func AuthDomain(v string) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldAuthDomain, v))
}

// APIRequestLimit applies equality check predicate on the "api_request_limit" field. It's identical to APIRequestLimitEQ.
func APIRequestLimit(v int) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldAPIRequestLimit, v))
}

// APIRequestsUsed applies equality check predicate on the "api_requests_used" field. It's identical to APIRequestsUsedEQ.
func APIRequestsUsed(v int) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldAPIRequestsUsed, v))
}

// CurrentExternalUsers applies equality check predicate on the "current_external_users" field. It's identical to CurrentExternalUsersEQ.
func CurrentExternalUsers(v int) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldCurrentExternalUsers, v))
}

// CurrentEndUsers applies equality check predicate on the "current_end_users" field. It's identical to CurrentEndUsersEQ.
func CurrentEndUsers(v int) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldCurrentEndUsers, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Organization {
	return predicate.Organization(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Organization {
	return predicate.Organization(sql.FieldNotNull(FieldDeletedAt))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Organization {
	return predicate.Organization(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Organization {
	return predicate.Organization(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Organization {
	return predicate.Organization(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Organization {
	return predicate.Organization(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Organization {
	return predicate.Organization(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Organization {
	return predicate.Organization(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Organization {
	return predicate.Organization(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Organization {
	return predicate.Organization(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Organization {
	return predicate.Organization(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Organization {
	return predicate.Organization(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Organization {
	return predicate.Organization(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Organization {
	return predicate.Organization(sql.FieldContainsFold(FieldName, v))
}

// SlugEQ applies the EQ predicate on the "slug" field.
func SlugEQ(v string) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldSlug, v))
}

// SlugNEQ applies the NEQ predicate on the "slug" field.
func SlugNEQ(v string) predicate.Organization {
	return predicate.Organization(sql.FieldNEQ(FieldSlug, v))
}

// SlugIn applies the In predicate on the "slug" field.
func SlugIn(vs ...string) predicate.Organization {
	return predicate.Organization(sql.FieldIn(FieldSlug, vs...))
}

// SlugNotIn applies the NotIn predicate on the "slug" field.
func SlugNotIn(vs ...string) predicate.Organization {
	return predicate.Organization(sql.FieldNotIn(FieldSlug, vs...))
}

// SlugGT applies the GT predicate on the "slug" field.
func SlugGT(v string) predicate.Organization {
	return predicate.Organization(sql.FieldGT(FieldSlug, v))
}

// SlugGTE applies the GTE predicate on the "slug" field.
func SlugGTE(v string) predicate.Organization {
	return predicate.Organization(sql.FieldGTE(FieldSlug, v))
}

// SlugLT applies the LT predicate on the "slug" field.
func SlugLT(v string) predicate.Organization {
	return predicate.Organization(sql.FieldLT(FieldSlug, v))
}

// SlugLTE applies the LTE predicate on the "slug" field.
func SlugLTE(v string) predicate.Organization {
	return predicate.Organization(sql.FieldLTE(FieldSlug, v))
}

// SlugContains applies the Contains predicate on the "slug" field.
func SlugContains(v string) predicate.Organization {
	return predicate.Organization(sql.FieldContains(FieldSlug, v))
}

// SlugHasPrefix applies the HasPrefix predicate on the "slug" field.
func SlugHasPrefix(v string) predicate.Organization {
	return predicate.Organization(sql.FieldHasPrefix(FieldSlug, v))
}

// SlugHasSuffix applies the HasSuffix predicate on the "slug" field.
func SlugHasSuffix(v string) predicate.Organization {
	return predicate.Organization(sql.FieldHasSuffix(FieldSlug, v))
}

// SlugEqualFold applies the EqualFold predicate on the "slug" field.
func SlugEqualFold(v string) predicate.Organization {
	return predicate.Organization(sql.FieldEqualFold(FieldSlug, v))
}

// SlugContainsFold applies the ContainsFold predicate on the "slug" field.
func SlugContainsFold(v string) predicate.Organization {
	return predicate.Organization(sql.FieldContainsFold(FieldSlug, v))
}

// DomainsIsNil applies the IsNil predicate on the "domains" field.
func DomainsIsNil() predicate.Organization {
	return predicate.Organization(sql.FieldIsNull(FieldDomains))
}

// DomainsNotNil applies the NotNil predicate on the "domains" field.
func DomainsNotNil() predicate.Organization {
	return predicate.Organization(sql.FieldNotNull(FieldDomains))
}

// VerifiedDomainsIsNil applies the IsNil predicate on the "verified_domains" field.
func VerifiedDomainsIsNil() predicate.Organization {
	return predicate.Organization(sql.FieldIsNull(FieldVerifiedDomains))
}

// VerifiedDomainsNotNil applies the NotNil predicate on the "verified_domains" field.
func VerifiedDomainsNotNil() predicate.Organization {
	return predicate.Organization(sql.FieldNotNull(FieldVerifiedDomains))
}

// DomainEQ applies the EQ predicate on the "domain" field.
func DomainEQ(v string) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldDomain, v))
}

// DomainNEQ applies the NEQ predicate on the "domain" field.
func DomainNEQ(v string) predicate.Organization {
	return predicate.Organization(sql.FieldNEQ(FieldDomain, v))
}

// DomainIn applies the In predicate on the "domain" field.
func DomainIn(vs ...string) predicate.Organization {
	return predicate.Organization(sql.FieldIn(FieldDomain, vs...))
}

// DomainNotIn applies the NotIn predicate on the "domain" field.
func DomainNotIn(vs ...string) predicate.Organization {
	return predicate.Organization(sql.FieldNotIn(FieldDomain, vs...))
}

// DomainGT applies the GT predicate on the "domain" field.
func DomainGT(v string) predicate.Organization {
	return predicate.Organization(sql.FieldGT(FieldDomain, v))
}

// DomainGTE applies the GTE predicate on the "domain" field.
func DomainGTE(v string) predicate.Organization {
	return predicate.Organization(sql.FieldGTE(FieldDomain, v))
}

// DomainLT applies the LT predicate on the "domain" field.
func DomainLT(v string) predicate.Organization {
	return predicate.Organization(sql.FieldLT(FieldDomain, v))
}

// DomainLTE applies the LTE predicate on the "domain" field.
func DomainLTE(v string) predicate.Organization {
	return predicate.Organization(sql.FieldLTE(FieldDomain, v))
}

// DomainContains applies the Contains predicate on the "domain" field.
func DomainContains(v string) predicate.Organization {
	return predicate.Organization(sql.FieldContains(FieldDomain, v))
}

// DomainHasPrefix applies the HasPrefix predicate on the "domain" field.
func DomainHasPrefix(v string) predicate.Organization {
	return predicate.Organization(sql.FieldHasPrefix(FieldDomain, v))
}

// DomainHasSuffix applies the HasSuffix predicate on the "domain" field.
func DomainHasSuffix(v string) predicate.Organization {
	return predicate.Organization(sql.FieldHasSuffix(FieldDomain, v))
}

// DomainIsNil applies the IsNil predicate on the "domain" field.
func DomainIsNil() predicate.Organization {
	return predicate.Organization(sql.FieldIsNull(FieldDomain))
}

// DomainNotNil applies the NotNil predicate on the "domain" field.
func DomainNotNil() predicate.Organization {
	return predicate.Organization(sql.FieldNotNull(FieldDomain))
}

// DomainEqualFold applies the EqualFold predicate on the "domain" field.
func DomainEqualFold(v string) predicate.Organization {
	return predicate.Organization(sql.FieldEqualFold(FieldDomain, v))
}

// DomainContainsFold applies the ContainsFold predicate on the "domain" field.
func DomainContainsFold(v string) predicate.Organization {
	return predicate.Organization(sql.FieldContainsFold(FieldDomain, v))
}

// LogoURLEQ applies the EQ predicate on the "logo_url" field.
func LogoURLEQ(v string) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldLogoURL, v))
}

// LogoURLNEQ applies the NEQ predicate on the "logo_url" field.
func LogoURLNEQ(v string) predicate.Organization {
	return predicate.Organization(sql.FieldNEQ(FieldLogoURL, v))
}

// LogoURLIn applies the In predicate on the "logo_url" field.
func LogoURLIn(vs ...string) predicate.Organization {
	return predicate.Organization(sql.FieldIn(FieldLogoURL, vs...))
}

// LogoURLNotIn applies the NotIn predicate on the "logo_url" field.
func LogoURLNotIn(vs ...string) predicate.Organization {
	return predicate.Organization(sql.FieldNotIn(FieldLogoURL, vs...))
}

// LogoURLGT applies the GT predicate on the "logo_url" field.
func LogoURLGT(v string) predicate.Organization {
	return predicate.Organization(sql.FieldGT(FieldLogoURL, v))
}

// LogoURLGTE applies the GTE predicate on the "logo_url" field.
func LogoURLGTE(v string) predicate.Organization {
	return predicate.Organization(sql.FieldGTE(FieldLogoURL, v))
}

// LogoURLLT applies the LT predicate on the "logo_url" field.
func LogoURLLT(v string) predicate.Organization {
	return predicate.Organization(sql.FieldLT(FieldLogoURL, v))
}

// LogoURLLTE applies the LTE predicate on the "logo_url" field.
func LogoURLLTE(v string) predicate.Organization {
	return predicate.Organization(sql.FieldLTE(FieldLogoURL, v))
}

// LogoURLContains applies the Contains predicate on the "logo_url" field.
func LogoURLContains(v string) predicate.Organization {
	return predicate.Organization(sql.FieldContains(FieldLogoURL, v))
}

// LogoURLHasPrefix applies the HasPrefix predicate on the "logo_url" field.
func LogoURLHasPrefix(v string) predicate.Organization {
	return predicate.Organization(sql.FieldHasPrefix(FieldLogoURL, v))
}

// LogoURLHasSuffix applies the HasSuffix predicate on the "logo_url" field.
func LogoURLHasSuffix(v string) predicate.Organization {
	return predicate.Organization(sql.FieldHasSuffix(FieldLogoURL, v))
}

// LogoURLIsNil applies the IsNil predicate on the "logo_url" field.
func LogoURLIsNil() predicate.Organization {
	return predicate.Organization(sql.FieldIsNull(FieldLogoURL))
}

// LogoURLNotNil applies the NotNil predicate on the "logo_url" field.
func LogoURLNotNil() predicate.Organization {
	return predicate.Organization(sql.FieldNotNull(FieldLogoURL))
}

// LogoURLEqualFold applies the EqualFold predicate on the "logo_url" field.
func LogoURLEqualFold(v string) predicate.Organization {
	return predicate.Organization(sql.FieldEqualFold(FieldLogoURL, v))
}

// LogoURLContainsFold applies the ContainsFold predicate on the "logo_url" field.
func LogoURLContainsFold(v string) predicate.Organization {
	return predicate.Organization(sql.FieldContainsFold(FieldLogoURL, v))
}

// PlanEQ applies the EQ predicate on the "plan" field.
func PlanEQ(v string) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldPlan, v))
}

// PlanNEQ applies the NEQ predicate on the "plan" field.
func PlanNEQ(v string) predicate.Organization {
	return predicate.Organization(sql.FieldNEQ(FieldPlan, v))
}

// PlanIn applies the In predicate on the "plan" field.
func PlanIn(vs ...string) predicate.Organization {
	return predicate.Organization(sql.FieldIn(FieldPlan, vs...))
}

// PlanNotIn applies the NotIn predicate on the "plan" field.
func PlanNotIn(vs ...string) predicate.Organization {
	return predicate.Organization(sql.FieldNotIn(FieldPlan, vs...))
}

// PlanGT applies the GT predicate on the "plan" field.
func PlanGT(v string) predicate.Organization {
	return predicate.Organization(sql.FieldGT(FieldPlan, v))
}

// PlanGTE applies the GTE predicate on the "plan" field.
func PlanGTE(v string) predicate.Organization {
	return predicate.Organization(sql.FieldGTE(FieldPlan, v))
}

// PlanLT applies the LT predicate on the "plan" field.
func PlanLT(v string) predicate.Organization {
	return predicate.Organization(sql.FieldLT(FieldPlan, v))
}

// PlanLTE applies the LTE predicate on the "plan" field.
func PlanLTE(v string) predicate.Organization {
	return predicate.Organization(sql.FieldLTE(FieldPlan, v))
}

// PlanContains applies the Contains predicate on the "plan" field.
func PlanContains(v string) predicate.Organization {
	return predicate.Organization(sql.FieldContains(FieldPlan, v))
}

// PlanHasPrefix applies the HasPrefix predicate on the "plan" field.
func PlanHasPrefix(v string) predicate.Organization {
	return predicate.Organization(sql.FieldHasPrefix(FieldPlan, v))
}

// PlanHasSuffix applies the HasSuffix predicate on the "plan" field.
func PlanHasSuffix(v string) predicate.Organization {
	return predicate.Organization(sql.FieldHasSuffix(FieldPlan, v))
}

// PlanEqualFold applies the EqualFold predicate on the "plan" field.
func PlanEqualFold(v string) predicate.Organization {
	return predicate.Organization(sql.FieldEqualFold(FieldPlan, v))
}

// PlanContainsFold applies the ContainsFold predicate on the "plan" field.
func PlanContainsFold(v string) predicate.Organization {
	return predicate.Organization(sql.FieldContainsFold(FieldPlan, v))
}

// ActiveEQ applies the EQ predicate on the "active" field.
func ActiveEQ(v bool) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldActive, v))
}

// ActiveNEQ applies the NEQ predicate on the "active" field.
func ActiveNEQ(v bool) predicate.Organization {
	return predicate.Organization(sql.FieldNEQ(FieldActive, v))
}

// MetadataIsNil applies the IsNil predicate on the "metadata" field.
func MetadataIsNil() predicate.Organization {
	return predicate.Organization(sql.FieldIsNull(FieldMetadata))
}

// MetadataNotNil applies the NotNil predicate on the "metadata" field.
func MetadataNotNil() predicate.Organization {
	return predicate.Organization(sql.FieldNotNull(FieldMetadata))
}

// TrialEndsAtEQ applies the EQ predicate on the "trial_ends_at" field.
func TrialEndsAtEQ(v time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldTrialEndsAt, v))
}

// TrialEndsAtNEQ applies the NEQ predicate on the "trial_ends_at" field.
func TrialEndsAtNEQ(v time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldNEQ(FieldTrialEndsAt, v))
}

// TrialEndsAtIn applies the In predicate on the "trial_ends_at" field.
func TrialEndsAtIn(vs ...time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldIn(FieldTrialEndsAt, vs...))
}

// TrialEndsAtNotIn applies the NotIn predicate on the "trial_ends_at" field.
func TrialEndsAtNotIn(vs ...time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldNotIn(FieldTrialEndsAt, vs...))
}

// TrialEndsAtGT applies the GT predicate on the "trial_ends_at" field.
func TrialEndsAtGT(v time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldGT(FieldTrialEndsAt, v))
}

// TrialEndsAtGTE applies the GTE predicate on the "trial_ends_at" field.
func TrialEndsAtGTE(v time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldGTE(FieldTrialEndsAt, v))
}

// TrialEndsAtLT applies the LT predicate on the "trial_ends_at" field.
func TrialEndsAtLT(v time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldLT(FieldTrialEndsAt, v))
}

// TrialEndsAtLTE applies the LTE predicate on the "trial_ends_at" field.
func TrialEndsAtLTE(v time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldLTE(FieldTrialEndsAt, v))
}

// TrialEndsAtIsNil applies the IsNil predicate on the "trial_ends_at" field.
func TrialEndsAtIsNil() predicate.Organization {
	return predicate.Organization(sql.FieldIsNull(FieldTrialEndsAt))
}

// TrialEndsAtNotNil applies the NotNil predicate on the "trial_ends_at" field.
func TrialEndsAtNotNil() predicate.Organization {
	return predicate.Organization(sql.FieldNotNull(FieldTrialEndsAt))
}

// TrialUsedEQ applies the EQ predicate on the "trial_used" field.
func TrialUsedEQ(v bool) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldTrialUsed, v))
}

// TrialUsedNEQ applies the NEQ predicate on the "trial_used" field.
func TrialUsedNEQ(v bool) predicate.Organization {
	return predicate.Organization(sql.FieldNEQ(FieldTrialUsed, v))
}

// OwnerIDEQ applies the EQ predicate on the "owner_id" field.
func OwnerIDEQ(v xid.ID) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldOwnerID, v))
}

// OwnerIDNEQ applies the NEQ predicate on the "owner_id" field.
func OwnerIDNEQ(v xid.ID) predicate.Organization {
	return predicate.Organization(sql.FieldNEQ(FieldOwnerID, v))
}

// OwnerIDIn applies the In predicate on the "owner_id" field.
func OwnerIDIn(vs ...xid.ID) predicate.Organization {
	return predicate.Organization(sql.FieldIn(FieldOwnerID, vs...))
}

// OwnerIDNotIn applies the NotIn predicate on the "owner_id" field.
func OwnerIDNotIn(vs ...xid.ID) predicate.Organization {
	return predicate.Organization(sql.FieldNotIn(FieldOwnerID, vs...))
}

// OwnerIDGT applies the GT predicate on the "owner_id" field.
func OwnerIDGT(v xid.ID) predicate.Organization {
	return predicate.Organization(sql.FieldGT(FieldOwnerID, v))
}

// OwnerIDGTE applies the GTE predicate on the "owner_id" field.
func OwnerIDGTE(v xid.ID) predicate.Organization {
	return predicate.Organization(sql.FieldGTE(FieldOwnerID, v))
}

// OwnerIDLT applies the LT predicate on the "owner_id" field.
func OwnerIDLT(v xid.ID) predicate.Organization {
	return predicate.Organization(sql.FieldLT(FieldOwnerID, v))
}

// OwnerIDLTE applies the LTE predicate on the "owner_id" field.
func OwnerIDLTE(v xid.ID) predicate.Organization {
	return predicate.Organization(sql.FieldLTE(FieldOwnerID, v))
}

// OwnerIDContains applies the Contains predicate on the "owner_id" field.
func OwnerIDContains(v xid.ID) predicate.Organization {
	vc := v.String()
	return predicate.Organization(sql.FieldContains(FieldOwnerID, vc))
}

// OwnerIDHasPrefix applies the HasPrefix predicate on the "owner_id" field.
func OwnerIDHasPrefix(v xid.ID) predicate.Organization {
	vc := v.String()
	return predicate.Organization(sql.FieldHasPrefix(FieldOwnerID, vc))
}

// OwnerIDHasSuffix applies the HasSuffix predicate on the "owner_id" field.
func OwnerIDHasSuffix(v xid.ID) predicate.Organization {
	vc := v.String()
	return predicate.Organization(sql.FieldHasSuffix(FieldOwnerID, vc))
}

// OwnerIDIsNil applies the IsNil predicate on the "owner_id" field.
func OwnerIDIsNil() predicate.Organization {
	return predicate.Organization(sql.FieldIsNull(FieldOwnerID))
}

// OwnerIDNotNil applies the NotNil predicate on the "owner_id" field.
func OwnerIDNotNil() predicate.Organization {
	return predicate.Organization(sql.FieldNotNull(FieldOwnerID))
}

// OwnerIDEqualFold applies the EqualFold predicate on the "owner_id" field.
func OwnerIDEqualFold(v xid.ID) predicate.Organization {
	vc := v.String()
	return predicate.Organization(sql.FieldEqualFold(FieldOwnerID, vc))
}

// OwnerIDContainsFold applies the ContainsFold predicate on the "owner_id" field.
func OwnerIDContainsFold(v xid.ID) predicate.Organization {
	vc := v.String()
	return predicate.Organization(sql.FieldContainsFold(FieldOwnerID, vc))
}

// OrgTypeEQ applies the EQ predicate on the "org_type" field.
func OrgTypeEQ(v model.OrgType) predicate.Organization {
	vc := v
	return predicate.Organization(sql.FieldEQ(FieldOrgType, vc))
}

// OrgTypeNEQ applies the NEQ predicate on the "org_type" field.
func OrgTypeNEQ(v model.OrgType) predicate.Organization {
	vc := v
	return predicate.Organization(sql.FieldNEQ(FieldOrgType, vc))
}

// OrgTypeIn applies the In predicate on the "org_type" field.
func OrgTypeIn(vs ...model.OrgType) predicate.Organization {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Organization(sql.FieldIn(FieldOrgType, v...))
}

// OrgTypeNotIn applies the NotIn predicate on the "org_type" field.
func OrgTypeNotIn(vs ...model.OrgType) predicate.Organization {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Organization(sql.FieldNotIn(FieldOrgType, v...))
}

// IsPlatformOrganizationEQ applies the EQ predicate on the "is_platform_organization" field.
func IsPlatformOrganizationEQ(v bool) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldIsPlatformOrganization, v))
}

// IsPlatformOrganizationNEQ applies the NEQ predicate on the "is_platform_organization" field.
func IsPlatformOrganizationNEQ(v bool) predicate.Organization {
	return predicate.Organization(sql.FieldNEQ(FieldIsPlatformOrganization, v))
}

// ExternalUserLimitEQ applies the EQ predicate on the "external_user_limit" field.
func ExternalUserLimitEQ(v int) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldExternalUserLimit, v))
}

// ExternalUserLimitNEQ applies the NEQ predicate on the "external_user_limit" field.
func ExternalUserLimitNEQ(v int) predicate.Organization {
	return predicate.Organization(sql.FieldNEQ(FieldExternalUserLimit, v))
}

// ExternalUserLimitIn applies the In predicate on the "external_user_limit" field.
func ExternalUserLimitIn(vs ...int) predicate.Organization {
	return predicate.Organization(sql.FieldIn(FieldExternalUserLimit, vs...))
}

// ExternalUserLimitNotIn applies the NotIn predicate on the "external_user_limit" field.
func ExternalUserLimitNotIn(vs ...int) predicate.Organization {
	return predicate.Organization(sql.FieldNotIn(FieldExternalUserLimit, vs...))
}

// ExternalUserLimitGT applies the GT predicate on the "external_user_limit" field.
func ExternalUserLimitGT(v int) predicate.Organization {
	return predicate.Organization(sql.FieldGT(FieldExternalUserLimit, v))
}

// ExternalUserLimitGTE applies the GTE predicate on the "external_user_limit" field.
func ExternalUserLimitGTE(v int) predicate.Organization {
	return predicate.Organization(sql.FieldGTE(FieldExternalUserLimit, v))
}

// ExternalUserLimitLT applies the LT predicate on the "external_user_limit" field.
func ExternalUserLimitLT(v int) predicate.Organization {
	return predicate.Organization(sql.FieldLT(FieldExternalUserLimit, v))
}

// ExternalUserLimitLTE applies the LTE predicate on the "external_user_limit" field.
func ExternalUserLimitLTE(v int) predicate.Organization {
	return predicate.Organization(sql.FieldLTE(FieldExternalUserLimit, v))
}

// EndUserLimitEQ applies the EQ predicate on the "end_user_limit" field.
func EndUserLimitEQ(v int) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldEndUserLimit, v))
}

// EndUserLimitNEQ applies the NEQ predicate on the "end_user_limit" field.
func EndUserLimitNEQ(v int) predicate.Organization {
	return predicate.Organization(sql.FieldNEQ(FieldEndUserLimit, v))
}

// EndUserLimitIn applies the In predicate on the "end_user_limit" field.
func EndUserLimitIn(vs ...int) predicate.Organization {
	return predicate.Organization(sql.FieldIn(FieldEndUserLimit, vs...))
}

// EndUserLimitNotIn applies the NotIn predicate on the "end_user_limit" field.
func EndUserLimitNotIn(vs ...int) predicate.Organization {
	return predicate.Organization(sql.FieldNotIn(FieldEndUserLimit, vs...))
}

// EndUserLimitGT applies the GT predicate on the "end_user_limit" field.
func EndUserLimitGT(v int) predicate.Organization {
	return predicate.Organization(sql.FieldGT(FieldEndUserLimit, v))
}

// EndUserLimitGTE applies the GTE predicate on the "end_user_limit" field.
func EndUserLimitGTE(v int) predicate.Organization {
	return predicate.Organization(sql.FieldGTE(FieldEndUserLimit, v))
}

// EndUserLimitLT applies the LT predicate on the "end_user_limit" field.
func EndUserLimitLT(v int) predicate.Organization {
	return predicate.Organization(sql.FieldLT(FieldEndUserLimit, v))
}

// EndUserLimitLTE applies the LTE predicate on the "end_user_limit" field.
func EndUserLimitLTE(v int) predicate.Organization {
	return predicate.Organization(sql.FieldLTE(FieldEndUserLimit, v))
}

// SSOEnabledEQ applies the EQ predicate on the "sso_enabled" field.
func SSOEnabledEQ(v bool) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldSSOEnabled, v))
}

// SSOEnabledNEQ applies the NEQ predicate on the "sso_enabled" field.
func SSOEnabledNEQ(v bool) predicate.Organization {
	return predicate.Organization(sql.FieldNEQ(FieldSSOEnabled, v))
}

// SSODomainEQ applies the EQ predicate on the "sso_domain" field.
func SSODomainEQ(v string) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldSSODomain, v))
}

// SSODomainNEQ applies the NEQ predicate on the "sso_domain" field.
func SSODomainNEQ(v string) predicate.Organization {
	return predicate.Organization(sql.FieldNEQ(FieldSSODomain, v))
}

// SSODomainIn applies the In predicate on the "sso_domain" field.
func SSODomainIn(vs ...string) predicate.Organization {
	return predicate.Organization(sql.FieldIn(FieldSSODomain, vs...))
}

// SSODomainNotIn applies the NotIn predicate on the "sso_domain" field.
func SSODomainNotIn(vs ...string) predicate.Organization {
	return predicate.Organization(sql.FieldNotIn(FieldSSODomain, vs...))
}

// SSODomainGT applies the GT predicate on the "sso_domain" field.
func SSODomainGT(v string) predicate.Organization {
	return predicate.Organization(sql.FieldGT(FieldSSODomain, v))
}

// SSODomainGTE applies the GTE predicate on the "sso_domain" field.
func SSODomainGTE(v string) predicate.Organization {
	return predicate.Organization(sql.FieldGTE(FieldSSODomain, v))
}

// SSODomainLT applies the LT predicate on the "sso_domain" field.
func SSODomainLT(v string) predicate.Organization {
	return predicate.Organization(sql.FieldLT(FieldSSODomain, v))
}

// SSODomainLTE applies the LTE predicate on the "sso_domain" field.
func SSODomainLTE(v string) predicate.Organization {
	return predicate.Organization(sql.FieldLTE(FieldSSODomain, v))
}

// SSODomainContains applies the Contains predicate on the "sso_domain" field.
func SSODomainContains(v string) predicate.Organization {
	return predicate.Organization(sql.FieldContains(FieldSSODomain, v))
}

// SSODomainHasPrefix applies the HasPrefix predicate on the "sso_domain" field.
func SSODomainHasPrefix(v string) predicate.Organization {
	return predicate.Organization(sql.FieldHasPrefix(FieldSSODomain, v))
}

// SSODomainHasSuffix applies the HasSuffix predicate on the "sso_domain" field.
func SSODomainHasSuffix(v string) predicate.Organization {
	return predicate.Organization(sql.FieldHasSuffix(FieldSSODomain, v))
}

// SSODomainIsNil applies the IsNil predicate on the "sso_domain" field.
func SSODomainIsNil() predicate.Organization {
	return predicate.Organization(sql.FieldIsNull(FieldSSODomain))
}

// SSODomainNotNil applies the NotNil predicate on the "sso_domain" field.
func SSODomainNotNil() predicate.Organization {
	return predicate.Organization(sql.FieldNotNull(FieldSSODomain))
}

// SSODomainEqualFold applies the EqualFold predicate on the "sso_domain" field.
func SSODomainEqualFold(v string) predicate.Organization {
	return predicate.Organization(sql.FieldEqualFold(FieldSSODomain, v))
}

// SSODomainContainsFold applies the ContainsFold predicate on the "sso_domain" field.
func SSODomainContainsFold(v string) predicate.Organization {
	return predicate.Organization(sql.FieldContainsFold(FieldSSODomain, v))
}

// SubscriptionIDEQ applies the EQ predicate on the "subscription_id" field.
func SubscriptionIDEQ(v string) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldSubscriptionID, v))
}

// SubscriptionIDNEQ applies the NEQ predicate on the "subscription_id" field.
func SubscriptionIDNEQ(v string) predicate.Organization {
	return predicate.Organization(sql.FieldNEQ(FieldSubscriptionID, v))
}

// SubscriptionIDIn applies the In predicate on the "subscription_id" field.
func SubscriptionIDIn(vs ...string) predicate.Organization {
	return predicate.Organization(sql.FieldIn(FieldSubscriptionID, vs...))
}

// SubscriptionIDNotIn applies the NotIn predicate on the "subscription_id" field.
func SubscriptionIDNotIn(vs ...string) predicate.Organization {
	return predicate.Organization(sql.FieldNotIn(FieldSubscriptionID, vs...))
}

// SubscriptionIDGT applies the GT predicate on the "subscription_id" field.
func SubscriptionIDGT(v string) predicate.Organization {
	return predicate.Organization(sql.FieldGT(FieldSubscriptionID, v))
}

// SubscriptionIDGTE applies the GTE predicate on the "subscription_id" field.
func SubscriptionIDGTE(v string) predicate.Organization {
	return predicate.Organization(sql.FieldGTE(FieldSubscriptionID, v))
}

// SubscriptionIDLT applies the LT predicate on the "subscription_id" field.
func SubscriptionIDLT(v string) predicate.Organization {
	return predicate.Organization(sql.FieldLT(FieldSubscriptionID, v))
}

// SubscriptionIDLTE applies the LTE predicate on the "subscription_id" field.
func SubscriptionIDLTE(v string) predicate.Organization {
	return predicate.Organization(sql.FieldLTE(FieldSubscriptionID, v))
}

// SubscriptionIDContains applies the Contains predicate on the "subscription_id" field.
func SubscriptionIDContains(v string) predicate.Organization {
	return predicate.Organization(sql.FieldContains(FieldSubscriptionID, v))
}

// SubscriptionIDHasPrefix applies the HasPrefix predicate on the "subscription_id" field.
func SubscriptionIDHasPrefix(v string) predicate.Organization {
	return predicate.Organization(sql.FieldHasPrefix(FieldSubscriptionID, v))
}

// SubscriptionIDHasSuffix applies the HasSuffix predicate on the "subscription_id" field.
func SubscriptionIDHasSuffix(v string) predicate.Organization {
	return predicate.Organization(sql.FieldHasSuffix(FieldSubscriptionID, v))
}

// SubscriptionIDIsNil applies the IsNil predicate on the "subscription_id" field.
func SubscriptionIDIsNil() predicate.Organization {
	return predicate.Organization(sql.FieldIsNull(FieldSubscriptionID))
}

// SubscriptionIDNotNil applies the NotNil predicate on the "subscription_id" field.
func SubscriptionIDNotNil() predicate.Organization {
	return predicate.Organization(sql.FieldNotNull(FieldSubscriptionID))
}

// SubscriptionIDEqualFold applies the EqualFold predicate on the "subscription_id" field.
func SubscriptionIDEqualFold(v string) predicate.Organization {
	return predicate.Organization(sql.FieldEqualFold(FieldSubscriptionID, v))
}

// SubscriptionIDContainsFold applies the ContainsFold predicate on the "subscription_id" field.
func SubscriptionIDContainsFold(v string) predicate.Organization {
	return predicate.Organization(sql.FieldContainsFold(FieldSubscriptionID, v))
}

// CustomerIDEQ applies the EQ predicate on the "customer_id" field.
func CustomerIDEQ(v string) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldCustomerID, v))
}

// CustomerIDNEQ applies the NEQ predicate on the "customer_id" field.
func CustomerIDNEQ(v string) predicate.Organization {
	return predicate.Organization(sql.FieldNEQ(FieldCustomerID, v))
}

// CustomerIDIn applies the In predicate on the "customer_id" field.
func CustomerIDIn(vs ...string) predicate.Organization {
	return predicate.Organization(sql.FieldIn(FieldCustomerID, vs...))
}

// CustomerIDNotIn applies the NotIn predicate on the "customer_id" field.
func CustomerIDNotIn(vs ...string) predicate.Organization {
	return predicate.Organization(sql.FieldNotIn(FieldCustomerID, vs...))
}

// CustomerIDGT applies the GT predicate on the "customer_id" field.
func CustomerIDGT(v string) predicate.Organization {
	return predicate.Organization(sql.FieldGT(FieldCustomerID, v))
}

// CustomerIDGTE applies the GTE predicate on the "customer_id" field.
func CustomerIDGTE(v string) predicate.Organization {
	return predicate.Organization(sql.FieldGTE(FieldCustomerID, v))
}

// CustomerIDLT applies the LT predicate on the "customer_id" field.
func CustomerIDLT(v string) predicate.Organization {
	return predicate.Organization(sql.FieldLT(FieldCustomerID, v))
}

// CustomerIDLTE applies the LTE predicate on the "customer_id" field.
func CustomerIDLTE(v string) predicate.Organization {
	return predicate.Organization(sql.FieldLTE(FieldCustomerID, v))
}

// CustomerIDContains applies the Contains predicate on the "customer_id" field.
func CustomerIDContains(v string) predicate.Organization {
	return predicate.Organization(sql.FieldContains(FieldCustomerID, v))
}

// CustomerIDHasPrefix applies the HasPrefix predicate on the "customer_id" field.
func CustomerIDHasPrefix(v string) predicate.Organization {
	return predicate.Organization(sql.FieldHasPrefix(FieldCustomerID, v))
}

// CustomerIDHasSuffix applies the HasSuffix predicate on the "customer_id" field.
func CustomerIDHasSuffix(v string) predicate.Organization {
	return predicate.Organization(sql.FieldHasSuffix(FieldCustomerID, v))
}

// CustomerIDIsNil applies the IsNil predicate on the "customer_id" field.
func CustomerIDIsNil() predicate.Organization {
	return predicate.Organization(sql.FieldIsNull(FieldCustomerID))
}

// CustomerIDNotNil applies the NotNil predicate on the "customer_id" field.
func CustomerIDNotNil() predicate.Organization {
	return predicate.Organization(sql.FieldNotNull(FieldCustomerID))
}

// CustomerIDEqualFold applies the EqualFold predicate on the "customer_id" field.
func CustomerIDEqualFold(v string) predicate.Organization {
	return predicate.Organization(sql.FieldEqualFold(FieldCustomerID, v))
}

// CustomerIDContainsFold applies the ContainsFold predicate on the "customer_id" field.
func CustomerIDContainsFold(v string) predicate.Organization {
	return predicate.Organization(sql.FieldContainsFold(FieldCustomerID, v))
}

// SubscriptionStatusEQ applies the EQ predicate on the "subscription_status" field.
func SubscriptionStatusEQ(v SubscriptionStatus) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldSubscriptionStatus, v))
}

// SubscriptionStatusNEQ applies the NEQ predicate on the "subscription_status" field.
func SubscriptionStatusNEQ(v SubscriptionStatus) predicate.Organization {
	return predicate.Organization(sql.FieldNEQ(FieldSubscriptionStatus, v))
}

// SubscriptionStatusIn applies the In predicate on the "subscription_status" field.
func SubscriptionStatusIn(vs ...SubscriptionStatus) predicate.Organization {
	return predicate.Organization(sql.FieldIn(FieldSubscriptionStatus, vs...))
}

// SubscriptionStatusNotIn applies the NotIn predicate on the "subscription_status" field.
func SubscriptionStatusNotIn(vs ...SubscriptionStatus) predicate.Organization {
	return predicate.Organization(sql.FieldNotIn(FieldSubscriptionStatus, vs...))
}

// AuthServiceEnabledEQ applies the EQ predicate on the "auth_service_enabled" field.
func AuthServiceEnabledEQ(v bool) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldAuthServiceEnabled, v))
}

// AuthServiceEnabledNEQ applies the NEQ predicate on the "auth_service_enabled" field.
func AuthServiceEnabledNEQ(v bool) predicate.Organization {
	return predicate.Organization(sql.FieldNEQ(FieldAuthServiceEnabled, v))
}

// AuthConfigIsNil applies the IsNil predicate on the "auth_config" field.
func AuthConfigIsNil() predicate.Organization {
	return predicate.Organization(sql.FieldIsNull(FieldAuthConfig))
}

// AuthConfigNotNil applies the NotNil predicate on the "auth_config" field.
func AuthConfigNotNil() predicate.Organization {
	return predicate.Organization(sql.FieldNotNull(FieldAuthConfig))
}

// AuthDomainEQ applies the EQ predicate on the "auth_domain" field.
func AuthDomainEQ(v string) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldAuthDomain, v))
}

// AuthDomainNEQ applies the NEQ predicate on the "auth_domain" field.
func AuthDomainNEQ(v string) predicate.Organization {
	return predicate.Organization(sql.FieldNEQ(FieldAuthDomain, v))
}

// AuthDomainIn applies the In predicate on the "auth_domain" field.
func AuthDomainIn(vs ...string) predicate.Organization {
	return predicate.Organization(sql.FieldIn(FieldAuthDomain, vs...))
}

// AuthDomainNotIn applies the NotIn predicate on the "auth_domain" field.
func AuthDomainNotIn(vs ...string) predicate.Organization {
	return predicate.Organization(sql.FieldNotIn(FieldAuthDomain, vs...))
}

// AuthDomainGT applies the GT predicate on the "auth_domain" field.
func AuthDomainGT(v string) predicate.Organization {
	return predicate.Organization(sql.FieldGT(FieldAuthDomain, v))
}

// AuthDomainGTE applies the GTE predicate on the "auth_domain" field.
func AuthDomainGTE(v string) predicate.Organization {
	return predicate.Organization(sql.FieldGTE(FieldAuthDomain, v))
}

// AuthDomainLT applies the LT predicate on the "auth_domain" field.
func AuthDomainLT(v string) predicate.Organization {
	return predicate.Organization(sql.FieldLT(FieldAuthDomain, v))
}

// AuthDomainLTE applies the LTE predicate on the "auth_domain" field.
func AuthDomainLTE(v string) predicate.Organization {
	return predicate.Organization(sql.FieldLTE(FieldAuthDomain, v))
}

// AuthDomainContains applies the Contains predicate on the "auth_domain" field.
func AuthDomainContains(v string) predicate.Organization {
	return predicate.Organization(sql.FieldContains(FieldAuthDomain, v))
}

// AuthDomainHasPrefix applies the HasPrefix predicate on the "auth_domain" field.
func AuthDomainHasPrefix(v string) predicate.Organization {
	return predicate.Organization(sql.FieldHasPrefix(FieldAuthDomain, v))
}

// AuthDomainHasSuffix applies the HasSuffix predicate on the "auth_domain" field.
func AuthDomainHasSuffix(v string) predicate.Organization {
	return predicate.Organization(sql.FieldHasSuffix(FieldAuthDomain, v))
}

// AuthDomainIsNil applies the IsNil predicate on the "auth_domain" field.
func AuthDomainIsNil() predicate.Organization {
	return predicate.Organization(sql.FieldIsNull(FieldAuthDomain))
}

// AuthDomainNotNil applies the NotNil predicate on the "auth_domain" field.
func AuthDomainNotNil() predicate.Organization {
	return predicate.Organization(sql.FieldNotNull(FieldAuthDomain))
}

// AuthDomainEqualFold applies the EqualFold predicate on the "auth_domain" field.
func AuthDomainEqualFold(v string) predicate.Organization {
	return predicate.Organization(sql.FieldEqualFold(FieldAuthDomain, v))
}

// AuthDomainContainsFold applies the ContainsFold predicate on the "auth_domain" field.
func AuthDomainContainsFold(v string) predicate.Organization {
	return predicate.Organization(sql.FieldContainsFold(FieldAuthDomain, v))
}

// APIRequestLimitEQ applies the EQ predicate on the "api_request_limit" field.
func APIRequestLimitEQ(v int) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldAPIRequestLimit, v))
}

// APIRequestLimitNEQ applies the NEQ predicate on the "api_request_limit" field.
func APIRequestLimitNEQ(v int) predicate.Organization {
	return predicate.Organization(sql.FieldNEQ(FieldAPIRequestLimit, v))
}

// APIRequestLimitIn applies the In predicate on the "api_request_limit" field.
func APIRequestLimitIn(vs ...int) predicate.Organization {
	return predicate.Organization(sql.FieldIn(FieldAPIRequestLimit, vs...))
}

// APIRequestLimitNotIn applies the NotIn predicate on the "api_request_limit" field.
func APIRequestLimitNotIn(vs ...int) predicate.Organization {
	return predicate.Organization(sql.FieldNotIn(FieldAPIRequestLimit, vs...))
}

// APIRequestLimitGT applies the GT predicate on the "api_request_limit" field.
func APIRequestLimitGT(v int) predicate.Organization {
	return predicate.Organization(sql.FieldGT(FieldAPIRequestLimit, v))
}

// APIRequestLimitGTE applies the GTE predicate on the "api_request_limit" field.
func APIRequestLimitGTE(v int) predicate.Organization {
	return predicate.Organization(sql.FieldGTE(FieldAPIRequestLimit, v))
}

// APIRequestLimitLT applies the LT predicate on the "api_request_limit" field.
func APIRequestLimitLT(v int) predicate.Organization {
	return predicate.Organization(sql.FieldLT(FieldAPIRequestLimit, v))
}

// APIRequestLimitLTE applies the LTE predicate on the "api_request_limit" field.
func APIRequestLimitLTE(v int) predicate.Organization {
	return predicate.Organization(sql.FieldLTE(FieldAPIRequestLimit, v))
}

// APIRequestsUsedEQ applies the EQ predicate on the "api_requests_used" field.
func APIRequestsUsedEQ(v int) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldAPIRequestsUsed, v))
}

// APIRequestsUsedNEQ applies the NEQ predicate on the "api_requests_used" field.
func APIRequestsUsedNEQ(v int) predicate.Organization {
	return predicate.Organization(sql.FieldNEQ(FieldAPIRequestsUsed, v))
}

// APIRequestsUsedIn applies the In predicate on the "api_requests_used" field.
func APIRequestsUsedIn(vs ...int) predicate.Organization {
	return predicate.Organization(sql.FieldIn(FieldAPIRequestsUsed, vs...))
}

// APIRequestsUsedNotIn applies the NotIn predicate on the "api_requests_used" field.
func APIRequestsUsedNotIn(vs ...int) predicate.Organization {
	return predicate.Organization(sql.FieldNotIn(FieldAPIRequestsUsed, vs...))
}

// APIRequestsUsedGT applies the GT predicate on the "api_requests_used" field.
func APIRequestsUsedGT(v int) predicate.Organization {
	return predicate.Organization(sql.FieldGT(FieldAPIRequestsUsed, v))
}

// APIRequestsUsedGTE applies the GTE predicate on the "api_requests_used" field.
func APIRequestsUsedGTE(v int) predicate.Organization {
	return predicate.Organization(sql.FieldGTE(FieldAPIRequestsUsed, v))
}

// APIRequestsUsedLT applies the LT predicate on the "api_requests_used" field.
func APIRequestsUsedLT(v int) predicate.Organization {
	return predicate.Organization(sql.FieldLT(FieldAPIRequestsUsed, v))
}

// APIRequestsUsedLTE applies the LTE predicate on the "api_requests_used" field.
func APIRequestsUsedLTE(v int) predicate.Organization {
	return predicate.Organization(sql.FieldLTE(FieldAPIRequestsUsed, v))
}

// CurrentExternalUsersEQ applies the EQ predicate on the "current_external_users" field.
func CurrentExternalUsersEQ(v int) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldCurrentExternalUsers, v))
}

// CurrentExternalUsersNEQ applies the NEQ predicate on the "current_external_users" field.
func CurrentExternalUsersNEQ(v int) predicate.Organization {
	return predicate.Organization(sql.FieldNEQ(FieldCurrentExternalUsers, v))
}

// CurrentExternalUsersIn applies the In predicate on the "current_external_users" field.
func CurrentExternalUsersIn(vs ...int) predicate.Organization {
	return predicate.Organization(sql.FieldIn(FieldCurrentExternalUsers, vs...))
}

// CurrentExternalUsersNotIn applies the NotIn predicate on the "current_external_users" field.
func CurrentExternalUsersNotIn(vs ...int) predicate.Organization {
	return predicate.Organization(sql.FieldNotIn(FieldCurrentExternalUsers, vs...))
}

// CurrentExternalUsersGT applies the GT predicate on the "current_external_users" field.
func CurrentExternalUsersGT(v int) predicate.Organization {
	return predicate.Organization(sql.FieldGT(FieldCurrentExternalUsers, v))
}

// CurrentExternalUsersGTE applies the GTE predicate on the "current_external_users" field.
func CurrentExternalUsersGTE(v int) predicate.Organization {
	return predicate.Organization(sql.FieldGTE(FieldCurrentExternalUsers, v))
}

// CurrentExternalUsersLT applies the LT predicate on the "current_external_users" field.
func CurrentExternalUsersLT(v int) predicate.Organization {
	return predicate.Organization(sql.FieldLT(FieldCurrentExternalUsers, v))
}

// CurrentExternalUsersLTE applies the LTE predicate on the "current_external_users" field.
func CurrentExternalUsersLTE(v int) predicate.Organization {
	return predicate.Organization(sql.FieldLTE(FieldCurrentExternalUsers, v))
}

// CurrentEndUsersEQ applies the EQ predicate on the "current_end_users" field.
func CurrentEndUsersEQ(v int) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldCurrentEndUsers, v))
}

// CurrentEndUsersNEQ applies the NEQ predicate on the "current_end_users" field.
func CurrentEndUsersNEQ(v int) predicate.Organization {
	return predicate.Organization(sql.FieldNEQ(FieldCurrentEndUsers, v))
}

// CurrentEndUsersIn applies the In predicate on the "current_end_users" field.
func CurrentEndUsersIn(vs ...int) predicate.Organization {
	return predicate.Organization(sql.FieldIn(FieldCurrentEndUsers, vs...))
}

// CurrentEndUsersNotIn applies the NotIn predicate on the "current_end_users" field.
func CurrentEndUsersNotIn(vs ...int) predicate.Organization {
	return predicate.Organization(sql.FieldNotIn(FieldCurrentEndUsers, vs...))
}

// CurrentEndUsersGT applies the GT predicate on the "current_end_users" field.
func CurrentEndUsersGT(v int) predicate.Organization {
	return predicate.Organization(sql.FieldGT(FieldCurrentEndUsers, v))
}

// CurrentEndUsersGTE applies the GTE predicate on the "current_end_users" field.
func CurrentEndUsersGTE(v int) predicate.Organization {
	return predicate.Organization(sql.FieldGTE(FieldCurrentEndUsers, v))
}

// CurrentEndUsersLT applies the LT predicate on the "current_end_users" field.
func CurrentEndUsersLT(v int) predicate.Organization {
	return predicate.Organization(sql.FieldLT(FieldCurrentEndUsers, v))
}

// CurrentEndUsersLTE applies the LTE predicate on the "current_end_users" field.
func CurrentEndUsersLTE(v int) predicate.Organization {
	return predicate.Organization(sql.FieldLTE(FieldCurrentEndUsers, v))
}

// HasUsers applies the HasEdge predicate on the "users" edge.
func HasUsers() predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UsersTable, UsersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUsersWith applies the HasEdge predicate on the "users" edge with a given conditions (other predicates).
func HasUsersWith(preds ...predicate.User) predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := newUsersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMemberships applies the HasEdge predicate on the "memberships" edge.
func HasMemberships() predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MembershipsTable, MembershipsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMembershipsWith applies the HasEdge predicate on the "memberships" edge with a given conditions (other predicates).
func HasMembershipsWith(preds ...predicate.Membership) predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := newMembershipsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSmsTemplates applies the HasEdge predicate on the "sms_templates" edge.
func HasSmsTemplates() predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SmsTemplatesTable, SmsTemplatesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSmsTemplatesWith applies the HasEdge predicate on the "sms_templates" edge with a given conditions (other predicates).
func HasSmsTemplatesWith(preds ...predicate.SMSTemplate) predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := newSmsTemplatesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEmailTemplates applies the HasEdge predicate on the "email_templates" edge.
func HasEmailTemplates() predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EmailTemplatesTable, EmailTemplatesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEmailTemplatesWith applies the HasEdge predicate on the "email_templates" edge with a given conditions (other predicates).
func HasEmailTemplatesWith(preds ...predicate.EmailTemplate) predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := newEmailTemplatesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAPIKeys applies the HasEdge predicate on the "api_keys" edge.
func HasAPIKeys() predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, APIKeysTable, APIKeysColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAPIKeysWith applies the HasEdge predicate on the "api_keys" edge with a given conditions (other predicates).
func HasAPIKeysWith(preds ...predicate.ApiKey) predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := newAPIKeysStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasWebhooks applies the HasEdge predicate on the "webhooks" edge.
func HasWebhooks() predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, WebhooksTable, WebhooksColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWebhooksWith applies the HasEdge predicate on the "webhooks" edge with a given conditions (other predicates).
func HasWebhooksWith(preds ...predicate.Webhook) predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := newWebhooksStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFeatureFlags applies the HasEdge predicate on the "feature_flags" edge.
func HasFeatureFlags() predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, FeatureFlagsTable, FeatureFlagsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFeatureFlagsWith applies the HasEdge predicate on the "feature_flags" edge with a given conditions (other predicates).
func HasFeatureFlagsWith(preds ...predicate.OrganizationFeature) predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := newFeatureFlagsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasIdentityProviders applies the HasEdge predicate on the "identity_providers" edge.
func HasIdentityProviders() predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, IdentityProvidersTable, IdentityProvidersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasIdentityProvidersWith applies the HasEdge predicate on the "identity_providers" edge with a given conditions (other predicates).
func HasIdentityProvidersWith(preds ...predicate.IdentityProvider) predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := newIdentityProvidersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOauthClients applies the HasEdge predicate on the "oauth_clients" edge.
func HasOauthClients() predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OauthClientsTable, OauthClientsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOauthClientsWith applies the HasEdge predicate on the "oauth_clients" edge with a given conditions (other predicates).
func HasOauthClientsWith(preds ...predicate.OAuthClient) predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := newOauthClientsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRoles applies the HasEdge predicate on the "roles" edge.
func HasRoles() predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RolesTable, RolesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRolesWith applies the HasEdge predicate on the "roles" edge with a given conditions (other predicates).
func HasRolesWith(preds ...predicate.Role) predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := newRolesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUserRoleContexts applies the HasEdge predicate on the "user_role_contexts" edge.
func HasUserRoleContexts() predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, UserRoleContextsTable, UserRoleContextsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserRoleContextsWith applies the HasEdge predicate on the "user_role_contexts" edge with a given conditions (other predicates).
func HasUserRoleContextsWith(preds ...predicate.UserRole) predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := newUserRoleContextsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUserPermissionContexts applies the HasEdge predicate on the "user_permission_contexts" edge.
func HasUserPermissionContexts() predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, UserPermissionContextsTable, UserPermissionContextsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserPermissionContextsWith applies the HasEdge predicate on the "user_permission_contexts" edge with a given conditions (other predicates).
func HasUserPermissionContextsWith(preds ...predicate.UserPermission) predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := newUserPermissionContextsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAuditLogs applies the HasEdge predicate on the "audit_logs" edge.
func HasAuditLogs() predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AuditLogsTable, AuditLogsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAuditLogsWith applies the HasEdge predicate on the "audit_logs" edge with a given conditions (other predicates).
func HasAuditLogsWith(preds ...predicate.Audit) predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := newAuditLogsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrganizationProviders applies the HasEdge predicate on the "organization_providers" edge.
func HasOrganizationProviders() predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrganizationProvidersTable, OrganizationProvidersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrganizationProvidersWith applies the HasEdge predicate on the "organization_providers" edge with a given conditions (other predicates).
func HasOrganizationProvidersWith(preds ...predicate.OrganizationProvider) predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := newOrganizationProvidersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasActivities applies the HasEdge predicate on the "activities" edge.
func HasActivities() predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ActivitiesTable, ActivitiesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasActivitiesWith applies the HasEdge predicate on the "activities" edge with a given conditions (other predicates).
func HasActivitiesWith(preds ...predicate.Activity) predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := newActivitiesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Organization) predicate.Organization {
	return predicate.Organization(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Organization) predicate.Organization {
	return predicate.Organization(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Organization) predicate.Organization {
	return predicate.Organization(sql.NotPredicates(p))
}
