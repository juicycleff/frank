// Code generated by ent, DO NOT EDIT.

package organization

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/juicycleff/frank/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Organization {
	return predicate.Organization(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Organization {
	return predicate.Organization(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Organization {
	return predicate.Organization(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Organization {
	return predicate.Organization(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Organization {
	return predicate.Organization(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Organization {
	return predicate.Organization(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Organization {
	return predicate.Organization(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Organization {
	return predicate.Organization(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Organization {
	return predicate.Organization(sql.FieldContainsFold(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldUpdatedAt, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldName, v))
}

// Slug applies equality check predicate on the "slug" field. It's identical to SlugEQ.
func Slug(v string) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldSlug, v))
}

// Domain applies equality check predicate on the "domain" field. It's identical to DomainEQ.
func Domain(v string) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldDomain, v))
}

// LogoURL applies equality check predicate on the "logo_url" field. It's identical to LogoURLEQ.
func LogoURL(v string) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldLogoURL, v))
}

// Plan applies equality check predicate on the "plan" field. It's identical to PlanEQ.
func Plan(v string) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldPlan, v))
}

// Active applies equality check predicate on the "active" field. It's identical to ActiveEQ.
func Active(v bool) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldActive, v))
}

// TrialEndsAt applies equality check predicate on the "trial_ends_at" field. It's identical to TrialEndsAtEQ.
func TrialEndsAt(v time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldTrialEndsAt, v))
}

// TrialUsed applies equality check predicate on the "trial_used" field. It's identical to TrialUsedEQ.
func TrialUsed(v bool) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldTrialUsed, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldLTE(FieldUpdatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Organization {
	return predicate.Organization(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Organization {
	return predicate.Organization(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Organization {
	return predicate.Organization(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Organization {
	return predicate.Organization(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Organization {
	return predicate.Organization(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Organization {
	return predicate.Organization(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Organization {
	return predicate.Organization(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Organization {
	return predicate.Organization(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Organization {
	return predicate.Organization(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Organization {
	return predicate.Organization(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Organization {
	return predicate.Organization(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Organization {
	return predicate.Organization(sql.FieldContainsFold(FieldName, v))
}

// SlugEQ applies the EQ predicate on the "slug" field.
func SlugEQ(v string) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldSlug, v))
}

// SlugNEQ applies the NEQ predicate on the "slug" field.
func SlugNEQ(v string) predicate.Organization {
	return predicate.Organization(sql.FieldNEQ(FieldSlug, v))
}

// SlugIn applies the In predicate on the "slug" field.
func SlugIn(vs ...string) predicate.Organization {
	return predicate.Organization(sql.FieldIn(FieldSlug, vs...))
}

// SlugNotIn applies the NotIn predicate on the "slug" field.
func SlugNotIn(vs ...string) predicate.Organization {
	return predicate.Organization(sql.FieldNotIn(FieldSlug, vs...))
}

// SlugGT applies the GT predicate on the "slug" field.
func SlugGT(v string) predicate.Organization {
	return predicate.Organization(sql.FieldGT(FieldSlug, v))
}

// SlugGTE applies the GTE predicate on the "slug" field.
func SlugGTE(v string) predicate.Organization {
	return predicate.Organization(sql.FieldGTE(FieldSlug, v))
}

// SlugLT applies the LT predicate on the "slug" field.
func SlugLT(v string) predicate.Organization {
	return predicate.Organization(sql.FieldLT(FieldSlug, v))
}

// SlugLTE applies the LTE predicate on the "slug" field.
func SlugLTE(v string) predicate.Organization {
	return predicate.Organization(sql.FieldLTE(FieldSlug, v))
}

// SlugContains applies the Contains predicate on the "slug" field.
func SlugContains(v string) predicate.Organization {
	return predicate.Organization(sql.FieldContains(FieldSlug, v))
}

// SlugHasPrefix applies the HasPrefix predicate on the "slug" field.
func SlugHasPrefix(v string) predicate.Organization {
	return predicate.Organization(sql.FieldHasPrefix(FieldSlug, v))
}

// SlugHasSuffix applies the HasSuffix predicate on the "slug" field.
func SlugHasSuffix(v string) predicate.Organization {
	return predicate.Organization(sql.FieldHasSuffix(FieldSlug, v))
}

// SlugEqualFold applies the EqualFold predicate on the "slug" field.
func SlugEqualFold(v string) predicate.Organization {
	return predicate.Organization(sql.FieldEqualFold(FieldSlug, v))
}

// SlugContainsFold applies the ContainsFold predicate on the "slug" field.
func SlugContainsFold(v string) predicate.Organization {
	return predicate.Organization(sql.FieldContainsFold(FieldSlug, v))
}

// DomainEQ applies the EQ predicate on the "domain" field.
func DomainEQ(v string) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldDomain, v))
}

// DomainNEQ applies the NEQ predicate on the "domain" field.
func DomainNEQ(v string) predicate.Organization {
	return predicate.Organization(sql.FieldNEQ(FieldDomain, v))
}

// DomainIn applies the In predicate on the "domain" field.
func DomainIn(vs ...string) predicate.Organization {
	return predicate.Organization(sql.FieldIn(FieldDomain, vs...))
}

// DomainNotIn applies the NotIn predicate on the "domain" field.
func DomainNotIn(vs ...string) predicate.Organization {
	return predicate.Organization(sql.FieldNotIn(FieldDomain, vs...))
}

// DomainGT applies the GT predicate on the "domain" field.
func DomainGT(v string) predicate.Organization {
	return predicate.Organization(sql.FieldGT(FieldDomain, v))
}

// DomainGTE applies the GTE predicate on the "domain" field.
func DomainGTE(v string) predicate.Organization {
	return predicate.Organization(sql.FieldGTE(FieldDomain, v))
}

// DomainLT applies the LT predicate on the "domain" field.
func DomainLT(v string) predicate.Organization {
	return predicate.Organization(sql.FieldLT(FieldDomain, v))
}

// DomainLTE applies the LTE predicate on the "domain" field.
func DomainLTE(v string) predicate.Organization {
	return predicate.Organization(sql.FieldLTE(FieldDomain, v))
}

// DomainContains applies the Contains predicate on the "domain" field.
func DomainContains(v string) predicate.Organization {
	return predicate.Organization(sql.FieldContains(FieldDomain, v))
}

// DomainHasPrefix applies the HasPrefix predicate on the "domain" field.
func DomainHasPrefix(v string) predicate.Organization {
	return predicate.Organization(sql.FieldHasPrefix(FieldDomain, v))
}

// DomainHasSuffix applies the HasSuffix predicate on the "domain" field.
func DomainHasSuffix(v string) predicate.Organization {
	return predicate.Organization(sql.FieldHasSuffix(FieldDomain, v))
}

// DomainIsNil applies the IsNil predicate on the "domain" field.
func DomainIsNil() predicate.Organization {
	return predicate.Organization(sql.FieldIsNull(FieldDomain))
}

// DomainNotNil applies the NotNil predicate on the "domain" field.
func DomainNotNil() predicate.Organization {
	return predicate.Organization(sql.FieldNotNull(FieldDomain))
}

// DomainEqualFold applies the EqualFold predicate on the "domain" field.
func DomainEqualFold(v string) predicate.Organization {
	return predicate.Organization(sql.FieldEqualFold(FieldDomain, v))
}

// DomainContainsFold applies the ContainsFold predicate on the "domain" field.
func DomainContainsFold(v string) predicate.Organization {
	return predicate.Organization(sql.FieldContainsFold(FieldDomain, v))
}

// LogoURLEQ applies the EQ predicate on the "logo_url" field.
func LogoURLEQ(v string) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldLogoURL, v))
}

// LogoURLNEQ applies the NEQ predicate on the "logo_url" field.
func LogoURLNEQ(v string) predicate.Organization {
	return predicate.Organization(sql.FieldNEQ(FieldLogoURL, v))
}

// LogoURLIn applies the In predicate on the "logo_url" field.
func LogoURLIn(vs ...string) predicate.Organization {
	return predicate.Organization(sql.FieldIn(FieldLogoURL, vs...))
}

// LogoURLNotIn applies the NotIn predicate on the "logo_url" field.
func LogoURLNotIn(vs ...string) predicate.Organization {
	return predicate.Organization(sql.FieldNotIn(FieldLogoURL, vs...))
}

// LogoURLGT applies the GT predicate on the "logo_url" field.
func LogoURLGT(v string) predicate.Organization {
	return predicate.Organization(sql.FieldGT(FieldLogoURL, v))
}

// LogoURLGTE applies the GTE predicate on the "logo_url" field.
func LogoURLGTE(v string) predicate.Organization {
	return predicate.Organization(sql.FieldGTE(FieldLogoURL, v))
}

// LogoURLLT applies the LT predicate on the "logo_url" field.
func LogoURLLT(v string) predicate.Organization {
	return predicate.Organization(sql.FieldLT(FieldLogoURL, v))
}

// LogoURLLTE applies the LTE predicate on the "logo_url" field.
func LogoURLLTE(v string) predicate.Organization {
	return predicate.Organization(sql.FieldLTE(FieldLogoURL, v))
}

// LogoURLContains applies the Contains predicate on the "logo_url" field.
func LogoURLContains(v string) predicate.Organization {
	return predicate.Organization(sql.FieldContains(FieldLogoURL, v))
}

// LogoURLHasPrefix applies the HasPrefix predicate on the "logo_url" field.
func LogoURLHasPrefix(v string) predicate.Organization {
	return predicate.Organization(sql.FieldHasPrefix(FieldLogoURL, v))
}

// LogoURLHasSuffix applies the HasSuffix predicate on the "logo_url" field.
func LogoURLHasSuffix(v string) predicate.Organization {
	return predicate.Organization(sql.FieldHasSuffix(FieldLogoURL, v))
}

// LogoURLIsNil applies the IsNil predicate on the "logo_url" field.
func LogoURLIsNil() predicate.Organization {
	return predicate.Organization(sql.FieldIsNull(FieldLogoURL))
}

// LogoURLNotNil applies the NotNil predicate on the "logo_url" field.
func LogoURLNotNil() predicate.Organization {
	return predicate.Organization(sql.FieldNotNull(FieldLogoURL))
}

// LogoURLEqualFold applies the EqualFold predicate on the "logo_url" field.
func LogoURLEqualFold(v string) predicate.Organization {
	return predicate.Organization(sql.FieldEqualFold(FieldLogoURL, v))
}

// LogoURLContainsFold applies the ContainsFold predicate on the "logo_url" field.
func LogoURLContainsFold(v string) predicate.Organization {
	return predicate.Organization(sql.FieldContainsFold(FieldLogoURL, v))
}

// PlanEQ applies the EQ predicate on the "plan" field.
func PlanEQ(v string) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldPlan, v))
}

// PlanNEQ applies the NEQ predicate on the "plan" field.
func PlanNEQ(v string) predicate.Organization {
	return predicate.Organization(sql.FieldNEQ(FieldPlan, v))
}

// PlanIn applies the In predicate on the "plan" field.
func PlanIn(vs ...string) predicate.Organization {
	return predicate.Organization(sql.FieldIn(FieldPlan, vs...))
}

// PlanNotIn applies the NotIn predicate on the "plan" field.
func PlanNotIn(vs ...string) predicate.Organization {
	return predicate.Organization(sql.FieldNotIn(FieldPlan, vs...))
}

// PlanGT applies the GT predicate on the "plan" field.
func PlanGT(v string) predicate.Organization {
	return predicate.Organization(sql.FieldGT(FieldPlan, v))
}

// PlanGTE applies the GTE predicate on the "plan" field.
func PlanGTE(v string) predicate.Organization {
	return predicate.Organization(sql.FieldGTE(FieldPlan, v))
}

// PlanLT applies the LT predicate on the "plan" field.
func PlanLT(v string) predicate.Organization {
	return predicate.Organization(sql.FieldLT(FieldPlan, v))
}

// PlanLTE applies the LTE predicate on the "plan" field.
func PlanLTE(v string) predicate.Organization {
	return predicate.Organization(sql.FieldLTE(FieldPlan, v))
}

// PlanContains applies the Contains predicate on the "plan" field.
func PlanContains(v string) predicate.Organization {
	return predicate.Organization(sql.FieldContains(FieldPlan, v))
}

// PlanHasPrefix applies the HasPrefix predicate on the "plan" field.
func PlanHasPrefix(v string) predicate.Organization {
	return predicate.Organization(sql.FieldHasPrefix(FieldPlan, v))
}

// PlanHasSuffix applies the HasSuffix predicate on the "plan" field.
func PlanHasSuffix(v string) predicate.Organization {
	return predicate.Organization(sql.FieldHasSuffix(FieldPlan, v))
}

// PlanEqualFold applies the EqualFold predicate on the "plan" field.
func PlanEqualFold(v string) predicate.Organization {
	return predicate.Organization(sql.FieldEqualFold(FieldPlan, v))
}

// PlanContainsFold applies the ContainsFold predicate on the "plan" field.
func PlanContainsFold(v string) predicate.Organization {
	return predicate.Organization(sql.FieldContainsFold(FieldPlan, v))
}

// ActiveEQ applies the EQ predicate on the "active" field.
func ActiveEQ(v bool) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldActive, v))
}

// ActiveNEQ applies the NEQ predicate on the "active" field.
func ActiveNEQ(v bool) predicate.Organization {
	return predicate.Organization(sql.FieldNEQ(FieldActive, v))
}

// MetadataIsNil applies the IsNil predicate on the "metadata" field.
func MetadataIsNil() predicate.Organization {
	return predicate.Organization(sql.FieldIsNull(FieldMetadata))
}

// MetadataNotNil applies the NotNil predicate on the "metadata" field.
func MetadataNotNil() predicate.Organization {
	return predicate.Organization(sql.FieldNotNull(FieldMetadata))
}

// TrialEndsAtEQ applies the EQ predicate on the "trial_ends_at" field.
func TrialEndsAtEQ(v time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldTrialEndsAt, v))
}

// TrialEndsAtNEQ applies the NEQ predicate on the "trial_ends_at" field.
func TrialEndsAtNEQ(v time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldNEQ(FieldTrialEndsAt, v))
}

// TrialEndsAtIn applies the In predicate on the "trial_ends_at" field.
func TrialEndsAtIn(vs ...time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldIn(FieldTrialEndsAt, vs...))
}

// TrialEndsAtNotIn applies the NotIn predicate on the "trial_ends_at" field.
func TrialEndsAtNotIn(vs ...time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldNotIn(FieldTrialEndsAt, vs...))
}

// TrialEndsAtGT applies the GT predicate on the "trial_ends_at" field.
func TrialEndsAtGT(v time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldGT(FieldTrialEndsAt, v))
}

// TrialEndsAtGTE applies the GTE predicate on the "trial_ends_at" field.
func TrialEndsAtGTE(v time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldGTE(FieldTrialEndsAt, v))
}

// TrialEndsAtLT applies the LT predicate on the "trial_ends_at" field.
func TrialEndsAtLT(v time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldLT(FieldTrialEndsAt, v))
}

// TrialEndsAtLTE applies the LTE predicate on the "trial_ends_at" field.
func TrialEndsAtLTE(v time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldLTE(FieldTrialEndsAt, v))
}

// TrialEndsAtIsNil applies the IsNil predicate on the "trial_ends_at" field.
func TrialEndsAtIsNil() predicate.Organization {
	return predicate.Organization(sql.FieldIsNull(FieldTrialEndsAt))
}

// TrialEndsAtNotNil applies the NotNil predicate on the "trial_ends_at" field.
func TrialEndsAtNotNil() predicate.Organization {
	return predicate.Organization(sql.FieldNotNull(FieldTrialEndsAt))
}

// TrialUsedEQ applies the EQ predicate on the "trial_used" field.
func TrialUsedEQ(v bool) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldTrialUsed, v))
}

// TrialUsedNEQ applies the NEQ predicate on the "trial_used" field.
func TrialUsedNEQ(v bool) predicate.Organization {
	return predicate.Organization(sql.FieldNEQ(FieldTrialUsed, v))
}

// HasUsers applies the HasEdge predicate on the "users" edge.
func HasUsers() predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, UsersTable, UsersPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUsersWith applies the HasEdge predicate on the "users" edge with a given conditions (other predicates).
func HasUsersWith(preds ...predicate.User) predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := newUsersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAPIKeys applies the HasEdge predicate on the "api_keys" edge.
func HasAPIKeys() predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, APIKeysTable, APIKeysColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAPIKeysWith applies the HasEdge predicate on the "api_keys" edge with a given conditions (other predicates).
func HasAPIKeysWith(preds ...predicate.ApiKey) predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := newAPIKeysStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasWebhooks applies the HasEdge predicate on the "webhooks" edge.
func HasWebhooks() predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, WebhooksTable, WebhooksColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWebhooksWith applies the HasEdge predicate on the "webhooks" edge with a given conditions (other predicates).
func HasWebhooksWith(preds ...predicate.Webhook) predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := newWebhooksStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFeatureFlags applies the HasEdge predicate on the "feature_flags" edge.
func HasFeatureFlags() predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, FeatureFlagsTable, FeatureFlagsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFeatureFlagsWith applies the HasEdge predicate on the "feature_flags" edge with a given conditions (other predicates).
func HasFeatureFlagsWith(preds ...predicate.OrganizationFeature) predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := newFeatureFlagsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasIdentityProviders applies the HasEdge predicate on the "identity_providers" edge.
func HasIdentityProviders() predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, IdentityProvidersTable, IdentityProvidersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasIdentityProvidersWith applies the HasEdge predicate on the "identity_providers" edge with a given conditions (other predicates).
func HasIdentityProvidersWith(preds ...predicate.IdentityProvider) predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := newIdentityProvidersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOauthClients applies the HasEdge predicate on the "oauth_clients" edge.
func HasOauthClients() predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OauthClientsTable, OauthClientsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOauthClientsWith applies the HasEdge predicate on the "oauth_clients" edge with a given conditions (other predicates).
func HasOauthClientsWith(preds ...predicate.OAuthClient) predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := newOauthClientsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Organization) predicate.Organization {
	return predicate.Organization(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Organization) predicate.Organization {
	return predicate.Organization(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Organization) predicate.Organization {
	return predicate.Organization(sql.NotPredicates(p))
}
