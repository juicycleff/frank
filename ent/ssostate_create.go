// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/juicycleff/frank/ent/ssostate"
)

// SSOStateCreate is the builder for creating a SSOState entity.
type SSOStateCreate struct {
	config
	mutation *SSOStateMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (ssc *SSOStateCreate) SetCreatedAt(t time.Time) *SSOStateCreate {
	ssc.mutation.SetCreatedAt(t)
	return ssc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ssc *SSOStateCreate) SetNillableCreatedAt(t *time.Time) *SSOStateCreate {
	if t != nil {
		ssc.SetCreatedAt(*t)
	}
	return ssc
}

// SetUpdatedAt sets the "updated_at" field.
func (ssc *SSOStateCreate) SetUpdatedAt(t time.Time) *SSOStateCreate {
	ssc.mutation.SetUpdatedAt(t)
	return ssc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ssc *SSOStateCreate) SetNillableUpdatedAt(t *time.Time) *SSOStateCreate {
	if t != nil {
		ssc.SetUpdatedAt(*t)
	}
	return ssc
}

// SetState sets the "state" field.
func (ssc *SSOStateCreate) SetState(s string) *SSOStateCreate {
	ssc.mutation.SetState(s)
	return ssc
}

// SetData sets the "data" field.
func (ssc *SSOStateCreate) SetData(s string) *SSOStateCreate {
	ssc.mutation.SetData(s)
	return ssc
}

// SetExpiresAt sets the "expires_at" field.
func (ssc *SSOStateCreate) SetExpiresAt(t time.Time) *SSOStateCreate {
	ssc.mutation.SetExpiresAt(t)
	return ssc
}

// SetID sets the "id" field.
func (ssc *SSOStateCreate) SetID(s string) *SSOStateCreate {
	ssc.mutation.SetID(s)
	return ssc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ssc *SSOStateCreate) SetNillableID(s *string) *SSOStateCreate {
	if s != nil {
		ssc.SetID(*s)
	}
	return ssc
}

// Mutation returns the SSOStateMutation object of the builder.
func (ssc *SSOStateCreate) Mutation() *SSOStateMutation {
	return ssc.mutation
}

// Save creates the SSOState in the database.
func (ssc *SSOStateCreate) Save(ctx context.Context) (*SSOState, error) {
	ssc.defaults()
	return withHooks(ctx, ssc.sqlSave, ssc.mutation, ssc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ssc *SSOStateCreate) SaveX(ctx context.Context) *SSOState {
	v, err := ssc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ssc *SSOStateCreate) Exec(ctx context.Context) error {
	_, err := ssc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ssc *SSOStateCreate) ExecX(ctx context.Context) {
	if err := ssc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ssc *SSOStateCreate) defaults() {
	if _, ok := ssc.mutation.CreatedAt(); !ok {
		v := ssostate.DefaultCreatedAt()
		ssc.mutation.SetCreatedAt(v)
	}
	if _, ok := ssc.mutation.UpdatedAt(); !ok {
		v := ssostate.DefaultUpdatedAt()
		ssc.mutation.SetUpdatedAt(v)
	}
	if _, ok := ssc.mutation.ID(); !ok {
		v := ssostate.DefaultID()
		ssc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ssc *SSOStateCreate) check() error {
	if _, ok := ssc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "SSOState.created_at"`)}
	}
	if _, ok := ssc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "SSOState.updated_at"`)}
	}
	if _, ok := ssc.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New(`ent: missing required field "SSOState.state"`)}
	}
	if _, ok := ssc.mutation.Data(); !ok {
		return &ValidationError{Name: "data", err: errors.New(`ent: missing required field "SSOState.data"`)}
	}
	if v, ok := ssc.mutation.Data(); ok {
		if err := ssostate.DataValidator(v); err != nil {
			return &ValidationError{Name: "data", err: fmt.Errorf(`ent: validator failed for field "SSOState.data": %w`, err)}
		}
	}
	if _, ok := ssc.mutation.ExpiresAt(); !ok {
		return &ValidationError{Name: "expires_at", err: errors.New(`ent: missing required field "SSOState.expires_at"`)}
	}
	return nil
}

func (ssc *SSOStateCreate) sqlSave(ctx context.Context) (*SSOState, error) {
	if err := ssc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ssc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ssc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected SSOState.ID type: %T", _spec.ID.Value)
		}
	}
	ssc.mutation.id = &_node.ID
	ssc.mutation.done = true
	return _node, nil
}

func (ssc *SSOStateCreate) createSpec() (*SSOState, *sqlgraph.CreateSpec) {
	var (
		_node = &SSOState{config: ssc.config}
		_spec = sqlgraph.NewCreateSpec(ssostate.Table, sqlgraph.NewFieldSpec(ssostate.FieldID, field.TypeString))
	)
	if id, ok := ssc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ssc.mutation.CreatedAt(); ok {
		_spec.SetField(ssostate.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ssc.mutation.UpdatedAt(); ok {
		_spec.SetField(ssostate.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ssc.mutation.State(); ok {
		_spec.SetField(ssostate.FieldState, field.TypeString, value)
		_node.State = value
	}
	if value, ok := ssc.mutation.Data(); ok {
		_spec.SetField(ssostate.FieldData, field.TypeString, value)
		_node.Data = value
	}
	if value, ok := ssc.mutation.ExpiresAt(); ok {
		_spec.SetField(ssostate.FieldExpiresAt, field.TypeTime, value)
		_node.ExpiresAt = value
	}
	return _node, _spec
}

// SSOStateCreateBulk is the builder for creating many SSOState entities in bulk.
type SSOStateCreateBulk struct {
	config
	err      error
	builders []*SSOStateCreate
}

// Save creates the SSOState entities in the database.
func (sscb *SSOStateCreateBulk) Save(ctx context.Context) ([]*SSOState, error) {
	if sscb.err != nil {
		return nil, sscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sscb.builders))
	nodes := make([]*SSOState, len(sscb.builders))
	mutators := make([]Mutator, len(sscb.builders))
	for i := range sscb.builders {
		func(i int, root context.Context) {
			builder := sscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SSOStateMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sscb *SSOStateCreateBulk) SaveX(ctx context.Context) []*SSOState {
	v, err := sscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sscb *SSOStateCreateBulk) Exec(ctx context.Context) error {
	_, err := sscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sscb *SSOStateCreateBulk) ExecX(ctx context.Context) {
	if err := sscb.Exec(ctx); err != nil {
		panic(err)
	}
}
