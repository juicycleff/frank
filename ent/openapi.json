{
  "openapi": "3.0.3",
  "info": {
    "title": "Ent Schema API",
    "description": "This is an auto generated API description made out of an Ent schema definition",
    "version": "0.1.0"
  },
  "paths": {
    "/api-keys": {
      "get": {
        "tags": [
          "ApiKey"
        ],
        "summary": "List ApiKeys",
        "description": "List ApiKeys.",
        "operationId": "listApiKey",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result ApiKey list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiKeyList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "ApiKey"
        ],
        "summary": "Create a new ApiKey",
        "description": "Creates a new ApiKey and persists it to storage.",
        "operationId": "createApiKey",
        "requestBody": {
          "description": "ApiKey to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "created_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "updated_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "name": {
                    "type": "string"
                  },
                  "key": {
                    "type": "string"
                  },
                  "hashed_key": {
                    "type": "string"
                  },
                  "user_id": {
                    "type": "string"
                  },
                  "organization_id": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "active": {
                    "type": "boolean"
                  },
                  "permissions": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "scopes": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "metadata": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "object"
                    }
                  },
                  "last_used": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "expires_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "user": {
                    "type": "string"
                  },
                  "organization": {
                    "type": "string"
                  }
                },
                "required": [
                  "created_at",
                  "updated_at",
                  "name",
                  "key",
                  "hashed_key",
                  "type",
                  "active"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "ApiKey created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiKeyCreate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api-keys/{id}": {
      "get": {
        "tags": [
          "ApiKey"
        ],
        "summary": "Find a ApiKey by ID",
        "description": "Finds the ApiKey with the requested ID and returns it.",
        "operationId": "readApiKey",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the ApiKey",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ApiKey with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiKeyRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "ApiKey"
        ],
        "summary": "Deletes a ApiKey by ID",
        "description": "Deletes the ApiKey with the requested ID.",
        "operationId": "deleteApiKey",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the ApiKey",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "ApiKey with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "ApiKey"
        ],
        "summary": "Updates a ApiKey",
        "description": "Updates a ApiKey and persists changes to storage.",
        "operationId": "updateApiKey",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the ApiKey",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "ApiKey properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "updated_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "name": {
                    "type": "string"
                  },
                  "key": {
                    "type": "string"
                  },
                  "hashed_key": {
                    "type": "string"
                  },
                  "user_id": {
                    "type": "string"
                  },
                  "organization_id": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "active": {
                    "type": "boolean"
                  },
                  "permissions": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "scopes": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "metadata": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "object"
                    }
                  },
                  "last_used": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "expires_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "user": {
                    "type": "string"
                  },
                  "organization": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "ApiKey updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiKeyUpdate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api-keys/{id}/organization": {
      "get": {
        "tags": [
          "ApiKey"
        ],
        "summary": "Find the attached Organization",
        "description": "Find the attached Organization of the ApiKey with the given ID",
        "operationId": "readApiKeyOrganization",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the ApiKey",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Organization attached to ApiKey with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiKey_OrganizationRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api-keys/{id}/user": {
      "get": {
        "tags": [
          "ApiKey"
        ],
        "summary": "Find the attached User",
        "description": "Find the attached User of the ApiKey with the given ID",
        "operationId": "readApiKeyUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the ApiKey",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User attached to ApiKey with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiKey_UserRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/email-templates": {
      "get": {
        "tags": [
          "EmailTemplate"
        ],
        "summary": "List EmailTemplates",
        "description": "List EmailTemplates.",
        "operationId": "listEmailTemplate",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result EmailTemplate list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmailTemplateList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "EmailTemplate"
        ],
        "summary": "Create a new EmailTemplate",
        "description": "Creates a new EmailTemplate and persists it to storage.",
        "operationId": "createEmailTemplate",
        "requestBody": {
          "description": "EmailTemplate to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "created_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "updated_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "name": {
                    "type": "string"
                  },
                  "subject": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "html_content": {
                    "type": "string"
                  },
                  "text_content": {
                    "type": "string"
                  },
                  "organization_id": {
                    "type": "string"
                  },
                  "active": {
                    "type": "boolean"
                  },
                  "system": {
                    "type": "boolean"
                  },
                  "locale": {
                    "type": "string"
                  },
                  "metadata": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "object"
                    }
                  }
                },
                "required": [
                  "created_at",
                  "updated_at",
                  "name",
                  "subject",
                  "type",
                  "html_content",
                  "active",
                  "system",
                  "locale"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "EmailTemplate created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailTemplateCreate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/email-templates/{id}": {
      "get": {
        "tags": [
          "EmailTemplate"
        ],
        "summary": "Find a EmailTemplate by ID",
        "description": "Finds the EmailTemplate with the requested ID and returns it.",
        "operationId": "readEmailTemplate",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the EmailTemplate",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "EmailTemplate with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailTemplateRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "EmailTemplate"
        ],
        "summary": "Deletes a EmailTemplate by ID",
        "description": "Deletes the EmailTemplate with the requested ID.",
        "operationId": "deleteEmailTemplate",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the EmailTemplate",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "EmailTemplate with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "EmailTemplate"
        ],
        "summary": "Updates a EmailTemplate",
        "description": "Updates a EmailTemplate and persists changes to storage.",
        "operationId": "updateEmailTemplate",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the EmailTemplate",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "EmailTemplate properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "updated_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "name": {
                    "type": "string"
                  },
                  "subject": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "html_content": {
                    "type": "string"
                  },
                  "text_content": {
                    "type": "string"
                  },
                  "organization_id": {
                    "type": "string"
                  },
                  "active": {
                    "type": "boolean"
                  },
                  "system": {
                    "type": "boolean"
                  },
                  "locale": {
                    "type": "string"
                  },
                  "metadata": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "EmailTemplate updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailTemplateUpdate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/feature-flags": {
      "get": {
        "tags": [
          "FeatureFlag"
        ],
        "summary": "List FeatureFlags",
        "description": "List FeatureFlags.",
        "operationId": "listFeatureFlag",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result FeatureFlag list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FeatureFlagList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "FeatureFlag"
        ],
        "summary": "Create a new FeatureFlag",
        "description": "Creates a new FeatureFlag and persists it to storage.",
        "operationId": "createFeatureFlag",
        "requestBody": {
          "description": "FeatureFlag to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "created_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "updated_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "name": {
                    "type": "string"
                  },
                  "key": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "enabled": {
                    "type": "boolean"
                  },
                  "is_premium": {
                    "type": "boolean"
                  },
                  "component": {
                    "type": "string",
                    "enum": [
                      "oauth2",
                      "passwordless",
                      "mfa",
                      "passkeys",
                      "sso",
                      "enterprise",
                      "webhooks",
                      "api_keys"
                    ]
                  },
                  "organizations": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "created_at",
                  "updated_at",
                  "name",
                  "key",
                  "enabled",
                  "is_premium",
                  "component"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "FeatureFlag created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeatureFlagCreate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/feature-flags/{id}": {
      "get": {
        "tags": [
          "FeatureFlag"
        ],
        "summary": "Find a FeatureFlag by ID",
        "description": "Finds the FeatureFlag with the requested ID and returns it.",
        "operationId": "readFeatureFlag",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the FeatureFlag",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "FeatureFlag with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeatureFlagRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "FeatureFlag"
        ],
        "summary": "Deletes a FeatureFlag by ID",
        "description": "Deletes the FeatureFlag with the requested ID.",
        "operationId": "deleteFeatureFlag",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the FeatureFlag",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "FeatureFlag with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "FeatureFlag"
        ],
        "summary": "Updates a FeatureFlag",
        "description": "Updates a FeatureFlag and persists changes to storage.",
        "operationId": "updateFeatureFlag",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the FeatureFlag",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "FeatureFlag properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "updated_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "name": {
                    "type": "string"
                  },
                  "key": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "enabled": {
                    "type": "boolean"
                  },
                  "is_premium": {
                    "type": "boolean"
                  },
                  "component": {
                    "type": "string",
                    "enum": [
                      "oauth2",
                      "passwordless",
                      "mfa",
                      "passkeys",
                      "sso",
                      "enterprise",
                      "webhooks",
                      "api_keys"
                    ]
                  },
                  "organizations": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "FeatureFlag updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeatureFlagUpdate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/feature-flags/{id}/organizations": {
      "get": {
        "tags": [
          "FeatureFlag"
        ],
        "summary": "List attached Organizations",
        "description": "List attached Organizations.",
        "operationId": "listFeatureFlagOrganizations",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the FeatureFlag",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result FeatureFlags list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FeatureFlag_OrganizationsList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/identity-providers": {
      "get": {
        "tags": [
          "IdentityProvider"
        ],
        "summary": "List IdentityProviders",
        "description": "List IdentityProviders.",
        "operationId": "listIdentityProvider",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result IdentityProvider list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IdentityProviderList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "IdentityProvider"
        ],
        "summary": "Create a new IdentityProvider",
        "description": "Creates a new IdentityProvider and persists it to storage.",
        "operationId": "createIdentityProvider",
        "requestBody": {
          "description": "IdentityProvider to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "created_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "updated_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "name": {
                    "type": "string"
                  },
                  "organization_id": {
                    "type": "string"
                  },
                  "provider_type": {
                    "type": "string"
                  },
                  "client_id": {
                    "type": "string"
                  },
                  "client_secret": {
                    "type": "string"
                  },
                  "issuer": {
                    "type": "string"
                  },
                  "authorization_endpoint": {
                    "type": "string"
                  },
                  "token_endpoint": {
                    "type": "string"
                  },
                  "userinfo_endpoint": {
                    "type": "string"
                  },
                  "jwks_uri": {
                    "type": "string"
                  },
                  "metadata_url": {
                    "type": "string"
                  },
                  "redirect_uri": {
                    "type": "string"
                  },
                  "certificate": {
                    "type": "string"
                  },
                  "private_key": {
                    "type": "string"
                  },
                  "active": {
                    "type": "boolean"
                  },
                  "primary": {
                    "type": "boolean"
                  },
                  "domains": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "attributes_mapping": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  "metadata": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "object"
                    }
                  },
                  "organization": {
                    "type": "string"
                  }
                },
                "required": [
                  "created_at",
                  "updated_at",
                  "name",
                  "organization_id",
                  "provider_type",
                  "active",
                  "primary",
                  "organization"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "IdentityProvider created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityProviderCreate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/identity-providers/{id}": {
      "get": {
        "tags": [
          "IdentityProvider"
        ],
        "summary": "Find a IdentityProvider by ID",
        "description": "Finds the IdentityProvider with the requested ID and returns it.",
        "operationId": "readIdentityProvider",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the IdentityProvider",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "IdentityProvider with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityProviderRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "IdentityProvider"
        ],
        "summary": "Deletes a IdentityProvider by ID",
        "description": "Deletes the IdentityProvider with the requested ID.",
        "operationId": "deleteIdentityProvider",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the IdentityProvider",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "IdentityProvider with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "IdentityProvider"
        ],
        "summary": "Updates a IdentityProvider",
        "description": "Updates a IdentityProvider and persists changes to storage.",
        "operationId": "updateIdentityProvider",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the IdentityProvider",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "IdentityProvider properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "updated_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "name": {
                    "type": "string"
                  },
                  "organization_id": {
                    "type": "string"
                  },
                  "provider_type": {
                    "type": "string"
                  },
                  "client_id": {
                    "type": "string"
                  },
                  "client_secret": {
                    "type": "string"
                  },
                  "issuer": {
                    "type": "string"
                  },
                  "authorization_endpoint": {
                    "type": "string"
                  },
                  "token_endpoint": {
                    "type": "string"
                  },
                  "userinfo_endpoint": {
                    "type": "string"
                  },
                  "jwks_uri": {
                    "type": "string"
                  },
                  "metadata_url": {
                    "type": "string"
                  },
                  "redirect_uri": {
                    "type": "string"
                  },
                  "certificate": {
                    "type": "string"
                  },
                  "private_key": {
                    "type": "string"
                  },
                  "active": {
                    "type": "boolean"
                  },
                  "primary": {
                    "type": "boolean"
                  },
                  "domains": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "attributes_mapping": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  "metadata": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "object"
                    }
                  },
                  "organization": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "IdentityProvider updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityProviderUpdate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/identity-providers/{id}/organization": {
      "get": {
        "tags": [
          "IdentityProvider"
        ],
        "summary": "Find the attached Organization",
        "description": "Find the attached Organization of the IdentityProvider with the given ID",
        "operationId": "readIdentityProviderOrganization",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the IdentityProvider",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Organization attached to IdentityProvider with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityProvider_OrganizationRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/mfas": {
      "get": {
        "tags": [
          "MFA"
        ],
        "summary": "List MFAs",
        "description": "List MFAs.",
        "operationId": "listMFA",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result MFA list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MFAList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "MFA"
        ],
        "summary": "Create a new MFA",
        "description": "Creates a new MFA and persists it to storage.",
        "operationId": "createMFA",
        "requestBody": {
          "description": "MFA to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "created_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "updated_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "user_id": {
                    "type": "string"
                  },
                  "method": {
                    "type": "string"
                  },
                  "secret": {
                    "type": "string"
                  },
                  "verified": {
                    "type": "boolean"
                  },
                  "active": {
                    "type": "boolean"
                  },
                  "backup_codes": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "phone_number": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string"
                  },
                  "last_used": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "metadata": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "object"
                    }
                  },
                  "user": {
                    "type": "string"
                  }
                },
                "required": [
                  "created_at",
                  "updated_at",
                  "user_id",
                  "method",
                  "secret",
                  "verified",
                  "active",
                  "user"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "MFA created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MFACreate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/mfas/{id}": {
      "get": {
        "tags": [
          "MFA"
        ],
        "summary": "Find a MFA by ID",
        "description": "Finds the MFA with the requested ID and returns it.",
        "operationId": "readMFA",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the MFA",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "MFA with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MFARead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "MFA"
        ],
        "summary": "Deletes a MFA by ID",
        "description": "Deletes the MFA with the requested ID.",
        "operationId": "deleteMFA",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the MFA",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "MFA with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "MFA"
        ],
        "summary": "Updates a MFA",
        "description": "Updates a MFA and persists changes to storage.",
        "operationId": "updateMFA",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the MFA",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "MFA properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "updated_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "user_id": {
                    "type": "string"
                  },
                  "method": {
                    "type": "string"
                  },
                  "secret": {
                    "type": "string"
                  },
                  "verified": {
                    "type": "boolean"
                  },
                  "active": {
                    "type": "boolean"
                  },
                  "backup_codes": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "phone_number": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string"
                  },
                  "last_used": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "metadata": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "object"
                    }
                  },
                  "user": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "MFA updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MFAUpdate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/mfas/{id}/user": {
      "get": {
        "tags": [
          "MFA"
        ],
        "summary": "Find the attached User",
        "description": "Find the attached User of the MFA with the given ID",
        "operationId": "readMFAUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the MFA",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User attached to MFA with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MFA_UserRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/o-auth-authorizations": {
      "get": {
        "tags": [
          "OAuthAuthorization"
        ],
        "summary": "List OAuthAuthorizations",
        "description": "List OAuthAuthorizations.",
        "operationId": "listOAuthAuthorization",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result OAuthAuthorization list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OAuthAuthorizationList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "OAuthAuthorization"
        ],
        "summary": "Create a new OAuthAuthorization",
        "description": "Creates a new OAuthAuthorization and persists it to storage.",
        "operationId": "createOAuthAuthorization",
        "requestBody": {
          "description": "OAuthAuthorization to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "created_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "updated_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "client_id": {
                    "type": "string"
                  },
                  "user_id": {
                    "type": "string"
                  },
                  "organization_id": {
                    "type": "string"
                  },
                  "code": {
                    "type": "string"
                  },
                  "code_challenge": {
                    "type": "string"
                  },
                  "code_challenge_method": {
                    "type": "string"
                  },
                  "redirect_uri": {
                    "type": "string"
                  },
                  "scope_names": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "used": {
                    "type": "boolean"
                  },
                  "used_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "expires_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "state": {
                    "type": "string"
                  },
                  "nonce": {
                    "type": "string"
                  },
                  "client": {
                    "type": "string"
                  },
                  "user": {
                    "type": "string"
                  },
                  "scopes": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "created_at",
                  "updated_at",
                  "client_id",
                  "user_id",
                  "redirect_uri",
                  "used",
                  "used_at",
                  "expires_at",
                  "client",
                  "user"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OAuthAuthorization created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthAuthorizationCreate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/o-auth-authorizations/{id}": {
      "get": {
        "tags": [
          "OAuthAuthorization"
        ],
        "summary": "Find a OAuthAuthorization by ID",
        "description": "Finds the OAuthAuthorization with the requested ID and returns it.",
        "operationId": "readOAuthAuthorization",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the OAuthAuthorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OAuthAuthorization with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthAuthorizationRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "OAuthAuthorization"
        ],
        "summary": "Deletes a OAuthAuthorization by ID",
        "description": "Deletes the OAuthAuthorization with the requested ID.",
        "operationId": "deleteOAuthAuthorization",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the OAuthAuthorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OAuthAuthorization with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "OAuthAuthorization"
        ],
        "summary": "Updates a OAuthAuthorization",
        "description": "Updates a OAuthAuthorization and persists changes to storage.",
        "operationId": "updateOAuthAuthorization",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the OAuthAuthorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "OAuthAuthorization properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "updated_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "client_id": {
                    "type": "string"
                  },
                  "user_id": {
                    "type": "string"
                  },
                  "organization_id": {
                    "type": "string"
                  },
                  "code": {
                    "type": "string"
                  },
                  "code_challenge": {
                    "type": "string"
                  },
                  "code_challenge_method": {
                    "type": "string"
                  },
                  "redirect_uri": {
                    "type": "string"
                  },
                  "scope_names": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "used": {
                    "type": "boolean"
                  },
                  "used_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "expires_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "state": {
                    "type": "string"
                  },
                  "nonce": {
                    "type": "string"
                  },
                  "client": {
                    "type": "string"
                  },
                  "user": {
                    "type": "string"
                  },
                  "scopes": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OAuthAuthorization updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthAuthorizationUpdate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/o-auth-authorizations/{id}/client": {
      "get": {
        "tags": [
          "OAuthAuthorization"
        ],
        "summary": "Find the attached OAuthClient",
        "description": "Find the attached OAuthClient of the OAuthAuthorization with the given ID",
        "operationId": "readOAuthAuthorizationClient",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the OAuthAuthorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OAuthClient attached to OAuthAuthorization with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthAuthorization_ClientRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/o-auth-authorizations/{id}/scopes": {
      "get": {
        "tags": [
          "OAuthAuthorization"
        ],
        "summary": "List attached Scopes",
        "description": "List attached Scopes.",
        "operationId": "listOAuthAuthorizationScopes",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the OAuthAuthorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result OAuthAuthorizations list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OAuthAuthorization_ScopesList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/o-auth-authorizations/{id}/user": {
      "get": {
        "tags": [
          "OAuthAuthorization"
        ],
        "summary": "Find the attached User",
        "description": "Find the attached User of the OAuthAuthorization with the given ID",
        "operationId": "readOAuthAuthorizationUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the OAuthAuthorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User attached to OAuthAuthorization with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthAuthorization_UserRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/o-auth-clients": {
      "get": {
        "tags": [
          "OAuthClient"
        ],
        "summary": "List OAuthClients",
        "description": "List OAuthClients.",
        "operationId": "listOAuthClient",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result OAuthClient list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OAuthClientList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "OAuthClient"
        ],
        "summary": "Create a new OAuthClient",
        "description": "Creates a new OAuthClient and persists it to storage.",
        "operationId": "createOAuthClient",
        "requestBody": {
          "description": "OAuthClient to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "created_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "updated_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "client_id": {
                    "type": "string"
                  },
                  "client_secret": {
                    "type": "string"
                  },
                  "client_name": {
                    "type": "string"
                  },
                  "client_description": {
                    "type": "string"
                  },
                  "client_uri": {
                    "type": "string"
                  },
                  "logo_uri": {
                    "type": "string"
                  },
                  "redirect_uris": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "post_logout_redirect_uris": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "organization_id": {
                    "type": "string"
                  },
                  "public": {
                    "type": "boolean"
                  },
                  "active": {
                    "type": "boolean"
                  },
                  "allowed_cors_origins": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "allowed_grant_types": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "token_expiry_seconds": {
                    "type": "integer"
                  },
                  "refresh_token_expiry_seconds": {
                    "type": "integer"
                  },
                  "auth_code_expiry_seconds": {
                    "type": "integer"
                  },
                  "requires_pkce": {
                    "type": "boolean"
                  },
                  "requires_consent": {
                    "type": "boolean"
                  },
                  "organization": {
                    "type": "string"
                  },
                  "tokens": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "authorizations": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "scopes": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "created_at",
                  "updated_at",
                  "client_id",
                  "client_secret",
                  "client_name",
                  "redirect_uris",
                  "public",
                  "active",
                  "allowed_grant_types",
                  "token_expiry_seconds",
                  "refresh_token_expiry_seconds",
                  "auth_code_expiry_seconds",
                  "requires_pkce",
                  "requires_consent"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OAuthClient created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthClientCreate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/o-auth-clients/{id}": {
      "get": {
        "tags": [
          "OAuthClient"
        ],
        "summary": "Find a OAuthClient by ID",
        "description": "Finds the OAuthClient with the requested ID and returns it.",
        "operationId": "readOAuthClient",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the OAuthClient",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OAuthClient with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthClientRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "OAuthClient"
        ],
        "summary": "Deletes a OAuthClient by ID",
        "description": "Deletes the OAuthClient with the requested ID.",
        "operationId": "deleteOAuthClient",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the OAuthClient",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OAuthClient with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "OAuthClient"
        ],
        "summary": "Updates a OAuthClient",
        "description": "Updates a OAuthClient and persists changes to storage.",
        "operationId": "updateOAuthClient",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the OAuthClient",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "OAuthClient properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "updated_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "client_id": {
                    "type": "string"
                  },
                  "client_secret": {
                    "type": "string"
                  },
                  "client_name": {
                    "type": "string"
                  },
                  "client_description": {
                    "type": "string"
                  },
                  "client_uri": {
                    "type": "string"
                  },
                  "logo_uri": {
                    "type": "string"
                  },
                  "redirect_uris": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "post_logout_redirect_uris": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "organization_id": {
                    "type": "string"
                  },
                  "public": {
                    "type": "boolean"
                  },
                  "active": {
                    "type": "boolean"
                  },
                  "allowed_cors_origins": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "allowed_grant_types": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "token_expiry_seconds": {
                    "type": "integer"
                  },
                  "refresh_token_expiry_seconds": {
                    "type": "integer"
                  },
                  "auth_code_expiry_seconds": {
                    "type": "integer"
                  },
                  "requires_pkce": {
                    "type": "boolean"
                  },
                  "requires_consent": {
                    "type": "boolean"
                  },
                  "organization": {
                    "type": "string"
                  },
                  "tokens": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "authorizations": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "scopes": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OAuthClient updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthClientUpdate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/o-auth-clients/{id}/authorizations": {
      "get": {
        "tags": [
          "OAuthClient"
        ],
        "summary": "List attached Authorizations",
        "description": "List attached Authorizations.",
        "operationId": "listOAuthClientAuthorizations",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the OAuthClient",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result OAuthClients list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OAuthClient_AuthorizationsList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/o-auth-clients/{id}/organization": {
      "get": {
        "tags": [
          "OAuthClient"
        ],
        "summary": "Find the attached Organization",
        "description": "Find the attached Organization of the OAuthClient with the given ID",
        "operationId": "readOAuthClientOrganization",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the OAuthClient",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Organization attached to OAuthClient with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthClient_OrganizationRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/o-auth-clients/{id}/scopes": {
      "get": {
        "tags": [
          "OAuthClient"
        ],
        "summary": "List attached Scopes",
        "description": "List attached Scopes.",
        "operationId": "listOAuthClientScopes",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the OAuthClient",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result OAuthClients list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OAuthClient_ScopesList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/o-auth-clients/{id}/tokens": {
      "get": {
        "tags": [
          "OAuthClient"
        ],
        "summary": "List attached Tokens",
        "description": "List attached Tokens.",
        "operationId": "listOAuthClientTokens",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the OAuthClient",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result OAuthClients list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OAuthClient_TokensList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/o-auth-scopes": {
      "get": {
        "tags": [
          "OAuthScope"
        ],
        "summary": "List OAuthScopes",
        "description": "List OAuthScopes.",
        "operationId": "listOAuthScope",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result OAuthScope list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OAuthScopeList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "OAuthScope"
        ],
        "summary": "Create a new OAuthScope",
        "description": "Creates a new OAuthScope and persists it to storage.",
        "operationId": "createOAuthScope",
        "requestBody": {
          "description": "OAuthScope to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "created_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "updated_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "default_scope": {
                    "type": "boolean"
                  },
                  "public": {
                    "type": "boolean"
                  },
                  "clients": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "tokens": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "authorizations": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "created_at",
                  "updated_at",
                  "name",
                  "description",
                  "default_scope",
                  "public"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OAuthScope created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthScopeCreate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/o-auth-scopes/{id}": {
      "get": {
        "tags": [
          "OAuthScope"
        ],
        "summary": "Find a OAuthScope by ID",
        "description": "Finds the OAuthScope with the requested ID and returns it.",
        "operationId": "readOAuthScope",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the OAuthScope",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OAuthScope with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthScopeRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "OAuthScope"
        ],
        "summary": "Deletes a OAuthScope by ID",
        "description": "Deletes the OAuthScope with the requested ID.",
        "operationId": "deleteOAuthScope",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the OAuthScope",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OAuthScope with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "OAuthScope"
        ],
        "summary": "Updates a OAuthScope",
        "description": "Updates a OAuthScope and persists changes to storage.",
        "operationId": "updateOAuthScope",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the OAuthScope",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "OAuthScope properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "updated_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "default_scope": {
                    "type": "boolean"
                  },
                  "public": {
                    "type": "boolean"
                  },
                  "clients": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "tokens": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "authorizations": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OAuthScope updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthScopeUpdate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/o-auth-scopes/{id}/authorizations": {
      "get": {
        "tags": [
          "OAuthScope"
        ],
        "summary": "List attached Authorizations",
        "description": "List attached Authorizations.",
        "operationId": "listOAuthScopeAuthorizations",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the OAuthScope",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result OAuthScopes list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OAuthScope_AuthorizationsList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/o-auth-scopes/{id}/clients": {
      "get": {
        "tags": [
          "OAuthScope"
        ],
        "summary": "List attached Clients",
        "description": "List attached Clients.",
        "operationId": "listOAuthScopeClients",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the OAuthScope",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result OAuthScopes list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OAuthScope_ClientsList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/o-auth-scopes/{id}/tokens": {
      "get": {
        "tags": [
          "OAuthScope"
        ],
        "summary": "List attached Tokens",
        "description": "List attached Tokens.",
        "operationId": "listOAuthScopeTokens",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the OAuthScope",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result OAuthScopes list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OAuthScope_TokensList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/o-auth-tokens": {
      "get": {
        "tags": [
          "OAuthToken"
        ],
        "summary": "List OAuthTokens",
        "description": "List OAuthTokens.",
        "operationId": "listOAuthToken",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result OAuthToken list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OAuthTokenList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "OAuthToken"
        ],
        "summary": "Create a new OAuthToken",
        "description": "Creates a new OAuthToken and persists it to storage.",
        "operationId": "createOAuthToken",
        "requestBody": {
          "description": "OAuthToken to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "created_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "updated_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "access_token": {
                    "type": "string"
                  },
                  "refresh_token": {
                    "type": "string"
                  },
                  "token_type": {
                    "type": "string"
                  },
                  "client_id": {
                    "type": "string"
                  },
                  "user_id": {
                    "type": "string"
                  },
                  "organization_id": {
                    "type": "string"
                  },
                  "scope_names": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "expires_in": {
                    "type": "integer"
                  },
                  "expires_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "refresh_token_expires_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "revoked": {
                    "type": "boolean"
                  },
                  "revoked_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "ip_address": {
                    "type": "string"
                  },
                  "user_agent": {
                    "type": "string"
                  },
                  "client": {
                    "type": "string"
                  },
                  "user": {
                    "type": "string"
                  },
                  "scopes": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "created_at",
                  "updated_at",
                  "access_token",
                  "token_type",
                  "client_id",
                  "user_id",
                  "expires_in",
                  "expires_at",
                  "revoked",
                  "client",
                  "user"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OAuthToken created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthTokenCreate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/o-auth-tokens/{id}": {
      "get": {
        "tags": [
          "OAuthToken"
        ],
        "summary": "Find a OAuthToken by ID",
        "description": "Finds the OAuthToken with the requested ID and returns it.",
        "operationId": "readOAuthToken",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the OAuthToken",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OAuthToken with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthTokenRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "OAuthToken"
        ],
        "summary": "Deletes a OAuthToken by ID",
        "description": "Deletes the OAuthToken with the requested ID.",
        "operationId": "deleteOAuthToken",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the OAuthToken",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OAuthToken with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "OAuthToken"
        ],
        "summary": "Updates a OAuthToken",
        "description": "Updates a OAuthToken and persists changes to storage.",
        "operationId": "updateOAuthToken",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the OAuthToken",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "OAuthToken properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "updated_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "access_token": {
                    "type": "string"
                  },
                  "refresh_token": {
                    "type": "string"
                  },
                  "token_type": {
                    "type": "string"
                  },
                  "client_id": {
                    "type": "string"
                  },
                  "user_id": {
                    "type": "string"
                  },
                  "organization_id": {
                    "type": "string"
                  },
                  "scope_names": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "expires_in": {
                    "type": "integer"
                  },
                  "expires_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "refresh_token_expires_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "revoked": {
                    "type": "boolean"
                  },
                  "revoked_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "ip_address": {
                    "type": "string"
                  },
                  "user_agent": {
                    "type": "string"
                  },
                  "client": {
                    "type": "string"
                  },
                  "user": {
                    "type": "string"
                  },
                  "scopes": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OAuthToken updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthTokenUpdate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/o-auth-tokens/{id}/client": {
      "get": {
        "tags": [
          "OAuthToken"
        ],
        "summary": "Find the attached OAuthClient",
        "description": "Find the attached OAuthClient of the OAuthToken with the given ID",
        "operationId": "readOAuthTokenClient",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the OAuthToken",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OAuthClient attached to OAuthToken with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthToken_ClientRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/o-auth-tokens/{id}/scopes": {
      "get": {
        "tags": [
          "OAuthToken"
        ],
        "summary": "List attached Scopes",
        "description": "List attached Scopes.",
        "operationId": "listOAuthTokenScopes",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the OAuthToken",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result OAuthTokens list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OAuthToken_ScopesList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/o-auth-tokens/{id}/user": {
      "get": {
        "tags": [
          "OAuthToken"
        ],
        "summary": "Find the attached User",
        "description": "Find the attached User of the OAuthToken with the given ID",
        "operationId": "readOAuthTokenUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the OAuthToken",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User attached to OAuthToken with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthToken_UserRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/organization-features": {
      "get": {
        "tags": [
          "OrganizationFeature"
        ],
        "summary": "List OrganizationFeatures",
        "description": "List OrganizationFeatures.",
        "operationId": "listOrganizationFeature",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result OrganizationFeature list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationFeatureList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "OrganizationFeature"
        ],
        "summary": "Create a new OrganizationFeature",
        "description": "Creates a new OrganizationFeature and persists it to storage.",
        "operationId": "createOrganizationFeature",
        "requestBody": {
          "description": "OrganizationFeature to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "created_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "updated_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "organization_id": {
                    "type": "string"
                  },
                  "feature_id": {
                    "type": "string"
                  },
                  "enabled": {
                    "type": "boolean"
                  },
                  "settings": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "object"
                    }
                  },
                  "organization": {
                    "type": "string"
                  },
                  "feature": {
                    "type": "string"
                  }
                },
                "required": [
                  "created_at",
                  "updated_at",
                  "organization_id",
                  "feature_id",
                  "enabled",
                  "organization",
                  "feature"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OrganizationFeature created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationFeatureCreate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/organization-features/{id}": {
      "get": {
        "tags": [
          "OrganizationFeature"
        ],
        "summary": "Find a OrganizationFeature by ID",
        "description": "Finds the OrganizationFeature with the requested ID and returns it.",
        "operationId": "readOrganizationFeature",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the OrganizationFeature",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OrganizationFeature with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationFeatureRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "OrganizationFeature"
        ],
        "summary": "Deletes a OrganizationFeature by ID",
        "description": "Deletes the OrganizationFeature with the requested ID.",
        "operationId": "deleteOrganizationFeature",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the OrganizationFeature",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OrganizationFeature with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "OrganizationFeature"
        ],
        "summary": "Updates a OrganizationFeature",
        "description": "Updates a OrganizationFeature and persists changes to storage.",
        "operationId": "updateOrganizationFeature",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the OrganizationFeature",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "OrganizationFeature properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "updated_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "organization_id": {
                    "type": "string"
                  },
                  "feature_id": {
                    "type": "string"
                  },
                  "enabled": {
                    "type": "boolean"
                  },
                  "settings": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "object"
                    }
                  },
                  "organization": {
                    "type": "string"
                  },
                  "feature": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OrganizationFeature updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationFeatureUpdate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/organization-features/{id}/feature": {
      "get": {
        "tags": [
          "OrganizationFeature"
        ],
        "summary": "Find the attached FeatureFlag",
        "description": "Find the attached FeatureFlag of the OrganizationFeature with the given ID",
        "operationId": "readOrganizationFeatureFeature",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the OrganizationFeature",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "FeatureFlag attached to OrganizationFeature with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationFeature_FeatureRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/organization-features/{id}/organization": {
      "get": {
        "tags": [
          "OrganizationFeature"
        ],
        "summary": "Find the attached Organization",
        "description": "Find the attached Organization of the OrganizationFeature with the given ID",
        "operationId": "readOrganizationFeatureOrganization",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the OrganizationFeature",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Organization attached to OrganizationFeature with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationFeature_OrganizationRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/organizations": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "List Organizations",
        "description": "List Organizations.",
        "operationId": "listOrganization",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Organization list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "Organization"
        ],
        "summary": "Create a new Organization",
        "description": "Creates a new Organization and persists it to storage.",
        "operationId": "createOrganization",
        "requestBody": {
          "description": "Organization to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "created_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "updated_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "name": {
                    "type": "string"
                  },
                  "slug": {
                    "type": "string"
                  },
                  "domain": {
                    "type": "string"
                  },
                  "logo_url": {
                    "type": "string"
                  },
                  "plan": {
                    "type": "string"
                  },
                  "active": {
                    "type": "boolean"
                  },
                  "metadata": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "object"
                    }
                  },
                  "trial_ends_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "trial_used": {
                    "type": "boolean"
                  },
                  "users": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "api_keys": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "webhooks": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "feature_flags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "identity_providers": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "oauth_clients": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "created_at",
                  "updated_at",
                  "name",
                  "slug",
                  "plan",
                  "active",
                  "trial_used"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Organization created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationCreate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/organizations/{id}": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "Find a Organization by ID",
        "description": "Finds the Organization with the requested ID and returns it.",
        "operationId": "readOrganization",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Organization with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "Organization"
        ],
        "summary": "Deletes a Organization by ID",
        "description": "Deletes the Organization with the requested ID.",
        "operationId": "deleteOrganization",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Organization with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "Organization"
        ],
        "summary": "Updates a Organization",
        "description": "Updates a Organization and persists changes to storage.",
        "operationId": "updateOrganization",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Organization properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "updated_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "name": {
                    "type": "string"
                  },
                  "slug": {
                    "type": "string"
                  },
                  "domain": {
                    "type": "string"
                  },
                  "logo_url": {
                    "type": "string"
                  },
                  "plan": {
                    "type": "string"
                  },
                  "active": {
                    "type": "boolean"
                  },
                  "metadata": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "object"
                    }
                  },
                  "trial_ends_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "trial_used": {
                    "type": "boolean"
                  },
                  "users": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "api_keys": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "webhooks": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "feature_flags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "identity_providers": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "oauth_clients": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Organization updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationUpdate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/organizations/{id}/api-keys": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "List attached ApiKeys",
        "description": "List attached ApiKeys.",
        "operationId": "listOrganizationApiKeys",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Organizations list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Organization_APIKeysList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/organizations/{id}/feature-flags": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "List attached FeatureFlags",
        "description": "List attached FeatureFlags.",
        "operationId": "listOrganizationFeatureFlags",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Organizations list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Organization_FeatureFlagsList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/organizations/{id}/identity-providers": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "List attached IdentityProviders",
        "description": "List attached IdentityProviders.",
        "operationId": "listOrganizationIdentityProviders",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Organizations list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Organization_IdentityProvidersList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/organizations/{id}/oauth-clients": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "List attached OauthClients",
        "description": "List attached OauthClients.",
        "operationId": "listOrganizationOauthClients",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Organizations list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Organization_OauthClientsList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/organizations/{id}/users": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "List attached Users",
        "description": "List attached Users.",
        "operationId": "listOrganizationUsers",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Organizations list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Organization_UsersList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/organizations/{id}/webhooks": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "List attached Webhooks",
        "description": "List attached Webhooks.",
        "operationId": "listOrganizationWebhooks",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Organizations list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Organization_WebhooksList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/passkeys": {
      "get": {
        "tags": [
          "Passkey"
        ],
        "summary": "List Passkeys",
        "description": "List Passkeys.",
        "operationId": "listPasskey",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Passkey list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PasskeyList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "Passkey"
        ],
        "summary": "Create a new Passkey",
        "description": "Creates a new Passkey and persists it to storage.",
        "operationId": "createPasskey",
        "requestBody": {
          "description": "Passkey to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "created_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "updated_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "user_id": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "credential_id": {
                    "type": "string"
                  },
                  "public_key": {
                    "type": "string",
                    "format": "byte"
                  },
                  "sign_count": {
                    "type": "integer"
                  },
                  "active": {
                    "type": "boolean"
                  },
                  "device_type": {
                    "type": "string"
                  },
                  "aaguid": {
                    "type": "string"
                  },
                  "last_used": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "transports": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "attestation": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "object"
                    }
                  },
                  "user": {
                    "type": "string"
                  }
                },
                "required": [
                  "created_at",
                  "updated_at",
                  "user_id",
                  "name",
                  "credential_id",
                  "public_key",
                  "sign_count",
                  "active",
                  "user"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Passkey created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PasskeyCreate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/passkeys/{id}": {
      "get": {
        "tags": [
          "Passkey"
        ],
        "summary": "Find a Passkey by ID",
        "description": "Finds the Passkey with the requested ID and returns it.",
        "operationId": "readPasskey",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Passkey",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Passkey with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PasskeyRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "Passkey"
        ],
        "summary": "Deletes a Passkey by ID",
        "description": "Deletes the Passkey with the requested ID.",
        "operationId": "deletePasskey",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Passkey",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Passkey with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "Passkey"
        ],
        "summary": "Updates a Passkey",
        "description": "Updates a Passkey and persists changes to storage.",
        "operationId": "updatePasskey",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Passkey",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Passkey properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "updated_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "user_id": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "credential_id": {
                    "type": "string"
                  },
                  "public_key": {
                    "type": "string",
                    "format": "byte"
                  },
                  "sign_count": {
                    "type": "integer"
                  },
                  "active": {
                    "type": "boolean"
                  },
                  "device_type": {
                    "type": "string"
                  },
                  "aaguid": {
                    "type": "string"
                  },
                  "last_used": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "transports": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "attestation": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "object"
                    }
                  },
                  "user": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Passkey updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PasskeyUpdate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/passkeys/{id}/user": {
      "get": {
        "tags": [
          "Passkey"
        ],
        "summary": "Find the attached User",
        "description": "Find the attached User of the Passkey with the given ID",
        "operationId": "readPasskeyUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Passkey",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User attached to Passkey with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Passkey_UserRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/permissions": {
      "get": {
        "tags": [
          "Permission"
        ],
        "summary": "List Permissions",
        "description": "List Permissions.",
        "operationId": "listPermission",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Permission list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PermissionList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "Permission"
        ],
        "summary": "Create a new Permission",
        "description": "Creates a new Permission and persists it to storage.",
        "operationId": "createPermission",
        "requestBody": {
          "description": "Permission to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "created_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "updated_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "resource": {
                    "type": "string"
                  },
                  "action": {
                    "type": "string"
                  },
                  "conditions": {
                    "type": "string"
                  },
                  "system": {
                    "type": "boolean"
                  },
                  "roles": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "created_at",
                  "updated_at",
                  "name",
                  "description",
                  "resource",
                  "action",
                  "system"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Permission created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionCreate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/permissions/{id}": {
      "get": {
        "tags": [
          "Permission"
        ],
        "summary": "Find a Permission by ID",
        "description": "Finds the Permission with the requested ID and returns it.",
        "operationId": "readPermission",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Permission",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Permission with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "Permission"
        ],
        "summary": "Deletes a Permission by ID",
        "description": "Deletes the Permission with the requested ID.",
        "operationId": "deletePermission",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Permission",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Permission with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "Permission"
        ],
        "summary": "Updates a Permission",
        "description": "Updates a Permission and persists changes to storage.",
        "operationId": "updatePermission",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Permission",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Permission properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "updated_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "resource": {
                    "type": "string"
                  },
                  "action": {
                    "type": "string"
                  },
                  "conditions": {
                    "type": "string"
                  },
                  "system": {
                    "type": "boolean"
                  },
                  "roles": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Permission updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionUpdate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/permissions/{id}/roles": {
      "get": {
        "tags": [
          "Permission"
        ],
        "summary": "List attached Roles",
        "description": "List attached Roles.",
        "operationId": "listPermissionRoles",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Permission",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Permissions list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Permission_RolesList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/roles": {
      "get": {
        "tags": [
          "Role"
        ],
        "summary": "List Roles",
        "description": "List Roles.",
        "operationId": "listRole",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Role list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "Role"
        ],
        "summary": "Create a new Role",
        "description": "Creates a new Role and persists it to storage.",
        "operationId": "createRole",
        "requestBody": {
          "description": "Role to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "created_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "updated_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "organization_id": {
                    "type": "string"
                  },
                  "system": {
                    "type": "boolean"
                  },
                  "is_default": {
                    "type": "boolean"
                  },
                  "users": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "permissions": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "created_at",
                  "updated_at",
                  "name",
                  "system",
                  "is_default"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Role created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleCreate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/roles/{id}": {
      "get": {
        "tags": [
          "Role"
        ],
        "summary": "Find a Role by ID",
        "description": "Finds the Role with the requested ID and returns it.",
        "operationId": "readRole",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Role",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Role with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "Role"
        ],
        "summary": "Deletes a Role by ID",
        "description": "Deletes the Role with the requested ID.",
        "operationId": "deleteRole",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Role",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Role with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "Role"
        ],
        "summary": "Updates a Role",
        "description": "Updates a Role and persists changes to storage.",
        "operationId": "updateRole",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Role",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Role properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "updated_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "organization_id": {
                    "type": "string"
                  },
                  "system": {
                    "type": "boolean"
                  },
                  "is_default": {
                    "type": "boolean"
                  },
                  "users": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "permissions": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Role updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleUpdate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/roles/{id}/permissions": {
      "get": {
        "tags": [
          "Role"
        ],
        "summary": "List attached Permissions",
        "description": "List attached Permissions.",
        "operationId": "listRolePermissions",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Role",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Roles list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Role_PermissionsList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/roles/{id}/users": {
      "get": {
        "tags": [
          "Role"
        ],
        "summary": "List attached Users",
        "description": "List attached Users.",
        "operationId": "listRoleUsers",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Role",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Roles list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Role_UsersList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/sessions": {
      "get": {
        "tags": [
          "Session"
        ],
        "summary": "List Sessions",
        "description": "List Sessions.",
        "operationId": "listSession",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Session list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SessionList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "Session"
        ],
        "summary": "Create a new Session",
        "description": "Creates a new Session and persists it to storage.",
        "operationId": "createSession",
        "requestBody": {
          "description": "Session to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "created_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "updated_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "user_id": {
                    "type": "string"
                  },
                  "token": {
                    "type": "string"
                  },
                  "ip_address": {
                    "type": "string"
                  },
                  "user_agent": {
                    "type": "string"
                  },
                  "device_id": {
                    "type": "string"
                  },
                  "location": {
                    "type": "string"
                  },
                  "organization_id": {
                    "type": "string"
                  },
                  "active": {
                    "type": "boolean"
                  },
                  "expires_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "last_active_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "metadata": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "object"
                    }
                  },
                  "user": {
                    "type": "string"
                  }
                },
                "required": [
                  "created_at",
                  "updated_at",
                  "user_id",
                  "token",
                  "active",
                  "expires_at",
                  "last_active_at",
                  "user"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Session created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionCreate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/sessions/{id}": {
      "get": {
        "tags": [
          "Session"
        ],
        "summary": "Find a Session by ID",
        "description": "Finds the Session with the requested ID and returns it.",
        "operationId": "readSession",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Session",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Session with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "Session"
        ],
        "summary": "Deletes a Session by ID",
        "description": "Deletes the Session with the requested ID.",
        "operationId": "deleteSession",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Session",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Session with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "Session"
        ],
        "summary": "Updates a Session",
        "description": "Updates a Session and persists changes to storage.",
        "operationId": "updateSession",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Session",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Session properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "updated_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "user_id": {
                    "type": "string"
                  },
                  "token": {
                    "type": "string"
                  },
                  "ip_address": {
                    "type": "string"
                  },
                  "user_agent": {
                    "type": "string"
                  },
                  "device_id": {
                    "type": "string"
                  },
                  "location": {
                    "type": "string"
                  },
                  "organization_id": {
                    "type": "string"
                  },
                  "active": {
                    "type": "boolean"
                  },
                  "expires_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "last_active_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "metadata": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "object"
                    }
                  },
                  "user": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Session updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionUpdate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/sessions/{id}/user": {
      "get": {
        "tags": [
          "Session"
        ],
        "summary": "Find the attached User",
        "description": "Find the attached User of the Session with the given ID",
        "operationId": "readSessionUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Session",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User attached to Session with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Session_UserRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/sso-states": {
      "get": {
        "tags": [
          "SSOState"
        ],
        "summary": "List SSOStates",
        "description": "List SSOStates.",
        "operationId": "listSSOState",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result SSOState list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SSOStateList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "SSOState"
        ],
        "summary": "Create a new SSOState",
        "description": "Creates a new SSOState and persists it to storage.",
        "operationId": "createSSOState",
        "requestBody": {
          "description": "SSOState to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "created_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "updated_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "state": {
                    "type": "string"
                  },
                  "data": {
                    "type": "string"
                  },
                  "expires_at": {
                    "type": "string",
                    "format": "date-time"
                  }
                },
                "required": [
                  "created_at",
                  "updated_at",
                  "state",
                  "data",
                  "expires_at"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "SSOState created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SSOStateCreate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/sso-states/{id}": {
      "get": {
        "tags": [
          "SSOState"
        ],
        "summary": "Find a SSOState by ID",
        "description": "Finds the SSOState with the requested ID and returns it.",
        "operationId": "readSSOState",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the SSOState",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "SSOState with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SSOStateRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "SSOState"
        ],
        "summary": "Deletes a SSOState by ID",
        "description": "Deletes the SSOState with the requested ID.",
        "operationId": "deleteSSOState",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the SSOState",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "SSOState with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "SSOState"
        ],
        "summary": "Updates a SSOState",
        "description": "Updates a SSOState and persists changes to storage.",
        "operationId": "updateSSOState",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the SSOState",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "SSOState properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "updated_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "state": {
                    "type": "string"
                  },
                  "data": {
                    "type": "string"
                  },
                  "expires_at": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "SSOState updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SSOStateUpdate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "List Users",
        "description": "List Users.",
        "operationId": "listUser",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result User list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Create a new User",
        "description": "Creates a new User and persists it to storage.",
        "operationId": "createUser",
        "requestBody": {
          "description": "User to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "created_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "updated_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "email": {
                    "type": "string"
                  },
                  "phone_number": {
                    "type": "string"
                  },
                  "first_name": {
                    "type": "string"
                  },
                  "last_name": {
                    "type": "string"
                  },
                  "password_hash": {
                    "type": "string"
                  },
                  "email_verified": {
                    "type": "boolean"
                  },
                  "phone_verified": {
                    "type": "boolean"
                  },
                  "active": {
                    "type": "boolean"
                  },
                  "last_login": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "last_password_change": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "metadata": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "object"
                    }
                  },
                  "profile_image_url": {
                    "type": "string"
                  },
                  "primary_organization_id": {
                    "type": "string"
                  },
                  "locale": {
                    "type": "string"
                  },
                  "sessions": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "api_keys": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "organizations": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "mfa_methods": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "passkeys": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "oauth_tokens": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "oauth_authorizations": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "verifications": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "roles": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "created_at",
                  "updated_at",
                  "email",
                  "email_verified",
                  "phone_verified",
                  "active",
                  "locale"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "User created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserCreate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Find a User by ID",
        "description": "Finds the User with the requested ID and returns it.",
        "operationId": "readUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the User",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Deletes a User by ID",
        "description": "Deletes the User with the requested ID.",
        "operationId": "deleteUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the User",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "User"
        ],
        "summary": "Updates a User",
        "description": "Updates a User and persists changes to storage.",
        "operationId": "updateUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the User",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "User properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "updated_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "email": {
                    "type": "string"
                  },
                  "phone_number": {
                    "type": "string"
                  },
                  "first_name": {
                    "type": "string"
                  },
                  "last_name": {
                    "type": "string"
                  },
                  "password_hash": {
                    "type": "string"
                  },
                  "email_verified": {
                    "type": "boolean"
                  },
                  "phone_verified": {
                    "type": "boolean"
                  },
                  "active": {
                    "type": "boolean"
                  },
                  "last_login": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "last_password_change": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "metadata": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "object"
                    }
                  },
                  "profile_image_url": {
                    "type": "string"
                  },
                  "primary_organization_id": {
                    "type": "string"
                  },
                  "locale": {
                    "type": "string"
                  },
                  "sessions": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "api_keys": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "organizations": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "mfa_methods": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "passkeys": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "oauth_tokens": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "oauth_authorizations": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "verifications": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "roles": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "User updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserUpdate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users/{id}/api-keys": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "List attached ApiKeys",
        "description": "List attached ApiKeys.",
        "operationId": "listUserApiKeys",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the User",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Users list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User_APIKeysList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users/{id}/mfa-methods": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "List attached MfaMethods",
        "description": "List attached MfaMethods.",
        "operationId": "listUserMfaMethods",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the User",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Users list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User_MfaMethodsList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users/{id}/oauth-authorizations": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "List attached OauthAuthorizations",
        "description": "List attached OauthAuthorizations.",
        "operationId": "listUserOauthAuthorizations",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the User",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Users list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User_OauthAuthorizationsList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users/{id}/oauth-tokens": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "List attached OauthTokens",
        "description": "List attached OauthTokens.",
        "operationId": "listUserOauthTokens",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the User",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Users list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User_OauthTokensList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users/{id}/organizations": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "List attached Organizations",
        "description": "List attached Organizations.",
        "operationId": "listUserOrganizations",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the User",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Users list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User_OrganizationsList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users/{id}/passkeys": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "List attached Passkeys",
        "description": "List attached Passkeys.",
        "operationId": "listUserPasskeys",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the User",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Users list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User_PasskeysList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users/{id}/roles": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "List attached Roles",
        "description": "List attached Roles.",
        "operationId": "listUserRoles",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the User",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Users list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User_RolesList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users/{id}/sessions": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "List attached Sessions",
        "description": "List attached Sessions.",
        "operationId": "listUserSessions",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the User",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Users list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User_SessionsList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users/{id}/verifications": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "List attached Verifications",
        "description": "List attached Verifications.",
        "operationId": "listUserVerifications",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the User",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Users list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User_VerificationsList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/verifications": {
      "get": {
        "tags": [
          "Verification"
        ],
        "summary": "List Verifications",
        "description": "List Verifications.",
        "operationId": "listVerification",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Verification list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VerificationList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "Verification"
        ],
        "summary": "Create a new Verification",
        "description": "Creates a new Verification and persists it to storage.",
        "operationId": "createVerification",
        "requestBody": {
          "description": "Verification to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "created_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "updated_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "user_id": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "token": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string"
                  },
                  "phone_number": {
                    "type": "string"
                  },
                  "redirect_url": {
                    "type": "string"
                  },
                  "used": {
                    "type": "boolean"
                  },
                  "used_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "attempts": {
                    "type": "integer"
                  },
                  "expires_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "ip_address": {
                    "type": "string"
                  },
                  "user_agent": {
                    "type": "string"
                  },
                  "attestation": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "object"
                    }
                  },
                  "user": {
                    "type": "string"
                  }
                },
                "required": [
                  "created_at",
                  "updated_at",
                  "user_id",
                  "type",
                  "token",
                  "used",
                  "attempts",
                  "expires_at",
                  "user"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Verification created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerificationCreate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/verifications/{id}": {
      "get": {
        "tags": [
          "Verification"
        ],
        "summary": "Find a Verification by ID",
        "description": "Finds the Verification with the requested ID and returns it.",
        "operationId": "readVerification",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Verification",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Verification with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerificationRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "Verification"
        ],
        "summary": "Deletes a Verification by ID",
        "description": "Deletes the Verification with the requested ID.",
        "operationId": "deleteVerification",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Verification",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Verification with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "Verification"
        ],
        "summary": "Updates a Verification",
        "description": "Updates a Verification and persists changes to storage.",
        "operationId": "updateVerification",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Verification",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Verification properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "updated_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "user_id": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "token": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string"
                  },
                  "phone_number": {
                    "type": "string"
                  },
                  "redirect_url": {
                    "type": "string"
                  },
                  "used": {
                    "type": "boolean"
                  },
                  "used_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "attempts": {
                    "type": "integer"
                  },
                  "expires_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "ip_address": {
                    "type": "string"
                  },
                  "user_agent": {
                    "type": "string"
                  },
                  "attestation": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "object"
                    }
                  },
                  "user": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Verification updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerificationUpdate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/verifications/{id}/user": {
      "get": {
        "tags": [
          "Verification"
        ],
        "summary": "Find the attached User",
        "description": "Find the attached User of the Verification with the given ID",
        "operationId": "readVerificationUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Verification",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User attached to Verification with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Verification_UserRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/webhook-events": {
      "get": {
        "tags": [
          "WebhookEvent"
        ],
        "summary": "List WebhookEvents",
        "description": "List WebhookEvents.",
        "operationId": "listWebhookEvent",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result WebhookEvent list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WebhookEventList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "WebhookEvent"
        ],
        "summary": "Create a new WebhookEvent",
        "description": "Creates a new WebhookEvent and persists it to storage.",
        "operationId": "createWebhookEvent",
        "requestBody": {
          "description": "WebhookEvent to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "created_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "updated_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "webhook_id": {
                    "type": "string"
                  },
                  "event_type": {
                    "type": "string"
                  },
                  "headers": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  "payload": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "object"
                    }
                  },
                  "delivered": {
                    "type": "boolean"
                  },
                  "delivered_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "attempts": {
                    "type": "integer"
                  },
                  "next_retry": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "status_code": {
                    "type": "integer"
                  },
                  "response_body": {
                    "type": "string"
                  },
                  "error": {
                    "type": "string"
                  },
                  "webhook": {
                    "type": "string"
                  }
                },
                "required": [
                  "created_at",
                  "updated_at",
                  "webhook_id",
                  "event_type",
                  "delivered",
                  "attempts",
                  "webhook"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "WebhookEvent created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookEventCreate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/webhook-events/{id}": {
      "get": {
        "tags": [
          "WebhookEvent"
        ],
        "summary": "Find a WebhookEvent by ID",
        "description": "Finds the WebhookEvent with the requested ID and returns it.",
        "operationId": "readWebhookEvent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the WebhookEvent",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "WebhookEvent with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookEventRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "WebhookEvent"
        ],
        "summary": "Deletes a WebhookEvent by ID",
        "description": "Deletes the WebhookEvent with the requested ID.",
        "operationId": "deleteWebhookEvent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the WebhookEvent",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "WebhookEvent with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "WebhookEvent"
        ],
        "summary": "Updates a WebhookEvent",
        "description": "Updates a WebhookEvent and persists changes to storage.",
        "operationId": "updateWebhookEvent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the WebhookEvent",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "WebhookEvent properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "updated_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "webhook_id": {
                    "type": "string"
                  },
                  "event_type": {
                    "type": "string"
                  },
                  "headers": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  "payload": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "object"
                    }
                  },
                  "delivered": {
                    "type": "boolean"
                  },
                  "delivered_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "attempts": {
                    "type": "integer"
                  },
                  "next_retry": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "status_code": {
                    "type": "integer"
                  },
                  "response_body": {
                    "type": "string"
                  },
                  "error": {
                    "type": "string"
                  },
                  "webhook": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "WebhookEvent updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookEventUpdate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/webhook-events/{id}/webhook": {
      "get": {
        "tags": [
          "WebhookEvent"
        ],
        "summary": "Find the attached Webhook",
        "description": "Find the attached Webhook of the WebhookEvent with the given ID",
        "operationId": "readWebhookEventWebhook",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the WebhookEvent",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Webhook attached to WebhookEvent with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookEvent_WebhookRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/webhooks": {
      "get": {
        "tags": [
          "Webhook"
        ],
        "summary": "List Webhooks",
        "description": "List Webhooks.",
        "operationId": "listWebhook",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Webhook list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WebhookList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "Webhook"
        ],
        "summary": "Create a new Webhook",
        "description": "Creates a new Webhook and persists it to storage.",
        "operationId": "createWebhook",
        "requestBody": {
          "description": "Webhook to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "created_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "updated_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "name": {
                    "type": "string"
                  },
                  "url": {
                    "type": "string"
                  },
                  "organization_id": {
                    "type": "string"
                  },
                  "secret": {
                    "type": "string"
                  },
                  "active": {
                    "type": "boolean"
                  },
                  "event_types": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "version": {
                    "type": "string"
                  },
                  "retry_count": {
                    "type": "integer"
                  },
                  "timeout_ms": {
                    "type": "integer"
                  },
                  "format": {
                    "type": "string",
                    "enum": [
                      "json",
                      "form"
                    ],
                    "default": "json"
                  },
                  "metadata": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "object"
                    }
                  },
                  "organization": {
                    "type": "string"
                  },
                  "events": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "created_at",
                  "updated_at",
                  "name",
                  "url",
                  "organization_id",
                  "secret",
                  "active",
                  "event_types",
                  "version",
                  "retry_count",
                  "timeout_ms",
                  "format",
                  "organization"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Webhook created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookCreate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/webhooks/{id}": {
      "get": {
        "tags": [
          "Webhook"
        ],
        "summary": "Find a Webhook by ID",
        "description": "Finds the Webhook with the requested ID and returns it.",
        "operationId": "readWebhook",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Webhook",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Webhook with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "Webhook"
        ],
        "summary": "Deletes a Webhook by ID",
        "description": "Deletes the Webhook with the requested ID.",
        "operationId": "deleteWebhook",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Webhook",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Webhook with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "Webhook"
        ],
        "summary": "Updates a Webhook",
        "description": "Updates a Webhook and persists changes to storage.",
        "operationId": "updateWebhook",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Webhook",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Webhook properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "updated_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "name": {
                    "type": "string"
                  },
                  "url": {
                    "type": "string"
                  },
                  "organization_id": {
                    "type": "string"
                  },
                  "secret": {
                    "type": "string"
                  },
                  "active": {
                    "type": "boolean"
                  },
                  "event_types": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "version": {
                    "type": "string"
                  },
                  "retry_count": {
                    "type": "integer"
                  },
                  "timeout_ms": {
                    "type": "integer"
                  },
                  "format": {
                    "type": "string",
                    "enum": [
                      "json",
                      "form"
                    ],
                    "default": "json"
                  },
                  "metadata": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "object"
                    }
                  },
                  "organization": {
                    "type": "string"
                  },
                  "events": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Webhook updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookUpdate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/webhooks/{id}/events": {
      "get": {
        "tags": [
          "Webhook"
        ],
        "summary": "List attached Events",
        "description": "List attached Events.",
        "operationId": "listWebhookEvents",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Webhook",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Webhooks list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Webhook_EventsList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/webhooks/{id}/organization": {
      "get": {
        "tags": [
          "Webhook"
        ],
        "summary": "Find the attached Organization",
        "description": "Find the attached Organization of the Webhook with the given ID",
        "operationId": "readWebhookOrganization",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Webhook",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Organization attached to Webhook with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhook_OrganizationRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ApiKey": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "hashed_key": {
            "type": "string"
          },
          "user_id": {
            "type": "string"
          },
          "organization_id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "permissions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "last_used": {
            "type": "string",
            "format": "date-time"
          },
          "expires_at": {
            "type": "string",
            "format": "date-time"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          },
          "organization": {
            "$ref": "#/components/schemas/Organization"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "name",
          "key",
          "hashed_key",
          "type",
          "active"
        ]
      },
      "ApiKeyCreate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "hashed_key": {
            "type": "string"
          },
          "user_id": {
            "type": "string"
          },
          "organization_id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "permissions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "last_used": {
            "type": "string",
            "format": "date-time"
          },
          "expires_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "name",
          "hashed_key",
          "type",
          "active"
        ]
      },
      "ApiKeyList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "hashed_key": {
            "type": "string"
          },
          "user_id": {
            "type": "string"
          },
          "organization_id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "permissions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "last_used": {
            "type": "string",
            "format": "date-time"
          },
          "expires_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "name",
          "hashed_key",
          "type",
          "active"
        ]
      },
      "ApiKeyRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "hashed_key": {
            "type": "string"
          },
          "user_id": {
            "type": "string"
          },
          "organization_id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "permissions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "last_used": {
            "type": "string",
            "format": "date-time"
          },
          "expires_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "name",
          "hashed_key",
          "type",
          "active"
        ]
      },
      "ApiKeyUpdate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "hashed_key": {
            "type": "string"
          },
          "user_id": {
            "type": "string"
          },
          "organization_id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "permissions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "last_used": {
            "type": "string",
            "format": "date-time"
          },
          "expires_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "name",
          "hashed_key",
          "type",
          "active"
        ]
      },
      "ApiKey_OrganizationRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "domain": {
            "type": "string"
          },
          "logo_url": {
            "type": "string"
          },
          "plan": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "trial_ends_at": {
            "type": "string",
            "format": "date-time"
          },
          "trial_used": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "name",
          "slug",
          "plan",
          "active",
          "trial_used"
        ]
      },
      "ApiKey_UserRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "email": {
            "type": "string"
          },
          "phone_number": {
            "type": "string"
          },
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "email_verified": {
            "type": "boolean"
          },
          "phone_verified": {
            "type": "boolean"
          },
          "active": {
            "type": "boolean"
          },
          "last_login": {
            "type": "string",
            "format": "date-time"
          },
          "last_password_change": {
            "type": "string",
            "format": "date-time"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "profile_image_url": {
            "type": "string"
          },
          "primary_organization_id": {
            "type": "string"
          },
          "locale": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "email",
          "email_verified",
          "phone_verified",
          "active",
          "locale"
        ]
      },
      "EmailTemplate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "subject": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "html_content": {
            "type": "string"
          },
          "text_content": {
            "type": "string"
          },
          "organization_id": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "system": {
            "type": "boolean"
          },
          "locale": {
            "type": "string"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "name",
          "subject",
          "type",
          "html_content",
          "active",
          "system",
          "locale"
        ]
      },
      "EmailTemplateCreate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "subject": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "html_content": {
            "type": "string"
          },
          "text_content": {
            "type": "string"
          },
          "organization_id": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "system": {
            "type": "boolean"
          },
          "locale": {
            "type": "string"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "name",
          "subject",
          "type",
          "html_content",
          "active",
          "system",
          "locale"
        ]
      },
      "EmailTemplateList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "subject": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "html_content": {
            "type": "string"
          },
          "text_content": {
            "type": "string"
          },
          "organization_id": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "system": {
            "type": "boolean"
          },
          "locale": {
            "type": "string"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "name",
          "subject",
          "type",
          "html_content",
          "active",
          "system",
          "locale"
        ]
      },
      "EmailTemplateRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "subject": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "html_content": {
            "type": "string"
          },
          "text_content": {
            "type": "string"
          },
          "organization_id": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "system": {
            "type": "boolean"
          },
          "locale": {
            "type": "string"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "name",
          "subject",
          "type",
          "html_content",
          "active",
          "system",
          "locale"
        ]
      },
      "EmailTemplateUpdate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "subject": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "html_content": {
            "type": "string"
          },
          "text_content": {
            "type": "string"
          },
          "organization_id": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "system": {
            "type": "boolean"
          },
          "locale": {
            "type": "string"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "name",
          "subject",
          "type",
          "html_content",
          "active",
          "system",
          "locale"
        ]
      },
      "FeatureFlag": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "is_premium": {
            "type": "boolean"
          },
          "component": {
            "type": "string",
            "enum": [
              "oauth2",
              "passwordless",
              "mfa",
              "passkeys",
              "sso",
              "enterprise",
              "webhooks",
              "api_keys"
            ]
          },
          "organizations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrganizationFeature"
            }
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "name",
          "key",
          "enabled",
          "is_premium",
          "component"
        ]
      },
      "FeatureFlagCreate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "is_premium": {
            "type": "boolean"
          },
          "component": {
            "type": "string",
            "enum": [
              "oauth2",
              "passwordless",
              "mfa",
              "passkeys",
              "sso",
              "enterprise",
              "webhooks",
              "api_keys"
            ]
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "name",
          "key",
          "enabled",
          "is_premium",
          "component"
        ]
      },
      "FeatureFlagList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "is_premium": {
            "type": "boolean"
          },
          "component": {
            "type": "string",
            "enum": [
              "oauth2",
              "passwordless",
              "mfa",
              "passkeys",
              "sso",
              "enterprise",
              "webhooks",
              "api_keys"
            ]
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "name",
          "key",
          "enabled",
          "is_premium",
          "component"
        ]
      },
      "FeatureFlagRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "is_premium": {
            "type": "boolean"
          },
          "component": {
            "type": "string",
            "enum": [
              "oauth2",
              "passwordless",
              "mfa",
              "passkeys",
              "sso",
              "enterprise",
              "webhooks",
              "api_keys"
            ]
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "name",
          "key",
          "enabled",
          "is_premium",
          "component"
        ]
      },
      "FeatureFlagUpdate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "is_premium": {
            "type": "boolean"
          },
          "component": {
            "type": "string",
            "enum": [
              "oauth2",
              "passwordless",
              "mfa",
              "passkeys",
              "sso",
              "enterprise",
              "webhooks",
              "api_keys"
            ]
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "name",
          "key",
          "enabled",
          "is_premium",
          "component"
        ]
      },
      "FeatureFlag_OrganizationsList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "organization_id": {
            "type": "string"
          },
          "feature_id": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "settings": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "organization_id",
          "feature_id",
          "enabled"
        ]
      },
      "IdentityProvider": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "organization_id": {
            "type": "string"
          },
          "provider_type": {
            "type": "string"
          },
          "client_id": {
            "type": "string"
          },
          "client_secret": {
            "type": "string"
          },
          "issuer": {
            "type": "string"
          },
          "authorization_endpoint": {
            "type": "string"
          },
          "token_endpoint": {
            "type": "string"
          },
          "userinfo_endpoint": {
            "type": "string"
          },
          "jwks_uri": {
            "type": "string"
          },
          "metadata_url": {
            "type": "string"
          },
          "redirect_uri": {
            "type": "string"
          },
          "certificate": {
            "type": "string"
          },
          "private_key": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "primary": {
            "type": "boolean"
          },
          "domains": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "attributes_mapping": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "organization": {
            "$ref": "#/components/schemas/Organization"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "name",
          "organization_id",
          "provider_type",
          "active",
          "primary",
          "organization"
        ]
      },
      "IdentityProviderCreate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "organization_id": {
            "type": "string"
          },
          "provider_type": {
            "type": "string"
          },
          "client_id": {
            "type": "string"
          },
          "issuer": {
            "type": "string"
          },
          "authorization_endpoint": {
            "type": "string"
          },
          "token_endpoint": {
            "type": "string"
          },
          "userinfo_endpoint": {
            "type": "string"
          },
          "jwks_uri": {
            "type": "string"
          },
          "metadata_url": {
            "type": "string"
          },
          "redirect_uri": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "primary": {
            "type": "boolean"
          },
          "domains": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "attributes_mapping": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "name",
          "organization_id",
          "provider_type",
          "active",
          "primary"
        ]
      },
      "IdentityProviderList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "organization_id": {
            "type": "string"
          },
          "provider_type": {
            "type": "string"
          },
          "client_id": {
            "type": "string"
          },
          "issuer": {
            "type": "string"
          },
          "authorization_endpoint": {
            "type": "string"
          },
          "token_endpoint": {
            "type": "string"
          },
          "userinfo_endpoint": {
            "type": "string"
          },
          "jwks_uri": {
            "type": "string"
          },
          "metadata_url": {
            "type": "string"
          },
          "redirect_uri": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "primary": {
            "type": "boolean"
          },
          "domains": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "attributes_mapping": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "name",
          "organization_id",
          "provider_type",
          "active",
          "primary"
        ]
      },
      "IdentityProviderRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "organization_id": {
            "type": "string"
          },
          "provider_type": {
            "type": "string"
          },
          "client_id": {
            "type": "string"
          },
          "issuer": {
            "type": "string"
          },
          "authorization_endpoint": {
            "type": "string"
          },
          "token_endpoint": {
            "type": "string"
          },
          "userinfo_endpoint": {
            "type": "string"
          },
          "jwks_uri": {
            "type": "string"
          },
          "metadata_url": {
            "type": "string"
          },
          "redirect_uri": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "primary": {
            "type": "boolean"
          },
          "domains": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "attributes_mapping": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "name",
          "organization_id",
          "provider_type",
          "active",
          "primary"
        ]
      },
      "IdentityProviderUpdate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "organization_id": {
            "type": "string"
          },
          "provider_type": {
            "type": "string"
          },
          "client_id": {
            "type": "string"
          },
          "issuer": {
            "type": "string"
          },
          "authorization_endpoint": {
            "type": "string"
          },
          "token_endpoint": {
            "type": "string"
          },
          "userinfo_endpoint": {
            "type": "string"
          },
          "jwks_uri": {
            "type": "string"
          },
          "metadata_url": {
            "type": "string"
          },
          "redirect_uri": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "primary": {
            "type": "boolean"
          },
          "domains": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "attributes_mapping": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "name",
          "organization_id",
          "provider_type",
          "active",
          "primary"
        ]
      },
      "IdentityProvider_OrganizationRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "domain": {
            "type": "string"
          },
          "logo_url": {
            "type": "string"
          },
          "plan": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "trial_ends_at": {
            "type": "string",
            "format": "date-time"
          },
          "trial_used": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "name",
          "slug",
          "plan",
          "active",
          "trial_used"
        ]
      },
      "MFA": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "user_id": {
            "type": "string"
          },
          "method": {
            "type": "string"
          },
          "secret": {
            "type": "string"
          },
          "verified": {
            "type": "boolean"
          },
          "active": {
            "type": "boolean"
          },
          "backup_codes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "phone_number": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "last_used": {
            "type": "string",
            "format": "date-time"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "user": {
            "$ref": "#/components/schemas/User"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "user_id",
          "method",
          "secret",
          "verified",
          "active",
          "user"
        ]
      },
      "MFACreate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "user_id": {
            "type": "string"
          },
          "method": {
            "type": "string"
          },
          "verified": {
            "type": "boolean"
          },
          "active": {
            "type": "boolean"
          },
          "backup_codes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "phone_number": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "last_used": {
            "type": "string",
            "format": "date-time"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "user_id",
          "method",
          "verified",
          "active"
        ]
      },
      "MFAList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "user_id": {
            "type": "string"
          },
          "method": {
            "type": "string"
          },
          "verified": {
            "type": "boolean"
          },
          "active": {
            "type": "boolean"
          },
          "backup_codes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "phone_number": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "last_used": {
            "type": "string",
            "format": "date-time"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "user_id",
          "method",
          "verified",
          "active"
        ]
      },
      "MFARead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "user_id": {
            "type": "string"
          },
          "method": {
            "type": "string"
          },
          "verified": {
            "type": "boolean"
          },
          "active": {
            "type": "boolean"
          },
          "backup_codes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "phone_number": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "last_used": {
            "type": "string",
            "format": "date-time"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "user_id",
          "method",
          "verified",
          "active"
        ]
      },
      "MFAUpdate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "user_id": {
            "type": "string"
          },
          "method": {
            "type": "string"
          },
          "verified": {
            "type": "boolean"
          },
          "active": {
            "type": "boolean"
          },
          "backup_codes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "phone_number": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "last_used": {
            "type": "string",
            "format": "date-time"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "user_id",
          "method",
          "verified",
          "active"
        ]
      },
      "MFA_UserRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "email": {
            "type": "string"
          },
          "phone_number": {
            "type": "string"
          },
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "email_verified": {
            "type": "boolean"
          },
          "phone_verified": {
            "type": "boolean"
          },
          "active": {
            "type": "boolean"
          },
          "last_login": {
            "type": "string",
            "format": "date-time"
          },
          "last_password_change": {
            "type": "string",
            "format": "date-time"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "profile_image_url": {
            "type": "string"
          },
          "primary_organization_id": {
            "type": "string"
          },
          "locale": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "email",
          "email_verified",
          "phone_verified",
          "active",
          "locale"
        ]
      },
      "OAuthAuthorization": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "client_id": {
            "type": "string"
          },
          "user_id": {
            "type": "string"
          },
          "organization_id": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "code_challenge": {
            "type": "string"
          },
          "code_challenge_method": {
            "type": "string"
          },
          "redirect_uri": {
            "type": "string"
          },
          "scope_names": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "used": {
            "type": "boolean"
          },
          "used_at": {
            "type": "string",
            "format": "date-time"
          },
          "expires_at": {
            "type": "string",
            "format": "date-time"
          },
          "state": {
            "type": "string"
          },
          "nonce": {
            "type": "string"
          },
          "client": {
            "$ref": "#/components/schemas/OAuthClient"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          },
          "scopes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OAuthScope"
            }
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "client_id",
          "user_id",
          "redirect_uri",
          "used",
          "expires_at",
          "client",
          "user"
        ]
      },
      "OAuthAuthorizationCreate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "client_id": {
            "type": "string"
          },
          "user_id": {
            "type": "string"
          },
          "organization_id": {
            "type": "string"
          },
          "code_challenge": {
            "type": "string"
          },
          "code_challenge_method": {
            "type": "string"
          },
          "redirect_uri": {
            "type": "string"
          },
          "scope_names": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "used": {
            "type": "boolean"
          },
          "used_at": {
            "type": "string",
            "format": "date-time"
          },
          "expires_at": {
            "type": "string",
            "format": "date-time"
          },
          "state": {
            "type": "string"
          },
          "nonce": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "client_id",
          "user_id",
          "redirect_uri",
          "used",
          "expires_at"
        ]
      },
      "OAuthAuthorizationList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "client_id": {
            "type": "string"
          },
          "user_id": {
            "type": "string"
          },
          "organization_id": {
            "type": "string"
          },
          "code_challenge": {
            "type": "string"
          },
          "code_challenge_method": {
            "type": "string"
          },
          "redirect_uri": {
            "type": "string"
          },
          "scope_names": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "used": {
            "type": "boolean"
          },
          "used_at": {
            "type": "string",
            "format": "date-time"
          },
          "expires_at": {
            "type": "string",
            "format": "date-time"
          },
          "state": {
            "type": "string"
          },
          "nonce": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "client_id",
          "user_id",
          "redirect_uri",
          "used",
          "expires_at"
        ]
      },
      "OAuthAuthorizationRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "client_id": {
            "type": "string"
          },
          "user_id": {
            "type": "string"
          },
          "organization_id": {
            "type": "string"
          },
          "code_challenge": {
            "type": "string"
          },
          "code_challenge_method": {
            "type": "string"
          },
          "redirect_uri": {
            "type": "string"
          },
          "scope_names": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "used": {
            "type": "boolean"
          },
          "used_at": {
            "type": "string",
            "format": "date-time"
          },
          "expires_at": {
            "type": "string",
            "format": "date-time"
          },
          "state": {
            "type": "string"
          },
          "nonce": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "client_id",
          "user_id",
          "redirect_uri",
          "used",
          "expires_at"
        ]
      },
      "OAuthAuthorizationUpdate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "client_id": {
            "type": "string"
          },
          "user_id": {
            "type": "string"
          },
          "organization_id": {
            "type": "string"
          },
          "code_challenge": {
            "type": "string"
          },
          "code_challenge_method": {
            "type": "string"
          },
          "redirect_uri": {
            "type": "string"
          },
          "scope_names": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "used": {
            "type": "boolean"
          },
          "used_at": {
            "type": "string",
            "format": "date-time"
          },
          "expires_at": {
            "type": "string",
            "format": "date-time"
          },
          "state": {
            "type": "string"
          },
          "nonce": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "client_id",
          "user_id",
          "redirect_uri",
          "used",
          "expires_at"
        ]
      },
      "OAuthAuthorization_ClientRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "client_id": {
            "type": "string"
          },
          "client_name": {
            "type": "string"
          },
          "client_description": {
            "type": "string"
          },
          "client_uri": {
            "type": "string"
          },
          "logo_uri": {
            "type": "string"
          },
          "redirect_uris": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "post_logout_redirect_uris": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "organization_id": {
            "type": "string"
          },
          "public": {
            "type": "boolean"
          },
          "active": {
            "type": "boolean"
          },
          "allowed_cors_origins": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "allowed_grant_types": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "token_expiry_seconds": {
            "type": "integer"
          },
          "refresh_token_expiry_seconds": {
            "type": "integer"
          },
          "auth_code_expiry_seconds": {
            "type": "integer"
          },
          "requires_pkce": {
            "type": "boolean"
          },
          "requires_consent": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "client_id",
          "client_name",
          "redirect_uris",
          "public",
          "active",
          "allowed_grant_types",
          "token_expiry_seconds",
          "refresh_token_expiry_seconds",
          "auth_code_expiry_seconds",
          "requires_pkce",
          "requires_consent"
        ]
      },
      "OAuthAuthorization_ScopesList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "default_scope": {
            "type": "boolean"
          },
          "public": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "name",
          "description",
          "default_scope",
          "public"
        ]
      },
      "OAuthAuthorization_UserRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "email": {
            "type": "string"
          },
          "phone_number": {
            "type": "string"
          },
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "email_verified": {
            "type": "boolean"
          },
          "phone_verified": {
            "type": "boolean"
          },
          "active": {
            "type": "boolean"
          },
          "last_login": {
            "type": "string",
            "format": "date-time"
          },
          "last_password_change": {
            "type": "string",
            "format": "date-time"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "profile_image_url": {
            "type": "string"
          },
          "primary_organization_id": {
            "type": "string"
          },
          "locale": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "email",
          "email_verified",
          "phone_verified",
          "active",
          "locale"
        ]
      },
      "OAuthClient": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "client_id": {
            "type": "string"
          },
          "client_secret": {
            "type": "string"
          },
          "client_name": {
            "type": "string"
          },
          "client_description": {
            "type": "string"
          },
          "client_uri": {
            "type": "string"
          },
          "logo_uri": {
            "type": "string"
          },
          "redirect_uris": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "post_logout_redirect_uris": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "organization_id": {
            "type": "string"
          },
          "public": {
            "type": "boolean"
          },
          "active": {
            "type": "boolean"
          },
          "allowed_cors_origins": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "allowed_grant_types": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "token_expiry_seconds": {
            "type": "integer"
          },
          "refresh_token_expiry_seconds": {
            "type": "integer"
          },
          "auth_code_expiry_seconds": {
            "type": "integer"
          },
          "requires_pkce": {
            "type": "boolean"
          },
          "requires_consent": {
            "type": "boolean"
          },
          "organization": {
            "$ref": "#/components/schemas/Organization"
          },
          "tokens": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OAuthToken"
            }
          },
          "authorizations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OAuthAuthorization"
            }
          },
          "scopes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OAuthScope"
            }
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "client_id",
          "client_secret",
          "client_name",
          "redirect_uris",
          "public",
          "active",
          "allowed_grant_types",
          "token_expiry_seconds",
          "refresh_token_expiry_seconds",
          "auth_code_expiry_seconds",
          "requires_pkce",
          "requires_consent"
        ]
      },
      "OAuthClientCreate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "client_id": {
            "type": "string"
          },
          "client_name": {
            "type": "string"
          },
          "client_description": {
            "type": "string"
          },
          "client_uri": {
            "type": "string"
          },
          "logo_uri": {
            "type": "string"
          },
          "redirect_uris": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "post_logout_redirect_uris": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "organization_id": {
            "type": "string"
          },
          "public": {
            "type": "boolean"
          },
          "active": {
            "type": "boolean"
          },
          "allowed_cors_origins": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "allowed_grant_types": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "token_expiry_seconds": {
            "type": "integer"
          },
          "refresh_token_expiry_seconds": {
            "type": "integer"
          },
          "auth_code_expiry_seconds": {
            "type": "integer"
          },
          "requires_pkce": {
            "type": "boolean"
          },
          "requires_consent": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "client_id",
          "client_name",
          "redirect_uris",
          "public",
          "active",
          "allowed_grant_types",
          "token_expiry_seconds",
          "refresh_token_expiry_seconds",
          "auth_code_expiry_seconds",
          "requires_pkce",
          "requires_consent"
        ]
      },
      "OAuthClientList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "client_id": {
            "type": "string"
          },
          "client_name": {
            "type": "string"
          },
          "client_description": {
            "type": "string"
          },
          "client_uri": {
            "type": "string"
          },
          "logo_uri": {
            "type": "string"
          },
          "redirect_uris": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "post_logout_redirect_uris": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "organization_id": {
            "type": "string"
          },
          "public": {
            "type": "boolean"
          },
          "active": {
            "type": "boolean"
          },
          "allowed_cors_origins": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "allowed_grant_types": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "token_expiry_seconds": {
            "type": "integer"
          },
          "refresh_token_expiry_seconds": {
            "type": "integer"
          },
          "auth_code_expiry_seconds": {
            "type": "integer"
          },
          "requires_pkce": {
            "type": "boolean"
          },
          "requires_consent": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "client_id",
          "client_name",
          "redirect_uris",
          "public",
          "active",
          "allowed_grant_types",
          "token_expiry_seconds",
          "refresh_token_expiry_seconds",
          "auth_code_expiry_seconds",
          "requires_pkce",
          "requires_consent"
        ]
      },
      "OAuthClientRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "client_id": {
            "type": "string"
          },
          "client_name": {
            "type": "string"
          },
          "client_description": {
            "type": "string"
          },
          "client_uri": {
            "type": "string"
          },
          "logo_uri": {
            "type": "string"
          },
          "redirect_uris": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "post_logout_redirect_uris": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "organization_id": {
            "type": "string"
          },
          "public": {
            "type": "boolean"
          },
          "active": {
            "type": "boolean"
          },
          "allowed_cors_origins": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "allowed_grant_types": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "token_expiry_seconds": {
            "type": "integer"
          },
          "refresh_token_expiry_seconds": {
            "type": "integer"
          },
          "auth_code_expiry_seconds": {
            "type": "integer"
          },
          "requires_pkce": {
            "type": "boolean"
          },
          "requires_consent": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "client_id",
          "client_name",
          "redirect_uris",
          "public",
          "active",
          "allowed_grant_types",
          "token_expiry_seconds",
          "refresh_token_expiry_seconds",
          "auth_code_expiry_seconds",
          "requires_pkce",
          "requires_consent"
        ]
      },
      "OAuthClientUpdate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "client_id": {
            "type": "string"
          },
          "client_name": {
            "type": "string"
          },
          "client_description": {
            "type": "string"
          },
          "client_uri": {
            "type": "string"
          },
          "logo_uri": {
            "type": "string"
          },
          "redirect_uris": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "post_logout_redirect_uris": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "organization_id": {
            "type": "string"
          },
          "public": {
            "type": "boolean"
          },
          "active": {
            "type": "boolean"
          },
          "allowed_cors_origins": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "allowed_grant_types": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "token_expiry_seconds": {
            "type": "integer"
          },
          "refresh_token_expiry_seconds": {
            "type": "integer"
          },
          "auth_code_expiry_seconds": {
            "type": "integer"
          },
          "requires_pkce": {
            "type": "boolean"
          },
          "requires_consent": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "client_id",
          "client_name",
          "redirect_uris",
          "public",
          "active",
          "allowed_grant_types",
          "token_expiry_seconds",
          "refresh_token_expiry_seconds",
          "auth_code_expiry_seconds",
          "requires_pkce",
          "requires_consent"
        ]
      },
      "OAuthClient_AuthorizationsList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "client_id": {
            "type": "string"
          },
          "user_id": {
            "type": "string"
          },
          "organization_id": {
            "type": "string"
          },
          "code_challenge": {
            "type": "string"
          },
          "code_challenge_method": {
            "type": "string"
          },
          "redirect_uri": {
            "type": "string"
          },
          "scope_names": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "used": {
            "type": "boolean"
          },
          "used_at": {
            "type": "string",
            "format": "date-time"
          },
          "expires_at": {
            "type": "string",
            "format": "date-time"
          },
          "state": {
            "type": "string"
          },
          "nonce": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "client_id",
          "user_id",
          "redirect_uri",
          "used",
          "expires_at"
        ]
      },
      "OAuthClient_OrganizationRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "domain": {
            "type": "string"
          },
          "logo_url": {
            "type": "string"
          },
          "plan": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "trial_ends_at": {
            "type": "string",
            "format": "date-time"
          },
          "trial_used": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "name",
          "slug",
          "plan",
          "active",
          "trial_used"
        ]
      },
      "OAuthClient_ScopesList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "default_scope": {
            "type": "boolean"
          },
          "public": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "name",
          "description",
          "default_scope",
          "public"
        ]
      },
      "OAuthClient_TokensList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "token_type": {
            "type": "string"
          },
          "client_id": {
            "type": "string"
          },
          "user_id": {
            "type": "string"
          },
          "organization_id": {
            "type": "string"
          },
          "scope_names": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "expires_in": {
            "type": "integer"
          },
          "expires_at": {
            "type": "string",
            "format": "date-time"
          },
          "refresh_token_expires_at": {
            "type": "string",
            "format": "date-time"
          },
          "revoked": {
            "type": "boolean"
          },
          "revoked_at": {
            "type": "string",
            "format": "date-time"
          },
          "ip_address": {
            "type": "string"
          },
          "user_agent": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "token_type",
          "client_id",
          "user_id",
          "expires_in",
          "expires_at",
          "revoked"
        ]
      },
      "OAuthScope": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "default_scope": {
            "type": "boolean"
          },
          "public": {
            "type": "boolean"
          },
          "clients": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OAuthClient"
            }
          },
          "tokens": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OAuthToken"
            }
          },
          "authorizations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OAuthAuthorization"
            }
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "name",
          "description",
          "default_scope",
          "public"
        ]
      },
      "OAuthScopeCreate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "default_scope": {
            "type": "boolean"
          },
          "public": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "name",
          "description",
          "default_scope",
          "public"
        ]
      },
      "OAuthScopeList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "default_scope": {
            "type": "boolean"
          },
          "public": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "name",
          "description",
          "default_scope",
          "public"
        ]
      },
      "OAuthScopeRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "default_scope": {
            "type": "boolean"
          },
          "public": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "name",
          "description",
          "default_scope",
          "public"
        ]
      },
      "OAuthScopeUpdate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "default_scope": {
            "type": "boolean"
          },
          "public": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "name",
          "description",
          "default_scope",
          "public"
        ]
      },
      "OAuthScope_AuthorizationsList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "client_id": {
            "type": "string"
          },
          "user_id": {
            "type": "string"
          },
          "organization_id": {
            "type": "string"
          },
          "code_challenge": {
            "type": "string"
          },
          "code_challenge_method": {
            "type": "string"
          },
          "redirect_uri": {
            "type": "string"
          },
          "scope_names": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "used": {
            "type": "boolean"
          },
          "used_at": {
            "type": "string",
            "format": "date-time"
          },
          "expires_at": {
            "type": "string",
            "format": "date-time"
          },
          "state": {
            "type": "string"
          },
          "nonce": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "client_id",
          "user_id",
          "redirect_uri",
          "used",
          "expires_at"
        ]
      },
      "OAuthScope_ClientsList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "client_id": {
            "type": "string"
          },
          "client_name": {
            "type": "string"
          },
          "client_description": {
            "type": "string"
          },
          "client_uri": {
            "type": "string"
          },
          "logo_uri": {
            "type": "string"
          },
          "redirect_uris": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "post_logout_redirect_uris": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "organization_id": {
            "type": "string"
          },
          "public": {
            "type": "boolean"
          },
          "active": {
            "type": "boolean"
          },
          "allowed_cors_origins": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "allowed_grant_types": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "token_expiry_seconds": {
            "type": "integer"
          },
          "refresh_token_expiry_seconds": {
            "type": "integer"
          },
          "auth_code_expiry_seconds": {
            "type": "integer"
          },
          "requires_pkce": {
            "type": "boolean"
          },
          "requires_consent": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "client_id",
          "client_name",
          "redirect_uris",
          "public",
          "active",
          "allowed_grant_types",
          "token_expiry_seconds",
          "refresh_token_expiry_seconds",
          "auth_code_expiry_seconds",
          "requires_pkce",
          "requires_consent"
        ]
      },
      "OAuthScope_TokensList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "token_type": {
            "type": "string"
          },
          "client_id": {
            "type": "string"
          },
          "user_id": {
            "type": "string"
          },
          "organization_id": {
            "type": "string"
          },
          "scope_names": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "expires_in": {
            "type": "integer"
          },
          "expires_at": {
            "type": "string",
            "format": "date-time"
          },
          "refresh_token_expires_at": {
            "type": "string",
            "format": "date-time"
          },
          "revoked": {
            "type": "boolean"
          },
          "revoked_at": {
            "type": "string",
            "format": "date-time"
          },
          "ip_address": {
            "type": "string"
          },
          "user_agent": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "token_type",
          "client_id",
          "user_id",
          "expires_in",
          "expires_at",
          "revoked"
        ]
      },
      "OAuthToken": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "access_token": {
            "type": "string"
          },
          "refresh_token": {
            "type": "string"
          },
          "token_type": {
            "type": "string"
          },
          "client_id": {
            "type": "string"
          },
          "user_id": {
            "type": "string"
          },
          "organization_id": {
            "type": "string"
          },
          "scope_names": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "expires_in": {
            "type": "integer"
          },
          "expires_at": {
            "type": "string",
            "format": "date-time"
          },
          "refresh_token_expires_at": {
            "type": "string",
            "format": "date-time"
          },
          "revoked": {
            "type": "boolean"
          },
          "revoked_at": {
            "type": "string",
            "format": "date-time"
          },
          "ip_address": {
            "type": "string"
          },
          "user_agent": {
            "type": "string"
          },
          "client": {
            "$ref": "#/components/schemas/OAuthClient"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          },
          "scopes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OAuthScope"
            }
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "access_token",
          "token_type",
          "client_id",
          "user_id",
          "expires_in",
          "expires_at",
          "revoked",
          "client",
          "user"
        ]
      },
      "OAuthTokenCreate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "token_type": {
            "type": "string"
          },
          "client_id": {
            "type": "string"
          },
          "user_id": {
            "type": "string"
          },
          "organization_id": {
            "type": "string"
          },
          "scope_names": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "expires_in": {
            "type": "integer"
          },
          "expires_at": {
            "type": "string",
            "format": "date-time"
          },
          "refresh_token_expires_at": {
            "type": "string",
            "format": "date-time"
          },
          "revoked": {
            "type": "boolean"
          },
          "revoked_at": {
            "type": "string",
            "format": "date-time"
          },
          "ip_address": {
            "type": "string"
          },
          "user_agent": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "token_type",
          "client_id",
          "user_id",
          "expires_in",
          "expires_at",
          "revoked"
        ]
      },
      "OAuthTokenList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "token_type": {
            "type": "string"
          },
          "client_id": {
            "type": "string"
          },
          "user_id": {
            "type": "string"
          },
          "organization_id": {
            "type": "string"
          },
          "scope_names": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "expires_in": {
            "type": "integer"
          },
          "expires_at": {
            "type": "string",
            "format": "date-time"
          },
          "refresh_token_expires_at": {
            "type": "string",
            "format": "date-time"
          },
          "revoked": {
            "type": "boolean"
          },
          "revoked_at": {
            "type": "string",
            "format": "date-time"
          },
          "ip_address": {
            "type": "string"
          },
          "user_agent": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "token_type",
          "client_id",
          "user_id",
          "expires_in",
          "expires_at",
          "revoked"
        ]
      },
      "OAuthTokenRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "token_type": {
            "type": "string"
          },
          "client_id": {
            "type": "string"
          },
          "user_id": {
            "type": "string"
          },
          "organization_id": {
            "type": "string"
          },
          "scope_names": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "expires_in": {
            "type": "integer"
          },
          "expires_at": {
            "type": "string",
            "format": "date-time"
          },
          "refresh_token_expires_at": {
            "type": "string",
            "format": "date-time"
          },
          "revoked": {
            "type": "boolean"
          },
          "revoked_at": {
            "type": "string",
            "format": "date-time"
          },
          "ip_address": {
            "type": "string"
          },
          "user_agent": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "token_type",
          "client_id",
          "user_id",
          "expires_in",
          "expires_at",
          "revoked"
        ]
      },
      "OAuthTokenUpdate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "token_type": {
            "type": "string"
          },
          "client_id": {
            "type": "string"
          },
          "user_id": {
            "type": "string"
          },
          "organization_id": {
            "type": "string"
          },
          "scope_names": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "expires_in": {
            "type": "integer"
          },
          "expires_at": {
            "type": "string",
            "format": "date-time"
          },
          "refresh_token_expires_at": {
            "type": "string",
            "format": "date-time"
          },
          "revoked": {
            "type": "boolean"
          },
          "revoked_at": {
            "type": "string",
            "format": "date-time"
          },
          "ip_address": {
            "type": "string"
          },
          "user_agent": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "token_type",
          "client_id",
          "user_id",
          "expires_in",
          "expires_at",
          "revoked"
        ]
      },
      "OAuthToken_ClientRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "client_id": {
            "type": "string"
          },
          "client_name": {
            "type": "string"
          },
          "client_description": {
            "type": "string"
          },
          "client_uri": {
            "type": "string"
          },
          "logo_uri": {
            "type": "string"
          },
          "redirect_uris": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "post_logout_redirect_uris": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "organization_id": {
            "type": "string"
          },
          "public": {
            "type": "boolean"
          },
          "active": {
            "type": "boolean"
          },
          "allowed_cors_origins": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "allowed_grant_types": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "token_expiry_seconds": {
            "type": "integer"
          },
          "refresh_token_expiry_seconds": {
            "type": "integer"
          },
          "auth_code_expiry_seconds": {
            "type": "integer"
          },
          "requires_pkce": {
            "type": "boolean"
          },
          "requires_consent": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "client_id",
          "client_name",
          "redirect_uris",
          "public",
          "active",
          "allowed_grant_types",
          "token_expiry_seconds",
          "refresh_token_expiry_seconds",
          "auth_code_expiry_seconds",
          "requires_pkce",
          "requires_consent"
        ]
      },
      "OAuthToken_ScopesList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "default_scope": {
            "type": "boolean"
          },
          "public": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "name",
          "description",
          "default_scope",
          "public"
        ]
      },
      "OAuthToken_UserRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "email": {
            "type": "string"
          },
          "phone_number": {
            "type": "string"
          },
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "email_verified": {
            "type": "boolean"
          },
          "phone_verified": {
            "type": "boolean"
          },
          "active": {
            "type": "boolean"
          },
          "last_login": {
            "type": "string",
            "format": "date-time"
          },
          "last_password_change": {
            "type": "string",
            "format": "date-time"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "profile_image_url": {
            "type": "string"
          },
          "primary_organization_id": {
            "type": "string"
          },
          "locale": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "email",
          "email_verified",
          "phone_verified",
          "active",
          "locale"
        ]
      },
      "Organization": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "domain": {
            "type": "string"
          },
          "logo_url": {
            "type": "string"
          },
          "plan": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "trial_ends_at": {
            "type": "string",
            "format": "date-time"
          },
          "trial_used": {
            "type": "boolean"
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          },
          "api_keys": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiKey"
            }
          },
          "webhooks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Webhook"
            }
          },
          "feature_flags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrganizationFeature"
            }
          },
          "identity_providers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdentityProvider"
            }
          },
          "oauth_clients": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OAuthClient"
            }
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "name",
          "slug",
          "plan",
          "active",
          "trial_used"
        ]
      },
      "OrganizationCreate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "domain": {
            "type": "string"
          },
          "logo_url": {
            "type": "string"
          },
          "plan": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "trial_ends_at": {
            "type": "string",
            "format": "date-time"
          },
          "trial_used": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "name",
          "slug",
          "plan",
          "active",
          "trial_used"
        ]
      },
      "OrganizationFeature": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "organization_id": {
            "type": "string"
          },
          "feature_id": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "settings": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "organization": {
            "$ref": "#/components/schemas/Organization"
          },
          "feature": {
            "$ref": "#/components/schemas/FeatureFlag"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "organization_id",
          "feature_id",
          "enabled",
          "organization",
          "feature"
        ]
      },
      "OrganizationFeatureCreate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "organization_id": {
            "type": "string"
          },
          "feature_id": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "settings": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "organization_id",
          "feature_id",
          "enabled"
        ]
      },
      "OrganizationFeatureList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "organization_id": {
            "type": "string"
          },
          "feature_id": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "settings": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "organization_id",
          "feature_id",
          "enabled"
        ]
      },
      "OrganizationFeatureRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "organization_id": {
            "type": "string"
          },
          "feature_id": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "settings": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "organization_id",
          "feature_id",
          "enabled"
        ]
      },
      "OrganizationFeatureUpdate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "organization_id": {
            "type": "string"
          },
          "feature_id": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "settings": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "organization_id",
          "feature_id",
          "enabled"
        ]
      },
      "OrganizationFeature_FeatureRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "is_premium": {
            "type": "boolean"
          },
          "component": {
            "type": "string",
            "enum": [
              "oauth2",
              "passwordless",
              "mfa",
              "passkeys",
              "sso",
              "enterprise",
              "webhooks",
              "api_keys"
            ]
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "name",
          "key",
          "enabled",
          "is_premium",
          "component"
        ]
      },
      "OrganizationFeature_OrganizationRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "domain": {
            "type": "string"
          },
          "logo_url": {
            "type": "string"
          },
          "plan": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "trial_ends_at": {
            "type": "string",
            "format": "date-time"
          },
          "trial_used": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "name",
          "slug",
          "plan",
          "active",
          "trial_used"
        ]
      },
      "OrganizationList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "domain": {
            "type": "string"
          },
          "logo_url": {
            "type": "string"
          },
          "plan": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "trial_ends_at": {
            "type": "string",
            "format": "date-time"
          },
          "trial_used": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "name",
          "slug",
          "plan",
          "active",
          "trial_used"
        ]
      },
      "OrganizationRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "domain": {
            "type": "string"
          },
          "logo_url": {
            "type": "string"
          },
          "plan": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "trial_ends_at": {
            "type": "string",
            "format": "date-time"
          },
          "trial_used": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "name",
          "slug",
          "plan",
          "active",
          "trial_used"
        ]
      },
      "OrganizationUpdate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "domain": {
            "type": "string"
          },
          "logo_url": {
            "type": "string"
          },
          "plan": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "trial_ends_at": {
            "type": "string",
            "format": "date-time"
          },
          "trial_used": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "name",
          "slug",
          "plan",
          "active",
          "trial_used"
        ]
      },
      "Organization_APIKeysList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "hashed_key": {
            "type": "string"
          },
          "user_id": {
            "type": "string"
          },
          "organization_id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "permissions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "last_used": {
            "type": "string",
            "format": "date-time"
          },
          "expires_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "name",
          "hashed_key",
          "type",
          "active"
        ]
      },
      "Organization_FeatureFlagsList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "organization_id": {
            "type": "string"
          },
          "feature_id": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "settings": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "organization_id",
          "feature_id",
          "enabled"
        ]
      },
      "Organization_IdentityProvidersList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "organization_id": {
            "type": "string"
          },
          "provider_type": {
            "type": "string"
          },
          "client_id": {
            "type": "string"
          },
          "issuer": {
            "type": "string"
          },
          "authorization_endpoint": {
            "type": "string"
          },
          "token_endpoint": {
            "type": "string"
          },
          "userinfo_endpoint": {
            "type": "string"
          },
          "jwks_uri": {
            "type": "string"
          },
          "metadata_url": {
            "type": "string"
          },
          "redirect_uri": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "primary": {
            "type": "boolean"
          },
          "domains": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "attributes_mapping": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "name",
          "organization_id",
          "provider_type",
          "active",
          "primary"
        ]
      },
      "Organization_OauthClientsList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "client_id": {
            "type": "string"
          },
          "client_name": {
            "type": "string"
          },
          "client_description": {
            "type": "string"
          },
          "client_uri": {
            "type": "string"
          },
          "logo_uri": {
            "type": "string"
          },
          "redirect_uris": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "post_logout_redirect_uris": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "organization_id": {
            "type": "string"
          },
          "public": {
            "type": "boolean"
          },
          "active": {
            "type": "boolean"
          },
          "allowed_cors_origins": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "allowed_grant_types": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "token_expiry_seconds": {
            "type": "integer"
          },
          "refresh_token_expiry_seconds": {
            "type": "integer"
          },
          "auth_code_expiry_seconds": {
            "type": "integer"
          },
          "requires_pkce": {
            "type": "boolean"
          },
          "requires_consent": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "client_id",
          "client_name",
          "redirect_uris",
          "public",
          "active",
          "allowed_grant_types",
          "token_expiry_seconds",
          "refresh_token_expiry_seconds",
          "auth_code_expiry_seconds",
          "requires_pkce",
          "requires_consent"
        ]
      },
      "Organization_UsersList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "email": {
            "type": "string"
          },
          "phone_number": {
            "type": "string"
          },
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "email_verified": {
            "type": "boolean"
          },
          "phone_verified": {
            "type": "boolean"
          },
          "active": {
            "type": "boolean"
          },
          "last_login": {
            "type": "string",
            "format": "date-time"
          },
          "last_password_change": {
            "type": "string",
            "format": "date-time"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "profile_image_url": {
            "type": "string"
          },
          "primary_organization_id": {
            "type": "string"
          },
          "locale": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "email",
          "email_verified",
          "phone_verified",
          "active",
          "locale"
        ]
      },
      "Organization_WebhooksList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "organization_id": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "event_types": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "version": {
            "type": "string"
          },
          "retry_count": {
            "type": "integer"
          },
          "timeout_ms": {
            "type": "integer"
          },
          "format": {
            "type": "string",
            "enum": [
              "json",
              "form"
            ],
            "default": "json"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "name",
          "url",
          "organization_id",
          "active",
          "event_types",
          "version",
          "retry_count",
          "timeout_ms",
          "format"
        ]
      },
      "Passkey": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "user_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "credential_id": {
            "type": "string"
          },
          "public_key": {
            "type": "string",
            "format": "byte"
          },
          "sign_count": {
            "type": "integer"
          },
          "active": {
            "type": "boolean"
          },
          "device_type": {
            "type": "string"
          },
          "aaguid": {
            "type": "string"
          },
          "last_used": {
            "type": "string",
            "format": "date-time"
          },
          "transports": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "attestation": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "user": {
            "$ref": "#/components/schemas/User"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "user_id",
          "name",
          "credential_id",
          "public_key",
          "sign_count",
          "active",
          "user"
        ]
      },
      "PasskeyCreate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "user_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "credential_id": {
            "type": "string"
          },
          "public_key": {
            "type": "string",
            "format": "byte"
          },
          "sign_count": {
            "type": "integer"
          },
          "active": {
            "type": "boolean"
          },
          "device_type": {
            "type": "string"
          },
          "aaguid": {
            "type": "string"
          },
          "last_used": {
            "type": "string",
            "format": "date-time"
          },
          "transports": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "attestation": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "user_id",
          "name",
          "credential_id",
          "public_key",
          "sign_count",
          "active"
        ]
      },
      "PasskeyList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "user_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "credential_id": {
            "type": "string"
          },
          "public_key": {
            "type": "string",
            "format": "byte"
          },
          "sign_count": {
            "type": "integer"
          },
          "active": {
            "type": "boolean"
          },
          "device_type": {
            "type": "string"
          },
          "aaguid": {
            "type": "string"
          },
          "last_used": {
            "type": "string",
            "format": "date-time"
          },
          "transports": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "attestation": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "user_id",
          "name",
          "credential_id",
          "public_key",
          "sign_count",
          "active"
        ]
      },
      "PasskeyRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "user_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "credential_id": {
            "type": "string"
          },
          "public_key": {
            "type": "string",
            "format": "byte"
          },
          "sign_count": {
            "type": "integer"
          },
          "active": {
            "type": "boolean"
          },
          "device_type": {
            "type": "string"
          },
          "aaguid": {
            "type": "string"
          },
          "last_used": {
            "type": "string",
            "format": "date-time"
          },
          "transports": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "attestation": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "user_id",
          "name",
          "credential_id",
          "public_key",
          "sign_count",
          "active"
        ]
      },
      "PasskeyUpdate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "user_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "credential_id": {
            "type": "string"
          },
          "public_key": {
            "type": "string",
            "format": "byte"
          },
          "sign_count": {
            "type": "integer"
          },
          "active": {
            "type": "boolean"
          },
          "device_type": {
            "type": "string"
          },
          "aaguid": {
            "type": "string"
          },
          "last_used": {
            "type": "string",
            "format": "date-time"
          },
          "transports": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "attestation": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "user_id",
          "name",
          "credential_id",
          "public_key",
          "sign_count",
          "active"
        ]
      },
      "Passkey_UserRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "email": {
            "type": "string"
          },
          "phone_number": {
            "type": "string"
          },
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "email_verified": {
            "type": "boolean"
          },
          "phone_verified": {
            "type": "boolean"
          },
          "active": {
            "type": "boolean"
          },
          "last_login": {
            "type": "string",
            "format": "date-time"
          },
          "last_password_change": {
            "type": "string",
            "format": "date-time"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "profile_image_url": {
            "type": "string"
          },
          "primary_organization_id": {
            "type": "string"
          },
          "locale": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "email",
          "email_verified",
          "phone_verified",
          "active",
          "locale"
        ]
      },
      "Permission": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "resource": {
            "type": "string"
          },
          "action": {
            "type": "string"
          },
          "conditions": {
            "type": "string"
          },
          "system": {
            "type": "boolean"
          },
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Role"
            }
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "name",
          "description",
          "resource",
          "action",
          "system"
        ]
      },
      "PermissionCreate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "resource": {
            "type": "string"
          },
          "action": {
            "type": "string"
          },
          "conditions": {
            "type": "string"
          },
          "system": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "name",
          "description",
          "resource",
          "action",
          "system"
        ]
      },
      "PermissionList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "resource": {
            "type": "string"
          },
          "action": {
            "type": "string"
          },
          "conditions": {
            "type": "string"
          },
          "system": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "name",
          "description",
          "resource",
          "action",
          "system"
        ]
      },
      "PermissionRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "resource": {
            "type": "string"
          },
          "action": {
            "type": "string"
          },
          "conditions": {
            "type": "string"
          },
          "system": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "name",
          "description",
          "resource",
          "action",
          "system"
        ]
      },
      "PermissionUpdate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "resource": {
            "type": "string"
          },
          "action": {
            "type": "string"
          },
          "conditions": {
            "type": "string"
          },
          "system": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "name",
          "description",
          "resource",
          "action",
          "system"
        ]
      },
      "Permission_RolesList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "organization_id": {
            "type": "string"
          },
          "system": {
            "type": "boolean"
          },
          "is_default": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "name",
          "system",
          "is_default"
        ]
      },
      "Role": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "organization_id": {
            "type": "string"
          },
          "system": {
            "type": "boolean"
          },
          "is_default": {
            "type": "boolean"
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          },
          "permissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Permission"
            }
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "name",
          "system",
          "is_default"
        ]
      },
      "RoleCreate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "organization_id": {
            "type": "string"
          },
          "system": {
            "type": "boolean"
          },
          "is_default": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "name",
          "system",
          "is_default"
        ]
      },
      "RoleList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "organization_id": {
            "type": "string"
          },
          "system": {
            "type": "boolean"
          },
          "is_default": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "name",
          "system",
          "is_default"
        ]
      },
      "RoleRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "organization_id": {
            "type": "string"
          },
          "system": {
            "type": "boolean"
          },
          "is_default": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "name",
          "system",
          "is_default"
        ]
      },
      "RoleUpdate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "organization_id": {
            "type": "string"
          },
          "system": {
            "type": "boolean"
          },
          "is_default": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "name",
          "system",
          "is_default"
        ]
      },
      "Role_PermissionsList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "resource": {
            "type": "string"
          },
          "action": {
            "type": "string"
          },
          "conditions": {
            "type": "string"
          },
          "system": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "name",
          "description",
          "resource",
          "action",
          "system"
        ]
      },
      "Role_UsersList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "email": {
            "type": "string"
          },
          "phone_number": {
            "type": "string"
          },
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "email_verified": {
            "type": "boolean"
          },
          "phone_verified": {
            "type": "boolean"
          },
          "active": {
            "type": "boolean"
          },
          "last_login": {
            "type": "string",
            "format": "date-time"
          },
          "last_password_change": {
            "type": "string",
            "format": "date-time"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "profile_image_url": {
            "type": "string"
          },
          "primary_organization_id": {
            "type": "string"
          },
          "locale": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "email",
          "email_verified",
          "phone_verified",
          "active",
          "locale"
        ]
      },
      "SSOState": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "state": {
            "type": "string"
          },
          "data": {
            "type": "string"
          },
          "expires_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "state",
          "data",
          "expires_at"
        ]
      },
      "SSOStateCreate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "state": {
            "type": "string"
          },
          "data": {
            "type": "string"
          },
          "expires_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "state",
          "data",
          "expires_at"
        ]
      },
      "SSOStateList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "state": {
            "type": "string"
          },
          "data": {
            "type": "string"
          },
          "expires_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "state",
          "data",
          "expires_at"
        ]
      },
      "SSOStateRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "state": {
            "type": "string"
          },
          "data": {
            "type": "string"
          },
          "expires_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "state",
          "data",
          "expires_at"
        ]
      },
      "SSOStateUpdate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "state": {
            "type": "string"
          },
          "data": {
            "type": "string"
          },
          "expires_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "state",
          "data",
          "expires_at"
        ]
      },
      "Session": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "user_id": {
            "type": "string"
          },
          "token": {
            "type": "string"
          },
          "ip_address": {
            "type": "string"
          },
          "user_agent": {
            "type": "string"
          },
          "device_id": {
            "type": "string"
          },
          "location": {
            "type": "string"
          },
          "organization_id": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "expires_at": {
            "type": "string",
            "format": "date-time"
          },
          "last_active_at": {
            "type": "string",
            "format": "date-time"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "user": {
            "$ref": "#/components/schemas/User"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "user_id",
          "token",
          "active",
          "expires_at",
          "last_active_at",
          "user"
        ]
      },
      "SessionCreate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "user_id": {
            "type": "string"
          },
          "ip_address": {
            "type": "string"
          },
          "user_agent": {
            "type": "string"
          },
          "device_id": {
            "type": "string"
          },
          "location": {
            "type": "string"
          },
          "organization_id": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "expires_at": {
            "type": "string",
            "format": "date-time"
          },
          "last_active_at": {
            "type": "string",
            "format": "date-time"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "user_id",
          "active",
          "expires_at",
          "last_active_at"
        ]
      },
      "SessionList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "user_id": {
            "type": "string"
          },
          "ip_address": {
            "type": "string"
          },
          "user_agent": {
            "type": "string"
          },
          "device_id": {
            "type": "string"
          },
          "location": {
            "type": "string"
          },
          "organization_id": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "expires_at": {
            "type": "string",
            "format": "date-time"
          },
          "last_active_at": {
            "type": "string",
            "format": "date-time"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "user_id",
          "active",
          "expires_at",
          "last_active_at"
        ]
      },
      "SessionRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "user_id": {
            "type": "string"
          },
          "ip_address": {
            "type": "string"
          },
          "user_agent": {
            "type": "string"
          },
          "device_id": {
            "type": "string"
          },
          "location": {
            "type": "string"
          },
          "organization_id": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "expires_at": {
            "type": "string",
            "format": "date-time"
          },
          "last_active_at": {
            "type": "string",
            "format": "date-time"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "user_id",
          "active",
          "expires_at",
          "last_active_at"
        ]
      },
      "SessionUpdate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "user_id": {
            "type": "string"
          },
          "ip_address": {
            "type": "string"
          },
          "user_agent": {
            "type": "string"
          },
          "device_id": {
            "type": "string"
          },
          "location": {
            "type": "string"
          },
          "organization_id": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "expires_at": {
            "type": "string",
            "format": "date-time"
          },
          "last_active_at": {
            "type": "string",
            "format": "date-time"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "user_id",
          "active",
          "expires_at",
          "last_active_at"
        ]
      },
      "Session_UserRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "email": {
            "type": "string"
          },
          "phone_number": {
            "type": "string"
          },
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "email_verified": {
            "type": "boolean"
          },
          "phone_verified": {
            "type": "boolean"
          },
          "active": {
            "type": "boolean"
          },
          "last_login": {
            "type": "string",
            "format": "date-time"
          },
          "last_password_change": {
            "type": "string",
            "format": "date-time"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "profile_image_url": {
            "type": "string"
          },
          "primary_organization_id": {
            "type": "string"
          },
          "locale": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "email",
          "email_verified",
          "phone_verified",
          "active",
          "locale"
        ]
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "email": {
            "type": "string"
          },
          "phone_number": {
            "type": "string"
          },
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "password_hash": {
            "type": "string"
          },
          "email_verified": {
            "type": "boolean"
          },
          "phone_verified": {
            "type": "boolean"
          },
          "active": {
            "type": "boolean"
          },
          "last_login": {
            "type": "string",
            "format": "date-time"
          },
          "last_password_change": {
            "type": "string",
            "format": "date-time"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "profile_image_url": {
            "type": "string"
          },
          "primary_organization_id": {
            "type": "string"
          },
          "locale": {
            "type": "string"
          },
          "sessions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Session"
            }
          },
          "api_keys": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiKey"
            }
          },
          "organizations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Organization"
            }
          },
          "mfa_methods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MFA"
            }
          },
          "passkeys": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Passkey"
            }
          },
          "oauth_tokens": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OAuthToken"
            }
          },
          "oauth_authorizations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OAuthAuthorization"
            }
          },
          "verifications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Verification"
            }
          },
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Role"
            }
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "email",
          "email_verified",
          "phone_verified",
          "active",
          "locale"
        ]
      },
      "UserCreate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "email": {
            "type": "string"
          },
          "phone_number": {
            "type": "string"
          },
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "email_verified": {
            "type": "boolean"
          },
          "phone_verified": {
            "type": "boolean"
          },
          "active": {
            "type": "boolean"
          },
          "last_login": {
            "type": "string",
            "format": "date-time"
          },
          "last_password_change": {
            "type": "string",
            "format": "date-time"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "profile_image_url": {
            "type": "string"
          },
          "primary_organization_id": {
            "type": "string"
          },
          "locale": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "email",
          "email_verified",
          "phone_verified",
          "active",
          "locale"
        ]
      },
      "UserList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "email": {
            "type": "string"
          },
          "phone_number": {
            "type": "string"
          },
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "email_verified": {
            "type": "boolean"
          },
          "phone_verified": {
            "type": "boolean"
          },
          "active": {
            "type": "boolean"
          },
          "last_login": {
            "type": "string",
            "format": "date-time"
          },
          "last_password_change": {
            "type": "string",
            "format": "date-time"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "profile_image_url": {
            "type": "string"
          },
          "primary_organization_id": {
            "type": "string"
          },
          "locale": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "email",
          "email_verified",
          "phone_verified",
          "active",
          "locale"
        ]
      },
      "UserRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "email": {
            "type": "string"
          },
          "phone_number": {
            "type": "string"
          },
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "email_verified": {
            "type": "boolean"
          },
          "phone_verified": {
            "type": "boolean"
          },
          "active": {
            "type": "boolean"
          },
          "last_login": {
            "type": "string",
            "format": "date-time"
          },
          "last_password_change": {
            "type": "string",
            "format": "date-time"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "profile_image_url": {
            "type": "string"
          },
          "primary_organization_id": {
            "type": "string"
          },
          "locale": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "email",
          "email_verified",
          "phone_verified",
          "active",
          "locale"
        ]
      },
      "UserUpdate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "email": {
            "type": "string"
          },
          "phone_number": {
            "type": "string"
          },
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "email_verified": {
            "type": "boolean"
          },
          "phone_verified": {
            "type": "boolean"
          },
          "active": {
            "type": "boolean"
          },
          "last_login": {
            "type": "string",
            "format": "date-time"
          },
          "last_password_change": {
            "type": "string",
            "format": "date-time"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "profile_image_url": {
            "type": "string"
          },
          "primary_organization_id": {
            "type": "string"
          },
          "locale": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "email",
          "email_verified",
          "phone_verified",
          "active",
          "locale"
        ]
      },
      "User_APIKeysList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "hashed_key": {
            "type": "string"
          },
          "user_id": {
            "type": "string"
          },
          "organization_id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "permissions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "last_used": {
            "type": "string",
            "format": "date-time"
          },
          "expires_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "name",
          "hashed_key",
          "type",
          "active"
        ]
      },
      "User_MfaMethodsList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "user_id": {
            "type": "string"
          },
          "method": {
            "type": "string"
          },
          "verified": {
            "type": "boolean"
          },
          "active": {
            "type": "boolean"
          },
          "backup_codes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "phone_number": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "last_used": {
            "type": "string",
            "format": "date-time"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "user_id",
          "method",
          "verified",
          "active"
        ]
      },
      "User_OauthAuthorizationsList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "client_id": {
            "type": "string"
          },
          "user_id": {
            "type": "string"
          },
          "organization_id": {
            "type": "string"
          },
          "code_challenge": {
            "type": "string"
          },
          "code_challenge_method": {
            "type": "string"
          },
          "redirect_uri": {
            "type": "string"
          },
          "scope_names": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "used": {
            "type": "boolean"
          },
          "used_at": {
            "type": "string",
            "format": "date-time"
          },
          "expires_at": {
            "type": "string",
            "format": "date-time"
          },
          "state": {
            "type": "string"
          },
          "nonce": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "client_id",
          "user_id",
          "redirect_uri",
          "used",
          "expires_at"
        ]
      },
      "User_OauthTokensList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "token_type": {
            "type": "string"
          },
          "client_id": {
            "type": "string"
          },
          "user_id": {
            "type": "string"
          },
          "organization_id": {
            "type": "string"
          },
          "scope_names": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "expires_in": {
            "type": "integer"
          },
          "expires_at": {
            "type": "string",
            "format": "date-time"
          },
          "refresh_token_expires_at": {
            "type": "string",
            "format": "date-time"
          },
          "revoked": {
            "type": "boolean"
          },
          "revoked_at": {
            "type": "string",
            "format": "date-time"
          },
          "ip_address": {
            "type": "string"
          },
          "user_agent": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "token_type",
          "client_id",
          "user_id",
          "expires_in",
          "expires_at",
          "revoked"
        ]
      },
      "User_OrganizationsList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "domain": {
            "type": "string"
          },
          "logo_url": {
            "type": "string"
          },
          "plan": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "trial_ends_at": {
            "type": "string",
            "format": "date-time"
          },
          "trial_used": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "name",
          "slug",
          "plan",
          "active",
          "trial_used"
        ]
      },
      "User_PasskeysList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "user_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "credential_id": {
            "type": "string"
          },
          "public_key": {
            "type": "string",
            "format": "byte"
          },
          "sign_count": {
            "type": "integer"
          },
          "active": {
            "type": "boolean"
          },
          "device_type": {
            "type": "string"
          },
          "aaguid": {
            "type": "string"
          },
          "last_used": {
            "type": "string",
            "format": "date-time"
          },
          "transports": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "attestation": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "user_id",
          "name",
          "credential_id",
          "public_key",
          "sign_count",
          "active"
        ]
      },
      "User_RolesList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "organization_id": {
            "type": "string"
          },
          "system": {
            "type": "boolean"
          },
          "is_default": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "name",
          "system",
          "is_default"
        ]
      },
      "User_SessionsList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "user_id": {
            "type": "string"
          },
          "ip_address": {
            "type": "string"
          },
          "user_agent": {
            "type": "string"
          },
          "device_id": {
            "type": "string"
          },
          "location": {
            "type": "string"
          },
          "organization_id": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "expires_at": {
            "type": "string",
            "format": "date-time"
          },
          "last_active_at": {
            "type": "string",
            "format": "date-time"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "user_id",
          "active",
          "expires_at",
          "last_active_at"
        ]
      },
      "User_VerificationsList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "user_id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "phone_number": {
            "type": "string"
          },
          "redirect_url": {
            "type": "string"
          },
          "used": {
            "type": "boolean"
          },
          "used_at": {
            "type": "string",
            "format": "date-time"
          },
          "attempts": {
            "type": "integer"
          },
          "expires_at": {
            "type": "string",
            "format": "date-time"
          },
          "ip_address": {
            "type": "string"
          },
          "user_agent": {
            "type": "string"
          },
          "attestation": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "user_id",
          "type",
          "used",
          "attempts",
          "expires_at"
        ]
      },
      "Verification": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "user_id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "token": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "phone_number": {
            "type": "string"
          },
          "redirect_url": {
            "type": "string"
          },
          "used": {
            "type": "boolean"
          },
          "used_at": {
            "type": "string",
            "format": "date-time"
          },
          "attempts": {
            "type": "integer"
          },
          "expires_at": {
            "type": "string",
            "format": "date-time"
          },
          "ip_address": {
            "type": "string"
          },
          "user_agent": {
            "type": "string"
          },
          "attestation": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "user": {
            "$ref": "#/components/schemas/User"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "user_id",
          "type",
          "token",
          "used",
          "attempts",
          "expires_at",
          "user"
        ]
      },
      "VerificationCreate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "user_id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "phone_number": {
            "type": "string"
          },
          "redirect_url": {
            "type": "string"
          },
          "used": {
            "type": "boolean"
          },
          "used_at": {
            "type": "string",
            "format": "date-time"
          },
          "attempts": {
            "type": "integer"
          },
          "expires_at": {
            "type": "string",
            "format": "date-time"
          },
          "ip_address": {
            "type": "string"
          },
          "user_agent": {
            "type": "string"
          },
          "attestation": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "user_id",
          "type",
          "used",
          "attempts",
          "expires_at"
        ]
      },
      "VerificationList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "user_id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "phone_number": {
            "type": "string"
          },
          "redirect_url": {
            "type": "string"
          },
          "used": {
            "type": "boolean"
          },
          "used_at": {
            "type": "string",
            "format": "date-time"
          },
          "attempts": {
            "type": "integer"
          },
          "expires_at": {
            "type": "string",
            "format": "date-time"
          },
          "ip_address": {
            "type": "string"
          },
          "user_agent": {
            "type": "string"
          },
          "attestation": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "user_id",
          "type",
          "used",
          "attempts",
          "expires_at"
        ]
      },
      "VerificationRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "user_id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "phone_number": {
            "type": "string"
          },
          "redirect_url": {
            "type": "string"
          },
          "used": {
            "type": "boolean"
          },
          "used_at": {
            "type": "string",
            "format": "date-time"
          },
          "attempts": {
            "type": "integer"
          },
          "expires_at": {
            "type": "string",
            "format": "date-time"
          },
          "ip_address": {
            "type": "string"
          },
          "user_agent": {
            "type": "string"
          },
          "attestation": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "user_id",
          "type",
          "used",
          "attempts",
          "expires_at"
        ]
      },
      "VerificationUpdate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "user_id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "phone_number": {
            "type": "string"
          },
          "redirect_url": {
            "type": "string"
          },
          "used": {
            "type": "boolean"
          },
          "used_at": {
            "type": "string",
            "format": "date-time"
          },
          "attempts": {
            "type": "integer"
          },
          "expires_at": {
            "type": "string",
            "format": "date-time"
          },
          "ip_address": {
            "type": "string"
          },
          "user_agent": {
            "type": "string"
          },
          "attestation": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "user_id",
          "type",
          "used",
          "attempts",
          "expires_at"
        ]
      },
      "Verification_UserRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "email": {
            "type": "string"
          },
          "phone_number": {
            "type": "string"
          },
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "email_verified": {
            "type": "boolean"
          },
          "phone_verified": {
            "type": "boolean"
          },
          "active": {
            "type": "boolean"
          },
          "last_login": {
            "type": "string",
            "format": "date-time"
          },
          "last_password_change": {
            "type": "string",
            "format": "date-time"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "profile_image_url": {
            "type": "string"
          },
          "primary_organization_id": {
            "type": "string"
          },
          "locale": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "email",
          "email_verified",
          "phone_verified",
          "active",
          "locale"
        ]
      },
      "Webhook": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "organization_id": {
            "type": "string"
          },
          "secret": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "event_types": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "version": {
            "type": "string"
          },
          "retry_count": {
            "type": "integer"
          },
          "timeout_ms": {
            "type": "integer"
          },
          "format": {
            "type": "string",
            "enum": [
              "json",
              "form"
            ],
            "default": "json"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "organization": {
            "$ref": "#/components/schemas/Organization"
          },
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WebhookEvent"
            }
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "name",
          "url",
          "organization_id",
          "secret",
          "active",
          "event_types",
          "version",
          "retry_count",
          "timeout_ms",
          "format",
          "organization"
        ]
      },
      "WebhookCreate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "organization_id": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "event_types": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "version": {
            "type": "string"
          },
          "retry_count": {
            "type": "integer"
          },
          "timeout_ms": {
            "type": "integer"
          },
          "format": {
            "type": "string",
            "enum": [
              "json",
              "form"
            ],
            "default": "json"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "name",
          "url",
          "organization_id",
          "active",
          "event_types",
          "version",
          "retry_count",
          "timeout_ms",
          "format"
        ]
      },
      "WebhookEvent": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "webhook_id": {
            "type": "string"
          },
          "event_type": {
            "type": "string"
          },
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "payload": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "delivered": {
            "type": "boolean"
          },
          "delivered_at": {
            "type": "string",
            "format": "date-time"
          },
          "attempts": {
            "type": "integer"
          },
          "next_retry": {
            "type": "string",
            "format": "date-time"
          },
          "status_code": {
            "type": "integer"
          },
          "response_body": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "webhook": {
            "$ref": "#/components/schemas/Webhook"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "webhook_id",
          "event_type",
          "delivered",
          "attempts",
          "webhook"
        ]
      },
      "WebhookEventCreate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "webhook_id": {
            "type": "string"
          },
          "event_type": {
            "type": "string"
          },
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "payload": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "delivered": {
            "type": "boolean"
          },
          "delivered_at": {
            "type": "string",
            "format": "date-time"
          },
          "attempts": {
            "type": "integer"
          },
          "next_retry": {
            "type": "string",
            "format": "date-time"
          },
          "status_code": {
            "type": "integer"
          },
          "response_body": {
            "type": "string"
          },
          "error": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "webhook_id",
          "event_type",
          "delivered",
          "attempts"
        ]
      },
      "WebhookEventList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "webhook_id": {
            "type": "string"
          },
          "event_type": {
            "type": "string"
          },
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "payload": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "delivered": {
            "type": "boolean"
          },
          "delivered_at": {
            "type": "string",
            "format": "date-time"
          },
          "attempts": {
            "type": "integer"
          },
          "next_retry": {
            "type": "string",
            "format": "date-time"
          },
          "status_code": {
            "type": "integer"
          },
          "response_body": {
            "type": "string"
          },
          "error": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "webhook_id",
          "event_type",
          "delivered",
          "attempts"
        ]
      },
      "WebhookEventRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "webhook_id": {
            "type": "string"
          },
          "event_type": {
            "type": "string"
          },
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "payload": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "delivered": {
            "type": "boolean"
          },
          "delivered_at": {
            "type": "string",
            "format": "date-time"
          },
          "attempts": {
            "type": "integer"
          },
          "next_retry": {
            "type": "string",
            "format": "date-time"
          },
          "status_code": {
            "type": "integer"
          },
          "response_body": {
            "type": "string"
          },
          "error": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "webhook_id",
          "event_type",
          "delivered",
          "attempts"
        ]
      },
      "WebhookEventUpdate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "webhook_id": {
            "type": "string"
          },
          "event_type": {
            "type": "string"
          },
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "payload": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "delivered": {
            "type": "boolean"
          },
          "delivered_at": {
            "type": "string",
            "format": "date-time"
          },
          "attempts": {
            "type": "integer"
          },
          "next_retry": {
            "type": "string",
            "format": "date-time"
          },
          "status_code": {
            "type": "integer"
          },
          "response_body": {
            "type": "string"
          },
          "error": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "webhook_id",
          "event_type",
          "delivered",
          "attempts"
        ]
      },
      "WebhookEvent_WebhookRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "organization_id": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "event_types": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "version": {
            "type": "string"
          },
          "retry_count": {
            "type": "integer"
          },
          "timeout_ms": {
            "type": "integer"
          },
          "format": {
            "type": "string",
            "enum": [
              "json",
              "form"
            ],
            "default": "json"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "name",
          "url",
          "organization_id",
          "active",
          "event_types",
          "version",
          "retry_count",
          "timeout_ms",
          "format"
        ]
      },
      "WebhookList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "organization_id": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "event_types": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "version": {
            "type": "string"
          },
          "retry_count": {
            "type": "integer"
          },
          "timeout_ms": {
            "type": "integer"
          },
          "format": {
            "type": "string",
            "enum": [
              "json",
              "form"
            ],
            "default": "json"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "name",
          "url",
          "organization_id",
          "active",
          "event_types",
          "version",
          "retry_count",
          "timeout_ms",
          "format"
        ]
      },
      "WebhookRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "organization_id": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "event_types": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "version": {
            "type": "string"
          },
          "retry_count": {
            "type": "integer"
          },
          "timeout_ms": {
            "type": "integer"
          },
          "format": {
            "type": "string",
            "enum": [
              "json",
              "form"
            ],
            "default": "json"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "name",
          "url",
          "organization_id",
          "active",
          "event_types",
          "version",
          "retry_count",
          "timeout_ms",
          "format"
        ]
      },
      "WebhookUpdate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "organization_id": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "event_types": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "version": {
            "type": "string"
          },
          "retry_count": {
            "type": "integer"
          },
          "timeout_ms": {
            "type": "integer"
          },
          "format": {
            "type": "string",
            "enum": [
              "json",
              "form"
            ],
            "default": "json"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "name",
          "url",
          "organization_id",
          "active",
          "event_types",
          "version",
          "retry_count",
          "timeout_ms",
          "format"
        ]
      },
      "Webhook_EventsList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "webhook_id": {
            "type": "string"
          },
          "event_type": {
            "type": "string"
          },
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "payload": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "delivered": {
            "type": "boolean"
          },
          "delivered_at": {
            "type": "string",
            "format": "date-time"
          },
          "attempts": {
            "type": "integer"
          },
          "next_retry": {
            "type": "string",
            "format": "date-time"
          },
          "status_code": {
            "type": "integer"
          },
          "response_body": {
            "type": "string"
          },
          "error": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "webhook_id",
          "event_type",
          "delivered",
          "attempts"
        ]
      },
      "Webhook_OrganizationRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "domain": {
            "type": "string"
          },
          "logo_url": {
            "type": "string"
          },
          "plan": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "trial_ends_at": {
            "type": "string",
            "format": "date-time"
          },
          "trial_used": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "name",
          "slug",
          "plan",
          "active",
          "trial_used"
        ]
      }
    },
    "responses": {
      "400": {
        "description": "invalid input, data invalid",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer"
                },
                "status": {
                  "type": "string"
                },
                "errors": {}
              },
              "required": [
                "code",
                "status"
              ]
            }
          }
        }
      },
      "403": {
        "description": "insufficient permissions",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer"
                },
                "status": {
                  "type": "string"
                },
                "errors": {}
              },
              "required": [
                "code",
                "status"
              ]
            }
          }
        }
      },
      "404": {
        "description": "resource not found",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer"
                },
                "status": {
                  "type": "string"
                },
                "errors": {}
              },
              "required": [
                "code",
                "status"
              ]
            }
          }
        }
      },
      "409": {
        "description": "conflicting resources",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer"
                },
                "status": {
                  "type": "string"
                },
                "errors": {}
              },
              "required": [
                "code",
                "status"
              ]
            }
          }
        }
      },
      "500": {
        "description": "unexpected error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer"
                },
                "status": {
                  "type": "string"
                },
                "errors": {}
              },
              "required": [
                "code",
                "status"
              ]
            }
          }
        }
      }
    }
  }
}