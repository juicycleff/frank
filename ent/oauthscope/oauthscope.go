// Copyright 2023-present XRaph LLC. All rights reserved.
// This source code is licensed under the XRaph LLC license found
// in the LICENSE file in the root directory of this source tree.
// Code generated by ent, DO NOT EDIT.

package oauthscope

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/rs/xid"
)

const (
	// Label holds the string label denoting the oauthscope type in the database.
	Label = "oauth_scope"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldDefaultScope holds the string denoting the default_scope field in the database.
	FieldDefaultScope = "default_scope"
	// FieldPublic holds the string denoting the public field in the database.
	FieldPublic = "public"
	// EdgeClients holds the string denoting the clients edge name in mutations.
	EdgeClients = "clients"
	// EdgeTokens holds the string denoting the tokens edge name in mutations.
	EdgeTokens = "tokens"
	// EdgeAuthorizations holds the string denoting the authorizations edge name in mutations.
	EdgeAuthorizations = "authorizations"
	// Table holds the table name of the oauthscope in the database.
	Table = "oauth_scopes"
	// ClientsTable is the table that holds the clients relation/edge. The primary key declared below.
	ClientsTable = "oauth_client_scopes"
	// ClientsInverseTable is the table name for the OAuthClient entity.
	// It exists in this package in order to avoid circular dependency with the "oauthclient" package.
	ClientsInverseTable = "oauth_clients"
	// TokensTable is the table that holds the tokens relation/edge. The primary key declared below.
	TokensTable = "oauth_token_scopes"
	// TokensInverseTable is the table name for the OAuthToken entity.
	// It exists in this package in order to avoid circular dependency with the "oauthtoken" package.
	TokensInverseTable = "oauth_tokens"
	// AuthorizationsTable is the table that holds the authorizations relation/edge. The primary key declared below.
	AuthorizationsTable = "oauth_authorization_scopes"
	// AuthorizationsInverseTable is the table name for the OAuthAuthorization entity.
	// It exists in this package in order to avoid circular dependency with the "oauthauthorization" package.
	AuthorizationsInverseTable = "oauth_authorizations"
)

// Columns holds all SQL columns for oauthscope fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldName,
	FieldDescription,
	FieldDefaultScope,
	FieldPublic,
}

var (
	// ClientsPrimaryKey and ClientsColumn2 are the table columns denoting the
	// primary key for the clients relation (M2M).
	ClientsPrimaryKey = []string{"oauth_client_id", "oauth_scope_id"}
	// TokensPrimaryKey and TokensColumn2 are the table columns denoting the
	// primary key for the tokens relation (M2M).
	TokensPrimaryKey = []string{"oauth_token_id", "oauth_scope_id"}
	// AuthorizationsPrimaryKey and AuthorizationsColumn2 are the table columns denoting the
	// primary key for the authorizations relation (M2M).
	AuthorizationsPrimaryKey = []string{"oauth_authorization_id", "oauth_scope_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	DescriptionValidator func(string) error
	// DefaultDefaultScope holds the default value on creation for the "default_scope" field.
	DefaultDefaultScope bool
	// DefaultPublic holds the default value on creation for the "public" field.
	DefaultPublic bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() xid.ID
)

// OrderOption defines the ordering options for the OAuthScope queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByDefaultScope orders the results by the default_scope field.
func ByDefaultScope(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDefaultScope, opts...).ToFunc()
}

// ByPublic orders the results by the public field.
func ByPublic(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPublic, opts...).ToFunc()
}

// ByClientsCount orders the results by clients count.
func ByClientsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newClientsStep(), opts...)
	}
}

// ByClients orders the results by clients terms.
func ByClients(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newClientsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByTokensCount orders the results by tokens count.
func ByTokensCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTokensStep(), opts...)
	}
}

// ByTokens orders the results by tokens terms.
func ByTokens(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTokensStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAuthorizationsCount orders the results by authorizations count.
func ByAuthorizationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAuthorizationsStep(), opts...)
	}
}

// ByAuthorizations orders the results by authorizations terms.
func ByAuthorizations(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAuthorizationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newClientsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ClientsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, ClientsTable, ClientsPrimaryKey...),
	)
}
func newTokensStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TokensInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, TokensTable, TokensPrimaryKey...),
	)
}
func newAuthorizationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AuthorizationsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, AuthorizationsTable, AuthorizationsPrimaryKey...),
	)
}
