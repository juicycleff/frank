// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/juicycleff/frank/ent/identityprovider"
	"github.com/juicycleff/frank/ent/organization"
)

// IdentityProviderCreate is the builder for creating a IdentityProvider entity.
type IdentityProviderCreate struct {
	config
	mutation *IdentityProviderMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (ipc *IdentityProviderCreate) SetCreatedAt(t time.Time) *IdentityProviderCreate {
	ipc.mutation.SetCreatedAt(t)
	return ipc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ipc *IdentityProviderCreate) SetNillableCreatedAt(t *time.Time) *IdentityProviderCreate {
	if t != nil {
		ipc.SetCreatedAt(*t)
	}
	return ipc
}

// SetUpdatedAt sets the "updated_at" field.
func (ipc *IdentityProviderCreate) SetUpdatedAt(t time.Time) *IdentityProviderCreate {
	ipc.mutation.SetUpdatedAt(t)
	return ipc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ipc *IdentityProviderCreate) SetNillableUpdatedAt(t *time.Time) *IdentityProviderCreate {
	if t != nil {
		ipc.SetUpdatedAt(*t)
	}
	return ipc
}

// SetName sets the "name" field.
func (ipc *IdentityProviderCreate) SetName(s string) *IdentityProviderCreate {
	ipc.mutation.SetName(s)
	return ipc
}

// SetOrganizationID sets the "organization_id" field.
func (ipc *IdentityProviderCreate) SetOrganizationID(s string) *IdentityProviderCreate {
	ipc.mutation.SetOrganizationID(s)
	return ipc
}

// SetProviderType sets the "provider_type" field.
func (ipc *IdentityProviderCreate) SetProviderType(s string) *IdentityProviderCreate {
	ipc.mutation.SetProviderType(s)
	return ipc
}

// SetClientID sets the "client_id" field.
func (ipc *IdentityProviderCreate) SetClientID(s string) *IdentityProviderCreate {
	ipc.mutation.SetClientID(s)
	return ipc
}

// SetNillableClientID sets the "client_id" field if the given value is not nil.
func (ipc *IdentityProviderCreate) SetNillableClientID(s *string) *IdentityProviderCreate {
	if s != nil {
		ipc.SetClientID(*s)
	}
	return ipc
}

// SetClientSecret sets the "client_secret" field.
func (ipc *IdentityProviderCreate) SetClientSecret(s string) *IdentityProviderCreate {
	ipc.mutation.SetClientSecret(s)
	return ipc
}

// SetNillableClientSecret sets the "client_secret" field if the given value is not nil.
func (ipc *IdentityProviderCreate) SetNillableClientSecret(s *string) *IdentityProviderCreate {
	if s != nil {
		ipc.SetClientSecret(*s)
	}
	return ipc
}

// SetIssuer sets the "issuer" field.
func (ipc *IdentityProviderCreate) SetIssuer(s string) *IdentityProviderCreate {
	ipc.mutation.SetIssuer(s)
	return ipc
}

// SetNillableIssuer sets the "issuer" field if the given value is not nil.
func (ipc *IdentityProviderCreate) SetNillableIssuer(s *string) *IdentityProviderCreate {
	if s != nil {
		ipc.SetIssuer(*s)
	}
	return ipc
}

// SetAuthorizationEndpoint sets the "authorization_endpoint" field.
func (ipc *IdentityProviderCreate) SetAuthorizationEndpoint(s string) *IdentityProviderCreate {
	ipc.mutation.SetAuthorizationEndpoint(s)
	return ipc
}

// SetNillableAuthorizationEndpoint sets the "authorization_endpoint" field if the given value is not nil.
func (ipc *IdentityProviderCreate) SetNillableAuthorizationEndpoint(s *string) *IdentityProviderCreate {
	if s != nil {
		ipc.SetAuthorizationEndpoint(*s)
	}
	return ipc
}

// SetTokenEndpoint sets the "token_endpoint" field.
func (ipc *IdentityProviderCreate) SetTokenEndpoint(s string) *IdentityProviderCreate {
	ipc.mutation.SetTokenEndpoint(s)
	return ipc
}

// SetNillableTokenEndpoint sets the "token_endpoint" field if the given value is not nil.
func (ipc *IdentityProviderCreate) SetNillableTokenEndpoint(s *string) *IdentityProviderCreate {
	if s != nil {
		ipc.SetTokenEndpoint(*s)
	}
	return ipc
}

// SetUserinfoEndpoint sets the "userinfo_endpoint" field.
func (ipc *IdentityProviderCreate) SetUserinfoEndpoint(s string) *IdentityProviderCreate {
	ipc.mutation.SetUserinfoEndpoint(s)
	return ipc
}

// SetNillableUserinfoEndpoint sets the "userinfo_endpoint" field if the given value is not nil.
func (ipc *IdentityProviderCreate) SetNillableUserinfoEndpoint(s *string) *IdentityProviderCreate {
	if s != nil {
		ipc.SetUserinfoEndpoint(*s)
	}
	return ipc
}

// SetJwksURI sets the "jwks_uri" field.
func (ipc *IdentityProviderCreate) SetJwksURI(s string) *IdentityProviderCreate {
	ipc.mutation.SetJwksURI(s)
	return ipc
}

// SetNillableJwksURI sets the "jwks_uri" field if the given value is not nil.
func (ipc *IdentityProviderCreate) SetNillableJwksURI(s *string) *IdentityProviderCreate {
	if s != nil {
		ipc.SetJwksURI(*s)
	}
	return ipc
}

// SetMetadataURL sets the "metadata_url" field.
func (ipc *IdentityProviderCreate) SetMetadataURL(s string) *IdentityProviderCreate {
	ipc.mutation.SetMetadataURL(s)
	return ipc
}

// SetNillableMetadataURL sets the "metadata_url" field if the given value is not nil.
func (ipc *IdentityProviderCreate) SetNillableMetadataURL(s *string) *IdentityProviderCreate {
	if s != nil {
		ipc.SetMetadataURL(*s)
	}
	return ipc
}

// SetRedirectURI sets the "redirect_uri" field.
func (ipc *IdentityProviderCreate) SetRedirectURI(s string) *IdentityProviderCreate {
	ipc.mutation.SetRedirectURI(s)
	return ipc
}

// SetNillableRedirectURI sets the "redirect_uri" field if the given value is not nil.
func (ipc *IdentityProviderCreate) SetNillableRedirectURI(s *string) *IdentityProviderCreate {
	if s != nil {
		ipc.SetRedirectURI(*s)
	}
	return ipc
}

// SetCertificate sets the "certificate" field.
func (ipc *IdentityProviderCreate) SetCertificate(s string) *IdentityProviderCreate {
	ipc.mutation.SetCertificate(s)
	return ipc
}

// SetNillableCertificate sets the "certificate" field if the given value is not nil.
func (ipc *IdentityProviderCreate) SetNillableCertificate(s *string) *IdentityProviderCreate {
	if s != nil {
		ipc.SetCertificate(*s)
	}
	return ipc
}

// SetPrivateKey sets the "private_key" field.
func (ipc *IdentityProviderCreate) SetPrivateKey(s string) *IdentityProviderCreate {
	ipc.mutation.SetPrivateKey(s)
	return ipc
}

// SetNillablePrivateKey sets the "private_key" field if the given value is not nil.
func (ipc *IdentityProviderCreate) SetNillablePrivateKey(s *string) *IdentityProviderCreate {
	if s != nil {
		ipc.SetPrivateKey(*s)
	}
	return ipc
}

// SetActive sets the "active" field.
func (ipc *IdentityProviderCreate) SetActive(b bool) *IdentityProviderCreate {
	ipc.mutation.SetActive(b)
	return ipc
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (ipc *IdentityProviderCreate) SetNillableActive(b *bool) *IdentityProviderCreate {
	if b != nil {
		ipc.SetActive(*b)
	}
	return ipc
}

// SetPrimary sets the "primary" field.
func (ipc *IdentityProviderCreate) SetPrimary(b bool) *IdentityProviderCreate {
	ipc.mutation.SetPrimary(b)
	return ipc
}

// SetNillablePrimary sets the "primary" field if the given value is not nil.
func (ipc *IdentityProviderCreate) SetNillablePrimary(b *bool) *IdentityProviderCreate {
	if b != nil {
		ipc.SetPrimary(*b)
	}
	return ipc
}

// SetDomains sets the "domains" field.
func (ipc *IdentityProviderCreate) SetDomains(s []string) *IdentityProviderCreate {
	ipc.mutation.SetDomains(s)
	return ipc
}

// SetAttributesMapping sets the "attributes_mapping" field.
func (ipc *IdentityProviderCreate) SetAttributesMapping(m map[string]string) *IdentityProviderCreate {
	ipc.mutation.SetAttributesMapping(m)
	return ipc
}

// SetMetadata sets the "metadata" field.
func (ipc *IdentityProviderCreate) SetMetadata(m map[string]interface{}) *IdentityProviderCreate {
	ipc.mutation.SetMetadata(m)
	return ipc
}

// SetID sets the "id" field.
func (ipc *IdentityProviderCreate) SetID(s string) *IdentityProviderCreate {
	ipc.mutation.SetID(s)
	return ipc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ipc *IdentityProviderCreate) SetNillableID(s *string) *IdentityProviderCreate {
	if s != nil {
		ipc.SetID(*s)
	}
	return ipc
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (ipc *IdentityProviderCreate) SetOrganization(o *Organization) *IdentityProviderCreate {
	return ipc.SetOrganizationID(o.ID)
}

// Mutation returns the IdentityProviderMutation object of the builder.
func (ipc *IdentityProviderCreate) Mutation() *IdentityProviderMutation {
	return ipc.mutation
}

// Save creates the IdentityProvider in the database.
func (ipc *IdentityProviderCreate) Save(ctx context.Context) (*IdentityProvider, error) {
	ipc.defaults()
	return withHooks(ctx, ipc.sqlSave, ipc.mutation, ipc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ipc *IdentityProviderCreate) SaveX(ctx context.Context) *IdentityProvider {
	v, err := ipc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ipc *IdentityProviderCreate) Exec(ctx context.Context) error {
	_, err := ipc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ipc *IdentityProviderCreate) ExecX(ctx context.Context) {
	if err := ipc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ipc *IdentityProviderCreate) defaults() {
	if _, ok := ipc.mutation.CreatedAt(); !ok {
		v := identityprovider.DefaultCreatedAt()
		ipc.mutation.SetCreatedAt(v)
	}
	if _, ok := ipc.mutation.UpdatedAt(); !ok {
		v := identityprovider.DefaultUpdatedAt()
		ipc.mutation.SetUpdatedAt(v)
	}
	if _, ok := ipc.mutation.Active(); !ok {
		v := identityprovider.DefaultActive
		ipc.mutation.SetActive(v)
	}
	if _, ok := ipc.mutation.Primary(); !ok {
		v := identityprovider.DefaultPrimary
		ipc.mutation.SetPrimary(v)
	}
	if _, ok := ipc.mutation.ID(); !ok {
		v := identityprovider.DefaultID()
		ipc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ipc *IdentityProviderCreate) check() error {
	if _, ok := ipc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "IdentityProvider.created_at"`)}
	}
	if _, ok := ipc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "IdentityProvider.updated_at"`)}
	}
	if _, ok := ipc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "IdentityProvider.name"`)}
	}
	if v, ok := ipc.mutation.Name(); ok {
		if err := identityprovider.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "IdentityProvider.name": %w`, err)}
		}
	}
	if _, ok := ipc.mutation.OrganizationID(); !ok {
		return &ValidationError{Name: "organization_id", err: errors.New(`ent: missing required field "IdentityProvider.organization_id"`)}
	}
	if v, ok := ipc.mutation.OrganizationID(); ok {
		if err := identityprovider.OrganizationIDValidator(v); err != nil {
			return &ValidationError{Name: "organization_id", err: fmt.Errorf(`ent: validator failed for field "IdentityProvider.organization_id": %w`, err)}
		}
	}
	if _, ok := ipc.mutation.ProviderType(); !ok {
		return &ValidationError{Name: "provider_type", err: errors.New(`ent: missing required field "IdentityProvider.provider_type"`)}
	}
	if v, ok := ipc.mutation.ProviderType(); ok {
		if err := identityprovider.ProviderTypeValidator(v); err != nil {
			return &ValidationError{Name: "provider_type", err: fmt.Errorf(`ent: validator failed for field "IdentityProvider.provider_type": %w`, err)}
		}
	}
	if _, ok := ipc.mutation.Active(); !ok {
		return &ValidationError{Name: "active", err: errors.New(`ent: missing required field "IdentityProvider.active"`)}
	}
	if _, ok := ipc.mutation.Primary(); !ok {
		return &ValidationError{Name: "primary", err: errors.New(`ent: missing required field "IdentityProvider.primary"`)}
	}
	if len(ipc.mutation.OrganizationIDs()) == 0 {
		return &ValidationError{Name: "organization", err: errors.New(`ent: missing required edge "IdentityProvider.organization"`)}
	}
	return nil
}

func (ipc *IdentityProviderCreate) sqlSave(ctx context.Context) (*IdentityProvider, error) {
	if err := ipc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ipc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ipc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected IdentityProvider.ID type: %T", _spec.ID.Value)
		}
	}
	ipc.mutation.id = &_node.ID
	ipc.mutation.done = true
	return _node, nil
}

func (ipc *IdentityProviderCreate) createSpec() (*IdentityProvider, *sqlgraph.CreateSpec) {
	var (
		_node = &IdentityProvider{config: ipc.config}
		_spec = sqlgraph.NewCreateSpec(identityprovider.Table, sqlgraph.NewFieldSpec(identityprovider.FieldID, field.TypeString))
	)
	if id, ok := ipc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ipc.mutation.CreatedAt(); ok {
		_spec.SetField(identityprovider.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ipc.mutation.UpdatedAt(); ok {
		_spec.SetField(identityprovider.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ipc.mutation.Name(); ok {
		_spec.SetField(identityprovider.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ipc.mutation.ProviderType(); ok {
		_spec.SetField(identityprovider.FieldProviderType, field.TypeString, value)
		_node.ProviderType = value
	}
	if value, ok := ipc.mutation.ClientID(); ok {
		_spec.SetField(identityprovider.FieldClientID, field.TypeString, value)
		_node.ClientID = value
	}
	if value, ok := ipc.mutation.ClientSecret(); ok {
		_spec.SetField(identityprovider.FieldClientSecret, field.TypeString, value)
		_node.ClientSecret = value
	}
	if value, ok := ipc.mutation.Issuer(); ok {
		_spec.SetField(identityprovider.FieldIssuer, field.TypeString, value)
		_node.Issuer = value
	}
	if value, ok := ipc.mutation.AuthorizationEndpoint(); ok {
		_spec.SetField(identityprovider.FieldAuthorizationEndpoint, field.TypeString, value)
		_node.AuthorizationEndpoint = value
	}
	if value, ok := ipc.mutation.TokenEndpoint(); ok {
		_spec.SetField(identityprovider.FieldTokenEndpoint, field.TypeString, value)
		_node.TokenEndpoint = value
	}
	if value, ok := ipc.mutation.UserinfoEndpoint(); ok {
		_spec.SetField(identityprovider.FieldUserinfoEndpoint, field.TypeString, value)
		_node.UserinfoEndpoint = value
	}
	if value, ok := ipc.mutation.JwksURI(); ok {
		_spec.SetField(identityprovider.FieldJwksURI, field.TypeString, value)
		_node.JwksURI = value
	}
	if value, ok := ipc.mutation.MetadataURL(); ok {
		_spec.SetField(identityprovider.FieldMetadataURL, field.TypeString, value)
		_node.MetadataURL = value
	}
	if value, ok := ipc.mutation.RedirectURI(); ok {
		_spec.SetField(identityprovider.FieldRedirectURI, field.TypeString, value)
		_node.RedirectURI = value
	}
	if value, ok := ipc.mutation.Certificate(); ok {
		_spec.SetField(identityprovider.FieldCertificate, field.TypeString, value)
		_node.Certificate = value
	}
	if value, ok := ipc.mutation.PrivateKey(); ok {
		_spec.SetField(identityprovider.FieldPrivateKey, field.TypeString, value)
		_node.PrivateKey = value
	}
	if value, ok := ipc.mutation.Active(); ok {
		_spec.SetField(identityprovider.FieldActive, field.TypeBool, value)
		_node.Active = value
	}
	if value, ok := ipc.mutation.Primary(); ok {
		_spec.SetField(identityprovider.FieldPrimary, field.TypeBool, value)
		_node.Primary = value
	}
	if value, ok := ipc.mutation.Domains(); ok {
		_spec.SetField(identityprovider.FieldDomains, field.TypeJSON, value)
		_node.Domains = value
	}
	if value, ok := ipc.mutation.AttributesMapping(); ok {
		_spec.SetField(identityprovider.FieldAttributesMapping, field.TypeJSON, value)
		_node.AttributesMapping = value
	}
	if value, ok := ipc.mutation.Metadata(); ok {
		_spec.SetField(identityprovider.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if nodes := ipc.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   identityprovider.OrganizationTable,
			Columns: []string{identityprovider.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OrganizationID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// IdentityProviderCreateBulk is the builder for creating many IdentityProvider entities in bulk.
type IdentityProviderCreateBulk struct {
	config
	err      error
	builders []*IdentityProviderCreate
}

// Save creates the IdentityProvider entities in the database.
func (ipcb *IdentityProviderCreateBulk) Save(ctx context.Context) ([]*IdentityProvider, error) {
	if ipcb.err != nil {
		return nil, ipcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ipcb.builders))
	nodes := make([]*IdentityProvider, len(ipcb.builders))
	mutators := make([]Mutator, len(ipcb.builders))
	for i := range ipcb.builders {
		func(i int, root context.Context) {
			builder := ipcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*IdentityProviderMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ipcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ipcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ipcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ipcb *IdentityProviderCreateBulk) SaveX(ctx context.Context) []*IdentityProvider {
	v, err := ipcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ipcb *IdentityProviderCreateBulk) Exec(ctx context.Context) error {
	_, err := ipcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ipcb *IdentityProviderCreateBulk) ExecX(ctx context.Context) {
	if err := ipcb.Exec(ctx); err != nil {
		panic(err)
	}
}
