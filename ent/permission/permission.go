// Copyright 2023-present XRaph LLC. All rights reserved.
// This source code is licensed under the XRaph LLC license found
// in the LICENSE file in the root directory of this source tree.
// Code generated by ent, DO NOT EDIT.

package permission

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/rs/xid"
)

const (
	// Label holds the string label denoting the permission type in the database.
	Label = "permission"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDisplayName holds the string denoting the display_name field in the database.
	FieldDisplayName = "display_name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldResource holds the string denoting the resource field in the database.
	FieldResource = "resource"
	// FieldAction holds the string denoting the action field in the database.
	FieldAction = "action"
	// FieldCategory holds the string denoting the category field in the database.
	FieldCategory = "category"
	// FieldApplicableUserTypes holds the string denoting the applicable_user_types field in the database.
	FieldApplicableUserTypes = "applicable_user_types"
	// FieldApplicableContexts holds the string denoting the applicable_contexts field in the database.
	FieldApplicableContexts = "applicable_contexts"
	// FieldConditions holds the string denoting the conditions field in the database.
	FieldConditions = "conditions"
	// FieldSystem holds the string denoting the system field in the database.
	FieldSystem = "system"
	// FieldDangerous holds the string denoting the dangerous field in the database.
	FieldDangerous = "dangerous"
	// FieldRiskLevel holds the string denoting the risk_level field in the database.
	FieldRiskLevel = "risk_level"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldActive holds the string denoting the active field in the database.
	FieldActive = "active"
	// FieldPermissionGroup holds the string denoting the permission_group field in the database.
	FieldPermissionGroup = "permission_group"
	// EdgeRoles holds the string denoting the roles edge name in mutations.
	EdgeRoles = "roles"
	// EdgeUserAssignments holds the string denoting the user_assignments edge name in mutations.
	EdgeUserAssignments = "user_assignments"
	// EdgeDependencies holds the string denoting the dependencies edge name in mutations.
	EdgeDependencies = "dependencies"
	// EdgeDependents holds the string denoting the dependents edge name in mutations.
	EdgeDependents = "dependents"
	// EdgeDependentPermissions holds the string denoting the dependent_permissions edge name in mutations.
	EdgeDependentPermissions = "dependent_permissions"
	// EdgeRequiredPermissions holds the string denoting the required_permissions edge name in mutations.
	EdgeRequiredPermissions = "required_permissions"
	// Table holds the table name of the permission in the database.
	Table = "permissions"
	// RolesTable is the table that holds the roles relation/edge. The primary key declared below.
	RolesTable = "role_permissions"
	// RolesInverseTable is the table name for the Role entity.
	// It exists in this package in order to avoid circular dependency with the "role" package.
	RolesInverseTable = "roles"
	// UserAssignmentsTable is the table that holds the user_assignments relation/edge.
	UserAssignmentsTable = "user_permissions"
	// UserAssignmentsInverseTable is the table name for the UserPermission entity.
	// It exists in this package in order to avoid circular dependency with the "userpermission" package.
	UserAssignmentsInverseTable = "user_permissions"
	// UserAssignmentsColumn is the table column denoting the user_assignments relation/edge.
	UserAssignmentsColumn = "permission_id"
	// DependenciesTable is the table that holds the dependencies relation/edge.
	DependenciesTable = "permission_dependencies"
	// DependenciesInverseTable is the table name for the PermissionDependency entity.
	// It exists in this package in order to avoid circular dependency with the "permissiondependency" package.
	DependenciesInverseTable = "permission_dependencies"
	// DependenciesColumn is the table column denoting the dependencies relation/edge.
	DependenciesColumn = "permission_id"
	// DependentsTable is the table that holds the dependents relation/edge.
	DependentsTable = "permission_dependencies"
	// DependentsInverseTable is the table name for the PermissionDependency entity.
	// It exists in this package in order to avoid circular dependency with the "permissiondependency" package.
	DependentsInverseTable = "permission_dependencies"
	// DependentsColumn is the table column denoting the dependents relation/edge.
	DependentsColumn = "required_permission_id"
	// DependentPermissionsTable is the table that holds the dependent_permissions relation/edge. The primary key declared below.
	DependentPermissionsTable = "permission_required_permissions"
	// RequiredPermissionsTable is the table that holds the required_permissions relation/edge. The primary key declared below.
	RequiredPermissionsTable = "permission_required_permissions"
)

// Columns holds all SQL columns for permission fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldName,
	FieldDisplayName,
	FieldDescription,
	FieldResource,
	FieldAction,
	FieldCategory,
	FieldApplicableUserTypes,
	FieldApplicableContexts,
	FieldConditions,
	FieldSystem,
	FieldDangerous,
	FieldRiskLevel,
	FieldCreatedBy,
	FieldActive,
	FieldPermissionGroup,
}

var (
	// RolesPrimaryKey and RolesColumn2 are the table columns denoting the
	// primary key for the roles relation (M2M).
	RolesPrimaryKey = []string{"role_id", "permission_id"}
	// DependentPermissionsPrimaryKey and DependentPermissionsColumn2 are the table columns denoting the
	// primary key for the dependent_permissions relation (M2M).
	DependentPermissionsPrimaryKey = []string{"permission_id", "dependent_permission_id"}
	// RequiredPermissionsPrimaryKey and RequiredPermissionsColumn2 are the table columns denoting the
	// primary key for the required_permissions relation (M2M).
	RequiredPermissionsPrimaryKey = []string{"permission_id", "dependent_permission_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	DescriptionValidator func(string) error
	// ResourceValidator is a validator for the "resource" field. It is called by the builders before save.
	ResourceValidator func(string) error
	// ActionValidator is a validator for the "action" field. It is called by the builders before save.
	ActionValidator func(string) error
	// DefaultSystem holds the default value on creation for the "system" field.
	DefaultSystem bool
	// DefaultDangerous holds the default value on creation for the "dangerous" field.
	DefaultDangerous bool
	// DefaultRiskLevel holds the default value on creation for the "risk_level" field.
	DefaultRiskLevel int
	// DefaultActive holds the default value on creation for the "active" field.
	DefaultActive bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() xid.ID
)

// Category defines the type for the "category" enum field.
type Category string

// Category values.
const (
	CategoryPlatform     Category = "platform"
	CategoryOrganization Category = "organization"
	CategoryApplication  Category = "application"
	CategoryResource     Category = "resource"
)

func (c Category) String() string {
	return string(c)
}

// CategoryValidator is a validator for the "category" field enum values. It is called by the builders before save.
func CategoryValidator(c Category) error {
	switch c {
	case CategoryPlatform, CategoryOrganization, CategoryApplication, CategoryResource:
		return nil
	default:
		return fmt.Errorf("permission: invalid enum value for category field: %q", c)
	}
}

// OrderOption defines the ordering options for the Permission queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDisplayName orders the results by the display_name field.
func ByDisplayName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisplayName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByResource orders the results by the resource field.
func ByResource(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResource, opts...).ToFunc()
}

// ByAction orders the results by the action field.
func ByAction(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAction, opts...).ToFunc()
}

// ByCategory orders the results by the category field.
func ByCategory(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCategory, opts...).ToFunc()
}

// ByConditions orders the results by the conditions field.
func ByConditions(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldConditions, opts...).ToFunc()
}

// BySystem orders the results by the system field.
func BySystem(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSystem, opts...).ToFunc()
}

// ByDangerous orders the results by the dangerous field.
func ByDangerous(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDangerous, opts...).ToFunc()
}

// ByRiskLevel orders the results by the risk_level field.
func ByRiskLevel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRiskLevel, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByActive orders the results by the active field.
func ByActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActive, opts...).ToFunc()
}

// ByPermissionGroup orders the results by the permission_group field.
func ByPermissionGroup(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPermissionGroup, opts...).ToFunc()
}

// ByRolesCount orders the results by roles count.
func ByRolesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRolesStep(), opts...)
	}
}

// ByRoles orders the results by roles terms.
func ByRoles(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRolesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUserAssignmentsCount orders the results by user_assignments count.
func ByUserAssignmentsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUserAssignmentsStep(), opts...)
	}
}

// ByUserAssignments orders the results by user_assignments terms.
func ByUserAssignments(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserAssignmentsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDependenciesCount orders the results by dependencies count.
func ByDependenciesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDependenciesStep(), opts...)
	}
}

// ByDependencies orders the results by dependencies terms.
func ByDependencies(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDependenciesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDependentsCount orders the results by dependents count.
func ByDependentsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDependentsStep(), opts...)
	}
}

// ByDependents orders the results by dependents terms.
func ByDependents(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDependentsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDependentPermissionsCount orders the results by dependent_permissions count.
func ByDependentPermissionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDependentPermissionsStep(), opts...)
	}
}

// ByDependentPermissions orders the results by dependent_permissions terms.
func ByDependentPermissions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDependentPermissionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRequiredPermissionsCount orders the results by required_permissions count.
func ByRequiredPermissionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRequiredPermissionsStep(), opts...)
	}
}

// ByRequiredPermissions orders the results by required_permissions terms.
func ByRequiredPermissions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRequiredPermissionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newRolesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RolesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, RolesTable, RolesPrimaryKey...),
	)
}
func newUserAssignmentsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserAssignmentsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, UserAssignmentsTable, UserAssignmentsColumn),
	)
}
func newDependenciesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DependenciesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, DependenciesTable, DependenciesColumn),
	)
}
func newDependentsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DependentsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, DependentsTable, DependentsColumn),
	)
}
func newDependentPermissionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, DependentPermissionsTable, DependentPermissionsPrimaryKey...),
	)
}
func newRequiredPermissionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, RequiredPermissionsTable, RequiredPermissionsPrimaryKey...),
	)
}
