// Copyright 2023-present XRaph LLC. All rights reserved.
// This source code is licensed under the XRaph LLC license found
// in the LICENSE file in the root directory of this source tree.
// Code generated by ent, DO NOT EDIT.

package permission

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/juicycleff/frank/ent/predicate"
	"github.com/rs/xid"
)

// ID filters vertices based on their ID field.
func ID(id xid.ID) predicate.Permission {
	return predicate.Permission(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id xid.ID) predicate.Permission {
	return predicate.Permission(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id xid.ID) predicate.Permission {
	return predicate.Permission(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...xid.ID) predicate.Permission {
	return predicate.Permission(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...xid.ID) predicate.Permission {
	return predicate.Permission(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id xid.ID) predicate.Permission {
	return predicate.Permission(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id xid.ID) predicate.Permission {
	return predicate.Permission(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id xid.ID) predicate.Permission {
	return predicate.Permission(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id xid.ID) predicate.Permission {
	return predicate.Permission(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Permission {
	return predicate.Permission(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Permission {
	return predicate.Permission(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Permission {
	return predicate.Permission(sql.FieldEQ(FieldDeletedAt, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Permission {
	return predicate.Permission(sql.FieldEQ(FieldName, v))
}

// DisplayName applies equality check predicate on the "display_name" field. It's identical to DisplayNameEQ.
func DisplayName(v string) predicate.Permission {
	return predicate.Permission(sql.FieldEQ(FieldDisplayName, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Permission {
	return predicate.Permission(sql.FieldEQ(FieldDescription, v))
}

// Resource applies equality check predicate on the "resource" field. It's identical to ResourceEQ.
func Resource(v string) predicate.Permission {
	return predicate.Permission(sql.FieldEQ(FieldResource, v))
}

// Action applies equality check predicate on the "action" field. It's identical to ActionEQ.
func Action(v string) predicate.Permission {
	return predicate.Permission(sql.FieldEQ(FieldAction, v))
}

// Conditions applies equality check predicate on the "conditions" field. It's identical to ConditionsEQ.
func Conditions(v string) predicate.Permission {
	return predicate.Permission(sql.FieldEQ(FieldConditions, v))
}

// System applies equality check predicate on the "system" field. It's identical to SystemEQ.
func System(v bool) predicate.Permission {
	return predicate.Permission(sql.FieldEQ(FieldSystem, v))
}

// Dangerous applies equality check predicate on the "dangerous" field. It's identical to DangerousEQ.
func Dangerous(v bool) predicate.Permission {
	return predicate.Permission(sql.FieldEQ(FieldDangerous, v))
}

// RiskLevel applies equality check predicate on the "risk_level" field. It's identical to RiskLevelEQ.
func RiskLevel(v int) predicate.Permission {
	return predicate.Permission(sql.FieldEQ(FieldRiskLevel, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v string) predicate.Permission {
	return predicate.Permission(sql.FieldEQ(FieldCreatedBy, v))
}

// Active applies equality check predicate on the "active" field. It's identical to ActiveEQ.
func Active(v bool) predicate.Permission {
	return predicate.Permission(sql.FieldEQ(FieldActive, v))
}

// PermissionGroup applies equality check predicate on the "permission_group" field. It's identical to PermissionGroupEQ.
func PermissionGroup(v string) predicate.Permission {
	return predicate.Permission(sql.FieldEQ(FieldPermissionGroup, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Permission {
	return predicate.Permission(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Permission {
	return predicate.Permission(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Permission {
	return predicate.Permission(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Permission {
	return predicate.Permission(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Permission {
	return predicate.Permission(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Permission {
	return predicate.Permission(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Permission {
	return predicate.Permission(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Permission {
	return predicate.Permission(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Permission {
	return predicate.Permission(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Permission {
	return predicate.Permission(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Permission {
	return predicate.Permission(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Permission {
	return predicate.Permission(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Permission {
	return predicate.Permission(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Permission {
	return predicate.Permission(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Permission {
	return predicate.Permission(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Permission {
	return predicate.Permission(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Permission {
	return predicate.Permission(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Permission {
	return predicate.Permission(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Permission {
	return predicate.Permission(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Permission {
	return predicate.Permission(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Permission {
	return predicate.Permission(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Permission {
	return predicate.Permission(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Permission {
	return predicate.Permission(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Permission {
	return predicate.Permission(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Permission {
	return predicate.Permission(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Permission {
	return predicate.Permission(sql.FieldNotNull(FieldDeletedAt))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Permission {
	return predicate.Permission(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Permission {
	return predicate.Permission(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Permission {
	return predicate.Permission(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Permission {
	return predicate.Permission(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Permission {
	return predicate.Permission(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Permission {
	return predicate.Permission(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Permission {
	return predicate.Permission(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Permission {
	return predicate.Permission(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Permission {
	return predicate.Permission(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Permission {
	return predicate.Permission(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Permission {
	return predicate.Permission(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Permission {
	return predicate.Permission(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Permission {
	return predicate.Permission(sql.FieldContainsFold(FieldName, v))
}

// DisplayNameEQ applies the EQ predicate on the "display_name" field.
func DisplayNameEQ(v string) predicate.Permission {
	return predicate.Permission(sql.FieldEQ(FieldDisplayName, v))
}

// DisplayNameNEQ applies the NEQ predicate on the "display_name" field.
func DisplayNameNEQ(v string) predicate.Permission {
	return predicate.Permission(sql.FieldNEQ(FieldDisplayName, v))
}

// DisplayNameIn applies the In predicate on the "display_name" field.
func DisplayNameIn(vs ...string) predicate.Permission {
	return predicate.Permission(sql.FieldIn(FieldDisplayName, vs...))
}

// DisplayNameNotIn applies the NotIn predicate on the "display_name" field.
func DisplayNameNotIn(vs ...string) predicate.Permission {
	return predicate.Permission(sql.FieldNotIn(FieldDisplayName, vs...))
}

// DisplayNameGT applies the GT predicate on the "display_name" field.
func DisplayNameGT(v string) predicate.Permission {
	return predicate.Permission(sql.FieldGT(FieldDisplayName, v))
}

// DisplayNameGTE applies the GTE predicate on the "display_name" field.
func DisplayNameGTE(v string) predicate.Permission {
	return predicate.Permission(sql.FieldGTE(FieldDisplayName, v))
}

// DisplayNameLT applies the LT predicate on the "display_name" field.
func DisplayNameLT(v string) predicate.Permission {
	return predicate.Permission(sql.FieldLT(FieldDisplayName, v))
}

// DisplayNameLTE applies the LTE predicate on the "display_name" field.
func DisplayNameLTE(v string) predicate.Permission {
	return predicate.Permission(sql.FieldLTE(FieldDisplayName, v))
}

// DisplayNameContains applies the Contains predicate on the "display_name" field.
func DisplayNameContains(v string) predicate.Permission {
	return predicate.Permission(sql.FieldContains(FieldDisplayName, v))
}

// DisplayNameHasPrefix applies the HasPrefix predicate on the "display_name" field.
func DisplayNameHasPrefix(v string) predicate.Permission {
	return predicate.Permission(sql.FieldHasPrefix(FieldDisplayName, v))
}

// DisplayNameHasSuffix applies the HasSuffix predicate on the "display_name" field.
func DisplayNameHasSuffix(v string) predicate.Permission {
	return predicate.Permission(sql.FieldHasSuffix(FieldDisplayName, v))
}

// DisplayNameIsNil applies the IsNil predicate on the "display_name" field.
func DisplayNameIsNil() predicate.Permission {
	return predicate.Permission(sql.FieldIsNull(FieldDisplayName))
}

// DisplayNameNotNil applies the NotNil predicate on the "display_name" field.
func DisplayNameNotNil() predicate.Permission {
	return predicate.Permission(sql.FieldNotNull(FieldDisplayName))
}

// DisplayNameEqualFold applies the EqualFold predicate on the "display_name" field.
func DisplayNameEqualFold(v string) predicate.Permission {
	return predicate.Permission(sql.FieldEqualFold(FieldDisplayName, v))
}

// DisplayNameContainsFold applies the ContainsFold predicate on the "display_name" field.
func DisplayNameContainsFold(v string) predicate.Permission {
	return predicate.Permission(sql.FieldContainsFold(FieldDisplayName, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Permission {
	return predicate.Permission(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Permission {
	return predicate.Permission(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Permission {
	return predicate.Permission(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Permission {
	return predicate.Permission(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Permission {
	return predicate.Permission(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Permission {
	return predicate.Permission(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Permission {
	return predicate.Permission(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Permission {
	return predicate.Permission(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Permission {
	return predicate.Permission(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Permission {
	return predicate.Permission(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Permission {
	return predicate.Permission(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Permission {
	return predicate.Permission(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Permission {
	return predicate.Permission(sql.FieldContainsFold(FieldDescription, v))
}

// ResourceEQ applies the EQ predicate on the "resource" field.
func ResourceEQ(v string) predicate.Permission {
	return predicate.Permission(sql.FieldEQ(FieldResource, v))
}

// ResourceNEQ applies the NEQ predicate on the "resource" field.
func ResourceNEQ(v string) predicate.Permission {
	return predicate.Permission(sql.FieldNEQ(FieldResource, v))
}

// ResourceIn applies the In predicate on the "resource" field.
func ResourceIn(vs ...string) predicate.Permission {
	return predicate.Permission(sql.FieldIn(FieldResource, vs...))
}

// ResourceNotIn applies the NotIn predicate on the "resource" field.
func ResourceNotIn(vs ...string) predicate.Permission {
	return predicate.Permission(sql.FieldNotIn(FieldResource, vs...))
}

// ResourceGT applies the GT predicate on the "resource" field.
func ResourceGT(v string) predicate.Permission {
	return predicate.Permission(sql.FieldGT(FieldResource, v))
}

// ResourceGTE applies the GTE predicate on the "resource" field.
func ResourceGTE(v string) predicate.Permission {
	return predicate.Permission(sql.FieldGTE(FieldResource, v))
}

// ResourceLT applies the LT predicate on the "resource" field.
func ResourceLT(v string) predicate.Permission {
	return predicate.Permission(sql.FieldLT(FieldResource, v))
}

// ResourceLTE applies the LTE predicate on the "resource" field.
func ResourceLTE(v string) predicate.Permission {
	return predicate.Permission(sql.FieldLTE(FieldResource, v))
}

// ResourceContains applies the Contains predicate on the "resource" field.
func ResourceContains(v string) predicate.Permission {
	return predicate.Permission(sql.FieldContains(FieldResource, v))
}

// ResourceHasPrefix applies the HasPrefix predicate on the "resource" field.
func ResourceHasPrefix(v string) predicate.Permission {
	return predicate.Permission(sql.FieldHasPrefix(FieldResource, v))
}

// ResourceHasSuffix applies the HasSuffix predicate on the "resource" field.
func ResourceHasSuffix(v string) predicate.Permission {
	return predicate.Permission(sql.FieldHasSuffix(FieldResource, v))
}

// ResourceEqualFold applies the EqualFold predicate on the "resource" field.
func ResourceEqualFold(v string) predicate.Permission {
	return predicate.Permission(sql.FieldEqualFold(FieldResource, v))
}

// ResourceContainsFold applies the ContainsFold predicate on the "resource" field.
func ResourceContainsFold(v string) predicate.Permission {
	return predicate.Permission(sql.FieldContainsFold(FieldResource, v))
}

// ActionEQ applies the EQ predicate on the "action" field.
func ActionEQ(v string) predicate.Permission {
	return predicate.Permission(sql.FieldEQ(FieldAction, v))
}

// ActionNEQ applies the NEQ predicate on the "action" field.
func ActionNEQ(v string) predicate.Permission {
	return predicate.Permission(sql.FieldNEQ(FieldAction, v))
}

// ActionIn applies the In predicate on the "action" field.
func ActionIn(vs ...string) predicate.Permission {
	return predicate.Permission(sql.FieldIn(FieldAction, vs...))
}

// ActionNotIn applies the NotIn predicate on the "action" field.
func ActionNotIn(vs ...string) predicate.Permission {
	return predicate.Permission(sql.FieldNotIn(FieldAction, vs...))
}

// ActionGT applies the GT predicate on the "action" field.
func ActionGT(v string) predicate.Permission {
	return predicate.Permission(sql.FieldGT(FieldAction, v))
}

// ActionGTE applies the GTE predicate on the "action" field.
func ActionGTE(v string) predicate.Permission {
	return predicate.Permission(sql.FieldGTE(FieldAction, v))
}

// ActionLT applies the LT predicate on the "action" field.
func ActionLT(v string) predicate.Permission {
	return predicate.Permission(sql.FieldLT(FieldAction, v))
}

// ActionLTE applies the LTE predicate on the "action" field.
func ActionLTE(v string) predicate.Permission {
	return predicate.Permission(sql.FieldLTE(FieldAction, v))
}

// ActionContains applies the Contains predicate on the "action" field.
func ActionContains(v string) predicate.Permission {
	return predicate.Permission(sql.FieldContains(FieldAction, v))
}

// ActionHasPrefix applies the HasPrefix predicate on the "action" field.
func ActionHasPrefix(v string) predicate.Permission {
	return predicate.Permission(sql.FieldHasPrefix(FieldAction, v))
}

// ActionHasSuffix applies the HasSuffix predicate on the "action" field.
func ActionHasSuffix(v string) predicate.Permission {
	return predicate.Permission(sql.FieldHasSuffix(FieldAction, v))
}

// ActionEqualFold applies the EqualFold predicate on the "action" field.
func ActionEqualFold(v string) predicate.Permission {
	return predicate.Permission(sql.FieldEqualFold(FieldAction, v))
}

// ActionContainsFold applies the ContainsFold predicate on the "action" field.
func ActionContainsFold(v string) predicate.Permission {
	return predicate.Permission(sql.FieldContainsFold(FieldAction, v))
}

// CategoryEQ applies the EQ predicate on the "category" field.
func CategoryEQ(v Category) predicate.Permission {
	return predicate.Permission(sql.FieldEQ(FieldCategory, v))
}

// CategoryNEQ applies the NEQ predicate on the "category" field.
func CategoryNEQ(v Category) predicate.Permission {
	return predicate.Permission(sql.FieldNEQ(FieldCategory, v))
}

// CategoryIn applies the In predicate on the "category" field.
func CategoryIn(vs ...Category) predicate.Permission {
	return predicate.Permission(sql.FieldIn(FieldCategory, vs...))
}

// CategoryNotIn applies the NotIn predicate on the "category" field.
func CategoryNotIn(vs ...Category) predicate.Permission {
	return predicate.Permission(sql.FieldNotIn(FieldCategory, vs...))
}

// ConditionsEQ applies the EQ predicate on the "conditions" field.
func ConditionsEQ(v string) predicate.Permission {
	return predicate.Permission(sql.FieldEQ(FieldConditions, v))
}

// ConditionsNEQ applies the NEQ predicate on the "conditions" field.
func ConditionsNEQ(v string) predicate.Permission {
	return predicate.Permission(sql.FieldNEQ(FieldConditions, v))
}

// ConditionsIn applies the In predicate on the "conditions" field.
func ConditionsIn(vs ...string) predicate.Permission {
	return predicate.Permission(sql.FieldIn(FieldConditions, vs...))
}

// ConditionsNotIn applies the NotIn predicate on the "conditions" field.
func ConditionsNotIn(vs ...string) predicate.Permission {
	return predicate.Permission(sql.FieldNotIn(FieldConditions, vs...))
}

// ConditionsGT applies the GT predicate on the "conditions" field.
func ConditionsGT(v string) predicate.Permission {
	return predicate.Permission(sql.FieldGT(FieldConditions, v))
}

// ConditionsGTE applies the GTE predicate on the "conditions" field.
func ConditionsGTE(v string) predicate.Permission {
	return predicate.Permission(sql.FieldGTE(FieldConditions, v))
}

// ConditionsLT applies the LT predicate on the "conditions" field.
func ConditionsLT(v string) predicate.Permission {
	return predicate.Permission(sql.FieldLT(FieldConditions, v))
}

// ConditionsLTE applies the LTE predicate on the "conditions" field.
func ConditionsLTE(v string) predicate.Permission {
	return predicate.Permission(sql.FieldLTE(FieldConditions, v))
}

// ConditionsContains applies the Contains predicate on the "conditions" field.
func ConditionsContains(v string) predicate.Permission {
	return predicate.Permission(sql.FieldContains(FieldConditions, v))
}

// ConditionsHasPrefix applies the HasPrefix predicate on the "conditions" field.
func ConditionsHasPrefix(v string) predicate.Permission {
	return predicate.Permission(sql.FieldHasPrefix(FieldConditions, v))
}

// ConditionsHasSuffix applies the HasSuffix predicate on the "conditions" field.
func ConditionsHasSuffix(v string) predicate.Permission {
	return predicate.Permission(sql.FieldHasSuffix(FieldConditions, v))
}

// ConditionsIsNil applies the IsNil predicate on the "conditions" field.
func ConditionsIsNil() predicate.Permission {
	return predicate.Permission(sql.FieldIsNull(FieldConditions))
}

// ConditionsNotNil applies the NotNil predicate on the "conditions" field.
func ConditionsNotNil() predicate.Permission {
	return predicate.Permission(sql.FieldNotNull(FieldConditions))
}

// ConditionsEqualFold applies the EqualFold predicate on the "conditions" field.
func ConditionsEqualFold(v string) predicate.Permission {
	return predicate.Permission(sql.FieldEqualFold(FieldConditions, v))
}

// ConditionsContainsFold applies the ContainsFold predicate on the "conditions" field.
func ConditionsContainsFold(v string) predicate.Permission {
	return predicate.Permission(sql.FieldContainsFold(FieldConditions, v))
}

// SystemEQ applies the EQ predicate on the "system" field.
func SystemEQ(v bool) predicate.Permission {
	return predicate.Permission(sql.FieldEQ(FieldSystem, v))
}

// SystemNEQ applies the NEQ predicate on the "system" field.
func SystemNEQ(v bool) predicate.Permission {
	return predicate.Permission(sql.FieldNEQ(FieldSystem, v))
}

// DangerousEQ applies the EQ predicate on the "dangerous" field.
func DangerousEQ(v bool) predicate.Permission {
	return predicate.Permission(sql.FieldEQ(FieldDangerous, v))
}

// DangerousNEQ applies the NEQ predicate on the "dangerous" field.
func DangerousNEQ(v bool) predicate.Permission {
	return predicate.Permission(sql.FieldNEQ(FieldDangerous, v))
}

// RiskLevelEQ applies the EQ predicate on the "risk_level" field.
func RiskLevelEQ(v int) predicate.Permission {
	return predicate.Permission(sql.FieldEQ(FieldRiskLevel, v))
}

// RiskLevelNEQ applies the NEQ predicate on the "risk_level" field.
func RiskLevelNEQ(v int) predicate.Permission {
	return predicate.Permission(sql.FieldNEQ(FieldRiskLevel, v))
}

// RiskLevelIn applies the In predicate on the "risk_level" field.
func RiskLevelIn(vs ...int) predicate.Permission {
	return predicate.Permission(sql.FieldIn(FieldRiskLevel, vs...))
}

// RiskLevelNotIn applies the NotIn predicate on the "risk_level" field.
func RiskLevelNotIn(vs ...int) predicate.Permission {
	return predicate.Permission(sql.FieldNotIn(FieldRiskLevel, vs...))
}

// RiskLevelGT applies the GT predicate on the "risk_level" field.
func RiskLevelGT(v int) predicate.Permission {
	return predicate.Permission(sql.FieldGT(FieldRiskLevel, v))
}

// RiskLevelGTE applies the GTE predicate on the "risk_level" field.
func RiskLevelGTE(v int) predicate.Permission {
	return predicate.Permission(sql.FieldGTE(FieldRiskLevel, v))
}

// RiskLevelLT applies the LT predicate on the "risk_level" field.
func RiskLevelLT(v int) predicate.Permission {
	return predicate.Permission(sql.FieldLT(FieldRiskLevel, v))
}

// RiskLevelLTE applies the LTE predicate on the "risk_level" field.
func RiskLevelLTE(v int) predicate.Permission {
	return predicate.Permission(sql.FieldLTE(FieldRiskLevel, v))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v string) predicate.Permission {
	return predicate.Permission(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v string) predicate.Permission {
	return predicate.Permission(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...string) predicate.Permission {
	return predicate.Permission(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...string) predicate.Permission {
	return predicate.Permission(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v string) predicate.Permission {
	return predicate.Permission(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v string) predicate.Permission {
	return predicate.Permission(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v string) predicate.Permission {
	return predicate.Permission(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v string) predicate.Permission {
	return predicate.Permission(sql.FieldLTE(FieldCreatedBy, v))
}

// CreatedByContains applies the Contains predicate on the "created_by" field.
func CreatedByContains(v string) predicate.Permission {
	return predicate.Permission(sql.FieldContains(FieldCreatedBy, v))
}

// CreatedByHasPrefix applies the HasPrefix predicate on the "created_by" field.
func CreatedByHasPrefix(v string) predicate.Permission {
	return predicate.Permission(sql.FieldHasPrefix(FieldCreatedBy, v))
}

// CreatedByHasSuffix applies the HasSuffix predicate on the "created_by" field.
func CreatedByHasSuffix(v string) predicate.Permission {
	return predicate.Permission(sql.FieldHasSuffix(FieldCreatedBy, v))
}

// CreatedByIsNil applies the IsNil predicate on the "created_by" field.
func CreatedByIsNil() predicate.Permission {
	return predicate.Permission(sql.FieldIsNull(FieldCreatedBy))
}

// CreatedByNotNil applies the NotNil predicate on the "created_by" field.
func CreatedByNotNil() predicate.Permission {
	return predicate.Permission(sql.FieldNotNull(FieldCreatedBy))
}

// CreatedByEqualFold applies the EqualFold predicate on the "created_by" field.
func CreatedByEqualFold(v string) predicate.Permission {
	return predicate.Permission(sql.FieldEqualFold(FieldCreatedBy, v))
}

// CreatedByContainsFold applies the ContainsFold predicate on the "created_by" field.
func CreatedByContainsFold(v string) predicate.Permission {
	return predicate.Permission(sql.FieldContainsFold(FieldCreatedBy, v))
}

// ActiveEQ applies the EQ predicate on the "active" field.
func ActiveEQ(v bool) predicate.Permission {
	return predicate.Permission(sql.FieldEQ(FieldActive, v))
}

// ActiveNEQ applies the NEQ predicate on the "active" field.
func ActiveNEQ(v bool) predicate.Permission {
	return predicate.Permission(sql.FieldNEQ(FieldActive, v))
}

// PermissionGroupEQ applies the EQ predicate on the "permission_group" field.
func PermissionGroupEQ(v string) predicate.Permission {
	return predicate.Permission(sql.FieldEQ(FieldPermissionGroup, v))
}

// PermissionGroupNEQ applies the NEQ predicate on the "permission_group" field.
func PermissionGroupNEQ(v string) predicate.Permission {
	return predicate.Permission(sql.FieldNEQ(FieldPermissionGroup, v))
}

// PermissionGroupIn applies the In predicate on the "permission_group" field.
func PermissionGroupIn(vs ...string) predicate.Permission {
	return predicate.Permission(sql.FieldIn(FieldPermissionGroup, vs...))
}

// PermissionGroupNotIn applies the NotIn predicate on the "permission_group" field.
func PermissionGroupNotIn(vs ...string) predicate.Permission {
	return predicate.Permission(sql.FieldNotIn(FieldPermissionGroup, vs...))
}

// PermissionGroupGT applies the GT predicate on the "permission_group" field.
func PermissionGroupGT(v string) predicate.Permission {
	return predicate.Permission(sql.FieldGT(FieldPermissionGroup, v))
}

// PermissionGroupGTE applies the GTE predicate on the "permission_group" field.
func PermissionGroupGTE(v string) predicate.Permission {
	return predicate.Permission(sql.FieldGTE(FieldPermissionGroup, v))
}

// PermissionGroupLT applies the LT predicate on the "permission_group" field.
func PermissionGroupLT(v string) predicate.Permission {
	return predicate.Permission(sql.FieldLT(FieldPermissionGroup, v))
}

// PermissionGroupLTE applies the LTE predicate on the "permission_group" field.
func PermissionGroupLTE(v string) predicate.Permission {
	return predicate.Permission(sql.FieldLTE(FieldPermissionGroup, v))
}

// PermissionGroupContains applies the Contains predicate on the "permission_group" field.
func PermissionGroupContains(v string) predicate.Permission {
	return predicate.Permission(sql.FieldContains(FieldPermissionGroup, v))
}

// PermissionGroupHasPrefix applies the HasPrefix predicate on the "permission_group" field.
func PermissionGroupHasPrefix(v string) predicate.Permission {
	return predicate.Permission(sql.FieldHasPrefix(FieldPermissionGroup, v))
}

// PermissionGroupHasSuffix applies the HasSuffix predicate on the "permission_group" field.
func PermissionGroupHasSuffix(v string) predicate.Permission {
	return predicate.Permission(sql.FieldHasSuffix(FieldPermissionGroup, v))
}

// PermissionGroupIsNil applies the IsNil predicate on the "permission_group" field.
func PermissionGroupIsNil() predicate.Permission {
	return predicate.Permission(sql.FieldIsNull(FieldPermissionGroup))
}

// PermissionGroupNotNil applies the NotNil predicate on the "permission_group" field.
func PermissionGroupNotNil() predicate.Permission {
	return predicate.Permission(sql.FieldNotNull(FieldPermissionGroup))
}

// PermissionGroupEqualFold applies the EqualFold predicate on the "permission_group" field.
func PermissionGroupEqualFold(v string) predicate.Permission {
	return predicate.Permission(sql.FieldEqualFold(FieldPermissionGroup, v))
}

// PermissionGroupContainsFold applies the ContainsFold predicate on the "permission_group" field.
func PermissionGroupContainsFold(v string) predicate.Permission {
	return predicate.Permission(sql.FieldContainsFold(FieldPermissionGroup, v))
}

// HasRoles applies the HasEdge predicate on the "roles" edge.
func HasRoles() predicate.Permission {
	return predicate.Permission(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, RolesTable, RolesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRolesWith applies the HasEdge predicate on the "roles" edge with a given conditions (other predicates).
func HasRolesWith(preds ...predicate.Role) predicate.Permission {
	return predicate.Permission(func(s *sql.Selector) {
		step := newRolesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUserAssignments applies the HasEdge predicate on the "user_assignments" edge.
func HasUserAssignments() predicate.Permission {
	return predicate.Permission(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UserAssignmentsTable, UserAssignmentsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserAssignmentsWith applies the HasEdge predicate on the "user_assignments" edge with a given conditions (other predicates).
func HasUserAssignmentsWith(preds ...predicate.UserPermission) predicate.Permission {
	return predicate.Permission(func(s *sql.Selector) {
		step := newUserAssignmentsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDependencies applies the HasEdge predicate on the "dependencies" edge.
func HasDependencies() predicate.Permission {
	return predicate.Permission(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DependenciesTable, DependenciesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDependenciesWith applies the HasEdge predicate on the "dependencies" edge with a given conditions (other predicates).
func HasDependenciesWith(preds ...predicate.PermissionDependency) predicate.Permission {
	return predicate.Permission(func(s *sql.Selector) {
		step := newDependenciesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDependents applies the HasEdge predicate on the "dependents" edge.
func HasDependents() predicate.Permission {
	return predicate.Permission(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DependentsTable, DependentsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDependentsWith applies the HasEdge predicate on the "dependents" edge with a given conditions (other predicates).
func HasDependentsWith(preds ...predicate.PermissionDependency) predicate.Permission {
	return predicate.Permission(func(s *sql.Selector) {
		step := newDependentsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDependentPermissions applies the HasEdge predicate on the "dependent_permissions" edge.
func HasDependentPermissions() predicate.Permission {
	return predicate.Permission(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, DependentPermissionsTable, DependentPermissionsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDependentPermissionsWith applies the HasEdge predicate on the "dependent_permissions" edge with a given conditions (other predicates).
func HasDependentPermissionsWith(preds ...predicate.Permission) predicate.Permission {
	return predicate.Permission(func(s *sql.Selector) {
		step := newDependentPermissionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRequiredPermissions applies the HasEdge predicate on the "required_permissions" edge.
func HasRequiredPermissions() predicate.Permission {
	return predicate.Permission(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, RequiredPermissionsTable, RequiredPermissionsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRequiredPermissionsWith applies the HasEdge predicate on the "required_permissions" edge with a given conditions (other predicates).
func HasRequiredPermissionsWith(preds ...predicate.Permission) predicate.Permission {
	return predicate.Permission(func(s *sql.Selector) {
		step := newRequiredPermissionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Permission) predicate.Permission {
	return predicate.Permission(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Permission) predicate.Permission {
	return predicate.Permission(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Permission) predicate.Permission {
	return predicate.Permission(sql.NotPredicates(p))
}
