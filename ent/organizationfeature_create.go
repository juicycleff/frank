// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/juicycleff/frank/ent/featureflag"
	"github.com/juicycleff/frank/ent/organization"
	"github.com/juicycleff/frank/ent/organizationfeature"
)

// OrganizationFeatureCreate is the builder for creating a OrganizationFeature entity.
type OrganizationFeatureCreate struct {
	config
	mutation *OrganizationFeatureMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (ofc *OrganizationFeatureCreate) SetCreatedAt(t time.Time) *OrganizationFeatureCreate {
	ofc.mutation.SetCreatedAt(t)
	return ofc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ofc *OrganizationFeatureCreate) SetNillableCreatedAt(t *time.Time) *OrganizationFeatureCreate {
	if t != nil {
		ofc.SetCreatedAt(*t)
	}
	return ofc
}

// SetUpdatedAt sets the "updated_at" field.
func (ofc *OrganizationFeatureCreate) SetUpdatedAt(t time.Time) *OrganizationFeatureCreate {
	ofc.mutation.SetUpdatedAt(t)
	return ofc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ofc *OrganizationFeatureCreate) SetNillableUpdatedAt(t *time.Time) *OrganizationFeatureCreate {
	if t != nil {
		ofc.SetUpdatedAt(*t)
	}
	return ofc
}

// SetOrganizationID sets the "organization_id" field.
func (ofc *OrganizationFeatureCreate) SetOrganizationID(s string) *OrganizationFeatureCreate {
	ofc.mutation.SetOrganizationID(s)
	return ofc
}

// SetFeatureID sets the "feature_id" field.
func (ofc *OrganizationFeatureCreate) SetFeatureID(s string) *OrganizationFeatureCreate {
	ofc.mutation.SetFeatureID(s)
	return ofc
}

// SetEnabled sets the "enabled" field.
func (ofc *OrganizationFeatureCreate) SetEnabled(b bool) *OrganizationFeatureCreate {
	ofc.mutation.SetEnabled(b)
	return ofc
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (ofc *OrganizationFeatureCreate) SetNillableEnabled(b *bool) *OrganizationFeatureCreate {
	if b != nil {
		ofc.SetEnabled(*b)
	}
	return ofc
}

// SetSettings sets the "settings" field.
func (ofc *OrganizationFeatureCreate) SetSettings(m map[string]interface{}) *OrganizationFeatureCreate {
	ofc.mutation.SetSettings(m)
	return ofc
}

// SetID sets the "id" field.
func (ofc *OrganizationFeatureCreate) SetID(s string) *OrganizationFeatureCreate {
	ofc.mutation.SetID(s)
	return ofc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ofc *OrganizationFeatureCreate) SetNillableID(s *string) *OrganizationFeatureCreate {
	if s != nil {
		ofc.SetID(*s)
	}
	return ofc
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (ofc *OrganizationFeatureCreate) SetOrganization(o *Organization) *OrganizationFeatureCreate {
	return ofc.SetOrganizationID(o.ID)
}

// SetFeature sets the "feature" edge to the FeatureFlag entity.
func (ofc *OrganizationFeatureCreate) SetFeature(f *FeatureFlag) *OrganizationFeatureCreate {
	return ofc.SetFeatureID(f.ID)
}

// Mutation returns the OrganizationFeatureMutation object of the builder.
func (ofc *OrganizationFeatureCreate) Mutation() *OrganizationFeatureMutation {
	return ofc.mutation
}

// Save creates the OrganizationFeature in the database.
func (ofc *OrganizationFeatureCreate) Save(ctx context.Context) (*OrganizationFeature, error) {
	ofc.defaults()
	return withHooks(ctx, ofc.sqlSave, ofc.mutation, ofc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ofc *OrganizationFeatureCreate) SaveX(ctx context.Context) *OrganizationFeature {
	v, err := ofc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ofc *OrganizationFeatureCreate) Exec(ctx context.Context) error {
	_, err := ofc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ofc *OrganizationFeatureCreate) ExecX(ctx context.Context) {
	if err := ofc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ofc *OrganizationFeatureCreate) defaults() {
	if _, ok := ofc.mutation.CreatedAt(); !ok {
		v := organizationfeature.DefaultCreatedAt()
		ofc.mutation.SetCreatedAt(v)
	}
	if _, ok := ofc.mutation.UpdatedAt(); !ok {
		v := organizationfeature.DefaultUpdatedAt()
		ofc.mutation.SetUpdatedAt(v)
	}
	if _, ok := ofc.mutation.Enabled(); !ok {
		v := organizationfeature.DefaultEnabled
		ofc.mutation.SetEnabled(v)
	}
	if _, ok := ofc.mutation.ID(); !ok {
		v := organizationfeature.DefaultID()
		ofc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ofc *OrganizationFeatureCreate) check() error {
	if _, ok := ofc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "OrganizationFeature.created_at"`)}
	}
	if _, ok := ofc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "OrganizationFeature.updated_at"`)}
	}
	if _, ok := ofc.mutation.OrganizationID(); !ok {
		return &ValidationError{Name: "organization_id", err: errors.New(`ent: missing required field "OrganizationFeature.organization_id"`)}
	}
	if v, ok := ofc.mutation.OrganizationID(); ok {
		if err := organizationfeature.OrganizationIDValidator(v); err != nil {
			return &ValidationError{Name: "organization_id", err: fmt.Errorf(`ent: validator failed for field "OrganizationFeature.organization_id": %w`, err)}
		}
	}
	if _, ok := ofc.mutation.FeatureID(); !ok {
		return &ValidationError{Name: "feature_id", err: errors.New(`ent: missing required field "OrganizationFeature.feature_id"`)}
	}
	if v, ok := ofc.mutation.FeatureID(); ok {
		if err := organizationfeature.FeatureIDValidator(v); err != nil {
			return &ValidationError{Name: "feature_id", err: fmt.Errorf(`ent: validator failed for field "OrganizationFeature.feature_id": %w`, err)}
		}
	}
	if _, ok := ofc.mutation.Enabled(); !ok {
		return &ValidationError{Name: "enabled", err: errors.New(`ent: missing required field "OrganizationFeature.enabled"`)}
	}
	if len(ofc.mutation.OrganizationIDs()) == 0 {
		return &ValidationError{Name: "organization", err: errors.New(`ent: missing required edge "OrganizationFeature.organization"`)}
	}
	if len(ofc.mutation.FeatureIDs()) == 0 {
		return &ValidationError{Name: "feature", err: errors.New(`ent: missing required edge "OrganizationFeature.feature"`)}
	}
	return nil
}

func (ofc *OrganizationFeatureCreate) sqlSave(ctx context.Context) (*OrganizationFeature, error) {
	if err := ofc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ofc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ofc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected OrganizationFeature.ID type: %T", _spec.ID.Value)
		}
	}
	ofc.mutation.id = &_node.ID
	ofc.mutation.done = true
	return _node, nil
}

func (ofc *OrganizationFeatureCreate) createSpec() (*OrganizationFeature, *sqlgraph.CreateSpec) {
	var (
		_node = &OrganizationFeature{config: ofc.config}
		_spec = sqlgraph.NewCreateSpec(organizationfeature.Table, sqlgraph.NewFieldSpec(organizationfeature.FieldID, field.TypeString))
	)
	if id, ok := ofc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ofc.mutation.CreatedAt(); ok {
		_spec.SetField(organizationfeature.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ofc.mutation.UpdatedAt(); ok {
		_spec.SetField(organizationfeature.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ofc.mutation.Enabled(); ok {
		_spec.SetField(organizationfeature.FieldEnabled, field.TypeBool, value)
		_node.Enabled = value
	}
	if value, ok := ofc.mutation.Settings(); ok {
		_spec.SetField(organizationfeature.FieldSettings, field.TypeJSON, value)
		_node.Settings = value
	}
	if nodes := ofc.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   organizationfeature.OrganizationTable,
			Columns: []string{organizationfeature.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OrganizationID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ofc.mutation.FeatureIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   organizationfeature.FeatureTable,
			Columns: []string{organizationfeature.FeatureColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(featureflag.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.FeatureID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OrganizationFeatureCreateBulk is the builder for creating many OrganizationFeature entities in bulk.
type OrganizationFeatureCreateBulk struct {
	config
	err      error
	builders []*OrganizationFeatureCreate
}

// Save creates the OrganizationFeature entities in the database.
func (ofcb *OrganizationFeatureCreateBulk) Save(ctx context.Context) ([]*OrganizationFeature, error) {
	if ofcb.err != nil {
		return nil, ofcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ofcb.builders))
	nodes := make([]*OrganizationFeature, len(ofcb.builders))
	mutators := make([]Mutator, len(ofcb.builders))
	for i := range ofcb.builders {
		func(i int, root context.Context) {
			builder := ofcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrganizationFeatureMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ofcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ofcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ofcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ofcb *OrganizationFeatureCreateBulk) SaveX(ctx context.Context) []*OrganizationFeature {
	v, err := ofcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ofcb *OrganizationFeatureCreateBulk) Exec(ctx context.Context) error {
	_, err := ofcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ofcb *OrganizationFeatureCreateBulk) ExecX(ctx context.Context) {
	if err := ofcb.Exec(ctx); err != nil {
		panic(err)
	}
}
