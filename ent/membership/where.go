// Copyright 2023-present XRaph LLC. All rights reserved.
// This source code is licensed under the XRaph LLC license found
// in the LICENSE file in the root directory of this source tree.
// Code generated by ent, DO NOT EDIT.

package membership

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/juicycleff/frank/ent/predicate"
	"github.com/rs/xid"
)

// ID filters vertices based on their ID field.
func ID(id xid.ID) predicate.Membership {
	return predicate.Membership(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id xid.ID) predicate.Membership {
	return predicate.Membership(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id xid.ID) predicate.Membership {
	return predicate.Membership(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...xid.ID) predicate.Membership {
	return predicate.Membership(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...xid.ID) predicate.Membership {
	return predicate.Membership(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id xid.ID) predicate.Membership {
	return predicate.Membership(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id xid.ID) predicate.Membership {
	return predicate.Membership(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id xid.ID) predicate.Membership {
	return predicate.Membership(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id xid.ID) predicate.Membership {
	return predicate.Membership(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Membership {
	return predicate.Membership(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Membership {
	return predicate.Membership(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Membership {
	return predicate.Membership(sql.FieldEQ(FieldDeletedAt, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v xid.ID) predicate.Membership {
	return predicate.Membership(sql.FieldEQ(FieldUserID, v))
}

// OrganizationID applies equality check predicate on the "organization_id" field. It's identical to OrganizationIDEQ.
func OrganizationID(v xid.ID) predicate.Membership {
	return predicate.Membership(sql.FieldEQ(FieldOrganizationID, v))
}

// RoleID applies equality check predicate on the "role_id" field. It's identical to RoleIDEQ.
func RoleID(v xid.ID) predicate.Membership {
	return predicate.Membership(sql.FieldEQ(FieldRoleID, v))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.Membership {
	return predicate.Membership(sql.FieldEQ(FieldEmail, v))
}

// InvitedBy applies equality check predicate on the "invited_by" field. It's identical to InvitedByEQ.
func InvitedBy(v xid.ID) predicate.Membership {
	return predicate.Membership(sql.FieldEQ(FieldInvitedBy, v))
}

// InvitedAt applies equality check predicate on the "invited_at" field. It's identical to InvitedAtEQ.
func InvitedAt(v time.Time) predicate.Membership {
	return predicate.Membership(sql.FieldEQ(FieldInvitedAt, v))
}

// JoinedAt applies equality check predicate on the "joined_at" field. It's identical to JoinedAtEQ.
func JoinedAt(v time.Time) predicate.Membership {
	return predicate.Membership(sql.FieldEQ(FieldJoinedAt, v))
}

// ExpiresAt applies equality check predicate on the "expires_at" field. It's identical to ExpiresAtEQ.
func ExpiresAt(v time.Time) predicate.Membership {
	return predicate.Membership(sql.FieldEQ(FieldExpiresAt, v))
}

// InvitationToken applies equality check predicate on the "invitation_token" field. It's identical to InvitationTokenEQ.
func InvitationToken(v string) predicate.Membership {
	return predicate.Membership(sql.FieldEQ(FieldInvitationToken, v))
}

// IsBillingContact applies equality check predicate on the "is_billing_contact" field. It's identical to IsBillingContactEQ.
func IsBillingContact(v bool) predicate.Membership {
	return predicate.Membership(sql.FieldEQ(FieldIsBillingContact, v))
}

// IsPrimaryContact applies equality check predicate on the "is_primary_contact" field. It's identical to IsPrimaryContactEQ.
func IsPrimaryContact(v bool) predicate.Membership {
	return predicate.Membership(sql.FieldEQ(FieldIsPrimaryContact, v))
}

// LeftAt applies equality check predicate on the "left_at" field. It's identical to LeftAtEQ.
func LeftAt(v time.Time) predicate.Membership {
	return predicate.Membership(sql.FieldEQ(FieldLeftAt, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Membership {
	return predicate.Membership(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Membership {
	return predicate.Membership(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Membership {
	return predicate.Membership(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Membership {
	return predicate.Membership(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Membership {
	return predicate.Membership(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Membership {
	return predicate.Membership(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Membership {
	return predicate.Membership(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Membership {
	return predicate.Membership(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Membership {
	return predicate.Membership(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Membership {
	return predicate.Membership(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Membership {
	return predicate.Membership(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Membership {
	return predicate.Membership(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Membership {
	return predicate.Membership(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Membership {
	return predicate.Membership(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Membership {
	return predicate.Membership(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Membership {
	return predicate.Membership(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Membership {
	return predicate.Membership(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Membership {
	return predicate.Membership(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Membership {
	return predicate.Membership(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Membership {
	return predicate.Membership(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Membership {
	return predicate.Membership(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Membership {
	return predicate.Membership(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Membership {
	return predicate.Membership(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Membership {
	return predicate.Membership(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Membership {
	return predicate.Membership(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Membership {
	return predicate.Membership(sql.FieldNotNull(FieldDeletedAt))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v xid.ID) predicate.Membership {
	return predicate.Membership(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v xid.ID) predicate.Membership {
	return predicate.Membership(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...xid.ID) predicate.Membership {
	return predicate.Membership(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...xid.ID) predicate.Membership {
	return predicate.Membership(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v xid.ID) predicate.Membership {
	return predicate.Membership(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v xid.ID) predicate.Membership {
	return predicate.Membership(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v xid.ID) predicate.Membership {
	return predicate.Membership(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v xid.ID) predicate.Membership {
	return predicate.Membership(sql.FieldLTE(FieldUserID, v))
}

// UserIDContains applies the Contains predicate on the "user_id" field.
func UserIDContains(v xid.ID) predicate.Membership {
	vc := v.String()
	return predicate.Membership(sql.FieldContains(FieldUserID, vc))
}

// UserIDHasPrefix applies the HasPrefix predicate on the "user_id" field.
func UserIDHasPrefix(v xid.ID) predicate.Membership {
	vc := v.String()
	return predicate.Membership(sql.FieldHasPrefix(FieldUserID, vc))
}

// UserIDHasSuffix applies the HasSuffix predicate on the "user_id" field.
func UserIDHasSuffix(v xid.ID) predicate.Membership {
	vc := v.String()
	return predicate.Membership(sql.FieldHasSuffix(FieldUserID, vc))
}

// UserIDEqualFold applies the EqualFold predicate on the "user_id" field.
func UserIDEqualFold(v xid.ID) predicate.Membership {
	vc := v.String()
	return predicate.Membership(sql.FieldEqualFold(FieldUserID, vc))
}

// UserIDContainsFold applies the ContainsFold predicate on the "user_id" field.
func UserIDContainsFold(v xid.ID) predicate.Membership {
	vc := v.String()
	return predicate.Membership(sql.FieldContainsFold(FieldUserID, vc))
}

// OrganizationIDEQ applies the EQ predicate on the "organization_id" field.
func OrganizationIDEQ(v xid.ID) predicate.Membership {
	return predicate.Membership(sql.FieldEQ(FieldOrganizationID, v))
}

// OrganizationIDNEQ applies the NEQ predicate on the "organization_id" field.
func OrganizationIDNEQ(v xid.ID) predicate.Membership {
	return predicate.Membership(sql.FieldNEQ(FieldOrganizationID, v))
}

// OrganizationIDIn applies the In predicate on the "organization_id" field.
func OrganizationIDIn(vs ...xid.ID) predicate.Membership {
	return predicate.Membership(sql.FieldIn(FieldOrganizationID, vs...))
}

// OrganizationIDNotIn applies the NotIn predicate on the "organization_id" field.
func OrganizationIDNotIn(vs ...xid.ID) predicate.Membership {
	return predicate.Membership(sql.FieldNotIn(FieldOrganizationID, vs...))
}

// OrganizationIDGT applies the GT predicate on the "organization_id" field.
func OrganizationIDGT(v xid.ID) predicate.Membership {
	return predicate.Membership(sql.FieldGT(FieldOrganizationID, v))
}

// OrganizationIDGTE applies the GTE predicate on the "organization_id" field.
func OrganizationIDGTE(v xid.ID) predicate.Membership {
	return predicate.Membership(sql.FieldGTE(FieldOrganizationID, v))
}

// OrganizationIDLT applies the LT predicate on the "organization_id" field.
func OrganizationIDLT(v xid.ID) predicate.Membership {
	return predicate.Membership(sql.FieldLT(FieldOrganizationID, v))
}

// OrganizationIDLTE applies the LTE predicate on the "organization_id" field.
func OrganizationIDLTE(v xid.ID) predicate.Membership {
	return predicate.Membership(sql.FieldLTE(FieldOrganizationID, v))
}

// OrganizationIDContains applies the Contains predicate on the "organization_id" field.
func OrganizationIDContains(v xid.ID) predicate.Membership {
	vc := v.String()
	return predicate.Membership(sql.FieldContains(FieldOrganizationID, vc))
}

// OrganizationIDHasPrefix applies the HasPrefix predicate on the "organization_id" field.
func OrganizationIDHasPrefix(v xid.ID) predicate.Membership {
	vc := v.String()
	return predicate.Membership(sql.FieldHasPrefix(FieldOrganizationID, vc))
}

// OrganizationIDHasSuffix applies the HasSuffix predicate on the "organization_id" field.
func OrganizationIDHasSuffix(v xid.ID) predicate.Membership {
	vc := v.String()
	return predicate.Membership(sql.FieldHasSuffix(FieldOrganizationID, vc))
}

// OrganizationIDEqualFold applies the EqualFold predicate on the "organization_id" field.
func OrganizationIDEqualFold(v xid.ID) predicate.Membership {
	vc := v.String()
	return predicate.Membership(sql.FieldEqualFold(FieldOrganizationID, vc))
}

// OrganizationIDContainsFold applies the ContainsFold predicate on the "organization_id" field.
func OrganizationIDContainsFold(v xid.ID) predicate.Membership {
	vc := v.String()
	return predicate.Membership(sql.FieldContainsFold(FieldOrganizationID, vc))
}

// RoleIDEQ applies the EQ predicate on the "role_id" field.
func RoleIDEQ(v xid.ID) predicate.Membership {
	return predicate.Membership(sql.FieldEQ(FieldRoleID, v))
}

// RoleIDNEQ applies the NEQ predicate on the "role_id" field.
func RoleIDNEQ(v xid.ID) predicate.Membership {
	return predicate.Membership(sql.FieldNEQ(FieldRoleID, v))
}

// RoleIDIn applies the In predicate on the "role_id" field.
func RoleIDIn(vs ...xid.ID) predicate.Membership {
	return predicate.Membership(sql.FieldIn(FieldRoleID, vs...))
}

// RoleIDNotIn applies the NotIn predicate on the "role_id" field.
func RoleIDNotIn(vs ...xid.ID) predicate.Membership {
	return predicate.Membership(sql.FieldNotIn(FieldRoleID, vs...))
}

// RoleIDGT applies the GT predicate on the "role_id" field.
func RoleIDGT(v xid.ID) predicate.Membership {
	return predicate.Membership(sql.FieldGT(FieldRoleID, v))
}

// RoleIDGTE applies the GTE predicate on the "role_id" field.
func RoleIDGTE(v xid.ID) predicate.Membership {
	return predicate.Membership(sql.FieldGTE(FieldRoleID, v))
}

// RoleIDLT applies the LT predicate on the "role_id" field.
func RoleIDLT(v xid.ID) predicate.Membership {
	return predicate.Membership(sql.FieldLT(FieldRoleID, v))
}

// RoleIDLTE applies the LTE predicate on the "role_id" field.
func RoleIDLTE(v xid.ID) predicate.Membership {
	return predicate.Membership(sql.FieldLTE(FieldRoleID, v))
}

// RoleIDContains applies the Contains predicate on the "role_id" field.
func RoleIDContains(v xid.ID) predicate.Membership {
	vc := v.String()
	return predicate.Membership(sql.FieldContains(FieldRoleID, vc))
}

// RoleIDHasPrefix applies the HasPrefix predicate on the "role_id" field.
func RoleIDHasPrefix(v xid.ID) predicate.Membership {
	vc := v.String()
	return predicate.Membership(sql.FieldHasPrefix(FieldRoleID, vc))
}

// RoleIDHasSuffix applies the HasSuffix predicate on the "role_id" field.
func RoleIDHasSuffix(v xid.ID) predicate.Membership {
	vc := v.String()
	return predicate.Membership(sql.FieldHasSuffix(FieldRoleID, vc))
}

// RoleIDEqualFold applies the EqualFold predicate on the "role_id" field.
func RoleIDEqualFold(v xid.ID) predicate.Membership {
	vc := v.String()
	return predicate.Membership(sql.FieldEqualFold(FieldRoleID, vc))
}

// RoleIDContainsFold applies the ContainsFold predicate on the "role_id" field.
func RoleIDContainsFold(v xid.ID) predicate.Membership {
	vc := v.String()
	return predicate.Membership(sql.FieldContainsFold(FieldRoleID, vc))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.Membership {
	return predicate.Membership(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.Membership {
	return predicate.Membership(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.Membership {
	return predicate.Membership(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.Membership {
	return predicate.Membership(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.Membership {
	return predicate.Membership(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.Membership {
	return predicate.Membership(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.Membership {
	return predicate.Membership(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.Membership {
	return predicate.Membership(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.Membership {
	return predicate.Membership(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.Membership {
	return predicate.Membership(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.Membership {
	return predicate.Membership(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.Membership {
	return predicate.Membership(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.Membership {
	return predicate.Membership(sql.FieldContainsFold(FieldEmail, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Membership {
	return predicate.Membership(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Membership {
	return predicate.Membership(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Membership {
	return predicate.Membership(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Membership {
	return predicate.Membership(sql.FieldNotIn(FieldStatus, vs...))
}

// InvitedByEQ applies the EQ predicate on the "invited_by" field.
func InvitedByEQ(v xid.ID) predicate.Membership {
	return predicate.Membership(sql.FieldEQ(FieldInvitedBy, v))
}

// InvitedByNEQ applies the NEQ predicate on the "invited_by" field.
func InvitedByNEQ(v xid.ID) predicate.Membership {
	return predicate.Membership(sql.FieldNEQ(FieldInvitedBy, v))
}

// InvitedByIn applies the In predicate on the "invited_by" field.
func InvitedByIn(vs ...xid.ID) predicate.Membership {
	return predicate.Membership(sql.FieldIn(FieldInvitedBy, vs...))
}

// InvitedByNotIn applies the NotIn predicate on the "invited_by" field.
func InvitedByNotIn(vs ...xid.ID) predicate.Membership {
	return predicate.Membership(sql.FieldNotIn(FieldInvitedBy, vs...))
}

// InvitedByGT applies the GT predicate on the "invited_by" field.
func InvitedByGT(v xid.ID) predicate.Membership {
	return predicate.Membership(sql.FieldGT(FieldInvitedBy, v))
}

// InvitedByGTE applies the GTE predicate on the "invited_by" field.
func InvitedByGTE(v xid.ID) predicate.Membership {
	return predicate.Membership(sql.FieldGTE(FieldInvitedBy, v))
}

// InvitedByLT applies the LT predicate on the "invited_by" field.
func InvitedByLT(v xid.ID) predicate.Membership {
	return predicate.Membership(sql.FieldLT(FieldInvitedBy, v))
}

// InvitedByLTE applies the LTE predicate on the "invited_by" field.
func InvitedByLTE(v xid.ID) predicate.Membership {
	return predicate.Membership(sql.FieldLTE(FieldInvitedBy, v))
}

// InvitedByContains applies the Contains predicate on the "invited_by" field.
func InvitedByContains(v xid.ID) predicate.Membership {
	vc := v.String()
	return predicate.Membership(sql.FieldContains(FieldInvitedBy, vc))
}

// InvitedByHasPrefix applies the HasPrefix predicate on the "invited_by" field.
func InvitedByHasPrefix(v xid.ID) predicate.Membership {
	vc := v.String()
	return predicate.Membership(sql.FieldHasPrefix(FieldInvitedBy, vc))
}

// InvitedByHasSuffix applies the HasSuffix predicate on the "invited_by" field.
func InvitedByHasSuffix(v xid.ID) predicate.Membership {
	vc := v.String()
	return predicate.Membership(sql.FieldHasSuffix(FieldInvitedBy, vc))
}

// InvitedByIsNil applies the IsNil predicate on the "invited_by" field.
func InvitedByIsNil() predicate.Membership {
	return predicate.Membership(sql.FieldIsNull(FieldInvitedBy))
}

// InvitedByNotNil applies the NotNil predicate on the "invited_by" field.
func InvitedByNotNil() predicate.Membership {
	return predicate.Membership(sql.FieldNotNull(FieldInvitedBy))
}

// InvitedByEqualFold applies the EqualFold predicate on the "invited_by" field.
func InvitedByEqualFold(v xid.ID) predicate.Membership {
	vc := v.String()
	return predicate.Membership(sql.FieldEqualFold(FieldInvitedBy, vc))
}

// InvitedByContainsFold applies the ContainsFold predicate on the "invited_by" field.
func InvitedByContainsFold(v xid.ID) predicate.Membership {
	vc := v.String()
	return predicate.Membership(sql.FieldContainsFold(FieldInvitedBy, vc))
}

// InvitedAtEQ applies the EQ predicate on the "invited_at" field.
func InvitedAtEQ(v time.Time) predicate.Membership {
	return predicate.Membership(sql.FieldEQ(FieldInvitedAt, v))
}

// InvitedAtNEQ applies the NEQ predicate on the "invited_at" field.
func InvitedAtNEQ(v time.Time) predicate.Membership {
	return predicate.Membership(sql.FieldNEQ(FieldInvitedAt, v))
}

// InvitedAtIn applies the In predicate on the "invited_at" field.
func InvitedAtIn(vs ...time.Time) predicate.Membership {
	return predicate.Membership(sql.FieldIn(FieldInvitedAt, vs...))
}

// InvitedAtNotIn applies the NotIn predicate on the "invited_at" field.
func InvitedAtNotIn(vs ...time.Time) predicate.Membership {
	return predicate.Membership(sql.FieldNotIn(FieldInvitedAt, vs...))
}

// InvitedAtGT applies the GT predicate on the "invited_at" field.
func InvitedAtGT(v time.Time) predicate.Membership {
	return predicate.Membership(sql.FieldGT(FieldInvitedAt, v))
}

// InvitedAtGTE applies the GTE predicate on the "invited_at" field.
func InvitedAtGTE(v time.Time) predicate.Membership {
	return predicate.Membership(sql.FieldGTE(FieldInvitedAt, v))
}

// InvitedAtLT applies the LT predicate on the "invited_at" field.
func InvitedAtLT(v time.Time) predicate.Membership {
	return predicate.Membership(sql.FieldLT(FieldInvitedAt, v))
}

// InvitedAtLTE applies the LTE predicate on the "invited_at" field.
func InvitedAtLTE(v time.Time) predicate.Membership {
	return predicate.Membership(sql.FieldLTE(FieldInvitedAt, v))
}

// JoinedAtEQ applies the EQ predicate on the "joined_at" field.
func JoinedAtEQ(v time.Time) predicate.Membership {
	return predicate.Membership(sql.FieldEQ(FieldJoinedAt, v))
}

// JoinedAtNEQ applies the NEQ predicate on the "joined_at" field.
func JoinedAtNEQ(v time.Time) predicate.Membership {
	return predicate.Membership(sql.FieldNEQ(FieldJoinedAt, v))
}

// JoinedAtIn applies the In predicate on the "joined_at" field.
func JoinedAtIn(vs ...time.Time) predicate.Membership {
	return predicate.Membership(sql.FieldIn(FieldJoinedAt, vs...))
}

// JoinedAtNotIn applies the NotIn predicate on the "joined_at" field.
func JoinedAtNotIn(vs ...time.Time) predicate.Membership {
	return predicate.Membership(sql.FieldNotIn(FieldJoinedAt, vs...))
}

// JoinedAtGT applies the GT predicate on the "joined_at" field.
func JoinedAtGT(v time.Time) predicate.Membership {
	return predicate.Membership(sql.FieldGT(FieldJoinedAt, v))
}

// JoinedAtGTE applies the GTE predicate on the "joined_at" field.
func JoinedAtGTE(v time.Time) predicate.Membership {
	return predicate.Membership(sql.FieldGTE(FieldJoinedAt, v))
}

// JoinedAtLT applies the LT predicate on the "joined_at" field.
func JoinedAtLT(v time.Time) predicate.Membership {
	return predicate.Membership(sql.FieldLT(FieldJoinedAt, v))
}

// JoinedAtLTE applies the LTE predicate on the "joined_at" field.
func JoinedAtLTE(v time.Time) predicate.Membership {
	return predicate.Membership(sql.FieldLTE(FieldJoinedAt, v))
}

// JoinedAtIsNil applies the IsNil predicate on the "joined_at" field.
func JoinedAtIsNil() predicate.Membership {
	return predicate.Membership(sql.FieldIsNull(FieldJoinedAt))
}

// JoinedAtNotNil applies the NotNil predicate on the "joined_at" field.
func JoinedAtNotNil() predicate.Membership {
	return predicate.Membership(sql.FieldNotNull(FieldJoinedAt))
}

// ExpiresAtEQ applies the EQ predicate on the "expires_at" field.
func ExpiresAtEQ(v time.Time) predicate.Membership {
	return predicate.Membership(sql.FieldEQ(FieldExpiresAt, v))
}

// ExpiresAtNEQ applies the NEQ predicate on the "expires_at" field.
func ExpiresAtNEQ(v time.Time) predicate.Membership {
	return predicate.Membership(sql.FieldNEQ(FieldExpiresAt, v))
}

// ExpiresAtIn applies the In predicate on the "expires_at" field.
func ExpiresAtIn(vs ...time.Time) predicate.Membership {
	return predicate.Membership(sql.FieldIn(FieldExpiresAt, vs...))
}

// ExpiresAtNotIn applies the NotIn predicate on the "expires_at" field.
func ExpiresAtNotIn(vs ...time.Time) predicate.Membership {
	return predicate.Membership(sql.FieldNotIn(FieldExpiresAt, vs...))
}

// ExpiresAtGT applies the GT predicate on the "expires_at" field.
func ExpiresAtGT(v time.Time) predicate.Membership {
	return predicate.Membership(sql.FieldGT(FieldExpiresAt, v))
}

// ExpiresAtGTE applies the GTE predicate on the "expires_at" field.
func ExpiresAtGTE(v time.Time) predicate.Membership {
	return predicate.Membership(sql.FieldGTE(FieldExpiresAt, v))
}

// ExpiresAtLT applies the LT predicate on the "expires_at" field.
func ExpiresAtLT(v time.Time) predicate.Membership {
	return predicate.Membership(sql.FieldLT(FieldExpiresAt, v))
}

// ExpiresAtLTE applies the LTE predicate on the "expires_at" field.
func ExpiresAtLTE(v time.Time) predicate.Membership {
	return predicate.Membership(sql.FieldLTE(FieldExpiresAt, v))
}

// ExpiresAtIsNil applies the IsNil predicate on the "expires_at" field.
func ExpiresAtIsNil() predicate.Membership {
	return predicate.Membership(sql.FieldIsNull(FieldExpiresAt))
}

// ExpiresAtNotNil applies the NotNil predicate on the "expires_at" field.
func ExpiresAtNotNil() predicate.Membership {
	return predicate.Membership(sql.FieldNotNull(FieldExpiresAt))
}

// InvitationTokenEQ applies the EQ predicate on the "invitation_token" field.
func InvitationTokenEQ(v string) predicate.Membership {
	return predicate.Membership(sql.FieldEQ(FieldInvitationToken, v))
}

// InvitationTokenNEQ applies the NEQ predicate on the "invitation_token" field.
func InvitationTokenNEQ(v string) predicate.Membership {
	return predicate.Membership(sql.FieldNEQ(FieldInvitationToken, v))
}

// InvitationTokenIn applies the In predicate on the "invitation_token" field.
func InvitationTokenIn(vs ...string) predicate.Membership {
	return predicate.Membership(sql.FieldIn(FieldInvitationToken, vs...))
}

// InvitationTokenNotIn applies the NotIn predicate on the "invitation_token" field.
func InvitationTokenNotIn(vs ...string) predicate.Membership {
	return predicate.Membership(sql.FieldNotIn(FieldInvitationToken, vs...))
}

// InvitationTokenGT applies the GT predicate on the "invitation_token" field.
func InvitationTokenGT(v string) predicate.Membership {
	return predicate.Membership(sql.FieldGT(FieldInvitationToken, v))
}

// InvitationTokenGTE applies the GTE predicate on the "invitation_token" field.
func InvitationTokenGTE(v string) predicate.Membership {
	return predicate.Membership(sql.FieldGTE(FieldInvitationToken, v))
}

// InvitationTokenLT applies the LT predicate on the "invitation_token" field.
func InvitationTokenLT(v string) predicate.Membership {
	return predicate.Membership(sql.FieldLT(FieldInvitationToken, v))
}

// InvitationTokenLTE applies the LTE predicate on the "invitation_token" field.
func InvitationTokenLTE(v string) predicate.Membership {
	return predicate.Membership(sql.FieldLTE(FieldInvitationToken, v))
}

// InvitationTokenContains applies the Contains predicate on the "invitation_token" field.
func InvitationTokenContains(v string) predicate.Membership {
	return predicate.Membership(sql.FieldContains(FieldInvitationToken, v))
}

// InvitationTokenHasPrefix applies the HasPrefix predicate on the "invitation_token" field.
func InvitationTokenHasPrefix(v string) predicate.Membership {
	return predicate.Membership(sql.FieldHasPrefix(FieldInvitationToken, v))
}

// InvitationTokenHasSuffix applies the HasSuffix predicate on the "invitation_token" field.
func InvitationTokenHasSuffix(v string) predicate.Membership {
	return predicate.Membership(sql.FieldHasSuffix(FieldInvitationToken, v))
}

// InvitationTokenIsNil applies the IsNil predicate on the "invitation_token" field.
func InvitationTokenIsNil() predicate.Membership {
	return predicate.Membership(sql.FieldIsNull(FieldInvitationToken))
}

// InvitationTokenNotNil applies the NotNil predicate on the "invitation_token" field.
func InvitationTokenNotNil() predicate.Membership {
	return predicate.Membership(sql.FieldNotNull(FieldInvitationToken))
}

// InvitationTokenEqualFold applies the EqualFold predicate on the "invitation_token" field.
func InvitationTokenEqualFold(v string) predicate.Membership {
	return predicate.Membership(sql.FieldEqualFold(FieldInvitationToken, v))
}

// InvitationTokenContainsFold applies the ContainsFold predicate on the "invitation_token" field.
func InvitationTokenContainsFold(v string) predicate.Membership {
	return predicate.Membership(sql.FieldContainsFold(FieldInvitationToken, v))
}

// IsBillingContactEQ applies the EQ predicate on the "is_billing_contact" field.
func IsBillingContactEQ(v bool) predicate.Membership {
	return predicate.Membership(sql.FieldEQ(FieldIsBillingContact, v))
}

// IsBillingContactNEQ applies the NEQ predicate on the "is_billing_contact" field.
func IsBillingContactNEQ(v bool) predicate.Membership {
	return predicate.Membership(sql.FieldNEQ(FieldIsBillingContact, v))
}

// IsPrimaryContactEQ applies the EQ predicate on the "is_primary_contact" field.
func IsPrimaryContactEQ(v bool) predicate.Membership {
	return predicate.Membership(sql.FieldEQ(FieldIsPrimaryContact, v))
}

// IsPrimaryContactNEQ applies the NEQ predicate on the "is_primary_contact" field.
func IsPrimaryContactNEQ(v bool) predicate.Membership {
	return predicate.Membership(sql.FieldNEQ(FieldIsPrimaryContact, v))
}

// LeftAtEQ applies the EQ predicate on the "left_at" field.
func LeftAtEQ(v time.Time) predicate.Membership {
	return predicate.Membership(sql.FieldEQ(FieldLeftAt, v))
}

// LeftAtNEQ applies the NEQ predicate on the "left_at" field.
func LeftAtNEQ(v time.Time) predicate.Membership {
	return predicate.Membership(sql.FieldNEQ(FieldLeftAt, v))
}

// LeftAtIn applies the In predicate on the "left_at" field.
func LeftAtIn(vs ...time.Time) predicate.Membership {
	return predicate.Membership(sql.FieldIn(FieldLeftAt, vs...))
}

// LeftAtNotIn applies the NotIn predicate on the "left_at" field.
func LeftAtNotIn(vs ...time.Time) predicate.Membership {
	return predicate.Membership(sql.FieldNotIn(FieldLeftAt, vs...))
}

// LeftAtGT applies the GT predicate on the "left_at" field.
func LeftAtGT(v time.Time) predicate.Membership {
	return predicate.Membership(sql.FieldGT(FieldLeftAt, v))
}

// LeftAtGTE applies the GTE predicate on the "left_at" field.
func LeftAtGTE(v time.Time) predicate.Membership {
	return predicate.Membership(sql.FieldGTE(FieldLeftAt, v))
}

// LeftAtLT applies the LT predicate on the "left_at" field.
func LeftAtLT(v time.Time) predicate.Membership {
	return predicate.Membership(sql.FieldLT(FieldLeftAt, v))
}

// LeftAtLTE applies the LTE predicate on the "left_at" field.
func LeftAtLTE(v time.Time) predicate.Membership {
	return predicate.Membership(sql.FieldLTE(FieldLeftAt, v))
}

// LeftAtIsNil applies the IsNil predicate on the "left_at" field.
func LeftAtIsNil() predicate.Membership {
	return predicate.Membership(sql.FieldIsNull(FieldLeftAt))
}

// LeftAtNotNil applies the NotNil predicate on the "left_at" field.
func LeftAtNotNil() predicate.Membership {
	return predicate.Membership(sql.FieldNotNull(FieldLeftAt))
}

// MetadataIsNil applies the IsNil predicate on the "metadata" field.
func MetadataIsNil() predicate.Membership {
	return predicate.Membership(sql.FieldIsNull(FieldMetadata))
}

// MetadataNotNil applies the NotNil predicate on the "metadata" field.
func MetadataNotNil() predicate.Membership {
	return predicate.Membership(sql.FieldNotNull(FieldMetadata))
}

// CustomFieldsIsNil applies the IsNil predicate on the "custom_fields" field.
func CustomFieldsIsNil() predicate.Membership {
	return predicate.Membership(sql.FieldIsNull(FieldCustomFields))
}

// CustomFieldsNotNil applies the NotNil predicate on the "custom_fields" field.
func CustomFieldsNotNil() predicate.Membership {
	return predicate.Membership(sql.FieldNotNull(FieldCustomFields))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Membership {
	return predicate.Membership(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Membership {
	return predicate.Membership(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrganization applies the HasEdge predicate on the "organization" edge.
func HasOrganization() predicate.Membership {
	return predicate.Membership(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrganizationTable, OrganizationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrganizationWith applies the HasEdge predicate on the "organization" edge with a given conditions (other predicates).
func HasOrganizationWith(preds ...predicate.Organization) predicate.Membership {
	return predicate.Membership(func(s *sql.Selector) {
		step := newOrganizationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRole applies the HasEdge predicate on the "role" edge.
func HasRole() predicate.Membership {
	return predicate.Membership(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RoleTable, RoleColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRoleWith applies the HasEdge predicate on the "role" edge with a given conditions (other predicates).
func HasRoleWith(preds ...predicate.Role) predicate.Membership {
	return predicate.Membership(func(s *sql.Selector) {
		step := newRoleStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasInviter applies the HasEdge predicate on the "inviter" edge.
func HasInviter() predicate.Membership {
	return predicate.Membership(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, InviterTable, InviterColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasInviterWith applies the HasEdge predicate on the "inviter" edge with a given conditions (other predicates).
func HasInviterWith(preds ...predicate.User) predicate.Membership {
	return predicate.Membership(func(s *sql.Selector) {
		step := newInviterStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Membership) predicate.Membership {
	return predicate.Membership(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Membership) predicate.Membership {
	return predicate.Membership(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Membership) predicate.Membership {
	return predicate.Membership(sql.NotPredicates(p))
}
