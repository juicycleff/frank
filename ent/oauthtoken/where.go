// Copyright 2023-present XRaph LLC. All rights reserved.
// This source code is licensed under the XRaph LLC license found
// in the LICENSE file in the root directory of this source tree.
// Code generated by ent, DO NOT EDIT.

package oauthtoken

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/rs/xid"
	
)

// ID filters vertices based on their ID field.
func ID(id xid.ID) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id xid.ID) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id xid.ID) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...xid.ID) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...xid.ID) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id xid.ID) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id xid.ID) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id xid.ID) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id xid.ID) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldEQ(FieldDeletedAt, v))
}

// AccessToken applies equality check predicate on the "access_token" field. It's identical to AccessTokenEQ.
func AccessToken(v string) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldEQ(FieldAccessToken, v))
}

// RefreshToken applies equality check predicate on the "refresh_token" field. It's identical to RefreshTokenEQ.
func RefreshToken(v string) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldEQ(FieldRefreshToken, v))
}

// TokenType applies equality check predicate on the "token_type" field. It's identical to TokenTypeEQ.
func TokenType(v string) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldEQ(FieldTokenType, v))
}

// ClientID applies equality check predicate on the "client_id" field. It's identical to ClientIDEQ.
func ClientID(v xid.ID) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldEQ(FieldClientID, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v xid.ID) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldEQ(FieldUserID, v))
}

// OrganizationID applies equality check predicate on the "organization_id" field. It's identical to OrganizationIDEQ.
func OrganizationID(v xid.ID) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldEQ(FieldOrganizationID, v))
}

// ExpiresIn applies equality check predicate on the "expires_in" field. It's identical to ExpiresInEQ.
func ExpiresIn(v int) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldEQ(FieldExpiresIn, v))
}

// ExpiresAt applies equality check predicate on the "expires_at" field. It's identical to ExpiresAtEQ.
func ExpiresAt(v time.Time) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldEQ(FieldExpiresAt, v))
}

// RefreshTokenExpiresAt applies equality check predicate on the "refresh_token_expires_at" field. It's identical to RefreshTokenExpiresAtEQ.
func RefreshTokenExpiresAt(v time.Time) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldEQ(FieldRefreshTokenExpiresAt, v))
}

// Revoked applies equality check predicate on the "revoked" field. It's identical to RevokedEQ.
func Revoked(v bool) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldEQ(FieldRevoked, v))
}

// RevokedAt applies equality check predicate on the "revoked_at" field. It's identical to RevokedAtEQ.
func RevokedAt(v time.Time) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldEQ(FieldRevokedAt, v))
}

// IPAddress applies equality check predicate on the "ip_address" field. It's identical to IPAddressEQ.
func IPAddress(v string) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldEQ(FieldIPAddress, v))
}

// UserAgent applies equality check predicate on the "user_agent" field. It's identical to UserAgentEQ.
func UserAgent(v string) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldEQ(FieldUserAgent, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldNotNull(FieldDeletedAt))
}

// AccessTokenEQ applies the EQ predicate on the "access_token" field.
func AccessTokenEQ(v string) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldEQ(FieldAccessToken, v))
}

// AccessTokenNEQ applies the NEQ predicate on the "access_token" field.
func AccessTokenNEQ(v string) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldNEQ(FieldAccessToken, v))
}

// AccessTokenIn applies the In predicate on the "access_token" field.
func AccessTokenIn(vs ...string) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldIn(FieldAccessToken, vs...))
}

// AccessTokenNotIn applies the NotIn predicate on the "access_token" field.
func AccessTokenNotIn(vs ...string) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldNotIn(FieldAccessToken, vs...))
}

// AccessTokenGT applies the GT predicate on the "access_token" field.
func AccessTokenGT(v string) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldGT(FieldAccessToken, v))
}

// AccessTokenGTE applies the GTE predicate on the "access_token" field.
func AccessTokenGTE(v string) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldGTE(FieldAccessToken, v))
}

// AccessTokenLT applies the LT predicate on the "access_token" field.
func AccessTokenLT(v string) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldLT(FieldAccessToken, v))
}

// AccessTokenLTE applies the LTE predicate on the "access_token" field.
func AccessTokenLTE(v string) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldLTE(FieldAccessToken, v))
}

// AccessTokenContains applies the Contains predicate on the "access_token" field.
func AccessTokenContains(v string) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldContains(FieldAccessToken, v))
}

// AccessTokenHasPrefix applies the HasPrefix predicate on the "access_token" field.
func AccessTokenHasPrefix(v string) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldHasPrefix(FieldAccessToken, v))
}

// AccessTokenHasSuffix applies the HasSuffix predicate on the "access_token" field.
func AccessTokenHasSuffix(v string) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldHasSuffix(FieldAccessToken, v))
}

// AccessTokenEqualFold applies the EqualFold predicate on the "access_token" field.
func AccessTokenEqualFold(v string) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldEqualFold(FieldAccessToken, v))
}

// AccessTokenContainsFold applies the ContainsFold predicate on the "access_token" field.
func AccessTokenContainsFold(v string) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldContainsFold(FieldAccessToken, v))
}

// RefreshTokenEQ applies the EQ predicate on the "refresh_token" field.
func RefreshTokenEQ(v string) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldEQ(FieldRefreshToken, v))
}

// RefreshTokenNEQ applies the NEQ predicate on the "refresh_token" field.
func RefreshTokenNEQ(v string) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldNEQ(FieldRefreshToken, v))
}

// RefreshTokenIn applies the In predicate on the "refresh_token" field.
func RefreshTokenIn(vs ...string) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldIn(FieldRefreshToken, vs...))
}

// RefreshTokenNotIn applies the NotIn predicate on the "refresh_token" field.
func RefreshTokenNotIn(vs ...string) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldNotIn(FieldRefreshToken, vs...))
}

// RefreshTokenGT applies the GT predicate on the "refresh_token" field.
func RefreshTokenGT(v string) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldGT(FieldRefreshToken, v))
}

// RefreshTokenGTE applies the GTE predicate on the "refresh_token" field.
func RefreshTokenGTE(v string) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldGTE(FieldRefreshToken, v))
}

// RefreshTokenLT applies the LT predicate on the "refresh_token" field.
func RefreshTokenLT(v string) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldLT(FieldRefreshToken, v))
}

// RefreshTokenLTE applies the LTE predicate on the "refresh_token" field.
func RefreshTokenLTE(v string) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldLTE(FieldRefreshToken, v))
}

// RefreshTokenContains applies the Contains predicate on the "refresh_token" field.
func RefreshTokenContains(v string) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldContains(FieldRefreshToken, v))
}

// RefreshTokenHasPrefix applies the HasPrefix predicate on the "refresh_token" field.
func RefreshTokenHasPrefix(v string) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldHasPrefix(FieldRefreshToken, v))
}

// RefreshTokenHasSuffix applies the HasSuffix predicate on the "refresh_token" field.
func RefreshTokenHasSuffix(v string) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldHasSuffix(FieldRefreshToken, v))
}

// RefreshTokenIsNil applies the IsNil predicate on the "refresh_token" field.
func RefreshTokenIsNil() predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldIsNull(FieldRefreshToken))
}

// RefreshTokenNotNil applies the NotNil predicate on the "refresh_token" field.
func RefreshTokenNotNil() predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldNotNull(FieldRefreshToken))
}

// RefreshTokenEqualFold applies the EqualFold predicate on the "refresh_token" field.
func RefreshTokenEqualFold(v string) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldEqualFold(FieldRefreshToken, v))
}

// RefreshTokenContainsFold applies the ContainsFold predicate on the "refresh_token" field.
func RefreshTokenContainsFold(v string) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldContainsFold(FieldRefreshToken, v))
}

// TokenTypeEQ applies the EQ predicate on the "token_type" field.
func TokenTypeEQ(v string) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldEQ(FieldTokenType, v))
}

// TokenTypeNEQ applies the NEQ predicate on the "token_type" field.
func TokenTypeNEQ(v string) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldNEQ(FieldTokenType, v))
}

// TokenTypeIn applies the In predicate on the "token_type" field.
func TokenTypeIn(vs ...string) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldIn(FieldTokenType, vs...))
}

// TokenTypeNotIn applies the NotIn predicate on the "token_type" field.
func TokenTypeNotIn(vs ...string) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldNotIn(FieldTokenType, vs...))
}

// TokenTypeGT applies the GT predicate on the "token_type" field.
func TokenTypeGT(v string) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldGT(FieldTokenType, v))
}

// TokenTypeGTE applies the GTE predicate on the "token_type" field.
func TokenTypeGTE(v string) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldGTE(FieldTokenType, v))
}

// TokenTypeLT applies the LT predicate on the "token_type" field.
func TokenTypeLT(v string) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldLT(FieldTokenType, v))
}

// TokenTypeLTE applies the LTE predicate on the "token_type" field.
func TokenTypeLTE(v string) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldLTE(FieldTokenType, v))
}

// TokenTypeContains applies the Contains predicate on the "token_type" field.
func TokenTypeContains(v string) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldContains(FieldTokenType, v))
}

// TokenTypeHasPrefix applies the HasPrefix predicate on the "token_type" field.
func TokenTypeHasPrefix(v string) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldHasPrefix(FieldTokenType, v))
}

// TokenTypeHasSuffix applies the HasSuffix predicate on the "token_type" field.
func TokenTypeHasSuffix(v string) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldHasSuffix(FieldTokenType, v))
}

// TokenTypeEqualFold applies the EqualFold predicate on the "token_type" field.
func TokenTypeEqualFold(v string) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldEqualFold(FieldTokenType, v))
}

// TokenTypeContainsFold applies the ContainsFold predicate on the "token_type" field.
func TokenTypeContainsFold(v string) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldContainsFold(FieldTokenType, v))
}

// ClientIDEQ applies the EQ predicate on the "client_id" field.
func ClientIDEQ(v xid.ID) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldEQ(FieldClientID, v))
}

// ClientIDNEQ applies the NEQ predicate on the "client_id" field.
func ClientIDNEQ(v xid.ID) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldNEQ(FieldClientID, v))
}

// ClientIDIn applies the In predicate on the "client_id" field.
func ClientIDIn(vs ...xid.ID) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldIn(FieldClientID, vs...))
}

// ClientIDNotIn applies the NotIn predicate on the "client_id" field.
func ClientIDNotIn(vs ...xid.ID) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldNotIn(FieldClientID, vs...))
}

// ClientIDGT applies the GT predicate on the "client_id" field.
func ClientIDGT(v xid.ID) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldGT(FieldClientID, v))
}

// ClientIDGTE applies the GTE predicate on the "client_id" field.
func ClientIDGTE(v xid.ID) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldGTE(FieldClientID, v))
}

// ClientIDLT applies the LT predicate on the "client_id" field.
func ClientIDLT(v xid.ID) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldLT(FieldClientID, v))
}

// ClientIDLTE applies the LTE predicate on the "client_id" field.
func ClientIDLTE(v xid.ID) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldLTE(FieldClientID, v))
}

// ClientIDContains applies the Contains predicate on the "client_id" field.
func ClientIDContains(v xid.ID) predicate.OAuthToken {
	vc := v.String()
	return predicate.OAuthToken(sql.FieldContains(FieldClientID, vc))
}

// ClientIDHasPrefix applies the HasPrefix predicate on the "client_id" field.
func ClientIDHasPrefix(v xid.ID) predicate.OAuthToken {
	vc := v.String()
	return predicate.OAuthToken(sql.FieldHasPrefix(FieldClientID, vc))
}

// ClientIDHasSuffix applies the HasSuffix predicate on the "client_id" field.
func ClientIDHasSuffix(v xid.ID) predicate.OAuthToken {
	vc := v.String()
	return predicate.OAuthToken(sql.FieldHasSuffix(FieldClientID, vc))
}

// ClientIDEqualFold applies the EqualFold predicate on the "client_id" field.
func ClientIDEqualFold(v xid.ID) predicate.OAuthToken {
	vc := v.String()
	return predicate.OAuthToken(sql.FieldEqualFold(FieldClientID, vc))
}

// ClientIDContainsFold applies the ContainsFold predicate on the "client_id" field.
func ClientIDContainsFold(v xid.ID) predicate.OAuthToken {
	vc := v.String()
	return predicate.OAuthToken(sql.FieldContainsFold(FieldClientID, vc))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v xid.ID) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v xid.ID) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...xid.ID) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...xid.ID) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v xid.ID) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v xid.ID) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v xid.ID) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v xid.ID) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldLTE(FieldUserID, v))
}

// UserIDContains applies the Contains predicate on the "user_id" field.
func UserIDContains(v xid.ID) predicate.OAuthToken {
	vc := v.String()
	return predicate.OAuthToken(sql.FieldContains(FieldUserID, vc))
}

// UserIDHasPrefix applies the HasPrefix predicate on the "user_id" field.
func UserIDHasPrefix(v xid.ID) predicate.OAuthToken {
	vc := v.String()
	return predicate.OAuthToken(sql.FieldHasPrefix(FieldUserID, vc))
}

// UserIDHasSuffix applies the HasSuffix predicate on the "user_id" field.
func UserIDHasSuffix(v xid.ID) predicate.OAuthToken {
	vc := v.String()
	return predicate.OAuthToken(sql.FieldHasSuffix(FieldUserID, vc))
}

// UserIDEqualFold applies the EqualFold predicate on the "user_id" field.
func UserIDEqualFold(v xid.ID) predicate.OAuthToken {
	vc := v.String()
	return predicate.OAuthToken(sql.FieldEqualFold(FieldUserID, vc))
}

// UserIDContainsFold applies the ContainsFold predicate on the "user_id" field.
func UserIDContainsFold(v xid.ID) predicate.OAuthToken {
	vc := v.String()
	return predicate.OAuthToken(sql.FieldContainsFold(FieldUserID, vc))
}

// OrganizationIDEQ applies the EQ predicate on the "organization_id" field.
func OrganizationIDEQ(v xid.ID) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldEQ(FieldOrganizationID, v))
}

// OrganizationIDNEQ applies the NEQ predicate on the "organization_id" field.
func OrganizationIDNEQ(v xid.ID) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldNEQ(FieldOrganizationID, v))
}

// OrganizationIDIn applies the In predicate on the "organization_id" field.
func OrganizationIDIn(vs ...xid.ID) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldIn(FieldOrganizationID, vs...))
}

// OrganizationIDNotIn applies the NotIn predicate on the "organization_id" field.
func OrganizationIDNotIn(vs ...xid.ID) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldNotIn(FieldOrganizationID, vs...))
}

// OrganizationIDGT applies the GT predicate on the "organization_id" field.
func OrganizationIDGT(v xid.ID) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldGT(FieldOrganizationID, v))
}

// OrganizationIDGTE applies the GTE predicate on the "organization_id" field.
func OrganizationIDGTE(v xid.ID) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldGTE(FieldOrganizationID, v))
}

// OrganizationIDLT applies the LT predicate on the "organization_id" field.
func OrganizationIDLT(v xid.ID) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldLT(FieldOrganizationID, v))
}

// OrganizationIDLTE applies the LTE predicate on the "organization_id" field.
func OrganizationIDLTE(v xid.ID) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldLTE(FieldOrganizationID, v))
}

// OrganizationIDContains applies the Contains predicate on the "organization_id" field.
func OrganizationIDContains(v xid.ID) predicate.OAuthToken {
	vc := v.String()
	return predicate.OAuthToken(sql.FieldContains(FieldOrganizationID, vc))
}

// OrganizationIDHasPrefix applies the HasPrefix predicate on the "organization_id" field.
func OrganizationIDHasPrefix(v xid.ID) predicate.OAuthToken {
	vc := v.String()
	return predicate.OAuthToken(sql.FieldHasPrefix(FieldOrganizationID, vc))
}

// OrganizationIDHasSuffix applies the HasSuffix predicate on the "organization_id" field.
func OrganizationIDHasSuffix(v xid.ID) predicate.OAuthToken {
	vc := v.String()
	return predicate.OAuthToken(sql.FieldHasSuffix(FieldOrganizationID, vc))
}

// OrganizationIDIsNil applies the IsNil predicate on the "organization_id" field.
func OrganizationIDIsNil() predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldIsNull(FieldOrganizationID))
}

// OrganizationIDNotNil applies the NotNil predicate on the "organization_id" field.
func OrganizationIDNotNil() predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldNotNull(FieldOrganizationID))
}

// OrganizationIDEqualFold applies the EqualFold predicate on the "organization_id" field.
func OrganizationIDEqualFold(v xid.ID) predicate.OAuthToken {
	vc := v.String()
	return predicate.OAuthToken(sql.FieldEqualFold(FieldOrganizationID, vc))
}

// OrganizationIDContainsFold applies the ContainsFold predicate on the "organization_id" field.
func OrganizationIDContainsFold(v xid.ID) predicate.OAuthToken {
	vc := v.String()
	return predicate.OAuthToken(sql.FieldContainsFold(FieldOrganizationID, vc))
}

// ScopeNamesIsNil applies the IsNil predicate on the "scope_names" field.
func ScopeNamesIsNil() predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldIsNull(FieldScopeNames))
}

// ScopeNamesNotNil applies the NotNil predicate on the "scope_names" field.
func ScopeNamesNotNil() predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldNotNull(FieldScopeNames))
}

// ExpiresInEQ applies the EQ predicate on the "expires_in" field.
func ExpiresInEQ(v int) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldEQ(FieldExpiresIn, v))
}

// ExpiresInNEQ applies the NEQ predicate on the "expires_in" field.
func ExpiresInNEQ(v int) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldNEQ(FieldExpiresIn, v))
}

// ExpiresInIn applies the In predicate on the "expires_in" field.
func ExpiresInIn(vs ...int) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldIn(FieldExpiresIn, vs...))
}

// ExpiresInNotIn applies the NotIn predicate on the "expires_in" field.
func ExpiresInNotIn(vs ...int) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldNotIn(FieldExpiresIn, vs...))
}

// ExpiresInGT applies the GT predicate on the "expires_in" field.
func ExpiresInGT(v int) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldGT(FieldExpiresIn, v))
}

// ExpiresInGTE applies the GTE predicate on the "expires_in" field.
func ExpiresInGTE(v int) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldGTE(FieldExpiresIn, v))
}

// ExpiresInLT applies the LT predicate on the "expires_in" field.
func ExpiresInLT(v int) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldLT(FieldExpiresIn, v))
}

// ExpiresInLTE applies the LTE predicate on the "expires_in" field.
func ExpiresInLTE(v int) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldLTE(FieldExpiresIn, v))
}

// ExpiresAtEQ applies the EQ predicate on the "expires_at" field.
func ExpiresAtEQ(v time.Time) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldEQ(FieldExpiresAt, v))
}

// ExpiresAtNEQ applies the NEQ predicate on the "expires_at" field.
func ExpiresAtNEQ(v time.Time) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldNEQ(FieldExpiresAt, v))
}

// ExpiresAtIn applies the In predicate on the "expires_at" field.
func ExpiresAtIn(vs ...time.Time) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldIn(FieldExpiresAt, vs...))
}

// ExpiresAtNotIn applies the NotIn predicate on the "expires_at" field.
func ExpiresAtNotIn(vs ...time.Time) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldNotIn(FieldExpiresAt, vs...))
}

// ExpiresAtGT applies the GT predicate on the "expires_at" field.
func ExpiresAtGT(v time.Time) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldGT(FieldExpiresAt, v))
}

// ExpiresAtGTE applies the GTE predicate on the "expires_at" field.
func ExpiresAtGTE(v time.Time) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldGTE(FieldExpiresAt, v))
}

// ExpiresAtLT applies the LT predicate on the "expires_at" field.
func ExpiresAtLT(v time.Time) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldLT(FieldExpiresAt, v))
}

// ExpiresAtLTE applies the LTE predicate on the "expires_at" field.
func ExpiresAtLTE(v time.Time) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldLTE(FieldExpiresAt, v))
}

// RefreshTokenExpiresAtEQ applies the EQ predicate on the "refresh_token_expires_at" field.
func RefreshTokenExpiresAtEQ(v time.Time) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldEQ(FieldRefreshTokenExpiresAt, v))
}

// RefreshTokenExpiresAtNEQ applies the NEQ predicate on the "refresh_token_expires_at" field.
func RefreshTokenExpiresAtNEQ(v time.Time) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldNEQ(FieldRefreshTokenExpiresAt, v))
}

// RefreshTokenExpiresAtIn applies the In predicate on the "refresh_token_expires_at" field.
func RefreshTokenExpiresAtIn(vs ...time.Time) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldIn(FieldRefreshTokenExpiresAt, vs...))
}

// RefreshTokenExpiresAtNotIn applies the NotIn predicate on the "refresh_token_expires_at" field.
func RefreshTokenExpiresAtNotIn(vs ...time.Time) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldNotIn(FieldRefreshTokenExpiresAt, vs...))
}

// RefreshTokenExpiresAtGT applies the GT predicate on the "refresh_token_expires_at" field.
func RefreshTokenExpiresAtGT(v time.Time) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldGT(FieldRefreshTokenExpiresAt, v))
}

// RefreshTokenExpiresAtGTE applies the GTE predicate on the "refresh_token_expires_at" field.
func RefreshTokenExpiresAtGTE(v time.Time) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldGTE(FieldRefreshTokenExpiresAt, v))
}

// RefreshTokenExpiresAtLT applies the LT predicate on the "refresh_token_expires_at" field.
func RefreshTokenExpiresAtLT(v time.Time) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldLT(FieldRefreshTokenExpiresAt, v))
}

// RefreshTokenExpiresAtLTE applies the LTE predicate on the "refresh_token_expires_at" field.
func RefreshTokenExpiresAtLTE(v time.Time) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldLTE(FieldRefreshTokenExpiresAt, v))
}

// RefreshTokenExpiresAtIsNil applies the IsNil predicate on the "refresh_token_expires_at" field.
func RefreshTokenExpiresAtIsNil() predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldIsNull(FieldRefreshTokenExpiresAt))
}

// RefreshTokenExpiresAtNotNil applies the NotNil predicate on the "refresh_token_expires_at" field.
func RefreshTokenExpiresAtNotNil() predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldNotNull(FieldRefreshTokenExpiresAt))
}

// RevokedEQ applies the EQ predicate on the "revoked" field.
func RevokedEQ(v bool) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldEQ(FieldRevoked, v))
}

// RevokedNEQ applies the NEQ predicate on the "revoked" field.
func RevokedNEQ(v bool) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldNEQ(FieldRevoked, v))
}

// RevokedAtEQ applies the EQ predicate on the "revoked_at" field.
func RevokedAtEQ(v time.Time) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldEQ(FieldRevokedAt, v))
}

// RevokedAtNEQ applies the NEQ predicate on the "revoked_at" field.
func RevokedAtNEQ(v time.Time) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldNEQ(FieldRevokedAt, v))
}

// RevokedAtIn applies the In predicate on the "revoked_at" field.
func RevokedAtIn(vs ...time.Time) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldIn(FieldRevokedAt, vs...))
}

// RevokedAtNotIn applies the NotIn predicate on the "revoked_at" field.
func RevokedAtNotIn(vs ...time.Time) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldNotIn(FieldRevokedAt, vs...))
}

// RevokedAtGT applies the GT predicate on the "revoked_at" field.
func RevokedAtGT(v time.Time) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldGT(FieldRevokedAt, v))
}

// RevokedAtGTE applies the GTE predicate on the "revoked_at" field.
func RevokedAtGTE(v time.Time) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldGTE(FieldRevokedAt, v))
}

// RevokedAtLT applies the LT predicate on the "revoked_at" field.
func RevokedAtLT(v time.Time) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldLT(FieldRevokedAt, v))
}

// RevokedAtLTE applies the LTE predicate on the "revoked_at" field.
func RevokedAtLTE(v time.Time) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldLTE(FieldRevokedAt, v))
}

// RevokedAtIsNil applies the IsNil predicate on the "revoked_at" field.
func RevokedAtIsNil() predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldIsNull(FieldRevokedAt))
}

// RevokedAtNotNil applies the NotNil predicate on the "revoked_at" field.
func RevokedAtNotNil() predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldNotNull(FieldRevokedAt))
}

// IPAddressEQ applies the EQ predicate on the "ip_address" field.
func IPAddressEQ(v string) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldEQ(FieldIPAddress, v))
}

// IPAddressNEQ applies the NEQ predicate on the "ip_address" field.
func IPAddressNEQ(v string) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldNEQ(FieldIPAddress, v))
}

// IPAddressIn applies the In predicate on the "ip_address" field.
func IPAddressIn(vs ...string) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldIn(FieldIPAddress, vs...))
}

// IPAddressNotIn applies the NotIn predicate on the "ip_address" field.
func IPAddressNotIn(vs ...string) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldNotIn(FieldIPAddress, vs...))
}

// IPAddressGT applies the GT predicate on the "ip_address" field.
func IPAddressGT(v string) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldGT(FieldIPAddress, v))
}

// IPAddressGTE applies the GTE predicate on the "ip_address" field.
func IPAddressGTE(v string) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldGTE(FieldIPAddress, v))
}

// IPAddressLT applies the LT predicate on the "ip_address" field.
func IPAddressLT(v string) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldLT(FieldIPAddress, v))
}

// IPAddressLTE applies the LTE predicate on the "ip_address" field.
func IPAddressLTE(v string) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldLTE(FieldIPAddress, v))
}

// IPAddressContains applies the Contains predicate on the "ip_address" field.
func IPAddressContains(v string) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldContains(FieldIPAddress, v))
}

// IPAddressHasPrefix applies the HasPrefix predicate on the "ip_address" field.
func IPAddressHasPrefix(v string) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldHasPrefix(FieldIPAddress, v))
}

// IPAddressHasSuffix applies the HasSuffix predicate on the "ip_address" field.
func IPAddressHasSuffix(v string) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldHasSuffix(FieldIPAddress, v))
}

// IPAddressIsNil applies the IsNil predicate on the "ip_address" field.
func IPAddressIsNil() predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldIsNull(FieldIPAddress))
}

// IPAddressNotNil applies the NotNil predicate on the "ip_address" field.
func IPAddressNotNil() predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldNotNull(FieldIPAddress))
}

// IPAddressEqualFold applies the EqualFold predicate on the "ip_address" field.
func IPAddressEqualFold(v string) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldEqualFold(FieldIPAddress, v))
}

// IPAddressContainsFold applies the ContainsFold predicate on the "ip_address" field.
func IPAddressContainsFold(v string) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldContainsFold(FieldIPAddress, v))
}

// UserAgentEQ applies the EQ predicate on the "user_agent" field.
func UserAgentEQ(v string) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldEQ(FieldUserAgent, v))
}

// UserAgentNEQ applies the NEQ predicate on the "user_agent" field.
func UserAgentNEQ(v string) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldNEQ(FieldUserAgent, v))
}

// UserAgentIn applies the In predicate on the "user_agent" field.
func UserAgentIn(vs ...string) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldIn(FieldUserAgent, vs...))
}

// UserAgentNotIn applies the NotIn predicate on the "user_agent" field.
func UserAgentNotIn(vs ...string) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldNotIn(FieldUserAgent, vs...))
}

// UserAgentGT applies the GT predicate on the "user_agent" field.
func UserAgentGT(v string) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldGT(FieldUserAgent, v))
}

// UserAgentGTE applies the GTE predicate on the "user_agent" field.
func UserAgentGTE(v string) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldGTE(FieldUserAgent, v))
}

// UserAgentLT applies the LT predicate on the "user_agent" field.
func UserAgentLT(v string) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldLT(FieldUserAgent, v))
}

// UserAgentLTE applies the LTE predicate on the "user_agent" field.
func UserAgentLTE(v string) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldLTE(FieldUserAgent, v))
}

// UserAgentContains applies the Contains predicate on the "user_agent" field.
func UserAgentContains(v string) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldContains(FieldUserAgent, v))
}

// UserAgentHasPrefix applies the HasPrefix predicate on the "user_agent" field.
func UserAgentHasPrefix(v string) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldHasPrefix(FieldUserAgent, v))
}

// UserAgentHasSuffix applies the HasSuffix predicate on the "user_agent" field.
func UserAgentHasSuffix(v string) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldHasSuffix(FieldUserAgent, v))
}

// UserAgentIsNil applies the IsNil predicate on the "user_agent" field.
func UserAgentIsNil() predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldIsNull(FieldUserAgent))
}

// UserAgentNotNil applies the NotNil predicate on the "user_agent" field.
func UserAgentNotNil() predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldNotNull(FieldUserAgent))
}

// UserAgentEqualFold applies the EqualFold predicate on the "user_agent" field.
func UserAgentEqualFold(v string) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldEqualFold(FieldUserAgent, v))
}

// UserAgentContainsFold applies the ContainsFold predicate on the "user_agent" field.
func UserAgentContainsFold(v string) predicate.OAuthToken {
	return predicate.OAuthToken(sql.FieldContainsFold(FieldUserAgent, v))
}

// HasClient applies the HasEdge predicate on the "client" edge.
func HasClient() predicate.OAuthToken {
	return predicate.OAuthToken(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ClientTable, ClientColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasClientWith applies the HasEdge predicate on the "client" edge with a given conditions (other predicates).
func HasClientWith(preds ...predicate.OAuthClient) predicate.OAuthToken {
	return predicate.OAuthToken(func(s *sql.Selector) {
		step := newClientStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.OAuthToken {
	return predicate.OAuthToken(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.OAuthToken {
	return predicate.OAuthToken(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasScopes applies the HasEdge predicate on the "scopes" edge.
func HasScopes() predicate.OAuthToken {
	return predicate.OAuthToken(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, ScopesTable, ScopesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasScopesWith applies the HasEdge predicate on the "scopes" edge with a given conditions (other predicates).
func HasScopesWith(preds ...predicate.OAuthScope) predicate.OAuthToken {
	return predicate.OAuthToken(func(s *sql.Selector) {
		step := newScopesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.OAuthToken) predicate.OAuthToken {
	return predicate.OAuthToken(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.OAuthToken) predicate.OAuthToken {
	return predicate.OAuthToken(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.OAuthToken) predicate.OAuthToken {
	return predicate.OAuthToken(sql.NotPredicates(p))
}
