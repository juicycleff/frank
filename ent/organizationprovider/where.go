// Copyright 2023-present XRaph LLC. All rights reserved.
// This source code is licensed under the XRaph LLC license found
// in the LICENSE file in the root directory of this source tree.
// Code generated by ent, DO NOT EDIT.

package organizationprovider

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/juicycleff/frank/ent/predicate"
	"github.com/rs/xid"
)

// ID filters vertices based on their ID field.
func ID(id xid.ID) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id xid.ID) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id xid.ID) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...xid.ID) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...xid.ID) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id xid.ID) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id xid.ID) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id xid.ID) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id xid.ID) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldEQ(FieldDeletedAt, v))
}

// OrganizationID applies equality check predicate on the "organization_id" field. It's identical to OrganizationIDEQ.
func OrganizationID(v xid.ID) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldEQ(FieldOrganizationID, v))
}

// ProviderID applies equality check predicate on the "provider_id" field. It's identical to ProviderIDEQ.
func ProviderID(v xid.ID) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldEQ(FieldProviderID, v))
}

// TemplateID applies equality check predicate on the "template_id" field. It's identical to TemplateIDEQ.
func TemplateID(v xid.ID) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldEQ(FieldTemplateID, v))
}

// TemplateKey applies equality check predicate on the "template_key" field. It's identical to TemplateKeyEQ.
func TemplateKey(v string) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldEQ(FieldTemplateKey, v))
}

// EnabledAt applies equality check predicate on the "enabled_at" field. It's identical to EnabledAtEQ.
func EnabledAt(v time.Time) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldEQ(FieldEnabledAt, v))
}

// LastUsed applies equality check predicate on the "last_used" field. It's identical to LastUsedEQ.
func LastUsed(v time.Time) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldEQ(FieldLastUsed, v))
}

// UsageCount applies equality check predicate on the "usage_count" field. It's identical to UsageCountEQ.
func UsageCount(v int) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldEQ(FieldUsageCount, v))
}

// Enabled applies equality check predicate on the "enabled" field. It's identical to EnabledEQ.
func Enabled(v bool) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldEQ(FieldEnabled, v))
}

// SuccessRate applies equality check predicate on the "success_rate" field. It's identical to SuccessRateEQ.
func SuccessRate(v float64) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldEQ(FieldSuccessRate, v))
}

// TotalLogins applies equality check predicate on the "total_logins" field. It's identical to TotalLoginsEQ.
func TotalLogins(v int) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldEQ(FieldTotalLogins, v))
}

// SuccessfulLogins applies equality check predicate on the "successful_logins" field. It's identical to SuccessfulLoginsEQ.
func SuccessfulLogins(v int) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldEQ(FieldSuccessfulLogins, v))
}

// FailedLogins applies equality check predicate on the "failed_logins" field. It's identical to FailedLoginsEQ.
func FailedLogins(v int) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldEQ(FieldFailedLogins, v))
}

// LastSuccess applies equality check predicate on the "last_success" field. It's identical to LastSuccessEQ.
func LastSuccess(v time.Time) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldEQ(FieldLastSuccess, v))
}

// LastFailure applies equality check predicate on the "last_failure" field. It's identical to LastFailureEQ.
func LastFailure(v time.Time) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldEQ(FieldLastFailure, v))
}

// ConfigErrors applies equality check predicate on the "config_errors" field. It's identical to ConfigErrorsEQ.
func ConfigErrors(v int) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldEQ(FieldConfigErrors, v))
}

// AverageResponseTime applies equality check predicate on the "average_response_time" field. It's identical to AverageResponseTimeEQ.
func AverageResponseTime(v float64) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldEQ(FieldAverageResponseTime, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldNotNull(FieldDeletedAt))
}

// OrganizationIDEQ applies the EQ predicate on the "organization_id" field.
func OrganizationIDEQ(v xid.ID) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldEQ(FieldOrganizationID, v))
}

// OrganizationIDNEQ applies the NEQ predicate on the "organization_id" field.
func OrganizationIDNEQ(v xid.ID) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldNEQ(FieldOrganizationID, v))
}

// OrganizationIDIn applies the In predicate on the "organization_id" field.
func OrganizationIDIn(vs ...xid.ID) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldIn(FieldOrganizationID, vs...))
}

// OrganizationIDNotIn applies the NotIn predicate on the "organization_id" field.
func OrganizationIDNotIn(vs ...xid.ID) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldNotIn(FieldOrganizationID, vs...))
}

// OrganizationIDGT applies the GT predicate on the "organization_id" field.
func OrganizationIDGT(v xid.ID) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldGT(FieldOrganizationID, v))
}

// OrganizationIDGTE applies the GTE predicate on the "organization_id" field.
func OrganizationIDGTE(v xid.ID) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldGTE(FieldOrganizationID, v))
}

// OrganizationIDLT applies the LT predicate on the "organization_id" field.
func OrganizationIDLT(v xid.ID) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldLT(FieldOrganizationID, v))
}

// OrganizationIDLTE applies the LTE predicate on the "organization_id" field.
func OrganizationIDLTE(v xid.ID) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldLTE(FieldOrganizationID, v))
}

// OrganizationIDContains applies the Contains predicate on the "organization_id" field.
func OrganizationIDContains(v xid.ID) predicate.OrganizationProvider {
	vc := v.String()
	return predicate.OrganizationProvider(sql.FieldContains(FieldOrganizationID, vc))
}

// OrganizationIDHasPrefix applies the HasPrefix predicate on the "organization_id" field.
func OrganizationIDHasPrefix(v xid.ID) predicate.OrganizationProvider {
	vc := v.String()
	return predicate.OrganizationProvider(sql.FieldHasPrefix(FieldOrganizationID, vc))
}

// OrganizationIDHasSuffix applies the HasSuffix predicate on the "organization_id" field.
func OrganizationIDHasSuffix(v xid.ID) predicate.OrganizationProvider {
	vc := v.String()
	return predicate.OrganizationProvider(sql.FieldHasSuffix(FieldOrganizationID, vc))
}

// OrganizationIDEqualFold applies the EqualFold predicate on the "organization_id" field.
func OrganizationIDEqualFold(v xid.ID) predicate.OrganizationProvider {
	vc := v.String()
	return predicate.OrganizationProvider(sql.FieldEqualFold(FieldOrganizationID, vc))
}

// OrganizationIDContainsFold applies the ContainsFold predicate on the "organization_id" field.
func OrganizationIDContainsFold(v xid.ID) predicate.OrganizationProvider {
	vc := v.String()
	return predicate.OrganizationProvider(sql.FieldContainsFold(FieldOrganizationID, vc))
}

// ProviderIDEQ applies the EQ predicate on the "provider_id" field.
func ProviderIDEQ(v xid.ID) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldEQ(FieldProviderID, v))
}

// ProviderIDNEQ applies the NEQ predicate on the "provider_id" field.
func ProviderIDNEQ(v xid.ID) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldNEQ(FieldProviderID, v))
}

// ProviderIDIn applies the In predicate on the "provider_id" field.
func ProviderIDIn(vs ...xid.ID) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldIn(FieldProviderID, vs...))
}

// ProviderIDNotIn applies the NotIn predicate on the "provider_id" field.
func ProviderIDNotIn(vs ...xid.ID) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldNotIn(FieldProviderID, vs...))
}

// ProviderIDGT applies the GT predicate on the "provider_id" field.
func ProviderIDGT(v xid.ID) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldGT(FieldProviderID, v))
}

// ProviderIDGTE applies the GTE predicate on the "provider_id" field.
func ProviderIDGTE(v xid.ID) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldGTE(FieldProviderID, v))
}

// ProviderIDLT applies the LT predicate on the "provider_id" field.
func ProviderIDLT(v xid.ID) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldLT(FieldProviderID, v))
}

// ProviderIDLTE applies the LTE predicate on the "provider_id" field.
func ProviderIDLTE(v xid.ID) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldLTE(FieldProviderID, v))
}

// ProviderIDContains applies the Contains predicate on the "provider_id" field.
func ProviderIDContains(v xid.ID) predicate.OrganizationProvider {
	vc := v.String()
	return predicate.OrganizationProvider(sql.FieldContains(FieldProviderID, vc))
}

// ProviderIDHasPrefix applies the HasPrefix predicate on the "provider_id" field.
func ProviderIDHasPrefix(v xid.ID) predicate.OrganizationProvider {
	vc := v.String()
	return predicate.OrganizationProvider(sql.FieldHasPrefix(FieldProviderID, vc))
}

// ProviderIDHasSuffix applies the HasSuffix predicate on the "provider_id" field.
func ProviderIDHasSuffix(v xid.ID) predicate.OrganizationProvider {
	vc := v.String()
	return predicate.OrganizationProvider(sql.FieldHasSuffix(FieldProviderID, vc))
}

// ProviderIDEqualFold applies the EqualFold predicate on the "provider_id" field.
func ProviderIDEqualFold(v xid.ID) predicate.OrganizationProvider {
	vc := v.String()
	return predicate.OrganizationProvider(sql.FieldEqualFold(FieldProviderID, vc))
}

// ProviderIDContainsFold applies the ContainsFold predicate on the "provider_id" field.
func ProviderIDContainsFold(v xid.ID) predicate.OrganizationProvider {
	vc := v.String()
	return predicate.OrganizationProvider(sql.FieldContainsFold(FieldProviderID, vc))
}

// TemplateIDEQ applies the EQ predicate on the "template_id" field.
func TemplateIDEQ(v xid.ID) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldEQ(FieldTemplateID, v))
}

// TemplateIDNEQ applies the NEQ predicate on the "template_id" field.
func TemplateIDNEQ(v xid.ID) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldNEQ(FieldTemplateID, v))
}

// TemplateIDIn applies the In predicate on the "template_id" field.
func TemplateIDIn(vs ...xid.ID) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldIn(FieldTemplateID, vs...))
}

// TemplateIDNotIn applies the NotIn predicate on the "template_id" field.
func TemplateIDNotIn(vs ...xid.ID) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldNotIn(FieldTemplateID, vs...))
}

// TemplateIDGT applies the GT predicate on the "template_id" field.
func TemplateIDGT(v xid.ID) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldGT(FieldTemplateID, v))
}

// TemplateIDGTE applies the GTE predicate on the "template_id" field.
func TemplateIDGTE(v xid.ID) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldGTE(FieldTemplateID, v))
}

// TemplateIDLT applies the LT predicate on the "template_id" field.
func TemplateIDLT(v xid.ID) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldLT(FieldTemplateID, v))
}

// TemplateIDLTE applies the LTE predicate on the "template_id" field.
func TemplateIDLTE(v xid.ID) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldLTE(FieldTemplateID, v))
}

// TemplateIDContains applies the Contains predicate on the "template_id" field.
func TemplateIDContains(v xid.ID) predicate.OrganizationProvider {
	vc := v.String()
	return predicate.OrganizationProvider(sql.FieldContains(FieldTemplateID, vc))
}

// TemplateIDHasPrefix applies the HasPrefix predicate on the "template_id" field.
func TemplateIDHasPrefix(v xid.ID) predicate.OrganizationProvider {
	vc := v.String()
	return predicate.OrganizationProvider(sql.FieldHasPrefix(FieldTemplateID, vc))
}

// TemplateIDHasSuffix applies the HasSuffix predicate on the "template_id" field.
func TemplateIDHasSuffix(v xid.ID) predicate.OrganizationProvider {
	vc := v.String()
	return predicate.OrganizationProvider(sql.FieldHasSuffix(FieldTemplateID, vc))
}

// TemplateIDEqualFold applies the EqualFold predicate on the "template_id" field.
func TemplateIDEqualFold(v xid.ID) predicate.OrganizationProvider {
	vc := v.String()
	return predicate.OrganizationProvider(sql.FieldEqualFold(FieldTemplateID, vc))
}

// TemplateIDContainsFold applies the ContainsFold predicate on the "template_id" field.
func TemplateIDContainsFold(v xid.ID) predicate.OrganizationProvider {
	vc := v.String()
	return predicate.OrganizationProvider(sql.FieldContainsFold(FieldTemplateID, vc))
}

// TemplateKeyEQ applies the EQ predicate on the "template_key" field.
func TemplateKeyEQ(v string) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldEQ(FieldTemplateKey, v))
}

// TemplateKeyNEQ applies the NEQ predicate on the "template_key" field.
func TemplateKeyNEQ(v string) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldNEQ(FieldTemplateKey, v))
}

// TemplateKeyIn applies the In predicate on the "template_key" field.
func TemplateKeyIn(vs ...string) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldIn(FieldTemplateKey, vs...))
}

// TemplateKeyNotIn applies the NotIn predicate on the "template_key" field.
func TemplateKeyNotIn(vs ...string) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldNotIn(FieldTemplateKey, vs...))
}

// TemplateKeyGT applies the GT predicate on the "template_key" field.
func TemplateKeyGT(v string) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldGT(FieldTemplateKey, v))
}

// TemplateKeyGTE applies the GTE predicate on the "template_key" field.
func TemplateKeyGTE(v string) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldGTE(FieldTemplateKey, v))
}

// TemplateKeyLT applies the LT predicate on the "template_key" field.
func TemplateKeyLT(v string) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldLT(FieldTemplateKey, v))
}

// TemplateKeyLTE applies the LTE predicate on the "template_key" field.
func TemplateKeyLTE(v string) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldLTE(FieldTemplateKey, v))
}

// TemplateKeyContains applies the Contains predicate on the "template_key" field.
func TemplateKeyContains(v string) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldContains(FieldTemplateKey, v))
}

// TemplateKeyHasPrefix applies the HasPrefix predicate on the "template_key" field.
func TemplateKeyHasPrefix(v string) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldHasPrefix(FieldTemplateKey, v))
}

// TemplateKeyHasSuffix applies the HasSuffix predicate on the "template_key" field.
func TemplateKeyHasSuffix(v string) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldHasSuffix(FieldTemplateKey, v))
}

// TemplateKeyEqualFold applies the EqualFold predicate on the "template_key" field.
func TemplateKeyEqualFold(v string) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldEqualFold(FieldTemplateKey, v))
}

// TemplateKeyContainsFold applies the ContainsFold predicate on the "template_key" field.
func TemplateKeyContainsFold(v string) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldContainsFold(FieldTemplateKey, v))
}

// CustomConfigIsNil applies the IsNil predicate on the "custom_config" field.
func CustomConfigIsNil() predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldIsNull(FieldCustomConfig))
}

// CustomConfigNotNil applies the NotNil predicate on the "custom_config" field.
func CustomConfigNotNil() predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldNotNull(FieldCustomConfig))
}

// EnabledAtEQ applies the EQ predicate on the "enabled_at" field.
func EnabledAtEQ(v time.Time) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldEQ(FieldEnabledAt, v))
}

// EnabledAtNEQ applies the NEQ predicate on the "enabled_at" field.
func EnabledAtNEQ(v time.Time) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldNEQ(FieldEnabledAt, v))
}

// EnabledAtIn applies the In predicate on the "enabled_at" field.
func EnabledAtIn(vs ...time.Time) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldIn(FieldEnabledAt, vs...))
}

// EnabledAtNotIn applies the NotIn predicate on the "enabled_at" field.
func EnabledAtNotIn(vs ...time.Time) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldNotIn(FieldEnabledAt, vs...))
}

// EnabledAtGT applies the GT predicate on the "enabled_at" field.
func EnabledAtGT(v time.Time) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldGT(FieldEnabledAt, v))
}

// EnabledAtGTE applies the GTE predicate on the "enabled_at" field.
func EnabledAtGTE(v time.Time) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldGTE(FieldEnabledAt, v))
}

// EnabledAtLT applies the LT predicate on the "enabled_at" field.
func EnabledAtLT(v time.Time) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldLT(FieldEnabledAt, v))
}

// EnabledAtLTE applies the LTE predicate on the "enabled_at" field.
func EnabledAtLTE(v time.Time) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldLTE(FieldEnabledAt, v))
}

// LastUsedEQ applies the EQ predicate on the "last_used" field.
func LastUsedEQ(v time.Time) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldEQ(FieldLastUsed, v))
}

// LastUsedNEQ applies the NEQ predicate on the "last_used" field.
func LastUsedNEQ(v time.Time) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldNEQ(FieldLastUsed, v))
}

// LastUsedIn applies the In predicate on the "last_used" field.
func LastUsedIn(vs ...time.Time) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldIn(FieldLastUsed, vs...))
}

// LastUsedNotIn applies the NotIn predicate on the "last_used" field.
func LastUsedNotIn(vs ...time.Time) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldNotIn(FieldLastUsed, vs...))
}

// LastUsedGT applies the GT predicate on the "last_used" field.
func LastUsedGT(v time.Time) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldGT(FieldLastUsed, v))
}

// LastUsedGTE applies the GTE predicate on the "last_used" field.
func LastUsedGTE(v time.Time) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldGTE(FieldLastUsed, v))
}

// LastUsedLT applies the LT predicate on the "last_used" field.
func LastUsedLT(v time.Time) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldLT(FieldLastUsed, v))
}

// LastUsedLTE applies the LTE predicate on the "last_used" field.
func LastUsedLTE(v time.Time) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldLTE(FieldLastUsed, v))
}

// LastUsedIsNil applies the IsNil predicate on the "last_used" field.
func LastUsedIsNil() predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldIsNull(FieldLastUsed))
}

// LastUsedNotNil applies the NotNil predicate on the "last_used" field.
func LastUsedNotNil() predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldNotNull(FieldLastUsed))
}

// UsageCountEQ applies the EQ predicate on the "usage_count" field.
func UsageCountEQ(v int) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldEQ(FieldUsageCount, v))
}

// UsageCountNEQ applies the NEQ predicate on the "usage_count" field.
func UsageCountNEQ(v int) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldNEQ(FieldUsageCount, v))
}

// UsageCountIn applies the In predicate on the "usage_count" field.
func UsageCountIn(vs ...int) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldIn(FieldUsageCount, vs...))
}

// UsageCountNotIn applies the NotIn predicate on the "usage_count" field.
func UsageCountNotIn(vs ...int) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldNotIn(FieldUsageCount, vs...))
}

// UsageCountGT applies the GT predicate on the "usage_count" field.
func UsageCountGT(v int) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldGT(FieldUsageCount, v))
}

// UsageCountGTE applies the GTE predicate on the "usage_count" field.
func UsageCountGTE(v int) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldGTE(FieldUsageCount, v))
}

// UsageCountLT applies the LT predicate on the "usage_count" field.
func UsageCountLT(v int) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldLT(FieldUsageCount, v))
}

// UsageCountLTE applies the LTE predicate on the "usage_count" field.
func UsageCountLTE(v int) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldLTE(FieldUsageCount, v))
}

// EnabledEQ applies the EQ predicate on the "enabled" field.
func EnabledEQ(v bool) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldEQ(FieldEnabled, v))
}

// EnabledNEQ applies the NEQ predicate on the "enabled" field.
func EnabledNEQ(v bool) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldNEQ(FieldEnabled, v))
}

// SuccessRateEQ applies the EQ predicate on the "success_rate" field.
func SuccessRateEQ(v float64) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldEQ(FieldSuccessRate, v))
}

// SuccessRateNEQ applies the NEQ predicate on the "success_rate" field.
func SuccessRateNEQ(v float64) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldNEQ(FieldSuccessRate, v))
}

// SuccessRateIn applies the In predicate on the "success_rate" field.
func SuccessRateIn(vs ...float64) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldIn(FieldSuccessRate, vs...))
}

// SuccessRateNotIn applies the NotIn predicate on the "success_rate" field.
func SuccessRateNotIn(vs ...float64) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldNotIn(FieldSuccessRate, vs...))
}

// SuccessRateGT applies the GT predicate on the "success_rate" field.
func SuccessRateGT(v float64) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldGT(FieldSuccessRate, v))
}

// SuccessRateGTE applies the GTE predicate on the "success_rate" field.
func SuccessRateGTE(v float64) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldGTE(FieldSuccessRate, v))
}

// SuccessRateLT applies the LT predicate on the "success_rate" field.
func SuccessRateLT(v float64) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldLT(FieldSuccessRate, v))
}

// SuccessRateLTE applies the LTE predicate on the "success_rate" field.
func SuccessRateLTE(v float64) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldLTE(FieldSuccessRate, v))
}

// TotalLoginsEQ applies the EQ predicate on the "total_logins" field.
func TotalLoginsEQ(v int) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldEQ(FieldTotalLogins, v))
}

// TotalLoginsNEQ applies the NEQ predicate on the "total_logins" field.
func TotalLoginsNEQ(v int) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldNEQ(FieldTotalLogins, v))
}

// TotalLoginsIn applies the In predicate on the "total_logins" field.
func TotalLoginsIn(vs ...int) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldIn(FieldTotalLogins, vs...))
}

// TotalLoginsNotIn applies the NotIn predicate on the "total_logins" field.
func TotalLoginsNotIn(vs ...int) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldNotIn(FieldTotalLogins, vs...))
}

// TotalLoginsGT applies the GT predicate on the "total_logins" field.
func TotalLoginsGT(v int) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldGT(FieldTotalLogins, v))
}

// TotalLoginsGTE applies the GTE predicate on the "total_logins" field.
func TotalLoginsGTE(v int) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldGTE(FieldTotalLogins, v))
}

// TotalLoginsLT applies the LT predicate on the "total_logins" field.
func TotalLoginsLT(v int) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldLT(FieldTotalLogins, v))
}

// TotalLoginsLTE applies the LTE predicate on the "total_logins" field.
func TotalLoginsLTE(v int) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldLTE(FieldTotalLogins, v))
}

// SuccessfulLoginsEQ applies the EQ predicate on the "successful_logins" field.
func SuccessfulLoginsEQ(v int) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldEQ(FieldSuccessfulLogins, v))
}

// SuccessfulLoginsNEQ applies the NEQ predicate on the "successful_logins" field.
func SuccessfulLoginsNEQ(v int) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldNEQ(FieldSuccessfulLogins, v))
}

// SuccessfulLoginsIn applies the In predicate on the "successful_logins" field.
func SuccessfulLoginsIn(vs ...int) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldIn(FieldSuccessfulLogins, vs...))
}

// SuccessfulLoginsNotIn applies the NotIn predicate on the "successful_logins" field.
func SuccessfulLoginsNotIn(vs ...int) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldNotIn(FieldSuccessfulLogins, vs...))
}

// SuccessfulLoginsGT applies the GT predicate on the "successful_logins" field.
func SuccessfulLoginsGT(v int) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldGT(FieldSuccessfulLogins, v))
}

// SuccessfulLoginsGTE applies the GTE predicate on the "successful_logins" field.
func SuccessfulLoginsGTE(v int) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldGTE(FieldSuccessfulLogins, v))
}

// SuccessfulLoginsLT applies the LT predicate on the "successful_logins" field.
func SuccessfulLoginsLT(v int) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldLT(FieldSuccessfulLogins, v))
}

// SuccessfulLoginsLTE applies the LTE predicate on the "successful_logins" field.
func SuccessfulLoginsLTE(v int) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldLTE(FieldSuccessfulLogins, v))
}

// FailedLoginsEQ applies the EQ predicate on the "failed_logins" field.
func FailedLoginsEQ(v int) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldEQ(FieldFailedLogins, v))
}

// FailedLoginsNEQ applies the NEQ predicate on the "failed_logins" field.
func FailedLoginsNEQ(v int) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldNEQ(FieldFailedLogins, v))
}

// FailedLoginsIn applies the In predicate on the "failed_logins" field.
func FailedLoginsIn(vs ...int) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldIn(FieldFailedLogins, vs...))
}

// FailedLoginsNotIn applies the NotIn predicate on the "failed_logins" field.
func FailedLoginsNotIn(vs ...int) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldNotIn(FieldFailedLogins, vs...))
}

// FailedLoginsGT applies the GT predicate on the "failed_logins" field.
func FailedLoginsGT(v int) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldGT(FieldFailedLogins, v))
}

// FailedLoginsGTE applies the GTE predicate on the "failed_logins" field.
func FailedLoginsGTE(v int) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldGTE(FieldFailedLogins, v))
}

// FailedLoginsLT applies the LT predicate on the "failed_logins" field.
func FailedLoginsLT(v int) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldLT(FieldFailedLogins, v))
}

// FailedLoginsLTE applies the LTE predicate on the "failed_logins" field.
func FailedLoginsLTE(v int) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldLTE(FieldFailedLogins, v))
}

// LastSuccessEQ applies the EQ predicate on the "last_success" field.
func LastSuccessEQ(v time.Time) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldEQ(FieldLastSuccess, v))
}

// LastSuccessNEQ applies the NEQ predicate on the "last_success" field.
func LastSuccessNEQ(v time.Time) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldNEQ(FieldLastSuccess, v))
}

// LastSuccessIn applies the In predicate on the "last_success" field.
func LastSuccessIn(vs ...time.Time) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldIn(FieldLastSuccess, vs...))
}

// LastSuccessNotIn applies the NotIn predicate on the "last_success" field.
func LastSuccessNotIn(vs ...time.Time) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldNotIn(FieldLastSuccess, vs...))
}

// LastSuccessGT applies the GT predicate on the "last_success" field.
func LastSuccessGT(v time.Time) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldGT(FieldLastSuccess, v))
}

// LastSuccessGTE applies the GTE predicate on the "last_success" field.
func LastSuccessGTE(v time.Time) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldGTE(FieldLastSuccess, v))
}

// LastSuccessLT applies the LT predicate on the "last_success" field.
func LastSuccessLT(v time.Time) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldLT(FieldLastSuccess, v))
}

// LastSuccessLTE applies the LTE predicate on the "last_success" field.
func LastSuccessLTE(v time.Time) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldLTE(FieldLastSuccess, v))
}

// LastSuccessIsNil applies the IsNil predicate on the "last_success" field.
func LastSuccessIsNil() predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldIsNull(FieldLastSuccess))
}

// LastSuccessNotNil applies the NotNil predicate on the "last_success" field.
func LastSuccessNotNil() predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldNotNull(FieldLastSuccess))
}

// LastFailureEQ applies the EQ predicate on the "last_failure" field.
func LastFailureEQ(v time.Time) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldEQ(FieldLastFailure, v))
}

// LastFailureNEQ applies the NEQ predicate on the "last_failure" field.
func LastFailureNEQ(v time.Time) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldNEQ(FieldLastFailure, v))
}

// LastFailureIn applies the In predicate on the "last_failure" field.
func LastFailureIn(vs ...time.Time) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldIn(FieldLastFailure, vs...))
}

// LastFailureNotIn applies the NotIn predicate on the "last_failure" field.
func LastFailureNotIn(vs ...time.Time) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldNotIn(FieldLastFailure, vs...))
}

// LastFailureGT applies the GT predicate on the "last_failure" field.
func LastFailureGT(v time.Time) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldGT(FieldLastFailure, v))
}

// LastFailureGTE applies the GTE predicate on the "last_failure" field.
func LastFailureGTE(v time.Time) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldGTE(FieldLastFailure, v))
}

// LastFailureLT applies the LT predicate on the "last_failure" field.
func LastFailureLT(v time.Time) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldLT(FieldLastFailure, v))
}

// LastFailureLTE applies the LTE predicate on the "last_failure" field.
func LastFailureLTE(v time.Time) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldLTE(FieldLastFailure, v))
}

// LastFailureIsNil applies the IsNil predicate on the "last_failure" field.
func LastFailureIsNil() predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldIsNull(FieldLastFailure))
}

// LastFailureNotNil applies the NotNil predicate on the "last_failure" field.
func LastFailureNotNil() predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldNotNull(FieldLastFailure))
}

// ConfigErrorsEQ applies the EQ predicate on the "config_errors" field.
func ConfigErrorsEQ(v int) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldEQ(FieldConfigErrors, v))
}

// ConfigErrorsNEQ applies the NEQ predicate on the "config_errors" field.
func ConfigErrorsNEQ(v int) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldNEQ(FieldConfigErrors, v))
}

// ConfigErrorsIn applies the In predicate on the "config_errors" field.
func ConfigErrorsIn(vs ...int) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldIn(FieldConfigErrors, vs...))
}

// ConfigErrorsNotIn applies the NotIn predicate on the "config_errors" field.
func ConfigErrorsNotIn(vs ...int) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldNotIn(FieldConfigErrors, vs...))
}

// ConfigErrorsGT applies the GT predicate on the "config_errors" field.
func ConfigErrorsGT(v int) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldGT(FieldConfigErrors, v))
}

// ConfigErrorsGTE applies the GTE predicate on the "config_errors" field.
func ConfigErrorsGTE(v int) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldGTE(FieldConfigErrors, v))
}

// ConfigErrorsLT applies the LT predicate on the "config_errors" field.
func ConfigErrorsLT(v int) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldLT(FieldConfigErrors, v))
}

// ConfigErrorsLTE applies the LTE predicate on the "config_errors" field.
func ConfigErrorsLTE(v int) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldLTE(FieldConfigErrors, v))
}

// AverageResponseTimeEQ applies the EQ predicate on the "average_response_time" field.
func AverageResponseTimeEQ(v float64) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldEQ(FieldAverageResponseTime, v))
}

// AverageResponseTimeNEQ applies the NEQ predicate on the "average_response_time" field.
func AverageResponseTimeNEQ(v float64) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldNEQ(FieldAverageResponseTime, v))
}

// AverageResponseTimeIn applies the In predicate on the "average_response_time" field.
func AverageResponseTimeIn(vs ...float64) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldIn(FieldAverageResponseTime, vs...))
}

// AverageResponseTimeNotIn applies the NotIn predicate on the "average_response_time" field.
func AverageResponseTimeNotIn(vs ...float64) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldNotIn(FieldAverageResponseTime, vs...))
}

// AverageResponseTimeGT applies the GT predicate on the "average_response_time" field.
func AverageResponseTimeGT(v float64) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldGT(FieldAverageResponseTime, v))
}

// AverageResponseTimeGTE applies the GTE predicate on the "average_response_time" field.
func AverageResponseTimeGTE(v float64) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldGTE(FieldAverageResponseTime, v))
}

// AverageResponseTimeLT applies the LT predicate on the "average_response_time" field.
func AverageResponseTimeLT(v float64) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldLT(FieldAverageResponseTime, v))
}

// AverageResponseTimeLTE applies the LTE predicate on the "average_response_time" field.
func AverageResponseTimeLTE(v float64) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldLTE(FieldAverageResponseTime, v))
}

// AnalyticsDataIsNil applies the IsNil predicate on the "analytics_data" field.
func AnalyticsDataIsNil() predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldIsNull(FieldAnalyticsData))
}

// AnalyticsDataNotNil applies the NotNil predicate on the "analytics_data" field.
func AnalyticsDataNotNil() predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldNotNull(FieldAnalyticsData))
}

// MetadataIsNil applies the IsNil predicate on the "metadata" field.
func MetadataIsNil() predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldIsNull(FieldMetadata))
}

// MetadataNotNil applies the NotNil predicate on the "metadata" field.
func MetadataNotNil() predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.FieldNotNull(FieldMetadata))
}

// HasOrganization applies the HasEdge predicate on the "organization" edge.
func HasOrganization() predicate.OrganizationProvider {
	return predicate.OrganizationProvider(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrganizationTable, OrganizationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrganizationWith applies the HasEdge predicate on the "organization" edge with a given conditions (other predicates).
func HasOrganizationWith(preds ...predicate.Organization) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(func(s *sql.Selector) {
		step := newOrganizationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProvider applies the HasEdge predicate on the "provider" edge.
func HasProvider() predicate.OrganizationProvider {
	return predicate.OrganizationProvider(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProviderTable, ProviderColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProviderWith applies the HasEdge predicate on the "provider" edge with a given conditions (other predicates).
func HasProviderWith(preds ...predicate.IdentityProvider) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(func(s *sql.Selector) {
		step := newProviderStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTemplate applies the HasEdge predicate on the "template" edge.
func HasTemplate() predicate.OrganizationProvider {
	return predicate.OrganizationProvider(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TemplateTable, TemplateColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTemplateWith applies the HasEdge predicate on the "template" edge with a given conditions (other predicates).
func HasTemplateWith(preds ...predicate.ProviderTemplate) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(func(s *sql.Selector) {
		step := newTemplateStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.OrganizationProvider) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.OrganizationProvider) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.OrganizationProvider) predicate.OrganizationProvider {
	return predicate.OrganizationProvider(sql.NotPredicates(p))
}
