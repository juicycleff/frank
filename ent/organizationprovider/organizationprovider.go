// Copyright 2023-present XRaph LLC. All rights reserved.
// This source code is licensed under the XRaph LLC license found
// in the LICENSE file in the root directory of this source tree.
// Code generated by ent, DO NOT EDIT.

package organizationprovider

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/rs/xid"
)

const (
	// Label holds the string label denoting the organizationprovider type in the database.
	Label = "organization_provider"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldOrganizationID holds the string denoting the organization_id field in the database.
	FieldOrganizationID = "organization_id"
	// FieldProviderID holds the string denoting the provider_id field in the database.
	FieldProviderID = "provider_id"
	// FieldTemplateID holds the string denoting the template_id field in the database.
	FieldTemplateID = "template_id"
	// FieldTemplateKey holds the string denoting the template_key field in the database.
	FieldTemplateKey = "template_key"
	// FieldCustomConfig holds the string denoting the custom_config field in the database.
	FieldCustomConfig = "custom_config"
	// FieldEnabledAt holds the string denoting the enabled_at field in the database.
	FieldEnabledAt = "enabled_at"
	// FieldLastUsed holds the string denoting the last_used field in the database.
	FieldLastUsed = "last_used"
	// FieldUsageCount holds the string denoting the usage_count field in the database.
	FieldUsageCount = "usage_count"
	// FieldEnabled holds the string denoting the enabled field in the database.
	FieldEnabled = "enabled"
	// FieldSuccessRate holds the string denoting the success_rate field in the database.
	FieldSuccessRate = "success_rate"
	// FieldTotalLogins holds the string denoting the total_logins field in the database.
	FieldTotalLogins = "total_logins"
	// FieldSuccessfulLogins holds the string denoting the successful_logins field in the database.
	FieldSuccessfulLogins = "successful_logins"
	// FieldFailedLogins holds the string denoting the failed_logins field in the database.
	FieldFailedLogins = "failed_logins"
	// FieldLastSuccess holds the string denoting the last_success field in the database.
	FieldLastSuccess = "last_success"
	// FieldLastFailure holds the string denoting the last_failure field in the database.
	FieldLastFailure = "last_failure"
	// FieldConfigErrors holds the string denoting the config_errors field in the database.
	FieldConfigErrors = "config_errors"
	// FieldAverageResponseTime holds the string denoting the average_response_time field in the database.
	FieldAverageResponseTime = "average_response_time"
	// FieldAnalyticsData holds the string denoting the analytics_data field in the database.
	FieldAnalyticsData = "analytics_data"
	// FieldMetadata holds the string denoting the metadata field in the database.
	FieldMetadata = "metadata"
	// EdgeOrganization holds the string denoting the organization edge name in mutations.
	EdgeOrganization = "organization"
	// EdgeProvider holds the string denoting the provider edge name in mutations.
	EdgeProvider = "provider"
	// EdgeTemplate holds the string denoting the template edge name in mutations.
	EdgeTemplate = "template"
	// Table holds the table name of the organizationprovider in the database.
	Table = "organization_providers"
	// OrganizationTable is the table that holds the organization relation/edge.
	OrganizationTable = "organization_providers"
	// OrganizationInverseTable is the table name for the Organization entity.
	// It exists in this package in order to avoid circular dependency with the "organization" package.
	OrganizationInverseTable = "organizations"
	// OrganizationColumn is the table column denoting the organization relation/edge.
	OrganizationColumn = "organization_id"
	// ProviderTable is the table that holds the provider relation/edge.
	ProviderTable = "organization_providers"
	// ProviderInverseTable is the table name for the IdentityProvider entity.
	// It exists in this package in order to avoid circular dependency with the "identityprovider" package.
	ProviderInverseTable = "identity_providers"
	// ProviderColumn is the table column denoting the provider relation/edge.
	ProviderColumn = "provider_id"
	// TemplateTable is the table that holds the template relation/edge.
	TemplateTable = "organization_providers"
	// TemplateInverseTable is the table name for the ProviderTemplate entity.
	// It exists in this package in order to avoid circular dependency with the "providertemplate" package.
	TemplateInverseTable = "provider_templates"
	// TemplateColumn is the table column denoting the template relation/edge.
	TemplateColumn = "template_id"
)

// Columns holds all SQL columns for organizationprovider fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldOrganizationID,
	FieldProviderID,
	FieldTemplateID,
	FieldTemplateKey,
	FieldCustomConfig,
	FieldEnabledAt,
	FieldLastUsed,
	FieldUsageCount,
	FieldEnabled,
	FieldSuccessRate,
	FieldTotalLogins,
	FieldSuccessfulLogins,
	FieldFailedLogins,
	FieldLastSuccess,
	FieldLastFailure,
	FieldConfigErrors,
	FieldAverageResponseTime,
	FieldAnalyticsData,
	FieldMetadata,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// OrganizationIDValidator is a validator for the "organization_id" field. It is called by the builders before save.
	OrganizationIDValidator func(string) error
	// ProviderIDValidator is a validator for the "provider_id" field. It is called by the builders before save.
	ProviderIDValidator func(string) error
	// TemplateIDValidator is a validator for the "template_id" field. It is called by the builders before save.
	TemplateIDValidator func(string) error
	// TemplateKeyValidator is a validator for the "template_key" field. It is called by the builders before save.
	TemplateKeyValidator func(string) error
	// DefaultEnabledAt holds the default value on creation for the "enabled_at" field.
	DefaultEnabledAt func() time.Time
	// DefaultUsageCount holds the default value on creation for the "usage_count" field.
	DefaultUsageCount int
	// DefaultEnabled holds the default value on creation for the "enabled" field.
	DefaultEnabled bool
	// DefaultSuccessRate holds the default value on creation for the "success_rate" field.
	DefaultSuccessRate float64
	// DefaultTotalLogins holds the default value on creation for the "total_logins" field.
	DefaultTotalLogins int
	// DefaultSuccessfulLogins holds the default value on creation for the "successful_logins" field.
	DefaultSuccessfulLogins int
	// DefaultFailedLogins holds the default value on creation for the "failed_logins" field.
	DefaultFailedLogins int
	// DefaultConfigErrors holds the default value on creation for the "config_errors" field.
	DefaultConfigErrors int
	// DefaultAverageResponseTime holds the default value on creation for the "average_response_time" field.
	DefaultAverageResponseTime float64
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() xid.ID
)

// OrderOption defines the ordering options for the OrganizationProvider queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByOrganizationID orders the results by the organization_id field.
func ByOrganizationID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrganizationID, opts...).ToFunc()
}

// ByProviderID orders the results by the provider_id field.
func ByProviderID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProviderID, opts...).ToFunc()
}

// ByTemplateID orders the results by the template_id field.
func ByTemplateID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTemplateID, opts...).ToFunc()
}

// ByTemplateKey orders the results by the template_key field.
func ByTemplateKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTemplateKey, opts...).ToFunc()
}

// ByEnabledAt orders the results by the enabled_at field.
func ByEnabledAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnabledAt, opts...).ToFunc()
}

// ByLastUsed orders the results by the last_used field.
func ByLastUsed(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastUsed, opts...).ToFunc()
}

// ByUsageCount orders the results by the usage_count field.
func ByUsageCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsageCount, opts...).ToFunc()
}

// ByEnabled orders the results by the enabled field.
func ByEnabled(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnabled, opts...).ToFunc()
}

// BySuccessRate orders the results by the success_rate field.
func BySuccessRate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSuccessRate, opts...).ToFunc()
}

// ByTotalLogins orders the results by the total_logins field.
func ByTotalLogins(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotalLogins, opts...).ToFunc()
}

// BySuccessfulLogins orders the results by the successful_logins field.
func BySuccessfulLogins(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSuccessfulLogins, opts...).ToFunc()
}

// ByFailedLogins orders the results by the failed_logins field.
func ByFailedLogins(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFailedLogins, opts...).ToFunc()
}

// ByLastSuccess orders the results by the last_success field.
func ByLastSuccess(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastSuccess, opts...).ToFunc()
}

// ByLastFailure orders the results by the last_failure field.
func ByLastFailure(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastFailure, opts...).ToFunc()
}

// ByConfigErrors orders the results by the config_errors field.
func ByConfigErrors(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldConfigErrors, opts...).ToFunc()
}

// ByAverageResponseTime orders the results by the average_response_time field.
func ByAverageResponseTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAverageResponseTime, opts...).ToFunc()
}

// ByOrganizationField orders the results by organization field.
func ByOrganizationField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrganizationStep(), sql.OrderByField(field, opts...))
	}
}

// ByProviderField orders the results by provider field.
func ByProviderField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProviderStep(), sql.OrderByField(field, opts...))
	}
}

// ByTemplateField orders the results by template field.
func ByTemplateField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTemplateStep(), sql.OrderByField(field, opts...))
	}
}
func newOrganizationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrganizationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, OrganizationTable, OrganizationColumn),
	)
}
func newProviderStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProviderInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ProviderTable, ProviderColumn),
	)
}
func newTemplateStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TemplateInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, TemplateTable, TemplateColumn),
	)
}
