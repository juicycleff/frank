// Copyright 2023-present XRaph LLC. All rights reserved.
// This source code is licensed under the XRaph LLC license found
// in the LICENSE file in the root directory of this source tree.
// Code generated by ent, DO NOT EDIT.

package oauthclient

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/juicycleff/frank/ent/predicate"
	"github.com/rs/xid"
)

// ID filters vertices based on their ID field.
func ID(id xid.ID) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id xid.ID) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id xid.ID) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...xid.ID) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...xid.ID) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id xid.ID) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id xid.ID) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id xid.ID) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id xid.ID) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldEQ(FieldDeletedAt, v))
}

// ClientID applies equality check predicate on the "client_id" field. It's identical to ClientIDEQ.
func ClientID(v string) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldEQ(FieldClientID, v))
}

// ClientSecret applies equality check predicate on the "client_secret" field. It's identical to ClientSecretEQ.
func ClientSecret(v string) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldEQ(FieldClientSecret, v))
}

// ClientName applies equality check predicate on the "client_name" field. It's identical to ClientNameEQ.
func ClientName(v string) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldEQ(FieldClientName, v))
}

// ClientDescription applies equality check predicate on the "client_description" field. It's identical to ClientDescriptionEQ.
func ClientDescription(v string) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldEQ(FieldClientDescription, v))
}

// ClientURI applies equality check predicate on the "client_uri" field. It's identical to ClientURIEQ.
func ClientURI(v string) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldEQ(FieldClientURI, v))
}

// LogoURI applies equality check predicate on the "logo_uri" field. It's identical to LogoURIEQ.
func LogoURI(v string) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldEQ(FieldLogoURI, v))
}

// OrganizationID applies equality check predicate on the "organization_id" field. It's identical to OrganizationIDEQ.
func OrganizationID(v xid.ID) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldEQ(FieldOrganizationID, v))
}

// Public applies equality check predicate on the "public" field. It's identical to PublicEQ.
func Public(v bool) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldEQ(FieldPublic, v))
}

// Active applies equality check predicate on the "active" field. It's identical to ActiveEQ.
func Active(v bool) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldEQ(FieldActive, v))
}

// TokenExpirySeconds applies equality check predicate on the "token_expiry_seconds" field. It's identical to TokenExpirySecondsEQ.
func TokenExpirySeconds(v int) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldEQ(FieldTokenExpirySeconds, v))
}

// RefreshTokenExpirySeconds applies equality check predicate on the "refresh_token_expiry_seconds" field. It's identical to RefreshTokenExpirySecondsEQ.
func RefreshTokenExpirySeconds(v int) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldEQ(FieldRefreshTokenExpirySeconds, v))
}

// AuthCodeExpirySeconds applies equality check predicate on the "auth_code_expiry_seconds" field. It's identical to AuthCodeExpirySecondsEQ.
func AuthCodeExpirySeconds(v int) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldEQ(FieldAuthCodeExpirySeconds, v))
}

// RequiresPkce applies equality check predicate on the "requires_pkce" field. It's identical to RequiresPkceEQ.
func RequiresPkce(v bool) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldEQ(FieldRequiresPkce, v))
}

// RequiresConsent applies equality check predicate on the "requires_consent" field. It's identical to RequiresConsentEQ.
func RequiresConsent(v bool) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldEQ(FieldRequiresConsent, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldNotNull(FieldDeletedAt))
}

// ClientIDEQ applies the EQ predicate on the "client_id" field.
func ClientIDEQ(v string) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldEQ(FieldClientID, v))
}

// ClientIDNEQ applies the NEQ predicate on the "client_id" field.
func ClientIDNEQ(v string) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldNEQ(FieldClientID, v))
}

// ClientIDIn applies the In predicate on the "client_id" field.
func ClientIDIn(vs ...string) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldIn(FieldClientID, vs...))
}

// ClientIDNotIn applies the NotIn predicate on the "client_id" field.
func ClientIDNotIn(vs ...string) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldNotIn(FieldClientID, vs...))
}

// ClientIDGT applies the GT predicate on the "client_id" field.
func ClientIDGT(v string) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldGT(FieldClientID, v))
}

// ClientIDGTE applies the GTE predicate on the "client_id" field.
func ClientIDGTE(v string) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldGTE(FieldClientID, v))
}

// ClientIDLT applies the LT predicate on the "client_id" field.
func ClientIDLT(v string) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldLT(FieldClientID, v))
}

// ClientIDLTE applies the LTE predicate on the "client_id" field.
func ClientIDLTE(v string) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldLTE(FieldClientID, v))
}

// ClientIDContains applies the Contains predicate on the "client_id" field.
func ClientIDContains(v string) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldContains(FieldClientID, v))
}

// ClientIDHasPrefix applies the HasPrefix predicate on the "client_id" field.
func ClientIDHasPrefix(v string) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldHasPrefix(FieldClientID, v))
}

// ClientIDHasSuffix applies the HasSuffix predicate on the "client_id" field.
func ClientIDHasSuffix(v string) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldHasSuffix(FieldClientID, v))
}

// ClientIDEqualFold applies the EqualFold predicate on the "client_id" field.
func ClientIDEqualFold(v string) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldEqualFold(FieldClientID, v))
}

// ClientIDContainsFold applies the ContainsFold predicate on the "client_id" field.
func ClientIDContainsFold(v string) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldContainsFold(FieldClientID, v))
}

// ClientSecretEQ applies the EQ predicate on the "client_secret" field.
func ClientSecretEQ(v string) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldEQ(FieldClientSecret, v))
}

// ClientSecretNEQ applies the NEQ predicate on the "client_secret" field.
func ClientSecretNEQ(v string) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldNEQ(FieldClientSecret, v))
}

// ClientSecretIn applies the In predicate on the "client_secret" field.
func ClientSecretIn(vs ...string) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldIn(FieldClientSecret, vs...))
}

// ClientSecretNotIn applies the NotIn predicate on the "client_secret" field.
func ClientSecretNotIn(vs ...string) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldNotIn(FieldClientSecret, vs...))
}

// ClientSecretGT applies the GT predicate on the "client_secret" field.
func ClientSecretGT(v string) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldGT(FieldClientSecret, v))
}

// ClientSecretGTE applies the GTE predicate on the "client_secret" field.
func ClientSecretGTE(v string) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldGTE(FieldClientSecret, v))
}

// ClientSecretLT applies the LT predicate on the "client_secret" field.
func ClientSecretLT(v string) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldLT(FieldClientSecret, v))
}

// ClientSecretLTE applies the LTE predicate on the "client_secret" field.
func ClientSecretLTE(v string) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldLTE(FieldClientSecret, v))
}

// ClientSecretContains applies the Contains predicate on the "client_secret" field.
func ClientSecretContains(v string) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldContains(FieldClientSecret, v))
}

// ClientSecretHasPrefix applies the HasPrefix predicate on the "client_secret" field.
func ClientSecretHasPrefix(v string) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldHasPrefix(FieldClientSecret, v))
}

// ClientSecretHasSuffix applies the HasSuffix predicate on the "client_secret" field.
func ClientSecretHasSuffix(v string) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldHasSuffix(FieldClientSecret, v))
}

// ClientSecretEqualFold applies the EqualFold predicate on the "client_secret" field.
func ClientSecretEqualFold(v string) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldEqualFold(FieldClientSecret, v))
}

// ClientSecretContainsFold applies the ContainsFold predicate on the "client_secret" field.
func ClientSecretContainsFold(v string) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldContainsFold(FieldClientSecret, v))
}

// ClientNameEQ applies the EQ predicate on the "client_name" field.
func ClientNameEQ(v string) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldEQ(FieldClientName, v))
}

// ClientNameNEQ applies the NEQ predicate on the "client_name" field.
func ClientNameNEQ(v string) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldNEQ(FieldClientName, v))
}

// ClientNameIn applies the In predicate on the "client_name" field.
func ClientNameIn(vs ...string) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldIn(FieldClientName, vs...))
}

// ClientNameNotIn applies the NotIn predicate on the "client_name" field.
func ClientNameNotIn(vs ...string) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldNotIn(FieldClientName, vs...))
}

// ClientNameGT applies the GT predicate on the "client_name" field.
func ClientNameGT(v string) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldGT(FieldClientName, v))
}

// ClientNameGTE applies the GTE predicate on the "client_name" field.
func ClientNameGTE(v string) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldGTE(FieldClientName, v))
}

// ClientNameLT applies the LT predicate on the "client_name" field.
func ClientNameLT(v string) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldLT(FieldClientName, v))
}

// ClientNameLTE applies the LTE predicate on the "client_name" field.
func ClientNameLTE(v string) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldLTE(FieldClientName, v))
}

// ClientNameContains applies the Contains predicate on the "client_name" field.
func ClientNameContains(v string) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldContains(FieldClientName, v))
}

// ClientNameHasPrefix applies the HasPrefix predicate on the "client_name" field.
func ClientNameHasPrefix(v string) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldHasPrefix(FieldClientName, v))
}

// ClientNameHasSuffix applies the HasSuffix predicate on the "client_name" field.
func ClientNameHasSuffix(v string) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldHasSuffix(FieldClientName, v))
}

// ClientNameEqualFold applies the EqualFold predicate on the "client_name" field.
func ClientNameEqualFold(v string) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldEqualFold(FieldClientName, v))
}

// ClientNameContainsFold applies the ContainsFold predicate on the "client_name" field.
func ClientNameContainsFold(v string) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldContainsFold(FieldClientName, v))
}

// ClientDescriptionEQ applies the EQ predicate on the "client_description" field.
func ClientDescriptionEQ(v string) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldEQ(FieldClientDescription, v))
}

// ClientDescriptionNEQ applies the NEQ predicate on the "client_description" field.
func ClientDescriptionNEQ(v string) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldNEQ(FieldClientDescription, v))
}

// ClientDescriptionIn applies the In predicate on the "client_description" field.
func ClientDescriptionIn(vs ...string) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldIn(FieldClientDescription, vs...))
}

// ClientDescriptionNotIn applies the NotIn predicate on the "client_description" field.
func ClientDescriptionNotIn(vs ...string) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldNotIn(FieldClientDescription, vs...))
}

// ClientDescriptionGT applies the GT predicate on the "client_description" field.
func ClientDescriptionGT(v string) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldGT(FieldClientDescription, v))
}

// ClientDescriptionGTE applies the GTE predicate on the "client_description" field.
func ClientDescriptionGTE(v string) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldGTE(FieldClientDescription, v))
}

// ClientDescriptionLT applies the LT predicate on the "client_description" field.
func ClientDescriptionLT(v string) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldLT(FieldClientDescription, v))
}

// ClientDescriptionLTE applies the LTE predicate on the "client_description" field.
func ClientDescriptionLTE(v string) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldLTE(FieldClientDescription, v))
}

// ClientDescriptionContains applies the Contains predicate on the "client_description" field.
func ClientDescriptionContains(v string) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldContains(FieldClientDescription, v))
}

// ClientDescriptionHasPrefix applies the HasPrefix predicate on the "client_description" field.
func ClientDescriptionHasPrefix(v string) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldHasPrefix(FieldClientDescription, v))
}

// ClientDescriptionHasSuffix applies the HasSuffix predicate on the "client_description" field.
func ClientDescriptionHasSuffix(v string) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldHasSuffix(FieldClientDescription, v))
}

// ClientDescriptionIsNil applies the IsNil predicate on the "client_description" field.
func ClientDescriptionIsNil() predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldIsNull(FieldClientDescription))
}

// ClientDescriptionNotNil applies the NotNil predicate on the "client_description" field.
func ClientDescriptionNotNil() predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldNotNull(FieldClientDescription))
}

// ClientDescriptionEqualFold applies the EqualFold predicate on the "client_description" field.
func ClientDescriptionEqualFold(v string) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldEqualFold(FieldClientDescription, v))
}

// ClientDescriptionContainsFold applies the ContainsFold predicate on the "client_description" field.
func ClientDescriptionContainsFold(v string) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldContainsFold(FieldClientDescription, v))
}

// ClientURIEQ applies the EQ predicate on the "client_uri" field.
func ClientURIEQ(v string) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldEQ(FieldClientURI, v))
}

// ClientURINEQ applies the NEQ predicate on the "client_uri" field.
func ClientURINEQ(v string) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldNEQ(FieldClientURI, v))
}

// ClientURIIn applies the In predicate on the "client_uri" field.
func ClientURIIn(vs ...string) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldIn(FieldClientURI, vs...))
}

// ClientURINotIn applies the NotIn predicate on the "client_uri" field.
func ClientURINotIn(vs ...string) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldNotIn(FieldClientURI, vs...))
}

// ClientURIGT applies the GT predicate on the "client_uri" field.
func ClientURIGT(v string) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldGT(FieldClientURI, v))
}

// ClientURIGTE applies the GTE predicate on the "client_uri" field.
func ClientURIGTE(v string) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldGTE(FieldClientURI, v))
}

// ClientURILT applies the LT predicate on the "client_uri" field.
func ClientURILT(v string) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldLT(FieldClientURI, v))
}

// ClientURILTE applies the LTE predicate on the "client_uri" field.
func ClientURILTE(v string) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldLTE(FieldClientURI, v))
}

// ClientURIContains applies the Contains predicate on the "client_uri" field.
func ClientURIContains(v string) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldContains(FieldClientURI, v))
}

// ClientURIHasPrefix applies the HasPrefix predicate on the "client_uri" field.
func ClientURIHasPrefix(v string) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldHasPrefix(FieldClientURI, v))
}

// ClientURIHasSuffix applies the HasSuffix predicate on the "client_uri" field.
func ClientURIHasSuffix(v string) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldHasSuffix(FieldClientURI, v))
}

// ClientURIIsNil applies the IsNil predicate on the "client_uri" field.
func ClientURIIsNil() predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldIsNull(FieldClientURI))
}

// ClientURINotNil applies the NotNil predicate on the "client_uri" field.
func ClientURINotNil() predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldNotNull(FieldClientURI))
}

// ClientURIEqualFold applies the EqualFold predicate on the "client_uri" field.
func ClientURIEqualFold(v string) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldEqualFold(FieldClientURI, v))
}

// ClientURIContainsFold applies the ContainsFold predicate on the "client_uri" field.
func ClientURIContainsFold(v string) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldContainsFold(FieldClientURI, v))
}

// LogoURIEQ applies the EQ predicate on the "logo_uri" field.
func LogoURIEQ(v string) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldEQ(FieldLogoURI, v))
}

// LogoURINEQ applies the NEQ predicate on the "logo_uri" field.
func LogoURINEQ(v string) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldNEQ(FieldLogoURI, v))
}

// LogoURIIn applies the In predicate on the "logo_uri" field.
func LogoURIIn(vs ...string) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldIn(FieldLogoURI, vs...))
}

// LogoURINotIn applies the NotIn predicate on the "logo_uri" field.
func LogoURINotIn(vs ...string) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldNotIn(FieldLogoURI, vs...))
}

// LogoURIGT applies the GT predicate on the "logo_uri" field.
func LogoURIGT(v string) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldGT(FieldLogoURI, v))
}

// LogoURIGTE applies the GTE predicate on the "logo_uri" field.
func LogoURIGTE(v string) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldGTE(FieldLogoURI, v))
}

// LogoURILT applies the LT predicate on the "logo_uri" field.
func LogoURILT(v string) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldLT(FieldLogoURI, v))
}

// LogoURILTE applies the LTE predicate on the "logo_uri" field.
func LogoURILTE(v string) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldLTE(FieldLogoURI, v))
}

// LogoURIContains applies the Contains predicate on the "logo_uri" field.
func LogoURIContains(v string) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldContains(FieldLogoURI, v))
}

// LogoURIHasPrefix applies the HasPrefix predicate on the "logo_uri" field.
func LogoURIHasPrefix(v string) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldHasPrefix(FieldLogoURI, v))
}

// LogoURIHasSuffix applies the HasSuffix predicate on the "logo_uri" field.
func LogoURIHasSuffix(v string) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldHasSuffix(FieldLogoURI, v))
}

// LogoURIIsNil applies the IsNil predicate on the "logo_uri" field.
func LogoURIIsNil() predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldIsNull(FieldLogoURI))
}

// LogoURINotNil applies the NotNil predicate on the "logo_uri" field.
func LogoURINotNil() predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldNotNull(FieldLogoURI))
}

// LogoURIEqualFold applies the EqualFold predicate on the "logo_uri" field.
func LogoURIEqualFold(v string) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldEqualFold(FieldLogoURI, v))
}

// LogoURIContainsFold applies the ContainsFold predicate on the "logo_uri" field.
func LogoURIContainsFold(v string) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldContainsFold(FieldLogoURI, v))
}

// PostLogoutRedirectUrisIsNil applies the IsNil predicate on the "post_logout_redirect_uris" field.
func PostLogoutRedirectUrisIsNil() predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldIsNull(FieldPostLogoutRedirectUris))
}

// PostLogoutRedirectUrisNotNil applies the NotNil predicate on the "post_logout_redirect_uris" field.
func PostLogoutRedirectUrisNotNil() predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldNotNull(FieldPostLogoutRedirectUris))
}

// OrganizationIDEQ applies the EQ predicate on the "organization_id" field.
func OrganizationIDEQ(v xid.ID) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldEQ(FieldOrganizationID, v))
}

// OrganizationIDNEQ applies the NEQ predicate on the "organization_id" field.
func OrganizationIDNEQ(v xid.ID) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldNEQ(FieldOrganizationID, v))
}

// OrganizationIDIn applies the In predicate on the "organization_id" field.
func OrganizationIDIn(vs ...xid.ID) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldIn(FieldOrganizationID, vs...))
}

// OrganizationIDNotIn applies the NotIn predicate on the "organization_id" field.
func OrganizationIDNotIn(vs ...xid.ID) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldNotIn(FieldOrganizationID, vs...))
}

// OrganizationIDGT applies the GT predicate on the "organization_id" field.
func OrganizationIDGT(v xid.ID) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldGT(FieldOrganizationID, v))
}

// OrganizationIDGTE applies the GTE predicate on the "organization_id" field.
func OrganizationIDGTE(v xid.ID) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldGTE(FieldOrganizationID, v))
}

// OrganizationIDLT applies the LT predicate on the "organization_id" field.
func OrganizationIDLT(v xid.ID) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldLT(FieldOrganizationID, v))
}

// OrganizationIDLTE applies the LTE predicate on the "organization_id" field.
func OrganizationIDLTE(v xid.ID) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldLTE(FieldOrganizationID, v))
}

// OrganizationIDContains applies the Contains predicate on the "organization_id" field.
func OrganizationIDContains(v xid.ID) predicate.OAuthClient {
	vc := v.String()
	return predicate.OAuthClient(sql.FieldContains(FieldOrganizationID, vc))
}

// OrganizationIDHasPrefix applies the HasPrefix predicate on the "organization_id" field.
func OrganizationIDHasPrefix(v xid.ID) predicate.OAuthClient {
	vc := v.String()
	return predicate.OAuthClient(sql.FieldHasPrefix(FieldOrganizationID, vc))
}

// OrganizationIDHasSuffix applies the HasSuffix predicate on the "organization_id" field.
func OrganizationIDHasSuffix(v xid.ID) predicate.OAuthClient {
	vc := v.String()
	return predicate.OAuthClient(sql.FieldHasSuffix(FieldOrganizationID, vc))
}

// OrganizationIDIsNil applies the IsNil predicate on the "organization_id" field.
func OrganizationIDIsNil() predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldIsNull(FieldOrganizationID))
}

// OrganizationIDNotNil applies the NotNil predicate on the "organization_id" field.
func OrganizationIDNotNil() predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldNotNull(FieldOrganizationID))
}

// OrganizationIDEqualFold applies the EqualFold predicate on the "organization_id" field.
func OrganizationIDEqualFold(v xid.ID) predicate.OAuthClient {
	vc := v.String()
	return predicate.OAuthClient(sql.FieldEqualFold(FieldOrganizationID, vc))
}

// OrganizationIDContainsFold applies the ContainsFold predicate on the "organization_id" field.
func OrganizationIDContainsFold(v xid.ID) predicate.OAuthClient {
	vc := v.String()
	return predicate.OAuthClient(sql.FieldContainsFold(FieldOrganizationID, vc))
}

// PublicEQ applies the EQ predicate on the "public" field.
func PublicEQ(v bool) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldEQ(FieldPublic, v))
}

// PublicNEQ applies the NEQ predicate on the "public" field.
func PublicNEQ(v bool) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldNEQ(FieldPublic, v))
}

// ActiveEQ applies the EQ predicate on the "active" field.
func ActiveEQ(v bool) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldEQ(FieldActive, v))
}

// ActiveNEQ applies the NEQ predicate on the "active" field.
func ActiveNEQ(v bool) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldNEQ(FieldActive, v))
}

// AllowedCorsOriginsIsNil applies the IsNil predicate on the "allowed_cors_origins" field.
func AllowedCorsOriginsIsNil() predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldIsNull(FieldAllowedCorsOrigins))
}

// AllowedCorsOriginsNotNil applies the NotNil predicate on the "allowed_cors_origins" field.
func AllowedCorsOriginsNotNil() predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldNotNull(FieldAllowedCorsOrigins))
}

// TokenExpirySecondsEQ applies the EQ predicate on the "token_expiry_seconds" field.
func TokenExpirySecondsEQ(v int) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldEQ(FieldTokenExpirySeconds, v))
}

// TokenExpirySecondsNEQ applies the NEQ predicate on the "token_expiry_seconds" field.
func TokenExpirySecondsNEQ(v int) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldNEQ(FieldTokenExpirySeconds, v))
}

// TokenExpirySecondsIn applies the In predicate on the "token_expiry_seconds" field.
func TokenExpirySecondsIn(vs ...int) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldIn(FieldTokenExpirySeconds, vs...))
}

// TokenExpirySecondsNotIn applies the NotIn predicate on the "token_expiry_seconds" field.
func TokenExpirySecondsNotIn(vs ...int) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldNotIn(FieldTokenExpirySeconds, vs...))
}

// TokenExpirySecondsGT applies the GT predicate on the "token_expiry_seconds" field.
func TokenExpirySecondsGT(v int) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldGT(FieldTokenExpirySeconds, v))
}

// TokenExpirySecondsGTE applies the GTE predicate on the "token_expiry_seconds" field.
func TokenExpirySecondsGTE(v int) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldGTE(FieldTokenExpirySeconds, v))
}

// TokenExpirySecondsLT applies the LT predicate on the "token_expiry_seconds" field.
func TokenExpirySecondsLT(v int) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldLT(FieldTokenExpirySeconds, v))
}

// TokenExpirySecondsLTE applies the LTE predicate on the "token_expiry_seconds" field.
func TokenExpirySecondsLTE(v int) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldLTE(FieldTokenExpirySeconds, v))
}

// RefreshTokenExpirySecondsEQ applies the EQ predicate on the "refresh_token_expiry_seconds" field.
func RefreshTokenExpirySecondsEQ(v int) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldEQ(FieldRefreshTokenExpirySeconds, v))
}

// RefreshTokenExpirySecondsNEQ applies the NEQ predicate on the "refresh_token_expiry_seconds" field.
func RefreshTokenExpirySecondsNEQ(v int) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldNEQ(FieldRefreshTokenExpirySeconds, v))
}

// RefreshTokenExpirySecondsIn applies the In predicate on the "refresh_token_expiry_seconds" field.
func RefreshTokenExpirySecondsIn(vs ...int) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldIn(FieldRefreshTokenExpirySeconds, vs...))
}

// RefreshTokenExpirySecondsNotIn applies the NotIn predicate on the "refresh_token_expiry_seconds" field.
func RefreshTokenExpirySecondsNotIn(vs ...int) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldNotIn(FieldRefreshTokenExpirySeconds, vs...))
}

// RefreshTokenExpirySecondsGT applies the GT predicate on the "refresh_token_expiry_seconds" field.
func RefreshTokenExpirySecondsGT(v int) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldGT(FieldRefreshTokenExpirySeconds, v))
}

// RefreshTokenExpirySecondsGTE applies the GTE predicate on the "refresh_token_expiry_seconds" field.
func RefreshTokenExpirySecondsGTE(v int) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldGTE(FieldRefreshTokenExpirySeconds, v))
}

// RefreshTokenExpirySecondsLT applies the LT predicate on the "refresh_token_expiry_seconds" field.
func RefreshTokenExpirySecondsLT(v int) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldLT(FieldRefreshTokenExpirySeconds, v))
}

// RefreshTokenExpirySecondsLTE applies the LTE predicate on the "refresh_token_expiry_seconds" field.
func RefreshTokenExpirySecondsLTE(v int) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldLTE(FieldRefreshTokenExpirySeconds, v))
}

// AuthCodeExpirySecondsEQ applies the EQ predicate on the "auth_code_expiry_seconds" field.
func AuthCodeExpirySecondsEQ(v int) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldEQ(FieldAuthCodeExpirySeconds, v))
}

// AuthCodeExpirySecondsNEQ applies the NEQ predicate on the "auth_code_expiry_seconds" field.
func AuthCodeExpirySecondsNEQ(v int) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldNEQ(FieldAuthCodeExpirySeconds, v))
}

// AuthCodeExpirySecondsIn applies the In predicate on the "auth_code_expiry_seconds" field.
func AuthCodeExpirySecondsIn(vs ...int) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldIn(FieldAuthCodeExpirySeconds, vs...))
}

// AuthCodeExpirySecondsNotIn applies the NotIn predicate on the "auth_code_expiry_seconds" field.
func AuthCodeExpirySecondsNotIn(vs ...int) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldNotIn(FieldAuthCodeExpirySeconds, vs...))
}

// AuthCodeExpirySecondsGT applies the GT predicate on the "auth_code_expiry_seconds" field.
func AuthCodeExpirySecondsGT(v int) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldGT(FieldAuthCodeExpirySeconds, v))
}

// AuthCodeExpirySecondsGTE applies the GTE predicate on the "auth_code_expiry_seconds" field.
func AuthCodeExpirySecondsGTE(v int) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldGTE(FieldAuthCodeExpirySeconds, v))
}

// AuthCodeExpirySecondsLT applies the LT predicate on the "auth_code_expiry_seconds" field.
func AuthCodeExpirySecondsLT(v int) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldLT(FieldAuthCodeExpirySeconds, v))
}

// AuthCodeExpirySecondsLTE applies the LTE predicate on the "auth_code_expiry_seconds" field.
func AuthCodeExpirySecondsLTE(v int) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldLTE(FieldAuthCodeExpirySeconds, v))
}

// RequiresPkceEQ applies the EQ predicate on the "requires_pkce" field.
func RequiresPkceEQ(v bool) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldEQ(FieldRequiresPkce, v))
}

// RequiresPkceNEQ applies the NEQ predicate on the "requires_pkce" field.
func RequiresPkceNEQ(v bool) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldNEQ(FieldRequiresPkce, v))
}

// RequiresConsentEQ applies the EQ predicate on the "requires_consent" field.
func RequiresConsentEQ(v bool) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldEQ(FieldRequiresConsent, v))
}

// RequiresConsentNEQ applies the NEQ predicate on the "requires_consent" field.
func RequiresConsentNEQ(v bool) predicate.OAuthClient {
	return predicate.OAuthClient(sql.FieldNEQ(FieldRequiresConsent, v))
}

// HasOrganization applies the HasEdge predicate on the "organization" edge.
func HasOrganization() predicate.OAuthClient {
	return predicate.OAuthClient(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrganizationTable, OrganizationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrganizationWith applies the HasEdge predicate on the "organization" edge with a given conditions (other predicates).
func HasOrganizationWith(preds ...predicate.Organization) predicate.OAuthClient {
	return predicate.OAuthClient(func(s *sql.Selector) {
		step := newOrganizationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTokens applies the HasEdge predicate on the "tokens" edge.
func HasTokens() predicate.OAuthClient {
	return predicate.OAuthClient(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TokensTable, TokensColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTokensWith applies the HasEdge predicate on the "tokens" edge with a given conditions (other predicates).
func HasTokensWith(preds ...predicate.OAuthToken) predicate.OAuthClient {
	return predicate.OAuthClient(func(s *sql.Selector) {
		step := newTokensStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAuthorizations applies the HasEdge predicate on the "authorizations" edge.
func HasAuthorizations() predicate.OAuthClient {
	return predicate.OAuthClient(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AuthorizationsTable, AuthorizationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAuthorizationsWith applies the HasEdge predicate on the "authorizations" edge with a given conditions (other predicates).
func HasAuthorizationsWith(preds ...predicate.OAuthAuthorization) predicate.OAuthClient {
	return predicate.OAuthClient(func(s *sql.Selector) {
		step := newAuthorizationsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasScopes applies the HasEdge predicate on the "scopes" edge.
func HasScopes() predicate.OAuthClient {
	return predicate.OAuthClient(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, ScopesTable, ScopesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasScopesWith applies the HasEdge predicate on the "scopes" edge with a given conditions (other predicates).
func HasScopesWith(preds ...predicate.OAuthScope) predicate.OAuthClient {
	return predicate.OAuthClient(func(s *sql.Selector) {
		step := newScopesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.OAuthClient) predicate.OAuthClient {
	return predicate.OAuthClient(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.OAuthClient) predicate.OAuthClient {
	return predicate.OAuthClient(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.OAuthClient) predicate.OAuthClient {
	return predicate.OAuthClient(sql.NotPredicates(p))
}
