// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/juicycleff/frank/ent/organization"
)

// Organization holds the schema definition for the Organization entity.
type Organization struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Slug holds the value of the "slug" field.
	Slug string `json:"slug,omitempty"`
	// Domain holds the value of the "domain" field.
	Domain string `json:"domain,omitempty"`
	// LogoURL holds the value of the "logo_url" field.
	LogoURL string `json:"logo_url,omitempty"`
	// Plan holds the value of the "plan" field.
	Plan string `json:"plan,omitempty"`
	// Active holds the value of the "active" field.
	Active bool `json:"active,omitempty"`
	// Metadata holds the value of the "metadata" field.
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	// TrialEndsAt holds the value of the "trial_ends_at" field.
	TrialEndsAt *time.Time `json:"trial_ends_at,omitempty"`
	// TrialUsed holds the value of the "trial_used" field.
	TrialUsed bool `json:"trial_used,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OrganizationQuery when eager-loading is set.
	Edges        OrganizationEdges `json:"edges"`
	selectValues sql.SelectValues
} //@name Organization


// OrganizationEdges holds the relations/edges for other nodes in the graph.
type OrganizationEdges struct {
	// Users holds the value of the users edge.
	Users []*User `json:"users,omitempty"`
	// APIKeys holds the value of the api_keys edge.
	APIKeys []*ApiKey `json:"api_keys,omitempty"`
	// Webhooks holds the value of the webhooks edge.
	Webhooks []*Webhook `json:"webhooks,omitempty"`
	// FeatureFlags holds the value of the feature_flags edge.
	FeatureFlags []*OrganizationFeature `json:"feature_flags,omitempty"`
	// IdentityProviders holds the value of the identity_providers edge.
	IdentityProviders []*IdentityProvider `json:"identity_providers,omitempty"`
	// OauthClients holds the value of the oauth_clients edge.
	OauthClients []*OAuthClient `json:"oauth_clients,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [6]bool
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationEdges) UsersOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.Users, nil
	}
	return nil, &NotLoadedError{edge: "users"}
}

// APIKeysOrErr returns the APIKeys value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationEdges) APIKeysOrErr() ([]*ApiKey, error) {
	if e.loadedTypes[1] {
		return e.APIKeys, nil
	}
	return nil, &NotLoadedError{edge: "api_keys"}
}

// WebhooksOrErr returns the Webhooks value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationEdges) WebhooksOrErr() ([]*Webhook, error) {
	if e.loadedTypes[2] {
		return e.Webhooks, nil
	}
	return nil, &NotLoadedError{edge: "webhooks"}
}

// FeatureFlagsOrErr returns the FeatureFlags value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationEdges) FeatureFlagsOrErr() ([]*OrganizationFeature, error) {
	if e.loadedTypes[3] {
		return e.FeatureFlags, nil
	}
	return nil, &NotLoadedError{edge: "feature_flags"}
}

// IdentityProvidersOrErr returns the IdentityProviders value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationEdges) IdentityProvidersOrErr() ([]*IdentityProvider, error) {
	if e.loadedTypes[4] {
		return e.IdentityProviders, nil
	}
	return nil, &NotLoadedError{edge: "identity_providers"}
}

// OauthClientsOrErr returns the OauthClients value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationEdges) OauthClientsOrErr() ([]*OAuthClient, error) {
	if e.loadedTypes[5] {
		return e.OauthClients, nil
	}
	return nil, &NotLoadedError{edge: "oauth_clients"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Organization) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case organization.FieldMetadata:
			values[i] = new([]byte)
		case organization.FieldActive, organization.FieldTrialUsed:
			values[i] = new(sql.NullBool)
		case organization.FieldID, organization.FieldName, organization.FieldSlug, organization.FieldDomain, organization.FieldLogoURL, organization.FieldPlan:
			values[i] = new(sql.NullString)
		case organization.FieldCreatedAt, organization.FieldUpdatedAt, organization.FieldTrialEndsAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Organization fields.
func (o *Organization) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case organization.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				o.ID = value.String
			}
		case organization.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				o.CreatedAt = value.Time
			}
		case organization.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				o.UpdatedAt = value.Time
			}
		case organization.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				o.Name = value.String
			}
		case organization.FieldSlug:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field slug", values[i])
			} else if value.Valid {
				o.Slug = value.String
			}
		case organization.FieldDomain:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field domain", values[i])
			} else if value.Valid {
				o.Domain = value.String
			}
		case organization.FieldLogoURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field logo_url", values[i])
			} else if value.Valid {
				o.LogoURL = value.String
			}
		case organization.FieldPlan:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field plan", values[i])
			} else if value.Valid {
				o.Plan = value.String
			}
		case organization.FieldActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field active", values[i])
			} else if value.Valid {
				o.Active = value.Bool
			}
		case organization.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &o.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		case organization.FieldTrialEndsAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field trial_ends_at", values[i])
			} else if value.Valid {
				o.TrialEndsAt = new(time.Time)
				*o.TrialEndsAt = value.Time
			}
		case organization.FieldTrialUsed:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field trial_used", values[i])
			} else if value.Valid {
				o.TrialUsed = value.Bool
			}
		default:
			o.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Organization.
// This includes values selected through modifiers, order, etc.
func (o *Organization) Value(name string) (ent.Value, error) {
	return o.selectValues.Get(name)
}

// QueryUsers queries the "users" edge of the Organization entity.
func (o *Organization) QueryUsers() *UserQuery {
	return NewOrganizationClient(o.config).QueryUsers(o)
}

// QueryAPIKeys queries the "api_keys" edge of the Organization entity.
func (o *Organization) QueryAPIKeys() *ApiKeyQuery {
	return NewOrganizationClient(o.config).QueryAPIKeys(o)
}

// QueryWebhooks queries the "webhooks" edge of the Organization entity.
func (o *Organization) QueryWebhooks() *WebhookQuery {
	return NewOrganizationClient(o.config).QueryWebhooks(o)
}

// QueryFeatureFlags queries the "feature_flags" edge of the Organization entity.
func (o *Organization) QueryFeatureFlags() *OrganizationFeatureQuery {
	return NewOrganizationClient(o.config).QueryFeatureFlags(o)
}

// QueryIdentityProviders queries the "identity_providers" edge of the Organization entity.
func (o *Organization) QueryIdentityProviders() *IdentityProviderQuery {
	return NewOrganizationClient(o.config).QueryIdentityProviders(o)
}

// QueryOauthClients queries the "oauth_clients" edge of the Organization entity.
func (o *Organization) QueryOauthClients() *OAuthClientQuery {
	return NewOrganizationClient(o.config).QueryOauthClients(o)
}

// Update returns a builder for updating this Organization.
// Note that you need to call Organization.Unwrap() before calling this method if this Organization
// was returned from a transaction, and the transaction was committed or rolled back.
func (o *Organization) Update() *OrganizationUpdateOne {
	return NewOrganizationClient(o.config).UpdateOne(o)
}

// Unwrap unwraps the Organization entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (o *Organization) Unwrap() *Organization {
	_tx, ok := o.config.driver.(*txDriver)
	if !ok {
		panic("ent: Organization is not a transactional entity")
	}
	o.config.driver = _tx.drv
	return o
}

// String implements the fmt.Stringer.
func (o *Organization) String() string {
	var builder strings.Builder
	builder.WriteString("Organization(")
	builder.WriteString(fmt.Sprintf("id=%v, ", o.ID))
	builder.WriteString("created_at=")
	builder.WriteString(o.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(o.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(o.Name)
	builder.WriteString(", ")
	builder.WriteString("slug=")
	builder.WriteString(o.Slug)
	builder.WriteString(", ")
	builder.WriteString("domain=")
	builder.WriteString(o.Domain)
	builder.WriteString(", ")
	builder.WriteString("logo_url=")
	builder.WriteString(o.LogoURL)
	builder.WriteString(", ")
	builder.WriteString("plan=")
	builder.WriteString(o.Plan)
	builder.WriteString(", ")
	builder.WriteString("active=")
	builder.WriteString(fmt.Sprintf("%v", o.Active))
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", o.Metadata))
	builder.WriteString(", ")
	if v := o.TrialEndsAt; v != nil {
		builder.WriteString("trial_ends_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("trial_used=")
	builder.WriteString(fmt.Sprintf("%v", o.TrialUsed))
	builder.WriteByte(')')
	return builder.String()
}

// Organizations is a parsable slice of Organization.
type Organizations []*Organization
