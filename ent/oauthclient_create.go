// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/juicycleff/frank/ent/oauthauthorization"
	"github.com/juicycleff/frank/ent/oauthclient"
	"github.com/juicycleff/frank/ent/oauthscope"
	"github.com/juicycleff/frank/ent/oauthtoken"
	"github.com/juicycleff/frank/ent/organization"
)

// OAuthClientCreate is the builder for creating a OAuthClient entity.
type OAuthClientCreate struct {
	config
	mutation *OAuthClientMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (occ *OAuthClientCreate) SetCreatedAt(t time.Time) *OAuthClientCreate {
	occ.mutation.SetCreatedAt(t)
	return occ
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (occ *OAuthClientCreate) SetNillableCreatedAt(t *time.Time) *OAuthClientCreate {
	if t != nil {
		occ.SetCreatedAt(*t)
	}
	return occ
}

// SetUpdatedAt sets the "updated_at" field.
func (occ *OAuthClientCreate) SetUpdatedAt(t time.Time) *OAuthClientCreate {
	occ.mutation.SetUpdatedAt(t)
	return occ
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (occ *OAuthClientCreate) SetNillableUpdatedAt(t *time.Time) *OAuthClientCreate {
	if t != nil {
		occ.SetUpdatedAt(*t)
	}
	return occ
}

// SetClientID sets the "client_id" field.
func (occ *OAuthClientCreate) SetClientID(s string) *OAuthClientCreate {
	occ.mutation.SetClientID(s)
	return occ
}

// SetClientSecret sets the "client_secret" field.
func (occ *OAuthClientCreate) SetClientSecret(s string) *OAuthClientCreate {
	occ.mutation.SetClientSecret(s)
	return occ
}

// SetClientName sets the "client_name" field.
func (occ *OAuthClientCreate) SetClientName(s string) *OAuthClientCreate {
	occ.mutation.SetClientName(s)
	return occ
}

// SetClientDescription sets the "client_description" field.
func (occ *OAuthClientCreate) SetClientDescription(s string) *OAuthClientCreate {
	occ.mutation.SetClientDescription(s)
	return occ
}

// SetNillableClientDescription sets the "client_description" field if the given value is not nil.
func (occ *OAuthClientCreate) SetNillableClientDescription(s *string) *OAuthClientCreate {
	if s != nil {
		occ.SetClientDescription(*s)
	}
	return occ
}

// SetClientURI sets the "client_uri" field.
func (occ *OAuthClientCreate) SetClientURI(s string) *OAuthClientCreate {
	occ.mutation.SetClientURI(s)
	return occ
}

// SetNillableClientURI sets the "client_uri" field if the given value is not nil.
func (occ *OAuthClientCreate) SetNillableClientURI(s *string) *OAuthClientCreate {
	if s != nil {
		occ.SetClientURI(*s)
	}
	return occ
}

// SetLogoURI sets the "logo_uri" field.
func (occ *OAuthClientCreate) SetLogoURI(s string) *OAuthClientCreate {
	occ.mutation.SetLogoURI(s)
	return occ
}

// SetNillableLogoURI sets the "logo_uri" field if the given value is not nil.
func (occ *OAuthClientCreate) SetNillableLogoURI(s *string) *OAuthClientCreate {
	if s != nil {
		occ.SetLogoURI(*s)
	}
	return occ
}

// SetRedirectUris sets the "redirect_uris" field.
func (occ *OAuthClientCreate) SetRedirectUris(s []string) *OAuthClientCreate {
	occ.mutation.SetRedirectUris(s)
	return occ
}

// SetPostLogoutRedirectUris sets the "post_logout_redirect_uris" field.
func (occ *OAuthClientCreate) SetPostLogoutRedirectUris(s []string) *OAuthClientCreate {
	occ.mutation.SetPostLogoutRedirectUris(s)
	return occ
}

// SetOrganizationID sets the "organization_id" field.
func (occ *OAuthClientCreate) SetOrganizationID(s string) *OAuthClientCreate {
	occ.mutation.SetOrganizationID(s)
	return occ
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (occ *OAuthClientCreate) SetNillableOrganizationID(s *string) *OAuthClientCreate {
	if s != nil {
		occ.SetOrganizationID(*s)
	}
	return occ
}

// SetPublic sets the "public" field.
func (occ *OAuthClientCreate) SetPublic(b bool) *OAuthClientCreate {
	occ.mutation.SetPublic(b)
	return occ
}

// SetNillablePublic sets the "public" field if the given value is not nil.
func (occ *OAuthClientCreate) SetNillablePublic(b *bool) *OAuthClientCreate {
	if b != nil {
		occ.SetPublic(*b)
	}
	return occ
}

// SetActive sets the "active" field.
func (occ *OAuthClientCreate) SetActive(b bool) *OAuthClientCreate {
	occ.mutation.SetActive(b)
	return occ
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (occ *OAuthClientCreate) SetNillableActive(b *bool) *OAuthClientCreate {
	if b != nil {
		occ.SetActive(*b)
	}
	return occ
}

// SetAllowedCorsOrigins sets the "allowed_cors_origins" field.
func (occ *OAuthClientCreate) SetAllowedCorsOrigins(s []string) *OAuthClientCreate {
	occ.mutation.SetAllowedCorsOrigins(s)
	return occ
}

// SetAllowedGrantTypes sets the "allowed_grant_types" field.
func (occ *OAuthClientCreate) SetAllowedGrantTypes(s []string) *OAuthClientCreate {
	occ.mutation.SetAllowedGrantTypes(s)
	return occ
}

// SetTokenExpirySeconds sets the "token_expiry_seconds" field.
func (occ *OAuthClientCreate) SetTokenExpirySeconds(i int) *OAuthClientCreate {
	occ.mutation.SetTokenExpirySeconds(i)
	return occ
}

// SetNillableTokenExpirySeconds sets the "token_expiry_seconds" field if the given value is not nil.
func (occ *OAuthClientCreate) SetNillableTokenExpirySeconds(i *int) *OAuthClientCreate {
	if i != nil {
		occ.SetTokenExpirySeconds(*i)
	}
	return occ
}

// SetRefreshTokenExpirySeconds sets the "refresh_token_expiry_seconds" field.
func (occ *OAuthClientCreate) SetRefreshTokenExpirySeconds(i int) *OAuthClientCreate {
	occ.mutation.SetRefreshTokenExpirySeconds(i)
	return occ
}

// SetNillableRefreshTokenExpirySeconds sets the "refresh_token_expiry_seconds" field if the given value is not nil.
func (occ *OAuthClientCreate) SetNillableRefreshTokenExpirySeconds(i *int) *OAuthClientCreate {
	if i != nil {
		occ.SetRefreshTokenExpirySeconds(*i)
	}
	return occ
}

// SetAuthCodeExpirySeconds sets the "auth_code_expiry_seconds" field.
func (occ *OAuthClientCreate) SetAuthCodeExpirySeconds(i int) *OAuthClientCreate {
	occ.mutation.SetAuthCodeExpirySeconds(i)
	return occ
}

// SetNillableAuthCodeExpirySeconds sets the "auth_code_expiry_seconds" field if the given value is not nil.
func (occ *OAuthClientCreate) SetNillableAuthCodeExpirySeconds(i *int) *OAuthClientCreate {
	if i != nil {
		occ.SetAuthCodeExpirySeconds(*i)
	}
	return occ
}

// SetRequiresPkce sets the "requires_pkce" field.
func (occ *OAuthClientCreate) SetRequiresPkce(b bool) *OAuthClientCreate {
	occ.mutation.SetRequiresPkce(b)
	return occ
}

// SetNillableRequiresPkce sets the "requires_pkce" field if the given value is not nil.
func (occ *OAuthClientCreate) SetNillableRequiresPkce(b *bool) *OAuthClientCreate {
	if b != nil {
		occ.SetRequiresPkce(*b)
	}
	return occ
}

// SetRequiresConsent sets the "requires_consent" field.
func (occ *OAuthClientCreate) SetRequiresConsent(b bool) *OAuthClientCreate {
	occ.mutation.SetRequiresConsent(b)
	return occ
}

// SetNillableRequiresConsent sets the "requires_consent" field if the given value is not nil.
func (occ *OAuthClientCreate) SetNillableRequiresConsent(b *bool) *OAuthClientCreate {
	if b != nil {
		occ.SetRequiresConsent(*b)
	}
	return occ
}

// SetID sets the "id" field.
func (occ *OAuthClientCreate) SetID(s string) *OAuthClientCreate {
	occ.mutation.SetID(s)
	return occ
}

// SetNillableID sets the "id" field if the given value is not nil.
func (occ *OAuthClientCreate) SetNillableID(s *string) *OAuthClientCreate {
	if s != nil {
		occ.SetID(*s)
	}
	return occ
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (occ *OAuthClientCreate) SetOrganization(o *Organization) *OAuthClientCreate {
	return occ.SetOrganizationID(o.ID)
}

// AddTokenIDs adds the "tokens" edge to the OAuthToken entity by IDs.
func (occ *OAuthClientCreate) AddTokenIDs(ids ...string) *OAuthClientCreate {
	occ.mutation.AddTokenIDs(ids...)
	return occ
}

// AddTokens adds the "tokens" edges to the OAuthToken entity.
func (occ *OAuthClientCreate) AddTokens(o ...*OAuthToken) *OAuthClientCreate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return occ.AddTokenIDs(ids...)
}

// AddAuthorizationIDs adds the "authorizations" edge to the OAuthAuthorization entity by IDs.
func (occ *OAuthClientCreate) AddAuthorizationIDs(ids ...string) *OAuthClientCreate {
	occ.mutation.AddAuthorizationIDs(ids...)
	return occ
}

// AddAuthorizations adds the "authorizations" edges to the OAuthAuthorization entity.
func (occ *OAuthClientCreate) AddAuthorizations(o ...*OAuthAuthorization) *OAuthClientCreate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return occ.AddAuthorizationIDs(ids...)
}

// AddScopeIDs adds the "scopes" edge to the OAuthScope entity by IDs.
func (occ *OAuthClientCreate) AddScopeIDs(ids ...string) *OAuthClientCreate {
	occ.mutation.AddScopeIDs(ids...)
	return occ
}

// AddScopes adds the "scopes" edges to the OAuthScope entity.
func (occ *OAuthClientCreate) AddScopes(o ...*OAuthScope) *OAuthClientCreate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return occ.AddScopeIDs(ids...)
}

// Mutation returns the OAuthClientMutation object of the builder.
func (occ *OAuthClientCreate) Mutation() *OAuthClientMutation {
	return occ.mutation
}

// Save creates the OAuthClient in the database.
func (occ *OAuthClientCreate) Save(ctx context.Context) (*OAuthClient, error) {
	occ.defaults()
	return withHooks(ctx, occ.sqlSave, occ.mutation, occ.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (occ *OAuthClientCreate) SaveX(ctx context.Context) *OAuthClient {
	v, err := occ.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (occ *OAuthClientCreate) Exec(ctx context.Context) error {
	_, err := occ.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (occ *OAuthClientCreate) ExecX(ctx context.Context) {
	if err := occ.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (occ *OAuthClientCreate) defaults() {
	if _, ok := occ.mutation.CreatedAt(); !ok {
		v := oauthclient.DefaultCreatedAt()
		occ.mutation.SetCreatedAt(v)
	}
	if _, ok := occ.mutation.UpdatedAt(); !ok {
		v := oauthclient.DefaultUpdatedAt()
		occ.mutation.SetUpdatedAt(v)
	}
	if _, ok := occ.mutation.Public(); !ok {
		v := oauthclient.DefaultPublic
		occ.mutation.SetPublic(v)
	}
	if _, ok := occ.mutation.Active(); !ok {
		v := oauthclient.DefaultActive
		occ.mutation.SetActive(v)
	}
	if _, ok := occ.mutation.AllowedGrantTypes(); !ok {
		v := oauthclient.DefaultAllowedGrantTypes
		occ.mutation.SetAllowedGrantTypes(v)
	}
	if _, ok := occ.mutation.TokenExpirySeconds(); !ok {
		v := oauthclient.DefaultTokenExpirySeconds
		occ.mutation.SetTokenExpirySeconds(v)
	}
	if _, ok := occ.mutation.RefreshTokenExpirySeconds(); !ok {
		v := oauthclient.DefaultRefreshTokenExpirySeconds
		occ.mutation.SetRefreshTokenExpirySeconds(v)
	}
	if _, ok := occ.mutation.AuthCodeExpirySeconds(); !ok {
		v := oauthclient.DefaultAuthCodeExpirySeconds
		occ.mutation.SetAuthCodeExpirySeconds(v)
	}
	if _, ok := occ.mutation.RequiresPkce(); !ok {
		v := oauthclient.DefaultRequiresPkce
		occ.mutation.SetRequiresPkce(v)
	}
	if _, ok := occ.mutation.RequiresConsent(); !ok {
		v := oauthclient.DefaultRequiresConsent
		occ.mutation.SetRequiresConsent(v)
	}
	if _, ok := occ.mutation.ID(); !ok {
		v := oauthclient.DefaultID()
		occ.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (occ *OAuthClientCreate) check() error {
	if _, ok := occ.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "OAuthClient.created_at"`)}
	}
	if _, ok := occ.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "OAuthClient.updated_at"`)}
	}
	if _, ok := occ.mutation.ClientID(); !ok {
		return &ValidationError{Name: "client_id", err: errors.New(`ent: missing required field "OAuthClient.client_id"`)}
	}
	if v, ok := occ.mutation.ClientID(); ok {
		if err := oauthclient.ClientIDValidator(v); err != nil {
			return &ValidationError{Name: "client_id", err: fmt.Errorf(`ent: validator failed for field "OAuthClient.client_id": %w`, err)}
		}
	}
	if _, ok := occ.mutation.ClientSecret(); !ok {
		return &ValidationError{Name: "client_secret", err: errors.New(`ent: missing required field "OAuthClient.client_secret"`)}
	}
	if v, ok := occ.mutation.ClientSecret(); ok {
		if err := oauthclient.ClientSecretValidator(v); err != nil {
			return &ValidationError{Name: "client_secret", err: fmt.Errorf(`ent: validator failed for field "OAuthClient.client_secret": %w`, err)}
		}
	}
	if _, ok := occ.mutation.ClientName(); !ok {
		return &ValidationError{Name: "client_name", err: errors.New(`ent: missing required field "OAuthClient.client_name"`)}
	}
	if v, ok := occ.mutation.ClientName(); ok {
		if err := oauthclient.ClientNameValidator(v); err != nil {
			return &ValidationError{Name: "client_name", err: fmt.Errorf(`ent: validator failed for field "OAuthClient.client_name": %w`, err)}
		}
	}
	if _, ok := occ.mutation.RedirectUris(); !ok {
		return &ValidationError{Name: "redirect_uris", err: errors.New(`ent: missing required field "OAuthClient.redirect_uris"`)}
	}
	if _, ok := occ.mutation.Public(); !ok {
		return &ValidationError{Name: "public", err: errors.New(`ent: missing required field "OAuthClient.public"`)}
	}
	if _, ok := occ.mutation.Active(); !ok {
		return &ValidationError{Name: "active", err: errors.New(`ent: missing required field "OAuthClient.active"`)}
	}
	if _, ok := occ.mutation.AllowedGrantTypes(); !ok {
		return &ValidationError{Name: "allowed_grant_types", err: errors.New(`ent: missing required field "OAuthClient.allowed_grant_types"`)}
	}
	if _, ok := occ.mutation.TokenExpirySeconds(); !ok {
		return &ValidationError{Name: "token_expiry_seconds", err: errors.New(`ent: missing required field "OAuthClient.token_expiry_seconds"`)}
	}
	if _, ok := occ.mutation.RefreshTokenExpirySeconds(); !ok {
		return &ValidationError{Name: "refresh_token_expiry_seconds", err: errors.New(`ent: missing required field "OAuthClient.refresh_token_expiry_seconds"`)}
	}
	if _, ok := occ.mutation.AuthCodeExpirySeconds(); !ok {
		return &ValidationError{Name: "auth_code_expiry_seconds", err: errors.New(`ent: missing required field "OAuthClient.auth_code_expiry_seconds"`)}
	}
	if _, ok := occ.mutation.RequiresPkce(); !ok {
		return &ValidationError{Name: "requires_pkce", err: errors.New(`ent: missing required field "OAuthClient.requires_pkce"`)}
	}
	if _, ok := occ.mutation.RequiresConsent(); !ok {
		return &ValidationError{Name: "requires_consent", err: errors.New(`ent: missing required field "OAuthClient.requires_consent"`)}
	}
	return nil
}

func (occ *OAuthClientCreate) sqlSave(ctx context.Context) (*OAuthClient, error) {
	if err := occ.check(); err != nil {
		return nil, err
	}
	_node, _spec := occ.createSpec()
	if err := sqlgraph.CreateNode(ctx, occ.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected OAuthClient.ID type: %T", _spec.ID.Value)
		}
	}
	occ.mutation.id = &_node.ID
	occ.mutation.done = true
	return _node, nil
}

func (occ *OAuthClientCreate) createSpec() (*OAuthClient, *sqlgraph.CreateSpec) {
	var (
		_node = &OAuthClient{config: occ.config}
		_spec = sqlgraph.NewCreateSpec(oauthclient.Table, sqlgraph.NewFieldSpec(oauthclient.FieldID, field.TypeString))
	)
	if id, ok := occ.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := occ.mutation.CreatedAt(); ok {
		_spec.SetField(oauthclient.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := occ.mutation.UpdatedAt(); ok {
		_spec.SetField(oauthclient.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := occ.mutation.ClientID(); ok {
		_spec.SetField(oauthclient.FieldClientID, field.TypeString, value)
		_node.ClientID = value
	}
	if value, ok := occ.mutation.ClientSecret(); ok {
		_spec.SetField(oauthclient.FieldClientSecret, field.TypeString, value)
		_node.ClientSecret = value
	}
	if value, ok := occ.mutation.ClientName(); ok {
		_spec.SetField(oauthclient.FieldClientName, field.TypeString, value)
		_node.ClientName = value
	}
	if value, ok := occ.mutation.ClientDescription(); ok {
		_spec.SetField(oauthclient.FieldClientDescription, field.TypeString, value)
		_node.ClientDescription = value
	}
	if value, ok := occ.mutation.ClientURI(); ok {
		_spec.SetField(oauthclient.FieldClientURI, field.TypeString, value)
		_node.ClientURI = value
	}
	if value, ok := occ.mutation.LogoURI(); ok {
		_spec.SetField(oauthclient.FieldLogoURI, field.TypeString, value)
		_node.LogoURI = value
	}
	if value, ok := occ.mutation.RedirectUris(); ok {
		_spec.SetField(oauthclient.FieldRedirectUris, field.TypeJSON, value)
		_node.RedirectUris = value
	}
	if value, ok := occ.mutation.PostLogoutRedirectUris(); ok {
		_spec.SetField(oauthclient.FieldPostLogoutRedirectUris, field.TypeJSON, value)
		_node.PostLogoutRedirectUris = value
	}
	if value, ok := occ.mutation.Public(); ok {
		_spec.SetField(oauthclient.FieldPublic, field.TypeBool, value)
		_node.Public = value
	}
	if value, ok := occ.mutation.Active(); ok {
		_spec.SetField(oauthclient.FieldActive, field.TypeBool, value)
		_node.Active = value
	}
	if value, ok := occ.mutation.AllowedCorsOrigins(); ok {
		_spec.SetField(oauthclient.FieldAllowedCorsOrigins, field.TypeJSON, value)
		_node.AllowedCorsOrigins = value
	}
	if value, ok := occ.mutation.AllowedGrantTypes(); ok {
		_spec.SetField(oauthclient.FieldAllowedGrantTypes, field.TypeJSON, value)
		_node.AllowedGrantTypes = value
	}
	if value, ok := occ.mutation.TokenExpirySeconds(); ok {
		_spec.SetField(oauthclient.FieldTokenExpirySeconds, field.TypeInt, value)
		_node.TokenExpirySeconds = value
	}
	if value, ok := occ.mutation.RefreshTokenExpirySeconds(); ok {
		_spec.SetField(oauthclient.FieldRefreshTokenExpirySeconds, field.TypeInt, value)
		_node.RefreshTokenExpirySeconds = value
	}
	if value, ok := occ.mutation.AuthCodeExpirySeconds(); ok {
		_spec.SetField(oauthclient.FieldAuthCodeExpirySeconds, field.TypeInt, value)
		_node.AuthCodeExpirySeconds = value
	}
	if value, ok := occ.mutation.RequiresPkce(); ok {
		_spec.SetField(oauthclient.FieldRequiresPkce, field.TypeBool, value)
		_node.RequiresPkce = value
	}
	if value, ok := occ.mutation.RequiresConsent(); ok {
		_spec.SetField(oauthclient.FieldRequiresConsent, field.TypeBool, value)
		_node.RequiresConsent = value
	}
	if nodes := occ.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauthclient.OrganizationTable,
			Columns: []string{oauthclient.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OrganizationID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := occ.mutation.TokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oauthclient.TokensTable,
			Columns: []string{oauthclient.TokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthtoken.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := occ.mutation.AuthorizationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oauthclient.AuthorizationsTable,
			Columns: []string{oauthclient.AuthorizationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthauthorization.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := occ.mutation.ScopesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   oauthclient.ScopesTable,
			Columns: oauthclient.ScopesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthscope.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OAuthClientCreateBulk is the builder for creating many OAuthClient entities in bulk.
type OAuthClientCreateBulk struct {
	config
	err      error
	builders []*OAuthClientCreate
}

// Save creates the OAuthClient entities in the database.
func (occb *OAuthClientCreateBulk) Save(ctx context.Context) ([]*OAuthClient, error) {
	if occb.err != nil {
		return nil, occb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(occb.builders))
	nodes := make([]*OAuthClient, len(occb.builders))
	mutators := make([]Mutator, len(occb.builders))
	for i := range occb.builders {
		func(i int, root context.Context) {
			builder := occb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OAuthClientMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, occb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, occb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, occb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (occb *OAuthClientCreateBulk) SaveX(ctx context.Context) []*OAuthClient {
	v, err := occb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (occb *OAuthClientCreateBulk) Exec(ctx context.Context) error {
	_, err := occb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (occb *OAuthClientCreateBulk) ExecX(ctx context.Context) {
	if err := occb.Exec(ctx); err != nil {
		panic(err)
	}
}
