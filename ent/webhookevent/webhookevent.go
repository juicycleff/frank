// Code generated by ent, DO NOT EDIT.

package webhookevent

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the webhookevent type in the database.
	Label = "webhook_event"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldWebhookID holds the string denoting the webhook_id field in the database.
	FieldWebhookID = "webhook_id"
	// FieldEventType holds the string denoting the event_type field in the database.
	FieldEventType = "event_type"
	// FieldHeaders holds the string denoting the headers field in the database.
	FieldHeaders = "headers"
	// FieldPayload holds the string denoting the payload field in the database.
	FieldPayload = "payload"
	// FieldDelivered holds the string denoting the delivered field in the database.
	FieldDelivered = "delivered"
	// FieldDeliveredAt holds the string denoting the delivered_at field in the database.
	FieldDeliveredAt = "delivered_at"
	// FieldAttempts holds the string denoting the attempts field in the database.
	FieldAttempts = "attempts"
	// FieldNextRetry holds the string denoting the next_retry field in the database.
	FieldNextRetry = "next_retry"
	// FieldStatusCode holds the string denoting the status_code field in the database.
	FieldStatusCode = "status_code"
	// FieldResponseBody holds the string denoting the response_body field in the database.
	FieldResponseBody = "response_body"
	// FieldError holds the string denoting the error field in the database.
	FieldError = "error"
	// EdgeWebhook holds the string denoting the webhook edge name in mutations.
	EdgeWebhook = "webhook"
	// Table holds the table name of the webhookevent in the database.
	Table = "webhook_events"
	// WebhookTable is the table that holds the webhook relation/edge.
	WebhookTable = "webhook_events"
	// WebhookInverseTable is the table name for the Webhook entity.
	// It exists in this package in order to avoid circular dependency with the "webhook" package.
	WebhookInverseTable = "webhooks"
	// WebhookColumn is the table column denoting the webhook relation/edge.
	WebhookColumn = "webhook_id"
)

// Columns holds all SQL columns for webhookevent fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldWebhookID,
	FieldEventType,
	FieldHeaders,
	FieldPayload,
	FieldDelivered,
	FieldDeliveredAt,
	FieldAttempts,
	FieldNextRetry,
	FieldStatusCode,
	FieldResponseBody,
	FieldError,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// WebhookIDValidator is a validator for the "webhook_id" field. It is called by the builders before save.
	WebhookIDValidator func(string) error
	// EventTypeValidator is a validator for the "event_type" field. It is called by the builders before save.
	EventTypeValidator func(string) error
	// DefaultDelivered holds the default value on creation for the "delivered" field.
	DefaultDelivered bool
	// DefaultAttempts holds the default value on creation for the "attempts" field.
	DefaultAttempts int
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
)

// OrderOption defines the ordering options for the WebhookEvent queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByWebhookID orders the results by the webhook_id field.
func ByWebhookID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWebhookID, opts...).ToFunc()
}

// ByEventType orders the results by the event_type field.
func ByEventType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEventType, opts...).ToFunc()
}

// ByDelivered orders the results by the delivered field.
func ByDelivered(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDelivered, opts...).ToFunc()
}

// ByDeliveredAt orders the results by the delivered_at field.
func ByDeliveredAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeliveredAt, opts...).ToFunc()
}

// ByAttempts orders the results by the attempts field.
func ByAttempts(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAttempts, opts...).ToFunc()
}

// ByNextRetry orders the results by the next_retry field.
func ByNextRetry(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNextRetry, opts...).ToFunc()
}

// ByStatusCode orders the results by the status_code field.
func ByStatusCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatusCode, opts...).ToFunc()
}

// ByResponseBody orders the results by the response_body field.
func ByResponseBody(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResponseBody, opts...).ToFunc()
}

// ByError orders the results by the error field.
func ByError(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldError, opts...).ToFunc()
}

// ByWebhookField orders the results by webhook field.
func ByWebhookField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newWebhookStep(), sql.OrderByField(field, opts...))
	}
}
func newWebhookStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(WebhookInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, WebhookTable, WebhookColumn),
	)
}
