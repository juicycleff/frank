// Copyright 2023-present XRaph LLC. All rights reserved.
// This source code is licensed under the XRaph LLC license found
// in the LICENSE file in the root directory of this source tree.
// Code generated by ent, DO NOT EDIT.

package webhookevent

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/rs/xid"
	
)

// ID filters vertices based on their ID field.
func ID(id xid.ID) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id xid.ID) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id xid.ID) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...xid.ID) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...xid.ID) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id xid.ID) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id xid.ID) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id xid.ID) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id xid.ID) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldEQ(FieldDeletedAt, v))
}

// WebhookID applies equality check predicate on the "webhook_id" field. It's identical to WebhookIDEQ.
func WebhookID(v xid.ID) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldEQ(FieldWebhookID, v))
}

// EventType applies equality check predicate on the "event_type" field. It's identical to EventTypeEQ.
func EventType(v string) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldEQ(FieldEventType, v))
}

// Delivered applies equality check predicate on the "delivered" field. It's identical to DeliveredEQ.
func Delivered(v bool) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldEQ(FieldDelivered, v))
}

// DeliveredAt applies equality check predicate on the "delivered_at" field. It's identical to DeliveredAtEQ.
func DeliveredAt(v time.Time) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldEQ(FieldDeliveredAt, v))
}

// Attempts applies equality check predicate on the "attempts" field. It's identical to AttemptsEQ.
func Attempts(v int) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldEQ(FieldAttempts, v))
}

// NextRetry applies equality check predicate on the "next_retry" field. It's identical to NextRetryEQ.
func NextRetry(v time.Time) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldEQ(FieldNextRetry, v))
}

// StatusCode applies equality check predicate on the "status_code" field. It's identical to StatusCodeEQ.
func StatusCode(v int) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldEQ(FieldStatusCode, v))
}

// ResponseBody applies equality check predicate on the "response_body" field. It's identical to ResponseBodyEQ.
func ResponseBody(v string) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldEQ(FieldResponseBody, v))
}

// Error applies equality check predicate on the "error" field. It's identical to ErrorEQ.
func Error(v string) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldEQ(FieldError, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldNotNull(FieldDeletedAt))
}

// WebhookIDEQ applies the EQ predicate on the "webhook_id" field.
func WebhookIDEQ(v xid.ID) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldEQ(FieldWebhookID, v))
}

// WebhookIDNEQ applies the NEQ predicate on the "webhook_id" field.
func WebhookIDNEQ(v xid.ID) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldNEQ(FieldWebhookID, v))
}

// WebhookIDIn applies the In predicate on the "webhook_id" field.
func WebhookIDIn(vs ...xid.ID) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldIn(FieldWebhookID, vs...))
}

// WebhookIDNotIn applies the NotIn predicate on the "webhook_id" field.
func WebhookIDNotIn(vs ...xid.ID) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldNotIn(FieldWebhookID, vs...))
}

// WebhookIDGT applies the GT predicate on the "webhook_id" field.
func WebhookIDGT(v xid.ID) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldGT(FieldWebhookID, v))
}

// WebhookIDGTE applies the GTE predicate on the "webhook_id" field.
func WebhookIDGTE(v xid.ID) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldGTE(FieldWebhookID, v))
}

// WebhookIDLT applies the LT predicate on the "webhook_id" field.
func WebhookIDLT(v xid.ID) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldLT(FieldWebhookID, v))
}

// WebhookIDLTE applies the LTE predicate on the "webhook_id" field.
func WebhookIDLTE(v xid.ID) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldLTE(FieldWebhookID, v))
}

// WebhookIDContains applies the Contains predicate on the "webhook_id" field.
func WebhookIDContains(v xid.ID) predicate.WebhookEvent {
	vc := v.String()
	return predicate.WebhookEvent(sql.FieldContains(FieldWebhookID, vc))
}

// WebhookIDHasPrefix applies the HasPrefix predicate on the "webhook_id" field.
func WebhookIDHasPrefix(v xid.ID) predicate.WebhookEvent {
	vc := v.String()
	return predicate.WebhookEvent(sql.FieldHasPrefix(FieldWebhookID, vc))
}

// WebhookIDHasSuffix applies the HasSuffix predicate on the "webhook_id" field.
func WebhookIDHasSuffix(v xid.ID) predicate.WebhookEvent {
	vc := v.String()
	return predicate.WebhookEvent(sql.FieldHasSuffix(FieldWebhookID, vc))
}

// WebhookIDEqualFold applies the EqualFold predicate on the "webhook_id" field.
func WebhookIDEqualFold(v xid.ID) predicate.WebhookEvent {
	vc := v.String()
	return predicate.WebhookEvent(sql.FieldEqualFold(FieldWebhookID, vc))
}

// WebhookIDContainsFold applies the ContainsFold predicate on the "webhook_id" field.
func WebhookIDContainsFold(v xid.ID) predicate.WebhookEvent {
	vc := v.String()
	return predicate.WebhookEvent(sql.FieldContainsFold(FieldWebhookID, vc))
}

// EventTypeEQ applies the EQ predicate on the "event_type" field.
func EventTypeEQ(v string) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldEQ(FieldEventType, v))
}

// EventTypeNEQ applies the NEQ predicate on the "event_type" field.
func EventTypeNEQ(v string) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldNEQ(FieldEventType, v))
}

// EventTypeIn applies the In predicate on the "event_type" field.
func EventTypeIn(vs ...string) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldIn(FieldEventType, vs...))
}

// EventTypeNotIn applies the NotIn predicate on the "event_type" field.
func EventTypeNotIn(vs ...string) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldNotIn(FieldEventType, vs...))
}

// EventTypeGT applies the GT predicate on the "event_type" field.
func EventTypeGT(v string) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldGT(FieldEventType, v))
}

// EventTypeGTE applies the GTE predicate on the "event_type" field.
func EventTypeGTE(v string) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldGTE(FieldEventType, v))
}

// EventTypeLT applies the LT predicate on the "event_type" field.
func EventTypeLT(v string) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldLT(FieldEventType, v))
}

// EventTypeLTE applies the LTE predicate on the "event_type" field.
func EventTypeLTE(v string) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldLTE(FieldEventType, v))
}

// EventTypeContains applies the Contains predicate on the "event_type" field.
func EventTypeContains(v string) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldContains(FieldEventType, v))
}

// EventTypeHasPrefix applies the HasPrefix predicate on the "event_type" field.
func EventTypeHasPrefix(v string) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldHasPrefix(FieldEventType, v))
}

// EventTypeHasSuffix applies the HasSuffix predicate on the "event_type" field.
func EventTypeHasSuffix(v string) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldHasSuffix(FieldEventType, v))
}

// EventTypeEqualFold applies the EqualFold predicate on the "event_type" field.
func EventTypeEqualFold(v string) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldEqualFold(FieldEventType, v))
}

// EventTypeContainsFold applies the ContainsFold predicate on the "event_type" field.
func EventTypeContainsFold(v string) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldContainsFold(FieldEventType, v))
}

// HeadersIsNil applies the IsNil predicate on the "headers" field.
func HeadersIsNil() predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldIsNull(FieldHeaders))
}

// HeadersNotNil applies the NotNil predicate on the "headers" field.
func HeadersNotNil() predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldNotNull(FieldHeaders))
}

// PayloadIsNil applies the IsNil predicate on the "payload" field.
func PayloadIsNil() predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldIsNull(FieldPayload))
}

// PayloadNotNil applies the NotNil predicate on the "payload" field.
func PayloadNotNil() predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldNotNull(FieldPayload))
}

// DeliveredEQ applies the EQ predicate on the "delivered" field.
func DeliveredEQ(v bool) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldEQ(FieldDelivered, v))
}

// DeliveredNEQ applies the NEQ predicate on the "delivered" field.
func DeliveredNEQ(v bool) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldNEQ(FieldDelivered, v))
}

// DeliveredAtEQ applies the EQ predicate on the "delivered_at" field.
func DeliveredAtEQ(v time.Time) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldEQ(FieldDeliveredAt, v))
}

// DeliveredAtNEQ applies the NEQ predicate on the "delivered_at" field.
func DeliveredAtNEQ(v time.Time) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldNEQ(FieldDeliveredAt, v))
}

// DeliveredAtIn applies the In predicate on the "delivered_at" field.
func DeliveredAtIn(vs ...time.Time) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldIn(FieldDeliveredAt, vs...))
}

// DeliveredAtNotIn applies the NotIn predicate on the "delivered_at" field.
func DeliveredAtNotIn(vs ...time.Time) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldNotIn(FieldDeliveredAt, vs...))
}

// DeliveredAtGT applies the GT predicate on the "delivered_at" field.
func DeliveredAtGT(v time.Time) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldGT(FieldDeliveredAt, v))
}

// DeliveredAtGTE applies the GTE predicate on the "delivered_at" field.
func DeliveredAtGTE(v time.Time) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldGTE(FieldDeliveredAt, v))
}

// DeliveredAtLT applies the LT predicate on the "delivered_at" field.
func DeliveredAtLT(v time.Time) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldLT(FieldDeliveredAt, v))
}

// DeliveredAtLTE applies the LTE predicate on the "delivered_at" field.
func DeliveredAtLTE(v time.Time) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldLTE(FieldDeliveredAt, v))
}

// DeliveredAtIsNil applies the IsNil predicate on the "delivered_at" field.
func DeliveredAtIsNil() predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldIsNull(FieldDeliveredAt))
}

// DeliveredAtNotNil applies the NotNil predicate on the "delivered_at" field.
func DeliveredAtNotNil() predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldNotNull(FieldDeliveredAt))
}

// AttemptsEQ applies the EQ predicate on the "attempts" field.
func AttemptsEQ(v int) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldEQ(FieldAttempts, v))
}

// AttemptsNEQ applies the NEQ predicate on the "attempts" field.
func AttemptsNEQ(v int) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldNEQ(FieldAttempts, v))
}

// AttemptsIn applies the In predicate on the "attempts" field.
func AttemptsIn(vs ...int) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldIn(FieldAttempts, vs...))
}

// AttemptsNotIn applies the NotIn predicate on the "attempts" field.
func AttemptsNotIn(vs ...int) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldNotIn(FieldAttempts, vs...))
}

// AttemptsGT applies the GT predicate on the "attempts" field.
func AttemptsGT(v int) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldGT(FieldAttempts, v))
}

// AttemptsGTE applies the GTE predicate on the "attempts" field.
func AttemptsGTE(v int) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldGTE(FieldAttempts, v))
}

// AttemptsLT applies the LT predicate on the "attempts" field.
func AttemptsLT(v int) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldLT(FieldAttempts, v))
}

// AttemptsLTE applies the LTE predicate on the "attempts" field.
func AttemptsLTE(v int) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldLTE(FieldAttempts, v))
}

// NextRetryEQ applies the EQ predicate on the "next_retry" field.
func NextRetryEQ(v time.Time) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldEQ(FieldNextRetry, v))
}

// NextRetryNEQ applies the NEQ predicate on the "next_retry" field.
func NextRetryNEQ(v time.Time) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldNEQ(FieldNextRetry, v))
}

// NextRetryIn applies the In predicate on the "next_retry" field.
func NextRetryIn(vs ...time.Time) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldIn(FieldNextRetry, vs...))
}

// NextRetryNotIn applies the NotIn predicate on the "next_retry" field.
func NextRetryNotIn(vs ...time.Time) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldNotIn(FieldNextRetry, vs...))
}

// NextRetryGT applies the GT predicate on the "next_retry" field.
func NextRetryGT(v time.Time) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldGT(FieldNextRetry, v))
}

// NextRetryGTE applies the GTE predicate on the "next_retry" field.
func NextRetryGTE(v time.Time) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldGTE(FieldNextRetry, v))
}

// NextRetryLT applies the LT predicate on the "next_retry" field.
func NextRetryLT(v time.Time) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldLT(FieldNextRetry, v))
}

// NextRetryLTE applies the LTE predicate on the "next_retry" field.
func NextRetryLTE(v time.Time) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldLTE(FieldNextRetry, v))
}

// NextRetryIsNil applies the IsNil predicate on the "next_retry" field.
func NextRetryIsNil() predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldIsNull(FieldNextRetry))
}

// NextRetryNotNil applies the NotNil predicate on the "next_retry" field.
func NextRetryNotNil() predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldNotNull(FieldNextRetry))
}

// StatusCodeEQ applies the EQ predicate on the "status_code" field.
func StatusCodeEQ(v int) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldEQ(FieldStatusCode, v))
}

// StatusCodeNEQ applies the NEQ predicate on the "status_code" field.
func StatusCodeNEQ(v int) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldNEQ(FieldStatusCode, v))
}

// StatusCodeIn applies the In predicate on the "status_code" field.
func StatusCodeIn(vs ...int) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldIn(FieldStatusCode, vs...))
}

// StatusCodeNotIn applies the NotIn predicate on the "status_code" field.
func StatusCodeNotIn(vs ...int) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldNotIn(FieldStatusCode, vs...))
}

// StatusCodeGT applies the GT predicate on the "status_code" field.
func StatusCodeGT(v int) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldGT(FieldStatusCode, v))
}

// StatusCodeGTE applies the GTE predicate on the "status_code" field.
func StatusCodeGTE(v int) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldGTE(FieldStatusCode, v))
}

// StatusCodeLT applies the LT predicate on the "status_code" field.
func StatusCodeLT(v int) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldLT(FieldStatusCode, v))
}

// StatusCodeLTE applies the LTE predicate on the "status_code" field.
func StatusCodeLTE(v int) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldLTE(FieldStatusCode, v))
}

// StatusCodeIsNil applies the IsNil predicate on the "status_code" field.
func StatusCodeIsNil() predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldIsNull(FieldStatusCode))
}

// StatusCodeNotNil applies the NotNil predicate on the "status_code" field.
func StatusCodeNotNil() predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldNotNull(FieldStatusCode))
}

// ResponseBodyEQ applies the EQ predicate on the "response_body" field.
func ResponseBodyEQ(v string) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldEQ(FieldResponseBody, v))
}

// ResponseBodyNEQ applies the NEQ predicate on the "response_body" field.
func ResponseBodyNEQ(v string) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldNEQ(FieldResponseBody, v))
}

// ResponseBodyIn applies the In predicate on the "response_body" field.
func ResponseBodyIn(vs ...string) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldIn(FieldResponseBody, vs...))
}

// ResponseBodyNotIn applies the NotIn predicate on the "response_body" field.
func ResponseBodyNotIn(vs ...string) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldNotIn(FieldResponseBody, vs...))
}

// ResponseBodyGT applies the GT predicate on the "response_body" field.
func ResponseBodyGT(v string) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldGT(FieldResponseBody, v))
}

// ResponseBodyGTE applies the GTE predicate on the "response_body" field.
func ResponseBodyGTE(v string) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldGTE(FieldResponseBody, v))
}

// ResponseBodyLT applies the LT predicate on the "response_body" field.
func ResponseBodyLT(v string) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldLT(FieldResponseBody, v))
}

// ResponseBodyLTE applies the LTE predicate on the "response_body" field.
func ResponseBodyLTE(v string) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldLTE(FieldResponseBody, v))
}

// ResponseBodyContains applies the Contains predicate on the "response_body" field.
func ResponseBodyContains(v string) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldContains(FieldResponseBody, v))
}

// ResponseBodyHasPrefix applies the HasPrefix predicate on the "response_body" field.
func ResponseBodyHasPrefix(v string) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldHasPrefix(FieldResponseBody, v))
}

// ResponseBodyHasSuffix applies the HasSuffix predicate on the "response_body" field.
func ResponseBodyHasSuffix(v string) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldHasSuffix(FieldResponseBody, v))
}

// ResponseBodyIsNil applies the IsNil predicate on the "response_body" field.
func ResponseBodyIsNil() predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldIsNull(FieldResponseBody))
}

// ResponseBodyNotNil applies the NotNil predicate on the "response_body" field.
func ResponseBodyNotNil() predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldNotNull(FieldResponseBody))
}

// ResponseBodyEqualFold applies the EqualFold predicate on the "response_body" field.
func ResponseBodyEqualFold(v string) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldEqualFold(FieldResponseBody, v))
}

// ResponseBodyContainsFold applies the ContainsFold predicate on the "response_body" field.
func ResponseBodyContainsFold(v string) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldContainsFold(FieldResponseBody, v))
}

// ErrorEQ applies the EQ predicate on the "error" field.
func ErrorEQ(v string) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldEQ(FieldError, v))
}

// ErrorNEQ applies the NEQ predicate on the "error" field.
func ErrorNEQ(v string) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldNEQ(FieldError, v))
}

// ErrorIn applies the In predicate on the "error" field.
func ErrorIn(vs ...string) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldIn(FieldError, vs...))
}

// ErrorNotIn applies the NotIn predicate on the "error" field.
func ErrorNotIn(vs ...string) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldNotIn(FieldError, vs...))
}

// ErrorGT applies the GT predicate on the "error" field.
func ErrorGT(v string) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldGT(FieldError, v))
}

// ErrorGTE applies the GTE predicate on the "error" field.
func ErrorGTE(v string) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldGTE(FieldError, v))
}

// ErrorLT applies the LT predicate on the "error" field.
func ErrorLT(v string) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldLT(FieldError, v))
}

// ErrorLTE applies the LTE predicate on the "error" field.
func ErrorLTE(v string) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldLTE(FieldError, v))
}

// ErrorContains applies the Contains predicate on the "error" field.
func ErrorContains(v string) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldContains(FieldError, v))
}

// ErrorHasPrefix applies the HasPrefix predicate on the "error" field.
func ErrorHasPrefix(v string) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldHasPrefix(FieldError, v))
}

// ErrorHasSuffix applies the HasSuffix predicate on the "error" field.
func ErrorHasSuffix(v string) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldHasSuffix(FieldError, v))
}

// ErrorIsNil applies the IsNil predicate on the "error" field.
func ErrorIsNil() predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldIsNull(FieldError))
}

// ErrorNotNil applies the NotNil predicate on the "error" field.
func ErrorNotNil() predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldNotNull(FieldError))
}

// ErrorEqualFold applies the EqualFold predicate on the "error" field.
func ErrorEqualFold(v string) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldEqualFold(FieldError, v))
}

// ErrorContainsFold applies the ContainsFold predicate on the "error" field.
func ErrorContainsFold(v string) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.FieldContainsFold(FieldError, v))
}

// HasWebhook applies the HasEdge predicate on the "webhook" edge.
func HasWebhook() predicate.WebhookEvent {
	return predicate.WebhookEvent(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, WebhookTable, WebhookColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWebhookWith applies the HasEdge predicate on the "webhook" edge with a given conditions (other predicates).
func HasWebhookWith(preds ...predicate.Webhook) predicate.WebhookEvent {
	return predicate.WebhookEvent(func(s *sql.Selector) {
		step := newWebhookStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.WebhookEvent) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.WebhookEvent) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.WebhookEvent) predicate.WebhookEvent {
	return predicate.WebhookEvent(sql.NotPredicates(p))
}
