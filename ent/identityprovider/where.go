// Copyright 2023-present XRaph LLC. All rights reserved.
// This source code is licensed under the XRaph LLC license found
// in the LICENSE file in the root directory of this source tree.
// Code generated by ent, DO NOT EDIT.

package identityprovider

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/rs/xid"
	"github.com/xraph/frank/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id xid.ID) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id xid.ID) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id xid.ID) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...xid.ID) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...xid.ID) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id xid.ID) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id xid.ID) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id xid.ID) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id xid.ID) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldEQ(FieldDeletedAt, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldEQ(FieldName, v))
}

// OrganizationID applies equality check predicate on the "organization_id" field. It's identical to OrganizationIDEQ.
func OrganizationID(v xid.ID) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldEQ(FieldOrganizationID, v))
}

// ProviderType applies equality check predicate on the "provider_type" field. It's identical to ProviderTypeEQ.
func ProviderType(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldEQ(FieldProviderType, v))
}

// ClientID applies equality check predicate on the "client_id" field. It's identical to ClientIDEQ.
func ClientID(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldEQ(FieldClientID, v))
}

// ClientSecret applies equality check predicate on the "client_secret" field. It's identical to ClientSecretEQ.
func ClientSecret(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldEQ(FieldClientSecret, v))
}

// Issuer applies equality check predicate on the "issuer" field. It's identical to IssuerEQ.
func Issuer(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldEQ(FieldIssuer, v))
}

// AuthorizationEndpoint applies equality check predicate on the "authorization_endpoint" field. It's identical to AuthorizationEndpointEQ.
func AuthorizationEndpoint(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldEQ(FieldAuthorizationEndpoint, v))
}

// TokenEndpoint applies equality check predicate on the "token_endpoint" field. It's identical to TokenEndpointEQ.
func TokenEndpoint(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldEQ(FieldTokenEndpoint, v))
}

// UserinfoEndpoint applies equality check predicate on the "userinfo_endpoint" field. It's identical to UserinfoEndpointEQ.
func UserinfoEndpoint(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldEQ(FieldUserinfoEndpoint, v))
}

// JwksURI applies equality check predicate on the "jwks_uri" field. It's identical to JwksURIEQ.
func JwksURI(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldEQ(FieldJwksURI, v))
}

// MetadataURL applies equality check predicate on the "metadata_url" field. It's identical to MetadataURLEQ.
func MetadataURL(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldEQ(FieldMetadataURL, v))
}

// RedirectURI applies equality check predicate on the "redirect_uri" field. It's identical to RedirectURIEQ.
func RedirectURI(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldEQ(FieldRedirectURI, v))
}

// Certificate applies equality check predicate on the "certificate" field. It's identical to CertificateEQ.
func Certificate(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldEQ(FieldCertificate, v))
}

// PrivateKey applies equality check predicate on the "private_key" field. It's identical to PrivateKeyEQ.
func PrivateKey(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldEQ(FieldPrivateKey, v))
}

// Active applies equality check predicate on the "active" field. It's identical to ActiveEQ.
func Active(v bool) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldEQ(FieldActive, v))
}

// Enabled applies equality check predicate on the "enabled" field. It's identical to EnabledEQ.
func Enabled(v bool) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldEQ(FieldEnabled, v))
}

// Primary applies equality check predicate on the "primary" field. It's identical to PrimaryEQ.
func Primary(v bool) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldEQ(FieldPrimary, v))
}

// AutoProvision applies equality check predicate on the "auto_provision" field. It's identical to AutoProvisionEQ.
func AutoProvision(v bool) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldEQ(FieldAutoProvision, v))
}

// DefaultRole applies equality check predicate on the "default_role" field. It's identical to DefaultRoleEQ.
func DefaultRole(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldEQ(FieldDefaultRole, v))
}

// Domain applies equality check predicate on the "domain" field. It's identical to DomainEQ.
func Domain(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldEQ(FieldDomain, v))
}

// IconURL applies equality check predicate on the "icon_url" field. It's identical to IconURLEQ.
func IconURL(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldEQ(FieldIconURL, v))
}

// ButtonText applies equality check predicate on the "button_text" field. It's identical to ButtonTextEQ.
func ButtonText(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldEQ(FieldButtonText, v))
}

// Protocol applies equality check predicate on the "protocol" field. It's identical to ProtocolEQ.
func Protocol(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldEQ(FieldProtocol, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldNotNull(FieldDeletedAt))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldContainsFold(FieldName, v))
}

// OrganizationIDEQ applies the EQ predicate on the "organization_id" field.
func OrganizationIDEQ(v xid.ID) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldEQ(FieldOrganizationID, v))
}

// OrganizationIDNEQ applies the NEQ predicate on the "organization_id" field.
func OrganizationIDNEQ(v xid.ID) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldNEQ(FieldOrganizationID, v))
}

// OrganizationIDIn applies the In predicate on the "organization_id" field.
func OrganizationIDIn(vs ...xid.ID) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldIn(FieldOrganizationID, vs...))
}

// OrganizationIDNotIn applies the NotIn predicate on the "organization_id" field.
func OrganizationIDNotIn(vs ...xid.ID) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldNotIn(FieldOrganizationID, vs...))
}

// OrganizationIDGT applies the GT predicate on the "organization_id" field.
func OrganizationIDGT(v xid.ID) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldGT(FieldOrganizationID, v))
}

// OrganizationIDGTE applies the GTE predicate on the "organization_id" field.
func OrganizationIDGTE(v xid.ID) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldGTE(FieldOrganizationID, v))
}

// OrganizationIDLT applies the LT predicate on the "organization_id" field.
func OrganizationIDLT(v xid.ID) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldLT(FieldOrganizationID, v))
}

// OrganizationIDLTE applies the LTE predicate on the "organization_id" field.
func OrganizationIDLTE(v xid.ID) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldLTE(FieldOrganizationID, v))
}

// OrganizationIDContains applies the Contains predicate on the "organization_id" field.
func OrganizationIDContains(v xid.ID) predicate.IdentityProvider {
	vc := v.String()
	return predicate.IdentityProvider(sql.FieldContains(FieldOrganizationID, vc))
}

// OrganizationIDHasPrefix applies the HasPrefix predicate on the "organization_id" field.
func OrganizationIDHasPrefix(v xid.ID) predicate.IdentityProvider {
	vc := v.String()
	return predicate.IdentityProvider(sql.FieldHasPrefix(FieldOrganizationID, vc))
}

// OrganizationIDHasSuffix applies the HasSuffix predicate on the "organization_id" field.
func OrganizationIDHasSuffix(v xid.ID) predicate.IdentityProvider {
	vc := v.String()
	return predicate.IdentityProvider(sql.FieldHasSuffix(FieldOrganizationID, vc))
}

// OrganizationIDEqualFold applies the EqualFold predicate on the "organization_id" field.
func OrganizationIDEqualFold(v xid.ID) predicate.IdentityProvider {
	vc := v.String()
	return predicate.IdentityProvider(sql.FieldEqualFold(FieldOrganizationID, vc))
}

// OrganizationIDContainsFold applies the ContainsFold predicate on the "organization_id" field.
func OrganizationIDContainsFold(v xid.ID) predicate.IdentityProvider {
	vc := v.String()
	return predicate.IdentityProvider(sql.FieldContainsFold(FieldOrganizationID, vc))
}

// ProviderTypeEQ applies the EQ predicate on the "provider_type" field.
func ProviderTypeEQ(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldEQ(FieldProviderType, v))
}

// ProviderTypeNEQ applies the NEQ predicate on the "provider_type" field.
func ProviderTypeNEQ(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldNEQ(FieldProviderType, v))
}

// ProviderTypeIn applies the In predicate on the "provider_type" field.
func ProviderTypeIn(vs ...string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldIn(FieldProviderType, vs...))
}

// ProviderTypeNotIn applies the NotIn predicate on the "provider_type" field.
func ProviderTypeNotIn(vs ...string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldNotIn(FieldProviderType, vs...))
}

// ProviderTypeGT applies the GT predicate on the "provider_type" field.
func ProviderTypeGT(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldGT(FieldProviderType, v))
}

// ProviderTypeGTE applies the GTE predicate on the "provider_type" field.
func ProviderTypeGTE(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldGTE(FieldProviderType, v))
}

// ProviderTypeLT applies the LT predicate on the "provider_type" field.
func ProviderTypeLT(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldLT(FieldProviderType, v))
}

// ProviderTypeLTE applies the LTE predicate on the "provider_type" field.
func ProviderTypeLTE(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldLTE(FieldProviderType, v))
}

// ProviderTypeContains applies the Contains predicate on the "provider_type" field.
func ProviderTypeContains(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldContains(FieldProviderType, v))
}

// ProviderTypeHasPrefix applies the HasPrefix predicate on the "provider_type" field.
func ProviderTypeHasPrefix(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldHasPrefix(FieldProviderType, v))
}

// ProviderTypeHasSuffix applies the HasSuffix predicate on the "provider_type" field.
func ProviderTypeHasSuffix(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldHasSuffix(FieldProviderType, v))
}

// ProviderTypeEqualFold applies the EqualFold predicate on the "provider_type" field.
func ProviderTypeEqualFold(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldEqualFold(FieldProviderType, v))
}

// ProviderTypeContainsFold applies the ContainsFold predicate on the "provider_type" field.
func ProviderTypeContainsFold(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldContainsFold(FieldProviderType, v))
}

// ClientIDEQ applies the EQ predicate on the "client_id" field.
func ClientIDEQ(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldEQ(FieldClientID, v))
}

// ClientIDNEQ applies the NEQ predicate on the "client_id" field.
func ClientIDNEQ(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldNEQ(FieldClientID, v))
}

// ClientIDIn applies the In predicate on the "client_id" field.
func ClientIDIn(vs ...string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldIn(FieldClientID, vs...))
}

// ClientIDNotIn applies the NotIn predicate on the "client_id" field.
func ClientIDNotIn(vs ...string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldNotIn(FieldClientID, vs...))
}

// ClientIDGT applies the GT predicate on the "client_id" field.
func ClientIDGT(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldGT(FieldClientID, v))
}

// ClientIDGTE applies the GTE predicate on the "client_id" field.
func ClientIDGTE(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldGTE(FieldClientID, v))
}

// ClientIDLT applies the LT predicate on the "client_id" field.
func ClientIDLT(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldLT(FieldClientID, v))
}

// ClientIDLTE applies the LTE predicate on the "client_id" field.
func ClientIDLTE(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldLTE(FieldClientID, v))
}

// ClientIDContains applies the Contains predicate on the "client_id" field.
func ClientIDContains(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldContains(FieldClientID, v))
}

// ClientIDHasPrefix applies the HasPrefix predicate on the "client_id" field.
func ClientIDHasPrefix(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldHasPrefix(FieldClientID, v))
}

// ClientIDHasSuffix applies the HasSuffix predicate on the "client_id" field.
func ClientIDHasSuffix(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldHasSuffix(FieldClientID, v))
}

// ClientIDIsNil applies the IsNil predicate on the "client_id" field.
func ClientIDIsNil() predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldIsNull(FieldClientID))
}

// ClientIDNotNil applies the NotNil predicate on the "client_id" field.
func ClientIDNotNil() predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldNotNull(FieldClientID))
}

// ClientIDEqualFold applies the EqualFold predicate on the "client_id" field.
func ClientIDEqualFold(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldEqualFold(FieldClientID, v))
}

// ClientIDContainsFold applies the ContainsFold predicate on the "client_id" field.
func ClientIDContainsFold(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldContainsFold(FieldClientID, v))
}

// ClientSecretEQ applies the EQ predicate on the "client_secret" field.
func ClientSecretEQ(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldEQ(FieldClientSecret, v))
}

// ClientSecretNEQ applies the NEQ predicate on the "client_secret" field.
func ClientSecretNEQ(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldNEQ(FieldClientSecret, v))
}

// ClientSecretIn applies the In predicate on the "client_secret" field.
func ClientSecretIn(vs ...string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldIn(FieldClientSecret, vs...))
}

// ClientSecretNotIn applies the NotIn predicate on the "client_secret" field.
func ClientSecretNotIn(vs ...string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldNotIn(FieldClientSecret, vs...))
}

// ClientSecretGT applies the GT predicate on the "client_secret" field.
func ClientSecretGT(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldGT(FieldClientSecret, v))
}

// ClientSecretGTE applies the GTE predicate on the "client_secret" field.
func ClientSecretGTE(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldGTE(FieldClientSecret, v))
}

// ClientSecretLT applies the LT predicate on the "client_secret" field.
func ClientSecretLT(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldLT(FieldClientSecret, v))
}

// ClientSecretLTE applies the LTE predicate on the "client_secret" field.
func ClientSecretLTE(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldLTE(FieldClientSecret, v))
}

// ClientSecretContains applies the Contains predicate on the "client_secret" field.
func ClientSecretContains(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldContains(FieldClientSecret, v))
}

// ClientSecretHasPrefix applies the HasPrefix predicate on the "client_secret" field.
func ClientSecretHasPrefix(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldHasPrefix(FieldClientSecret, v))
}

// ClientSecretHasSuffix applies the HasSuffix predicate on the "client_secret" field.
func ClientSecretHasSuffix(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldHasSuffix(FieldClientSecret, v))
}

// ClientSecretIsNil applies the IsNil predicate on the "client_secret" field.
func ClientSecretIsNil() predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldIsNull(FieldClientSecret))
}

// ClientSecretNotNil applies the NotNil predicate on the "client_secret" field.
func ClientSecretNotNil() predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldNotNull(FieldClientSecret))
}

// ClientSecretEqualFold applies the EqualFold predicate on the "client_secret" field.
func ClientSecretEqualFold(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldEqualFold(FieldClientSecret, v))
}

// ClientSecretContainsFold applies the ContainsFold predicate on the "client_secret" field.
func ClientSecretContainsFold(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldContainsFold(FieldClientSecret, v))
}

// IssuerEQ applies the EQ predicate on the "issuer" field.
func IssuerEQ(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldEQ(FieldIssuer, v))
}

// IssuerNEQ applies the NEQ predicate on the "issuer" field.
func IssuerNEQ(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldNEQ(FieldIssuer, v))
}

// IssuerIn applies the In predicate on the "issuer" field.
func IssuerIn(vs ...string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldIn(FieldIssuer, vs...))
}

// IssuerNotIn applies the NotIn predicate on the "issuer" field.
func IssuerNotIn(vs ...string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldNotIn(FieldIssuer, vs...))
}

// IssuerGT applies the GT predicate on the "issuer" field.
func IssuerGT(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldGT(FieldIssuer, v))
}

// IssuerGTE applies the GTE predicate on the "issuer" field.
func IssuerGTE(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldGTE(FieldIssuer, v))
}

// IssuerLT applies the LT predicate on the "issuer" field.
func IssuerLT(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldLT(FieldIssuer, v))
}

// IssuerLTE applies the LTE predicate on the "issuer" field.
func IssuerLTE(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldLTE(FieldIssuer, v))
}

// IssuerContains applies the Contains predicate on the "issuer" field.
func IssuerContains(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldContains(FieldIssuer, v))
}

// IssuerHasPrefix applies the HasPrefix predicate on the "issuer" field.
func IssuerHasPrefix(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldHasPrefix(FieldIssuer, v))
}

// IssuerHasSuffix applies the HasSuffix predicate on the "issuer" field.
func IssuerHasSuffix(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldHasSuffix(FieldIssuer, v))
}

// IssuerIsNil applies the IsNil predicate on the "issuer" field.
func IssuerIsNil() predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldIsNull(FieldIssuer))
}

// IssuerNotNil applies the NotNil predicate on the "issuer" field.
func IssuerNotNil() predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldNotNull(FieldIssuer))
}

// IssuerEqualFold applies the EqualFold predicate on the "issuer" field.
func IssuerEqualFold(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldEqualFold(FieldIssuer, v))
}

// IssuerContainsFold applies the ContainsFold predicate on the "issuer" field.
func IssuerContainsFold(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldContainsFold(FieldIssuer, v))
}

// AuthorizationEndpointEQ applies the EQ predicate on the "authorization_endpoint" field.
func AuthorizationEndpointEQ(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldEQ(FieldAuthorizationEndpoint, v))
}

// AuthorizationEndpointNEQ applies the NEQ predicate on the "authorization_endpoint" field.
func AuthorizationEndpointNEQ(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldNEQ(FieldAuthorizationEndpoint, v))
}

// AuthorizationEndpointIn applies the In predicate on the "authorization_endpoint" field.
func AuthorizationEndpointIn(vs ...string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldIn(FieldAuthorizationEndpoint, vs...))
}

// AuthorizationEndpointNotIn applies the NotIn predicate on the "authorization_endpoint" field.
func AuthorizationEndpointNotIn(vs ...string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldNotIn(FieldAuthorizationEndpoint, vs...))
}

// AuthorizationEndpointGT applies the GT predicate on the "authorization_endpoint" field.
func AuthorizationEndpointGT(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldGT(FieldAuthorizationEndpoint, v))
}

// AuthorizationEndpointGTE applies the GTE predicate on the "authorization_endpoint" field.
func AuthorizationEndpointGTE(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldGTE(FieldAuthorizationEndpoint, v))
}

// AuthorizationEndpointLT applies the LT predicate on the "authorization_endpoint" field.
func AuthorizationEndpointLT(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldLT(FieldAuthorizationEndpoint, v))
}

// AuthorizationEndpointLTE applies the LTE predicate on the "authorization_endpoint" field.
func AuthorizationEndpointLTE(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldLTE(FieldAuthorizationEndpoint, v))
}

// AuthorizationEndpointContains applies the Contains predicate on the "authorization_endpoint" field.
func AuthorizationEndpointContains(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldContains(FieldAuthorizationEndpoint, v))
}

// AuthorizationEndpointHasPrefix applies the HasPrefix predicate on the "authorization_endpoint" field.
func AuthorizationEndpointHasPrefix(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldHasPrefix(FieldAuthorizationEndpoint, v))
}

// AuthorizationEndpointHasSuffix applies the HasSuffix predicate on the "authorization_endpoint" field.
func AuthorizationEndpointHasSuffix(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldHasSuffix(FieldAuthorizationEndpoint, v))
}

// AuthorizationEndpointIsNil applies the IsNil predicate on the "authorization_endpoint" field.
func AuthorizationEndpointIsNil() predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldIsNull(FieldAuthorizationEndpoint))
}

// AuthorizationEndpointNotNil applies the NotNil predicate on the "authorization_endpoint" field.
func AuthorizationEndpointNotNil() predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldNotNull(FieldAuthorizationEndpoint))
}

// AuthorizationEndpointEqualFold applies the EqualFold predicate on the "authorization_endpoint" field.
func AuthorizationEndpointEqualFold(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldEqualFold(FieldAuthorizationEndpoint, v))
}

// AuthorizationEndpointContainsFold applies the ContainsFold predicate on the "authorization_endpoint" field.
func AuthorizationEndpointContainsFold(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldContainsFold(FieldAuthorizationEndpoint, v))
}

// TokenEndpointEQ applies the EQ predicate on the "token_endpoint" field.
func TokenEndpointEQ(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldEQ(FieldTokenEndpoint, v))
}

// TokenEndpointNEQ applies the NEQ predicate on the "token_endpoint" field.
func TokenEndpointNEQ(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldNEQ(FieldTokenEndpoint, v))
}

// TokenEndpointIn applies the In predicate on the "token_endpoint" field.
func TokenEndpointIn(vs ...string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldIn(FieldTokenEndpoint, vs...))
}

// TokenEndpointNotIn applies the NotIn predicate on the "token_endpoint" field.
func TokenEndpointNotIn(vs ...string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldNotIn(FieldTokenEndpoint, vs...))
}

// TokenEndpointGT applies the GT predicate on the "token_endpoint" field.
func TokenEndpointGT(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldGT(FieldTokenEndpoint, v))
}

// TokenEndpointGTE applies the GTE predicate on the "token_endpoint" field.
func TokenEndpointGTE(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldGTE(FieldTokenEndpoint, v))
}

// TokenEndpointLT applies the LT predicate on the "token_endpoint" field.
func TokenEndpointLT(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldLT(FieldTokenEndpoint, v))
}

// TokenEndpointLTE applies the LTE predicate on the "token_endpoint" field.
func TokenEndpointLTE(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldLTE(FieldTokenEndpoint, v))
}

// TokenEndpointContains applies the Contains predicate on the "token_endpoint" field.
func TokenEndpointContains(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldContains(FieldTokenEndpoint, v))
}

// TokenEndpointHasPrefix applies the HasPrefix predicate on the "token_endpoint" field.
func TokenEndpointHasPrefix(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldHasPrefix(FieldTokenEndpoint, v))
}

// TokenEndpointHasSuffix applies the HasSuffix predicate on the "token_endpoint" field.
func TokenEndpointHasSuffix(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldHasSuffix(FieldTokenEndpoint, v))
}

// TokenEndpointIsNil applies the IsNil predicate on the "token_endpoint" field.
func TokenEndpointIsNil() predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldIsNull(FieldTokenEndpoint))
}

// TokenEndpointNotNil applies the NotNil predicate on the "token_endpoint" field.
func TokenEndpointNotNil() predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldNotNull(FieldTokenEndpoint))
}

// TokenEndpointEqualFold applies the EqualFold predicate on the "token_endpoint" field.
func TokenEndpointEqualFold(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldEqualFold(FieldTokenEndpoint, v))
}

// TokenEndpointContainsFold applies the ContainsFold predicate on the "token_endpoint" field.
func TokenEndpointContainsFold(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldContainsFold(FieldTokenEndpoint, v))
}

// UserinfoEndpointEQ applies the EQ predicate on the "userinfo_endpoint" field.
func UserinfoEndpointEQ(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldEQ(FieldUserinfoEndpoint, v))
}

// UserinfoEndpointNEQ applies the NEQ predicate on the "userinfo_endpoint" field.
func UserinfoEndpointNEQ(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldNEQ(FieldUserinfoEndpoint, v))
}

// UserinfoEndpointIn applies the In predicate on the "userinfo_endpoint" field.
func UserinfoEndpointIn(vs ...string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldIn(FieldUserinfoEndpoint, vs...))
}

// UserinfoEndpointNotIn applies the NotIn predicate on the "userinfo_endpoint" field.
func UserinfoEndpointNotIn(vs ...string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldNotIn(FieldUserinfoEndpoint, vs...))
}

// UserinfoEndpointGT applies the GT predicate on the "userinfo_endpoint" field.
func UserinfoEndpointGT(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldGT(FieldUserinfoEndpoint, v))
}

// UserinfoEndpointGTE applies the GTE predicate on the "userinfo_endpoint" field.
func UserinfoEndpointGTE(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldGTE(FieldUserinfoEndpoint, v))
}

// UserinfoEndpointLT applies the LT predicate on the "userinfo_endpoint" field.
func UserinfoEndpointLT(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldLT(FieldUserinfoEndpoint, v))
}

// UserinfoEndpointLTE applies the LTE predicate on the "userinfo_endpoint" field.
func UserinfoEndpointLTE(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldLTE(FieldUserinfoEndpoint, v))
}

// UserinfoEndpointContains applies the Contains predicate on the "userinfo_endpoint" field.
func UserinfoEndpointContains(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldContains(FieldUserinfoEndpoint, v))
}

// UserinfoEndpointHasPrefix applies the HasPrefix predicate on the "userinfo_endpoint" field.
func UserinfoEndpointHasPrefix(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldHasPrefix(FieldUserinfoEndpoint, v))
}

// UserinfoEndpointHasSuffix applies the HasSuffix predicate on the "userinfo_endpoint" field.
func UserinfoEndpointHasSuffix(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldHasSuffix(FieldUserinfoEndpoint, v))
}

// UserinfoEndpointIsNil applies the IsNil predicate on the "userinfo_endpoint" field.
func UserinfoEndpointIsNil() predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldIsNull(FieldUserinfoEndpoint))
}

// UserinfoEndpointNotNil applies the NotNil predicate on the "userinfo_endpoint" field.
func UserinfoEndpointNotNil() predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldNotNull(FieldUserinfoEndpoint))
}

// UserinfoEndpointEqualFold applies the EqualFold predicate on the "userinfo_endpoint" field.
func UserinfoEndpointEqualFold(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldEqualFold(FieldUserinfoEndpoint, v))
}

// UserinfoEndpointContainsFold applies the ContainsFold predicate on the "userinfo_endpoint" field.
func UserinfoEndpointContainsFold(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldContainsFold(FieldUserinfoEndpoint, v))
}

// JwksURIEQ applies the EQ predicate on the "jwks_uri" field.
func JwksURIEQ(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldEQ(FieldJwksURI, v))
}

// JwksURINEQ applies the NEQ predicate on the "jwks_uri" field.
func JwksURINEQ(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldNEQ(FieldJwksURI, v))
}

// JwksURIIn applies the In predicate on the "jwks_uri" field.
func JwksURIIn(vs ...string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldIn(FieldJwksURI, vs...))
}

// JwksURINotIn applies the NotIn predicate on the "jwks_uri" field.
func JwksURINotIn(vs ...string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldNotIn(FieldJwksURI, vs...))
}

// JwksURIGT applies the GT predicate on the "jwks_uri" field.
func JwksURIGT(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldGT(FieldJwksURI, v))
}

// JwksURIGTE applies the GTE predicate on the "jwks_uri" field.
func JwksURIGTE(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldGTE(FieldJwksURI, v))
}

// JwksURILT applies the LT predicate on the "jwks_uri" field.
func JwksURILT(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldLT(FieldJwksURI, v))
}

// JwksURILTE applies the LTE predicate on the "jwks_uri" field.
func JwksURILTE(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldLTE(FieldJwksURI, v))
}

// JwksURIContains applies the Contains predicate on the "jwks_uri" field.
func JwksURIContains(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldContains(FieldJwksURI, v))
}

// JwksURIHasPrefix applies the HasPrefix predicate on the "jwks_uri" field.
func JwksURIHasPrefix(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldHasPrefix(FieldJwksURI, v))
}

// JwksURIHasSuffix applies the HasSuffix predicate on the "jwks_uri" field.
func JwksURIHasSuffix(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldHasSuffix(FieldJwksURI, v))
}

// JwksURIIsNil applies the IsNil predicate on the "jwks_uri" field.
func JwksURIIsNil() predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldIsNull(FieldJwksURI))
}

// JwksURINotNil applies the NotNil predicate on the "jwks_uri" field.
func JwksURINotNil() predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldNotNull(FieldJwksURI))
}

// JwksURIEqualFold applies the EqualFold predicate on the "jwks_uri" field.
func JwksURIEqualFold(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldEqualFold(FieldJwksURI, v))
}

// JwksURIContainsFold applies the ContainsFold predicate on the "jwks_uri" field.
func JwksURIContainsFold(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldContainsFold(FieldJwksURI, v))
}

// MetadataURLEQ applies the EQ predicate on the "metadata_url" field.
func MetadataURLEQ(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldEQ(FieldMetadataURL, v))
}

// MetadataURLNEQ applies the NEQ predicate on the "metadata_url" field.
func MetadataURLNEQ(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldNEQ(FieldMetadataURL, v))
}

// MetadataURLIn applies the In predicate on the "metadata_url" field.
func MetadataURLIn(vs ...string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldIn(FieldMetadataURL, vs...))
}

// MetadataURLNotIn applies the NotIn predicate on the "metadata_url" field.
func MetadataURLNotIn(vs ...string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldNotIn(FieldMetadataURL, vs...))
}

// MetadataURLGT applies the GT predicate on the "metadata_url" field.
func MetadataURLGT(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldGT(FieldMetadataURL, v))
}

// MetadataURLGTE applies the GTE predicate on the "metadata_url" field.
func MetadataURLGTE(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldGTE(FieldMetadataURL, v))
}

// MetadataURLLT applies the LT predicate on the "metadata_url" field.
func MetadataURLLT(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldLT(FieldMetadataURL, v))
}

// MetadataURLLTE applies the LTE predicate on the "metadata_url" field.
func MetadataURLLTE(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldLTE(FieldMetadataURL, v))
}

// MetadataURLContains applies the Contains predicate on the "metadata_url" field.
func MetadataURLContains(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldContains(FieldMetadataURL, v))
}

// MetadataURLHasPrefix applies the HasPrefix predicate on the "metadata_url" field.
func MetadataURLHasPrefix(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldHasPrefix(FieldMetadataURL, v))
}

// MetadataURLHasSuffix applies the HasSuffix predicate on the "metadata_url" field.
func MetadataURLHasSuffix(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldHasSuffix(FieldMetadataURL, v))
}

// MetadataURLIsNil applies the IsNil predicate on the "metadata_url" field.
func MetadataURLIsNil() predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldIsNull(FieldMetadataURL))
}

// MetadataURLNotNil applies the NotNil predicate on the "metadata_url" field.
func MetadataURLNotNil() predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldNotNull(FieldMetadataURL))
}

// MetadataURLEqualFold applies the EqualFold predicate on the "metadata_url" field.
func MetadataURLEqualFold(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldEqualFold(FieldMetadataURL, v))
}

// MetadataURLContainsFold applies the ContainsFold predicate on the "metadata_url" field.
func MetadataURLContainsFold(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldContainsFold(FieldMetadataURL, v))
}

// RedirectURIEQ applies the EQ predicate on the "redirect_uri" field.
func RedirectURIEQ(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldEQ(FieldRedirectURI, v))
}

// RedirectURINEQ applies the NEQ predicate on the "redirect_uri" field.
func RedirectURINEQ(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldNEQ(FieldRedirectURI, v))
}

// RedirectURIIn applies the In predicate on the "redirect_uri" field.
func RedirectURIIn(vs ...string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldIn(FieldRedirectURI, vs...))
}

// RedirectURINotIn applies the NotIn predicate on the "redirect_uri" field.
func RedirectURINotIn(vs ...string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldNotIn(FieldRedirectURI, vs...))
}

// RedirectURIGT applies the GT predicate on the "redirect_uri" field.
func RedirectURIGT(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldGT(FieldRedirectURI, v))
}

// RedirectURIGTE applies the GTE predicate on the "redirect_uri" field.
func RedirectURIGTE(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldGTE(FieldRedirectURI, v))
}

// RedirectURILT applies the LT predicate on the "redirect_uri" field.
func RedirectURILT(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldLT(FieldRedirectURI, v))
}

// RedirectURILTE applies the LTE predicate on the "redirect_uri" field.
func RedirectURILTE(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldLTE(FieldRedirectURI, v))
}

// RedirectURIContains applies the Contains predicate on the "redirect_uri" field.
func RedirectURIContains(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldContains(FieldRedirectURI, v))
}

// RedirectURIHasPrefix applies the HasPrefix predicate on the "redirect_uri" field.
func RedirectURIHasPrefix(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldHasPrefix(FieldRedirectURI, v))
}

// RedirectURIHasSuffix applies the HasSuffix predicate on the "redirect_uri" field.
func RedirectURIHasSuffix(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldHasSuffix(FieldRedirectURI, v))
}

// RedirectURIIsNil applies the IsNil predicate on the "redirect_uri" field.
func RedirectURIIsNil() predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldIsNull(FieldRedirectURI))
}

// RedirectURINotNil applies the NotNil predicate on the "redirect_uri" field.
func RedirectURINotNil() predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldNotNull(FieldRedirectURI))
}

// RedirectURIEqualFold applies the EqualFold predicate on the "redirect_uri" field.
func RedirectURIEqualFold(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldEqualFold(FieldRedirectURI, v))
}

// RedirectURIContainsFold applies the ContainsFold predicate on the "redirect_uri" field.
func RedirectURIContainsFold(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldContainsFold(FieldRedirectURI, v))
}

// CertificateEQ applies the EQ predicate on the "certificate" field.
func CertificateEQ(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldEQ(FieldCertificate, v))
}

// CertificateNEQ applies the NEQ predicate on the "certificate" field.
func CertificateNEQ(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldNEQ(FieldCertificate, v))
}

// CertificateIn applies the In predicate on the "certificate" field.
func CertificateIn(vs ...string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldIn(FieldCertificate, vs...))
}

// CertificateNotIn applies the NotIn predicate on the "certificate" field.
func CertificateNotIn(vs ...string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldNotIn(FieldCertificate, vs...))
}

// CertificateGT applies the GT predicate on the "certificate" field.
func CertificateGT(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldGT(FieldCertificate, v))
}

// CertificateGTE applies the GTE predicate on the "certificate" field.
func CertificateGTE(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldGTE(FieldCertificate, v))
}

// CertificateLT applies the LT predicate on the "certificate" field.
func CertificateLT(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldLT(FieldCertificate, v))
}

// CertificateLTE applies the LTE predicate on the "certificate" field.
func CertificateLTE(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldLTE(FieldCertificate, v))
}

// CertificateContains applies the Contains predicate on the "certificate" field.
func CertificateContains(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldContains(FieldCertificate, v))
}

// CertificateHasPrefix applies the HasPrefix predicate on the "certificate" field.
func CertificateHasPrefix(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldHasPrefix(FieldCertificate, v))
}

// CertificateHasSuffix applies the HasSuffix predicate on the "certificate" field.
func CertificateHasSuffix(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldHasSuffix(FieldCertificate, v))
}

// CertificateIsNil applies the IsNil predicate on the "certificate" field.
func CertificateIsNil() predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldIsNull(FieldCertificate))
}

// CertificateNotNil applies the NotNil predicate on the "certificate" field.
func CertificateNotNil() predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldNotNull(FieldCertificate))
}

// CertificateEqualFold applies the EqualFold predicate on the "certificate" field.
func CertificateEqualFold(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldEqualFold(FieldCertificate, v))
}

// CertificateContainsFold applies the ContainsFold predicate on the "certificate" field.
func CertificateContainsFold(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldContainsFold(FieldCertificate, v))
}

// PrivateKeyEQ applies the EQ predicate on the "private_key" field.
func PrivateKeyEQ(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldEQ(FieldPrivateKey, v))
}

// PrivateKeyNEQ applies the NEQ predicate on the "private_key" field.
func PrivateKeyNEQ(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldNEQ(FieldPrivateKey, v))
}

// PrivateKeyIn applies the In predicate on the "private_key" field.
func PrivateKeyIn(vs ...string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldIn(FieldPrivateKey, vs...))
}

// PrivateKeyNotIn applies the NotIn predicate on the "private_key" field.
func PrivateKeyNotIn(vs ...string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldNotIn(FieldPrivateKey, vs...))
}

// PrivateKeyGT applies the GT predicate on the "private_key" field.
func PrivateKeyGT(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldGT(FieldPrivateKey, v))
}

// PrivateKeyGTE applies the GTE predicate on the "private_key" field.
func PrivateKeyGTE(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldGTE(FieldPrivateKey, v))
}

// PrivateKeyLT applies the LT predicate on the "private_key" field.
func PrivateKeyLT(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldLT(FieldPrivateKey, v))
}

// PrivateKeyLTE applies the LTE predicate on the "private_key" field.
func PrivateKeyLTE(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldLTE(FieldPrivateKey, v))
}

// PrivateKeyContains applies the Contains predicate on the "private_key" field.
func PrivateKeyContains(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldContains(FieldPrivateKey, v))
}

// PrivateKeyHasPrefix applies the HasPrefix predicate on the "private_key" field.
func PrivateKeyHasPrefix(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldHasPrefix(FieldPrivateKey, v))
}

// PrivateKeyHasSuffix applies the HasSuffix predicate on the "private_key" field.
func PrivateKeyHasSuffix(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldHasSuffix(FieldPrivateKey, v))
}

// PrivateKeyIsNil applies the IsNil predicate on the "private_key" field.
func PrivateKeyIsNil() predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldIsNull(FieldPrivateKey))
}

// PrivateKeyNotNil applies the NotNil predicate on the "private_key" field.
func PrivateKeyNotNil() predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldNotNull(FieldPrivateKey))
}

// PrivateKeyEqualFold applies the EqualFold predicate on the "private_key" field.
func PrivateKeyEqualFold(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldEqualFold(FieldPrivateKey, v))
}

// PrivateKeyContainsFold applies the ContainsFold predicate on the "private_key" field.
func PrivateKeyContainsFold(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldContainsFold(FieldPrivateKey, v))
}

// ActiveEQ applies the EQ predicate on the "active" field.
func ActiveEQ(v bool) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldEQ(FieldActive, v))
}

// ActiveNEQ applies the NEQ predicate on the "active" field.
func ActiveNEQ(v bool) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldNEQ(FieldActive, v))
}

// EnabledEQ applies the EQ predicate on the "enabled" field.
func EnabledEQ(v bool) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldEQ(FieldEnabled, v))
}

// EnabledNEQ applies the NEQ predicate on the "enabled" field.
func EnabledNEQ(v bool) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldNEQ(FieldEnabled, v))
}

// PrimaryEQ applies the EQ predicate on the "primary" field.
func PrimaryEQ(v bool) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldEQ(FieldPrimary, v))
}

// PrimaryNEQ applies the NEQ predicate on the "primary" field.
func PrimaryNEQ(v bool) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldNEQ(FieldPrimary, v))
}

// AutoProvisionEQ applies the EQ predicate on the "auto_provision" field.
func AutoProvisionEQ(v bool) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldEQ(FieldAutoProvision, v))
}

// AutoProvisionNEQ applies the NEQ predicate on the "auto_provision" field.
func AutoProvisionNEQ(v bool) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldNEQ(FieldAutoProvision, v))
}

// DefaultRoleEQ applies the EQ predicate on the "default_role" field.
func DefaultRoleEQ(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldEQ(FieldDefaultRole, v))
}

// DefaultRoleNEQ applies the NEQ predicate on the "default_role" field.
func DefaultRoleNEQ(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldNEQ(FieldDefaultRole, v))
}

// DefaultRoleIn applies the In predicate on the "default_role" field.
func DefaultRoleIn(vs ...string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldIn(FieldDefaultRole, vs...))
}

// DefaultRoleNotIn applies the NotIn predicate on the "default_role" field.
func DefaultRoleNotIn(vs ...string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldNotIn(FieldDefaultRole, vs...))
}

// DefaultRoleGT applies the GT predicate on the "default_role" field.
func DefaultRoleGT(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldGT(FieldDefaultRole, v))
}

// DefaultRoleGTE applies the GTE predicate on the "default_role" field.
func DefaultRoleGTE(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldGTE(FieldDefaultRole, v))
}

// DefaultRoleLT applies the LT predicate on the "default_role" field.
func DefaultRoleLT(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldLT(FieldDefaultRole, v))
}

// DefaultRoleLTE applies the LTE predicate on the "default_role" field.
func DefaultRoleLTE(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldLTE(FieldDefaultRole, v))
}

// DefaultRoleContains applies the Contains predicate on the "default_role" field.
func DefaultRoleContains(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldContains(FieldDefaultRole, v))
}

// DefaultRoleHasPrefix applies the HasPrefix predicate on the "default_role" field.
func DefaultRoleHasPrefix(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldHasPrefix(FieldDefaultRole, v))
}

// DefaultRoleHasSuffix applies the HasSuffix predicate on the "default_role" field.
func DefaultRoleHasSuffix(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldHasSuffix(FieldDefaultRole, v))
}

// DefaultRoleIsNil applies the IsNil predicate on the "default_role" field.
func DefaultRoleIsNil() predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldIsNull(FieldDefaultRole))
}

// DefaultRoleNotNil applies the NotNil predicate on the "default_role" field.
func DefaultRoleNotNil() predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldNotNull(FieldDefaultRole))
}

// DefaultRoleEqualFold applies the EqualFold predicate on the "default_role" field.
func DefaultRoleEqualFold(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldEqualFold(FieldDefaultRole, v))
}

// DefaultRoleContainsFold applies the ContainsFold predicate on the "default_role" field.
func DefaultRoleContainsFold(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldContainsFold(FieldDefaultRole, v))
}

// DomainEQ applies the EQ predicate on the "domain" field.
func DomainEQ(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldEQ(FieldDomain, v))
}

// DomainNEQ applies the NEQ predicate on the "domain" field.
func DomainNEQ(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldNEQ(FieldDomain, v))
}

// DomainIn applies the In predicate on the "domain" field.
func DomainIn(vs ...string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldIn(FieldDomain, vs...))
}

// DomainNotIn applies the NotIn predicate on the "domain" field.
func DomainNotIn(vs ...string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldNotIn(FieldDomain, vs...))
}

// DomainGT applies the GT predicate on the "domain" field.
func DomainGT(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldGT(FieldDomain, v))
}

// DomainGTE applies the GTE predicate on the "domain" field.
func DomainGTE(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldGTE(FieldDomain, v))
}

// DomainLT applies the LT predicate on the "domain" field.
func DomainLT(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldLT(FieldDomain, v))
}

// DomainLTE applies the LTE predicate on the "domain" field.
func DomainLTE(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldLTE(FieldDomain, v))
}

// DomainContains applies the Contains predicate on the "domain" field.
func DomainContains(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldContains(FieldDomain, v))
}

// DomainHasPrefix applies the HasPrefix predicate on the "domain" field.
func DomainHasPrefix(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldHasPrefix(FieldDomain, v))
}

// DomainHasSuffix applies the HasSuffix predicate on the "domain" field.
func DomainHasSuffix(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldHasSuffix(FieldDomain, v))
}

// DomainIsNil applies the IsNil predicate on the "domain" field.
func DomainIsNil() predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldIsNull(FieldDomain))
}

// DomainNotNil applies the NotNil predicate on the "domain" field.
func DomainNotNil() predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldNotNull(FieldDomain))
}

// DomainEqualFold applies the EqualFold predicate on the "domain" field.
func DomainEqualFold(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldEqualFold(FieldDomain, v))
}

// DomainContainsFold applies the ContainsFold predicate on the "domain" field.
func DomainContainsFold(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldContainsFold(FieldDomain, v))
}

// IconURLEQ applies the EQ predicate on the "icon_url" field.
func IconURLEQ(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldEQ(FieldIconURL, v))
}

// IconURLNEQ applies the NEQ predicate on the "icon_url" field.
func IconURLNEQ(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldNEQ(FieldIconURL, v))
}

// IconURLIn applies the In predicate on the "icon_url" field.
func IconURLIn(vs ...string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldIn(FieldIconURL, vs...))
}

// IconURLNotIn applies the NotIn predicate on the "icon_url" field.
func IconURLNotIn(vs ...string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldNotIn(FieldIconURL, vs...))
}

// IconURLGT applies the GT predicate on the "icon_url" field.
func IconURLGT(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldGT(FieldIconURL, v))
}

// IconURLGTE applies the GTE predicate on the "icon_url" field.
func IconURLGTE(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldGTE(FieldIconURL, v))
}

// IconURLLT applies the LT predicate on the "icon_url" field.
func IconURLLT(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldLT(FieldIconURL, v))
}

// IconURLLTE applies the LTE predicate on the "icon_url" field.
func IconURLLTE(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldLTE(FieldIconURL, v))
}

// IconURLContains applies the Contains predicate on the "icon_url" field.
func IconURLContains(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldContains(FieldIconURL, v))
}

// IconURLHasPrefix applies the HasPrefix predicate on the "icon_url" field.
func IconURLHasPrefix(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldHasPrefix(FieldIconURL, v))
}

// IconURLHasSuffix applies the HasSuffix predicate on the "icon_url" field.
func IconURLHasSuffix(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldHasSuffix(FieldIconURL, v))
}

// IconURLIsNil applies the IsNil predicate on the "icon_url" field.
func IconURLIsNil() predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldIsNull(FieldIconURL))
}

// IconURLNotNil applies the NotNil predicate on the "icon_url" field.
func IconURLNotNil() predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldNotNull(FieldIconURL))
}

// IconURLEqualFold applies the EqualFold predicate on the "icon_url" field.
func IconURLEqualFold(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldEqualFold(FieldIconURL, v))
}

// IconURLContainsFold applies the ContainsFold predicate on the "icon_url" field.
func IconURLContainsFold(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldContainsFold(FieldIconURL, v))
}

// ButtonTextEQ applies the EQ predicate on the "button_text" field.
func ButtonTextEQ(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldEQ(FieldButtonText, v))
}

// ButtonTextNEQ applies the NEQ predicate on the "button_text" field.
func ButtonTextNEQ(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldNEQ(FieldButtonText, v))
}

// ButtonTextIn applies the In predicate on the "button_text" field.
func ButtonTextIn(vs ...string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldIn(FieldButtonText, vs...))
}

// ButtonTextNotIn applies the NotIn predicate on the "button_text" field.
func ButtonTextNotIn(vs ...string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldNotIn(FieldButtonText, vs...))
}

// ButtonTextGT applies the GT predicate on the "button_text" field.
func ButtonTextGT(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldGT(FieldButtonText, v))
}

// ButtonTextGTE applies the GTE predicate on the "button_text" field.
func ButtonTextGTE(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldGTE(FieldButtonText, v))
}

// ButtonTextLT applies the LT predicate on the "button_text" field.
func ButtonTextLT(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldLT(FieldButtonText, v))
}

// ButtonTextLTE applies the LTE predicate on the "button_text" field.
func ButtonTextLTE(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldLTE(FieldButtonText, v))
}

// ButtonTextContains applies the Contains predicate on the "button_text" field.
func ButtonTextContains(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldContains(FieldButtonText, v))
}

// ButtonTextHasPrefix applies the HasPrefix predicate on the "button_text" field.
func ButtonTextHasPrefix(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldHasPrefix(FieldButtonText, v))
}

// ButtonTextHasSuffix applies the HasSuffix predicate on the "button_text" field.
func ButtonTextHasSuffix(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldHasSuffix(FieldButtonText, v))
}

// ButtonTextIsNil applies the IsNil predicate on the "button_text" field.
func ButtonTextIsNil() predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldIsNull(FieldButtonText))
}

// ButtonTextNotNil applies the NotNil predicate on the "button_text" field.
func ButtonTextNotNil() predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldNotNull(FieldButtonText))
}

// ButtonTextEqualFold applies the EqualFold predicate on the "button_text" field.
func ButtonTextEqualFold(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldEqualFold(FieldButtonText, v))
}

// ButtonTextContainsFold applies the ContainsFold predicate on the "button_text" field.
func ButtonTextContainsFold(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldContainsFold(FieldButtonText, v))
}

// ProtocolEQ applies the EQ predicate on the "protocol" field.
func ProtocolEQ(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldEQ(FieldProtocol, v))
}

// ProtocolNEQ applies the NEQ predicate on the "protocol" field.
func ProtocolNEQ(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldNEQ(FieldProtocol, v))
}

// ProtocolIn applies the In predicate on the "protocol" field.
func ProtocolIn(vs ...string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldIn(FieldProtocol, vs...))
}

// ProtocolNotIn applies the NotIn predicate on the "protocol" field.
func ProtocolNotIn(vs ...string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldNotIn(FieldProtocol, vs...))
}

// ProtocolGT applies the GT predicate on the "protocol" field.
func ProtocolGT(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldGT(FieldProtocol, v))
}

// ProtocolGTE applies the GTE predicate on the "protocol" field.
func ProtocolGTE(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldGTE(FieldProtocol, v))
}

// ProtocolLT applies the LT predicate on the "protocol" field.
func ProtocolLT(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldLT(FieldProtocol, v))
}

// ProtocolLTE applies the LTE predicate on the "protocol" field.
func ProtocolLTE(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldLTE(FieldProtocol, v))
}

// ProtocolContains applies the Contains predicate on the "protocol" field.
func ProtocolContains(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldContains(FieldProtocol, v))
}

// ProtocolHasPrefix applies the HasPrefix predicate on the "protocol" field.
func ProtocolHasPrefix(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldHasPrefix(FieldProtocol, v))
}

// ProtocolHasSuffix applies the HasSuffix predicate on the "protocol" field.
func ProtocolHasSuffix(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldHasSuffix(FieldProtocol, v))
}

// ProtocolIsNil applies the IsNil predicate on the "protocol" field.
func ProtocolIsNil() predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldIsNull(FieldProtocol))
}

// ProtocolNotNil applies the NotNil predicate on the "protocol" field.
func ProtocolNotNil() predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldNotNull(FieldProtocol))
}

// ProtocolEqualFold applies the EqualFold predicate on the "protocol" field.
func ProtocolEqualFold(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldEqualFold(FieldProtocol, v))
}

// ProtocolContainsFold applies the ContainsFold predicate on the "protocol" field.
func ProtocolContainsFold(v string) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldContainsFold(FieldProtocol, v))
}

// DomainsIsNil applies the IsNil predicate on the "domains" field.
func DomainsIsNil() predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldIsNull(FieldDomains))
}

// DomainsNotNil applies the NotNil predicate on the "domains" field.
func DomainsNotNil() predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldNotNull(FieldDomains))
}

// AttributesMappingIsNil applies the IsNil predicate on the "attributes_mapping" field.
func AttributesMappingIsNil() predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldIsNull(FieldAttributesMapping))
}

// AttributesMappingNotNil applies the NotNil predicate on the "attributes_mapping" field.
func AttributesMappingNotNil() predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldNotNull(FieldAttributesMapping))
}

// MetadataIsNil applies the IsNil predicate on the "metadata" field.
func MetadataIsNil() predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldIsNull(FieldMetadata))
}

// MetadataNotNil applies the NotNil predicate on the "metadata" field.
func MetadataNotNil() predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.FieldNotNull(FieldMetadata))
}

// HasOrganization applies the HasEdge predicate on the "organization" edge.
func HasOrganization() predicate.IdentityProvider {
	return predicate.IdentityProvider(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrganizationTable, OrganizationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrganizationWith applies the HasEdge predicate on the "organization" edge with a given conditions (other predicates).
func HasOrganizationWith(preds ...predicate.Organization) predicate.IdentityProvider {
	return predicate.IdentityProvider(func(s *sql.Selector) {
		step := newOrganizationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrganizationProviders applies the HasEdge predicate on the "organization_providers" edge.
func HasOrganizationProviders() predicate.IdentityProvider {
	return predicate.IdentityProvider(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrganizationProvidersTable, OrganizationProvidersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrganizationProvidersWith applies the HasEdge predicate on the "organization_providers" edge with a given conditions (other predicates).
func HasOrganizationProvidersWith(preds ...predicate.OrganizationProvider) predicate.IdentityProvider {
	return predicate.IdentityProvider(func(s *sql.Selector) {
		step := newOrganizationProvidersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.IdentityProvider) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.IdentityProvider) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.IdentityProvider) predicate.IdentityProvider {
	return predicate.IdentityProvider(sql.NotPredicates(p))
}
