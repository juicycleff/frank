// Copyright 2023-present XRaph LLC. All rights reserved.
// This source code is licensed under the XRaph LLC license found
// in the LICENSE file in the root directory of this source tree.
// Code generated by ent, DO NOT EDIT.

package identityprovider

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/rs/xid"
)

const (
	// Label holds the string label denoting the identityprovider type in the database.
	Label = "identity_provider"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldOrganizationID holds the string denoting the organization_id field in the database.
	FieldOrganizationID = "organization_id"
	// FieldProviderType holds the string denoting the provider_type field in the database.
	FieldProviderType = "provider_type"
	// FieldClientID holds the string denoting the client_id field in the database.
	FieldClientID = "client_id"
	// FieldClientSecret holds the string denoting the client_secret field in the database.
	FieldClientSecret = "client_secret"
	// FieldIssuer holds the string denoting the issuer field in the database.
	FieldIssuer = "issuer"
	// FieldAuthorizationEndpoint holds the string denoting the authorization_endpoint field in the database.
	FieldAuthorizationEndpoint = "authorization_endpoint"
	// FieldTokenEndpoint holds the string denoting the token_endpoint field in the database.
	FieldTokenEndpoint = "token_endpoint"
	// FieldUserinfoEndpoint holds the string denoting the userinfo_endpoint field in the database.
	FieldUserinfoEndpoint = "userinfo_endpoint"
	// FieldJwksURI holds the string denoting the jwks_uri field in the database.
	FieldJwksURI = "jwks_uri"
	// FieldMetadataURL holds the string denoting the metadata_url field in the database.
	FieldMetadataURL = "metadata_url"
	// FieldRedirectURI holds the string denoting the redirect_uri field in the database.
	FieldRedirectURI = "redirect_uri"
	// FieldCertificate holds the string denoting the certificate field in the database.
	FieldCertificate = "certificate"
	// FieldPrivateKey holds the string denoting the private_key field in the database.
	FieldPrivateKey = "private_key"
	// FieldActive holds the string denoting the active field in the database.
	FieldActive = "active"
	// FieldEnabled holds the string denoting the enabled field in the database.
	FieldEnabled = "enabled"
	// FieldPrimary holds the string denoting the primary field in the database.
	FieldPrimary = "primary"
	// FieldAutoProvision holds the string denoting the auto_provision field in the database.
	FieldAutoProvision = "auto_provision"
	// FieldDefaultRole holds the string denoting the default_role field in the database.
	FieldDefaultRole = "default_role"
	// FieldDomain holds the string denoting the domain field in the database.
	FieldDomain = "domain"
	// FieldIconURL holds the string denoting the icon_url field in the database.
	FieldIconURL = "icon_url"
	// FieldButtonText holds the string denoting the button_text field in the database.
	FieldButtonText = "button_text"
	// FieldProtocol holds the string denoting the protocol field in the database.
	FieldProtocol = "protocol"
	// FieldDomains holds the string denoting the domains field in the database.
	FieldDomains = "domains"
	// FieldAttributesMapping holds the string denoting the attributes_mapping field in the database.
	FieldAttributesMapping = "attributes_mapping"
	// FieldMetadata holds the string denoting the metadata field in the database.
	FieldMetadata = "metadata"
	// EdgeOrganization holds the string denoting the organization edge name in mutations.
	EdgeOrganization = "organization"
	// EdgeOrganizationProviders holds the string denoting the organization_providers edge name in mutations.
	EdgeOrganizationProviders = "organization_providers"
	// Table holds the table name of the identityprovider in the database.
	Table = "identity_providers"
	// OrganizationTable is the table that holds the organization relation/edge.
	OrganizationTable = "identity_providers"
	// OrganizationInverseTable is the table name for the Organization entity.
	// It exists in this package in order to avoid circular dependency with the "organization" package.
	OrganizationInverseTable = "organizations"
	// OrganizationColumn is the table column denoting the organization relation/edge.
	OrganizationColumn = "organization_id"
	// OrganizationProvidersTable is the table that holds the organization_providers relation/edge.
	OrganizationProvidersTable = "organization_providers"
	// OrganizationProvidersInverseTable is the table name for the OrganizationProvider entity.
	// It exists in this package in order to avoid circular dependency with the "organizationprovider" package.
	OrganizationProvidersInverseTable = "organization_providers"
	// OrganizationProvidersColumn is the table column denoting the organization_providers relation/edge.
	OrganizationProvidersColumn = "provider_id"
)

// Columns holds all SQL columns for identityprovider fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldName,
	FieldOrganizationID,
	FieldProviderType,
	FieldClientID,
	FieldClientSecret,
	FieldIssuer,
	FieldAuthorizationEndpoint,
	FieldTokenEndpoint,
	FieldUserinfoEndpoint,
	FieldJwksURI,
	FieldMetadataURL,
	FieldRedirectURI,
	FieldCertificate,
	FieldPrivateKey,
	FieldActive,
	FieldEnabled,
	FieldPrimary,
	FieldAutoProvision,
	FieldDefaultRole,
	FieldDomain,
	FieldIconURL,
	FieldButtonText,
	FieldProtocol,
	FieldDomains,
	FieldAttributesMapping,
	FieldMetadata,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// OrganizationIDValidator is a validator for the "organization_id" field. It is called by the builders before save.
	OrganizationIDValidator func(string) error
	// ProviderTypeValidator is a validator for the "provider_type" field. It is called by the builders before save.
	ProviderTypeValidator func(string) error
	// DefaultActive holds the default value on creation for the "active" field.
	DefaultActive bool
	// DefaultEnabled holds the default value on creation for the "enabled" field.
	DefaultEnabled bool
	// DefaultPrimary holds the default value on creation for the "primary" field.
	DefaultPrimary bool
	// DefaultAutoProvision holds the default value on creation for the "auto_provision" field.
	DefaultAutoProvision bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() xid.ID
)

// OrderOption defines the ordering options for the IdentityProvider queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByOrganizationID orders the results by the organization_id field.
func ByOrganizationID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrganizationID, opts...).ToFunc()
}

// ByProviderType orders the results by the provider_type field.
func ByProviderType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProviderType, opts...).ToFunc()
}

// ByClientID orders the results by the client_id field.
func ByClientID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClientID, opts...).ToFunc()
}

// ByClientSecret orders the results by the client_secret field.
func ByClientSecret(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClientSecret, opts...).ToFunc()
}

// ByIssuer orders the results by the issuer field.
func ByIssuer(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIssuer, opts...).ToFunc()
}

// ByAuthorizationEndpoint orders the results by the authorization_endpoint field.
func ByAuthorizationEndpoint(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAuthorizationEndpoint, opts...).ToFunc()
}

// ByTokenEndpoint orders the results by the token_endpoint field.
func ByTokenEndpoint(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTokenEndpoint, opts...).ToFunc()
}

// ByUserinfoEndpoint orders the results by the userinfo_endpoint field.
func ByUserinfoEndpoint(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserinfoEndpoint, opts...).ToFunc()
}

// ByJwksURI orders the results by the jwks_uri field.
func ByJwksURI(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldJwksURI, opts...).ToFunc()
}

// ByMetadataURL orders the results by the metadata_url field.
func ByMetadataURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMetadataURL, opts...).ToFunc()
}

// ByRedirectURI orders the results by the redirect_uri field.
func ByRedirectURI(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRedirectURI, opts...).ToFunc()
}

// ByCertificate orders the results by the certificate field.
func ByCertificate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCertificate, opts...).ToFunc()
}

// ByPrivateKey orders the results by the private_key field.
func ByPrivateKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrivateKey, opts...).ToFunc()
}

// ByActive orders the results by the active field.
func ByActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActive, opts...).ToFunc()
}

// ByEnabled orders the results by the enabled field.
func ByEnabled(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnabled, opts...).ToFunc()
}

// ByPrimary orders the results by the primary field.
func ByPrimary(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrimary, opts...).ToFunc()
}

// ByAutoProvision orders the results by the auto_provision field.
func ByAutoProvision(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAutoProvision, opts...).ToFunc()
}

// ByDefaultRole orders the results by the default_role field.
func ByDefaultRole(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDefaultRole, opts...).ToFunc()
}

// ByDomain orders the results by the domain field.
func ByDomain(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDomain, opts...).ToFunc()
}

// ByIconURL orders the results by the icon_url field.
func ByIconURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIconURL, opts...).ToFunc()
}

// ByButtonText orders the results by the button_text field.
func ByButtonText(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldButtonText, opts...).ToFunc()
}

// ByProtocol orders the results by the protocol field.
func ByProtocol(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProtocol, opts...).ToFunc()
}

// ByOrganizationField orders the results by organization field.
func ByOrganizationField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrganizationStep(), sql.OrderByField(field, opts...))
	}
}

// ByOrganizationProvidersCount orders the results by organization_providers count.
func ByOrganizationProvidersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOrganizationProvidersStep(), opts...)
	}
}

// ByOrganizationProviders orders the results by organization_providers terms.
func ByOrganizationProviders(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrganizationProvidersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newOrganizationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrganizationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, OrganizationTable, OrganizationColumn),
	)
}
func newOrganizationProvidersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrganizationProvidersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, OrganizationProvidersTable, OrganizationProvidersColumn),
	)
}
