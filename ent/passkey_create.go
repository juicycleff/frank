// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/juicycleff/frank/ent/passkey"
	"github.com/juicycleff/frank/ent/user"
)

// PasskeyCreate is the builder for creating a Passkey entity.
type PasskeyCreate struct {
	config
	mutation *PasskeyMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (pc *PasskeyCreate) SetCreatedAt(t time.Time) *PasskeyCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *PasskeyCreate) SetNillableCreatedAt(t *time.Time) *PasskeyCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// SetUpdatedAt sets the "updated_at" field.
func (pc *PasskeyCreate) SetUpdatedAt(t time.Time) *PasskeyCreate {
	pc.mutation.SetUpdatedAt(t)
	return pc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pc *PasskeyCreate) SetNillableUpdatedAt(t *time.Time) *PasskeyCreate {
	if t != nil {
		pc.SetUpdatedAt(*t)
	}
	return pc
}

// SetUserID sets the "user_id" field.
func (pc *PasskeyCreate) SetUserID(s string) *PasskeyCreate {
	pc.mutation.SetUserID(s)
	return pc
}

// SetName sets the "name" field.
func (pc *PasskeyCreate) SetName(s string) *PasskeyCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetCredentialID sets the "credential_id" field.
func (pc *PasskeyCreate) SetCredentialID(s string) *PasskeyCreate {
	pc.mutation.SetCredentialID(s)
	return pc
}

// SetPublicKey sets the "public_key" field.
func (pc *PasskeyCreate) SetPublicKey(b []byte) *PasskeyCreate {
	pc.mutation.SetPublicKey(b)
	return pc
}

// SetSignCount sets the "sign_count" field.
func (pc *PasskeyCreate) SetSignCount(i int) *PasskeyCreate {
	pc.mutation.SetSignCount(i)
	return pc
}

// SetNillableSignCount sets the "sign_count" field if the given value is not nil.
func (pc *PasskeyCreate) SetNillableSignCount(i *int) *PasskeyCreate {
	if i != nil {
		pc.SetSignCount(*i)
	}
	return pc
}

// SetActive sets the "active" field.
func (pc *PasskeyCreate) SetActive(b bool) *PasskeyCreate {
	pc.mutation.SetActive(b)
	return pc
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (pc *PasskeyCreate) SetNillableActive(b *bool) *PasskeyCreate {
	if b != nil {
		pc.SetActive(*b)
	}
	return pc
}

// SetDeviceType sets the "device_type" field.
func (pc *PasskeyCreate) SetDeviceType(s string) *PasskeyCreate {
	pc.mutation.SetDeviceType(s)
	return pc
}

// SetNillableDeviceType sets the "device_type" field if the given value is not nil.
func (pc *PasskeyCreate) SetNillableDeviceType(s *string) *PasskeyCreate {
	if s != nil {
		pc.SetDeviceType(*s)
	}
	return pc
}

// SetAaguid sets the "aaguid" field.
func (pc *PasskeyCreate) SetAaguid(s string) *PasskeyCreate {
	pc.mutation.SetAaguid(s)
	return pc
}

// SetNillableAaguid sets the "aaguid" field if the given value is not nil.
func (pc *PasskeyCreate) SetNillableAaguid(s *string) *PasskeyCreate {
	if s != nil {
		pc.SetAaguid(*s)
	}
	return pc
}

// SetLastUsed sets the "last_used" field.
func (pc *PasskeyCreate) SetLastUsed(t time.Time) *PasskeyCreate {
	pc.mutation.SetLastUsed(t)
	return pc
}

// SetNillableLastUsed sets the "last_used" field if the given value is not nil.
func (pc *PasskeyCreate) SetNillableLastUsed(t *time.Time) *PasskeyCreate {
	if t != nil {
		pc.SetLastUsed(*t)
	}
	return pc
}

// SetTransports sets the "transports" field.
func (pc *PasskeyCreate) SetTransports(s []string) *PasskeyCreate {
	pc.mutation.SetTransports(s)
	return pc
}

// SetAttestation sets the "attestation" field.
func (pc *PasskeyCreate) SetAttestation(m map[string]interface{}) *PasskeyCreate {
	pc.mutation.SetAttestation(m)
	return pc
}

// SetID sets the "id" field.
func (pc *PasskeyCreate) SetID(s string) *PasskeyCreate {
	pc.mutation.SetID(s)
	return pc
}

// SetUser sets the "user" edge to the User entity.
func (pc *PasskeyCreate) SetUser(u *User) *PasskeyCreate {
	return pc.SetUserID(u.ID)
}

// Mutation returns the PasskeyMutation object of the builder.
func (pc *PasskeyCreate) Mutation() *PasskeyMutation {
	return pc.mutation
}

// Save creates the Passkey in the database.
func (pc *PasskeyCreate) Save(ctx context.Context) (*Passkey, error) {
	pc.defaults()
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PasskeyCreate) SaveX(ctx context.Context) *Passkey {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PasskeyCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PasskeyCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PasskeyCreate) defaults() {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		v := passkey.DefaultCreatedAt()
		pc.mutation.SetCreatedAt(v)
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		v := passkey.DefaultUpdatedAt()
		pc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pc.mutation.SignCount(); !ok {
		v := passkey.DefaultSignCount
		pc.mutation.SetSignCount(v)
	}
	if _, ok := pc.mutation.Active(); !ok {
		v := passkey.DefaultActive
		pc.mutation.SetActive(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PasskeyCreate) check() error {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Passkey.created_at"`)}
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Passkey.updated_at"`)}
	}
	if _, ok := pc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Passkey.user_id"`)}
	}
	if v, ok := pc.mutation.UserID(); ok {
		if err := passkey.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "Passkey.user_id": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Passkey.name"`)}
	}
	if v, ok := pc.mutation.Name(); ok {
		if err := passkey.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Passkey.name": %w`, err)}
		}
	}
	if _, ok := pc.mutation.CredentialID(); !ok {
		return &ValidationError{Name: "credential_id", err: errors.New(`ent: missing required field "Passkey.credential_id"`)}
	}
	if v, ok := pc.mutation.CredentialID(); ok {
		if err := passkey.CredentialIDValidator(v); err != nil {
			return &ValidationError{Name: "credential_id", err: fmt.Errorf(`ent: validator failed for field "Passkey.credential_id": %w`, err)}
		}
	}
	if _, ok := pc.mutation.PublicKey(); !ok {
		return &ValidationError{Name: "public_key", err: errors.New(`ent: missing required field "Passkey.public_key"`)}
	}
	if v, ok := pc.mutation.PublicKey(); ok {
		if err := passkey.PublicKeyValidator(v); err != nil {
			return &ValidationError{Name: "public_key", err: fmt.Errorf(`ent: validator failed for field "Passkey.public_key": %w`, err)}
		}
	}
	if _, ok := pc.mutation.SignCount(); !ok {
		return &ValidationError{Name: "sign_count", err: errors.New(`ent: missing required field "Passkey.sign_count"`)}
	}
	if _, ok := pc.mutation.Active(); !ok {
		return &ValidationError{Name: "active", err: errors.New(`ent: missing required field "Passkey.active"`)}
	}
	if len(pc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "Passkey.user"`)}
	}
	return nil
}

func (pc *PasskeyCreate) sqlSave(ctx context.Context) (*Passkey, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Passkey.ID type: %T", _spec.ID.Value)
		}
	}
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *PasskeyCreate) createSpec() (*Passkey, *sqlgraph.CreateSpec) {
	var (
		_node = &Passkey{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(passkey.Table, sqlgraph.NewFieldSpec(passkey.FieldID, field.TypeString))
	)
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.SetField(passkey.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.UpdatedAt(); ok {
		_spec.SetField(passkey.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := pc.mutation.Name(); ok {
		_spec.SetField(passkey.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := pc.mutation.CredentialID(); ok {
		_spec.SetField(passkey.FieldCredentialID, field.TypeString, value)
		_node.CredentialID = value
	}
	if value, ok := pc.mutation.PublicKey(); ok {
		_spec.SetField(passkey.FieldPublicKey, field.TypeBytes, value)
		_node.PublicKey = value
	}
	if value, ok := pc.mutation.SignCount(); ok {
		_spec.SetField(passkey.FieldSignCount, field.TypeInt, value)
		_node.SignCount = value
	}
	if value, ok := pc.mutation.Active(); ok {
		_spec.SetField(passkey.FieldActive, field.TypeBool, value)
		_node.Active = value
	}
	if value, ok := pc.mutation.DeviceType(); ok {
		_spec.SetField(passkey.FieldDeviceType, field.TypeString, value)
		_node.DeviceType = value
	}
	if value, ok := pc.mutation.Aaguid(); ok {
		_spec.SetField(passkey.FieldAaguid, field.TypeString, value)
		_node.Aaguid = value
	}
	if value, ok := pc.mutation.LastUsed(); ok {
		_spec.SetField(passkey.FieldLastUsed, field.TypeTime, value)
		_node.LastUsed = &value
	}
	if value, ok := pc.mutation.Transports(); ok {
		_spec.SetField(passkey.FieldTransports, field.TypeJSON, value)
		_node.Transports = value
	}
	if value, ok := pc.mutation.Attestation(); ok {
		_spec.SetField(passkey.FieldAttestation, field.TypeJSON, value)
		_node.Attestation = value
	}
	if nodes := pc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   passkey.UserTable,
			Columns: []string{passkey.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PasskeyCreateBulk is the builder for creating many Passkey entities in bulk.
type PasskeyCreateBulk struct {
	config
	err      error
	builders []*PasskeyCreate
}

// Save creates the Passkey entities in the database.
func (pcb *PasskeyCreateBulk) Save(ctx context.Context) ([]*Passkey, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Passkey, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PasskeyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PasskeyCreateBulk) SaveX(ctx context.Context) []*Passkey {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PasskeyCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PasskeyCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
