// Copyright 2023-present XRaph LLC. All rights reserved.
// This source code is licensed under the XRaph LLC license found
// in the LICENSE file in the root directory of this source tree.
// Code generated by ent, DO NOT EDIT.

package userrole

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/juicycleff/frank/ent/predicate"
	"github.com/juicycleff/frank/pkg/model"
	"github.com/rs/xid"
)

// ID filters vertices based on their ID field.
func ID(id xid.ID) predicate.UserRole {
	return predicate.UserRole(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id xid.ID) predicate.UserRole {
	return predicate.UserRole(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id xid.ID) predicate.UserRole {
	return predicate.UserRole(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...xid.ID) predicate.UserRole {
	return predicate.UserRole(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...xid.ID) predicate.UserRole {
	return predicate.UserRole(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id xid.ID) predicate.UserRole {
	return predicate.UserRole(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id xid.ID) predicate.UserRole {
	return predicate.UserRole(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id xid.ID) predicate.UserRole {
	return predicate.UserRole(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id xid.ID) predicate.UserRole {
	return predicate.UserRole(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.UserRole {
	return predicate.UserRole(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.UserRole {
	return predicate.UserRole(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.UserRole {
	return predicate.UserRole(sql.FieldEQ(FieldDeletedAt, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v xid.ID) predicate.UserRole {
	return predicate.UserRole(sql.FieldEQ(FieldUserID, v))
}

// RoleID applies equality check predicate on the "role_id" field. It's identical to RoleIDEQ.
func RoleID(v xid.ID) predicate.UserRole {
	return predicate.UserRole(sql.FieldEQ(FieldRoleID, v))
}

// ContextID applies equality check predicate on the "context_id" field. It's identical to ContextIDEQ.
func ContextID(v xid.ID) predicate.UserRole {
	return predicate.UserRole(sql.FieldEQ(FieldContextID, v))
}

// AssignedBy applies equality check predicate on the "assigned_by" field. It's identical to AssignedByEQ.
func AssignedBy(v xid.ID) predicate.UserRole {
	return predicate.UserRole(sql.FieldEQ(FieldAssignedBy, v))
}

// AssignedAt applies equality check predicate on the "assigned_at" field. It's identical to AssignedAtEQ.
func AssignedAt(v time.Time) predicate.UserRole {
	return predicate.UserRole(sql.FieldEQ(FieldAssignedAt, v))
}

// ExpiresAt applies equality check predicate on the "expires_at" field. It's identical to ExpiresAtEQ.
func ExpiresAt(v time.Time) predicate.UserRole {
	return predicate.UserRole(sql.FieldEQ(FieldExpiresAt, v))
}

// Active applies equality check predicate on the "active" field. It's identical to ActiveEQ.
func Active(v bool) predicate.UserRole {
	return predicate.UserRole(sql.FieldEQ(FieldActive, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.UserRole {
	return predicate.UserRole(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.UserRole {
	return predicate.UserRole(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.UserRole {
	return predicate.UserRole(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.UserRole {
	return predicate.UserRole(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.UserRole {
	return predicate.UserRole(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.UserRole {
	return predicate.UserRole(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.UserRole {
	return predicate.UserRole(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.UserRole {
	return predicate.UserRole(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.UserRole {
	return predicate.UserRole(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.UserRole {
	return predicate.UserRole(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.UserRole {
	return predicate.UserRole(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.UserRole {
	return predicate.UserRole(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.UserRole {
	return predicate.UserRole(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.UserRole {
	return predicate.UserRole(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.UserRole {
	return predicate.UserRole(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.UserRole {
	return predicate.UserRole(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.UserRole {
	return predicate.UserRole(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.UserRole {
	return predicate.UserRole(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.UserRole {
	return predicate.UserRole(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.UserRole {
	return predicate.UserRole(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.UserRole {
	return predicate.UserRole(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.UserRole {
	return predicate.UserRole(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.UserRole {
	return predicate.UserRole(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.UserRole {
	return predicate.UserRole(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.UserRole {
	return predicate.UserRole(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.UserRole {
	return predicate.UserRole(sql.FieldNotNull(FieldDeletedAt))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v xid.ID) predicate.UserRole {
	return predicate.UserRole(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v xid.ID) predicate.UserRole {
	return predicate.UserRole(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...xid.ID) predicate.UserRole {
	return predicate.UserRole(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...xid.ID) predicate.UserRole {
	return predicate.UserRole(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v xid.ID) predicate.UserRole {
	return predicate.UserRole(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v xid.ID) predicate.UserRole {
	return predicate.UserRole(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v xid.ID) predicate.UserRole {
	return predicate.UserRole(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v xid.ID) predicate.UserRole {
	return predicate.UserRole(sql.FieldLTE(FieldUserID, v))
}

// UserIDContains applies the Contains predicate on the "user_id" field.
func UserIDContains(v xid.ID) predicate.UserRole {
	vc := v.String()
	return predicate.UserRole(sql.FieldContains(FieldUserID, vc))
}

// UserIDHasPrefix applies the HasPrefix predicate on the "user_id" field.
func UserIDHasPrefix(v xid.ID) predicate.UserRole {
	vc := v.String()
	return predicate.UserRole(sql.FieldHasPrefix(FieldUserID, vc))
}

// UserIDHasSuffix applies the HasSuffix predicate on the "user_id" field.
func UserIDHasSuffix(v xid.ID) predicate.UserRole {
	vc := v.String()
	return predicate.UserRole(sql.FieldHasSuffix(FieldUserID, vc))
}

// UserIDEqualFold applies the EqualFold predicate on the "user_id" field.
func UserIDEqualFold(v xid.ID) predicate.UserRole {
	vc := v.String()
	return predicate.UserRole(sql.FieldEqualFold(FieldUserID, vc))
}

// UserIDContainsFold applies the ContainsFold predicate on the "user_id" field.
func UserIDContainsFold(v xid.ID) predicate.UserRole {
	vc := v.String()
	return predicate.UserRole(sql.FieldContainsFold(FieldUserID, vc))
}

// RoleIDEQ applies the EQ predicate on the "role_id" field.
func RoleIDEQ(v xid.ID) predicate.UserRole {
	return predicate.UserRole(sql.FieldEQ(FieldRoleID, v))
}

// RoleIDNEQ applies the NEQ predicate on the "role_id" field.
func RoleIDNEQ(v xid.ID) predicate.UserRole {
	return predicate.UserRole(sql.FieldNEQ(FieldRoleID, v))
}

// RoleIDIn applies the In predicate on the "role_id" field.
func RoleIDIn(vs ...xid.ID) predicate.UserRole {
	return predicate.UserRole(sql.FieldIn(FieldRoleID, vs...))
}

// RoleIDNotIn applies the NotIn predicate on the "role_id" field.
func RoleIDNotIn(vs ...xid.ID) predicate.UserRole {
	return predicate.UserRole(sql.FieldNotIn(FieldRoleID, vs...))
}

// RoleIDGT applies the GT predicate on the "role_id" field.
func RoleIDGT(v xid.ID) predicate.UserRole {
	return predicate.UserRole(sql.FieldGT(FieldRoleID, v))
}

// RoleIDGTE applies the GTE predicate on the "role_id" field.
func RoleIDGTE(v xid.ID) predicate.UserRole {
	return predicate.UserRole(sql.FieldGTE(FieldRoleID, v))
}

// RoleIDLT applies the LT predicate on the "role_id" field.
func RoleIDLT(v xid.ID) predicate.UserRole {
	return predicate.UserRole(sql.FieldLT(FieldRoleID, v))
}

// RoleIDLTE applies the LTE predicate on the "role_id" field.
func RoleIDLTE(v xid.ID) predicate.UserRole {
	return predicate.UserRole(sql.FieldLTE(FieldRoleID, v))
}

// RoleIDContains applies the Contains predicate on the "role_id" field.
func RoleIDContains(v xid.ID) predicate.UserRole {
	vc := v.String()
	return predicate.UserRole(sql.FieldContains(FieldRoleID, vc))
}

// RoleIDHasPrefix applies the HasPrefix predicate on the "role_id" field.
func RoleIDHasPrefix(v xid.ID) predicate.UserRole {
	vc := v.String()
	return predicate.UserRole(sql.FieldHasPrefix(FieldRoleID, vc))
}

// RoleIDHasSuffix applies the HasSuffix predicate on the "role_id" field.
func RoleIDHasSuffix(v xid.ID) predicate.UserRole {
	vc := v.String()
	return predicate.UserRole(sql.FieldHasSuffix(FieldRoleID, vc))
}

// RoleIDEqualFold applies the EqualFold predicate on the "role_id" field.
func RoleIDEqualFold(v xid.ID) predicate.UserRole {
	vc := v.String()
	return predicate.UserRole(sql.FieldEqualFold(FieldRoleID, vc))
}

// RoleIDContainsFold applies the ContainsFold predicate on the "role_id" field.
func RoleIDContainsFold(v xid.ID) predicate.UserRole {
	vc := v.String()
	return predicate.UserRole(sql.FieldContainsFold(FieldRoleID, vc))
}

// ContextTypeEQ applies the EQ predicate on the "context_type" field.
func ContextTypeEQ(v model.ContextType) predicate.UserRole {
	vc := v
	return predicate.UserRole(sql.FieldEQ(FieldContextType, vc))
}

// ContextTypeNEQ applies the NEQ predicate on the "context_type" field.
func ContextTypeNEQ(v model.ContextType) predicate.UserRole {
	vc := v
	return predicate.UserRole(sql.FieldNEQ(FieldContextType, vc))
}

// ContextTypeIn applies the In predicate on the "context_type" field.
func ContextTypeIn(vs ...model.ContextType) predicate.UserRole {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserRole(sql.FieldIn(FieldContextType, v...))
}

// ContextTypeNotIn applies the NotIn predicate on the "context_type" field.
func ContextTypeNotIn(vs ...model.ContextType) predicate.UserRole {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserRole(sql.FieldNotIn(FieldContextType, v...))
}

// ContextIDEQ applies the EQ predicate on the "context_id" field.
func ContextIDEQ(v xid.ID) predicate.UserRole {
	return predicate.UserRole(sql.FieldEQ(FieldContextID, v))
}

// ContextIDNEQ applies the NEQ predicate on the "context_id" field.
func ContextIDNEQ(v xid.ID) predicate.UserRole {
	return predicate.UserRole(sql.FieldNEQ(FieldContextID, v))
}

// ContextIDIn applies the In predicate on the "context_id" field.
func ContextIDIn(vs ...xid.ID) predicate.UserRole {
	return predicate.UserRole(sql.FieldIn(FieldContextID, vs...))
}

// ContextIDNotIn applies the NotIn predicate on the "context_id" field.
func ContextIDNotIn(vs ...xid.ID) predicate.UserRole {
	return predicate.UserRole(sql.FieldNotIn(FieldContextID, vs...))
}

// ContextIDGT applies the GT predicate on the "context_id" field.
func ContextIDGT(v xid.ID) predicate.UserRole {
	return predicate.UserRole(sql.FieldGT(FieldContextID, v))
}

// ContextIDGTE applies the GTE predicate on the "context_id" field.
func ContextIDGTE(v xid.ID) predicate.UserRole {
	return predicate.UserRole(sql.FieldGTE(FieldContextID, v))
}

// ContextIDLT applies the LT predicate on the "context_id" field.
func ContextIDLT(v xid.ID) predicate.UserRole {
	return predicate.UserRole(sql.FieldLT(FieldContextID, v))
}

// ContextIDLTE applies the LTE predicate on the "context_id" field.
func ContextIDLTE(v xid.ID) predicate.UserRole {
	return predicate.UserRole(sql.FieldLTE(FieldContextID, v))
}

// ContextIDContains applies the Contains predicate on the "context_id" field.
func ContextIDContains(v xid.ID) predicate.UserRole {
	vc := v.String()
	return predicate.UserRole(sql.FieldContains(FieldContextID, vc))
}

// ContextIDHasPrefix applies the HasPrefix predicate on the "context_id" field.
func ContextIDHasPrefix(v xid.ID) predicate.UserRole {
	vc := v.String()
	return predicate.UserRole(sql.FieldHasPrefix(FieldContextID, vc))
}

// ContextIDHasSuffix applies the HasSuffix predicate on the "context_id" field.
func ContextIDHasSuffix(v xid.ID) predicate.UserRole {
	vc := v.String()
	return predicate.UserRole(sql.FieldHasSuffix(FieldContextID, vc))
}

// ContextIDIsNil applies the IsNil predicate on the "context_id" field.
func ContextIDIsNil() predicate.UserRole {
	return predicate.UserRole(sql.FieldIsNull(FieldContextID))
}

// ContextIDNotNil applies the NotNil predicate on the "context_id" field.
func ContextIDNotNil() predicate.UserRole {
	return predicate.UserRole(sql.FieldNotNull(FieldContextID))
}

// ContextIDEqualFold applies the EqualFold predicate on the "context_id" field.
func ContextIDEqualFold(v xid.ID) predicate.UserRole {
	vc := v.String()
	return predicate.UserRole(sql.FieldEqualFold(FieldContextID, vc))
}

// ContextIDContainsFold applies the ContainsFold predicate on the "context_id" field.
func ContextIDContainsFold(v xid.ID) predicate.UserRole {
	vc := v.String()
	return predicate.UserRole(sql.FieldContainsFold(FieldContextID, vc))
}

// AssignedByEQ applies the EQ predicate on the "assigned_by" field.
func AssignedByEQ(v xid.ID) predicate.UserRole {
	return predicate.UserRole(sql.FieldEQ(FieldAssignedBy, v))
}

// AssignedByNEQ applies the NEQ predicate on the "assigned_by" field.
func AssignedByNEQ(v xid.ID) predicate.UserRole {
	return predicate.UserRole(sql.FieldNEQ(FieldAssignedBy, v))
}

// AssignedByIn applies the In predicate on the "assigned_by" field.
func AssignedByIn(vs ...xid.ID) predicate.UserRole {
	return predicate.UserRole(sql.FieldIn(FieldAssignedBy, vs...))
}

// AssignedByNotIn applies the NotIn predicate on the "assigned_by" field.
func AssignedByNotIn(vs ...xid.ID) predicate.UserRole {
	return predicate.UserRole(sql.FieldNotIn(FieldAssignedBy, vs...))
}

// AssignedByGT applies the GT predicate on the "assigned_by" field.
func AssignedByGT(v xid.ID) predicate.UserRole {
	return predicate.UserRole(sql.FieldGT(FieldAssignedBy, v))
}

// AssignedByGTE applies the GTE predicate on the "assigned_by" field.
func AssignedByGTE(v xid.ID) predicate.UserRole {
	return predicate.UserRole(sql.FieldGTE(FieldAssignedBy, v))
}

// AssignedByLT applies the LT predicate on the "assigned_by" field.
func AssignedByLT(v xid.ID) predicate.UserRole {
	return predicate.UserRole(sql.FieldLT(FieldAssignedBy, v))
}

// AssignedByLTE applies the LTE predicate on the "assigned_by" field.
func AssignedByLTE(v xid.ID) predicate.UserRole {
	return predicate.UserRole(sql.FieldLTE(FieldAssignedBy, v))
}

// AssignedByContains applies the Contains predicate on the "assigned_by" field.
func AssignedByContains(v xid.ID) predicate.UserRole {
	vc := v.String()
	return predicate.UserRole(sql.FieldContains(FieldAssignedBy, vc))
}

// AssignedByHasPrefix applies the HasPrefix predicate on the "assigned_by" field.
func AssignedByHasPrefix(v xid.ID) predicate.UserRole {
	vc := v.String()
	return predicate.UserRole(sql.FieldHasPrefix(FieldAssignedBy, vc))
}

// AssignedByHasSuffix applies the HasSuffix predicate on the "assigned_by" field.
func AssignedByHasSuffix(v xid.ID) predicate.UserRole {
	vc := v.String()
	return predicate.UserRole(sql.FieldHasSuffix(FieldAssignedBy, vc))
}

// AssignedByIsNil applies the IsNil predicate on the "assigned_by" field.
func AssignedByIsNil() predicate.UserRole {
	return predicate.UserRole(sql.FieldIsNull(FieldAssignedBy))
}

// AssignedByNotNil applies the NotNil predicate on the "assigned_by" field.
func AssignedByNotNil() predicate.UserRole {
	return predicate.UserRole(sql.FieldNotNull(FieldAssignedBy))
}

// AssignedByEqualFold applies the EqualFold predicate on the "assigned_by" field.
func AssignedByEqualFold(v xid.ID) predicate.UserRole {
	vc := v.String()
	return predicate.UserRole(sql.FieldEqualFold(FieldAssignedBy, vc))
}

// AssignedByContainsFold applies the ContainsFold predicate on the "assigned_by" field.
func AssignedByContainsFold(v xid.ID) predicate.UserRole {
	vc := v.String()
	return predicate.UserRole(sql.FieldContainsFold(FieldAssignedBy, vc))
}

// AssignedAtEQ applies the EQ predicate on the "assigned_at" field.
func AssignedAtEQ(v time.Time) predicate.UserRole {
	return predicate.UserRole(sql.FieldEQ(FieldAssignedAt, v))
}

// AssignedAtNEQ applies the NEQ predicate on the "assigned_at" field.
func AssignedAtNEQ(v time.Time) predicate.UserRole {
	return predicate.UserRole(sql.FieldNEQ(FieldAssignedAt, v))
}

// AssignedAtIn applies the In predicate on the "assigned_at" field.
func AssignedAtIn(vs ...time.Time) predicate.UserRole {
	return predicate.UserRole(sql.FieldIn(FieldAssignedAt, vs...))
}

// AssignedAtNotIn applies the NotIn predicate on the "assigned_at" field.
func AssignedAtNotIn(vs ...time.Time) predicate.UserRole {
	return predicate.UserRole(sql.FieldNotIn(FieldAssignedAt, vs...))
}

// AssignedAtGT applies the GT predicate on the "assigned_at" field.
func AssignedAtGT(v time.Time) predicate.UserRole {
	return predicate.UserRole(sql.FieldGT(FieldAssignedAt, v))
}

// AssignedAtGTE applies the GTE predicate on the "assigned_at" field.
func AssignedAtGTE(v time.Time) predicate.UserRole {
	return predicate.UserRole(sql.FieldGTE(FieldAssignedAt, v))
}

// AssignedAtLT applies the LT predicate on the "assigned_at" field.
func AssignedAtLT(v time.Time) predicate.UserRole {
	return predicate.UserRole(sql.FieldLT(FieldAssignedAt, v))
}

// AssignedAtLTE applies the LTE predicate on the "assigned_at" field.
func AssignedAtLTE(v time.Time) predicate.UserRole {
	return predicate.UserRole(sql.FieldLTE(FieldAssignedAt, v))
}

// ExpiresAtEQ applies the EQ predicate on the "expires_at" field.
func ExpiresAtEQ(v time.Time) predicate.UserRole {
	return predicate.UserRole(sql.FieldEQ(FieldExpiresAt, v))
}

// ExpiresAtNEQ applies the NEQ predicate on the "expires_at" field.
func ExpiresAtNEQ(v time.Time) predicate.UserRole {
	return predicate.UserRole(sql.FieldNEQ(FieldExpiresAt, v))
}

// ExpiresAtIn applies the In predicate on the "expires_at" field.
func ExpiresAtIn(vs ...time.Time) predicate.UserRole {
	return predicate.UserRole(sql.FieldIn(FieldExpiresAt, vs...))
}

// ExpiresAtNotIn applies the NotIn predicate on the "expires_at" field.
func ExpiresAtNotIn(vs ...time.Time) predicate.UserRole {
	return predicate.UserRole(sql.FieldNotIn(FieldExpiresAt, vs...))
}

// ExpiresAtGT applies the GT predicate on the "expires_at" field.
func ExpiresAtGT(v time.Time) predicate.UserRole {
	return predicate.UserRole(sql.FieldGT(FieldExpiresAt, v))
}

// ExpiresAtGTE applies the GTE predicate on the "expires_at" field.
func ExpiresAtGTE(v time.Time) predicate.UserRole {
	return predicate.UserRole(sql.FieldGTE(FieldExpiresAt, v))
}

// ExpiresAtLT applies the LT predicate on the "expires_at" field.
func ExpiresAtLT(v time.Time) predicate.UserRole {
	return predicate.UserRole(sql.FieldLT(FieldExpiresAt, v))
}

// ExpiresAtLTE applies the LTE predicate on the "expires_at" field.
func ExpiresAtLTE(v time.Time) predicate.UserRole {
	return predicate.UserRole(sql.FieldLTE(FieldExpiresAt, v))
}

// ExpiresAtIsNil applies the IsNil predicate on the "expires_at" field.
func ExpiresAtIsNil() predicate.UserRole {
	return predicate.UserRole(sql.FieldIsNull(FieldExpiresAt))
}

// ExpiresAtNotNil applies the NotNil predicate on the "expires_at" field.
func ExpiresAtNotNil() predicate.UserRole {
	return predicate.UserRole(sql.FieldNotNull(FieldExpiresAt))
}

// ActiveEQ applies the EQ predicate on the "active" field.
func ActiveEQ(v bool) predicate.UserRole {
	return predicate.UserRole(sql.FieldEQ(FieldActive, v))
}

// ActiveNEQ applies the NEQ predicate on the "active" field.
func ActiveNEQ(v bool) predicate.UserRole {
	return predicate.UserRole(sql.FieldNEQ(FieldActive, v))
}

// ConditionsIsNil applies the IsNil predicate on the "conditions" field.
func ConditionsIsNil() predicate.UserRole {
	return predicate.UserRole(sql.FieldIsNull(FieldConditions))
}

// ConditionsNotNil applies the NotNil predicate on the "conditions" field.
func ConditionsNotNil() predicate.UserRole {
	return predicate.UserRole(sql.FieldNotNull(FieldConditions))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.UserRole {
	return predicate.UserRole(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.UserRole {
	return predicate.UserRole(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRole applies the HasEdge predicate on the "role" edge.
func HasRole() predicate.UserRole {
	return predicate.UserRole(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RoleTable, RoleColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRoleWith applies the HasEdge predicate on the "role" edge with a given conditions (other predicates).
func HasRoleWith(preds ...predicate.Role) predicate.UserRole {
	return predicate.UserRole(func(s *sql.Selector) {
		step := newRoleStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrganizationContext applies the HasEdge predicate on the "organization_context" edge.
func HasOrganizationContext() predicate.UserRole {
	return predicate.UserRole(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, OrganizationContextTable, OrganizationContextColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrganizationContextWith applies the HasEdge predicate on the "organization_context" edge with a given conditions (other predicates).
func HasOrganizationContextWith(preds ...predicate.Organization) predicate.UserRole {
	return predicate.UserRole(func(s *sql.Selector) {
		step := newOrganizationContextStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAssignedByUser applies the HasEdge predicate on the "assigned_by_user" edge.
func HasAssignedByUser() predicate.UserRole {
	return predicate.UserRole(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AssignedByUserTable, AssignedByUserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAssignedByUserWith applies the HasEdge predicate on the "assigned_by_user" edge with a given conditions (other predicates).
func HasAssignedByUserWith(preds ...predicate.User) predicate.UserRole {
	return predicate.UserRole(func(s *sql.Selector) {
		step := newAssignedByUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserRole) predicate.UserRole {
	return predicate.UserRole(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserRole) predicate.UserRole {
	return predicate.UserRole(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserRole) predicate.UserRole {
	return predicate.UserRole(sql.NotPredicates(p))
}
