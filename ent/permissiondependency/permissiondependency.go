// Copyright 2023-present XRaph LLC. All rights reserved.
// This source code is licensed under the XRaph LLC license found
// in the LICENSE file in the root directory of this source tree.
// Code generated by ent, DO NOT EDIT.

package permissiondependency

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/rs/xid"
)

const (
	// Label holds the string label denoting the permissiondependency type in the database.
	Label = "permission_dependency"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldPermissionID holds the string denoting the permission_id field in the database.
	FieldPermissionID = "permission_id"
	// FieldRequiredPermissionID holds the string denoting the required_permission_id field in the database.
	FieldRequiredPermissionID = "required_permission_id"
	// FieldDependencyType holds the string denoting the dependency_type field in the database.
	FieldDependencyType = "dependency_type"
	// FieldCondition holds the string denoting the condition field in the database.
	FieldCondition = "condition"
	// FieldActive holds the string denoting the active field in the database.
	FieldActive = "active"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// EdgePermission holds the string denoting the permission edge name in mutations.
	EdgePermission = "permission"
	// EdgeRequiredPermission holds the string denoting the required_permission edge name in mutations.
	EdgeRequiredPermission = "required_permission"
	// Table holds the table name of the permissiondependency in the database.
	Table = "permission_dependencies"
	// PermissionTable is the table that holds the permission relation/edge.
	PermissionTable = "permission_dependencies"
	// PermissionInverseTable is the table name for the Permission entity.
	// It exists in this package in order to avoid circular dependency with the "permission" package.
	PermissionInverseTable = "permissions"
	// PermissionColumn is the table column denoting the permission relation/edge.
	PermissionColumn = "permission_id"
	// RequiredPermissionTable is the table that holds the required_permission relation/edge.
	RequiredPermissionTable = "permission_dependencies"
	// RequiredPermissionInverseTable is the table name for the Permission entity.
	// It exists in this package in order to avoid circular dependency with the "permission" package.
	RequiredPermissionInverseTable = "permissions"
	// RequiredPermissionColumn is the table column denoting the required_permission relation/edge.
	RequiredPermissionColumn = "required_permission_id"
)

// Columns holds all SQL columns for permissiondependency fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldPermissionID,
	FieldRequiredPermissionID,
	FieldDependencyType,
	FieldCondition,
	FieldActive,
	FieldCreatedBy,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// PermissionIDValidator is a validator for the "permission_id" field. It is called by the builders before save.
	PermissionIDValidator func(string) error
	// RequiredPermissionIDValidator is a validator for the "required_permission_id" field. It is called by the builders before save.
	RequiredPermissionIDValidator func(string) error
	// DefaultActive holds the default value on creation for the "active" field.
	DefaultActive bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() xid.ID
)

// DependencyType defines the type for the "dependency_type" enum field.
type DependencyType string

// DependencyTypeRequired is the default value of the DependencyType enum.
const DefaultDependencyType = DependencyTypeRequired

// DependencyType values.
const (
	DependencyTypeRequired    DependencyType = "required"
	DependencyTypeImplied     DependencyType = "implied"
	DependencyTypeConditional DependencyType = "conditional"
)

func (dt DependencyType) String() string {
	return string(dt)
}

// DependencyTypeValidator is a validator for the "dependency_type" field enum values. It is called by the builders before save.
func DependencyTypeValidator(dt DependencyType) error {
	switch dt {
	case DependencyTypeRequired, DependencyTypeImplied, DependencyTypeConditional:
		return nil
	default:
		return fmt.Errorf("permissiondependency: invalid enum value for dependency_type field: %q", dt)
	}
}

// OrderOption defines the ordering options for the PermissionDependency queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByPermissionID orders the results by the permission_id field.
func ByPermissionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPermissionID, opts...).ToFunc()
}

// ByRequiredPermissionID orders the results by the required_permission_id field.
func ByRequiredPermissionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRequiredPermissionID, opts...).ToFunc()
}

// ByDependencyType orders the results by the dependency_type field.
func ByDependencyType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDependencyType, opts...).ToFunc()
}

// ByCondition orders the results by the condition field.
func ByCondition(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCondition, opts...).ToFunc()
}

// ByActive orders the results by the active field.
func ByActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActive, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByPermissionField orders the results by permission field.
func ByPermissionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPermissionStep(), sql.OrderByField(field, opts...))
	}
}

// ByRequiredPermissionField orders the results by required_permission field.
func ByRequiredPermissionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRequiredPermissionStep(), sql.OrderByField(field, opts...))
	}
}
func newPermissionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PermissionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, PermissionTable, PermissionColumn),
	)
}
func newRequiredPermissionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RequiredPermissionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, RequiredPermissionTable, RequiredPermissionColumn),
	)
}
