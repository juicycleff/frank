// Copyright 2023-present XRaph LLC. All rights reserved.
// This source code is licensed under the XRaph LLC license found
// in the LICENSE file in the root directory of this source tree.
// Code generated by ent, DO NOT EDIT.

package user

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/juicycleff/frank/ent/predicate"
	"github.com/rs/xid"
)

// ID filters vertices based on their ID field.
func ID(id xid.ID) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id xid.ID) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id xid.ID) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...xid.ID) predicate.User {
	return predicate.User(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...xid.ID) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id xid.ID) predicate.User {
	return predicate.User(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id xid.ID) predicate.User {
	return predicate.User(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id xid.ID) predicate.User {
	return predicate.User(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id xid.ID) predicate.User {
	return predicate.User(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdatedAt, v))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmail, v))
}

// PhoneNumber applies equality check predicate on the "phone_number" field. It's identical to PhoneNumberEQ.
func PhoneNumber(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPhoneNumber, v))
}

// FirstName applies equality check predicate on the "first_name" field. It's identical to FirstNameEQ.
func FirstName(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldFirstName, v))
}

// LastName applies equality check predicate on the "last_name" field. It's identical to LastNameEQ.
func LastName(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLastName, v))
}

// Username applies equality check predicate on the "username" field. It's identical to UsernameEQ.
func Username(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUsername, v))
}

// PasswordHash applies equality check predicate on the "password_hash" field. It's identical to PasswordHashEQ.
func PasswordHash(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPasswordHash, v))
}

// EmailVerified applies equality check predicate on the "email_verified" field. It's identical to EmailVerifiedEQ.
func EmailVerified(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmailVerified, v))
}

// PhoneVerified applies equality check predicate on the "phone_verified" field. It's identical to PhoneVerifiedEQ.
func PhoneVerified(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPhoneVerified, v))
}

// Active applies equality check predicate on the "active" field. It's identical to ActiveEQ.
func Active(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldActive, v))
}

// Blocked applies equality check predicate on the "blocked" field. It's identical to BlockedEQ.
func Blocked(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldBlocked, v))
}

// LastLogin applies equality check predicate on the "last_login" field. It's identical to LastLoginEQ.
func LastLogin(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLastLogin, v))
}

// LastPasswordChange applies equality check predicate on the "last_password_change" field. It's identical to LastPasswordChangeEQ.
func LastPasswordChange(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLastPasswordChange, v))
}

// ProfileImageURL applies equality check predicate on the "profile_image_url" field. It's identical to ProfileImageURLEQ.
func ProfileImageURL(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldProfileImageURL, v))
}

// Locale applies equality check predicate on the "locale" field. It's identical to LocaleEQ.
func Locale(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLocale, v))
}

// Timezone applies equality check predicate on the "timezone" field. It's identical to TimezoneEQ.
func Timezone(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldTimezone, v))
}

// OrganizationID applies equality check predicate on the "organization_id" field. It's identical to OrganizationIDEQ.
func OrganizationID(v xid.ID) predicate.User {
	return predicate.User(sql.FieldEQ(FieldOrganizationID, v))
}

// PrimaryOrganizationID applies equality check predicate on the "primary_organization_id" field. It's identical to PrimaryOrganizationIDEQ.
func PrimaryOrganizationID(v xid.ID) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPrimaryOrganizationID, v))
}

// IsPlatformAdmin applies equality check predicate on the "is_platform_admin" field. It's identical to IsPlatformAdminEQ.
func IsPlatformAdmin(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldIsPlatformAdmin, v))
}

// AuthProvider applies equality check predicate on the "auth_provider" field. It's identical to AuthProviderEQ.
func AuthProvider(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAuthProvider, v))
}

// ExternalID applies equality check predicate on the "external_id" field. It's identical to ExternalIDEQ.
func ExternalID(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldExternalID, v))
}

// CustomerID applies equality check predicate on the "customer_id" field. It's identical to CustomerIDEQ.
func CustomerID(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCustomerID, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedBy, v))
}

// PasswordResetTokenExpires applies equality check predicate on the "password_reset_token_expires" field. It's identical to PasswordResetTokenExpiresEQ.
func PasswordResetTokenExpires(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPasswordResetTokenExpires, v))
}

// PasswordResetToken applies equality check predicate on the "password_reset_token" field. It's identical to PasswordResetTokenEQ.
func PasswordResetToken(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPasswordResetToken, v))
}

// LoginCount applies equality check predicate on the "login_count" field. It's identical to LoginCountEQ.
func LoginCount(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLoginCount, v))
}

// LastLoginIP applies equality check predicate on the "last_login_ip" field. It's identical to LastLoginIPEQ.
func LastLoginIP(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLastLoginIP, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUpdatedAt, v))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldEmail, v))
}

// PhoneNumberEQ applies the EQ predicate on the "phone_number" field.
func PhoneNumberEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPhoneNumber, v))
}

// PhoneNumberNEQ applies the NEQ predicate on the "phone_number" field.
func PhoneNumberNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPhoneNumber, v))
}

// PhoneNumberIn applies the In predicate on the "phone_number" field.
func PhoneNumberIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldPhoneNumber, vs...))
}

// PhoneNumberNotIn applies the NotIn predicate on the "phone_number" field.
func PhoneNumberNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldPhoneNumber, vs...))
}

// PhoneNumberGT applies the GT predicate on the "phone_number" field.
func PhoneNumberGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldPhoneNumber, v))
}

// PhoneNumberGTE applies the GTE predicate on the "phone_number" field.
func PhoneNumberGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldPhoneNumber, v))
}

// PhoneNumberLT applies the LT predicate on the "phone_number" field.
func PhoneNumberLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldPhoneNumber, v))
}

// PhoneNumberLTE applies the LTE predicate on the "phone_number" field.
func PhoneNumberLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldPhoneNumber, v))
}

// PhoneNumberContains applies the Contains predicate on the "phone_number" field.
func PhoneNumberContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldPhoneNumber, v))
}

// PhoneNumberHasPrefix applies the HasPrefix predicate on the "phone_number" field.
func PhoneNumberHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldPhoneNumber, v))
}

// PhoneNumberHasSuffix applies the HasSuffix predicate on the "phone_number" field.
func PhoneNumberHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldPhoneNumber, v))
}

// PhoneNumberIsNil applies the IsNil predicate on the "phone_number" field.
func PhoneNumberIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldPhoneNumber))
}

// PhoneNumberNotNil applies the NotNil predicate on the "phone_number" field.
func PhoneNumberNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldPhoneNumber))
}

// PhoneNumberEqualFold applies the EqualFold predicate on the "phone_number" field.
func PhoneNumberEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldPhoneNumber, v))
}

// PhoneNumberContainsFold applies the ContainsFold predicate on the "phone_number" field.
func PhoneNumberContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldPhoneNumber, v))
}

// FirstNameEQ applies the EQ predicate on the "first_name" field.
func FirstNameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldFirstName, v))
}

// FirstNameNEQ applies the NEQ predicate on the "first_name" field.
func FirstNameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldFirstName, v))
}

// FirstNameIn applies the In predicate on the "first_name" field.
func FirstNameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldFirstName, vs...))
}

// FirstNameNotIn applies the NotIn predicate on the "first_name" field.
func FirstNameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldFirstName, vs...))
}

// FirstNameGT applies the GT predicate on the "first_name" field.
func FirstNameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldFirstName, v))
}

// FirstNameGTE applies the GTE predicate on the "first_name" field.
func FirstNameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldFirstName, v))
}

// FirstNameLT applies the LT predicate on the "first_name" field.
func FirstNameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldFirstName, v))
}

// FirstNameLTE applies the LTE predicate on the "first_name" field.
func FirstNameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldFirstName, v))
}

// FirstNameContains applies the Contains predicate on the "first_name" field.
func FirstNameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldFirstName, v))
}

// FirstNameHasPrefix applies the HasPrefix predicate on the "first_name" field.
func FirstNameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldFirstName, v))
}

// FirstNameHasSuffix applies the HasSuffix predicate on the "first_name" field.
func FirstNameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldFirstName, v))
}

// FirstNameIsNil applies the IsNil predicate on the "first_name" field.
func FirstNameIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldFirstName))
}

// FirstNameNotNil applies the NotNil predicate on the "first_name" field.
func FirstNameNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldFirstName))
}

// FirstNameEqualFold applies the EqualFold predicate on the "first_name" field.
func FirstNameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldFirstName, v))
}

// FirstNameContainsFold applies the ContainsFold predicate on the "first_name" field.
func FirstNameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldFirstName, v))
}

// LastNameEQ applies the EQ predicate on the "last_name" field.
func LastNameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLastName, v))
}

// LastNameNEQ applies the NEQ predicate on the "last_name" field.
func LastNameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldLastName, v))
}

// LastNameIn applies the In predicate on the "last_name" field.
func LastNameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldLastName, vs...))
}

// LastNameNotIn applies the NotIn predicate on the "last_name" field.
func LastNameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldLastName, vs...))
}

// LastNameGT applies the GT predicate on the "last_name" field.
func LastNameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldLastName, v))
}

// LastNameGTE applies the GTE predicate on the "last_name" field.
func LastNameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldLastName, v))
}

// LastNameLT applies the LT predicate on the "last_name" field.
func LastNameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldLastName, v))
}

// LastNameLTE applies the LTE predicate on the "last_name" field.
func LastNameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldLastName, v))
}

// LastNameContains applies the Contains predicate on the "last_name" field.
func LastNameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldLastName, v))
}

// LastNameHasPrefix applies the HasPrefix predicate on the "last_name" field.
func LastNameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldLastName, v))
}

// LastNameHasSuffix applies the HasSuffix predicate on the "last_name" field.
func LastNameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldLastName, v))
}

// LastNameIsNil applies the IsNil predicate on the "last_name" field.
func LastNameIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldLastName))
}

// LastNameNotNil applies the NotNil predicate on the "last_name" field.
func LastNameNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldLastName))
}

// LastNameEqualFold applies the EqualFold predicate on the "last_name" field.
func LastNameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldLastName, v))
}

// LastNameContainsFold applies the ContainsFold predicate on the "last_name" field.
func LastNameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldLastName, v))
}

// UsernameEQ applies the EQ predicate on the "username" field.
func UsernameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUsername, v))
}

// UsernameNEQ applies the NEQ predicate on the "username" field.
func UsernameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUsername, v))
}

// UsernameIn applies the In predicate on the "username" field.
func UsernameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldUsername, vs...))
}

// UsernameNotIn applies the NotIn predicate on the "username" field.
func UsernameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUsername, vs...))
}

// UsernameGT applies the GT predicate on the "username" field.
func UsernameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldUsername, v))
}

// UsernameGTE applies the GTE predicate on the "username" field.
func UsernameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUsername, v))
}

// UsernameLT applies the LT predicate on the "username" field.
func UsernameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldUsername, v))
}

// UsernameLTE applies the LTE predicate on the "username" field.
func UsernameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUsername, v))
}

// UsernameContains applies the Contains predicate on the "username" field.
func UsernameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldUsername, v))
}

// UsernameHasPrefix applies the HasPrefix predicate on the "username" field.
func UsernameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldUsername, v))
}

// UsernameHasSuffix applies the HasSuffix predicate on the "username" field.
func UsernameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldUsername, v))
}

// UsernameIsNil applies the IsNil predicate on the "username" field.
func UsernameIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldUsername))
}

// UsernameNotNil applies the NotNil predicate on the "username" field.
func UsernameNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldUsername))
}

// UsernameEqualFold applies the EqualFold predicate on the "username" field.
func UsernameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldUsername, v))
}

// UsernameContainsFold applies the ContainsFold predicate on the "username" field.
func UsernameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldUsername, v))
}

// PasswordHashEQ applies the EQ predicate on the "password_hash" field.
func PasswordHashEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPasswordHash, v))
}

// PasswordHashNEQ applies the NEQ predicate on the "password_hash" field.
func PasswordHashNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPasswordHash, v))
}

// PasswordHashIn applies the In predicate on the "password_hash" field.
func PasswordHashIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldPasswordHash, vs...))
}

// PasswordHashNotIn applies the NotIn predicate on the "password_hash" field.
func PasswordHashNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldPasswordHash, vs...))
}

// PasswordHashGT applies the GT predicate on the "password_hash" field.
func PasswordHashGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldPasswordHash, v))
}

// PasswordHashGTE applies the GTE predicate on the "password_hash" field.
func PasswordHashGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldPasswordHash, v))
}

// PasswordHashLT applies the LT predicate on the "password_hash" field.
func PasswordHashLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldPasswordHash, v))
}

// PasswordHashLTE applies the LTE predicate on the "password_hash" field.
func PasswordHashLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldPasswordHash, v))
}

// PasswordHashContains applies the Contains predicate on the "password_hash" field.
func PasswordHashContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldPasswordHash, v))
}

// PasswordHashHasPrefix applies the HasPrefix predicate on the "password_hash" field.
func PasswordHashHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldPasswordHash, v))
}

// PasswordHashHasSuffix applies the HasSuffix predicate on the "password_hash" field.
func PasswordHashHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldPasswordHash, v))
}

// PasswordHashIsNil applies the IsNil predicate on the "password_hash" field.
func PasswordHashIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldPasswordHash))
}

// PasswordHashNotNil applies the NotNil predicate on the "password_hash" field.
func PasswordHashNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldPasswordHash))
}

// PasswordHashEqualFold applies the EqualFold predicate on the "password_hash" field.
func PasswordHashEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldPasswordHash, v))
}

// PasswordHashContainsFold applies the ContainsFold predicate on the "password_hash" field.
func PasswordHashContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldPasswordHash, v))
}

// EmailVerifiedEQ applies the EQ predicate on the "email_verified" field.
func EmailVerifiedEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmailVerified, v))
}

// EmailVerifiedNEQ applies the NEQ predicate on the "email_verified" field.
func EmailVerifiedNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldEmailVerified, v))
}

// PhoneVerifiedEQ applies the EQ predicate on the "phone_verified" field.
func PhoneVerifiedEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPhoneVerified, v))
}

// PhoneVerifiedNEQ applies the NEQ predicate on the "phone_verified" field.
func PhoneVerifiedNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPhoneVerified, v))
}

// ActiveEQ applies the EQ predicate on the "active" field.
func ActiveEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldActive, v))
}

// ActiveNEQ applies the NEQ predicate on the "active" field.
func ActiveNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldActive, v))
}

// BlockedEQ applies the EQ predicate on the "blocked" field.
func BlockedEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldBlocked, v))
}

// BlockedNEQ applies the NEQ predicate on the "blocked" field.
func BlockedNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldBlocked, v))
}

// LastLoginEQ applies the EQ predicate on the "last_login" field.
func LastLoginEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLastLogin, v))
}

// LastLoginNEQ applies the NEQ predicate on the "last_login" field.
func LastLoginNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldLastLogin, v))
}

// LastLoginIn applies the In predicate on the "last_login" field.
func LastLoginIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldLastLogin, vs...))
}

// LastLoginNotIn applies the NotIn predicate on the "last_login" field.
func LastLoginNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldLastLogin, vs...))
}

// LastLoginGT applies the GT predicate on the "last_login" field.
func LastLoginGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldLastLogin, v))
}

// LastLoginGTE applies the GTE predicate on the "last_login" field.
func LastLoginGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldLastLogin, v))
}

// LastLoginLT applies the LT predicate on the "last_login" field.
func LastLoginLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldLastLogin, v))
}

// LastLoginLTE applies the LTE predicate on the "last_login" field.
func LastLoginLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldLastLogin, v))
}

// LastLoginIsNil applies the IsNil predicate on the "last_login" field.
func LastLoginIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldLastLogin))
}

// LastLoginNotNil applies the NotNil predicate on the "last_login" field.
func LastLoginNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldLastLogin))
}

// LastPasswordChangeEQ applies the EQ predicate on the "last_password_change" field.
func LastPasswordChangeEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLastPasswordChange, v))
}

// LastPasswordChangeNEQ applies the NEQ predicate on the "last_password_change" field.
func LastPasswordChangeNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldLastPasswordChange, v))
}

// LastPasswordChangeIn applies the In predicate on the "last_password_change" field.
func LastPasswordChangeIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldLastPasswordChange, vs...))
}

// LastPasswordChangeNotIn applies the NotIn predicate on the "last_password_change" field.
func LastPasswordChangeNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldLastPasswordChange, vs...))
}

// LastPasswordChangeGT applies the GT predicate on the "last_password_change" field.
func LastPasswordChangeGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldLastPasswordChange, v))
}

// LastPasswordChangeGTE applies the GTE predicate on the "last_password_change" field.
func LastPasswordChangeGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldLastPasswordChange, v))
}

// LastPasswordChangeLT applies the LT predicate on the "last_password_change" field.
func LastPasswordChangeLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldLastPasswordChange, v))
}

// LastPasswordChangeLTE applies the LTE predicate on the "last_password_change" field.
func LastPasswordChangeLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldLastPasswordChange, v))
}

// LastPasswordChangeIsNil applies the IsNil predicate on the "last_password_change" field.
func LastPasswordChangeIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldLastPasswordChange))
}

// LastPasswordChangeNotNil applies the NotNil predicate on the "last_password_change" field.
func LastPasswordChangeNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldLastPasswordChange))
}

// MetadataIsNil applies the IsNil predicate on the "metadata" field.
func MetadataIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldMetadata))
}

// MetadataNotNil applies the NotNil predicate on the "metadata" field.
func MetadataNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldMetadata))
}

// ProfileImageURLEQ applies the EQ predicate on the "profile_image_url" field.
func ProfileImageURLEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldProfileImageURL, v))
}

// ProfileImageURLNEQ applies the NEQ predicate on the "profile_image_url" field.
func ProfileImageURLNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldProfileImageURL, v))
}

// ProfileImageURLIn applies the In predicate on the "profile_image_url" field.
func ProfileImageURLIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldProfileImageURL, vs...))
}

// ProfileImageURLNotIn applies the NotIn predicate on the "profile_image_url" field.
func ProfileImageURLNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldProfileImageURL, vs...))
}

// ProfileImageURLGT applies the GT predicate on the "profile_image_url" field.
func ProfileImageURLGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldProfileImageURL, v))
}

// ProfileImageURLGTE applies the GTE predicate on the "profile_image_url" field.
func ProfileImageURLGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldProfileImageURL, v))
}

// ProfileImageURLLT applies the LT predicate on the "profile_image_url" field.
func ProfileImageURLLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldProfileImageURL, v))
}

// ProfileImageURLLTE applies the LTE predicate on the "profile_image_url" field.
func ProfileImageURLLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldProfileImageURL, v))
}

// ProfileImageURLContains applies the Contains predicate on the "profile_image_url" field.
func ProfileImageURLContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldProfileImageURL, v))
}

// ProfileImageURLHasPrefix applies the HasPrefix predicate on the "profile_image_url" field.
func ProfileImageURLHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldProfileImageURL, v))
}

// ProfileImageURLHasSuffix applies the HasSuffix predicate on the "profile_image_url" field.
func ProfileImageURLHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldProfileImageURL, v))
}

// ProfileImageURLIsNil applies the IsNil predicate on the "profile_image_url" field.
func ProfileImageURLIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldProfileImageURL))
}

// ProfileImageURLNotNil applies the NotNil predicate on the "profile_image_url" field.
func ProfileImageURLNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldProfileImageURL))
}

// ProfileImageURLEqualFold applies the EqualFold predicate on the "profile_image_url" field.
func ProfileImageURLEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldProfileImageURL, v))
}

// ProfileImageURLContainsFold applies the ContainsFold predicate on the "profile_image_url" field.
func ProfileImageURLContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldProfileImageURL, v))
}

// LocaleEQ applies the EQ predicate on the "locale" field.
func LocaleEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLocale, v))
}

// LocaleNEQ applies the NEQ predicate on the "locale" field.
func LocaleNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldLocale, v))
}

// LocaleIn applies the In predicate on the "locale" field.
func LocaleIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldLocale, vs...))
}

// LocaleNotIn applies the NotIn predicate on the "locale" field.
func LocaleNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldLocale, vs...))
}

// LocaleGT applies the GT predicate on the "locale" field.
func LocaleGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldLocale, v))
}

// LocaleGTE applies the GTE predicate on the "locale" field.
func LocaleGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldLocale, v))
}

// LocaleLT applies the LT predicate on the "locale" field.
func LocaleLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldLocale, v))
}

// LocaleLTE applies the LTE predicate on the "locale" field.
func LocaleLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldLocale, v))
}

// LocaleContains applies the Contains predicate on the "locale" field.
func LocaleContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldLocale, v))
}

// LocaleHasPrefix applies the HasPrefix predicate on the "locale" field.
func LocaleHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldLocale, v))
}

// LocaleHasSuffix applies the HasSuffix predicate on the "locale" field.
func LocaleHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldLocale, v))
}

// LocaleEqualFold applies the EqualFold predicate on the "locale" field.
func LocaleEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldLocale, v))
}

// LocaleContainsFold applies the ContainsFold predicate on the "locale" field.
func LocaleContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldLocale, v))
}

// TimezoneEQ applies the EQ predicate on the "timezone" field.
func TimezoneEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldTimezone, v))
}

// TimezoneNEQ applies the NEQ predicate on the "timezone" field.
func TimezoneNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldTimezone, v))
}

// TimezoneIn applies the In predicate on the "timezone" field.
func TimezoneIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldTimezone, vs...))
}

// TimezoneNotIn applies the NotIn predicate on the "timezone" field.
func TimezoneNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldTimezone, vs...))
}

// TimezoneGT applies the GT predicate on the "timezone" field.
func TimezoneGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldTimezone, v))
}

// TimezoneGTE applies the GTE predicate on the "timezone" field.
func TimezoneGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldTimezone, v))
}

// TimezoneLT applies the LT predicate on the "timezone" field.
func TimezoneLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldTimezone, v))
}

// TimezoneLTE applies the LTE predicate on the "timezone" field.
func TimezoneLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldTimezone, v))
}

// TimezoneContains applies the Contains predicate on the "timezone" field.
func TimezoneContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldTimezone, v))
}

// TimezoneHasPrefix applies the HasPrefix predicate on the "timezone" field.
func TimezoneHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldTimezone, v))
}

// TimezoneHasSuffix applies the HasSuffix predicate on the "timezone" field.
func TimezoneHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldTimezone, v))
}

// TimezoneIsNil applies the IsNil predicate on the "timezone" field.
func TimezoneIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldTimezone))
}

// TimezoneNotNil applies the NotNil predicate on the "timezone" field.
func TimezoneNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldTimezone))
}

// TimezoneEqualFold applies the EqualFold predicate on the "timezone" field.
func TimezoneEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldTimezone, v))
}

// TimezoneContainsFold applies the ContainsFold predicate on the "timezone" field.
func TimezoneContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldTimezone, v))
}

// UserTypeEQ applies the EQ predicate on the "user_type" field.
func UserTypeEQ(v UserType) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUserType, v))
}

// UserTypeNEQ applies the NEQ predicate on the "user_type" field.
func UserTypeNEQ(v UserType) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUserType, v))
}

// UserTypeIn applies the In predicate on the "user_type" field.
func UserTypeIn(vs ...UserType) predicate.User {
	return predicate.User(sql.FieldIn(FieldUserType, vs...))
}

// UserTypeNotIn applies the NotIn predicate on the "user_type" field.
func UserTypeNotIn(vs ...UserType) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUserType, vs...))
}

// OrganizationIDEQ applies the EQ predicate on the "organization_id" field.
func OrganizationIDEQ(v xid.ID) predicate.User {
	return predicate.User(sql.FieldEQ(FieldOrganizationID, v))
}

// OrganizationIDNEQ applies the NEQ predicate on the "organization_id" field.
func OrganizationIDNEQ(v xid.ID) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldOrganizationID, v))
}

// OrganizationIDIn applies the In predicate on the "organization_id" field.
func OrganizationIDIn(vs ...xid.ID) predicate.User {
	return predicate.User(sql.FieldIn(FieldOrganizationID, vs...))
}

// OrganizationIDNotIn applies the NotIn predicate on the "organization_id" field.
func OrganizationIDNotIn(vs ...xid.ID) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldOrganizationID, vs...))
}

// OrganizationIDGT applies the GT predicate on the "organization_id" field.
func OrganizationIDGT(v xid.ID) predicate.User {
	return predicate.User(sql.FieldGT(FieldOrganizationID, v))
}

// OrganizationIDGTE applies the GTE predicate on the "organization_id" field.
func OrganizationIDGTE(v xid.ID) predicate.User {
	return predicate.User(sql.FieldGTE(FieldOrganizationID, v))
}

// OrganizationIDLT applies the LT predicate on the "organization_id" field.
func OrganizationIDLT(v xid.ID) predicate.User {
	return predicate.User(sql.FieldLT(FieldOrganizationID, v))
}

// OrganizationIDLTE applies the LTE predicate on the "organization_id" field.
func OrganizationIDLTE(v xid.ID) predicate.User {
	return predicate.User(sql.FieldLTE(FieldOrganizationID, v))
}

// OrganizationIDContains applies the Contains predicate on the "organization_id" field.
func OrganizationIDContains(v xid.ID) predicate.User {
	vc := v.String()
	return predicate.User(sql.FieldContains(FieldOrganizationID, vc))
}

// OrganizationIDHasPrefix applies the HasPrefix predicate on the "organization_id" field.
func OrganizationIDHasPrefix(v xid.ID) predicate.User {
	vc := v.String()
	return predicate.User(sql.FieldHasPrefix(FieldOrganizationID, vc))
}

// OrganizationIDHasSuffix applies the HasSuffix predicate on the "organization_id" field.
func OrganizationIDHasSuffix(v xid.ID) predicate.User {
	vc := v.String()
	return predicate.User(sql.FieldHasSuffix(FieldOrganizationID, vc))
}

// OrganizationIDIsNil applies the IsNil predicate on the "organization_id" field.
func OrganizationIDIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldOrganizationID))
}

// OrganizationIDNotNil applies the NotNil predicate on the "organization_id" field.
func OrganizationIDNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldOrganizationID))
}

// OrganizationIDEqualFold applies the EqualFold predicate on the "organization_id" field.
func OrganizationIDEqualFold(v xid.ID) predicate.User {
	vc := v.String()
	return predicate.User(sql.FieldEqualFold(FieldOrganizationID, vc))
}

// OrganizationIDContainsFold applies the ContainsFold predicate on the "organization_id" field.
func OrganizationIDContainsFold(v xid.ID) predicate.User {
	vc := v.String()
	return predicate.User(sql.FieldContainsFold(FieldOrganizationID, vc))
}

// PrimaryOrganizationIDEQ applies the EQ predicate on the "primary_organization_id" field.
func PrimaryOrganizationIDEQ(v xid.ID) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPrimaryOrganizationID, v))
}

// PrimaryOrganizationIDNEQ applies the NEQ predicate on the "primary_organization_id" field.
func PrimaryOrganizationIDNEQ(v xid.ID) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPrimaryOrganizationID, v))
}

// PrimaryOrganizationIDIn applies the In predicate on the "primary_organization_id" field.
func PrimaryOrganizationIDIn(vs ...xid.ID) predicate.User {
	return predicate.User(sql.FieldIn(FieldPrimaryOrganizationID, vs...))
}

// PrimaryOrganizationIDNotIn applies the NotIn predicate on the "primary_organization_id" field.
func PrimaryOrganizationIDNotIn(vs ...xid.ID) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldPrimaryOrganizationID, vs...))
}

// PrimaryOrganizationIDGT applies the GT predicate on the "primary_organization_id" field.
func PrimaryOrganizationIDGT(v xid.ID) predicate.User {
	return predicate.User(sql.FieldGT(FieldPrimaryOrganizationID, v))
}

// PrimaryOrganizationIDGTE applies the GTE predicate on the "primary_organization_id" field.
func PrimaryOrganizationIDGTE(v xid.ID) predicate.User {
	return predicate.User(sql.FieldGTE(FieldPrimaryOrganizationID, v))
}

// PrimaryOrganizationIDLT applies the LT predicate on the "primary_organization_id" field.
func PrimaryOrganizationIDLT(v xid.ID) predicate.User {
	return predicate.User(sql.FieldLT(FieldPrimaryOrganizationID, v))
}

// PrimaryOrganizationIDLTE applies the LTE predicate on the "primary_organization_id" field.
func PrimaryOrganizationIDLTE(v xid.ID) predicate.User {
	return predicate.User(sql.FieldLTE(FieldPrimaryOrganizationID, v))
}

// PrimaryOrganizationIDContains applies the Contains predicate on the "primary_organization_id" field.
func PrimaryOrganizationIDContains(v xid.ID) predicate.User {
	vc := v.String()
	return predicate.User(sql.FieldContains(FieldPrimaryOrganizationID, vc))
}

// PrimaryOrganizationIDHasPrefix applies the HasPrefix predicate on the "primary_organization_id" field.
func PrimaryOrganizationIDHasPrefix(v xid.ID) predicate.User {
	vc := v.String()
	return predicate.User(sql.FieldHasPrefix(FieldPrimaryOrganizationID, vc))
}

// PrimaryOrganizationIDHasSuffix applies the HasSuffix predicate on the "primary_organization_id" field.
func PrimaryOrganizationIDHasSuffix(v xid.ID) predicate.User {
	vc := v.String()
	return predicate.User(sql.FieldHasSuffix(FieldPrimaryOrganizationID, vc))
}

// PrimaryOrganizationIDIsNil applies the IsNil predicate on the "primary_organization_id" field.
func PrimaryOrganizationIDIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldPrimaryOrganizationID))
}

// PrimaryOrganizationIDNotNil applies the NotNil predicate on the "primary_organization_id" field.
func PrimaryOrganizationIDNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldPrimaryOrganizationID))
}

// PrimaryOrganizationIDEqualFold applies the EqualFold predicate on the "primary_organization_id" field.
func PrimaryOrganizationIDEqualFold(v xid.ID) predicate.User {
	vc := v.String()
	return predicate.User(sql.FieldEqualFold(FieldPrimaryOrganizationID, vc))
}

// PrimaryOrganizationIDContainsFold applies the ContainsFold predicate on the "primary_organization_id" field.
func PrimaryOrganizationIDContainsFold(v xid.ID) predicate.User {
	vc := v.String()
	return predicate.User(sql.FieldContainsFold(FieldPrimaryOrganizationID, vc))
}

// IsPlatformAdminEQ applies the EQ predicate on the "is_platform_admin" field.
func IsPlatformAdminEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldIsPlatformAdmin, v))
}

// IsPlatformAdminNEQ applies the NEQ predicate on the "is_platform_admin" field.
func IsPlatformAdminNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldIsPlatformAdmin, v))
}

// AuthProviderEQ applies the EQ predicate on the "auth_provider" field.
func AuthProviderEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAuthProvider, v))
}

// AuthProviderNEQ applies the NEQ predicate on the "auth_provider" field.
func AuthProviderNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldAuthProvider, v))
}

// AuthProviderIn applies the In predicate on the "auth_provider" field.
func AuthProviderIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldAuthProvider, vs...))
}

// AuthProviderNotIn applies the NotIn predicate on the "auth_provider" field.
func AuthProviderNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldAuthProvider, vs...))
}

// AuthProviderGT applies the GT predicate on the "auth_provider" field.
func AuthProviderGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldAuthProvider, v))
}

// AuthProviderGTE applies the GTE predicate on the "auth_provider" field.
func AuthProviderGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldAuthProvider, v))
}

// AuthProviderLT applies the LT predicate on the "auth_provider" field.
func AuthProviderLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldAuthProvider, v))
}

// AuthProviderLTE applies the LTE predicate on the "auth_provider" field.
func AuthProviderLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldAuthProvider, v))
}

// AuthProviderContains applies the Contains predicate on the "auth_provider" field.
func AuthProviderContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldAuthProvider, v))
}

// AuthProviderHasPrefix applies the HasPrefix predicate on the "auth_provider" field.
func AuthProviderHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldAuthProvider, v))
}

// AuthProviderHasSuffix applies the HasSuffix predicate on the "auth_provider" field.
func AuthProviderHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldAuthProvider, v))
}

// AuthProviderEqualFold applies the EqualFold predicate on the "auth_provider" field.
func AuthProviderEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldAuthProvider, v))
}

// AuthProviderContainsFold applies the ContainsFold predicate on the "auth_provider" field.
func AuthProviderContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldAuthProvider, v))
}

// ExternalIDEQ applies the EQ predicate on the "external_id" field.
func ExternalIDEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldExternalID, v))
}

// ExternalIDNEQ applies the NEQ predicate on the "external_id" field.
func ExternalIDNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldExternalID, v))
}

// ExternalIDIn applies the In predicate on the "external_id" field.
func ExternalIDIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldExternalID, vs...))
}

// ExternalIDNotIn applies the NotIn predicate on the "external_id" field.
func ExternalIDNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldExternalID, vs...))
}

// ExternalIDGT applies the GT predicate on the "external_id" field.
func ExternalIDGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldExternalID, v))
}

// ExternalIDGTE applies the GTE predicate on the "external_id" field.
func ExternalIDGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldExternalID, v))
}

// ExternalIDLT applies the LT predicate on the "external_id" field.
func ExternalIDLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldExternalID, v))
}

// ExternalIDLTE applies the LTE predicate on the "external_id" field.
func ExternalIDLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldExternalID, v))
}

// ExternalIDContains applies the Contains predicate on the "external_id" field.
func ExternalIDContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldExternalID, v))
}

// ExternalIDHasPrefix applies the HasPrefix predicate on the "external_id" field.
func ExternalIDHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldExternalID, v))
}

// ExternalIDHasSuffix applies the HasSuffix predicate on the "external_id" field.
func ExternalIDHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldExternalID, v))
}

// ExternalIDIsNil applies the IsNil predicate on the "external_id" field.
func ExternalIDIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldExternalID))
}

// ExternalIDNotNil applies the NotNil predicate on the "external_id" field.
func ExternalIDNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldExternalID))
}

// ExternalIDEqualFold applies the EqualFold predicate on the "external_id" field.
func ExternalIDEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldExternalID, v))
}

// ExternalIDContainsFold applies the ContainsFold predicate on the "external_id" field.
func ExternalIDContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldExternalID, v))
}

// CustomerIDEQ applies the EQ predicate on the "customer_id" field.
func CustomerIDEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCustomerID, v))
}

// CustomerIDNEQ applies the NEQ predicate on the "customer_id" field.
func CustomerIDNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCustomerID, v))
}

// CustomerIDIn applies the In predicate on the "customer_id" field.
func CustomerIDIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldCustomerID, vs...))
}

// CustomerIDNotIn applies the NotIn predicate on the "customer_id" field.
func CustomerIDNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldCustomerID, vs...))
}

// CustomerIDGT applies the GT predicate on the "customer_id" field.
func CustomerIDGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldCustomerID, v))
}

// CustomerIDGTE applies the GTE predicate on the "customer_id" field.
func CustomerIDGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldCustomerID, v))
}

// CustomerIDLT applies the LT predicate on the "customer_id" field.
func CustomerIDLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldCustomerID, v))
}

// CustomerIDLTE applies the LTE predicate on the "customer_id" field.
func CustomerIDLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldCustomerID, v))
}

// CustomerIDContains applies the Contains predicate on the "customer_id" field.
func CustomerIDContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldCustomerID, v))
}

// CustomerIDHasPrefix applies the HasPrefix predicate on the "customer_id" field.
func CustomerIDHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldCustomerID, v))
}

// CustomerIDHasSuffix applies the HasSuffix predicate on the "customer_id" field.
func CustomerIDHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldCustomerID, v))
}

// CustomerIDIsNil applies the IsNil predicate on the "customer_id" field.
func CustomerIDIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldCustomerID))
}

// CustomerIDNotNil applies the NotNil predicate on the "customer_id" field.
func CustomerIDNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldCustomerID))
}

// CustomerIDEqualFold applies the EqualFold predicate on the "customer_id" field.
func CustomerIDEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldCustomerID, v))
}

// CustomerIDContainsFold applies the ContainsFold predicate on the "customer_id" field.
func CustomerIDContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldCustomerID, v))
}

// CustomAttributesIsNil applies the IsNil predicate on the "custom_attributes" field.
func CustomAttributesIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldCustomAttributes))
}

// CustomAttributesNotNil applies the NotNil predicate on the "custom_attributes" field.
func CustomAttributesNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldCustomAttributes))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldCreatedBy, v))
}

// CreatedByContains applies the Contains predicate on the "created_by" field.
func CreatedByContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldCreatedBy, v))
}

// CreatedByHasPrefix applies the HasPrefix predicate on the "created_by" field.
func CreatedByHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldCreatedBy, v))
}

// CreatedByHasSuffix applies the HasSuffix predicate on the "created_by" field.
func CreatedByHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldCreatedBy, v))
}

// CreatedByIsNil applies the IsNil predicate on the "created_by" field.
func CreatedByIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldCreatedBy))
}

// CreatedByNotNil applies the NotNil predicate on the "created_by" field.
func CreatedByNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldCreatedBy))
}

// CreatedByEqualFold applies the EqualFold predicate on the "created_by" field.
func CreatedByEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldCreatedBy, v))
}

// CreatedByContainsFold applies the ContainsFold predicate on the "created_by" field.
func CreatedByContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldCreatedBy, v))
}

// PasswordResetTokenExpiresEQ applies the EQ predicate on the "password_reset_token_expires" field.
func PasswordResetTokenExpiresEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPasswordResetTokenExpires, v))
}

// PasswordResetTokenExpiresNEQ applies the NEQ predicate on the "password_reset_token_expires" field.
func PasswordResetTokenExpiresNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPasswordResetTokenExpires, v))
}

// PasswordResetTokenExpiresIn applies the In predicate on the "password_reset_token_expires" field.
func PasswordResetTokenExpiresIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldPasswordResetTokenExpires, vs...))
}

// PasswordResetTokenExpiresNotIn applies the NotIn predicate on the "password_reset_token_expires" field.
func PasswordResetTokenExpiresNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldPasswordResetTokenExpires, vs...))
}

// PasswordResetTokenExpiresGT applies the GT predicate on the "password_reset_token_expires" field.
func PasswordResetTokenExpiresGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldPasswordResetTokenExpires, v))
}

// PasswordResetTokenExpiresGTE applies the GTE predicate on the "password_reset_token_expires" field.
func PasswordResetTokenExpiresGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldPasswordResetTokenExpires, v))
}

// PasswordResetTokenExpiresLT applies the LT predicate on the "password_reset_token_expires" field.
func PasswordResetTokenExpiresLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldPasswordResetTokenExpires, v))
}

// PasswordResetTokenExpiresLTE applies the LTE predicate on the "password_reset_token_expires" field.
func PasswordResetTokenExpiresLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldPasswordResetTokenExpires, v))
}

// PasswordResetTokenExpiresIsNil applies the IsNil predicate on the "password_reset_token_expires" field.
func PasswordResetTokenExpiresIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldPasswordResetTokenExpires))
}

// PasswordResetTokenExpiresNotNil applies the NotNil predicate on the "password_reset_token_expires" field.
func PasswordResetTokenExpiresNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldPasswordResetTokenExpires))
}

// PasswordResetTokenEQ applies the EQ predicate on the "password_reset_token" field.
func PasswordResetTokenEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPasswordResetToken, v))
}

// PasswordResetTokenNEQ applies the NEQ predicate on the "password_reset_token" field.
func PasswordResetTokenNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPasswordResetToken, v))
}

// PasswordResetTokenIn applies the In predicate on the "password_reset_token" field.
func PasswordResetTokenIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldPasswordResetToken, vs...))
}

// PasswordResetTokenNotIn applies the NotIn predicate on the "password_reset_token" field.
func PasswordResetTokenNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldPasswordResetToken, vs...))
}

// PasswordResetTokenGT applies the GT predicate on the "password_reset_token" field.
func PasswordResetTokenGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldPasswordResetToken, v))
}

// PasswordResetTokenGTE applies the GTE predicate on the "password_reset_token" field.
func PasswordResetTokenGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldPasswordResetToken, v))
}

// PasswordResetTokenLT applies the LT predicate on the "password_reset_token" field.
func PasswordResetTokenLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldPasswordResetToken, v))
}

// PasswordResetTokenLTE applies the LTE predicate on the "password_reset_token" field.
func PasswordResetTokenLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldPasswordResetToken, v))
}

// PasswordResetTokenContains applies the Contains predicate on the "password_reset_token" field.
func PasswordResetTokenContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldPasswordResetToken, v))
}

// PasswordResetTokenHasPrefix applies the HasPrefix predicate on the "password_reset_token" field.
func PasswordResetTokenHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldPasswordResetToken, v))
}

// PasswordResetTokenHasSuffix applies the HasSuffix predicate on the "password_reset_token" field.
func PasswordResetTokenHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldPasswordResetToken, v))
}

// PasswordResetTokenIsNil applies the IsNil predicate on the "password_reset_token" field.
func PasswordResetTokenIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldPasswordResetToken))
}

// PasswordResetTokenNotNil applies the NotNil predicate on the "password_reset_token" field.
func PasswordResetTokenNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldPasswordResetToken))
}

// PasswordResetTokenEqualFold applies the EqualFold predicate on the "password_reset_token" field.
func PasswordResetTokenEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldPasswordResetToken, v))
}

// PasswordResetTokenContainsFold applies the ContainsFold predicate on the "password_reset_token" field.
func PasswordResetTokenContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldPasswordResetToken, v))
}

// LoginCountEQ applies the EQ predicate on the "login_count" field.
func LoginCountEQ(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLoginCount, v))
}

// LoginCountNEQ applies the NEQ predicate on the "login_count" field.
func LoginCountNEQ(v int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldLoginCount, v))
}

// LoginCountIn applies the In predicate on the "login_count" field.
func LoginCountIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldLoginCount, vs...))
}

// LoginCountNotIn applies the NotIn predicate on the "login_count" field.
func LoginCountNotIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldLoginCount, vs...))
}

// LoginCountGT applies the GT predicate on the "login_count" field.
func LoginCountGT(v int) predicate.User {
	return predicate.User(sql.FieldGT(FieldLoginCount, v))
}

// LoginCountGTE applies the GTE predicate on the "login_count" field.
func LoginCountGTE(v int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldLoginCount, v))
}

// LoginCountLT applies the LT predicate on the "login_count" field.
func LoginCountLT(v int) predicate.User {
	return predicate.User(sql.FieldLT(FieldLoginCount, v))
}

// LoginCountLTE applies the LTE predicate on the "login_count" field.
func LoginCountLTE(v int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldLoginCount, v))
}

// LastLoginIPEQ applies the EQ predicate on the "last_login_ip" field.
func LastLoginIPEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLastLoginIP, v))
}

// LastLoginIPNEQ applies the NEQ predicate on the "last_login_ip" field.
func LastLoginIPNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldLastLoginIP, v))
}

// LastLoginIPIn applies the In predicate on the "last_login_ip" field.
func LastLoginIPIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldLastLoginIP, vs...))
}

// LastLoginIPNotIn applies the NotIn predicate on the "last_login_ip" field.
func LastLoginIPNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldLastLoginIP, vs...))
}

// LastLoginIPGT applies the GT predicate on the "last_login_ip" field.
func LastLoginIPGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldLastLoginIP, v))
}

// LastLoginIPGTE applies the GTE predicate on the "last_login_ip" field.
func LastLoginIPGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldLastLoginIP, v))
}

// LastLoginIPLT applies the LT predicate on the "last_login_ip" field.
func LastLoginIPLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldLastLoginIP, v))
}

// LastLoginIPLTE applies the LTE predicate on the "last_login_ip" field.
func LastLoginIPLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldLastLoginIP, v))
}

// LastLoginIPContains applies the Contains predicate on the "last_login_ip" field.
func LastLoginIPContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldLastLoginIP, v))
}

// LastLoginIPHasPrefix applies the HasPrefix predicate on the "last_login_ip" field.
func LastLoginIPHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldLastLoginIP, v))
}

// LastLoginIPHasSuffix applies the HasSuffix predicate on the "last_login_ip" field.
func LastLoginIPHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldLastLoginIP, v))
}

// LastLoginIPIsNil applies the IsNil predicate on the "last_login_ip" field.
func LastLoginIPIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldLastLoginIP))
}

// LastLoginIPNotNil applies the NotNil predicate on the "last_login_ip" field.
func LastLoginIPNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldLastLoginIP))
}

// LastLoginIPEqualFold applies the EqualFold predicate on the "last_login_ip" field.
func LastLoginIPEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldLastLoginIP, v))
}

// LastLoginIPContainsFold applies the ContainsFold predicate on the "last_login_ip" field.
func LastLoginIPContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldLastLoginIP, v))
}

// HasOrganization applies the HasEdge predicate on the "organization" edge.
func HasOrganization() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrganizationTable, OrganizationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrganizationWith applies the HasEdge predicate on the "organization" edge with a given conditions (other predicates).
func HasOrganizationWith(preds ...predicate.Organization) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newOrganizationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMemberships applies the HasEdge predicate on the "memberships" edge.
func HasMemberships() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MembershipsTable, MembershipsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMembershipsWith applies the HasEdge predicate on the "memberships" edge with a given conditions (other predicates).
func HasMembershipsWith(preds ...predicate.Membership) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newMembershipsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSentInvitations applies the HasEdge predicate on the "sent_invitations" edge.
func HasSentInvitations() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SentInvitationsTable, SentInvitationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSentInvitationsWith applies the HasEdge predicate on the "sent_invitations" edge with a given conditions (other predicates).
func HasSentInvitationsWith(preds ...predicate.Membership) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newSentInvitationsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSessions applies the HasEdge predicate on the "sessions" edge.
func HasSessions() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SessionsTable, SessionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSessionsWith applies the HasEdge predicate on the "sessions" edge with a given conditions (other predicates).
func HasSessionsWith(preds ...predicate.Session) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newSessionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAPIKeys applies the HasEdge predicate on the "api_keys" edge.
func HasAPIKeys() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, APIKeysTable, APIKeysColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAPIKeysWith applies the HasEdge predicate on the "api_keys" edge with a given conditions (other predicates).
func HasAPIKeysWith(preds ...predicate.ApiKey) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newAPIKeysStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMfaMethods applies the HasEdge predicate on the "mfa_methods" edge.
func HasMfaMethods() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MfaMethodsTable, MfaMethodsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMfaMethodsWith applies the HasEdge predicate on the "mfa_methods" edge with a given conditions (other predicates).
func HasMfaMethodsWith(preds ...predicate.MFA) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newMfaMethodsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPasskeys applies the HasEdge predicate on the "passkeys" edge.
func HasPasskeys() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PasskeysTable, PasskeysColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPasskeysWith applies the HasEdge predicate on the "passkeys" edge with a given conditions (other predicates).
func HasPasskeysWith(preds ...predicate.Passkey) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newPasskeysStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOauthTokens applies the HasEdge predicate on the "oauth_tokens" edge.
func HasOauthTokens() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OauthTokensTable, OauthTokensColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOauthTokensWith applies the HasEdge predicate on the "oauth_tokens" edge with a given conditions (other predicates).
func HasOauthTokensWith(preds ...predicate.OAuthToken) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newOauthTokensStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOauthAuthorizations applies the HasEdge predicate on the "oauth_authorizations" edge.
func HasOauthAuthorizations() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OauthAuthorizationsTable, OauthAuthorizationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOauthAuthorizationsWith applies the HasEdge predicate on the "oauth_authorizations" edge with a given conditions (other predicates).
func HasOauthAuthorizationsWith(preds ...predicate.OAuthAuthorization) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newOauthAuthorizationsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasVerifications applies the HasEdge predicate on the "verifications" edge.
func HasVerifications() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, VerificationsTable, VerificationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasVerificationsWith applies the HasEdge predicate on the "verifications" edge with a given conditions (other predicates).
func HasVerificationsWith(preds ...predicate.Verification) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newVerificationsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUserRoles applies the HasEdge predicate on the "user_roles" edge.
func HasUserRoles() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UserRolesTable, UserRolesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserRolesWith applies the HasEdge predicate on the "user_roles" edge with a given conditions (other predicates).
func HasUserRolesWith(preds ...predicate.UserRole) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newUserRolesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUserPermissions applies the HasEdge predicate on the "user_permissions" edge.
func HasUserPermissions() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UserPermissionsTable, UserPermissionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserPermissionsWith applies the HasEdge predicate on the "user_permissions" edge with a given conditions (other predicates).
func HasUserPermissionsWith(preds ...predicate.UserPermission) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newUserPermissionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSystemRoles applies the HasEdge predicate on the "system_roles" edge.
func HasSystemRoles() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, SystemRolesTable, SystemRolesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSystemRolesWith applies the HasEdge predicate on the "system_roles" edge with a given conditions (other predicates).
func HasSystemRolesWith(preds ...predicate.Role) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newSystemRolesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAssignedUserRoles applies the HasEdge predicate on the "assigned_user_roles" edge.
func HasAssignedUserRoles() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AssignedUserRolesTable, AssignedUserRolesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAssignedUserRolesWith applies the HasEdge predicate on the "assigned_user_roles" edge with a given conditions (other predicates).
func HasAssignedUserRolesWith(preds ...predicate.UserRole) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newAssignedUserRolesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAssignedUserPermissions applies the HasEdge predicate on the "assigned_user_permissions" edge.
func HasAssignedUserPermissions() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AssignedUserPermissionsTable, AssignedUserPermissionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAssignedUserPermissionsWith applies the HasEdge predicate on the "assigned_user_permissions" edge with a given conditions (other predicates).
func HasAssignedUserPermissionsWith(preds ...predicate.UserPermission) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newAssignedUserPermissionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAuditLogs applies the HasEdge predicate on the "audit_logs" edge.
func HasAuditLogs() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AuditLogsTable, AuditLogsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAuditLogsWith applies the HasEdge predicate on the "audit_logs" edge with a given conditions (other predicates).
func HasAuditLogsWith(preds ...predicate.Audit) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newAuditLogsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(sql.NotPredicates(p))
}
