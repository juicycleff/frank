// Copyright 2023-present XRaph LLC. All rights reserved.
// This source code is licensed under the XRaph LLC license found
// in the LICENSE file in the root directory of this source tree.
// Code generated by ent, DO NOT EDIT.

package user

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/juicycleff/frank/pkg/model"
	"github.com/rs/xid"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldPhoneNumber holds the string denoting the phone_number field in the database.
	FieldPhoneNumber = "phone_number"
	// FieldFirstName holds the string denoting the first_name field in the database.
	FieldFirstName = "first_name"
	// FieldLastName holds the string denoting the last_name field in the database.
	FieldLastName = "last_name"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldPasswordHash holds the string denoting the password_hash field in the database.
	FieldPasswordHash = "password_hash"
	// FieldEmailVerified holds the string denoting the email_verified field in the database.
	FieldEmailVerified = "email_verified"
	// FieldPhoneVerified holds the string denoting the phone_verified field in the database.
	FieldPhoneVerified = "phone_verified"
	// FieldActive holds the string denoting the active field in the database.
	FieldActive = "active"
	// FieldBlocked holds the string denoting the blocked field in the database.
	FieldBlocked = "blocked"
	// FieldLastLogin holds the string denoting the last_login field in the database.
	FieldLastLogin = "last_login"
	// FieldLastPasswordChange holds the string denoting the last_password_change field in the database.
	FieldLastPasswordChange = "last_password_change"
	// FieldMetadata holds the string denoting the metadata field in the database.
	FieldMetadata = "metadata"
	// FieldProfileImageURL holds the string denoting the profile_image_url field in the database.
	FieldProfileImageURL = "profile_image_url"
	// FieldLocale holds the string denoting the locale field in the database.
	FieldLocale = "locale"
	// FieldTimezone holds the string denoting the timezone field in the database.
	FieldTimezone = "timezone"
	// FieldUserType holds the string denoting the user_type field in the database.
	FieldUserType = "user_type"
	// FieldOrganizationID holds the string denoting the organization_id field in the database.
	FieldOrganizationID = "organization_id"
	// FieldPrimaryOrganizationID holds the string denoting the primary_organization_id field in the database.
	FieldPrimaryOrganizationID = "primary_organization_id"
	// FieldIsPlatformAdmin holds the string denoting the is_platform_admin field in the database.
	FieldIsPlatformAdmin = "is_platform_admin"
	// FieldAuthProvider holds the string denoting the auth_provider field in the database.
	FieldAuthProvider = "auth_provider"
	// FieldExternalID holds the string denoting the external_id field in the database.
	FieldExternalID = "external_id"
	// FieldCustomerID holds the string denoting the customer_id field in the database.
	FieldCustomerID = "customer_id"
	// FieldCustomAttributes holds the string denoting the custom_attributes field in the database.
	FieldCustomAttributes = "custom_attributes"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldPasswordResetTokenExpires holds the string denoting the password_reset_token_expires field in the database.
	FieldPasswordResetTokenExpires = "password_reset_token_expires"
	// FieldPasswordResetToken holds the string denoting the password_reset_token field in the database.
	FieldPasswordResetToken = "password_reset_token"
	// FieldLoginCount holds the string denoting the login_count field in the database.
	FieldLoginCount = "login_count"
	// FieldLastLoginIP holds the string denoting the last_login_ip field in the database.
	FieldLastLoginIP = "last_login_ip"
	// EdgeOrganization holds the string denoting the organization edge name in mutations.
	EdgeOrganization = "organization"
	// EdgeMemberships holds the string denoting the memberships edge name in mutations.
	EdgeMemberships = "memberships"
	// EdgeSentInvitations holds the string denoting the sent_invitations edge name in mutations.
	EdgeSentInvitations = "sent_invitations"
	// EdgeSessions holds the string denoting the sessions edge name in mutations.
	EdgeSessions = "sessions"
	// EdgeAPIKeys holds the string denoting the api_keys edge name in mutations.
	EdgeAPIKeys = "api_keys"
	// EdgeMfaMethods holds the string denoting the mfa_methods edge name in mutations.
	EdgeMfaMethods = "mfa_methods"
	// EdgePasskeys holds the string denoting the passkeys edge name in mutations.
	EdgePasskeys = "passkeys"
	// EdgeOauthTokens holds the string denoting the oauth_tokens edge name in mutations.
	EdgeOauthTokens = "oauth_tokens"
	// EdgeOauthAuthorizations holds the string denoting the oauth_authorizations edge name in mutations.
	EdgeOauthAuthorizations = "oauth_authorizations"
	// EdgeVerifications holds the string denoting the verifications edge name in mutations.
	EdgeVerifications = "verifications"
	// EdgeUserRoles holds the string denoting the user_roles edge name in mutations.
	EdgeUserRoles = "user_roles"
	// EdgeUserPermissions holds the string denoting the user_permissions edge name in mutations.
	EdgeUserPermissions = "user_permissions"
	// EdgeSystemRoles holds the string denoting the system_roles edge name in mutations.
	EdgeSystemRoles = "system_roles"
	// EdgeAssignedUserRoles holds the string denoting the assigned_user_roles edge name in mutations.
	EdgeAssignedUserRoles = "assigned_user_roles"
	// EdgeAssignedUserPermissions holds the string denoting the assigned_user_permissions edge name in mutations.
	EdgeAssignedUserPermissions = "assigned_user_permissions"
	// EdgeAuditLogs holds the string denoting the audit_logs edge name in mutations.
	EdgeAuditLogs = "audit_logs"
	// EdgeActivities holds the string denoting the activities edge name in mutations.
	EdgeActivities = "activities"
	// Table holds the table name of the user in the database.
	Table = "users"
	// OrganizationTable is the table that holds the organization relation/edge.
	OrganizationTable = "users"
	// OrganizationInverseTable is the table name for the Organization entity.
	// It exists in this package in order to avoid circular dependency with the "organization" package.
	OrganizationInverseTable = "organizations"
	// OrganizationColumn is the table column denoting the organization relation/edge.
	OrganizationColumn = "organization_id"
	// MembershipsTable is the table that holds the memberships relation/edge.
	MembershipsTable = "memberships"
	// MembershipsInverseTable is the table name for the Membership entity.
	// It exists in this package in order to avoid circular dependency with the "membership" package.
	MembershipsInverseTable = "memberships"
	// MembershipsColumn is the table column denoting the memberships relation/edge.
	MembershipsColumn = "user_id"
	// SentInvitationsTable is the table that holds the sent_invitations relation/edge.
	SentInvitationsTable = "memberships"
	// SentInvitationsInverseTable is the table name for the Membership entity.
	// It exists in this package in order to avoid circular dependency with the "membership" package.
	SentInvitationsInverseTable = "memberships"
	// SentInvitationsColumn is the table column denoting the sent_invitations relation/edge.
	SentInvitationsColumn = "invited_by"
	// SessionsTable is the table that holds the sessions relation/edge.
	SessionsTable = "sessions"
	// SessionsInverseTable is the table name for the Session entity.
	// It exists in this package in order to avoid circular dependency with the "session" package.
	SessionsInverseTable = "sessions"
	// SessionsColumn is the table column denoting the sessions relation/edge.
	SessionsColumn = "user_id"
	// APIKeysTable is the table that holds the api_keys relation/edge.
	APIKeysTable = "api_keys"
	// APIKeysInverseTable is the table name for the ApiKey entity.
	// It exists in this package in order to avoid circular dependency with the "apikey" package.
	APIKeysInverseTable = "api_keys"
	// APIKeysColumn is the table column denoting the api_keys relation/edge.
	APIKeysColumn = "user_id"
	// MfaMethodsTable is the table that holds the mfa_methods relation/edge.
	MfaMethodsTable = "mf_as"
	// MfaMethodsInverseTable is the table name for the MFA entity.
	// It exists in this package in order to avoid circular dependency with the "mfa" package.
	MfaMethodsInverseTable = "mf_as"
	// MfaMethodsColumn is the table column denoting the mfa_methods relation/edge.
	MfaMethodsColumn = "user_id"
	// PasskeysTable is the table that holds the passkeys relation/edge.
	PasskeysTable = "passkeys"
	// PasskeysInverseTable is the table name for the Passkey entity.
	// It exists in this package in order to avoid circular dependency with the "passkey" package.
	PasskeysInverseTable = "passkeys"
	// PasskeysColumn is the table column denoting the passkeys relation/edge.
	PasskeysColumn = "user_id"
	// OauthTokensTable is the table that holds the oauth_tokens relation/edge.
	OauthTokensTable = "oauth_tokens"
	// OauthTokensInverseTable is the table name for the OAuthToken entity.
	// It exists in this package in order to avoid circular dependency with the "oauthtoken" package.
	OauthTokensInverseTable = "oauth_tokens"
	// OauthTokensColumn is the table column denoting the oauth_tokens relation/edge.
	OauthTokensColumn = "user_id"
	// OauthAuthorizationsTable is the table that holds the oauth_authorizations relation/edge.
	OauthAuthorizationsTable = "oauth_authorizations"
	// OauthAuthorizationsInverseTable is the table name for the OAuthAuthorization entity.
	// It exists in this package in order to avoid circular dependency with the "oauthauthorization" package.
	OauthAuthorizationsInverseTable = "oauth_authorizations"
	// OauthAuthorizationsColumn is the table column denoting the oauth_authorizations relation/edge.
	OauthAuthorizationsColumn = "user_id"
	// VerificationsTable is the table that holds the verifications relation/edge.
	VerificationsTable = "verifications"
	// VerificationsInverseTable is the table name for the Verification entity.
	// It exists in this package in order to avoid circular dependency with the "verification" package.
	VerificationsInverseTable = "verifications"
	// VerificationsColumn is the table column denoting the verifications relation/edge.
	VerificationsColumn = "user_id"
	// UserRolesTable is the table that holds the user_roles relation/edge.
	UserRolesTable = "user_roles"
	// UserRolesInverseTable is the table name for the UserRole entity.
	// It exists in this package in order to avoid circular dependency with the "userrole" package.
	UserRolesInverseTable = "user_roles"
	// UserRolesColumn is the table column denoting the user_roles relation/edge.
	UserRolesColumn = "user_id"
	// UserPermissionsTable is the table that holds the user_permissions relation/edge.
	UserPermissionsTable = "user_permissions"
	// UserPermissionsInverseTable is the table name for the UserPermission entity.
	// It exists in this package in order to avoid circular dependency with the "userpermission" package.
	UserPermissionsInverseTable = "user_permissions"
	// UserPermissionsColumn is the table column denoting the user_permissions relation/edge.
	UserPermissionsColumn = "user_id"
	// SystemRolesTable is the table that holds the system_roles relation/edge. The primary key declared below.
	SystemRolesTable = "user_system_roles"
	// SystemRolesInverseTable is the table name for the Role entity.
	// It exists in this package in order to avoid circular dependency with the "role" package.
	SystemRolesInverseTable = "roles"
	// AssignedUserRolesTable is the table that holds the assigned_user_roles relation/edge.
	AssignedUserRolesTable = "user_roles"
	// AssignedUserRolesInverseTable is the table name for the UserRole entity.
	// It exists in this package in order to avoid circular dependency with the "userrole" package.
	AssignedUserRolesInverseTable = "user_roles"
	// AssignedUserRolesColumn is the table column denoting the assigned_user_roles relation/edge.
	AssignedUserRolesColumn = "assigned_by"
	// AssignedUserPermissionsTable is the table that holds the assigned_user_permissions relation/edge.
	AssignedUserPermissionsTable = "user_permissions"
	// AssignedUserPermissionsInverseTable is the table name for the UserPermission entity.
	// It exists in this package in order to avoid circular dependency with the "userpermission" package.
	AssignedUserPermissionsInverseTable = "user_permissions"
	// AssignedUserPermissionsColumn is the table column denoting the assigned_user_permissions relation/edge.
	AssignedUserPermissionsColumn = "assigned_by"
	// AuditLogsTable is the table that holds the audit_logs relation/edge.
	AuditLogsTable = "audits"
	// AuditLogsInverseTable is the table name for the Audit entity.
	// It exists in this package in order to avoid circular dependency with the "audit" package.
	AuditLogsInverseTable = "audits"
	// AuditLogsColumn is the table column denoting the audit_logs relation/edge.
	AuditLogsColumn = "user_id"
	// ActivitiesTable is the table that holds the activities relation/edge.
	ActivitiesTable = "activities"
	// ActivitiesInverseTable is the table name for the Activity entity.
	// It exists in this package in order to avoid circular dependency with the "activity" package.
	ActivitiesInverseTable = "activities"
	// ActivitiesColumn is the table column denoting the activities relation/edge.
	ActivitiesColumn = "user_id"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldEmail,
	FieldPhoneNumber,
	FieldFirstName,
	FieldLastName,
	FieldUsername,
	FieldPasswordHash,
	FieldEmailVerified,
	FieldPhoneVerified,
	FieldActive,
	FieldBlocked,
	FieldLastLogin,
	FieldLastPasswordChange,
	FieldMetadata,
	FieldProfileImageURL,
	FieldLocale,
	FieldTimezone,
	FieldUserType,
	FieldOrganizationID,
	FieldPrimaryOrganizationID,
	FieldIsPlatformAdmin,
	FieldAuthProvider,
	FieldExternalID,
	FieldCustomerID,
	FieldCustomAttributes,
	FieldCreatedBy,
	FieldPasswordResetTokenExpires,
	FieldPasswordResetToken,
	FieldLoginCount,
	FieldLastLoginIP,
}

var (
	// SystemRolesPrimaryKey and SystemRolesColumn2 are the table columns denoting the
	// primary key for the system_roles relation (M2M).
	SystemRolesPrimaryKey = []string{"user_id", "role_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// EmailValidator is a validator for the "email" field. It is called by the builders before save.
	EmailValidator func(string) error
	// DefaultEmailVerified holds the default value on creation for the "email_verified" field.
	DefaultEmailVerified bool
	// DefaultPhoneVerified holds the default value on creation for the "phone_verified" field.
	DefaultPhoneVerified bool
	// DefaultActive holds the default value on creation for the "active" field.
	DefaultActive bool
	// DefaultBlocked holds the default value on creation for the "blocked" field.
	DefaultBlocked bool
	// DefaultLocale holds the default value on creation for the "locale" field.
	DefaultLocale string
	// DefaultIsPlatformAdmin holds the default value on creation for the "is_platform_admin" field.
	DefaultIsPlatformAdmin bool
	// DefaultAuthProvider holds the default value on creation for the "auth_provider" field.
	DefaultAuthProvider string
	// DefaultLoginCount holds the default value on creation for the "login_count" field.
	DefaultLoginCount int
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() xid.ID
)

const DefaultUserType model.UserType = "external"

// UserTypeValidator is a validator for the "user_type" field enum values. It is called by the builders before save.
func UserTypeValidator(ut model.UserType) error {
	switch ut.String() {
	case "internal", "external", "end_user":
		return nil
	default:
		return fmt.Errorf("user: invalid enum value for user_type field: %q", ut)
	}
}

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByPhoneNumber orders the results by the phone_number field.
func ByPhoneNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhoneNumber, opts...).ToFunc()
}

// ByFirstName orders the results by the first_name field.
func ByFirstName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFirstName, opts...).ToFunc()
}

// ByLastName orders the results by the last_name field.
func ByLastName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastName, opts...).ToFunc()
}

// ByUsername orders the results by the username field.
func ByUsername(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsername, opts...).ToFunc()
}

// ByPasswordHash orders the results by the password_hash field.
func ByPasswordHash(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPasswordHash, opts...).ToFunc()
}

// ByEmailVerified orders the results by the email_verified field.
func ByEmailVerified(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmailVerified, opts...).ToFunc()
}

// ByPhoneVerified orders the results by the phone_verified field.
func ByPhoneVerified(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhoneVerified, opts...).ToFunc()
}

// ByActive orders the results by the active field.
func ByActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActive, opts...).ToFunc()
}

// ByBlocked orders the results by the blocked field.
func ByBlocked(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBlocked, opts...).ToFunc()
}

// ByLastLogin orders the results by the last_login field.
func ByLastLogin(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastLogin, opts...).ToFunc()
}

// ByLastPasswordChange orders the results by the last_password_change field.
func ByLastPasswordChange(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastPasswordChange, opts...).ToFunc()
}

// ByProfileImageURL orders the results by the profile_image_url field.
func ByProfileImageURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProfileImageURL, opts...).ToFunc()
}

// ByLocale orders the results by the locale field.
func ByLocale(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocale, opts...).ToFunc()
}

// ByTimezone orders the results by the timezone field.
func ByTimezone(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTimezone, opts...).ToFunc()
}

// ByUserType orders the results by the user_type field.
func ByUserType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserType, opts...).ToFunc()
}

// ByOrganizationID orders the results by the organization_id field.
func ByOrganizationID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrganizationID, opts...).ToFunc()
}

// ByPrimaryOrganizationID orders the results by the primary_organization_id field.
func ByPrimaryOrganizationID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrimaryOrganizationID, opts...).ToFunc()
}

// ByIsPlatformAdmin orders the results by the is_platform_admin field.
func ByIsPlatformAdmin(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsPlatformAdmin, opts...).ToFunc()
}

// ByAuthProvider orders the results by the auth_provider field.
func ByAuthProvider(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAuthProvider, opts...).ToFunc()
}

// ByExternalID orders the results by the external_id field.
func ByExternalID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExternalID, opts...).ToFunc()
}

// ByCustomerID orders the results by the customer_id field.
func ByCustomerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCustomerID, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByPasswordResetTokenExpires orders the results by the password_reset_token_expires field.
func ByPasswordResetTokenExpires(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPasswordResetTokenExpires, opts...).ToFunc()
}

// ByPasswordResetToken orders the results by the password_reset_token field.
func ByPasswordResetToken(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPasswordResetToken, opts...).ToFunc()
}

// ByLoginCount orders the results by the login_count field.
func ByLoginCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLoginCount, opts...).ToFunc()
}

// ByLastLoginIP orders the results by the last_login_ip field.
func ByLastLoginIP(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastLoginIP, opts...).ToFunc()
}

// ByOrganizationField orders the results by organization field.
func ByOrganizationField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrganizationStep(), sql.OrderByField(field, opts...))
	}
}

// ByMembershipsCount orders the results by memberships count.
func ByMembershipsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMembershipsStep(), opts...)
	}
}

// ByMemberships orders the results by memberships terms.
func ByMemberships(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMembershipsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySentInvitationsCount orders the results by sent_invitations count.
func BySentInvitationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSentInvitationsStep(), opts...)
	}
}

// BySentInvitations orders the results by sent_invitations terms.
func BySentInvitations(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSentInvitationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySessionsCount orders the results by sessions count.
func BySessionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSessionsStep(), opts...)
	}
}

// BySessions orders the results by sessions terms.
func BySessions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSessionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAPIKeysCount orders the results by api_keys count.
func ByAPIKeysCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAPIKeysStep(), opts...)
	}
}

// ByAPIKeys orders the results by api_keys terms.
func ByAPIKeys(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAPIKeysStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByMfaMethodsCount orders the results by mfa_methods count.
func ByMfaMethodsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMfaMethodsStep(), opts...)
	}
}

// ByMfaMethods orders the results by mfa_methods terms.
func ByMfaMethods(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMfaMethodsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPasskeysCount orders the results by passkeys count.
func ByPasskeysCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPasskeysStep(), opts...)
	}
}

// ByPasskeys orders the results by passkeys terms.
func ByPasskeys(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPasskeysStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByOauthTokensCount orders the results by oauth_tokens count.
func ByOauthTokensCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOauthTokensStep(), opts...)
	}
}

// ByOauthTokens orders the results by oauth_tokens terms.
func ByOauthTokens(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOauthTokensStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByOauthAuthorizationsCount orders the results by oauth_authorizations count.
func ByOauthAuthorizationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOauthAuthorizationsStep(), opts...)
	}
}

// ByOauthAuthorizations orders the results by oauth_authorizations terms.
func ByOauthAuthorizations(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOauthAuthorizationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByVerificationsCount orders the results by verifications count.
func ByVerificationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newVerificationsStep(), opts...)
	}
}

// ByVerifications orders the results by verifications terms.
func ByVerifications(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newVerificationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUserRolesCount orders the results by user_roles count.
func ByUserRolesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUserRolesStep(), opts...)
	}
}

// ByUserRoles orders the results by user_roles terms.
func ByUserRoles(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserRolesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUserPermissionsCount orders the results by user_permissions count.
func ByUserPermissionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUserPermissionsStep(), opts...)
	}
}

// ByUserPermissions orders the results by user_permissions terms.
func ByUserPermissions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserPermissionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySystemRolesCount orders the results by system_roles count.
func BySystemRolesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSystemRolesStep(), opts...)
	}
}

// BySystemRoles orders the results by system_roles terms.
func BySystemRoles(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSystemRolesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAssignedUserRolesCount orders the results by assigned_user_roles count.
func ByAssignedUserRolesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAssignedUserRolesStep(), opts...)
	}
}

// ByAssignedUserRoles orders the results by assigned_user_roles terms.
func ByAssignedUserRoles(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAssignedUserRolesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAssignedUserPermissionsCount orders the results by assigned_user_permissions count.
func ByAssignedUserPermissionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAssignedUserPermissionsStep(), opts...)
	}
}

// ByAssignedUserPermissions orders the results by assigned_user_permissions terms.
func ByAssignedUserPermissions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAssignedUserPermissionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAuditLogsCount orders the results by audit_logs count.
func ByAuditLogsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAuditLogsStep(), opts...)
	}
}

// ByAuditLogs orders the results by audit_logs terms.
func ByAuditLogs(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAuditLogsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByActivitiesCount orders the results by activities count.
func ByActivitiesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newActivitiesStep(), opts...)
	}
}

// ByActivities orders the results by activities terms.
func ByActivities(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newActivitiesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newOrganizationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrganizationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, OrganizationTable, OrganizationColumn),
	)
}
func newMembershipsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MembershipsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, MembershipsTable, MembershipsColumn),
	)
}
func newSentInvitationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SentInvitationsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SentInvitationsTable, SentInvitationsColumn),
	)
}
func newSessionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SessionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SessionsTable, SessionsColumn),
	)
}
func newAPIKeysStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(APIKeysInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, APIKeysTable, APIKeysColumn),
	)
}
func newMfaMethodsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MfaMethodsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, MfaMethodsTable, MfaMethodsColumn),
	)
}
func newPasskeysStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PasskeysInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PasskeysTable, PasskeysColumn),
	)
}
func newOauthTokensStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OauthTokensInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, OauthTokensTable, OauthTokensColumn),
	)
}
func newOauthAuthorizationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OauthAuthorizationsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, OauthAuthorizationsTable, OauthAuthorizationsColumn),
	)
}
func newVerificationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(VerificationsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, VerificationsTable, VerificationsColumn),
	)
}
func newUserRolesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserRolesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, UserRolesTable, UserRolesColumn),
	)
}
func newUserPermissionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserPermissionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, UserPermissionsTable, UserPermissionsColumn),
	)
}
func newSystemRolesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SystemRolesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, SystemRolesTable, SystemRolesPrimaryKey...),
	)
}
func newAssignedUserRolesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AssignedUserRolesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AssignedUserRolesTable, AssignedUserRolesColumn),
	)
}
func newAssignedUserPermissionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AssignedUserPermissionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AssignedUserPermissionsTable, AssignedUserPermissionsColumn),
	)
}
func newAuditLogsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AuditLogsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AuditLogsTable, AuditLogsColumn),
	)
}
func newActivitiesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ActivitiesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ActivitiesTable, ActivitiesColumn),
	)
}
