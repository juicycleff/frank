// Code generated by ent, DO NOT EDIT.

package user

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldPhoneNumber holds the string denoting the phone_number field in the database.
	FieldPhoneNumber = "phone_number"
	// FieldFirstName holds the string denoting the first_name field in the database.
	FieldFirstName = "first_name"
	// FieldLastName holds the string denoting the last_name field in the database.
	FieldLastName = "last_name"
	// FieldPasswordHash holds the string denoting the password_hash field in the database.
	FieldPasswordHash = "password_hash"
	// FieldEmailVerified holds the string denoting the email_verified field in the database.
	FieldEmailVerified = "email_verified"
	// FieldPhoneVerified holds the string denoting the phone_verified field in the database.
	FieldPhoneVerified = "phone_verified"
	// FieldActive holds the string denoting the active field in the database.
	FieldActive = "active"
	// FieldLastLogin holds the string denoting the last_login field in the database.
	FieldLastLogin = "last_login"
	// FieldLastPasswordChange holds the string denoting the last_password_change field in the database.
	FieldLastPasswordChange = "last_password_change"
	// FieldMetadata holds the string denoting the metadata field in the database.
	FieldMetadata = "metadata"
	// FieldProfileImageURL holds the string denoting the profile_image_url field in the database.
	FieldProfileImageURL = "profile_image_url"
	// FieldPrimaryOrganizationID holds the string denoting the primary_organization_id field in the database.
	FieldPrimaryOrganizationID = "primary_organization_id"
	// FieldLocale holds the string denoting the locale field in the database.
	FieldLocale = "locale"
	// EdgeSessions holds the string denoting the sessions edge name in mutations.
	EdgeSessions = "sessions"
	// EdgeAPIKeys holds the string denoting the api_keys edge name in mutations.
	EdgeAPIKeys = "api_keys"
	// EdgeOrganizations holds the string denoting the organizations edge name in mutations.
	EdgeOrganizations = "organizations"
	// EdgeMfaMethods holds the string denoting the mfa_methods edge name in mutations.
	EdgeMfaMethods = "mfa_methods"
	// EdgePasskeys holds the string denoting the passkeys edge name in mutations.
	EdgePasskeys = "passkeys"
	// EdgeOauthTokens holds the string denoting the oauth_tokens edge name in mutations.
	EdgeOauthTokens = "oauth_tokens"
	// EdgeOauthAuthorizations holds the string denoting the oauth_authorizations edge name in mutations.
	EdgeOauthAuthorizations = "oauth_authorizations"
	// EdgeVerifications holds the string denoting the verifications edge name in mutations.
	EdgeVerifications = "verifications"
	// EdgeRoles holds the string denoting the roles edge name in mutations.
	EdgeRoles = "roles"
	// Table holds the table name of the user in the database.
	Table = "users"
	// SessionsTable is the table that holds the sessions relation/edge.
	SessionsTable = "sessions"
	// SessionsInverseTable is the table name for the Session entity.
	// It exists in this package in order to avoid circular dependency with the "session" package.
	SessionsInverseTable = "sessions"
	// SessionsColumn is the table column denoting the sessions relation/edge.
	SessionsColumn = "user_id"
	// APIKeysTable is the table that holds the api_keys relation/edge.
	APIKeysTable = "api_keys"
	// APIKeysInverseTable is the table name for the ApiKey entity.
	// It exists in this package in order to avoid circular dependency with the "apikey" package.
	APIKeysInverseTable = "api_keys"
	// APIKeysColumn is the table column denoting the api_keys relation/edge.
	APIKeysColumn = "user_id"
	// OrganizationsTable is the table that holds the organizations relation/edge. The primary key declared below.
	OrganizationsTable = "organization_users"
	// OrganizationsInverseTable is the table name for the Organization entity.
	// It exists in this package in order to avoid circular dependency with the "organization" package.
	OrganizationsInverseTable = "organizations"
	// MfaMethodsTable is the table that holds the mfa_methods relation/edge.
	MfaMethodsTable = "mf_as"
	// MfaMethodsInverseTable is the table name for the MFA entity.
	// It exists in this package in order to avoid circular dependency with the "mfa" package.
	MfaMethodsInverseTable = "mf_as"
	// MfaMethodsColumn is the table column denoting the mfa_methods relation/edge.
	MfaMethodsColumn = "user_id"
	// PasskeysTable is the table that holds the passkeys relation/edge.
	PasskeysTable = "passkeys"
	// PasskeysInverseTable is the table name for the Passkey entity.
	// It exists in this package in order to avoid circular dependency with the "passkey" package.
	PasskeysInverseTable = "passkeys"
	// PasskeysColumn is the table column denoting the passkeys relation/edge.
	PasskeysColumn = "user_id"
	// OauthTokensTable is the table that holds the oauth_tokens relation/edge.
	OauthTokensTable = "oauth_tokens"
	// OauthTokensInverseTable is the table name for the OAuthToken entity.
	// It exists in this package in order to avoid circular dependency with the "oauthtoken" package.
	OauthTokensInverseTable = "oauth_tokens"
	// OauthTokensColumn is the table column denoting the oauth_tokens relation/edge.
	OauthTokensColumn = "user_id"
	// OauthAuthorizationsTable is the table that holds the oauth_authorizations relation/edge.
	OauthAuthorizationsTable = "oauth_authorizations"
	// OauthAuthorizationsInverseTable is the table name for the OAuthAuthorization entity.
	// It exists in this package in order to avoid circular dependency with the "oauthauthorization" package.
	OauthAuthorizationsInverseTable = "oauth_authorizations"
	// OauthAuthorizationsColumn is the table column denoting the oauth_authorizations relation/edge.
	OauthAuthorizationsColumn = "user_id"
	// VerificationsTable is the table that holds the verifications relation/edge.
	VerificationsTable = "verifications"
	// VerificationsInverseTable is the table name for the Verification entity.
	// It exists in this package in order to avoid circular dependency with the "verification" package.
	VerificationsInverseTable = "verifications"
	// VerificationsColumn is the table column denoting the verifications relation/edge.
	VerificationsColumn = "user_id"
	// RolesTable is the table that holds the roles relation/edge. The primary key declared below.
	RolesTable = "user_roles"
	// RolesInverseTable is the table name for the Role entity.
	// It exists in this package in order to avoid circular dependency with the "role" package.
	RolesInverseTable = "roles"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldEmail,
	FieldPhoneNumber,
	FieldFirstName,
	FieldLastName,
	FieldPasswordHash,
	FieldEmailVerified,
	FieldPhoneVerified,
	FieldActive,
	FieldLastLogin,
	FieldLastPasswordChange,
	FieldMetadata,
	FieldProfileImageURL,
	FieldPrimaryOrganizationID,
	FieldLocale,
}

var (
	// OrganizationsPrimaryKey and OrganizationsColumn2 are the table columns denoting the
	// primary key for the organizations relation (M2M).
	OrganizationsPrimaryKey = []string{"organization_id", "user_id"}
	// RolesPrimaryKey and RolesColumn2 are the table columns denoting the
	// primary key for the roles relation (M2M).
	RolesPrimaryKey = []string{"user_id", "role_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// EmailValidator is a validator for the "email" field. It is called by the builders before save.
	EmailValidator func(string) error
	// DefaultEmailVerified holds the default value on creation for the "email_verified" field.
	DefaultEmailVerified bool
	// DefaultPhoneVerified holds the default value on creation for the "phone_verified" field.
	DefaultPhoneVerified bool
	// DefaultActive holds the default value on creation for the "active" field.
	DefaultActive bool
	// DefaultLocale holds the default value on creation for the "locale" field.
	DefaultLocale string
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
)

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByPhoneNumber orders the results by the phone_number field.
func ByPhoneNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhoneNumber, opts...).ToFunc()
}

// ByFirstName orders the results by the first_name field.
func ByFirstName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFirstName, opts...).ToFunc()
}

// ByLastName orders the results by the last_name field.
func ByLastName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastName, opts...).ToFunc()
}

// ByPasswordHash orders the results by the password_hash field.
func ByPasswordHash(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPasswordHash, opts...).ToFunc()
}

// ByEmailVerified orders the results by the email_verified field.
func ByEmailVerified(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmailVerified, opts...).ToFunc()
}

// ByPhoneVerified orders the results by the phone_verified field.
func ByPhoneVerified(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhoneVerified, opts...).ToFunc()
}

// ByActive orders the results by the active field.
func ByActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActive, opts...).ToFunc()
}

// ByLastLogin orders the results by the last_login field.
func ByLastLogin(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastLogin, opts...).ToFunc()
}

// ByLastPasswordChange orders the results by the last_password_change field.
func ByLastPasswordChange(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastPasswordChange, opts...).ToFunc()
}

// ByProfileImageURL orders the results by the profile_image_url field.
func ByProfileImageURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProfileImageURL, opts...).ToFunc()
}

// ByPrimaryOrganizationID orders the results by the primary_organization_id field.
func ByPrimaryOrganizationID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrimaryOrganizationID, opts...).ToFunc()
}

// ByLocale orders the results by the locale field.
func ByLocale(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocale, opts...).ToFunc()
}

// BySessionsCount orders the results by sessions count.
func BySessionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSessionsStep(), opts...)
	}
}

// BySessions orders the results by sessions terms.
func BySessions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSessionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAPIKeysCount orders the results by api_keys count.
func ByAPIKeysCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAPIKeysStep(), opts...)
	}
}

// ByAPIKeys orders the results by api_keys terms.
func ByAPIKeys(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAPIKeysStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByOrganizationsCount orders the results by organizations count.
func ByOrganizationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOrganizationsStep(), opts...)
	}
}

// ByOrganizations orders the results by organizations terms.
func ByOrganizations(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrganizationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByMfaMethodsCount orders the results by mfa_methods count.
func ByMfaMethodsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMfaMethodsStep(), opts...)
	}
}

// ByMfaMethods orders the results by mfa_methods terms.
func ByMfaMethods(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMfaMethodsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPasskeysCount orders the results by passkeys count.
func ByPasskeysCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPasskeysStep(), opts...)
	}
}

// ByPasskeys orders the results by passkeys terms.
func ByPasskeys(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPasskeysStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByOauthTokensCount orders the results by oauth_tokens count.
func ByOauthTokensCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOauthTokensStep(), opts...)
	}
}

// ByOauthTokens orders the results by oauth_tokens terms.
func ByOauthTokens(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOauthTokensStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByOauthAuthorizationsCount orders the results by oauth_authorizations count.
func ByOauthAuthorizationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOauthAuthorizationsStep(), opts...)
	}
}

// ByOauthAuthorizations orders the results by oauth_authorizations terms.
func ByOauthAuthorizations(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOauthAuthorizationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByVerificationsCount orders the results by verifications count.
func ByVerificationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newVerificationsStep(), opts...)
	}
}

// ByVerifications orders the results by verifications terms.
func ByVerifications(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newVerificationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRolesCount orders the results by roles count.
func ByRolesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRolesStep(), opts...)
	}
}

// ByRoles orders the results by roles terms.
func ByRoles(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRolesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newSessionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SessionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SessionsTable, SessionsColumn),
	)
}
func newAPIKeysStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(APIKeysInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, APIKeysTable, APIKeysColumn),
	)
}
func newOrganizationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrganizationsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, OrganizationsTable, OrganizationsPrimaryKey...),
	)
}
func newMfaMethodsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MfaMethodsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, MfaMethodsTable, MfaMethodsColumn),
	)
}
func newPasskeysStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PasskeysInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PasskeysTable, PasskeysColumn),
	)
}
func newOauthTokensStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OauthTokensInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, OauthTokensTable, OauthTokensColumn),
	)
}
func newOauthAuthorizationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OauthAuthorizationsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, OauthAuthorizationsTable, OauthAuthorizationsColumn),
	)
}
func newVerificationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(VerificationsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, VerificationsTable, VerificationsColumn),
	)
}
func newRolesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RolesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, RolesTable, RolesPrimaryKey...),
	)
}
