// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/juicycleff/frank/ent/apikey"
	"github.com/juicycleff/frank/ent/identityprovider"
	"github.com/juicycleff/frank/ent/oauthclient"
	"github.com/juicycleff/frank/ent/organization"
	"github.com/juicycleff/frank/ent/organizationfeature"
	"github.com/juicycleff/frank/ent/predicate"
	"github.com/juicycleff/frank/ent/user"
	"github.com/juicycleff/frank/ent/webhook"
)

// OrganizationUpdate is the builder for updating Organization entities.
type OrganizationUpdate struct {
	config
	hooks    []Hook
	mutation *OrganizationMutation
}

// Where appends a list predicates to the OrganizationUpdate builder.
func (ou *OrganizationUpdate) Where(ps ...predicate.Organization) *OrganizationUpdate {
	ou.mutation.Where(ps...)
	return ou
}

// SetUpdatedAt sets the "updated_at" field.
func (ou *OrganizationUpdate) SetUpdatedAt(t time.Time) *OrganizationUpdate {
	ou.mutation.SetUpdatedAt(t)
	return ou
}

// SetName sets the "name" field.
func (ou *OrganizationUpdate) SetName(s string) *OrganizationUpdate {
	ou.mutation.SetName(s)
	return ou
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableName(s *string) *OrganizationUpdate {
	if s != nil {
		ou.SetName(*s)
	}
	return ou
}

// SetSlug sets the "slug" field.
func (ou *OrganizationUpdate) SetSlug(s string) *OrganizationUpdate {
	ou.mutation.SetSlug(s)
	return ou
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableSlug(s *string) *OrganizationUpdate {
	if s != nil {
		ou.SetSlug(*s)
	}
	return ou
}

// SetDomain sets the "domain" field.
func (ou *OrganizationUpdate) SetDomain(s string) *OrganizationUpdate {
	ou.mutation.SetDomain(s)
	return ou
}

// SetNillableDomain sets the "domain" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableDomain(s *string) *OrganizationUpdate {
	if s != nil {
		ou.SetDomain(*s)
	}
	return ou
}

// ClearDomain clears the value of the "domain" field.
func (ou *OrganizationUpdate) ClearDomain() *OrganizationUpdate {
	ou.mutation.ClearDomain()
	return ou
}

// SetLogoURL sets the "logo_url" field.
func (ou *OrganizationUpdate) SetLogoURL(s string) *OrganizationUpdate {
	ou.mutation.SetLogoURL(s)
	return ou
}

// SetNillableLogoURL sets the "logo_url" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableLogoURL(s *string) *OrganizationUpdate {
	if s != nil {
		ou.SetLogoURL(*s)
	}
	return ou
}

// ClearLogoURL clears the value of the "logo_url" field.
func (ou *OrganizationUpdate) ClearLogoURL() *OrganizationUpdate {
	ou.mutation.ClearLogoURL()
	return ou
}

// SetPlan sets the "plan" field.
func (ou *OrganizationUpdate) SetPlan(s string) *OrganizationUpdate {
	ou.mutation.SetPlan(s)
	return ou
}

// SetNillablePlan sets the "plan" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillablePlan(s *string) *OrganizationUpdate {
	if s != nil {
		ou.SetPlan(*s)
	}
	return ou
}

// SetActive sets the "active" field.
func (ou *OrganizationUpdate) SetActive(b bool) *OrganizationUpdate {
	ou.mutation.SetActive(b)
	return ou
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableActive(b *bool) *OrganizationUpdate {
	if b != nil {
		ou.SetActive(*b)
	}
	return ou
}

// SetMetadata sets the "metadata" field.
func (ou *OrganizationUpdate) SetMetadata(m map[string]interface{}) *OrganizationUpdate {
	ou.mutation.SetMetadata(m)
	return ou
}

// ClearMetadata clears the value of the "metadata" field.
func (ou *OrganizationUpdate) ClearMetadata() *OrganizationUpdate {
	ou.mutation.ClearMetadata()
	return ou
}

// SetTrialEndsAt sets the "trial_ends_at" field.
func (ou *OrganizationUpdate) SetTrialEndsAt(t time.Time) *OrganizationUpdate {
	ou.mutation.SetTrialEndsAt(t)
	return ou
}

// SetNillableTrialEndsAt sets the "trial_ends_at" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableTrialEndsAt(t *time.Time) *OrganizationUpdate {
	if t != nil {
		ou.SetTrialEndsAt(*t)
	}
	return ou
}

// ClearTrialEndsAt clears the value of the "trial_ends_at" field.
func (ou *OrganizationUpdate) ClearTrialEndsAt() *OrganizationUpdate {
	ou.mutation.ClearTrialEndsAt()
	return ou
}

// SetTrialUsed sets the "trial_used" field.
func (ou *OrganizationUpdate) SetTrialUsed(b bool) *OrganizationUpdate {
	ou.mutation.SetTrialUsed(b)
	return ou
}

// SetNillableTrialUsed sets the "trial_used" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableTrialUsed(b *bool) *OrganizationUpdate {
	if b != nil {
		ou.SetTrialUsed(*b)
	}
	return ou
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (ou *OrganizationUpdate) AddUserIDs(ids ...string) *OrganizationUpdate {
	ou.mutation.AddUserIDs(ids...)
	return ou
}

// AddUsers adds the "users" edges to the User entity.
func (ou *OrganizationUpdate) AddUsers(u ...*User) *OrganizationUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ou.AddUserIDs(ids...)
}

// AddAPIKeyIDs adds the "api_keys" edge to the ApiKey entity by IDs.
func (ou *OrganizationUpdate) AddAPIKeyIDs(ids ...string) *OrganizationUpdate {
	ou.mutation.AddAPIKeyIDs(ids...)
	return ou
}

// AddAPIKeys adds the "api_keys" edges to the ApiKey entity.
func (ou *OrganizationUpdate) AddAPIKeys(a ...*ApiKey) *OrganizationUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ou.AddAPIKeyIDs(ids...)
}

// AddWebhookIDs adds the "webhooks" edge to the Webhook entity by IDs.
func (ou *OrganizationUpdate) AddWebhookIDs(ids ...string) *OrganizationUpdate {
	ou.mutation.AddWebhookIDs(ids...)
	return ou
}

// AddWebhooks adds the "webhooks" edges to the Webhook entity.
func (ou *OrganizationUpdate) AddWebhooks(w ...*Webhook) *OrganizationUpdate {
	ids := make([]string, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return ou.AddWebhookIDs(ids...)
}

// AddFeatureFlagIDs adds the "feature_flags" edge to the OrganizationFeature entity by IDs.
func (ou *OrganizationUpdate) AddFeatureFlagIDs(ids ...string) *OrganizationUpdate {
	ou.mutation.AddFeatureFlagIDs(ids...)
	return ou
}

// AddFeatureFlags adds the "feature_flags" edges to the OrganizationFeature entity.
func (ou *OrganizationUpdate) AddFeatureFlags(o ...*OrganizationFeature) *OrganizationUpdate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.AddFeatureFlagIDs(ids...)
}

// AddIdentityProviderIDs adds the "identity_providers" edge to the IdentityProvider entity by IDs.
func (ou *OrganizationUpdate) AddIdentityProviderIDs(ids ...string) *OrganizationUpdate {
	ou.mutation.AddIdentityProviderIDs(ids...)
	return ou
}

// AddIdentityProviders adds the "identity_providers" edges to the IdentityProvider entity.
func (ou *OrganizationUpdate) AddIdentityProviders(i ...*IdentityProvider) *OrganizationUpdate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ou.AddIdentityProviderIDs(ids...)
}

// AddOauthClientIDs adds the "oauth_clients" edge to the OAuthClient entity by IDs.
func (ou *OrganizationUpdate) AddOauthClientIDs(ids ...string) *OrganizationUpdate {
	ou.mutation.AddOauthClientIDs(ids...)
	return ou
}

// AddOauthClients adds the "oauth_clients" edges to the OAuthClient entity.
func (ou *OrganizationUpdate) AddOauthClients(o ...*OAuthClient) *OrganizationUpdate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.AddOauthClientIDs(ids...)
}

// Mutation returns the OrganizationMutation object of the builder.
func (ou *OrganizationUpdate) Mutation() *OrganizationMutation {
	return ou.mutation
}

// ClearUsers clears all "users" edges to the User entity.
func (ou *OrganizationUpdate) ClearUsers() *OrganizationUpdate {
	ou.mutation.ClearUsers()
	return ou
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (ou *OrganizationUpdate) RemoveUserIDs(ids ...string) *OrganizationUpdate {
	ou.mutation.RemoveUserIDs(ids...)
	return ou
}

// RemoveUsers removes "users" edges to User entities.
func (ou *OrganizationUpdate) RemoveUsers(u ...*User) *OrganizationUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ou.RemoveUserIDs(ids...)
}

// ClearAPIKeys clears all "api_keys" edges to the ApiKey entity.
func (ou *OrganizationUpdate) ClearAPIKeys() *OrganizationUpdate {
	ou.mutation.ClearAPIKeys()
	return ou
}

// RemoveAPIKeyIDs removes the "api_keys" edge to ApiKey entities by IDs.
func (ou *OrganizationUpdate) RemoveAPIKeyIDs(ids ...string) *OrganizationUpdate {
	ou.mutation.RemoveAPIKeyIDs(ids...)
	return ou
}

// RemoveAPIKeys removes "api_keys" edges to ApiKey entities.
func (ou *OrganizationUpdate) RemoveAPIKeys(a ...*ApiKey) *OrganizationUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ou.RemoveAPIKeyIDs(ids...)
}

// ClearWebhooks clears all "webhooks" edges to the Webhook entity.
func (ou *OrganizationUpdate) ClearWebhooks() *OrganizationUpdate {
	ou.mutation.ClearWebhooks()
	return ou
}

// RemoveWebhookIDs removes the "webhooks" edge to Webhook entities by IDs.
func (ou *OrganizationUpdate) RemoveWebhookIDs(ids ...string) *OrganizationUpdate {
	ou.mutation.RemoveWebhookIDs(ids...)
	return ou
}

// RemoveWebhooks removes "webhooks" edges to Webhook entities.
func (ou *OrganizationUpdate) RemoveWebhooks(w ...*Webhook) *OrganizationUpdate {
	ids := make([]string, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return ou.RemoveWebhookIDs(ids...)
}

// ClearFeatureFlags clears all "feature_flags" edges to the OrganizationFeature entity.
func (ou *OrganizationUpdate) ClearFeatureFlags() *OrganizationUpdate {
	ou.mutation.ClearFeatureFlags()
	return ou
}

// RemoveFeatureFlagIDs removes the "feature_flags" edge to OrganizationFeature entities by IDs.
func (ou *OrganizationUpdate) RemoveFeatureFlagIDs(ids ...string) *OrganizationUpdate {
	ou.mutation.RemoveFeatureFlagIDs(ids...)
	return ou
}

// RemoveFeatureFlags removes "feature_flags" edges to OrganizationFeature entities.
func (ou *OrganizationUpdate) RemoveFeatureFlags(o ...*OrganizationFeature) *OrganizationUpdate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.RemoveFeatureFlagIDs(ids...)
}

// ClearIdentityProviders clears all "identity_providers" edges to the IdentityProvider entity.
func (ou *OrganizationUpdate) ClearIdentityProviders() *OrganizationUpdate {
	ou.mutation.ClearIdentityProviders()
	return ou
}

// RemoveIdentityProviderIDs removes the "identity_providers" edge to IdentityProvider entities by IDs.
func (ou *OrganizationUpdate) RemoveIdentityProviderIDs(ids ...string) *OrganizationUpdate {
	ou.mutation.RemoveIdentityProviderIDs(ids...)
	return ou
}

// RemoveIdentityProviders removes "identity_providers" edges to IdentityProvider entities.
func (ou *OrganizationUpdate) RemoveIdentityProviders(i ...*IdentityProvider) *OrganizationUpdate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ou.RemoveIdentityProviderIDs(ids...)
}

// ClearOauthClients clears all "oauth_clients" edges to the OAuthClient entity.
func (ou *OrganizationUpdate) ClearOauthClients() *OrganizationUpdate {
	ou.mutation.ClearOauthClients()
	return ou
}

// RemoveOauthClientIDs removes the "oauth_clients" edge to OAuthClient entities by IDs.
func (ou *OrganizationUpdate) RemoveOauthClientIDs(ids ...string) *OrganizationUpdate {
	ou.mutation.RemoveOauthClientIDs(ids...)
	return ou
}

// RemoveOauthClients removes "oauth_clients" edges to OAuthClient entities.
func (ou *OrganizationUpdate) RemoveOauthClients(o ...*OAuthClient) *OrganizationUpdate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.RemoveOauthClientIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ou *OrganizationUpdate) Save(ctx context.Context) (int, error) {
	ou.defaults()
	return withHooks(ctx, ou.sqlSave, ou.mutation, ou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ou *OrganizationUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *OrganizationUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *OrganizationUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ou *OrganizationUpdate) defaults() {
	if _, ok := ou.mutation.UpdatedAt(); !ok {
		v := organization.UpdateDefaultUpdatedAt()
		ou.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ou *OrganizationUpdate) check() error {
	if v, ok := ou.mutation.Name(); ok {
		if err := organization.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Organization.name": %w`, err)}
		}
	}
	if v, ok := ou.mutation.Slug(); ok {
		if err := organization.SlugValidator(v); err != nil {
			return &ValidationError{Name: "slug", err: fmt.Errorf(`ent: validator failed for field "Organization.slug": %w`, err)}
		}
	}
	return nil
}

func (ou *OrganizationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ou.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(organization.Table, organization.Columns, sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString))
	if ps := ou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ou.mutation.UpdatedAt(); ok {
		_spec.SetField(organization.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ou.mutation.Name(); ok {
		_spec.SetField(organization.FieldName, field.TypeString, value)
	}
	if value, ok := ou.mutation.Slug(); ok {
		_spec.SetField(organization.FieldSlug, field.TypeString, value)
	}
	if value, ok := ou.mutation.Domain(); ok {
		_spec.SetField(organization.FieldDomain, field.TypeString, value)
	}
	if ou.mutation.DomainCleared() {
		_spec.ClearField(organization.FieldDomain, field.TypeString)
	}
	if value, ok := ou.mutation.LogoURL(); ok {
		_spec.SetField(organization.FieldLogoURL, field.TypeString, value)
	}
	if ou.mutation.LogoURLCleared() {
		_spec.ClearField(organization.FieldLogoURL, field.TypeString)
	}
	if value, ok := ou.mutation.Plan(); ok {
		_spec.SetField(organization.FieldPlan, field.TypeString, value)
	}
	if value, ok := ou.mutation.Active(); ok {
		_spec.SetField(organization.FieldActive, field.TypeBool, value)
	}
	if value, ok := ou.mutation.Metadata(); ok {
		_spec.SetField(organization.FieldMetadata, field.TypeJSON, value)
	}
	if ou.mutation.MetadataCleared() {
		_spec.ClearField(organization.FieldMetadata, field.TypeJSON)
	}
	if value, ok := ou.mutation.TrialEndsAt(); ok {
		_spec.SetField(organization.FieldTrialEndsAt, field.TypeTime, value)
	}
	if ou.mutation.TrialEndsAtCleared() {
		_spec.ClearField(organization.FieldTrialEndsAt, field.TypeTime)
	}
	if value, ok := ou.mutation.TrialUsed(); ok {
		_spec.SetField(organization.FieldTrialUsed, field.TypeBool, value)
	}
	if ou.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.UsersTable,
			Columns: organization.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedUsersIDs(); len(nodes) > 0 && !ou.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.UsersTable,
			Columns: organization.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.UsersTable,
			Columns: organization.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.APIKeysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.APIKeysTable,
			Columns: []string{organization.APIKeysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apikey.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedAPIKeysIDs(); len(nodes) > 0 && !ou.mutation.APIKeysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.APIKeysTable,
			Columns: []string{organization.APIKeysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apikey.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.APIKeysIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.APIKeysTable,
			Columns: []string{organization.APIKeysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apikey.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.WebhooksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.WebhooksTable,
			Columns: []string{organization.WebhooksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(webhook.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedWebhooksIDs(); len(nodes) > 0 && !ou.mutation.WebhooksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.WebhooksTable,
			Columns: []string{organization.WebhooksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(webhook.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.WebhooksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.WebhooksTable,
			Columns: []string{organization.WebhooksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(webhook.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.FeatureFlagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.FeatureFlagsTable,
			Columns: []string{organization.FeatureFlagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organizationfeature.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedFeatureFlagsIDs(); len(nodes) > 0 && !ou.mutation.FeatureFlagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.FeatureFlagsTable,
			Columns: []string{organization.FeatureFlagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organizationfeature.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.FeatureFlagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.FeatureFlagsTable,
			Columns: []string{organization.FeatureFlagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organizationfeature.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.IdentityProvidersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.IdentityProvidersTable,
			Columns: []string{organization.IdentityProvidersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(identityprovider.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedIdentityProvidersIDs(); len(nodes) > 0 && !ou.mutation.IdentityProvidersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.IdentityProvidersTable,
			Columns: []string{organization.IdentityProvidersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(identityprovider.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.IdentityProvidersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.IdentityProvidersTable,
			Columns: []string{organization.IdentityProvidersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(identityprovider.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.OauthClientsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.OauthClientsTable,
			Columns: []string{organization.OauthClientsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthclient.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedOauthClientsIDs(); len(nodes) > 0 && !ou.mutation.OauthClientsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.OauthClientsTable,
			Columns: []string{organization.OauthClientsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthclient.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.OauthClientsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.OauthClientsTable,
			Columns: []string{organization.OauthClientsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthclient.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{organization.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ou.mutation.done = true
	return n, nil
}

// OrganizationUpdateOne is the builder for updating a single Organization entity.
type OrganizationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrganizationMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (ouo *OrganizationUpdateOne) SetUpdatedAt(t time.Time) *OrganizationUpdateOne {
	ouo.mutation.SetUpdatedAt(t)
	return ouo
}

// SetName sets the "name" field.
func (ouo *OrganizationUpdateOne) SetName(s string) *OrganizationUpdateOne {
	ouo.mutation.SetName(s)
	return ouo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableName(s *string) *OrganizationUpdateOne {
	if s != nil {
		ouo.SetName(*s)
	}
	return ouo
}

// SetSlug sets the "slug" field.
func (ouo *OrganizationUpdateOne) SetSlug(s string) *OrganizationUpdateOne {
	ouo.mutation.SetSlug(s)
	return ouo
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableSlug(s *string) *OrganizationUpdateOne {
	if s != nil {
		ouo.SetSlug(*s)
	}
	return ouo
}

// SetDomain sets the "domain" field.
func (ouo *OrganizationUpdateOne) SetDomain(s string) *OrganizationUpdateOne {
	ouo.mutation.SetDomain(s)
	return ouo
}

// SetNillableDomain sets the "domain" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableDomain(s *string) *OrganizationUpdateOne {
	if s != nil {
		ouo.SetDomain(*s)
	}
	return ouo
}

// ClearDomain clears the value of the "domain" field.
func (ouo *OrganizationUpdateOne) ClearDomain() *OrganizationUpdateOne {
	ouo.mutation.ClearDomain()
	return ouo
}

// SetLogoURL sets the "logo_url" field.
func (ouo *OrganizationUpdateOne) SetLogoURL(s string) *OrganizationUpdateOne {
	ouo.mutation.SetLogoURL(s)
	return ouo
}

// SetNillableLogoURL sets the "logo_url" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableLogoURL(s *string) *OrganizationUpdateOne {
	if s != nil {
		ouo.SetLogoURL(*s)
	}
	return ouo
}

// ClearLogoURL clears the value of the "logo_url" field.
func (ouo *OrganizationUpdateOne) ClearLogoURL() *OrganizationUpdateOne {
	ouo.mutation.ClearLogoURL()
	return ouo
}

// SetPlan sets the "plan" field.
func (ouo *OrganizationUpdateOne) SetPlan(s string) *OrganizationUpdateOne {
	ouo.mutation.SetPlan(s)
	return ouo
}

// SetNillablePlan sets the "plan" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillablePlan(s *string) *OrganizationUpdateOne {
	if s != nil {
		ouo.SetPlan(*s)
	}
	return ouo
}

// SetActive sets the "active" field.
func (ouo *OrganizationUpdateOne) SetActive(b bool) *OrganizationUpdateOne {
	ouo.mutation.SetActive(b)
	return ouo
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableActive(b *bool) *OrganizationUpdateOne {
	if b != nil {
		ouo.SetActive(*b)
	}
	return ouo
}

// SetMetadata sets the "metadata" field.
func (ouo *OrganizationUpdateOne) SetMetadata(m map[string]interface{}) *OrganizationUpdateOne {
	ouo.mutation.SetMetadata(m)
	return ouo
}

// ClearMetadata clears the value of the "metadata" field.
func (ouo *OrganizationUpdateOne) ClearMetadata() *OrganizationUpdateOne {
	ouo.mutation.ClearMetadata()
	return ouo
}

// SetTrialEndsAt sets the "trial_ends_at" field.
func (ouo *OrganizationUpdateOne) SetTrialEndsAt(t time.Time) *OrganizationUpdateOne {
	ouo.mutation.SetTrialEndsAt(t)
	return ouo
}

// SetNillableTrialEndsAt sets the "trial_ends_at" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableTrialEndsAt(t *time.Time) *OrganizationUpdateOne {
	if t != nil {
		ouo.SetTrialEndsAt(*t)
	}
	return ouo
}

// ClearTrialEndsAt clears the value of the "trial_ends_at" field.
func (ouo *OrganizationUpdateOne) ClearTrialEndsAt() *OrganizationUpdateOne {
	ouo.mutation.ClearTrialEndsAt()
	return ouo
}

// SetTrialUsed sets the "trial_used" field.
func (ouo *OrganizationUpdateOne) SetTrialUsed(b bool) *OrganizationUpdateOne {
	ouo.mutation.SetTrialUsed(b)
	return ouo
}

// SetNillableTrialUsed sets the "trial_used" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableTrialUsed(b *bool) *OrganizationUpdateOne {
	if b != nil {
		ouo.SetTrialUsed(*b)
	}
	return ouo
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (ouo *OrganizationUpdateOne) AddUserIDs(ids ...string) *OrganizationUpdateOne {
	ouo.mutation.AddUserIDs(ids...)
	return ouo
}

// AddUsers adds the "users" edges to the User entity.
func (ouo *OrganizationUpdateOne) AddUsers(u ...*User) *OrganizationUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ouo.AddUserIDs(ids...)
}

// AddAPIKeyIDs adds the "api_keys" edge to the ApiKey entity by IDs.
func (ouo *OrganizationUpdateOne) AddAPIKeyIDs(ids ...string) *OrganizationUpdateOne {
	ouo.mutation.AddAPIKeyIDs(ids...)
	return ouo
}

// AddAPIKeys adds the "api_keys" edges to the ApiKey entity.
func (ouo *OrganizationUpdateOne) AddAPIKeys(a ...*ApiKey) *OrganizationUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ouo.AddAPIKeyIDs(ids...)
}

// AddWebhookIDs adds the "webhooks" edge to the Webhook entity by IDs.
func (ouo *OrganizationUpdateOne) AddWebhookIDs(ids ...string) *OrganizationUpdateOne {
	ouo.mutation.AddWebhookIDs(ids...)
	return ouo
}

// AddWebhooks adds the "webhooks" edges to the Webhook entity.
func (ouo *OrganizationUpdateOne) AddWebhooks(w ...*Webhook) *OrganizationUpdateOne {
	ids := make([]string, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return ouo.AddWebhookIDs(ids...)
}

// AddFeatureFlagIDs adds the "feature_flags" edge to the OrganizationFeature entity by IDs.
func (ouo *OrganizationUpdateOne) AddFeatureFlagIDs(ids ...string) *OrganizationUpdateOne {
	ouo.mutation.AddFeatureFlagIDs(ids...)
	return ouo
}

// AddFeatureFlags adds the "feature_flags" edges to the OrganizationFeature entity.
func (ouo *OrganizationUpdateOne) AddFeatureFlags(o ...*OrganizationFeature) *OrganizationUpdateOne {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.AddFeatureFlagIDs(ids...)
}

// AddIdentityProviderIDs adds the "identity_providers" edge to the IdentityProvider entity by IDs.
func (ouo *OrganizationUpdateOne) AddIdentityProviderIDs(ids ...string) *OrganizationUpdateOne {
	ouo.mutation.AddIdentityProviderIDs(ids...)
	return ouo
}

// AddIdentityProviders adds the "identity_providers" edges to the IdentityProvider entity.
func (ouo *OrganizationUpdateOne) AddIdentityProviders(i ...*IdentityProvider) *OrganizationUpdateOne {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ouo.AddIdentityProviderIDs(ids...)
}

// AddOauthClientIDs adds the "oauth_clients" edge to the OAuthClient entity by IDs.
func (ouo *OrganizationUpdateOne) AddOauthClientIDs(ids ...string) *OrganizationUpdateOne {
	ouo.mutation.AddOauthClientIDs(ids...)
	return ouo
}

// AddOauthClients adds the "oauth_clients" edges to the OAuthClient entity.
func (ouo *OrganizationUpdateOne) AddOauthClients(o ...*OAuthClient) *OrganizationUpdateOne {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.AddOauthClientIDs(ids...)
}

// Mutation returns the OrganizationMutation object of the builder.
func (ouo *OrganizationUpdateOne) Mutation() *OrganizationMutation {
	return ouo.mutation
}

// ClearUsers clears all "users" edges to the User entity.
func (ouo *OrganizationUpdateOne) ClearUsers() *OrganizationUpdateOne {
	ouo.mutation.ClearUsers()
	return ouo
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (ouo *OrganizationUpdateOne) RemoveUserIDs(ids ...string) *OrganizationUpdateOne {
	ouo.mutation.RemoveUserIDs(ids...)
	return ouo
}

// RemoveUsers removes "users" edges to User entities.
func (ouo *OrganizationUpdateOne) RemoveUsers(u ...*User) *OrganizationUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ouo.RemoveUserIDs(ids...)
}

// ClearAPIKeys clears all "api_keys" edges to the ApiKey entity.
func (ouo *OrganizationUpdateOne) ClearAPIKeys() *OrganizationUpdateOne {
	ouo.mutation.ClearAPIKeys()
	return ouo
}

// RemoveAPIKeyIDs removes the "api_keys" edge to ApiKey entities by IDs.
func (ouo *OrganizationUpdateOne) RemoveAPIKeyIDs(ids ...string) *OrganizationUpdateOne {
	ouo.mutation.RemoveAPIKeyIDs(ids...)
	return ouo
}

// RemoveAPIKeys removes "api_keys" edges to ApiKey entities.
func (ouo *OrganizationUpdateOne) RemoveAPIKeys(a ...*ApiKey) *OrganizationUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ouo.RemoveAPIKeyIDs(ids...)
}

// ClearWebhooks clears all "webhooks" edges to the Webhook entity.
func (ouo *OrganizationUpdateOne) ClearWebhooks() *OrganizationUpdateOne {
	ouo.mutation.ClearWebhooks()
	return ouo
}

// RemoveWebhookIDs removes the "webhooks" edge to Webhook entities by IDs.
func (ouo *OrganizationUpdateOne) RemoveWebhookIDs(ids ...string) *OrganizationUpdateOne {
	ouo.mutation.RemoveWebhookIDs(ids...)
	return ouo
}

// RemoveWebhooks removes "webhooks" edges to Webhook entities.
func (ouo *OrganizationUpdateOne) RemoveWebhooks(w ...*Webhook) *OrganizationUpdateOne {
	ids := make([]string, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return ouo.RemoveWebhookIDs(ids...)
}

// ClearFeatureFlags clears all "feature_flags" edges to the OrganizationFeature entity.
func (ouo *OrganizationUpdateOne) ClearFeatureFlags() *OrganizationUpdateOne {
	ouo.mutation.ClearFeatureFlags()
	return ouo
}

// RemoveFeatureFlagIDs removes the "feature_flags" edge to OrganizationFeature entities by IDs.
func (ouo *OrganizationUpdateOne) RemoveFeatureFlagIDs(ids ...string) *OrganizationUpdateOne {
	ouo.mutation.RemoveFeatureFlagIDs(ids...)
	return ouo
}

// RemoveFeatureFlags removes "feature_flags" edges to OrganizationFeature entities.
func (ouo *OrganizationUpdateOne) RemoveFeatureFlags(o ...*OrganizationFeature) *OrganizationUpdateOne {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.RemoveFeatureFlagIDs(ids...)
}

// ClearIdentityProviders clears all "identity_providers" edges to the IdentityProvider entity.
func (ouo *OrganizationUpdateOne) ClearIdentityProviders() *OrganizationUpdateOne {
	ouo.mutation.ClearIdentityProviders()
	return ouo
}

// RemoveIdentityProviderIDs removes the "identity_providers" edge to IdentityProvider entities by IDs.
func (ouo *OrganizationUpdateOne) RemoveIdentityProviderIDs(ids ...string) *OrganizationUpdateOne {
	ouo.mutation.RemoveIdentityProviderIDs(ids...)
	return ouo
}

// RemoveIdentityProviders removes "identity_providers" edges to IdentityProvider entities.
func (ouo *OrganizationUpdateOne) RemoveIdentityProviders(i ...*IdentityProvider) *OrganizationUpdateOne {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ouo.RemoveIdentityProviderIDs(ids...)
}

// ClearOauthClients clears all "oauth_clients" edges to the OAuthClient entity.
func (ouo *OrganizationUpdateOne) ClearOauthClients() *OrganizationUpdateOne {
	ouo.mutation.ClearOauthClients()
	return ouo
}

// RemoveOauthClientIDs removes the "oauth_clients" edge to OAuthClient entities by IDs.
func (ouo *OrganizationUpdateOne) RemoveOauthClientIDs(ids ...string) *OrganizationUpdateOne {
	ouo.mutation.RemoveOauthClientIDs(ids...)
	return ouo
}

// RemoveOauthClients removes "oauth_clients" edges to OAuthClient entities.
func (ouo *OrganizationUpdateOne) RemoveOauthClients(o ...*OAuthClient) *OrganizationUpdateOne {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.RemoveOauthClientIDs(ids...)
}

// Where appends a list predicates to the OrganizationUpdate builder.
func (ouo *OrganizationUpdateOne) Where(ps ...predicate.Organization) *OrganizationUpdateOne {
	ouo.mutation.Where(ps...)
	return ouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ouo *OrganizationUpdateOne) Select(field string, fields ...string) *OrganizationUpdateOne {
	ouo.fields = append([]string{field}, fields...)
	return ouo
}

// Save executes the query and returns the updated Organization entity.
func (ouo *OrganizationUpdateOne) Save(ctx context.Context) (*Organization, error) {
	ouo.defaults()
	return withHooks(ctx, ouo.sqlSave, ouo.mutation, ouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *OrganizationUpdateOne) SaveX(ctx context.Context) *Organization {
	node, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ouo *OrganizationUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *OrganizationUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ouo *OrganizationUpdateOne) defaults() {
	if _, ok := ouo.mutation.UpdatedAt(); !ok {
		v := organization.UpdateDefaultUpdatedAt()
		ouo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ouo *OrganizationUpdateOne) check() error {
	if v, ok := ouo.mutation.Name(); ok {
		if err := organization.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Organization.name": %w`, err)}
		}
	}
	if v, ok := ouo.mutation.Slug(); ok {
		if err := organization.SlugValidator(v); err != nil {
			return &ValidationError{Name: "slug", err: fmt.Errorf(`ent: validator failed for field "Organization.slug": %w`, err)}
		}
	}
	return nil
}

func (ouo *OrganizationUpdateOne) sqlSave(ctx context.Context) (_node *Organization, err error) {
	if err := ouo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(organization.Table, organization.Columns, sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString))
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Organization.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, organization.FieldID)
		for _, f := range fields {
			if !organization.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != organization.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouo.mutation.UpdatedAt(); ok {
		_spec.SetField(organization.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ouo.mutation.Name(); ok {
		_spec.SetField(organization.FieldName, field.TypeString, value)
	}
	if value, ok := ouo.mutation.Slug(); ok {
		_spec.SetField(organization.FieldSlug, field.TypeString, value)
	}
	if value, ok := ouo.mutation.Domain(); ok {
		_spec.SetField(organization.FieldDomain, field.TypeString, value)
	}
	if ouo.mutation.DomainCleared() {
		_spec.ClearField(organization.FieldDomain, field.TypeString)
	}
	if value, ok := ouo.mutation.LogoURL(); ok {
		_spec.SetField(organization.FieldLogoURL, field.TypeString, value)
	}
	if ouo.mutation.LogoURLCleared() {
		_spec.ClearField(organization.FieldLogoURL, field.TypeString)
	}
	if value, ok := ouo.mutation.Plan(); ok {
		_spec.SetField(organization.FieldPlan, field.TypeString, value)
	}
	if value, ok := ouo.mutation.Active(); ok {
		_spec.SetField(organization.FieldActive, field.TypeBool, value)
	}
	if value, ok := ouo.mutation.Metadata(); ok {
		_spec.SetField(organization.FieldMetadata, field.TypeJSON, value)
	}
	if ouo.mutation.MetadataCleared() {
		_spec.ClearField(organization.FieldMetadata, field.TypeJSON)
	}
	if value, ok := ouo.mutation.TrialEndsAt(); ok {
		_spec.SetField(organization.FieldTrialEndsAt, field.TypeTime, value)
	}
	if ouo.mutation.TrialEndsAtCleared() {
		_spec.ClearField(organization.FieldTrialEndsAt, field.TypeTime)
	}
	if value, ok := ouo.mutation.TrialUsed(); ok {
		_spec.SetField(organization.FieldTrialUsed, field.TypeBool, value)
	}
	if ouo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.UsersTable,
			Columns: organization.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedUsersIDs(); len(nodes) > 0 && !ouo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.UsersTable,
			Columns: organization.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.UsersTable,
			Columns: organization.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.APIKeysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.APIKeysTable,
			Columns: []string{organization.APIKeysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apikey.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedAPIKeysIDs(); len(nodes) > 0 && !ouo.mutation.APIKeysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.APIKeysTable,
			Columns: []string{organization.APIKeysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apikey.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.APIKeysIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.APIKeysTable,
			Columns: []string{organization.APIKeysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apikey.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.WebhooksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.WebhooksTable,
			Columns: []string{organization.WebhooksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(webhook.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedWebhooksIDs(); len(nodes) > 0 && !ouo.mutation.WebhooksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.WebhooksTable,
			Columns: []string{organization.WebhooksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(webhook.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.WebhooksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.WebhooksTable,
			Columns: []string{organization.WebhooksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(webhook.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.FeatureFlagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.FeatureFlagsTable,
			Columns: []string{organization.FeatureFlagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organizationfeature.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedFeatureFlagsIDs(); len(nodes) > 0 && !ouo.mutation.FeatureFlagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.FeatureFlagsTable,
			Columns: []string{organization.FeatureFlagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organizationfeature.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.FeatureFlagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.FeatureFlagsTable,
			Columns: []string{organization.FeatureFlagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organizationfeature.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.IdentityProvidersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.IdentityProvidersTable,
			Columns: []string{organization.IdentityProvidersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(identityprovider.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedIdentityProvidersIDs(); len(nodes) > 0 && !ouo.mutation.IdentityProvidersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.IdentityProvidersTable,
			Columns: []string{organization.IdentityProvidersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(identityprovider.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.IdentityProvidersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.IdentityProvidersTable,
			Columns: []string{organization.IdentityProvidersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(identityprovider.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.OauthClientsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.OauthClientsTable,
			Columns: []string{organization.OauthClientsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthclient.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedOauthClientsIDs(); len(nodes) > 0 && !ouo.mutation.OauthClientsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.OauthClientsTable,
			Columns: []string{organization.OauthClientsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthclient.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.OauthClientsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.OauthClientsTable,
			Columns: []string{organization.OauthClientsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthclient.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Organization{config: ouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{organization.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ouo.mutation.done = true
	return _node, nil
}
