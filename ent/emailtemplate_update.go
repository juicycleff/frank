// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/juicycleff/frank/ent/emailtemplate"
	"github.com/juicycleff/frank/ent/predicate"
)

// EmailTemplateUpdate is the builder for updating EmailTemplate entities.
type EmailTemplateUpdate struct {
	config
	hooks    []Hook
	mutation *EmailTemplateMutation
}

// Where appends a list predicates to the EmailTemplateUpdate builder.
func (etu *EmailTemplateUpdate) Where(ps ...predicate.EmailTemplate) *EmailTemplateUpdate {
	etu.mutation.Where(ps...)
	return etu
}

// SetUpdatedAt sets the "updated_at" field.
func (etu *EmailTemplateUpdate) SetUpdatedAt(t time.Time) *EmailTemplateUpdate {
	etu.mutation.SetUpdatedAt(t)
	return etu
}

// SetName sets the "name" field.
func (etu *EmailTemplateUpdate) SetName(s string) *EmailTemplateUpdate {
	etu.mutation.SetName(s)
	return etu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (etu *EmailTemplateUpdate) SetNillableName(s *string) *EmailTemplateUpdate {
	if s != nil {
		etu.SetName(*s)
	}
	return etu
}

// SetSubject sets the "subject" field.
func (etu *EmailTemplateUpdate) SetSubject(s string) *EmailTemplateUpdate {
	etu.mutation.SetSubject(s)
	return etu
}

// SetNillableSubject sets the "subject" field if the given value is not nil.
func (etu *EmailTemplateUpdate) SetNillableSubject(s *string) *EmailTemplateUpdate {
	if s != nil {
		etu.SetSubject(*s)
	}
	return etu
}

// SetType sets the "type" field.
func (etu *EmailTemplateUpdate) SetType(s string) *EmailTemplateUpdate {
	etu.mutation.SetType(s)
	return etu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (etu *EmailTemplateUpdate) SetNillableType(s *string) *EmailTemplateUpdate {
	if s != nil {
		etu.SetType(*s)
	}
	return etu
}

// SetHTMLContent sets the "html_content" field.
func (etu *EmailTemplateUpdate) SetHTMLContent(s string) *EmailTemplateUpdate {
	etu.mutation.SetHTMLContent(s)
	return etu
}

// SetNillableHTMLContent sets the "html_content" field if the given value is not nil.
func (etu *EmailTemplateUpdate) SetNillableHTMLContent(s *string) *EmailTemplateUpdate {
	if s != nil {
		etu.SetHTMLContent(*s)
	}
	return etu
}

// SetTextContent sets the "text_content" field.
func (etu *EmailTemplateUpdate) SetTextContent(s string) *EmailTemplateUpdate {
	etu.mutation.SetTextContent(s)
	return etu
}

// SetNillableTextContent sets the "text_content" field if the given value is not nil.
func (etu *EmailTemplateUpdate) SetNillableTextContent(s *string) *EmailTemplateUpdate {
	if s != nil {
		etu.SetTextContent(*s)
	}
	return etu
}

// ClearTextContent clears the value of the "text_content" field.
func (etu *EmailTemplateUpdate) ClearTextContent() *EmailTemplateUpdate {
	etu.mutation.ClearTextContent()
	return etu
}

// SetOrganizationID sets the "organization_id" field.
func (etu *EmailTemplateUpdate) SetOrganizationID(s string) *EmailTemplateUpdate {
	etu.mutation.SetOrganizationID(s)
	return etu
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (etu *EmailTemplateUpdate) SetNillableOrganizationID(s *string) *EmailTemplateUpdate {
	if s != nil {
		etu.SetOrganizationID(*s)
	}
	return etu
}

// ClearOrganizationID clears the value of the "organization_id" field.
func (etu *EmailTemplateUpdate) ClearOrganizationID() *EmailTemplateUpdate {
	etu.mutation.ClearOrganizationID()
	return etu
}

// SetActive sets the "active" field.
func (etu *EmailTemplateUpdate) SetActive(b bool) *EmailTemplateUpdate {
	etu.mutation.SetActive(b)
	return etu
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (etu *EmailTemplateUpdate) SetNillableActive(b *bool) *EmailTemplateUpdate {
	if b != nil {
		etu.SetActive(*b)
	}
	return etu
}

// SetSystem sets the "system" field.
func (etu *EmailTemplateUpdate) SetSystem(b bool) *EmailTemplateUpdate {
	etu.mutation.SetSystem(b)
	return etu
}

// SetNillableSystem sets the "system" field if the given value is not nil.
func (etu *EmailTemplateUpdate) SetNillableSystem(b *bool) *EmailTemplateUpdate {
	if b != nil {
		etu.SetSystem(*b)
	}
	return etu
}

// SetLocale sets the "locale" field.
func (etu *EmailTemplateUpdate) SetLocale(s string) *EmailTemplateUpdate {
	etu.mutation.SetLocale(s)
	return etu
}

// SetNillableLocale sets the "locale" field if the given value is not nil.
func (etu *EmailTemplateUpdate) SetNillableLocale(s *string) *EmailTemplateUpdate {
	if s != nil {
		etu.SetLocale(*s)
	}
	return etu
}

// SetMetadata sets the "metadata" field.
func (etu *EmailTemplateUpdate) SetMetadata(m map[string]interface{}) *EmailTemplateUpdate {
	etu.mutation.SetMetadata(m)
	return etu
}

// ClearMetadata clears the value of the "metadata" field.
func (etu *EmailTemplateUpdate) ClearMetadata() *EmailTemplateUpdate {
	etu.mutation.ClearMetadata()
	return etu
}

// Mutation returns the EmailTemplateMutation object of the builder.
func (etu *EmailTemplateUpdate) Mutation() *EmailTemplateMutation {
	return etu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (etu *EmailTemplateUpdate) Save(ctx context.Context) (int, error) {
	etu.defaults()
	return withHooks(ctx, etu.sqlSave, etu.mutation, etu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (etu *EmailTemplateUpdate) SaveX(ctx context.Context) int {
	affected, err := etu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (etu *EmailTemplateUpdate) Exec(ctx context.Context) error {
	_, err := etu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (etu *EmailTemplateUpdate) ExecX(ctx context.Context) {
	if err := etu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (etu *EmailTemplateUpdate) defaults() {
	if _, ok := etu.mutation.UpdatedAt(); !ok {
		v := emailtemplate.UpdateDefaultUpdatedAt()
		etu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (etu *EmailTemplateUpdate) check() error {
	if v, ok := etu.mutation.Name(); ok {
		if err := emailtemplate.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "EmailTemplate.name": %w`, err)}
		}
	}
	if v, ok := etu.mutation.Subject(); ok {
		if err := emailtemplate.SubjectValidator(v); err != nil {
			return &ValidationError{Name: "subject", err: fmt.Errorf(`ent: validator failed for field "EmailTemplate.subject": %w`, err)}
		}
	}
	if v, ok := etu.mutation.GetType(); ok {
		if err := emailtemplate.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "EmailTemplate.type": %w`, err)}
		}
	}
	if v, ok := etu.mutation.HTMLContent(); ok {
		if err := emailtemplate.HTMLContentValidator(v); err != nil {
			return &ValidationError{Name: "html_content", err: fmt.Errorf(`ent: validator failed for field "EmailTemplate.html_content": %w`, err)}
		}
	}
	return nil
}

func (etu *EmailTemplateUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := etu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(emailtemplate.Table, emailtemplate.Columns, sqlgraph.NewFieldSpec(emailtemplate.FieldID, field.TypeString))
	if ps := etu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := etu.mutation.UpdatedAt(); ok {
		_spec.SetField(emailtemplate.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := etu.mutation.Name(); ok {
		_spec.SetField(emailtemplate.FieldName, field.TypeString, value)
	}
	if value, ok := etu.mutation.Subject(); ok {
		_spec.SetField(emailtemplate.FieldSubject, field.TypeString, value)
	}
	if value, ok := etu.mutation.GetType(); ok {
		_spec.SetField(emailtemplate.FieldType, field.TypeString, value)
	}
	if value, ok := etu.mutation.HTMLContent(); ok {
		_spec.SetField(emailtemplate.FieldHTMLContent, field.TypeString, value)
	}
	if value, ok := etu.mutation.TextContent(); ok {
		_spec.SetField(emailtemplate.FieldTextContent, field.TypeString, value)
	}
	if etu.mutation.TextContentCleared() {
		_spec.ClearField(emailtemplate.FieldTextContent, field.TypeString)
	}
	if value, ok := etu.mutation.OrganizationID(); ok {
		_spec.SetField(emailtemplate.FieldOrganizationID, field.TypeString, value)
	}
	if etu.mutation.OrganizationIDCleared() {
		_spec.ClearField(emailtemplate.FieldOrganizationID, field.TypeString)
	}
	if value, ok := etu.mutation.Active(); ok {
		_spec.SetField(emailtemplate.FieldActive, field.TypeBool, value)
	}
	if value, ok := etu.mutation.System(); ok {
		_spec.SetField(emailtemplate.FieldSystem, field.TypeBool, value)
	}
	if value, ok := etu.mutation.Locale(); ok {
		_spec.SetField(emailtemplate.FieldLocale, field.TypeString, value)
	}
	if value, ok := etu.mutation.Metadata(); ok {
		_spec.SetField(emailtemplate.FieldMetadata, field.TypeJSON, value)
	}
	if etu.mutation.MetadataCleared() {
		_spec.ClearField(emailtemplate.FieldMetadata, field.TypeJSON)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, etu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{emailtemplate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	etu.mutation.done = true
	return n, nil
}

// EmailTemplateUpdateOne is the builder for updating a single EmailTemplate entity.
type EmailTemplateUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EmailTemplateMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (etuo *EmailTemplateUpdateOne) SetUpdatedAt(t time.Time) *EmailTemplateUpdateOne {
	etuo.mutation.SetUpdatedAt(t)
	return etuo
}

// SetName sets the "name" field.
func (etuo *EmailTemplateUpdateOne) SetName(s string) *EmailTemplateUpdateOne {
	etuo.mutation.SetName(s)
	return etuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (etuo *EmailTemplateUpdateOne) SetNillableName(s *string) *EmailTemplateUpdateOne {
	if s != nil {
		etuo.SetName(*s)
	}
	return etuo
}

// SetSubject sets the "subject" field.
func (etuo *EmailTemplateUpdateOne) SetSubject(s string) *EmailTemplateUpdateOne {
	etuo.mutation.SetSubject(s)
	return etuo
}

// SetNillableSubject sets the "subject" field if the given value is not nil.
func (etuo *EmailTemplateUpdateOne) SetNillableSubject(s *string) *EmailTemplateUpdateOne {
	if s != nil {
		etuo.SetSubject(*s)
	}
	return etuo
}

// SetType sets the "type" field.
func (etuo *EmailTemplateUpdateOne) SetType(s string) *EmailTemplateUpdateOne {
	etuo.mutation.SetType(s)
	return etuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (etuo *EmailTemplateUpdateOne) SetNillableType(s *string) *EmailTemplateUpdateOne {
	if s != nil {
		etuo.SetType(*s)
	}
	return etuo
}

// SetHTMLContent sets the "html_content" field.
func (etuo *EmailTemplateUpdateOne) SetHTMLContent(s string) *EmailTemplateUpdateOne {
	etuo.mutation.SetHTMLContent(s)
	return etuo
}

// SetNillableHTMLContent sets the "html_content" field if the given value is not nil.
func (etuo *EmailTemplateUpdateOne) SetNillableHTMLContent(s *string) *EmailTemplateUpdateOne {
	if s != nil {
		etuo.SetHTMLContent(*s)
	}
	return etuo
}

// SetTextContent sets the "text_content" field.
func (etuo *EmailTemplateUpdateOne) SetTextContent(s string) *EmailTemplateUpdateOne {
	etuo.mutation.SetTextContent(s)
	return etuo
}

// SetNillableTextContent sets the "text_content" field if the given value is not nil.
func (etuo *EmailTemplateUpdateOne) SetNillableTextContent(s *string) *EmailTemplateUpdateOne {
	if s != nil {
		etuo.SetTextContent(*s)
	}
	return etuo
}

// ClearTextContent clears the value of the "text_content" field.
func (etuo *EmailTemplateUpdateOne) ClearTextContent() *EmailTemplateUpdateOne {
	etuo.mutation.ClearTextContent()
	return etuo
}

// SetOrganizationID sets the "organization_id" field.
func (etuo *EmailTemplateUpdateOne) SetOrganizationID(s string) *EmailTemplateUpdateOne {
	etuo.mutation.SetOrganizationID(s)
	return etuo
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (etuo *EmailTemplateUpdateOne) SetNillableOrganizationID(s *string) *EmailTemplateUpdateOne {
	if s != nil {
		etuo.SetOrganizationID(*s)
	}
	return etuo
}

// ClearOrganizationID clears the value of the "organization_id" field.
func (etuo *EmailTemplateUpdateOne) ClearOrganizationID() *EmailTemplateUpdateOne {
	etuo.mutation.ClearOrganizationID()
	return etuo
}

// SetActive sets the "active" field.
func (etuo *EmailTemplateUpdateOne) SetActive(b bool) *EmailTemplateUpdateOne {
	etuo.mutation.SetActive(b)
	return etuo
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (etuo *EmailTemplateUpdateOne) SetNillableActive(b *bool) *EmailTemplateUpdateOne {
	if b != nil {
		etuo.SetActive(*b)
	}
	return etuo
}

// SetSystem sets the "system" field.
func (etuo *EmailTemplateUpdateOne) SetSystem(b bool) *EmailTemplateUpdateOne {
	etuo.mutation.SetSystem(b)
	return etuo
}

// SetNillableSystem sets the "system" field if the given value is not nil.
func (etuo *EmailTemplateUpdateOne) SetNillableSystem(b *bool) *EmailTemplateUpdateOne {
	if b != nil {
		etuo.SetSystem(*b)
	}
	return etuo
}

// SetLocale sets the "locale" field.
func (etuo *EmailTemplateUpdateOne) SetLocale(s string) *EmailTemplateUpdateOne {
	etuo.mutation.SetLocale(s)
	return etuo
}

// SetNillableLocale sets the "locale" field if the given value is not nil.
func (etuo *EmailTemplateUpdateOne) SetNillableLocale(s *string) *EmailTemplateUpdateOne {
	if s != nil {
		etuo.SetLocale(*s)
	}
	return etuo
}

// SetMetadata sets the "metadata" field.
func (etuo *EmailTemplateUpdateOne) SetMetadata(m map[string]interface{}) *EmailTemplateUpdateOne {
	etuo.mutation.SetMetadata(m)
	return etuo
}

// ClearMetadata clears the value of the "metadata" field.
func (etuo *EmailTemplateUpdateOne) ClearMetadata() *EmailTemplateUpdateOne {
	etuo.mutation.ClearMetadata()
	return etuo
}

// Mutation returns the EmailTemplateMutation object of the builder.
func (etuo *EmailTemplateUpdateOne) Mutation() *EmailTemplateMutation {
	return etuo.mutation
}

// Where appends a list predicates to the EmailTemplateUpdate builder.
func (etuo *EmailTemplateUpdateOne) Where(ps ...predicate.EmailTemplate) *EmailTemplateUpdateOne {
	etuo.mutation.Where(ps...)
	return etuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (etuo *EmailTemplateUpdateOne) Select(field string, fields ...string) *EmailTemplateUpdateOne {
	etuo.fields = append([]string{field}, fields...)
	return etuo
}

// Save executes the query and returns the updated EmailTemplate entity.
func (etuo *EmailTemplateUpdateOne) Save(ctx context.Context) (*EmailTemplate, error) {
	etuo.defaults()
	return withHooks(ctx, etuo.sqlSave, etuo.mutation, etuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (etuo *EmailTemplateUpdateOne) SaveX(ctx context.Context) *EmailTemplate {
	node, err := etuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (etuo *EmailTemplateUpdateOne) Exec(ctx context.Context) error {
	_, err := etuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (etuo *EmailTemplateUpdateOne) ExecX(ctx context.Context) {
	if err := etuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (etuo *EmailTemplateUpdateOne) defaults() {
	if _, ok := etuo.mutation.UpdatedAt(); !ok {
		v := emailtemplate.UpdateDefaultUpdatedAt()
		etuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (etuo *EmailTemplateUpdateOne) check() error {
	if v, ok := etuo.mutation.Name(); ok {
		if err := emailtemplate.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "EmailTemplate.name": %w`, err)}
		}
	}
	if v, ok := etuo.mutation.Subject(); ok {
		if err := emailtemplate.SubjectValidator(v); err != nil {
			return &ValidationError{Name: "subject", err: fmt.Errorf(`ent: validator failed for field "EmailTemplate.subject": %w`, err)}
		}
	}
	if v, ok := etuo.mutation.GetType(); ok {
		if err := emailtemplate.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "EmailTemplate.type": %w`, err)}
		}
	}
	if v, ok := etuo.mutation.HTMLContent(); ok {
		if err := emailtemplate.HTMLContentValidator(v); err != nil {
			return &ValidationError{Name: "html_content", err: fmt.Errorf(`ent: validator failed for field "EmailTemplate.html_content": %w`, err)}
		}
	}
	return nil
}

func (etuo *EmailTemplateUpdateOne) sqlSave(ctx context.Context) (_node *EmailTemplate, err error) {
	if err := etuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(emailtemplate.Table, emailtemplate.Columns, sqlgraph.NewFieldSpec(emailtemplate.FieldID, field.TypeString))
	id, ok := etuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "EmailTemplate.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := etuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, emailtemplate.FieldID)
		for _, f := range fields {
			if !emailtemplate.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != emailtemplate.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := etuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := etuo.mutation.UpdatedAt(); ok {
		_spec.SetField(emailtemplate.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := etuo.mutation.Name(); ok {
		_spec.SetField(emailtemplate.FieldName, field.TypeString, value)
	}
	if value, ok := etuo.mutation.Subject(); ok {
		_spec.SetField(emailtemplate.FieldSubject, field.TypeString, value)
	}
	if value, ok := etuo.mutation.GetType(); ok {
		_spec.SetField(emailtemplate.FieldType, field.TypeString, value)
	}
	if value, ok := etuo.mutation.HTMLContent(); ok {
		_spec.SetField(emailtemplate.FieldHTMLContent, field.TypeString, value)
	}
	if value, ok := etuo.mutation.TextContent(); ok {
		_spec.SetField(emailtemplate.FieldTextContent, field.TypeString, value)
	}
	if etuo.mutation.TextContentCleared() {
		_spec.ClearField(emailtemplate.FieldTextContent, field.TypeString)
	}
	if value, ok := etuo.mutation.OrganizationID(); ok {
		_spec.SetField(emailtemplate.FieldOrganizationID, field.TypeString, value)
	}
	if etuo.mutation.OrganizationIDCleared() {
		_spec.ClearField(emailtemplate.FieldOrganizationID, field.TypeString)
	}
	if value, ok := etuo.mutation.Active(); ok {
		_spec.SetField(emailtemplate.FieldActive, field.TypeBool, value)
	}
	if value, ok := etuo.mutation.System(); ok {
		_spec.SetField(emailtemplate.FieldSystem, field.TypeBool, value)
	}
	if value, ok := etuo.mutation.Locale(); ok {
		_spec.SetField(emailtemplate.FieldLocale, field.TypeString, value)
	}
	if value, ok := etuo.mutation.Metadata(); ok {
		_spec.SetField(emailtemplate.FieldMetadata, field.TypeJSON, value)
	}
	if etuo.mutation.MetadataCleared() {
		_spec.ClearField(emailtemplate.FieldMetadata, field.TypeJSON)
	}
	_node = &EmailTemplate{config: etuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, etuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{emailtemplate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	etuo.mutation.done = true
	return _node, nil
}
