package frank

import (
	"context"

	health "github.com/juicycleff/frank/gen/health"
	"goa.design/clue/log"
)

// health service example implementation.
// The example methods log the requests and return zero values.
type healthsrvc struct{}

// NewHealth returns the health service implementation.
func NewHealth() health.Service {
	return &healthsrvc{}
}

// Check system health
func (s *healthsrvc) Check(ctx context.Context) (res *health.HealthResponse, err error) {
	res = &health.HealthResponse{}
	log.Printf(ctx, "health.check")
	return
}

// Check if the system is ready to receive traffic
func (s *healthsrvc) Ready(ctx context.Context) (res *health.ReadyResponse, err error) {
	res = &health.ReadyResponse{}
	log.Printf(ctx, "health.ready")
	return
}

// Get system version information
func (s *healthsrvc) Version(ctx context.Context) (res *health.VersionResult, err error) {
	res = &health.VersionResult{}
	log.Printf(ctx, "health.version")
	return
}

// Get system metrics
func (s *healthsrvc) Metrics(ctx context.Context) (res *health.MetricsResult, err error) {
	res = &health.MetricsResult{}
	log.Printf(ctx, "health.metrics")
	return
}

// Debug information (only available in development mode)
func (s *healthsrvc) Debug(ctx context.Context) (res any, err error) {
	log.Printf(ctx, "health.debug")
	return
}
