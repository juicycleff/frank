openapi: 3.0.3
info:
  title: Frank Auth Server API
  description: |
    Frank is a comprehensive authentication and authorization server that provides OAuth2, passwordless login, MFA, 
    passkeys, SSO, enterprise SSO, webhooks, organizations, and API keys for machine-to-machine authentication.
  version: 1.0.0
  contact:
    name: Frank Auth Server
    url: https://github.com/juicycleff/frank
servers:
  - url: https://auth.example.com/api/v1
    description: Production server
  - url: http://localhost:8080/api/v1
    description: Local development server

tags:
  - name: Auth
    description: Authentication operations
  - name: OAuth2
    description: OAuth2 provider and client operations
  - name: Passwordless
    description: Passwordless authentication operations
  - name: Passkeys
    description: WebAuthn/Passkey operations
  - name: MFA
    description: Multi-factor authentication operations
  - name: SSO
    description: Single Sign-On operations
  - name: Organizations
    description: Organization management operations
  - name: Users
    description: User management operations
  - name: API Keys
    description: API key operations for machine-to-machine authentication
  - name: Webhooks
    description: Webhook management operations
  - name: Session
    description: Session management operations

paths:
  #
  # Authentication endpoints
  #
  /auth/login:
    post:
      tags:
        - Auth
      summary: Log in with email and password
      description: Authenticate a user with email and password
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
                organization_id:
                  type: string
                remember_me:
                  type: boolean
                  default: false
                captcha_response:
                  type: string
      responses:
        '200':
          description: Successfully authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Account locked or requires verification
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/register:
    post:
      tags:
        - Auth
      summary: Register a new user
      description: Create a new user account
      operationId: register
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
                first_name:
                  type: string
                last_name:
                  type: string
                organization_id:
                  type: string
                metadata:
                  type: object
                  additionalProperties: true
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Email already in use
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/logout:
    post:
      tags:
        - Auth
      summary: Log out current user
      description: Invalidate the current session and log out the user
      operationId: logout
      responses:
        '200':
          description: Successfully logged out
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Successfully logged out

  /auth/refresh:
    post:
      tags:
        - Auth
      summary: Refresh access token
      description: Get a new access token using a refresh token
      operationId: refreshToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refresh_token
              properties:
                refresh_token:
                  type: string
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  refresh_token:
                    type: string
                  expires_at:
                    type: integer
                    format: int64
        '401':
          description: Invalid refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/forgot-password:
    post:
      tags:
        - Auth
      summary: Request password reset
      description: Initiate the password reset process
      operationId: forgotPassword
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
      responses:
        '202':
          description: Password reset email sent (if account exists)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: If your email is registered, you will receive a password reset link

  /auth/reset-password:
    post:
      tags:
        - Auth
      summary: Reset password
      description: Reset password using a token
      operationId: resetPassword
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
                - new_password
              properties:
                token:
                  type: string
                new_password:
                  type: string
                  format: password
      responses:
        '200':
          description: Password reset successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Password has been reset successfully
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/verify-email:
    post:
      tags:
        - Auth
      summary: Verify email
      description: Verify email address using a token
      operationId: verifyEmail
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
              properties:
                token:
                  type: string
      responses:
        '200':
          description: Email verification successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Email verification successful
        '401':
          description: Invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  #
  # Passwordless authentication endpoints
  #
  /auth/passwordless/email:
    post:
      tags:
        - Passwordless
      summary: Passwordless email login
      description: Request a magic link login for an email address
      operationId: passwordlessEmail
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
                redirect_url:
                  type: string
                  format: uri
      responses:
        '200':
          description: Magic link sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Passwordless login email sent
                  verification_id:
                    type: string
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/passwordless/sms:
    post:
      tags:
        - Passwordless
      summary: Passwordless SMS login
      description: Request an SMS code login for a phone number
      operationId: passwordlessSMS
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - phone_number
              properties:
                phone_number:
                  type: string
                redirect_url:
                  type: string
                  format: uri
      responses:
        '200':
          description: SMS code sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Passwordless login SMS sent
                  verification_id:
                    type: string
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/passwordless/verify:
    post:
      tags:
        - Passwordless
      summary: Verify passwordless login
      description: Verify a passwordless login with token or code
      operationId: passwordlessVerify
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - auth_type
              properties:
                token:
                  type: string
                phone_number:
                  type: string
                code:
                  type: string
                auth_type:
                  type: string
                  enum: [email, sms]
      responses:
        '200':
          description: Verification successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  authenticated:
                    type: boolean
                  user_id:
                    type: string
                  email:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Invalid verification
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/passwordless/methods:
    get:
      tags:
        - Passwordless
      summary: Get passwordless methods
      description: Get available passwordless authentication methods
      operationId: getPasswordlessMethods
      responses:
        '200':
          description: Available methods
          content:
            application/json:
              schema:
                type: object
                properties:
                  enabled:
                    type: boolean
                  methods:
                    type: array
                    items:
                      type: string
                      enum: [email, sms]

  /auth/passwordless/magic-link:
    post:
      tags:
        - Passwordless
      summary: Generate magic link
      description: Generate a magic link for a user
      operationId: generateMagicLink
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - user_id
                - redirect_url
              properties:
                email:
                  type: string
                  format: email
                user_id:
                  type: string
                redirect_url:
                  type: string
                  format: uri
                expires_in:
                  type: integer
                  description: Expiration time in seconds
                  default: 86400
      responses:
        '200':
          description: Magic link generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  magic_link:
                    type: string
                  expires_in:
                    type: integer
                    description: Expiration time in seconds
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  #
  # Multi-factor authentication endpoints
  #
  /auth/mfa/enroll:
    post:
      tags:
        - MFA
      summary: Enroll in MFA
      description: Enroll in a multi-factor authentication method
      operationId: mfaEnroll
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - method
              properties:
                method:
                  type: string
                  enum: [totp, sms, email, backup_codes]
                phone_number:
                  type: string
                  description: Required for SMS method
                email:
                  type: string
                  format: email
                  description: Required for email method
      responses:
        '200':
          description: MFA enrollment successful
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      secret:
                        type: string
                      uri:
                        type: string
                      qr_code_data:
                        type: string
                  - type: object
                    properties:
                      message:
                        type: string
                  - type: object
                    properties:
                      backup_codes:
                        type: array
                        items:
                          type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/mfa/verify:
    post:
      tags:
        - MFA
      summary: Verify MFA
      description: Verify a multi-factor authentication code
      operationId: mfaVerify
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - method
                - code
              properties:
                method:
                  type: string
                  enum: [totp, sms, email, backup_codes]
                code:
                  type: string
                phone_number:
                  type: string
                  description: Required for SMS method
      responses:
        '200':
          description: MFA verification successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  verified:
                    type: boolean
        '401':
          description: Invalid code
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/mfa/unenroll:
    post:
      tags:
        - MFA
      summary: Unenroll from MFA
      description: Unenroll from a multi-factor authentication method
      operationId: mfaUnenroll
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - method
              properties:
                method:
                  type: string
                  enum: [totp, sms, email, backup_codes, all]
      responses:
        '200':
          description: MFA unenrollment successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: MFA method disabled successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/mfa/methods:
    get:
      tags:
        - MFA
      summary: Get MFA methods
      description: Get enabled MFA methods for the current user
      operationId: getMFAMethods
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Enabled MFA methods
          content:
            application/json:
              schema:
                type: object
                properties:
                  methods:
                    type: array
                    items:
                      type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/mfa/send-code:
    post:
      tags:
        - MFA
      summary: Send MFA code
      description: Send a multi-factor authentication code
      operationId: sendMFACode
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - method
              properties:
                method:
                  type: string
                  enum: [sms, email]
      responses:
        '200':
          description: Code sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Verification code sent successfully
                  expires_at:
                    type: integer
                    format: int64
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  #
  # Passkey (WebAuthn) endpoints
  #
  /auth/passkeys/register/begin:
    post:
      tags:
        - Passkeys
      summary: Begin passkey registration
      description: Start the process of registering a passkey
      operationId: passkeyRegisterBegin
      security:
        - bearerAuth: []
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                device_name:
                  type: string
                device_type:
                  type: string
      responses:
        '200':
          description: Registration options
          content:
            application/json:
              schema:
                type: object
                properties:
                  options:
                    type: object
                  session_id:
                    type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/passkeys/register/complete:
    post:
      tags:
        - Passkeys
      summary: Complete passkey registration
      description: Complete the process of registering a passkey
      operationId: passkeyRegisterComplete
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - session_id
                - response
              properties:
                session_id:
                  type: string
                response:
                  type: object
                device_name:
                  type: string
                device_type:
                  type: string
      responses:
        '200':
          description: Registration successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisteredPasskey'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/passkeys/login/begin:
    post:
      tags:
        - Passkeys
      summary: Begin passkey login
      description: Start the process of logging in with a passkey
      operationId: passkeyLoginBegin
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties: {}
      responses:
        '200':
          description: Authentication options
          content:
            application/json:
              schema:
                type: object
                properties:
                  options:
                    type: object
                  session_id:
                    type: string
        '400':
          description: No passkeys available
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/passkeys/login/complete:
    post:
      tags:
        - Passkeys
      summary: Complete passkey login
      description: Complete the process of logging in with a passkey
      operationId: passkeyLoginComplete
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - session_id
                - response
              properties:
                session_id:
                  type: string
                response:
                  type: object
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  authenticated:
                    type: boolean
                  user_id:
                    type: string
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/passkeys:
    get:
      tags:
        - Passkeys
      summary: Get user passkeys
      description: Get the list of passkeys for the current user
      operationId: getUserPasskeys
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User passkeys
          content:
            application/json:
              schema:
                type: object
                properties:
                  passkeys:
                    type: array
                    items:
                      $ref: '#/components/schemas/RegisteredPasskey'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/passkeys/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    put:
      tags:
        - Passkeys
      summary: Update passkey
      description: Update a passkey's name
      operationId: updatePasskey
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
      responses:
        '200':
          description: Passkey updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Passkey updated successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Passkey not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - Passkeys
      summary: Delete passkey
      description: Delete a passkey
      operationId: deletePasskey
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Passkey deleted
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Passkey not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  #
  # OAuth2 endpoints
  #
  /auth/oauth/providers:
    get:
      tags:
        - OAuth2
      summary: List OAuth providers
      description: Get the list of available OAuth providers
      operationId: oauthProvidersList
      responses:
        '200':
          description: Available OAuth providers
          content:
            application/json:
              schema:
                type: object
                properties:
                  providers:
                    type: array
                    items:
                      $ref: '#/components/schemas/OAuthProvider'

  /auth/oauth/providers/{provider}:
    parameters:
      - name: provider
        in: path
        required: true
        schema:
          type: string
      - name: redirect_uri
        in: query
        schema:
          type: string
          format: uri
    get:
      tags:
        - OAuth2
      summary: Authenticate with OAuth provider
      description: Start OAuth authentication with a provider
      operationId: oauthProviderAuth
      responses:
        '302':
          description: Redirect to provider
          headers:
            Location:
              schema:
                type: string
                format: uri
        '400':
          description: Invalid provider
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/oauth/callback/{provider}:
    parameters:
      - name: provider
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - OAuth2
      summary: OAuth callback
      description: Handle OAuth callback from a provider
      operationId: oauthProviderCallback
      parameters:
        - name: code
          in: query
          required: true
          schema:
            type: string
        - name: state
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '302':
          description: Redirect to application
          headers:
            Location:
              schema:
                type: string
                format: uri
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/sso/providers:
    get:
      tags:
        - SSO
      summary: List SSO providers
      description: Get the list of available SSO providers
      operationId: ssoProvidersList
      parameters:
        - name: organization_id
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Available SSO providers
          content:
            application/json:
              schema:
                type: object
                properties:
                  providers:
                    type: array
                    items:
                      $ref: '#/components/schemas/SSOProvider'

  /auth/sso/providers/{provider}:
    parameters:
      - name: provider
        in: path
        required: true
        schema:
          type: string
      - name: redirect_uri
        in: query
        schema:
          type: string
          format: uri
    get:
      tags:
        - SSO
      summary: Authenticate with SSO provider
      description: Start SSO authentication with a provider
      operationId: ssoProviderAuth
      responses:
        '302':
          description: Redirect to provider
          headers:
            Location:
              schema:
                type: string
                format: uri
        '400':
          description: Invalid provider
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/sso/callback/{provider}:
    parameters:
      - name: provider
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - SSO
      summary: SSO callback
      description: Handle SSO callback from a provider
      operationId: ssoProviderCallback
      parameters:
        - name: code
          in: query
          schema:
            type: string
        - name: SAMLResponse
          in: query
          schema:
            type: string
        - name: state
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '302':
          description: Redirect to application
          headers:
            Location:
              schema:
                type: string
                format: uri
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  #
  # User management endpoints
  #
  /users/me:
    get:
      tags:
        - Users
      summary: Get current user
      description: Get the profile of the currently logged in user
      operationId: getCurrentUser
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Current user profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - Users
      summary: Update current user
      description: Update the profile of the currently logged in user
      operationId: updateCurrentUser
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                first_name:
                  type: string
                last_name:
                  type: string
                phone_number:
                  type: string
                profile_image_url:
                  type: string
                  format: uri
                locale:
                  type: string
                metadata:
                  type: object
                  additionalProperties: true
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/me/sessions:
    get:
      tags:
        - Session
        - Users
      summary: Get user sessions
      description: Get the active sessions for the current user
      operationId: getUserSessions
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User sessions
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Session'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/me/sessions/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    delete:
      tags:
        - Session
        - Users
      summary: Delete session
      description: Delete a specific session for the current user
      operationId: deleteUserSession
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Session deleted
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  #
  # User management endpoints (admin)
  #
  /users:
    get:
      tags:
        - Users
      summary: List users
      description: List users with pagination and filtering
      operationId: listUsers
      security:
        - bearerAuth: []
      parameters:
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
        - name: search
          in: query
          schema:
            type: string
        - name: organization_id
          in: query
          schema:
            type: string
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  total:
                    type: integer
                  pagination:
                    type: object
                    properties:
                      offset:
                        type: integer
                      limit:
                        type: integer
                      total:
                        type: integer
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Users
      summary: Create user
      description: Create a new user
      operationId: createUser
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
                first_name:
                  type: string
                last_name:
                  type: string
                phone_number:
                  type: string
                profile_image_url:
                  type: string
                  format: uri
                locale:
                  type: string
                metadata:
                  type: object
                  additionalProperties: true
                active:
                  type: boolean
                  default: true
                email_verified:
                  type: boolean
                  default: false
                organization_id:
                  type: string
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Users
      summary: Get user
      description: Get a specific user
      operationId: getUser
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - Users
      summary: Update user
      description: Update a specific user
      operationId: updateUser
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                first_name:
                  type: string
                last_name:
                  type: string
                phone_number:
                  type: string
                profile_image_url:
                  type: string
                  format: uri
                locale:
                  type: string
                metadata:
                  type: object
                  additionalProperties: true
                active:
                  type: boolean
                email_verified:
                  type: boolean
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - Users
      summary: Delete user
      description: Delete a specific user
      operationId: deleteUser
      security:
        - bearerAuth: []
      responses:
        '204':
          description: User deleted
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  #
  # Organization management endpoints
  #
  /organizations:
    get:
      tags:
        - Organizations
      summary: List organizations
      description: List organizations with pagination and filtering
      operationId: listOrganizations
      security:
        - bearerAuth: []
      parameters:
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
        - name: search
          in: query
          schema:
            type: string
      responses:
        '200':
          description: List of organizations
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Organization'
                  total:
                    type: integer
                  pagination:
                    type: object
                    properties:
                      offset:
                        type: integer
                      limit:
                        type: integer
                      total:
                        type: integer
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Organizations
      summary: Create organization
      description: Create a new organization
      operationId: createOrganization
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                slug:
                  type: string
                domain:
                  type: string
                logo_url:
                  type: string
                  format: uri
                plan:
                  type: string
                metadata:
                  type: object
                  additionalProperties: true
                trial_days:
                  type: integer
                  default: 0
                features:
                  type: array
                  items:
                    type: string
      responses:
        '201':
          description: Organization created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Organization already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /organizations/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Organizations
      summary: Get organization
      description: Get a specific organization
      operationId: getOrganization
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Organization details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Organization not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - Organizations
      summary: Update organization
      description: Update a specific organization
      operationId: updateOrganization
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                domain:
                  type: string
                logo_url:
                  type: string
                  format: uri
                plan:
                  type: string
                active:
                  type: boolean
                metadata:
                  type: object
                  additionalProperties: true
      responses:
        '200':
          description: Organization updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Organization not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - Organizations
      summary: Delete organization
      description: Delete a specific organization
      operationId: deleteOrganization
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Organization deleted
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Organization not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /organizations/{id}/members:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Organizations
      summary: List organization members
      description: List members of an organization
      operationId: listOrganizationMembers
      security:
        - bearerAuth: []
      parameters:
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
        - name: search
          in: query
          schema:
            type: string
      responses:
        '200':
          description: List of organization members
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  total:
                    type: integer
                  pagination:
                    type: object
                    properties:
                      offset:
                        type: integer
                      limit:
                        type: integer
                      total:
                        type: integer
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Organization not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Organizations
      summary: Add organization member
      description: Add a user to an organization
      operationId: addOrganizationMember
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - user_id
                - roles
              properties:
                user_id:
                  type: string
                roles:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Member added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Member added successfully
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Organization not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: User is already a member
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /organizations/{id}/members/{userId}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      - name: userId
        in: path
        required: true
        schema:
          type: string
    put:
      tags:
        - Organizations
      summary: Update organization member
      description: Update a member's roles in an organization
      operationId: updateOrganizationMember
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - roles
              properties:
                roles:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Member updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Member updated successfully
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Organization or member not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - Organizations
      summary: Remove organization member
      description: Remove a user from an organization
      operationId: removeOrganizationMember
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Member removed successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Organization or member not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /organizations/{id}/features:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Organizations
      summary: List organization features
      description: List enabled features for an organization
      operationId: listOrganizationFeatures
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of organization features
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Feature'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Organization not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Organizations
      summary: Enable organization feature
      description: Enable a feature for an organization
      operationId: enableOrganizationFeature
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - feature_key
              properties:
                feature_key:
                  type: string
                settings:
                  type: object
                  additionalProperties: true
      responses:
        '200':
          description: Feature enabled successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Feature enabled successfully
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Organization or feature not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /organizations/{id}/features/{featureKey}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      - name: featureKey
        in: path
        required: true
        schema:
          type: string
    delete:
      tags:
        - Organizations
      summary: Disable organization feature
      description: Disable a feature for an organization
      operationId: disableOrganizationFeature
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Feature disabled successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Organization or feature not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  #
  # API Key management endpoints
  #
  /api-keys:
    get:
      tags:
        - API Keys
      summary: List API keys
      description: List API keys with pagination
      operationId: listAPIKeys
      security:
        - bearerAuth: []
      parameters:
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
        - name: type
          in: query
          schema:
            type: string
      responses:
        '200':
          description: List of API keys
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/APIKey'
                  total:
                    type: integer
                  pagination:
                    type: object
                    properties:
                      offset:
                        type: integer
                      limit:
                        type: integer
                      total:
                        type: integer
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - API Keys
      summary: Create API key
      description: Create a new API key
      operationId: createAPIKey
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                type:
                  type: string
                  default: client
                permissions:
                  type: array
                  items:
                    type: string
                scopes:
                  type: array
                  items:
                    type: string
                metadata:
                  type: object
                  additionalProperties: true
                expires_in:
                  type: integer
                  description: Expiration time in seconds
      responses:
        '201':
          description: API key created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIKeyWithKey'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api-keys/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - API Keys
      summary: Get API key
      description: Get a specific API key
      operationId: getAPIKey
      security:
        - bearerAuth: []
      responses:
        '200':
          description: API key details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIKey'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: API key not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - API Keys
      summary: Update API key
      description: Update a specific API key
      operationId: updateAPIKey
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                active:
                  type: boolean
                permissions:
                  type: array
                  items:
                    type: string
                scopes:
                  type: array
                  items:
                    type: string
                metadata:
                  type: object
                  additionalProperties: true
                expires_at:
                  type: string
                  format: date-time
      responses:
        '200':
          description: API key updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIKey'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: API key not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - API Keys
      summary: Delete API key
      description: Delete a specific API key
      operationId: deleteAPIKey
      security:
        - bearerAuth: []
      responses:
        '204':
          description: API key deleted
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: API key not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api-keys/validate:
    post:
      tags:
        - API Keys
      summary: Validate API key
      description: Validate an API key
      operationId: validateAPIKey
      security:
        - apiKeyAuth: []
      responses:
        '200':
          description: API key is valid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIKey'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  #
  # Webhook management endpoints
  #
  /webhooks:
    get:
      tags:
        - Webhooks
      summary: List webhooks
      description: List webhooks with pagination
      operationId: listWebhooks
      security:
        - bearerAuth: []
      parameters:
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
        - name: event_types
          in: query
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: List of webhooks
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Webhook'
                  total:
                    type: integer
                  pagination:
                    type: object
                    properties:
                      offset:
                        type: integer
                      limit:
                        type: integer
                      total:
                        type: integer
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Webhooks
      summary: Create webhook
      description: Create a new webhook
      operationId: createWebhook
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - url
                - event_types
              properties:
                name:
                  type: string
                url:
                  type: string
                  format: uri
                event_types:
                  type: array
                  items:
                    type: string
                retry_count:
                  type: integer
                timeout_ms:
                  type: integer
                format:
                  type: string
                  enum: [json, form]
                  default: json
                metadata:
                  type: object
                  additionalProperties: true
      responses:
        '201':
          description: Webhook created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Webhook'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /webhooks/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Webhooks
      summary: Get webhook
      description: Get a specific webhook
      operationId: getWebhook
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Webhook details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Webhook'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Webhook not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - Webhooks
      summary: Update webhook
      description: Update a specific webhook
      operationId: updateWebhook
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                url:
                  type: string
                  format: uri
                active:
                  type: boolean
                event_types:
                  type: array
                  items:
                    type: string
                retry_count:
                  type: integer
                timeout_ms:
                  type: integer
                format:
                  type: string
                  enum: [json, form]
                metadata:
                  type: object
                  additionalProperties: true
      responses:
        '200':
          description: Webhook updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Webhook'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Webhook not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - Webhooks
      summary: Delete webhook
      description: Delete a specific webhook
      operationId: deleteWebhook
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Webhook deleted
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Webhook not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /webhooks/{id}/events:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Webhooks
      summary: List webhook events
      description: List events for a specific webhook
      operationId: listWebhookEvents
      security:
        - bearerAuth: []
      parameters:
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
        - name: event_type
          in: query
          schema:
            type: string
        - name: delivered
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: List of webhook events
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/WebhookEvent'
                  total:
                    type: integer
                  pagination:
                    type: object
                    properties:
                      offset:
                        type: integer
                      limit:
                        type: integer
                      total:
                        type: integer
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Webhook not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /webhooks/{id}/events/{eventId}/replay:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      - name: eventId
        in: path
        required: true
        schema:
          type: string
    post:
      tags:
        - Webhooks
      summary: Replay webhook event
      description: Replay a specific webhook event
      operationId: replayWebhookEvent
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Event replayed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookEvent'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Webhook or event not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /webhooks/trigger:
    post:
      tags:
        - Webhooks
      summary: Trigger webhook event
      description: Manually trigger a webhook event
      operationId: triggerWebhookEvent
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - event_type
                - payload
              properties:
                event_type:
                  type: string
                payload:
                  type: object
                  additionalProperties: true
                headers:
                  type: object
                  additionalProperties:
                    type: string
      responses:
        '200':
          description: Event triggered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookEvent'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  #
  # OAuth2 provider endpoints
  #
  /oauth2/authorize:
    get:
      tags:
        - OAuth2
      summary: OAuth2 authorization endpoint
      description: Initiates the OAuth2 authorization code flow
      operationId: authorizeOAuth2
      parameters:
        - name: client_id
          in: query
          required: true
          schema:
            type: string
        - name: redirect_uri
          in: query
          required: true
          schema:
            type: string
            format: uri
        - name: response_type
          in: query
          required: true
          schema:
            type: string
            enum: [code]
        - name: scope
          in: query
          schema:
            type: string
        - name: state
          in: query
          schema:
            type: string
        - name: code_challenge
          in: query
          schema:
            type: string
        - name: code_challenge_method
          in: query
          schema:
            type: string
            enum: [plain, S256]
      responses:
        '302':
          description: Redirect to authorization page or redirected to client with code
          headers:
            Location:
              schema:
                type: string
                format: uri
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /oauth2/token:
    post:
      tags:
        - OAuth2
      summary: OAuth2 token endpoint
      description: Exchange authorization code for tokens
      operationId: tokenOAuth2
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - grant_type
              properties:
                grant_type:
                  type: string
                  enum: [authorization_code, refresh_token, client_credentials]
                code:
                  type: string
                redirect_uri:
                  type: string
                  format: uri
                client_id:
                  type: string
                client_secret:
                  type: string
                refresh_token:
                  type: string
                code_verifier:
                  type: string
                scope:
                  type: string
      responses:
        '200':
          description: Token response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Invalid client credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /oauth2/revoke:
    post:
      tags:
        - OAuth2
      summary: OAuth2 token revocation
      description: Revoke an access or refresh token
      operationId: revokeOAuth2
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - token
              properties:
                token:
                  type: string
                token_type_hint:
                  type: string
                  enum: [access_token, refresh_token]
                client_id:
                  type: string
                client_secret:
                  type: string
      responses:
        '200':
          description: Token revoked successfully
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Invalid client credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /oauth2/introspect:
    post:
      tags:
        - OAuth2
      summary: OAuth2 token introspection
      description: Check if a token is valid and get information about it
      operationId: introspectOAuth2
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - token
              properties:
                token:
                  type: string
                token_type_hint:
                  type: string
                  enum: [access_token, refresh_token]
                client_id:
                  type: string
                client_secret:
                  type: string
      responses:
        '200':
          description: Token introspection result
          content:
            application/json:
              schema:
                type: object
                properties:
                  active:
                    type: boolean
                  client_id:
                    type: string
                  scope:
                    type: string
                  sub:
                    type: string
                  exp:
                    type: integer
                  iat:
                    type: integer
                  token_type:
                    type: string
                  organization_id:
                    type: string
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Invalid client credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  #
  # OIDC endpoints
  #
  /oauth2/userinfo:
    get:
      tags:
        - OAuth2
      summary: OpenID Connect userinfo endpoint
      description: Get information about the authenticated user
      operationId: userInfoOAuth2
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfo'
        '401':
          description: Invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /.well-known/openid-configuration:
    get:
      tags:
        - OAuth2
      summary: OpenID Connect configuration
      description: Get the OpenID Connect configuration
      operationId: oidcConfiguration
      responses:
        '200':
          description: OpenID Connect configuration
          content:
            application/json:
              schema:
                type: object
                properties:
                  issuer:
                    type: string
                  authorization_endpoint:
                    type: string
                    format: uri
                  token_endpoint:
                    type: string
                    format: uri
                  userinfo_endpoint:
                    type: string
                    format: uri
                  jwks_uri:
                    type: string
                    format: uri
                  response_types_supported:
                    type: array
                    items:
                      type: string
                  subject_types_supported:
                    type: array
                    items:
                      type: string
                  id_token_signing_alg_values_supported:
                    type: array
                    items:
                      type: string
                  scopes_supported:
                    type: array
                    items:
                      type: string
                  token_endpoint_auth_methods_supported:
                    type: array
                    items:
                      type: string
                  claims_supported:
                    type: array
                    items:
                      type: string

  /.well-known/jwks.json:
    get:
      tags:
        - OAuth2
      summary: JSON Web Key Set
      description: Get the JSON Web Key Set for token verification
      operationId: jwksEndpoint
      responses:
        '200':
          description: JSON Web Key Set
          content:
            application/json:
              schema:
                type: object
                properties:
                  keys:
                    type: array
                    items:
                      type: object

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained from the /auth/login endpoint
    apiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: API key for machine-to-machine authentication

  schemas:
    Error:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: string
            message:
              type: string
            data:
              type: object
              additionalProperties: true

    LoginResponse:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        token:
          type: string
          description: JWT access token
        refresh_token:
          type: string
        expires_at:
          type: integer
          format: int64
        mfa_required:
          type: boolean
        mfa_types:
          type: array
          items:
            type: string

    User:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
          format: email
        first_name:
          type: string
        last_name:
          type: string
        phone_number:
          type: string
        profile_image_url:
          type: string
          format: uri
        locale:
          type: string
        email_verified:
          type: boolean
        active:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        metadata:
          type: object
          additionalProperties: true
        last_login_at:
          type: string
          format: date-time

    Organization:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        slug:
          type: string
        domain:
          type: string
        logo_url:
          type: string
          format: uri
        plan:
          type: string
        active:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        metadata:
          type: object
          additionalProperties: true
        owner_id:
          type: string

    Feature:
      type: object
      properties:
        key:
          type: string
        name:
          type: string
        description:
          type: string
        enabled:
          type: boolean
        settings:
          type: object
          additionalProperties: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    APIKey:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        type:
          type: string
        user_id:
          type: string
        organization_id:
          type: string
        active:
          type: boolean
        permissions:
          type: array
          items:
            type: string
        scopes:
          type: array
          items:
            type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        expires_at:
          type: string
          format: date-time
        last_used:
          type: string
          format: date-time
        metadata:
          type: object
          additionalProperties: true

    APIKeyWithKey:
      type: object
      properties:
        api_key:
          $ref: '#/components/schemas/APIKey'
        key:
          type: string
          description: The plaintext API key (only shown once at creation)

    Session:
      type: object
      properties:
        id:
          type: string
        user_id:
          type: string
        ip_address:
          type: string
        user_agent:
          type: string
        device_id:
          type: string
        location:
          type: string
        organization_id:
          type: string
        expires_at:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
        last_active_at:
          type: string
          format: date-time
        is_active:
          type: boolean

    Webhook:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        url:
          type: string
          format: uri
        event_types:
          type: array
          items:
            type: string
        active:
          type: boolean
        secret:
          type: string
        retry_count:
          type: integer
        timeout_ms:
          type: integer
        format:
          type: string
          enum: [json, form]
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        organization_id:
          type: string
        metadata:
          type: object
          additionalProperties: true

    WebhookEvent:
      type: object
      properties:
        id:
          type: string
        webhook_id:
          type: string
        event_type:
          type: string
        payload:
          type: object
          additionalProperties: true
        delivered:
          type: boolean
        status_code:
          type: integer
        attempts:
          type: integer
        last_attempt_at:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
        response:
          type: string
        error:
          type: string

    RegisteredPasskey:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        device_type:
          type: string
        registered_at:
          type: string
          format: date-time
        last_used:
          type: string
          format: date-time

    OAuthProvider:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        type:
          type: string
        logo_url:
          type: string
          format: uri

    SSOProvider:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        type:
          type: string
          enum: [saml, oidc]
        logo_url:
          type: string
          format: uri
        domains:
          type: array
          items:
            type: string
        organization_id:
          type: string

    TokenResponse:
      type: object
      properties:
        access_token:
          type: string
        token_type:
          type: string
          default: Bearer
        expires_in:
          type: integer
        refresh_token:
          type: string
        scope:
          type: string
        id_token:
          type: string

    UserInfo:
      type: object
      properties:
        sub:
          type: string
        email:
          type: string
          format: email
        email_verified:
          type: boolean
        name:
          type: string
        given_name:
          type: string
        family_name:
          type: string
        picture:
          type: string
          format: uri
        locale:
          type: string