{
    "schemes": [
        "http"
    ],
    "swagger": "2.0",
    "info": {
        "description": "This is a sample server using Chi router with Swagger documentation.",
        "title": "Frank API with Swagger",
        "contact": {},
        "version": "1.0"
    },
    "host": "localhost:8080",
    "basePath": "/",
    "paths": {
        "/.well-known/jwks.json": {
            "get": {
                "description": "Returns the JSON Web Key Set (JWKS) for token verification.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OAuth2"
                ],
                "summary": "JWKS Endpoint",
                "responses": {
                    "200": {
                        "description": "JWKS response",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/.well-known/openid-configuration": {
            "get": {
                "description": "Provides the OpenID Connect well-known configuration.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OAuth2"
                ],
                "summary": "OpenID Connect Configuration",
                "responses": {
                    "200": {
                        "description": "OpenID Connect configuration",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/__health": {
            "get": {
                "description": "Returns the health status of the application and its services",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Health"
                ],
                "summary": "Perform health check",
                "responses": {
                    "200": {
                        "description": "Healthy status",
                        "schema": {
                            "$ref": "#/definitions/internal_handlers.HealthResponse"
                        }
                    },
                    "503": {
                        "description": "Unhealthy status",
                        "schema": {
                            "$ref": "#/definitions/internal_handlers.HealthResponse"
                        }
                    }
                }
            }
        },
        "/__ready": {
            "post": {
                "description": "Indicates if the application is ready to receive traffic",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Readiness"
                ],
                "summary": "Perform readiness check",
                "responses": {
                    "200": {
                        "description": "Ready status",
                        "schema": {
                            "$ref": "#/definitions/internal_handlers.HealthResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/forgot-password": {
            "post": {
                "description": "Initiates the password reset process for a user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Request password reset",
                "parameters": [
                    {
                        "description": "User email",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_handlers.ForgotPasswordInput"
                        }
                    },
                    {
                        "type": "string",
                        "description": "URL to redirect to after password reset",
                        "name": "redirect_url",
                        "in": "query"
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Password reset initiated",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/FrankError"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/login": {
            "post": {
                "description": "Logs in a user with email and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Authenticate a user",
                "parameters": [
                    {
                        "description": "Login credentials",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_handlers.LoginInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login successful",
                        "schema": {
                            "$ref": "#/definitions/internal_handlers.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/FrankError"
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "schema": {
                            "$ref": "#/definitions/FrankError"
                        }
                    },
                    "403": {
                        "description": "Email not verified",
                        "schema": {
                            "$ref": "#/definitions/FrankError"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/logout": {
            "post": {
                "description": "Logs out the current user and invalidates their session",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Log out a user",
                "responses": {
                    "200": {
                        "description": "Logout successful",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/auth/mfa/enroll": {
            "post": {
                "description": "Enrolls the user in the specified MFA method",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth",
                    "MFA"
                ],
                "summary": "Enroll in MFA",
                "parameters": [
                    {
                        "description": "MFAEnrollRequest",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_handlers.MFAEnrollRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Response for enabling SMS/Email/Backup Codes",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/FrankError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/FrankError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/FrankError"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/mfa/methods": {
            "get": {
                "description": "Retrieves a list of enabled multi-factor authentication methods for the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth",
                    "MFA"
                ],
                "summary": "Retrieve enabled MFA methods",
                "responses": {
                    "200": {
                        "description": "Enabled MFA methods",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid input or missing required field",
                        "schema": {
                            "$ref": "#/definitions/FrankError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/FrankError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/FrankError"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/mfa/send-code": {
            "post": {
                "description": "Sends a verification code to the user for the specified MFA method",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth",
                    "MFA"
                ],
                "summary": "Send MFA Verification Code",
                "parameters": [
                    {
                        "description": "Input for specifying MFA method",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_handlers.MFAUnEnrollInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success message and expiration time",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid input or missing required field",
                        "schema": {
                            "$ref": "#/definitions/FrankError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/FrankError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/FrankError"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/mfa/unenroll": {
            "post": {
                "description": "Disables a specific MFA method or all methods for the user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth",
                    "MFA"
                ],
                "summary": "Unenroll from MFA",
                "parameters": [
                    {
                        "description": "Input for disabled MFA method",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_handlers.MFAUnEnrollInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success response with message",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid input or missing required field",
                        "schema": {
                            "$ref": "#/definitions/FrankError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/FrankError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/FrankError"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/mfa/verify": {
            "post": {
                "description": "Verifies a MFA code for the user using the specified method",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth",
                    "MFA"
                ],
                "summary": "Verify MFA",
                "parameters": [
                    {
                        "description": "MFAVerifyRequest",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_handlers.MFAVerifyRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/FrankError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/FrankError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/FrankError"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/refresh": {
            "post": {
                "description": "Generates a new access token using a refresh token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Refresh access token",
                "parameters": [
                    {
                        "description": "Refresh token",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_handlers.RefreshTokenInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Token refresh successful",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/FrankError"
                        }
                    },
                    "401": {
                        "description": "Invalid refresh token",
                        "schema": {
                            "$ref": "#/definitions/FrankError"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/register": {
            "post": {
                "description": "Creates a new user account",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "Registration information",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_handlers.RegisterInput"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Registration successful",
                        "schema": {
                            "$ref": "#/definitions/internal_handlers.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/FrankError"
                        }
                    },
                    "409": {
                        "description": "Email already exists",
                        "schema": {
                            "$ref": "#/definitions/FrankError"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/reset-password": {
            "post": {
                "description": "Resets a user's password using a token received by email",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Reset password",
                "parameters": [
                    {
                        "description": "Reset password information",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_handlers.ResetPasswordInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password reset successful",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/FrankError"
                        }
                    },
                    "401": {
                        "description": "Invalid token",
                        "schema": {
                            "$ref": "#/definitions/FrankError"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/verify-email": {
            "post": {
                "description": "Verifies a user's email address using a token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Verify email",
                "parameters": [
                    {
                        "description": "Email verification token",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_handlers.VerifyEmailInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Email verification successful",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/FrankError"
                        }
                    },
                    "401": {
                        "description": "Invalid token",
                        "schema": {
                            "$ref": "#/definitions/FrankError"
                        }
                    }
                }
            }
        },
        "/api/v1/organizations": {
            "get": {
                "description": "Get a paginated list of organizations with optional search",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "organizations"
                ],
                "summary": "List organizations",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "Pagination offset",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 20,
                        "description": "Pagination limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search term",
                        "name": "search",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns organizations with pagination",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new organization with the provided details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "organizations"
                ],
                "summary": "Create an organization",
                "parameters": [
                    {
                        "description": "Create organization payload",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_handlers.CreateOrganizationRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Returns the created organization",
                        "schema": {
                            "$ref": "#/definitions/internal_handlers.Organization"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/organizations/{id}": {
            "get": {
                "description": "Retrieve an organization by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "organizations"
                ],
                "summary": "Get an organization",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Organization ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns the organization",
                        "schema": {
                            "$ref": "#/definitions/internal_handlers.Organization"
                        }
                    },
                    "400": {
                        "description": "Invalid organization ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Organization not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "put": {
                "description": "Update an organization's details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "organizations"
                ],
                "summary": "Update an organization",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Organization ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update organization payload",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_handlers.UpdateOrganizationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns the updated organization",
                        "schema": {
                            "$ref": "#/definitions/internal_handlers.Organization"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Organization not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete an organization by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "organizations"
                ],
                "summary": "Delete an organization",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Organization ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Invalid organization ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Organization not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/organizations/{id}/members": {
            "get": {
                "description": "Get a list of members for a specific organization",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "organizations"
                ],
                "summary": "List organization members",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Organization ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "Pagination offset",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 20,
                        "description": "Pagination limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search term",
                        "name": "search",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns the list of members with pagination",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid organization ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Organization not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/oauth/auth/{provider}": {
            "get": {
                "description": "This endpoint initiates OAuth authentication with a configured provider.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OAuth2"
                ],
                "summary": "Initiate OAuth Authentication",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"google\"",
                        "description": "OAuth Provider",
                        "name": "provider",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "\"https://your-app.com/oauth/callback\"",
                        "description": "Redirect URI",
                        "name": "redirect_uri",
                        "in": "query"
                    }
                ],
                "responses": {
                    "302": {
                        "description": "Redirects to the provider login",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/oauth/authorize": {
            "get": {
                "description": "This endpoint handles OAuth2 authorization. It can act as both a provider (to authorize third-party clients) or as a client (to redirect users to third-party providers).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OAuth2"
                ],
                "summary": "OAuth2 Authorization",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"google\"",
                        "description": "OAuth Provider",
                        "name": "provider",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "\"https://your-app.com/oauth/callback\"",
                        "description": "Redirect URI",
                        "name": "redirect_uri",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully handled OAuth2 authorization",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/oauth/callback/{provider}": {
            "get": {
                "description": "Handles the callback from the OAuth provider after user authentication.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OAuth2"
                ],
                "summary": "Handle OAuth Callback",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"google\"",
                        "description": "OAuth Provider",
                        "name": "provider",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "\"12345\"",
                        "description": "Authorization Code",
                        "name": "code",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "\"state_token\"",
                        "description": "OAuth State",
                        "name": "state",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "302": {
                        "description": "Redirects to the client application",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/oauth/consent": {
            "post": {
                "description": "Handles user consent for OAuth2 authorization.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OAuth2"
                ],
                "summary": "Handle OAuth2 Consent",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Client ID of the requesting application",
                        "name": "client_id",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Scopes being requested, separated by spaces",
                        "name": "scope",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "State parameter to maintain state between request and callback",
                        "name": "state",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Redirect URI to redirect the user after consent",
                        "name": "redirect_uri",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Consent granted",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/oauth/introspect": {
            "post": {
                "description": "Handles the OAuth2 token introspection endpoint to validate and retrieve metadata about an access token.",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OAuth2"
                ],
                "summary": "OAuth2 Token Introspection",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Access Token to introspect",
                        "name": "token",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Token introspection result",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/oauth/providers": {
            "get": {
                "description": "This endpoint lists the available OAuth2 providers.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OAuth2"
                ],
                "summary": "List OAuth2 Providers",
                "responses": {
                    "200": {
                        "description": "List of configured providers",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/oauth/revoke": {
            "post": {
                "description": "Handles the OAuth2 token revocation endpoint to revoke an access token.",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OAuth2"
                ],
                "summary": "OAuth2 Token Revocation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Access Token to revoke",
                        "name": "token",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Token revocation successful",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/oauth/token": {
            "post": {
                "description": "Handles the OAuth2 token endpoint for token exchange.",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OAuth2"
                ],
                "summary": "OAuth2 Token",
                "parameters": [
                    {
                        "enum": [
                            "\"authorization_code\"",
                            "\"client_credentials\"",
                            "\"refresh_token\"",
                            "\"password\""
                        ],
                        "type": "string",
                        "description": "Grant type",
                        "name": "grant_type",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Client ID",
                        "name": "client_id",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Client Secret",
                        "name": "client_secret",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Authorization code (required for authorization_code grant type)",
                        "name": "code",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Refresh token (required for refresh_token grant type)",
                        "name": "refresh_token",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Redirect URI",
                        "name": "redirect_uri",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Token response",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/oauth/userinfo": {
            "get": {
                "description": "Retrieves user information based on the provided access token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OAuth2"
                ],
                "summary": "OAuth2 UserInfo",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer {access_token}",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Userinfo response",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "FrankError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "data": {
                    "type": "object",
                    "additionalProperties": true
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "ent.ApiKey": {
            "type": "object",
            "properties": {
                "active": {
                    "description": "Active holds the value of the \"active\" field.",
                    "type": "boolean"
                },
                "created_at": {
                    "description": "CreatedAt holds the value of the \"created_at\" field.",
                    "type": "string"
                },
                "edges": {
                    "description": "Edges holds the relations/edges for other nodes in the graph.\nThe values are being populated by the ApiKeyQuery when eager-loading is set.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ent.ApiKeyEdges"
                        }
                    ]
                },
                "expires_at": {
                    "description": "ExpiresAt holds the value of the \"expires_at\" field.",
                    "type": "string"
                },
                "hashed_key": {
                    "description": "HashedKey holds the value of the \"hashed_key\" field.",
                    "type": "string"
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "string"
                },
                "last_used": {
                    "description": "LastUsed holds the value of the \"last_used\" field.",
                    "type": "string"
                },
                "metadata": {
                    "description": "Metadata holds the value of the \"metadata\" field.",
                    "type": "object",
                    "additionalProperties": true
                },
                "name": {
                    "description": "Name holds the value of the \"name\" field.",
                    "type": "string"
                },
                "organization_id": {
                    "description": "OrganizationID holds the value of the \"organization_id\" field.",
                    "type": "string"
                },
                "permissions": {
                    "description": "Permissions holds the value of the \"permissions\" field.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "scopes": {
                    "description": "Scopes holds the value of the \"scopes\" field.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "type": {
                    "description": "Type holds the value of the \"type\" field.",
                    "type": "string"
                },
                "updated_at": {
                    "description": "UpdatedAt holds the value of the \"updated_at\" field.",
                    "type": "string"
                },
                "user_id": {
                    "description": "UserID holds the value of the \"user_id\" field.",
                    "type": "string"
                }
            }
        },
        "ent.ApiKeyEdges": {
            "type": "object",
            "properties": {
                "organization": {
                    "description": "Organization holds the value of the organization edge.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ent.Organization"
                        }
                    ]
                },
                "user": {
                    "description": "User holds the value of the user edge.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ent.User"
                        }
                    ]
                }
            }
        },
        "ent.FeatureFlag": {
            "type": "object",
            "properties": {
                "component": {
                    "description": "Which component of the auth system this feature belongs to",
                    "allOf": [
                        {
                            "$ref": "#/definitions/github_com_juicycleff_frank_ent_featureflag.Component"
                        }
                    ]
                },
                "created_at": {
                    "description": "CreatedAt holds the value of the \"created_at\" field.",
                    "type": "string"
                },
                "description": {
                    "description": "Description holds the value of the \"description\" field.",
                    "type": "string"
                },
                "edges": {
                    "description": "Edges holds the relations/edges for other nodes in the graph.\nThe values are being populated by the FeatureFlagQuery when eager-loading is set.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ent.FeatureFlagEdges"
                        }
                    ]
                },
                "enabled": {
                    "description": "Enabled holds the value of the \"enabled\" field.",
                    "type": "boolean"
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "string"
                },
                "is_premium": {
                    "description": "Whether this feature is only available for premium plans",
                    "type": "boolean"
                },
                "key": {
                    "description": "Key holds the value of the \"key\" field.",
                    "type": "string"
                },
                "name": {
                    "description": "Name holds the value of the \"name\" field.",
                    "type": "string"
                },
                "updated_at": {
                    "description": "UpdatedAt holds the value of the \"updated_at\" field.",
                    "type": "string"
                }
            }
        },
        "ent.FeatureFlagEdges": {
            "type": "object",
            "properties": {
                "organizations": {
                    "description": "Organizations holds the value of the organizations edge.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ent.OrganizationFeature"
                    }
                }
            }
        },
        "ent.IdentityProvider": {
            "type": "object",
            "properties": {
                "active": {
                    "description": "Active holds the value of the \"active\" field.",
                    "type": "boolean"
                },
                "attributes_mapping": {
                    "description": "AttributesMapping holds the value of the \"attributes_mapping\" field.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "authorization_endpoint": {
                    "description": "AuthorizationEndpoint holds the value of the \"authorization_endpoint\" field.",
                    "type": "string"
                },
                "client_id": {
                    "description": "ClientID holds the value of the \"client_id\" field.",
                    "type": "string"
                },
                "created_at": {
                    "description": "CreatedAt holds the value of the \"created_at\" field.",
                    "type": "string"
                },
                "domains": {
                    "description": "Domains holds the value of the \"domains\" field.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "edges": {
                    "description": "Edges holds the relations/edges for other nodes in the graph.\nThe values are being populated by the IdentityProviderQuery when eager-loading is set.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ent.IdentityProviderEdges"
                        }
                    ]
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "string"
                },
                "issuer": {
                    "description": "Issuer holds the value of the \"issuer\" field.",
                    "type": "string"
                },
                "jwks_uri": {
                    "description": "JwksURI holds the value of the \"jwks_uri\" field.",
                    "type": "string"
                },
                "metadata": {
                    "description": "Metadata holds the value of the \"metadata\" field.",
                    "type": "object",
                    "additionalProperties": true
                },
                "metadata_url": {
                    "description": "MetadataURL holds the value of the \"metadata_url\" field.",
                    "type": "string"
                },
                "name": {
                    "description": "Name holds the value of the \"name\" field.",
                    "type": "string"
                },
                "organization_id": {
                    "description": "OrganizationID holds the value of the \"organization_id\" field.",
                    "type": "string"
                },
                "primary": {
                    "description": "Primary holds the value of the \"primary\" field.",
                    "type": "boolean"
                },
                "provider_type": {
                    "description": "Type of IdP: 'oauth2', 'oidc', 'saml'",
                    "type": "string"
                },
                "redirect_uri": {
                    "description": "RedirectURI holds the value of the \"redirect_uri\" field.",
                    "type": "string"
                },
                "token_endpoint": {
                    "description": "TokenEndpoint holds the value of the \"token_endpoint\" field.",
                    "type": "string"
                },
                "updated_at": {
                    "description": "UpdatedAt holds the value of the \"updated_at\" field.",
                    "type": "string"
                },
                "userinfo_endpoint": {
                    "description": "UserinfoEndpoint holds the value of the \"userinfo_endpoint\" field.",
                    "type": "string"
                }
            }
        },
        "ent.IdentityProviderEdges": {
            "type": "object",
            "properties": {
                "organization": {
                    "description": "Organization holds the value of the organization edge.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ent.Organization"
                        }
                    ]
                }
            }
        },
        "ent.MFA": {
            "type": "object",
            "properties": {
                "active": {
                    "description": "Active holds the value of the \"active\" field.",
                    "type": "boolean"
                },
                "backup_codes": {
                    "description": "BackupCodes holds the value of the \"backup_codes\" field.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "created_at": {
                    "description": "CreatedAt holds the value of the \"created_at\" field.",
                    "type": "string"
                },
                "edges": {
                    "description": "Edges holds the relations/edges for other nodes in the graph.\nThe values are being populated by the MFAQuery when eager-loading is set.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ent.MFAEdges"
                        }
                    ]
                },
                "email": {
                    "description": "Email holds the value of the \"email\" field.",
                    "type": "string"
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "string"
                },
                "last_used": {
                    "description": "LastUsed holds the value of the \"last_used\" field.",
                    "type": "string"
                },
                "metadata": {
                    "description": "Metadata holds the value of the \"metadata\" field.",
                    "type": "object",
                    "additionalProperties": true
                },
                "method": {
                    "description": "The MFA method type: 'totp', 'sms', 'email', 'backup_codes'",
                    "type": "string"
                },
                "phone_number": {
                    "description": "PhoneNumber holds the value of the \"phone_number\" field.",
                    "type": "string"
                },
                "updated_at": {
                    "description": "UpdatedAt holds the value of the \"updated_at\" field.",
                    "type": "string"
                },
                "user_id": {
                    "description": "UserID holds the value of the \"user_id\" field.",
                    "type": "string"
                },
                "verified": {
                    "description": "Verified holds the value of the \"verified\" field.",
                    "type": "boolean"
                }
            }
        },
        "ent.MFAEdges": {
            "type": "object",
            "properties": {
                "user": {
                    "description": "User holds the value of the user edge.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ent.User"
                        }
                    ]
                }
            }
        },
        "ent.OAuthAuthorization": {
            "type": "object",
            "properties": {
                "client_id": {
                    "description": "ClientID holds the value of the \"client_id\" field.",
                    "type": "string"
                },
                "code_challenge": {
                    "description": "CodeChallenge holds the value of the \"code_challenge\" field.",
                    "type": "string"
                },
                "code_challenge_method": {
                    "description": "CodeChallengeMethod holds the value of the \"code_challenge_method\" field.",
                    "type": "string"
                },
                "created_at": {
                    "description": "CreatedAt holds the value of the \"created_at\" field.",
                    "type": "string"
                },
                "edges": {
                    "description": "Edges holds the relations/edges for other nodes in the graph.\nThe values are being populated by the OAuthAuthorizationQuery when eager-loading is set.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ent.OAuthAuthorizationEdges"
                        }
                    ]
                },
                "expires_at": {
                    "description": "ExpiresAt holds the value of the \"expires_at\" field.",
                    "type": "string"
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "string"
                },
                "nonce": {
                    "description": "Nonce holds the value of the \"nonce\" field.",
                    "type": "string"
                },
                "organization_id": {
                    "description": "OrganizationID holds the value of the \"organization_id\" field.",
                    "type": "string"
                },
                "redirect_uri": {
                    "description": "RedirectURI holds the value of the \"redirect_uri\" field.",
                    "type": "string"
                },
                "scope_names": {
                    "description": "Scope names as strings for quick access",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "state": {
                    "description": "State holds the value of the \"state\" field.",
                    "type": "string"
                },
                "updated_at": {
                    "description": "UpdatedAt holds the value of the \"updated_at\" field.",
                    "type": "string"
                },
                "used": {
                    "description": "Used holds the value of the \"used\" field.",
                    "type": "boolean"
                },
                "used_at": {
                    "description": "UsedAt holds the value of the \"used_at\" field.",
                    "type": "string"
                },
                "user_id": {
                    "description": "UserID holds the value of the \"user_id\" field.",
                    "type": "string"
                }
            }
        },
        "ent.OAuthAuthorizationEdges": {
            "type": "object",
            "properties": {
                "client": {
                    "description": "Client holds the value of the client edge.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ent.OAuthClient"
                        }
                    ]
                },
                "scopes": {
                    "description": "Scopes holds the value of the scopes edge.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ent.OAuthScope"
                    }
                },
                "user": {
                    "description": "User holds the value of the user edge.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ent.User"
                        }
                    ]
                }
            }
        },
        "ent.OAuthClient": {
            "type": "object",
            "properties": {
                "active": {
                    "description": "Active holds the value of the \"active\" field.",
                    "type": "boolean"
                },
                "allowed_cors_origins": {
                    "description": "AllowedCorsOrigins holds the value of the \"allowed_cors_origins\" field.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "allowed_grant_types": {
                    "description": "AllowedGrantTypes holds the value of the \"allowed_grant_types\" field.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "auth_code_expiry_seconds": {
                    "description": "AuthCodeExpirySeconds holds the value of the \"auth_code_expiry_seconds\" field.",
                    "type": "integer"
                },
                "client_description": {
                    "description": "ClientDescription holds the value of the \"client_description\" field.",
                    "type": "string"
                },
                "client_id": {
                    "description": "ClientID holds the value of the \"client_id\" field.",
                    "type": "string"
                },
                "client_name": {
                    "description": "ClientName holds the value of the \"client_name\" field.",
                    "type": "string"
                },
                "client_uri": {
                    "description": "ClientURI holds the value of the \"client_uri\" field.",
                    "type": "string"
                },
                "created_at": {
                    "description": "CreatedAt holds the value of the \"created_at\" field.",
                    "type": "string"
                },
                "edges": {
                    "description": "Edges holds the relations/edges for other nodes in the graph.\nThe values are being populated by the OAuthClientQuery when eager-loading is set.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ent.OAuthClientEdges"
                        }
                    ]
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "string"
                },
                "logo_uri": {
                    "description": "LogoURI holds the value of the \"logo_uri\" field.",
                    "type": "string"
                },
                "organization_id": {
                    "description": "OrganizationID holds the value of the \"organization_id\" field.",
                    "type": "string"
                },
                "post_logout_redirect_uris": {
                    "description": "PostLogoutRedirectUris holds the value of the \"post_logout_redirect_uris\" field.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "public": {
                    "description": "Public clients operate without a client secret",
                    "type": "boolean"
                },
                "redirect_uris": {
                    "description": "RedirectUris holds the value of the \"redirect_uris\" field.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "refresh_token_expiry_seconds": {
                    "description": "RefreshTokenExpirySeconds holds the value of the \"refresh_token_expiry_seconds\" field.",
                    "type": "integer"
                },
                "requires_consent": {
                    "description": "Require user consent before authorization",
                    "type": "boolean"
                },
                "requires_pkce": {
                    "description": "Enforce PKCE (Proof Key for Code Exchange)",
                    "type": "boolean"
                },
                "token_expiry_seconds": {
                    "description": "TokenExpirySeconds holds the value of the \"token_expiry_seconds\" field.",
                    "type": "integer"
                },
                "updated_at": {
                    "description": "UpdatedAt holds the value of the \"updated_at\" field.",
                    "type": "string"
                }
            }
        },
        "ent.OAuthClientEdges": {
            "type": "object",
            "properties": {
                "authorizations": {
                    "description": "Authorizations holds the value of the authorizations edge.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ent.OAuthAuthorization"
                    }
                },
                "organization": {
                    "description": "Organization holds the value of the organization edge.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ent.Organization"
                        }
                    ]
                },
                "scopes": {
                    "description": "Scopes holds the value of the scopes edge.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ent.OAuthScope"
                    }
                },
                "tokens": {
                    "description": "Tokens holds the value of the tokens edge.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ent.OAuthToken"
                    }
                }
            }
        },
        "ent.OAuthScope": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "CreatedAt holds the value of the \"created_at\" field.",
                    "type": "string"
                },
                "default_scope": {
                    "description": "Whether this scope is included by default",
                    "type": "boolean"
                },
                "description": {
                    "description": "Description holds the value of the \"description\" field.",
                    "type": "string"
                },
                "edges": {
                    "description": "Edges holds the relations/edges for other nodes in the graph.\nThe values are being populated by the OAuthScopeQuery when eager-loading is set.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ent.OAuthScopeEdges"
                        }
                    ]
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "string"
                },
                "name": {
                    "description": "Name holds the value of the \"name\" field.",
                    "type": "string"
                },
                "public": {
                    "description": "Whether this scope can be requested by any client",
                    "type": "boolean"
                },
                "updated_at": {
                    "description": "UpdatedAt holds the value of the \"updated_at\" field.",
                    "type": "string"
                }
            }
        },
        "ent.OAuthScopeEdges": {
            "type": "object",
            "properties": {
                "authorizations": {
                    "description": "Authorizations holds the value of the authorizations edge.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ent.OAuthAuthorization"
                    }
                },
                "clients": {
                    "description": "Clients holds the value of the clients edge.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ent.OAuthClient"
                    }
                },
                "tokens": {
                    "description": "Tokens holds the value of the tokens edge.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ent.OAuthToken"
                    }
                }
            }
        },
        "ent.OAuthToken": {
            "type": "object",
            "properties": {
                "client_id": {
                    "description": "ClientID holds the value of the \"client_id\" field.",
                    "type": "string"
                },
                "created_at": {
                    "description": "CreatedAt holds the value of the \"created_at\" field.",
                    "type": "string"
                },
                "edges": {
                    "description": "Edges holds the relations/edges for other nodes in the graph.\nThe values are being populated by the OAuthTokenQuery when eager-loading is set.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ent.OAuthTokenEdges"
                        }
                    ]
                },
                "expires_at": {
                    "description": "ExpiresAt holds the value of the \"expires_at\" field.",
                    "type": "string"
                },
                "expires_in": {
                    "description": "ExpiresIn holds the value of the \"expires_in\" field.",
                    "type": "integer"
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "string"
                },
                "ip_address": {
                    "description": "IPAddress holds the value of the \"ip_address\" field.",
                    "type": "string"
                },
                "organization_id": {
                    "description": "OrganizationID holds the value of the \"organization_id\" field.",
                    "type": "string"
                },
                "refresh_token_expires_at": {
                    "description": "RefreshTokenExpiresAt holds the value of the \"refresh_token_expires_at\" field.",
                    "type": "string"
                },
                "revoked": {
                    "description": "Revoked holds the value of the \"revoked\" field.",
                    "type": "boolean"
                },
                "revoked_at": {
                    "description": "RevokedAt holds the value of the \"revoked_at\" field.",
                    "type": "string"
                },
                "scope_names": {
                    "description": "Scope names as strings for quick access",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "token_type": {
                    "description": "TokenType holds the value of the \"token_type\" field.",
                    "type": "string"
                },
                "updated_at": {
                    "description": "UpdatedAt holds the value of the \"updated_at\" field.",
                    "type": "string"
                },
                "user_agent": {
                    "description": "UserAgent holds the value of the \"user_agent\" field.",
                    "type": "string"
                },
                "user_id": {
                    "description": "UserID holds the value of the \"user_id\" field.",
                    "type": "string"
                }
            }
        },
        "ent.OAuthTokenEdges": {
            "type": "object",
            "properties": {
                "client": {
                    "description": "Client holds the value of the client edge.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ent.OAuthClient"
                        }
                    ]
                },
                "scopes": {
                    "description": "Scopes holds the value of the scopes edge.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ent.OAuthScope"
                    }
                },
                "user": {
                    "description": "User holds the value of the user edge.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ent.User"
                        }
                    ]
                }
            }
        },
        "ent.Organization": {
            "type": "object",
            "properties": {
                "active": {
                    "description": "Active holds the value of the \"active\" field.",
                    "type": "boolean"
                },
                "created_at": {
                    "description": "CreatedAt holds the value of the \"created_at\" field.",
                    "type": "string"
                },
                "domain": {
                    "description": "Domain holds the value of the \"domain\" field.",
                    "type": "string"
                },
                "edges": {
                    "description": "Edges holds the relations/edges for other nodes in the graph.\nThe values are being populated by the OrganizationQuery when eager-loading is set.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ent.OrganizationEdges"
                        }
                    ]
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "string"
                },
                "logo_url": {
                    "description": "LogoURL holds the value of the \"logo_url\" field.",
                    "type": "string"
                },
                "metadata": {
                    "description": "Metadata holds the value of the \"metadata\" field.",
                    "type": "object",
                    "additionalProperties": true
                },
                "name": {
                    "description": "Name holds the value of the \"name\" field.",
                    "type": "string"
                },
                "plan": {
                    "description": "Plan holds the value of the \"plan\" field.",
                    "type": "string"
                },
                "slug": {
                    "description": "Slug holds the value of the \"slug\" field.",
                    "type": "string"
                },
                "trial_ends_at": {
                    "description": "TrialEndsAt holds the value of the \"trial_ends_at\" field.",
                    "type": "string"
                },
                "trial_used": {
                    "description": "TrialUsed holds the value of the \"trial_used\" field.",
                    "type": "boolean"
                },
                "updated_at": {
                    "description": "UpdatedAt holds the value of the \"updated_at\" field.",
                    "type": "string"
                }
            }
        },
        "ent.OrganizationEdges": {
            "type": "object",
            "properties": {
                "api_keys": {
                    "description": "APIKeys holds the value of the api_keys edge.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ent.ApiKey"
                    }
                },
                "feature_flags": {
                    "description": "FeatureFlags holds the value of the feature_flags edge.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ent.OrganizationFeature"
                    }
                },
                "identity_providers": {
                    "description": "IdentityProviders holds the value of the identity_providers edge.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ent.IdentityProvider"
                    }
                },
                "oauth_clients": {
                    "description": "OauthClients holds the value of the oauth_clients edge.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ent.OAuthClient"
                    }
                },
                "users": {
                    "description": "Users holds the value of the users edge.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ent.User"
                    }
                },
                "webhooks": {
                    "description": "Webhooks holds the value of the webhooks edge.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ent.Webhook"
                    }
                }
            }
        },
        "ent.OrganizationFeature": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "CreatedAt holds the value of the \"created_at\" field.",
                    "type": "string"
                },
                "edges": {
                    "description": "Edges holds the relations/edges for other nodes in the graph.\nThe values are being populated by the OrganizationFeatureQuery when eager-loading is set.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ent.OrganizationFeatureEdges"
                        }
                    ]
                },
                "enabled": {
                    "description": "Enabled holds the value of the \"enabled\" field.",
                    "type": "boolean"
                },
                "feature_id": {
                    "description": "FeatureID holds the value of the \"feature_id\" field.",
                    "type": "string"
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "string"
                },
                "organization_id": {
                    "description": "OrganizationID holds the value of the \"organization_id\" field.",
                    "type": "string"
                },
                "settings": {
                    "description": "Custom settings for this feature in this organization",
                    "type": "object",
                    "additionalProperties": true
                },
                "updated_at": {
                    "description": "UpdatedAt holds the value of the \"updated_at\" field.",
                    "type": "string"
                }
            }
        },
        "ent.OrganizationFeatureEdges": {
            "type": "object",
            "properties": {
                "feature": {
                    "description": "Feature holds the value of the feature edge.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ent.FeatureFlag"
                        }
                    ]
                },
                "organization": {
                    "description": "Organization holds the value of the organization edge.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ent.Organization"
                        }
                    ]
                }
            }
        },
        "ent.Passkey": {
            "type": "object",
            "properties": {
                "aaguid": {
                    "description": "Aaguid holds the value of the \"aaguid\" field.",
                    "type": "string"
                },
                "active": {
                    "description": "Active holds the value of the \"active\" field.",
                    "type": "boolean"
                },
                "attestation": {
                    "description": "Attestation holds the value of the \"attestation\" field.",
                    "type": "object",
                    "additionalProperties": true
                },
                "created_at": {
                    "description": "CreatedAt holds the value of the \"created_at\" field.",
                    "type": "string"
                },
                "credential_id": {
                    "description": "CredentialID holds the value of the \"credential_id\" field.",
                    "type": "string"
                },
                "device_type": {
                    "description": "DeviceType holds the value of the \"device_type\" field.",
                    "type": "string"
                },
                "edges": {
                    "description": "Edges holds the relations/edges for other nodes in the graph.\nThe values are being populated by the PasskeyQuery when eager-loading is set.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ent.PasskeyEdges"
                        }
                    ]
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "string"
                },
                "last_used": {
                    "description": "LastUsed holds the value of the \"last_used\" field.",
                    "type": "string"
                },
                "name": {
                    "description": "Name holds the value of the \"name\" field.",
                    "type": "string"
                },
                "public_key": {
                    "description": "PublicKey holds the value of the \"public_key\" field.",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "sign_count": {
                    "description": "SignCount holds the value of the \"sign_count\" field.",
                    "type": "integer"
                },
                "transports": {
                    "description": "Transports holds the value of the \"transports\" field.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "updated_at": {
                    "description": "UpdatedAt holds the value of the \"updated_at\" field.",
                    "type": "string"
                },
                "user_id": {
                    "description": "UserID holds the value of the \"user_id\" field.",
                    "type": "string"
                }
            }
        },
        "ent.PasskeyEdges": {
            "type": "object",
            "properties": {
                "user": {
                    "description": "User holds the value of the user edge.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ent.User"
                        }
                    ]
                }
            }
        },
        "ent.Permission": {
            "type": "object",
            "properties": {
                "action": {
                    "description": "The action this permission allows (create, read, update, delete, etc.)",
                    "type": "string"
                },
                "conditions": {
                    "description": "JSON expression for conditional access",
                    "type": "string"
                },
                "created_at": {
                    "description": "CreatedAt holds the value of the \"created_at\" field.",
                    "type": "string"
                },
                "description": {
                    "description": "Description holds the value of the \"description\" field.",
                    "type": "string"
                },
                "edges": {
                    "description": "Edges holds the relations/edges for other nodes in the graph.\nThe values are being populated by the PermissionQuery when eager-loading is set.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ent.PermissionEdges"
                        }
                    ]
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "string"
                },
                "name": {
                    "description": "Name holds the value of the \"name\" field.",
                    "type": "string"
                },
                "resource": {
                    "description": "The resource this permission applies to",
                    "type": "string"
                },
                "system": {
                    "description": "System permissions cannot be modified",
                    "type": "boolean"
                },
                "updated_at": {
                    "description": "UpdatedAt holds the value of the \"updated_at\" field.",
                    "type": "string"
                }
            }
        },
        "ent.PermissionEdges": {
            "type": "object",
            "properties": {
                "roles": {
                    "description": "Roles holds the value of the roles edge.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ent.Role"
                    }
                }
            }
        },
        "ent.Role": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "CreatedAt holds the value of the \"created_at\" field.",
                    "type": "string"
                },
                "description": {
                    "description": "Description holds the value of the \"description\" field.",
                    "type": "string"
                },
                "edges": {
                    "description": "Edges holds the relations/edges for other nodes in the graph.\nThe values are being populated by the RoleQuery when eager-loading is set.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ent.RoleEdges"
                        }
                    ]
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "string"
                },
                "is_default": {
                    "description": "Default role assigned to new users",
                    "type": "boolean"
                },
                "name": {
                    "description": "Name holds the value of the \"name\" field.",
                    "type": "string"
                },
                "organization_id": {
                    "description": "OrganizationID holds the value of the \"organization_id\" field.",
                    "type": "string"
                },
                "system": {
                    "description": "System roles cannot be modified",
                    "type": "boolean"
                },
                "updated_at": {
                    "description": "UpdatedAt holds the value of the \"updated_at\" field.",
                    "type": "string"
                }
            }
        },
        "ent.RoleEdges": {
            "type": "object",
            "properties": {
                "permissions": {
                    "description": "Permissions holds the value of the permissions edge.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ent.Permission"
                    }
                },
                "users": {
                    "description": "Users holds the value of the users edge.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ent.User"
                    }
                }
            }
        },
        "ent.Session": {
            "type": "object",
            "properties": {
                "active": {
                    "description": "Active holds the value of the \"active\" field.",
                    "type": "boolean"
                },
                "created_at": {
                    "description": "CreatedAt holds the value of the \"created_at\" field.",
                    "type": "string"
                },
                "device_id": {
                    "description": "DeviceID holds the value of the \"device_id\" field.",
                    "type": "string"
                },
                "edges": {
                    "description": "Edges holds the relations/edges for other nodes in the graph.\nThe values are being populated by the SessionQuery when eager-loading is set.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ent.SessionEdges"
                        }
                    ]
                },
                "expires_at": {
                    "description": "ExpiresAt holds the value of the \"expires_at\" field.",
                    "type": "string"
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "string"
                },
                "ip_address": {
                    "description": "IPAddress holds the value of the \"ip_address\" field.",
                    "type": "string"
                },
                "last_active_at": {
                    "description": "LastActiveAt holds the value of the \"last_active_at\" field.",
                    "type": "string"
                },
                "location": {
                    "description": "Location holds the value of the \"location\" field.",
                    "type": "string"
                },
                "organization_id": {
                    "description": "OrganizationID holds the value of the \"organization_id\" field.",
                    "type": "string"
                },
                "updated_at": {
                    "description": "UpdatedAt holds the value of the \"updated_at\" field.",
                    "type": "string"
                },
                "user_agent": {
                    "description": "UserAgent holds the value of the \"user_agent\" field.",
                    "type": "string"
                },
                "user_id": {
                    "description": "UserID holds the value of the \"user_id\" field.",
                    "type": "string"
                }
            }
        },
        "ent.SessionEdges": {
            "type": "object",
            "properties": {
                "user": {
                    "description": "User holds the value of the user edge.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ent.User"
                        }
                    ]
                }
            }
        },
        "ent.User": {
            "type": "object",
            "properties": {
                "active": {
                    "description": "Active holds the value of the \"active\" field.",
                    "type": "boolean"
                },
                "created_at": {
                    "description": "CreatedAt holds the value of the \"created_at\" field.",
                    "type": "string"
                },
                "edges": {
                    "description": "Edges holds the relations/edges for other nodes in the graph.\nThe values are being populated by the UserQuery when eager-loading is set.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ent.UserEdges"
                        }
                    ]
                },
                "email": {
                    "description": "Email holds the value of the \"email\" field.",
                    "type": "string"
                },
                "email_verified": {
                    "description": "EmailVerified holds the value of the \"email_verified\" field.",
                    "type": "boolean"
                },
                "first_name": {
                    "description": "FirstName holds the value of the \"first_name\" field.",
                    "type": "string"
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "string"
                },
                "last_login": {
                    "description": "LastLogin holds the value of the \"last_login\" field.",
                    "type": "string"
                },
                "last_name": {
                    "description": "LastName holds the value of the \"last_name\" field.",
                    "type": "string"
                },
                "last_password_change": {
                    "description": "LastPasswordChange holds the value of the \"last_password_change\" field.",
                    "type": "string"
                },
                "locale": {
                    "description": "Locale holds the value of the \"locale\" field.",
                    "type": "string"
                },
                "metadata": {
                    "description": "Metadata holds the value of the \"metadata\" field.",
                    "type": "object",
                    "additionalProperties": true
                },
                "phone_number": {
                    "description": "PhoneNumber holds the value of the \"phone_number\" field.",
                    "type": "string"
                },
                "phone_verified": {
                    "description": "PhoneVerified holds the value of the \"phone_verified\" field.",
                    "type": "boolean"
                },
                "primary_organization_id": {
                    "description": "PrimaryOrganizationID holds the value of the \"primary_organization_id\" field.",
                    "type": "string"
                },
                "profile_image_url": {
                    "description": "ProfileImageURL holds the value of the \"profile_image_url\" field.",
                    "type": "string"
                },
                "updated_at": {
                    "description": "UpdatedAt holds the value of the \"updated_at\" field.",
                    "type": "string"
                }
            }
        },
        "ent.UserEdges": {
            "type": "object",
            "properties": {
                "api_keys": {
                    "description": "APIKeys holds the value of the api_keys edge.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ent.ApiKey"
                    }
                },
                "mfa_methods": {
                    "description": "MfaMethods holds the value of the mfa_methods edge.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ent.MFA"
                    }
                },
                "oauth_authorizations": {
                    "description": "OauthAuthorizations holds the value of the oauth_authorizations edge.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ent.OAuthAuthorization"
                    }
                },
                "oauth_tokens": {
                    "description": "OauthTokens holds the value of the oauth_tokens edge.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ent.OAuthToken"
                    }
                },
                "organizations": {
                    "description": "Organizations holds the value of the organizations edge.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ent.Organization"
                    }
                },
                "passkeys": {
                    "description": "Passkeys holds the value of the passkeys edge.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ent.Passkey"
                    }
                },
                "roles": {
                    "description": "Roles holds the value of the roles edge.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ent.Role"
                    }
                },
                "sessions": {
                    "description": "Sessions holds the value of the sessions edge.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ent.Session"
                    }
                },
                "verifications": {
                    "description": "Verifications holds the value of the verifications edge.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ent.Verification"
                    }
                }
            }
        },
        "ent.Verification": {
            "type": "object",
            "properties": {
                "attempts": {
                    "description": "Attempts holds the value of the \"attempts\" field.",
                    "type": "integer"
                },
                "created_at": {
                    "description": "CreatedAt holds the value of the \"created_at\" field.",
                    "type": "string"
                },
                "edges": {
                    "description": "Edges holds the relations/edges for other nodes in the graph.\nThe values are being populated by the VerificationQuery when eager-loading is set.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ent.VerificationEdges"
                        }
                    ]
                },
                "email": {
                    "description": "Email holds the value of the \"email\" field.",
                    "type": "string"
                },
                "expires_at": {
                    "description": "ExpiresAt holds the value of the \"expires_at\" field.",
                    "type": "string"
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "string"
                },
                "ip_address": {
                    "description": "IPAddress holds the value of the \"ip_address\" field.",
                    "type": "string"
                },
                "metadata": {
                    "description": "Metadata holds the value of the \"metadata\" field.",
                    "type": "object",
                    "additionalProperties": true
                },
                "phone_number": {
                    "description": "PhoneNumber holds the value of the \"phone_number\" field.",
                    "type": "string"
                },
                "redirect_url": {
                    "description": "RedirectURL holds the value of the \"redirect_url\" field.",
                    "type": "string"
                },
                "type": {
                    "description": "Verification type: email, phone, password_reset, magic_link",
                    "type": "string"
                },
                "updated_at": {
                    "description": "UpdatedAt holds the value of the \"updated_at\" field.",
                    "type": "string"
                },
                "used": {
                    "description": "Used holds the value of the \"used\" field.",
                    "type": "boolean"
                },
                "used_at": {
                    "description": "UsedAt holds the value of the \"used_at\" field.",
                    "type": "string"
                },
                "user_agent": {
                    "description": "UserAgent holds the value of the \"user_agent\" field.",
                    "type": "string"
                },
                "user_id": {
                    "description": "UserID holds the value of the \"user_id\" field.",
                    "type": "string"
                }
            }
        },
        "ent.VerificationEdges": {
            "type": "object",
            "properties": {
                "user": {
                    "description": "User holds the value of the user edge.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ent.User"
                        }
                    ]
                }
            }
        },
        "ent.Webhook": {
            "type": "object",
            "properties": {
                "active": {
                    "description": "Active holds the value of the \"active\" field.",
                    "type": "boolean"
                },
                "created_at": {
                    "description": "CreatedAt holds the value of the \"created_at\" field.",
                    "type": "string"
                },
                "edges": {
                    "description": "Edges holds the relations/edges for other nodes in the graph.\nThe values are being populated by the WebhookQuery when eager-loading is set.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ent.WebhookEdges"
                        }
                    ]
                },
                "event_types": {
                    "description": "EventTypes holds the value of the \"event_types\" field.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "format": {
                    "description": "Format holds the value of the \"format\" field.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/github_com_juicycleff_frank_ent_webhook.Format"
                        }
                    ]
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "string"
                },
                "metadata": {
                    "description": "Metadata holds the value of the \"metadata\" field.",
                    "type": "object",
                    "additionalProperties": true
                },
                "name": {
                    "description": "Name holds the value of the \"name\" field.",
                    "type": "string"
                },
                "organization_id": {
                    "description": "OrganizationID holds the value of the \"organization_id\" field.",
                    "type": "string"
                },
                "retry_count": {
                    "description": "RetryCount holds the value of the \"retry_count\" field.",
                    "type": "integer"
                },
                "timeout_ms": {
                    "description": "TimeoutMs holds the value of the \"timeout_ms\" field.",
                    "type": "integer"
                },
                "updated_at": {
                    "description": "UpdatedAt holds the value of the \"updated_at\" field.",
                    "type": "string"
                },
                "url": {
                    "description": "URL holds the value of the \"url\" field.",
                    "type": "string"
                },
                "version": {
                    "description": "Version holds the value of the \"version\" field.",
                    "type": "string"
                }
            }
        },
        "ent.WebhookEdges": {
            "type": "object",
            "properties": {
                "events": {
                    "description": "Events holds the value of the events edge.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ent.WebhookEvent"
                    }
                },
                "organization": {
                    "description": "Organization holds the value of the organization edge.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ent.Organization"
                        }
                    ]
                }
            }
        },
        "ent.WebhookEvent": {
            "type": "object",
            "properties": {
                "attempts": {
                    "description": "Attempts holds the value of the \"attempts\" field.",
                    "type": "integer"
                },
                "created_at": {
                    "description": "CreatedAt holds the value of the \"created_at\" field.",
                    "type": "string"
                },
                "delivered": {
                    "description": "Delivered holds the value of the \"delivered\" field.",
                    "type": "boolean"
                },
                "delivered_at": {
                    "description": "DeliveredAt holds the value of the \"delivered_at\" field.",
                    "type": "string"
                },
                "edges": {
                    "description": "Edges holds the relations/edges for other nodes in the graph.\nThe values are being populated by the WebhookEventQuery when eager-loading is set.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ent.WebhookEventEdges"
                        }
                    ]
                },
                "error": {
                    "description": "Error holds the value of the \"error\" field.",
                    "type": "string"
                },
                "event_type": {
                    "description": "EventType holds the value of the \"event_type\" field.",
                    "type": "string"
                },
                "headers": {
                    "description": "Headers holds the value of the \"headers\" field.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "string"
                },
                "next_retry": {
                    "description": "NextRetry holds the value of the \"next_retry\" field.",
                    "type": "string"
                },
                "payload": {
                    "description": "Payload holds the value of the \"payload\" field.",
                    "type": "object",
                    "additionalProperties": true
                },
                "response_body": {
                    "description": "ResponseBody holds the value of the \"response_body\" field.",
                    "type": "string"
                },
                "status_code": {
                    "description": "StatusCode holds the value of the \"status_code\" field.",
                    "type": "integer"
                },
                "updated_at": {
                    "description": "UpdatedAt holds the value of the \"updated_at\" field.",
                    "type": "string"
                },
                "webhook_id": {
                    "description": "WebhookID holds the value of the \"webhook_id\" field.",
                    "type": "string"
                }
            }
        },
        "ent.WebhookEventEdges": {
            "type": "object",
            "properties": {
                "webhook": {
                    "description": "Webhook holds the value of the webhook edge.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ent.Webhook"
                        }
                    ]
                }
            }
        },
        "github_com_juicycleff_frank_ent_featureflag.Component": {
            "type": "string",
            "enum": [
                "oauth2",
                "passwordless",
                "mfa",
                "passkeys",
                "sso",
                "enterprise",
                "webhooks",
                "api_keys"
            ],
            "x-enum-varnames": [
                "ComponentOauth2",
                "ComponentPasswordless",
                "ComponentMfa",
                "ComponentPasskeys",
                "ComponentSSO",
                "ComponentEnterprise",
                "ComponentWebhooks",
                "ComponentAPIKeys"
            ]
        },
        "github_com_juicycleff_frank_ent_webhook.Format": {
            "type": "string",
            "enum": [
                "json",
                "json",
                "form"
            ],
            "x-enum-varnames": [
                "DefaultFormat",
                "FormatJSON",
                "FormatForm"
            ]
        },
        "internal_handlers.CreateOrganizationRequest": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "domain": {
                    "type": "string"
                },
                "features": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "logo_url": {
                    "type": "string"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": true
                },
                "name": {
                    "type": "string"
                },
                "plan": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "trial_days": {
                    "type": "integer"
                }
            }
        },
        "internal_handlers.EnableTOTPResponse": {
            "type": "object",
            "properties": {
                "qr_code_data": {
                    "type": "string"
                },
                "secret": {
                    "type": "string"
                },
                "uri": {
                    "type": "string"
                }
            }
        },
        "internal_handlers.ForgotPasswordInput": {
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "type": "string"
                }
            }
        },
        "internal_handlers.HealthResponse": {
            "type": "object",
            "properties": {
                "services": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/internal_handlers.HealthStatus"
                    }
                },
                "status": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                }
            }
        },
        "internal_handlers.HealthStatus": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "service": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "internal_handlers.LoginInput": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "captcha_response": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "organization_id": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "remember_me": {
                    "type": "boolean"
                }
            }
        },
        "internal_handlers.LoginResponse": {
            "type": "object",
            "properties": {
                "expires_at": {
                    "type": "integer"
                },
                "mfa_required": {
                    "type": "boolean"
                },
                "mfa_types": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "refresh_token": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/ent.User"
                }
            }
        },
        "internal_handlers.MFAEnrollRequest": {
            "type": "object",
            "required": [
                "method"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "method": {
                    "type": "string"
                },
                "phone_number": {
                    "type": "string"
                }
            }
        },
        "internal_handlers.MFAUnEnrollInput": {
            "type": "object",
            "required": [
                "method"
            ],
            "properties": {
                "method": {
                    "type": "string"
                }
            }
        },
        "internal_handlers.MFAVerifyRequest": {
            "type": "object",
            "required": [
                "code",
                "method"
            ],
            "properties": {
                "code": {
                    "type": "string"
                },
                "method": {
                    "type": "string"
                },
                "phone_number": {
                    "type": "string"
                }
            }
        },
        "internal_handlers.Organization": {
            "type": "object",
            "properties": {
                "active": {
                    "description": "Active holds the value of the \"active\" field.",
                    "type": "boolean"
                },
                "created_at": {
                    "description": "CreatedAt holds the value of the \"created_at\" field.",
                    "type": "string"
                },
                "domain": {
                    "description": "Domain holds the value of the \"domain\" field.",
                    "type": "string"
                },
                "edges": {
                    "description": "Edges holds the relations/edges for other nodes in the graph.\nThe values are being populated by the OrganizationQuery when eager-loading is set.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ent.OrganizationEdges"
                        }
                    ]
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "string"
                },
                "logo_url": {
                    "description": "LogoURL holds the value of the \"logo_url\" field.",
                    "type": "string"
                },
                "metadata": {
                    "description": "Metadata holds the value of the \"metadata\" field.",
                    "type": "object",
                    "additionalProperties": true
                },
                "name": {
                    "description": "Name holds the value of the \"name\" field.",
                    "type": "string"
                },
                "plan": {
                    "description": "Plan holds the value of the \"plan\" field.",
                    "type": "string"
                },
                "slug": {
                    "description": "Slug holds the value of the \"slug\" field.",
                    "type": "string"
                },
                "trial_ends_at": {
                    "description": "TrialEndsAt holds the value of the \"trial_ends_at\" field.",
                    "type": "string"
                },
                "trial_used": {
                    "description": "TrialUsed holds the value of the \"trial_used\" field.",
                    "type": "boolean"
                },
                "updated_at": {
                    "description": "UpdatedAt holds the value of the \"updated_at\" field.",
                    "type": "string"
                }
            }
        },
        "internal_handlers.RefreshTokenInput": {
            "type": "object",
            "required": [
                "refresh_token"
            ],
            "properties": {
                "refresh_token": {
                    "type": "string"
                }
            }
        },
        "internal_handlers.RegisterInput": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": true
                },
                "organization_id": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "minLength": 8
                }
            }
        },
        "internal_handlers.ResetPasswordInput": {
            "type": "object",
            "required": [
                "new_password",
                "token"
            ],
            "properties": {
                "new_password": {
                    "type": "string",
                    "minLength": 8
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "internal_handlers.UpdateOrganizationRequest": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "domain": {
                    "type": "string"
                },
                "logo_url": {
                    "type": "string"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": true
                },
                "name": {
                    "type": "string"
                },
                "plan": {
                    "type": "string"
                }
            }
        },
        "internal_handlers.VerifyEmailInput": {
            "type": "object",
            "required": [
                "token"
            ],
            "properties": {
                "token": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}