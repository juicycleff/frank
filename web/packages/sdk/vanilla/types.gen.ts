// This file is auto-generated by @hey-api/openapi-ts

/**
 * API key information without the actual key
 */
export type ApiKeyResponse = {
	/**
	 * Whether API key is active
	 */
	active: boolean;
	/**
	 * Creation timestamp
	 */
	created_at: string;
	/**
	 * Expiry timestamp
	 */
	expires_at?: string;
	/**
	 * API key ID
	 */
	id: string;
	/**
	 * Last used timestamp
	 */
	last_used?: string;
	/**
	 * Key metadata
	 */
	metadata?: {
		[key: string]: unknown;
	};
	/**
	 * API key name
	 */
	name: string;
	/**
	 * Organization ID
	 */
	organization_id?: string;
	/**
	 * Key permissions
	 */
	permissions?: Array<string>;
	/**
	 * Key scopes
	 */
	scopes?: Array<string>;
	/**
	 * API key type (client/server)
	 */
	type: string;
	/**
	 * Last update timestamp
	 */
	updated_at?: string;
	/**
	 * User ID who owns the key
	 */
	user_id?: string;
};

/**
 * API key information with the actual key
 */
export type ApiKeyWithSecretResponse = {
	/**
	 * Whether API key is active
	 */
	active: boolean;
	/**
	 * Creation timestamp
	 */
	created_at: string;
	/**
	 * Expiry timestamp
	 */
	expires_at?: string;
	/**
	 * API key ID
	 */
	id: string;
	/**
	 * API key secret
	 */
	key: string;
	/**
	 * Last used timestamp
	 */
	last_used?: string;
	/**
	 * Key metadata
	 */
	metadata?: {
		[key: string]: unknown;
	};
	/**
	 * API key name
	 */
	name: string;
	/**
	 * Organization ID
	 */
	organization_id?: string;
	/**
	 * Key permissions
	 */
	permissions?: Array<string>;
	/**
	 * Key scopes
	 */
	scopes?: Array<string>;
	/**
	 * API key type (client/server)
	 */
	type: string;
	/**
	 * Last update timestamp
	 */
	updated_at?: string;
	/**
	 * User ID who owns the key
	 */
	user_id?: string;
};

export type AddMemberRequestBody = {
	member: AddOrganizationMemberRequest;
};

/**
 * Add organization member request
 */
export type AddOrganizationMemberRequest = {
	/**
	 * Roles to assign
	 */
	roles: Array<string>;
	/**
	 * User ID to add
	 */
	user_id: string;
};

/**
 * Add permission to role request
 */
export type AddRolePermissionRequest = {
	/**
	 * Permission ID
	 */
	permission_id: string;
};

export type AddRolePermissionRequestBody = {
	permission: AddRolePermissionRequest;
};

/**
 * Backup codes response
 */
export type BackupCodesResponse = {
	/**
	 * List of backup codes
	 */
	backup_codes: Array<string>;
};

/**
 * Bad request response
 */
export type BadRequestError = {
	/**
	 * Error code
	 */
	code: string;
	/**
	 * Additional error details
	 */
	details?: unknown;
	/**
	 * Unique error ID
	 */
	id?: string;
	/**
	 * Error message
	 */
	message: string;
};

/**
 * Base type
 */
export type Base = {
	/**
	 * Created At
	 */
	created_at: Date;
	/**
	 * Created At
	 */
	id: string;
	/**
	 * Updated At
	 */
	updated_at: Date;
};

/**
 * Base auth user type
 */
export type BaseAuthUser = {
	/**
	 * Email address
	 */
	email: string;
	/**
	 * Whether email is verified
	 */
	email_verified: boolean;
	/**
	 * User first name
	 */
	first_name?: string;
	/**
	 * User last name
	 */
	last_name?: string;
	/**
	 * User locale
	 */
	locale?: string;
	/**
	 * User metadata
	 */
	metadata?: {
		[key: string]: unknown;
	};
	/**
	 * User phone number
	 */
	phone_number?: string;
	/**
	 * Whether phone is verified
	 */
	phone_verified?: boolean;
	/**
	 * URL to user's profile image
	 */
	profile_image_url?: string;
};

/**
 * Base user type
 */
export type BaseUser = {
	/**
	 * Email address
	 */
	email?: string;
	/**
	 * User first name
	 */
	first_name?: string;
	/**
	 * User last name
	 */
	last_name?: string;
	/**
	 * User locale
	 */
	locale?: string;
	/**
	 * User metadata
	 */
	metadata?: {
		[key: string]: unknown;
	};
	/**
	 * User phone number
	 */
	phone_number?: string;
	/**
	 * URL to user's profile image
	 */
	profile_image_url?: string;
};

/**
 * CSRF token response
 */
export type CsrfTokenResponse = {
	/**
	 * CSRF token
	 */
	csrf_token: string;
};

export type CheckEmailVerificationResponseBody = {
	/**
	 * Whether email is verified
	 */
	verified: boolean;
};

export type CheckPermissionResponseBody = {
	/**
	 * Whether user has the permission
	 */
	has_permission: boolean;
};

export type CheckRoleResponseBody = {
	/**
	 * Whether user has the role
	 */
	has_role: boolean;
};

/**
 * Conflict response
 */
export type ConflictError = {
	/**
	 * Error code
	 */
	code: string;
	/**
	 * Additional error details
	 */
	details?: unknown;
	/**
	 * Unique error ID
	 */
	id?: string;
	/**
	 * Error message
	 */
	message: string;
};

/**
 * OAuth consent request
 */
export type ConsentRequest = {
	/**
	 * Whether consent is approved
	 */
	approved?: boolean;
	/**
	 * OAuth client ID
	 */
	client_id: string;
	/**
	 * Redirect URI
	 */
	redirect_uri: string;
	/**
	 * Requested scopes (space-separated)
	 */
	scope: string;
	/**
	 * OAuth state parameter
	 */
	state?: string;
};

export type ConsentResponseBody = {
	/**
	 * Redirect URI with authorization code
	 */
	redirect_uri: string;
};

/**
 * Create API key request
 */
export type CreateApiKeyRequest = {
	/**
	 * Expiry in seconds
	 */
	expires_in?: bigint;
	/**
	 * Key metadata
	 */
	metadata?: {
		[key: string]: unknown;
	};
	/**
	 * API key name
	 */
	name: string;
	/**
	 * Key permissions
	 */
	permissions?: Array<string>;
	/**
	 * Key scopes
	 */
	scopes?: Array<string>;
	/**
	 * API key type
	 */
	type?: "client" | "server";
};

/**
 * Create email template request
 */
export type CreateEmailTemplateRequest = {
	/**
	 * Whether template is active
	 */
	active?: boolean;
	/**
	 * HTML content
	 */
	html_content: string;
	/**
	 * Template locale
	 */
	locale?: string;
	/**
	 * Template metadata
	 */
	metadata?: {
		[key: string]: unknown;
	};
	/**
	 * Template name
	 */
	name: string;
	/**
	 * Organization ID
	 */
	organization_id?: string;
	/**
	 * Email subject
	 */
	subject: string;
	/**
	 * Whether this is a system template
	 */
	system?: boolean;
	/**
	 * Text content
	 */
	text_content?: string;
	/**
	 * Template type
	 */
	type: string;
};

/**
 * Create identity provider request
 */
export type CreateIdentityProviderRequest = {
	/**
	 * Whether provider is active
	 */
	active?: boolean;
	/**
	 * Attributes mapping
	 */
	attributes_mapping?: {
		[key: string]: string;
	};
	/**
	 * OAuth/OIDC authorization endpoint
	 */
	authorization_endpoint?: string;
	/**
	 * SAML certificate
	 */
	certificate?: string;
	/**
	 * OAuth/OIDC client ID
	 */
	client_id?: string;
	/**
	 * OAuth/OIDC client secret
	 */
	client_secret?: string;
	/**
	 * Allowed email domains
	 */
	domains?: Array<string>;
	/**
	 * OIDC issuer URL
	 */
	issuer?: string;
	/**
	 * OIDC JWKS URI
	 */
	jwks_uri?: string;
	/**
	 * SAML metadata URL
	 */
	metadata_url?: string;
	/**
	 * Provider name
	 */
	name: string;
	/**
	 * Whether this is the primary provider
	 */
	primary?: boolean;
	/**
	 * SAML private key
	 */
	private_key?: string;
	/**
	 * Provider type
	 */
	provider_type: "oauth2" | "oidc" | "saml";
	/**
	 * OAuth/OIDC redirect URI
	 */
	redirect_uri?: string;
	/**
	 * OAuth/OIDC token endpoint
	 */
	token_endpoint?: string;
	/**
	 * OIDC userinfo endpoint
	 */
	userinfo_endpoint?: string;
};

export type CreateIdentityProviderRequestBody = {
	/**
	 * Organization ID
	 */
	organization_id: string;
	provider: CreateIdentityProviderRequest;
};

/**
 * Create OAuth client request
 */
export type CreateOAuthClientRequest = {
	/**
	 * Allowed CORS origins
	 */
	allowed_cors_origins?: Array<string>;
	/**
	 * Allowed grant types
	 */
	allowed_grant_types?: Array<string>;
	/**
	 * Client description
	 */
	client_description?: string;
	/**
	 * Client name
	 */
	client_name: string;
	/**
	 * Client URI
	 */
	client_uri?: string;
	/**
	 * Logo URI
	 */
	logo_uri?: string;
	/**
	 * Authorized post-logout redirect URIs
	 */
	post_logout_redirect_uris?: Array<string>;
	/**
	 * Whether client is public
	 */
	public?: boolean;
	/**
	 * Authorized redirect URIs
	 */
	redirect_uris: Array<string>;
	/**
	 * Refresh token expiry in seconds
	 */
	refresh_token_expiry_seconds?: bigint;
	/**
	 * Whether user consent is required
	 */
	requires_consent?: boolean;
	/**
	 * Whether PKCE is required
	 */
	requires_pkce?: boolean;
	/**
	 * Access token expiry in seconds
	 */
	token_expiry_seconds?: bigint;
};

/**
 * Create OAuth scope request
 */
export type CreateOAuthScopeRequest = {
	/**
	 * Whether this scope is included by default
	 */
	default_scope?: boolean;
	/**
	 * Scope description
	 */
	description: string;
	/**
	 * Scope name
	 */
	name: string;
	/**
	 * Whether this scope can be requested by any client
	 */
	public?: boolean;
};

/**
 * Create organization request
 */
export type CreateOrganizationRequest = {
	/**
	 * Organization domain
	 */
	domain?: string;
	/**
	 * Features to enable
	 */
	features?: Array<string>;
	/**
	 * Organization logo URL
	 */
	logo_url?: string;
	/**
	 * Organization metadata
	 */
	metadata?: {
		[key: string]: unknown;
	};
	/**
	 * Organization name
	 */
	name: string;
	/**
	 * Organization plan
	 */
	plan?: string;
	/**
	 * Organization slug
	 */
	slug?: string;
	/**
	 * Number of trial days
	 */
	trial_days?: bigint;
};

/**
 * Create permission request
 */
export type CreatePermissionRequest = {
	/**
	 * Action this permission allows
	 */
	action: string;
	/**
	 * JSON expression for conditional access
	 */
	conditions?: string;
	/**
	 * Permission description
	 */
	description: string;
	/**
	 * Permission name
	 */
	name: string;
	/**
	 * Resource this permission applies to
	 */
	resource: string;
};

export type CreatePermissionRequestBody = {
	permission: CreatePermissionRequest;
};

export type CreateRequestBody = {
	key: CreateApiKeyRequest;
};

export type CreateRequestBody2 = {
	organization: CreateOrganizationRequest;
};

export type CreateRequestBody3 = {
	/**
	 * Organization ID
	 */
	organization_id: string;
	webhook: CreateWebhookRequest;
};

/**
 * Create role request
 */
export type CreateRoleRequest = {
	/**
	 * Role description
	 */
	description?: string;
	/**
	 * Whether this is a default role for new users
	 */
	is_default?: boolean;
	/**
	 * Role name
	 */
	name: string;
	/**
	 * Organization ID
	 */
	organization_id?: string;
};

export type CreateRoleRequestBody = {
	role: CreateRoleRequest;
};

/**
 * Create user request
 */
export type CreateUserRequest = {
	/**
	 * Email address
	 */
	email: string;
	/**
	 * User first name
	 */
	first_name?: string;
	/**
	 * User last name
	 */
	last_name?: string;
	/**
	 * User locale
	 */
	locale?: string;
	/**
	 * User metadata
	 */
	metadata?: {
		[key: string]: unknown;
	};
	/**
	 * Organization ID to add user to
	 */
	organization_id?: string;
	/**
	 * User password
	 */
	password?: string;
	/**
	 * User phone number
	 */
	phone_number?: string;
	/**
	 * URL to user's profile image
	 */
	profile_image_url?: string;
};

/**
 * Create webhook request
 */
export type CreateWebhookRequest = {
	/**
	 * Event types to subscribe to
	 */
	event_types: Array<string>;
	/**
	 * Payload format
	 */
	format?: "json" | "form";
	/**
	 * Webhook metadata
	 */
	metadata?: {
		[key: string]: unknown;
	};
	/**
	 * Webhook name
	 */
	name: string;
	/**
	 * Number of retries on failure
	 */
	retry_count?: bigint;
	/**
	 * Timeout in milliseconds
	 */
	timeout_ms?: bigint;
	/**
	 * Webhook URL
	 */
	url: string;
};

/**
 * User email address
 */
export type Email = {
	/**
	 * Email address
	 */
	email?: string;
};

export type EmailResponseBody = {
	/**
	 * Success message
	 */
	message: string;
	/**
	 * Verification ID
	 */
	verification_id: string;
};

/**
 * Email template information
 */
export type EmailTemplateResponse = {
	/**
	 * Whether template is active
	 */
	active: boolean;
	/**
	 * Created At
	 */
	created_at: Date;
	/**
	 * HTML content
	 */
	html_content: string;
	/**
	 * Created At
	 */
	id: string;
	/**
	 * Template locale
	 */
	locale: string;
	/**
	 * Template metadata
	 */
	metadata?: {
		[key: string]: unknown;
	};
	/**
	 * Template name
	 */
	name: string;
	/**
	 * Organization ID
	 */
	organization_id?: string;
	/**
	 * Email subject
	 */
	subject: string;
	/**
	 * Whether this is a system template
	 */
	system: boolean;
	/**
	 * Text content
	 */
	text_content?: string;
	/**
	 * Template type
	 */
	type: string;
	/**
	 * Updated At
	 */
	updated_at: Date;
};

/**
 * Enable feature request
 */
export type EnableFeatureRequest = {
	/**
	 * Feature key to enable
	 */
	feature_key: string;
	/**
	 * Feature settings
	 */
	settings?: {
		[key: string]: unknown;
	};
};

export type EnableFeatureRequestBody = {
	feature: EnableFeatureRequest;
};

export type EnrollRequestBody = {
	request: MfaEnrollRequest;
};

export type EnrollResponseBody = {
	backup_codes?: BackupCodesResponse;
	/**
	 * Success message for SMS/Email enrollment
	 */
	message?: string;
	totp?: TotpEnrollResponse;
};

/**
 * Forbidden response
 */
export type ForbiddenError = {
	/**
	 * Error code
	 */
	code: string;
	/**
	 * Additional error details
	 */
	details?: unknown;
	/**
	 * Unique error ID
	 */
	id?: string;
	/**
	 * Error message
	 */
	message: string;
};

/**
 * Forgot password request
 */
export type ForgotPasswordRequest = {
	/**
	 * User email
	 */
	email: string;
};

/**
 * Standard error response format
 */
export type FrankError = {
	/**
	 * Error code
	 */
	code: string;
	/**
	 * Additional error details
	 */
	details?: unknown;
	/**
	 * Unique error ID
	 */
	id?: string;
	/**
	 * Error message
	 */
	message: string;
};

export type GetOrganizationsResponseBody = {
	organizations: Array<OrganizationResponse>;
};

/**
 * Get user session response
 */
export type GetUserSessionResponse = {
	/**
	 * User sessions
	 */
	data: Array<Session>;
	pagination: Pagination;
};

/**
 * Health check response
 */
export type HealthResponse = {
	/**
	 * Status of individual services
	 */
	services?: Array<HealthStatus>;
	/**
	 * Overall health status
	 */
	status: "healthy" | "unhealthy";
	/**
	 * Timestamp of health check
	 */
	timestamp: Date;
};

/**
 * Service health status
 */
export type HealthStatus = {
	/**
	 * Additional message
	 */
	message?: string;
	/**
	 * Service name
	 */
	service: string;
	/**
	 * Service status
	 */
	status: "healthy" | "unhealthy";
};

/**
 * Identity provider information
 */
export type IdentityProviderResponse = {
	/**
	 * Whether provider is active
	 */
	active: boolean;
	/**
	 * Attributes mapping
	 */
	attributes_mapping?: {
		[key: string]: string;
	};
	/**
	 * OAuth/OIDC authorization endpoint
	 */
	authorization_endpoint?: string;
	/**
	 * OAuth/OIDC client ID
	 */
	client_id?: string;
	/**
	 * Creation timestamp
	 */
	created_at: string;
	/**
	 * Allowed email domains
	 */
	domains?: Array<string>;
	/**
	 * Provider ID
	 */
	id: string;
	/**
	 * OIDC issuer URL
	 */
	issuer?: string;
	/**
	 * OIDC JWKS URI
	 */
	jwks_uri?: string;
	/**
	 * SAML metadata URL
	 */
	metadata_url?: string;
	/**
	 * Provider name
	 */
	name: string;
	/**
	 * Organization ID
	 */
	organization_id: string;
	/**
	 * Whether this is the primary provider
	 */
	primary?: boolean;
	/**
	 * Provider type (oauth2, oidc, saml)
	 */
	provider_type: string;
	/**
	 * OAuth/OIDC redirect URI
	 */
	redirect_uri?: string;
	/**
	 * OAuth/OIDC token endpoint
	 */
	token_endpoint?: string;
	/**
	 * Last update timestamp
	 */
	updated_at?: string;
	/**
	 * OIDC userinfo endpoint
	 */
	userinfo_endpoint?: string;
};

/**
 * Internal server error response
 */
export type InternalServerError = {
	/**
	 * Error code
	 */
	code: string;
	/**
	 * Additional error details
	 */
	details?: unknown;
	/**
	 * Unique error ID
	 */
	id?: string;
	/**
	 * Error message
	 */
	message: string;
};

export type IntrospectResponseBody = {
	/**
	 * Whether token is active
	 */
	active: boolean;
	/**
	 * Audience
	 */
	aud?: string;
	/**
	 * Client ID
	 */
	client_id?: string;
	/**
	 * Expiry timestamp
	 */
	exp?: bigint;
	/**
	 * Issued at timestamp
	 */
	iat?: bigint;
	/**
	 * Issuer
	 */
	iss?: string;
	/**
	 * JWTAuth ID
	 */
	jti?: string;
	/**
	 * Not before timestamp
	 */
	nbf?: bigint;
	/**
	 * Token scopes
	 */
	scope?: string;
	/**
	 * Subject (user ID)
	 */
	sub?: string;
	/**
	 * Token type
	 */
	token_type?: string;
	/**
	 * Resource owner username
	 */
	username?: string;
};

export type JwksResponseBody = {
	keys: Array<unknown>;
};

export type ListClientsResponseBody = {
	data: Array<OAuthClientResponse>;
	pagination: Pagination;
};

export type ListEventsResponseBody = {
	data: Array<WebhookEventResponse>;
	pagination: Pagination;
};

export type ListFeaturesResponseBody = {
	features: Array<OrganizationFeatureResponse>;
};

export type ListIdentityProvidersResponseBody = {
	providers: Array<IdentityProviderResponse>;
};

export type ListMembersResponseBody = {
	data: Array<OrganizationMemberResponse>;
	pagination: Pagination;
};

/**
 * Add permission to role request
 */
export type ListPermissionsResponse = {
	data: Array<PermissionResponse>;
	pagination: Pagination;
};

export type ListProvidersResponseBody = {
	providers: Array<SsoProvider>;
};

export type ListResponseBody = {
	data: Array<ApiKeyResponse>;
	pagination: Pagination;
	/**
	 * Total number of keys
	 */
	total: bigint;
};

export type ListResponseBody2 = {
	data: Array<OrganizationResponse>;
	pagination: Pagination;
};

export type ListResponseBody3 = {
	passkeys: Array<RegisteredPasskey>;
};

export type ListResponseBody4 = {
	data: Array<User>;
	pagination: Pagination;
};

export type ListResponseBody5 = {
	data: Array<WebhookResponse>;
	pagination: Pagination;
};

export type ListRolePermissionsResponseBody = {
	permissions: Array<PermissionResponse>;
};

export type ListRolesResponseBody = {
	data: Array<RoleResponse>;
	pagination: Pagination;
};

export type ListScopesResponseBody = {
	data: Array<OAuthScopeResponse>;
	pagination: Pagination;
};

export type ListTemplatesResponseBody = {
	data: Array<EmailTemplateResponse>;
	pagination: Pagination;
};

export type LoginCompleteResponseBody = {
	/**
	 * Whether authentication was successful
	 */
	authenticated: boolean;
	/**
	 * User ID
	 */
	user_id: string;
};

/**
 * Login credentials
 */
export type LoginRequest = {
	/**
	 * CAPTCHA response for protected login
	 */
	captcha_response?: string;
	/**
	 * User email
	 */
	email: string;
	/**
	 * Organization ID if logging into a specific organization
	 */
	organization_id?: string;
	/**
	 * User password
	 */
	password: string;
	/**
	 * Whether to remember the user
	 */
	remember_me?: boolean;
};

/**
 * Successful login response
 */
export type LoginResponse = {
	/**
	 * CSRF token
	 */
	csrf_token: string;
	/**
	 * Whether email is verified
	 */
	emailVerified?: boolean;
	/**
	 * Token expiry timestamp
	 */
	expires_at: bigint;
	/**
	 * Login message
	 */
	message?: string;
	/**
	 * Whether MFA is required to complete authentication
	 */
	mfa_required: boolean;
	/**
	 * Available MFA methods when MFA is required
	 */
	mfa_types?: Array<string>;
	/**
	 * JWTAuth refresh token
	 */
	refresh_token: string;
	/**
	 * Whether email verification is required
	 */
	requiresVerification?: boolean;
	/**
	 * Session ID
	 */
	session_id?: string;
	/**
	 * JWTAuth access token
	 */
	token: string;
	user: User;
	/**
	 * Verification ID for email verification
	 */
	verificationId?: string;
	/**
	 * Verification method for email verification
	 */
	verificationMethod?: string;
	/**
	 * Whether email verification is required
	 */
	verificationRequired?: boolean;
};

export type LoginResponse2 = {
	/**
	 * CSRF token
	 */
	csrf_token: string;
	/**
	 * Whether email is verified
	 */
	emailVerified?: boolean;
	/**
	 * Token expiry timestamp
	 */
	expires_at: bigint;
	/**
	 * Login message
	 */
	message?: string;
	/**
	 * Whether MFA is required to complete authentication
	 */
	mfa_required: boolean;
	/**
	 * Available MFA methods when MFA is required
	 */
	mfa_types?: Array<string>;
	/**
	 * JWTAuth refresh token
	 */
	refresh_token: string;
	/**
	 * Whether email verification is required
	 */
	requiresVerification?: boolean;
	/**
	 * JWTAuth access token
	 */
	token: string;
	user: User;
	/**
	 * Verification ID for email verification
	 */
	verificationId?: string;
	/**
	 * Verification method for email verification
	 */
	verificationMethod?: string;
	/**
	 * Whether email verification is required
	 */
	verificationRequired?: boolean;
};

export type LoginResponse3 = {
	/**
	 * CSRF token
	 */
	csrf_token: string;
	/**
	 * Whether email is verified
	 */
	emailVerified?: boolean;
	/**
	 * Token expiry timestamp
	 */
	expires_at: bigint;
	/**
	 * Login message
	 */
	message?: string;
	/**
	 * Whether MFA is required to complete authentication
	 */
	mfa_required: boolean;
	/**
	 * Available MFA methods when MFA is required
	 */
	mfa_types?: Array<string>;
	/**
	 * JWTAuth refresh token
	 */
	refresh_token: string;
	/**
	 * Whether email verification is required
	 */
	requiresVerification?: boolean;
	/**
	 * JWTAuth access token
	 */
	token: string;
	user: User;
	/**
	 * Verification ID for email verification
	 */
	verificationId?: string;
	/**
	 * Verification method for email verification
	 */
	verificationMethod?: string;
	/**
	 * Whether email verification is required
	 */
	verificationRequired?: boolean;
};

/**
 * MFA enrollment request
 */
export type MfaEnrollRequest = {
	/**
	 * Email for email verification
	 */
	email?: string;
	/**
	 * MFA method to enroll
	 */
	method: "totp" | "sms" | "email" | "backup_codes";
	/**
	 * Phone number for SMS verification
	 */
	phone_number?: string;
};

/**
 * MFA unenrollment request
 */
export type MfaUnEnrollRequest = {
	/**
	 * MFA method to unenroll
	 */
	method: "totp" | "sms" | "email" | "backup_codes" | "all";
};

/**
 * MFA verification request
 */
export type MfaVerifyRequest = {
	/**
	 * Verification code
	 */
	code: string;
	/**
	 * MFA method to verify
	 */
	method: "totp" | "sms" | "email" | "backup_codes";
	/**
	 * Phone number for SMS verification
	 */
	phone_number?: string;
};

/**
 * Magic link generation request
 */
export type MagicLinkRequest = {
	/**
	 * User email
	 */
	email: string;
	/**
	 * Link expiry in seconds
	 */
	expires_in?: bigint;
	/**
	 * URL to redirect after authentication
	 */
	redirect_url: string;
	/**
	 * User ID
	 */
	user_id: string;
};

export type MagicLinkResponseBody = {
	/**
	 * Expiry in seconds
	 */
	expires_in: bigint;
	/**
	 * Generated magic link
	 */
	magic_link: string;
};

export type MethodsResponseBody = {
	/**
	 * Enabled MFA methods
	 */
	methods: Array<string>;
};

export type MethodsResponseBody2 = {
	/**
	 * Whether passwordless auth is enabled
	 */
	enabled: boolean;
	/**
	 * Available methods
	 */
	methods: Array<string>;
};

export type MetricsResponseBody = {
	/**
	 * Total error count
	 */
	errors?: bigint;
	/**
	 * Number of goroutines
	 */
	goroutines: bigint;
	/**
	 * Memory usage in bytes
	 */
	memory_usage: bigint;
	/**
	 * Requests per second
	 */
	request_rate?: number;
	/**
	 * Total request count
	 */
	requests?: bigint;
	/**
	 * System uptime in seconds
	 */
	uptime: bigint;
};

/**
 * Not found response
 */
export type NotFoundError = {
	/**
	 * Error code
	 */
	code: string;
	/**
	 * Additional error details
	 */
	details?: unknown;
	/**
	 * Unique error ID
	 */
	id?: string;
	/**
	 * Error message
	 */
	message: string;
};

/**
 * OAuth client information
 */
export type OAuthClientResponse = {
	/**
	 * Whether client is active
	 */
	active: boolean;
	/**
	 * Allowed CORS origins
	 */
	allowed_cors_origins?: Array<string>;
	/**
	 * Allowed grant types
	 */
	allowed_grant_types: Array<string>;
	/**
	 * Client description
	 */
	client_description?: string;
	/**
	 * OAuth client ID
	 */
	client_id: string;
	/**
	 * Client name
	 */
	client_name: string;
	/**
	 * Client URI
	 */
	client_uri?: string;
	/**
	 * Creation timestamp
	 */
	created_at?: string;
	/**
	 * Client ID
	 */
	id: string;
	/**
	 * Logo URI
	 */
	logo_uri?: string;
	/**
	 * Organization ID
	 */
	organization_id?: string;
	/**
	 * Authorized post-logout redirect URIs
	 */
	post_logout_redirect_uris?: Array<string>;
	/**
	 * Whether client is public
	 */
	public: boolean;
	/**
	 * Authorized redirect URIs
	 */
	redirect_uris: Array<string>;
	/**
	 * Refresh token expiry in seconds
	 */
	refresh_token_expiry_seconds?: bigint;
	/**
	 * Whether user consent is required
	 */
	requires_consent?: boolean;
	/**
	 * Whether PKCE is required
	 */
	requires_pkce?: boolean;
	/**
	 * Access token expiry in seconds
	 */
	token_expiry_seconds?: bigint;
	/**
	 * Last update timestamp
	 */
	updated_at?: string;
};

/**
 * OAuth client information with client secret
 */
export type OAuthClientWithSecretResponse = {
	/**
	 * Whether client is active
	 */
	active: boolean;
	/**
	 * Allowed CORS origins
	 */
	allowed_cors_origins?: Array<string>;
	/**
	 * Allowed grant types
	 */
	allowed_grant_types: Array<string>;
	/**
	 * Client description
	 */
	client_description?: string;
	/**
	 * OAuth client ID
	 */
	client_id: string;
	/**
	 * Client name
	 */
	client_name: string;
	/**
	 * OAuth client secret
	 */
	client_secret: string;
	/**
	 * Client URI
	 */
	client_uri?: string;
	/**
	 * Creation timestamp
	 */
	created_at?: string;
	/**
	 * Client ID
	 */
	id: string;
	/**
	 * Logo URI
	 */
	logo_uri?: string;
	/**
	 * Organization ID
	 */
	organization_id?: string;
	/**
	 * Authorized post-logout redirect URIs
	 */
	post_logout_redirect_uris?: Array<string>;
	/**
	 * Whether client is public
	 */
	public: boolean;
	/**
	 * Authorized redirect URIs
	 */
	redirect_uris: Array<string>;
	/**
	 * Refresh token expiry in seconds
	 */
	refresh_token_expiry_seconds?: bigint;
	/**
	 * Whether user consent is required
	 */
	requires_consent?: boolean;
	/**
	 * Whether PKCE is required
	 */
	requires_pkce?: boolean;
	/**
	 * Access token expiry in seconds
	 */
	token_expiry_seconds?: bigint;
	/**
	 * Last update timestamp
	 */
	updated_at?: string;
};

/**
 * OAuth scope information
 */
export type OAuthScopeResponse = {
	/**
	 * Whether this scope is included by default
	 */
	default_scope: boolean;
	/**
	 * Scope description
	 */
	description: string;
	/**
	 * Scope ID
	 */
	id: string;
	/**
	 * Scope name
	 */
	name: string;
	/**
	 * Whether this scope can be requested by any client
	 */
	public: boolean;
};

export type OidcConfigurationResponseBody = {
	authorization_endpoint: string;
	claims_supported?: Array<string>;
	grant_types_supported?: Array<string>;
	id_token_signing_alg_values_supported?: Array<string>;
	issuer: string;
	jwks_uri: string;
	registration_endpoint?: string;
	response_modes_supported?: Array<string>;
	response_types_supported?: Array<string>;
	scopes_supported?: Array<string>;
	subject_types_supported?: Array<string>;
	token_endpoint: string;
	token_endpoint_auth_methods_supported?: Array<string>;
	userinfo_endpoint: string;
};

/**
 * Organization ID
 */
export type OrgId = {
	/**
	 * Organization ID
	 */
	id: string;
};

/**
 * Organization feature information
 */
export type OrganizationFeatureResponse = {
	/**
	 * Feature component category
	 */
	component?: string;
	/**
	 * Feature description
	 */
	description?: string;
	/**
	 * Whether feature is enabled
	 */
	enabled: boolean;
	/**
	 * Feature ID
	 */
	id: string;
	/**
	 * Whether feature is premium
	 */
	is_premium?: boolean;
	/**
	 * Feature key
	 */
	key: string;
	/**
	 * Feature name
	 */
	name: string;
	/**
	 * Feature settings
	 */
	settings?: {
		[key: string]: unknown;
	};
};

/**
 * Organization member information
 */
export type OrganizationMemberResponse = {
	/**
	 * User email
	 */
	email: string;
	/**
	 * User first name
	 */
	first_name?: string;
	/**
	 * User ID
	 */
	id: string;
	/**
	 * When user joined the organization
	 */
	joined_at: string;
	/**
	 * User last name
	 */
	last_name?: string;
	/**
	 * User roles in organization
	 */
	roles: Array<string>;
};

/**
 * Organization information
 */
export type OrganizationResponse = {
	/**
	 * Whether organization is active
	 */
	active: boolean;
	/**
	 * Creation timestamp
	 */
	created_at: string;
	/**
	 * Organization domain
	 */
	domain?: string;
	/**
	 * Organization ID
	 */
	id: string;
	/**
	 * Organization logo URL
	 */
	logo_url?: string;
	/**
	 * Organization metadata
	 */
	metadata?: {
		[key: string]: unknown;
	};
	/**
	 * Organization name
	 */
	name: string;
	/**
	 * Organization plan
	 */
	plan?: string;
	/**
	 * Organization slug
	 */
	slug: string;
	/**
	 * Trial end date
	 */
	trial_ends_at?: string;
	/**
	 * Whether trial has been used
	 */
	trial_used?: boolean;
	/**
	 * Last update timestamp
	 */
	updated_at: string;
};

/**
 * Pagination parameters
 */
export type Pagination = {
	/**
	 * Current page number
	 */
	current_page: bigint;
	/**
	 * Has next page
	 */
	has_next: boolean;
	/**
	 * Has previous page
	 */
	has_previous: boolean;
	/**
	 * Limit
	 */
	limit: bigint;
	/**
	 * Offset
	 */
	offset: bigint;
	/**
	 * Total number of items
	 */
	total: bigint;
	/**
	 * Total number of pages
	 */
	total_pages: bigint;
};

/**
 * Pagination response
 */
export type PaginationResponse = {
	pagination: Pagination;
};

/**
 * Begin passkey authentication request
 */
export type PasskeyLoginBeginRequest = {
	[key: string]: unknown;
};

/**
 * Complete passkey authentication request
 */
export type PasskeyLoginCompleteRequest = {
	/**
	 * WebAuthn assertion response
	 */
	response: unknown;
	/**
	 * Authentication session ID
	 */
	session_id: string;
};

/**
 * Begin passkey registration request
 */
export type PasskeyRegisterBeginRequest = {
	/**
	 * Name of the device
	 */
	device_name?: string;
	/**
	 * Type of the device
	 */
	device_type?: string;
};

/**
 * Complete passkey registration request
 */
export type PasskeyRegisterCompleteRequest = {
	/**
	 * Name of the device
	 */
	device_name?: string;
	/**
	 * Type of the device
	 */
	device_type?: string;
	/**
	 * WebAuthn credential creation response
	 */
	response: unknown;
	/**
	 * Registration session ID
	 */
	session_id: string;
};

/**
 * Passwordless email login request
 */
export type PasswordlessEmailRequest = {
	/**
	 * User email
	 */
	email: string;
	/**
	 * URL to redirect after successful authentication
	 */
	redirect_url?: string;
};

/**
 * Passwordless SMS login request
 */
export type PasswordlessSmsRequest = {
	/**
	 * User phone number
	 */
	phone_number: string;
	/**
	 * URL to redirect after successful authentication
	 */
	redirect_url?: string;
};

/**
 * Passwordless verification request
 */
export type PasswordlessVerifyRequest = {
	/**
	 * Authentication type
	 */
	auth_type: "email" | "sms";
	/**
	 * Verification code for SMS authentication
	 */
	code?: string;
	/**
	 * Phone number for SMS authentication
	 */
	phone_number?: string;
	/**
	 * Verification token for email authentication
	 */
	token?: string;
};

/**
 * Permission information
 */
export type PermissionResponse = {
	/**
	 * Action this permission allows
	 */
	action: string;
	/**
	 * JSON expression for conditional access
	 */
	conditions?: string;
	/**
	 * Creation timestamp
	 */
	created_at: string;
	/**
	 * Permission description
	 */
	description: string;
	/**
	 * Permission ID
	 */
	id: string;
	/**
	 * Permission name
	 */
	name: string;
	/**
	 * Resource this permission applies to
	 */
	resource: string;
	/**
	 * Whether this is a system permission
	 */
	system: boolean;
	/**
	 * Last update timestamp
	 */
	updated_at?: string;
};

export type ProviderCallbackResponseBody = {
	/**
	 * Whether authentication was successful
	 */
	authenticated: boolean;
	/**
	 * Success or error message
	 */
	message: string;
	user?: User;
};

export type ProviderCallbackResponseBody2 = {
	/**
	 * Whether authentication was successful
	 */
	authenticated: boolean;
	user?: User;
};

/**
 * Readiness check response
 */
export type ReadyResponse = {
	/**
	 * Readiness status
	 */
	status: "ready" | "not_ready";
	/**
	 * Timestamp of health check
	 */
	timestamp: Date;
};

/**
 * Refresh token request
 */
export type RefreshTokenRequest = {
	/**
	 * JWTAuth refresh token
	 */
	refresh_token: string;
};

/**
 * Refresh token response
 */
export type RefreshTokenResponse = {
	/**
	 * Token expiry timestamp
	 */
	expires_at: bigint;
	/**
	 * New refresh token
	 */
	refresh_token: string;
	/**
	 * New JWTAuth access token
	 */
	token: string;
};

export type RegisterBeginResponseBody = {
	/**
	 * WebAuthn credential creation options
	 */
	options: unknown;
	/**
	 * Registration session ID
	 */
	session_id: string;
};

/**
 * User registration data
 */
export type RegisterRequest = {
	/**
	 * User email
	 */
	email: string;
	/**
	 * User first name
	 */
	first_name?: string;
	/**
	 * User last name
	 */
	last_name?: string;
	/**
	 * Additional user metadata
	 */
	metadata?: {
		[key: string]: unknown;
	};
	/**
	 * Organization ID if creating a user for a specific organization
	 */
	organization_id?: string;
	/**
	 * User password
	 */
	password: string;
};

/**
 * Registered passkey information
 */
export type RegisteredPasskey = {
	/**
	 * Device type
	 */
	device_type: string;
	/**
	 * Passkey ID
	 */
	id: string;
	/**
	 * Last usage timestamp
	 */
	last_used?: string;
	/**
	 * Passkey name
	 */
	name: string;
	/**
	 * Registration timestamp
	 */
	registered_at: string;
};

/**
 * Reset password request
 */
export type ResetPasswordRequest = {
	/**
	 * New password
	 */
	new_password: string;
	/**
	 * Password reset token
	 */
	token: string;
};

/**
 * Role information
 */
export type RoleResponse = {
	/**
	 * Creation timestamp
	 */
	created_at: string;
	/**
	 * Role description
	 */
	description?: string;
	/**
	 * Role ID
	 */
	id: string;
	/**
	 * Whether this is a default role for new users
	 */
	is_default: boolean;
	/**
	 * Role name
	 */
	name: string;
	/**
	 * Organization ID
	 */
	organization_id?: string;
	/**
	 * Permissions assigned to this role
	 */
	permissions?: Array<PermissionResponse>;
	/**
	 * Whether this is a system role
	 */
	system: boolean;
	/**
	 * Last update timestamp
	 */
	updated_at?: string;
};

/**
 * Rotate client secret request
 */
export type RotateClientSecretRequest = {
	/**
	 * OAuth client ID
	 */
	client_id: string;
};

export type RotateClientSecretResponseBody = {
	client_id: string;
	client_secret: string;
};

/**
 * SSO Provider information
 */
export type SsoProvider = {
	/**
	 * Provider icon URL
	 */
	icon_url?: string;
	/**
	 * Provider ID
	 */
	id: string;
	/**
	 * Provider name
	 */
	name: string;
	/**
	 * Provider type (oauth2, oidc, saml)
	 */
	type: string;
};

export type SamlMetadataResponseBody = {
	/**
	 * SAML metadata XML
	 */
	metadata: string;
};

export type SendCodeRequestBody = {
	request: SendMfaCodeRequest;
};

/**
 * Send email request
 */
export type SendEmailRequest = {
	/**
	 * BCC recipients
	 */
	bcc?: Array<string>;
	/**
	 * CC recipients
	 */
	cc?: Array<string>;
	/**
	 * Sender email
	 */
	from?: string;
	/**
	 * Custom headers
	 */
	headers?: {
		[key: string]: string;
	};
	/**
	 * HTML content
	 */
	html_content?: string;
	/**
	 * Email metadata
	 */
	metadata?: {
		[key: string]: unknown;
	};
	/**
	 * Reply-to address
	 */
	reply_to?: string;
	/**
	 * Email subject
	 */
	subject: string;
	/**
	 * Text content
	 */
	text_content?: string;
	/**
	 * Recipients
	 */
	to: Array<string>;
};

/**
 * Send email verification request
 */
export type SendEmailVerificationRequest = {
	/**
	 * User email
	 */
	email: string;
	/**
	 * URL to redirect after verification (for link verification)
	 */
	redirect_url?: string;
	/**
	 * Verification type (link or otp)
	 */
	verification_type?: "link" | "otp";
};

export type SendEmailVerificationRequestBody = {
	/**
	 * User email
	 */
	email: string;
	/**
	 * Verification type (link or otp)
	 */
	verification_type?: "link" | "otp";
};

export type SendEmailVerificationResponseBody = {
	/**
	 * When the verification code/link expires
	 */
	expires_at: bigint;
	/**
	 * Success message
	 */
	message: string;
};

/**
 * Send MFA code request
 */
export type SendMfaCodeRequest = {
	/**
	 * MFA method
	 */
	method: "sms" | "email";
};

export type SendResponseBody = {
	/**
	 * Success message
	 */
	message: string;
};

/**
 * Send template email request
 */
export type SendTemplateEmailRequest = {
	/**
	 * BCC recipients
	 */
	bcc?: Array<string>;
	/**
	 * CC recipients
	 */
	cc?: Array<string>;
	/**
	 * Sender email
	 */
	from?: string;
	/**
	 * Custom headers
	 */
	headers?: {
		[key: string]: string;
	};
	/**
	 * Template locale
	 */
	locale?: string;
	/**
	 * Email metadata
	 */
	metadata?: {
		[key: string]: unknown;
	};
	/**
	 * Organization ID
	 */
	organization_id?: string;
	/**
	 * Reply-to address
	 */
	reply_to?: string;
	/**
	 * Custom subject (overrides template subject)
	 */
	subject?: string;
	/**
	 * Template data
	 */
	template_data: {
		[key: string]: unknown;
	};
	/**
	 * Template type
	 */
	template_type: string;
	/**
	 * Recipients
	 */
	to: Array<string>;
};

/**
 * User session information
 */
export type Session = {
	/**
	 * Created At
	 */
	created_at: Date;
	/**
	 * Device ID
	 */
	device_id?: string;
	/**
	 * Expiry timestamp
	 */
	expires_at: Date;
	/**
	 * Created At
	 */
	id: string;
	/**
	 * IP address
	 */
	ip_address?: string;
	/**
	 * Session is active
	 */
	is_active?: boolean;
	/**
	 * Last activity timestamp
	 */
	last_active_at?: Date;
	/**
	 * Location
	 */
	location?: string;
	/**
	 * Session metadata
	 */
	metadata?: {
		[key: string]: unknown;
	};
	/**
	 * Organization ID
	 */
	organization_id?: string;
	/**
	 * Session token
	 */
	token?: string;
	/**
	 * Updated At
	 */
	updated_at: Date;
	/**
	 * User agent string
	 */
	user_agent?: string;
	/**
	 * User ID
	 */
	user_id?: string;
};

/**
 * TOTP enrollment response
 */
export type TotpEnrollResponse = {
	/**
	 * TOTP QR code as base64 image
	 */
	qr_code_data: string;
	/**
	 * TOTP secret key
	 */
	secret: string;
	/**
	 * TOTP URI for QR code generation
	 */
	uri: string;
};

/**
 * RFC3339 formatted timestamp
 */
export type Timestamp = {
	/**
	 * Timestamp
	 */
	time: Date;
};

export type TokenResponseBody = {
	/**
	 * Access token
	 */
	access_token: string;
	/**
	 * Token expiry in seconds
	 */
	expires_in: bigint;
	/**
	 * Refresh token
	 */
	refresh_token?: string;
	/**
	 * Granted scopes
	 */
	scope?: string;
	/**
	 * Token type
	 */
	token_type: string;
};

/**
 * Trigger webhook event request
 */
export type TriggerEventRequest = {
	/**
	 * Event type
	 */
	event_type: string;
	/**
	 * Custom headers
	 */
	headers?: {
		[key: string]: string;
	};
	/**
	 * Event payload
	 */
	payload: unknown;
};

export type TriggerEventRequestBody = {
	event: TriggerEventRequest;
	/**
	 * Organization ID
	 */
	organization_id: string;
};

/**
 * Unauthorized response
 */
export type UnauthorizedError = {
	/**
	 * Error code
	 */
	code: string;
	/**
	 * Additional error details
	 */
	details?: unknown;
	/**
	 * Unique error ID
	 */
	id?: string;
	/**
	 * Error message
	 */
	message: string;
};

export type UnenrollRequestBody = {
	request: MfaUnEnrollRequest;
};

/**
 * Update API key request
 */
export type UpdateApiKeyRequest = {
	/**
	 * Whether API key is active
	 */
	active?: boolean;
	/**
	 * Expiry timestamp
	 */
	expires_at?: string;
	/**
	 * Key metadata
	 */
	metadata?: {
		[key: string]: unknown;
	};
	/**
	 * API key name
	 */
	name?: string;
	/**
	 * Key permissions
	 */
	permissions?: Array<string>;
	/**
	 * Key scopes
	 */
	scopes?: Array<string>;
};

export type UpdateClientRequestBody = {
	client: UpdateOAuthClientRequest;
};

/**
 * Update email template request
 */
export type UpdateEmailTemplateRequest = {
	/**
	 * Whether template is active
	 */
	active?: boolean;
	/**
	 * HTML content
	 */
	html_content?: string;
	/**
	 * Template locale
	 */
	locale?: string;
	/**
	 * Template metadata
	 */
	metadata?: {
		[key: string]: unknown;
	};
	/**
	 * Template name
	 */
	name?: string;
	/**
	 * Email subject
	 */
	subject?: string;
	/**
	 * Text content
	 */
	text_content?: string;
};

/**
 * Update identity provider request
 */
export type UpdateIdentityProviderRequest = {
	/**
	 * Whether provider is active
	 */
	active?: boolean;
	/**
	 * Attributes mapping
	 */
	attributes_mapping?: {
		[key: string]: string;
	};
	/**
	 * OAuth/OIDC authorization endpoint
	 */
	authorization_endpoint?: string;
	/**
	 * SAML certificate
	 */
	certificate?: string;
	/**
	 * OAuth/OIDC client ID
	 */
	client_id?: string;
	/**
	 * OAuth/OIDC client secret
	 */
	client_secret?: string;
	/**
	 * Allowed email domains
	 */
	domains?: Array<string>;
	/**
	 * OIDC issuer URL
	 */
	issuer?: string;
	/**
	 * OIDC JWKS URI
	 */
	jwks_uri?: string;
	/**
	 * SAML metadata URL
	 */
	metadata_url?: string;
	/**
	 * Provider name
	 */
	name?: string;
	/**
	 * Whether this is the primary provider
	 */
	primary?: boolean;
	/**
	 * SAML private key
	 */
	private_key?: string;
	/**
	 * OAuth/OIDC redirect URI
	 */
	redirect_uri?: string;
	/**
	 * OAuth/OIDC token endpoint
	 */
	token_endpoint?: string;
	/**
	 * OIDC userinfo endpoint
	 */
	userinfo_endpoint?: string;
};

export type UpdateIdentityProviderRequestBody = {
	provider: UpdateIdentityProviderRequest;
};

export type UpdateMemberRequestBody = {
	member: UpdateOrganizationMemberRequest;
};

/**
 * Update OAuth client request
 */
export type UpdateOAuthClientRequest = {
	/**
	 * Whether client is active
	 */
	active?: boolean;
	/**
	 * Allowed CORS origins
	 */
	allowed_cors_origins?: Array<string>;
	/**
	 * Allowed grant types
	 */
	allowed_grant_types?: Array<string>;
	/**
	 * Client description
	 */
	client_description?: string;
	/**
	 * Client name
	 */
	client_name?: string;
	/**
	 * Client URI
	 */
	client_uri?: string;
	/**
	 * Logo URI
	 */
	logo_uri?: string;
	/**
	 * Authorized post-logout redirect URIs
	 */
	post_logout_redirect_uris?: Array<string>;
	/**
	 * Whether client is public
	 */
	public?: boolean;
	/**
	 * Authorized redirect URIs
	 */
	redirect_uris?: Array<string>;
	/**
	 * Refresh token expiry in seconds
	 */
	refresh_token_expiry_seconds?: bigint;
	/**
	 * Whether user consent is required
	 */
	requires_consent?: boolean;
	/**
	 * Whether PKCE is required
	 */
	requires_pkce?: boolean;
	/**
	 * Access token expiry in seconds
	 */
	token_expiry_seconds?: bigint;
};

/**
 * Update organization member request
 */
export type UpdateOrganizationMemberRequest = {
	/**
	 * Roles to assign
	 */
	roles: Array<string>;
};

/**
 * Update organization request
 */
export type UpdateOrganizationRequest = {
	/**
	 * Whether organization is active
	 */
	active?: boolean;
	/**
	 * Organization domain
	 */
	domain?: string;
	/**
	 * Organization logo URL
	 */
	logo_url?: string;
	/**
	 * Organization metadata
	 */
	metadata?: {
		[key: string]: unknown;
	};
	/**
	 * Organization name
	 */
	name?: string;
	/**
	 * Organization plan
	 */
	plan?: string;
};

/**
 * Update passkey request
 */
export type UpdatePasskeyRequest = {
	/**
	 * New passkey name
	 */
	name: string;
};

/**
 * Update password request
 */
export type UpdatePasswordRequest = {
	/**
	 * Current password
	 */
	current_password: string;
	/**
	 * New password
	 */
	new_password: string;
};

/**
 * Update permission request
 */
export type UpdatePermissionRequest = {
	/**
	 * JSON expression for conditional access
	 */
	conditions?: string;
	/**
	 * Permission description
	 */
	description?: string;
	/**
	 * Permission name
	 */
	name?: string;
};

export type UpdatePermissionRequestBody = {
	permission: UpdatePermissionRequest;
};

export type UpdateRequestBody = {
	key: UpdateApiKeyRequest;
};

export type UpdateRequestBody2 = {
	organization: UpdateOrganizationRequest;
};

export type UpdateRequestBody3 = {
	request: UpdatePasskeyRequest;
};

export type UpdateRequestBody4 = {
	user: UpdateUserRequest;
};

export type UpdateRequestBody5 = {
	webhook: UpdateWebhookRequest;
};

/**
 * Update role request
 */
export type UpdateRoleRequest = {
	/**
	 * Role description
	 */
	description?: string;
	/**
	 * Whether this is a default role for new users
	 */
	is_default?: boolean;
	/**
	 * Role name
	 */
	name?: string;
};

export type UpdateRoleRequestBody = {
	role: UpdateRoleRequest;
};

export type UpdateScopeRequestBody = {
	/**
	 * Whether this scope is included by default
	 */
	default_scope?: boolean;
	/**
	 * Scope description
	 */
	description?: string;
	/**
	 * Whether this scope can be requested by any client
	 */
	public?: boolean;
};

export type UpdateTemplateRequestBody = {
	template: UpdateEmailTemplateRequest;
};

/**
 * Update user request
 */
export type UpdateUserRequest = {
	/**
	 * Whether user is active
	 */
	active?: boolean;
	/**
	 * User first name
	 */
	first_name?: string;
	/**
	 * User last name
	 */
	last_name?: string;
	/**
	 * User locale
	 */
	locale?: string;
	/**
	 * User metadata
	 */
	metadata?: {
		[key: string]: unknown;
	};
	/**
	 * User phone number
	 */
	phone_number?: string;
	/**
	 * Primary organization ID
	 */
	primary_organization_id?: string;
	/**
	 * Profile image URL
	 */
	profile_image_url?: string;
};

/**
 * Update webhook request
 */
export type UpdateWebhookRequest = {
	/**
	 * Whether webhook is active
	 */
	active?: boolean;
	/**
	 * Event types to subscribe to
	 */
	event_types?: Array<string>;
	/**
	 * Payload format
	 */
	format?: "json" | "form";
	/**
	 * Webhook metadata
	 */
	metadata?: {
		[key: string]: unknown;
	};
	/**
	 * Webhook name
	 */
	name?: string;
	/**
	 * Number of retries on failure
	 */
	retry_count?: bigint;
	/**
	 * Timeout in milliseconds
	 */
	timeout_ms?: bigint;
	/**
	 * Webhook URL
	 */
	url?: string;
};

/**
 * User information
 */
export type User = {
	/**
	 * Whether account is active
	 */
	active: boolean;
	/**
	 * Email address
	 */
	email: string;
	/**
	 * Whether email is verified
	 */
	email_verified: boolean;
	/**
	 * User first name
	 */
	first_name?: string;
	/**
	 * User last name
	 */
	last_name?: string;
	/**
	 * User locale
	 */
	locale?: string;
	/**
	 * User metadata
	 */
	metadata?: {
		[key: string]: unknown;
	};
	/**
	 * User phone number
	 */
	phone_number?: string;
	/**
	 * Whether phone is verified
	 */
	phone_verified?: boolean;
	/**
	 * URL to user's profile image
	 */
	profile_image_url?: string;
};

/**
 * User ID
 */
export type UserId = {
	/**
	 * User ID
	 */
	id: string;
};

export type UserinfoResponseBody = {
	/**
	 * Birth date
	 */
	birthdate?: string;
	/**
	 * Email address
	 */
	email?: string;
	/**
	 * Whether email is verified
	 */
	email_verified?: boolean;
	/**
	 * Last name
	 */
	family_name?: string;
	/**
	 * Gender
	 */
	gender?: string;
	/**
	 * First name
	 */
	given_name?: string;
	/**
	 * Locale
	 */
	locale?: string;
	/**
	 * Middle name
	 */
	middle_name?: string;
	/**
	 * Full name
	 */
	name?: string;
	/**
	 * Nickname
	 */
	nickname?: string;
	/**
	 * Phone number
	 */
	phone_number?: string;
	/**
	 * Whether phone number is verified
	 */
	phone_number_verified?: boolean;
	/**
	 * Picture URL
	 */
	picture?: string;
	/**
	 * Preferred username
	 */
	preferred_username?: string;
	/**
	 * Profile URL
	 */
	profile?: string;
	/**
	 * Subject (user ID)
	 */
	sub: string;
	/**
	 * Last update timestamp
	 */
	updated_at?: bigint;
	/**
	 * Website URL
	 */
	website?: string;
	/**
	 * Time zone
	 */
	zoneinfo?: string;
};

export type ValidateResponseBody = {
	key?: ApiKeyResponse;
	/**
	 * Whether key is valid
	 */
	valid: boolean;
};

/**
 * Email verification request
 */
export type VerifyEmailRequest = {
	/**
	 * User email
	 */
	email: string;
	/**
	 * Verification method (link or otp)
	 */
	method: "link" | "otp";
	/**
	 * One-time password for OTP verification
	 */
	otp?: string;
	/**
	 * Email verification token for link verification
	 */
	token?: string;
};

export type VerifyRequestBody = {
	request: MfaVerifyRequest;
};

export type VerifyResponseBody = {
	/**
	 * Whether authentication was successful
	 */
	authenticated: boolean;
	/**
	 * User email
	 */
	email?: string;
	user?: User;
	/**
	 * User ID
	 */
	user_id: string;
};

export type VersionResponseBody = {
	/**
	 * Build date
	 */
	build_date: Date;
	/**
	 * Git commit hash
	 */
	git_commit?: string;
	/**
	 * Go version
	 */
	go_version?: string;
	/**
	 * System version
	 */
	version: string;
};

/**
 * Webhook event information
 */
export type WebhookEventResponse = {
	/**
	 * Number of delivery attempts
	 */
	attempts: bigint;
	/**
	 * Creation timestamp
	 */
	created_at: string;
	/**
	 * Whether event was delivered
	 */
	delivered: boolean;
	/**
	 * Delivery timestamp
	 */
	delivered_at?: string;
	/**
	 * Error from last attempt
	 */
	error?: string;
	/**
	 * Event type
	 */
	event_type: string;
	/**
	 * Event headers
	 */
	headers?: {
		[key: string]: string;
	};
	/**
	 * Event ID
	 */
	id: string;
	/**
	 * Next retry timestamp
	 */
	next_retry?: string;
	/**
	 * Event payload
	 */
	payload?: unknown;
	/**
	 * Response from last attempt
	 */
	response_body?: string;
	/**
	 * HTTP status code from last attempt
	 */
	status_code?: bigint;
	/**
	 * Last update timestamp
	 */
	updated_at?: string;
	/**
	 * Webhook ID
	 */
	webhook_id: string;
};

/**
 * Webhook information
 */
export type WebhookResponse = {
	/**
	 * Whether webhook is active
	 */
	active: boolean;
	/**
	 * Creation timestamp
	 */
	created_at: string;
	/**
	 * Event types webhook subscribes to
	 */
	event_types: Array<string>;
	/**
	 * Payload format (json/form)
	 */
	format?: string;
	/**
	 * Webhook ID
	 */
	id: string;
	/**
	 * Webhook metadata
	 */
	metadata?: {
		[key: string]: unknown;
	};
	/**
	 * Webhook name
	 */
	name: string;
	/**
	 * Organization ID
	 */
	organization_id: string;
	/**
	 * Number of retries on failure
	 */
	retry_count?: bigint;
	/**
	 * Timeout in milliseconds
	 */
	timeout_ms?: bigint;
	/**
	 * Last update timestamp
	 */
	updated_at?: string;
	/**
	 * Webhook URL
	 */
	url: string;
	/**
	 * Webhook version
	 */
	version?: string;
};

/**
 * Webhook creation response with secret
 */
export type WebhookSecretResponse = {
	/**
	 * Whether webhook is active
	 */
	active: boolean;
	/**
	 * Creation timestamp
	 */
	created_at: string;
	/**
	 * Event types webhook subscribes to
	 */
	event_types: Array<string>;
	/**
	 * Payload format (json/form)
	 */
	format?: string;
	/**
	 * Webhook ID
	 */
	id: string;
	/**
	 * Webhook metadata
	 */
	metadata?: {
		[key: string]: unknown;
	};
	/**
	 * Webhook name
	 */
	name: string;
	/**
	 * Organization ID
	 */
	organization_id: string;
	/**
	 * Number of retries on failure
	 */
	retry_count?: bigint;
	/**
	 * Webhook secret for signature verification
	 */
	secret: string;
	/**
	 * Timeout in milliseconds
	 */
	timeout_ms?: bigint;
	/**
	 * Last update timestamp
	 */
	updated_at?: string;
	/**
	 * Webhook URL
	 */
	url: string;
	/**
	 * Webhook version
	 */
	version?: string;
};

export type WebHomeData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/";
};

export type HealthDebugData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/__debug";
};

export type HealthDebugResponses = {
	/**
	 * OK response.
	 */
	200: unknown;
};

export type HealthCheckData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/__health";
};

export type HealthCheckErrors = {
	/**
	 * Service Unavailable response.
	 */
	503: HealthResponse;
};

export type HealthCheckError = HealthCheckErrors[keyof HealthCheckErrors];

export type HealthCheckResponses = {
	/**
	 * OK response.
	 */
	200: HealthResponse;
};

export type HealthCheckResponse =
	HealthCheckResponses[keyof HealthCheckResponses];

export type HealthMetricsData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/__metrics";
};

export type HealthMetricsResponses = {
	/**
	 * OK response.
	 */
	200: MetricsResponseBody;
};

export type HealthMetricsResponse =
	HealthMetricsResponses[keyof HealthMetricsResponses];

export type HealthReadyData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/__ready";
};

export type HealthReadyErrors = {
	/**
	 * Service Unavailable response.
	 */
	503: ReadyResponse;
};

export type HealthReadyError = HealthReadyErrors[keyof HealthReadyErrors];

export type HealthReadyResponses = {
	/**
	 * OK response.
	 */
	200: ReadyResponse;
};

export type HealthReadyResponse =
	HealthReadyResponses[keyof HealthReadyResponses];

export type HealthVersionData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/__version";
};

export type HealthVersionResponses = {
	/**
	 * OK response.
	 */
	200: VersionResponseBody;
};

export type HealthVersionResponse =
	HealthVersionResponses[keyof HealthVersionResponses];

export type AdminHome1Data = {
	body?: never;
	path?: never;
	query?: never;
	url: "/admin";
};

export type AdminAdminFilepathData = {
	body?: never;
	path: {
		/**
		 * Relative file path
		 */
		filepath: unknown;
	};
	query?: never;
	url: "/admin/{*filepath}";
};

export type AdminAdminFilepathErrors = {
	/**
	 * File not found
	 */
	404: unknown;
};

export type AdminAdminFilepathResponses = {
	/**
	 * File not found
	 */
	200: unknown;
};

export type AdminFaviconIcoData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/favicon.ico";
};

export type AdminFaviconIcoResponses = {
	/**
	 * File downloaded
	 */
	200: unknown;
};

export type AdminRobotsTxtData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/robots.txt";
};

export type AdminRobotsTxtResponses = {
	/**
	 * File downloaded
	 */
	200: unknown;
};

export type WebHome1Data = {
	body?: never;
	path?: never;
	query?: never;
	url: "/ui";
};

export type WebUiFilepathData = {
	body?: never;
	path: {
		/**
		 * Relative file path
		 */
		filepath: unknown;
	};
	query?: never;
	url: "/ui/{*filepath}";
};

export type WebUiFilepathErrors = {
	/**
	 * File not found
	 */
	404: unknown;
};

export type WebUiFilepathResponses = {
	/**
	 * File not found
	 */
	200: unknown;
};

export type RbacCheckPermissionData = {
	body?: never;
	path?: never;
	query: {
		/**
		 * Resource to check
		 */
		resource: string;
		/**
		 * Action to check
		 */
		action: string;
	};
	url: "/v1/access/check";
};

export type RbacCheckPermissionErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * conflict: Conflict response.
	 */
	409: ConflictError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type RbacCheckPermissionError =
	RbacCheckPermissionErrors[keyof RbacCheckPermissionErrors];

export type RbacCheckPermissionResponses = {
	/**
	 * OK response.
	 */
	200: CheckPermissionResponseBody;
};

export type RbacCheckPermissionResponse =
	RbacCheckPermissionResponses[keyof RbacCheckPermissionResponses];

export type RbacCheckRoleData = {
	body?: never;
	path?: never;
	query: {
		/**
		 * Role name to check
		 */
		role: string;
		/**
		 * Organization ID
		 */
		organization_id?: string;
	};
	url: "/v1/access/check-role";
};

export type RbacCheckRoleErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * conflict: Conflict response.
	 */
	409: ConflictError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type RbacCheckRoleError = RbacCheckRoleErrors[keyof RbacCheckRoleErrors];

export type RbacCheckRoleResponses = {
	/**
	 * OK response.
	 */
	200: CheckRoleResponseBody;
};

export type RbacCheckRoleResponse =
	RbacCheckRoleResponses[keyof RbacCheckRoleResponses];

export type ApiKeysListData = {
	body?: never;
	path?: never;
	query?: {
		/**
		 * Pagination offset
		 */
		offset?: bigint;
		/**
		 * Number of items to return
		 */
		limit?: bigint;
		/**
		 * Filter by key type
		 */
		type?: "client" | "server";
		/**
		 * Filter by organization ID
		 */
		organization_id?: string;
	};
	url: "/v1/api-keys";
};

export type ApiKeysListErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type ApiKeysListError = ApiKeysListErrors[keyof ApiKeysListErrors];

export type ApiKeysListResponses = {
	/**
	 * OK response.
	 */
	200: ListResponseBody;
};

export type ApiKeysListResponse =
	ApiKeysListResponses[keyof ApiKeysListResponses];

export type ApiKeysCreateData = {
	body: CreateRequestBody;
	path?: never;
	query?: never;
	url: "/v1/api-keys";
};

export type ApiKeysCreateErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type ApiKeysCreateError = ApiKeysCreateErrors[keyof ApiKeysCreateErrors];

export type ApiKeysCreateResponses = {
	/**
	 * Created response.
	 */
	201: ApiKeyWithSecretResponse;
};

export type ApiKeysCreateResponse =
	ApiKeysCreateResponses[keyof ApiKeysCreateResponses];

export type ApiKeysValidateData = {
	body?: never;
	path?: never;
	query: {
		/**
		 * API key to validate
		 */
		api_key: string;
	};
	url: "/v1/api-keys/validate";
};

export type ApiKeysValidateErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type ApiKeysValidateError =
	ApiKeysValidateErrors[keyof ApiKeysValidateErrors];

export type ApiKeysValidateResponses = {
	/**
	 * OK response.
	 */
	200: ValidateResponseBody;
};

export type ApiKeysValidateResponse =
	ApiKeysValidateResponses[keyof ApiKeysValidateResponses];

export type ApiKeysDeleteData = {
	body?: never;
	path: {
		/**
		 * API key ID
		 */
		id: string;
	};
	query?: never;
	url: "/v1/api-keys/{id}";
};

export type ApiKeysDeleteErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type ApiKeysDeleteError = ApiKeysDeleteErrors[keyof ApiKeysDeleteErrors];

export type ApiKeysDeleteResponses = {
	/**
	 * No Content response.
	 */
	204: void;
};

export type ApiKeysDeleteResponse =
	ApiKeysDeleteResponses[keyof ApiKeysDeleteResponses];

export type ApiKeysGetData = {
	body?: never;
	path: {
		/**
		 * API key ID
		 */
		id: string;
	};
	query?: never;
	url: "/v1/api-keys/{id}";
};

export type ApiKeysGetErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type ApiKeysGetError = ApiKeysGetErrors[keyof ApiKeysGetErrors];

export type ApiKeysGetResponses = {
	/**
	 * OK response.
	 */
	200: ApiKeyResponse;
};

export type ApiKeysGetResponse = ApiKeysGetResponses[keyof ApiKeysGetResponses];

export type ApiKeysUpdateData = {
	body: UpdateRequestBody;
	path: {
		/**
		 * API key ID
		 */
		id: string;
	};
	query?: never;
	url: "/v1/api-keys/{id}";
};

export type ApiKeysUpdateErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type ApiKeysUpdateError = ApiKeysUpdateErrors[keyof ApiKeysUpdateErrors];

export type ApiKeysUpdateResponses = {
	/**
	 * OK response.
	 */
	200: ApiKeyResponse;
};

export type ApiKeysUpdateResponse =
	ApiKeysUpdateResponses[keyof ApiKeysUpdateResponses];

export type AuthCheckEmailVerificationData = {
	body?: never;
	path?: never;
	query: {
		/**
		 * User email
		 */
		email: string;
	};
	url: "/v1/auth/check-verification";
};

export type AuthCheckEmailVerificationErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * conflict: Conflict response.
	 */
	409: ConflictError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type AuthCheckEmailVerificationError =
	AuthCheckEmailVerificationErrors[keyof AuthCheckEmailVerificationErrors];

export type AuthCheckEmailVerificationResponses = {
	/**
	 * OK response.
	 */
	200: CheckEmailVerificationResponseBody;
};

export type AuthCheckEmailVerificationResponse =
	AuthCheckEmailVerificationResponses[keyof AuthCheckEmailVerificationResponses];

export type AuthCsrfData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/v1/auth/csrf-token";
};

export type AuthCsrfErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * conflict: Conflict response.
	 */
	409: ConflictError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type AuthCsrfError = AuthCsrfErrors[keyof AuthCsrfErrors];

export type AuthCsrfResponses = {
	/**
	 * OK response.
	 */
	200: CsrfTokenResponse;
};

export type AuthCsrfResponse = AuthCsrfResponses[keyof AuthCsrfResponses];

export type AuthForgotPasswordData = {
	body: ForgotPasswordRequest;
	path?: never;
	query?: {
		/**
		 * URL to redirect after password reset
		 */
		redirect_url?: string;
	};
	url: "/v1/auth/forgot-password";
};

export type AuthForgotPasswordErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * conflict: Conflict response.
	 */
	409: ConflictError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type AuthForgotPasswordError =
	AuthForgotPasswordErrors[keyof AuthForgotPasswordErrors];

export type AuthForgotPasswordResponses = {
	/**
	 * Accepted response.
	 */
	202: SendResponseBody;
};

export type AuthForgotPasswordResponse =
	AuthForgotPasswordResponses[keyof AuthForgotPasswordResponses];

export type AuthLoginData = {
	body: LoginRequest;
	path?: never;
	query?: never;
	url: "/v1/auth/login";
};

export type AuthLoginErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * conflict: Conflict response.
	 */
	409: ConflictError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type AuthLoginError = AuthLoginErrors[keyof AuthLoginErrors];

export type AuthLoginResponses = {
	/**
	 * OK response.
	 */
	200: LoginResponse2;
};

export type AuthLoginResponse = AuthLoginResponses[keyof AuthLoginResponses];

export type AuthLogoutData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/v1/auth/logout";
};

export type AuthLogoutErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * conflict: Conflict response.
	 */
	409: ConflictError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type AuthLogoutError = AuthLogoutErrors[keyof AuthLogoutErrors];

export type AuthLogoutResponses = {
	/**
	 * OK response.
	 */
	200: SendResponseBody;
};

export type AuthLogoutResponse = AuthLogoutResponses[keyof AuthLogoutResponses];

export type AuthMeData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/v1/auth/me";
};

export type AuthMeErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * conflict: Conflict response.
	 */
	409: ConflictError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type AuthMeError = AuthMeErrors[keyof AuthMeErrors];

export type AuthMeResponses = {
	/**
	 * OK response.
	 */
	200: User;
};

export type AuthMeResponse = AuthMeResponses[keyof AuthMeResponses];

export type MfaEnrollData = {
	body: EnrollRequestBody;
	path?: never;
	query?: never;
	url: "/v1/auth/mfa/enroll";
};

export type MfaEnrollErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type MfaEnrollError = MfaEnrollErrors[keyof MfaEnrollErrors];

export type MfaEnrollResponses = {
	/**
	 * OK response.
	 */
	200: EnrollResponseBody;
};

export type MfaEnrollResponse = MfaEnrollResponses[keyof MfaEnrollResponses];

export type MfaMethodsData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/v1/auth/mfa/methods";
};

export type MfaMethodsErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type MfaMethodsError = MfaMethodsErrors[keyof MfaMethodsErrors];

export type MfaMethodsResponses = {
	/**
	 * OK response.
	 */
	200: MethodsResponseBody;
};

export type MfaMethodsResponse = MfaMethodsResponses[keyof MfaMethodsResponses];

export type MfaSendCodeData = {
	body: SendCodeRequestBody;
	path?: never;
	query?: never;
	url: "/v1/auth/mfa/send-code";
};

export type MfaSendCodeErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type MfaSendCodeError = MfaSendCodeErrors[keyof MfaSendCodeErrors];

export type MfaSendCodeResponses = {
	/**
	 * OK response.
	 */
	200: SendEmailVerificationResponseBody;
};

export type MfaSendCodeResponse =
	MfaSendCodeResponses[keyof MfaSendCodeResponses];

export type MfaUnenrollData = {
	body: UnenrollRequestBody;
	path?: never;
	query?: never;
	url: "/v1/auth/mfa/unenroll";
};

export type MfaUnenrollErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type MfaUnenrollError = MfaUnenrollErrors[keyof MfaUnenrollErrors];

export type MfaUnenrollResponses = {
	/**
	 * OK response.
	 */
	200: SendResponseBody;
};

export type MfaUnenrollResponse =
	MfaUnenrollResponses[keyof MfaUnenrollResponses];

export type MfaVerifyData = {
	body: VerifyRequestBody;
	path?: never;
	query?: never;
	url: "/v1/auth/mfa/verify";
};

export type MfaVerifyErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type MfaVerifyError = MfaVerifyErrors[keyof MfaVerifyErrors];

export type MfaVerifyResponses = {
	/**
	 * OK response.
	 */
	200: CheckEmailVerificationResponseBody;
};

export type MfaVerifyResponse = MfaVerifyResponses[keyof MfaVerifyResponses];

export type OauthClientProviderCallbackData = {
	body?: never;
	path: {
		/**
		 * Provider ID
		 */
		provider: string;
	};
	query?: {
		/**
		 * Authorization code
		 */
		code?: string;
		/**
		 * State parameter
		 */
		state?: string;
	};
	url: "/v1/auth/oauth/callback/{provider}";
};

export type OauthClientProviderCallbackErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type OauthClientProviderCallbackError =
	OauthClientProviderCallbackErrors[keyof OauthClientProviderCallbackErrors];

export type OauthClientProviderCallbackResponses = {
	/**
	 * OK response.
	 */
	200: ProviderCallbackResponseBody;
};

export type OauthClientProviderCallbackResponse =
	OauthClientProviderCallbackResponses[keyof OauthClientProviderCallbackResponses];

export type OauthClientListProvidersData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/v1/auth/oauth/providers";
};

export type OauthClientListProvidersErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type OauthClientListProvidersError =
	OauthClientListProvidersErrors[keyof OauthClientListProvidersErrors];

export type OauthClientListProvidersResponses = {
	/**
	 * OK response.
	 */
	200: ListProvidersResponseBody;
};

export type OauthClientListProvidersResponse =
	OauthClientListProvidersResponses[keyof OauthClientListProvidersResponses];

export type OauthClientProviderAuthData = {
	body?: never;
	path: {
		/**
		 * Provider ID
		 */
		provider: string;
	};
	query?: {
		/**
		 * Redirect URI after authentication
		 */
		redirect_uri?: string;
	};
	url: "/v1/auth/oauth/providers/{provider}";
};

export type OauthClientProviderAuthErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type OauthClientProviderAuthError =
	OauthClientProviderAuthErrors[keyof OauthClientProviderAuthErrors];

export type PasskeysListData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/v1/auth/passkeys";
};

export type PasskeysListErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * conflict: Conflict response.
	 */
	409: ConflictError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type PasskeysListError = PasskeysListErrors[keyof PasskeysListErrors];

export type PasskeysListResponses = {
	/**
	 * OK response.
	 */
	200: ListResponseBody3;
};

export type PasskeysListResponse =
	PasskeysListResponses[keyof PasskeysListResponses];

export type PasskeysLoginBeginData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/v1/auth/passkeys/login/begin";
};

export type PasskeysLoginBeginErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * conflict: Conflict response.
	 */
	409: ConflictError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type PasskeysLoginBeginError =
	PasskeysLoginBeginErrors[keyof PasskeysLoginBeginErrors];

export type PasskeysLoginBeginResponses = {
	/**
	 * OK response.
	 */
	200: RegisterBeginResponseBody;
};

export type PasskeysLoginBeginResponse =
	PasskeysLoginBeginResponses[keyof PasskeysLoginBeginResponses];

export type PasskeysLoginCompleteData = {
	body: PasskeyLoginCompleteRequest;
	path?: never;
	query?: never;
	url: "/v1/auth/passkeys/login/complete";
};

export type PasskeysLoginCompleteErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * conflict: Conflict response.
	 */
	409: ConflictError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type PasskeysLoginCompleteError =
	PasskeysLoginCompleteErrors[keyof PasskeysLoginCompleteErrors];

export type PasskeysLoginCompleteResponses = {
	/**
	 * OK response.
	 */
	200: LoginCompleteResponseBody;
};

export type PasskeysLoginCompleteResponse =
	PasskeysLoginCompleteResponses[keyof PasskeysLoginCompleteResponses];

export type PasskeysRegisterBeginData = {
	body: PasskeyRegisterBeginRequest;
	path?: never;
	query?: never;
	url: "/v1/auth/passkeys/register/begin";
};

export type PasskeysRegisterBeginErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * conflict: Conflict response.
	 */
	409: ConflictError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type PasskeysRegisterBeginError =
	PasskeysRegisterBeginErrors[keyof PasskeysRegisterBeginErrors];

export type PasskeysRegisterBeginResponses = {
	/**
	 * OK response.
	 */
	200: RegisterBeginResponseBody;
};

export type PasskeysRegisterBeginResponse =
	PasskeysRegisterBeginResponses[keyof PasskeysRegisterBeginResponses];

export type PasskeysRegisterCompleteData = {
	body: PasskeyRegisterCompleteRequest;
	path?: never;
	query?: never;
	url: "/v1/auth/passkeys/register/complete";
};

export type PasskeysRegisterCompleteErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * conflict: Conflict response.
	 */
	409: ConflictError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type PasskeysRegisterCompleteError =
	PasskeysRegisterCompleteErrors[keyof PasskeysRegisterCompleteErrors];

export type PasskeysRegisterCompleteResponses = {
	/**
	 * OK response.
	 */
	200: RegisteredPasskey;
};

export type PasskeysRegisterCompleteResponse =
	PasskeysRegisterCompleteResponses[keyof PasskeysRegisterCompleteResponses];

export type PasskeysDeleteData = {
	body?: never;
	path: {
		/**
		 * Passkey ID
		 */
		id: string;
	};
	query?: never;
	url: "/v1/auth/passkeys/{id}";
};

export type PasskeysDeleteErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * conflict: Conflict response.
	 */
	409: ConflictError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type PasskeysDeleteError =
	PasskeysDeleteErrors[keyof PasskeysDeleteErrors];

export type PasskeysDeleteResponses = {
	/**
	 * No Content response.
	 */
	204: void;
};

export type PasskeysDeleteResponse =
	PasskeysDeleteResponses[keyof PasskeysDeleteResponses];

export type PasskeysUpdateData = {
	body: UpdateRequestBody3;
	path: {
		/**
		 * Passkey ID
		 */
		id: string;
	};
	query?: never;
	url: "/v1/auth/passkeys/{id}";
};

export type PasskeysUpdateErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * conflict: Conflict response.
	 */
	409: ConflictError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type PasskeysUpdateError =
	PasskeysUpdateErrors[keyof PasskeysUpdateErrors];

export type PasskeysUpdateResponses = {
	/**
	 * OK response.
	 */
	200: SendResponseBody;
};

export type PasskeysUpdateResponse =
	PasskeysUpdateResponses[keyof PasskeysUpdateResponses];

export type PasswordlessEmailData = {
	body: PasswordlessEmailRequest;
	path?: never;
	query?: never;
	url: "/v1/auth/passwordless/email";
};

export type PasswordlessEmailErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type PasswordlessEmailError =
	PasswordlessEmailErrors[keyof PasswordlessEmailErrors];

export type PasswordlessEmailResponses = {
	/**
	 * OK response.
	 */
	200: EmailResponseBody;
};

export type PasswordlessEmailResponse =
	PasswordlessEmailResponses[keyof PasswordlessEmailResponses];

export type PasswordlessMagicLinkData = {
	body: MagicLinkRequest;
	path?: never;
	query?: never;
	url: "/v1/auth/passwordless/magic-link";
};

export type PasswordlessMagicLinkErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type PasswordlessMagicLinkError =
	PasswordlessMagicLinkErrors[keyof PasswordlessMagicLinkErrors];

export type PasswordlessMagicLinkResponses = {
	/**
	 * OK response.
	 */
	200: MagicLinkResponseBody;
};

export type PasswordlessMagicLinkResponse =
	PasswordlessMagicLinkResponses[keyof PasswordlessMagicLinkResponses];

export type PasswordlessMethodsData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/v1/auth/passwordless/methods";
};

export type PasswordlessMethodsErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type PasswordlessMethodsError =
	PasswordlessMethodsErrors[keyof PasswordlessMethodsErrors];

export type PasswordlessMethodsResponses = {
	/**
	 * OK response.
	 */
	200: MethodsResponseBody2;
};

export type PasswordlessMethodsResponse =
	PasswordlessMethodsResponses[keyof PasswordlessMethodsResponses];

export type PasswordlessSmsData = {
	body: PasswordlessSmsRequest;
	path?: never;
	query?: never;
	url: "/v1/auth/passwordless/sms";
};

export type PasswordlessSmsErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type PasswordlessSmsError =
	PasswordlessSmsErrors[keyof PasswordlessSmsErrors];

export type PasswordlessSmsResponses = {
	/**
	 * OK response.
	 */
	200: EmailResponseBody;
};

export type PasswordlessSmsResponse =
	PasswordlessSmsResponses[keyof PasswordlessSmsResponses];

export type PasswordlessVerifyData = {
	body: PasswordlessVerifyRequest;
	path?: never;
	query?: never;
	url: "/v1/auth/passwordless/verify";
};

export type PasswordlessVerifyErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type PasswordlessVerifyError =
	PasswordlessVerifyErrors[keyof PasswordlessVerifyErrors];

export type PasswordlessVerifyResponses = {
	/**
	 * OK response.
	 */
	200: VerifyResponseBody;
};

export type PasswordlessVerifyResponse =
	PasswordlessVerifyResponses[keyof PasswordlessVerifyResponses];

export type AuthRefreshTokenData = {
	body: RefreshTokenRequest;
	path?: never;
	query?: never;
	url: "/v1/auth/refresh";
};

export type AuthRefreshTokenErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * conflict: Conflict response.
	 */
	409: ConflictError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type AuthRefreshTokenError =
	AuthRefreshTokenErrors[keyof AuthRefreshTokenErrors];

export type AuthRefreshTokenResponses = {
	/**
	 * OK response.
	 */
	200: RefreshTokenResponse;
};

export type AuthRefreshTokenResponse =
	AuthRefreshTokenResponses[keyof AuthRefreshTokenResponses];

export type AuthRegisterData = {
	body: RegisterRequest;
	path?: never;
	query?: never;
	url: "/v1/auth/register";
};

export type AuthRegisterErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * conflict: Conflict response.
	 */
	409: ConflictError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type AuthRegisterError = AuthRegisterErrors[keyof AuthRegisterErrors];

export type AuthRegisterResponses = {
	/**
	 * Created response.
	 */
	201: LoginResponse3;
};

export type AuthRegisterResponse =
	AuthRegisterResponses[keyof AuthRegisterResponses];

export type AuthResetPasswordData = {
	body: ResetPasswordRequest;
	path?: never;
	query?: never;
	url: "/v1/auth/reset-password";
};

export type AuthResetPasswordErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * conflict: Conflict response.
	 */
	409: ConflictError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type AuthResetPasswordError =
	AuthResetPasswordErrors[keyof AuthResetPasswordErrors];

export type AuthResetPasswordResponses = {
	/**
	 * OK response.
	 */
	200: SendResponseBody;
};

export type AuthResetPasswordResponse =
	AuthResetPasswordResponses[keyof AuthResetPasswordResponses];

export type AuthSendEmailVerificationData = {
	body: SendEmailVerificationRequestBody;
	path?: never;
	query?: {
		/**
		 * URL to redirect after verification (for link verification)
		 */
		redirect_url?: string;
	};
	url: "/v1/auth/send-verification-email";
};

export type AuthSendEmailVerificationErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * conflict: Conflict response.
	 */
	409: ConflictError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type AuthSendEmailVerificationError =
	AuthSendEmailVerificationErrors[keyof AuthSendEmailVerificationErrors];

export type AuthSendEmailVerificationResponses = {
	/**
	 * OK response.
	 */
	200: SendEmailVerificationResponseBody;
};

export type AuthSendEmailVerificationResponse =
	AuthSendEmailVerificationResponses[keyof AuthSendEmailVerificationResponses];

export type SsoProviderCallbackData = {
	body?: never;
	path: {
		/**
		 * Provider ID
		 */
		provider: string;
	};
	query?: {
		/**
		 * Authorization code
		 */
		code?: string;
		/**
		 * State parameter
		 */
		state?: string;
		/**
		 * SAML response
		 */
		SAMLResponse?: string;
		/**
		 * SAML relay state
		 */
		RelayState?: string;
	};
	url: "/v1/auth/sso/callback/{provider}";
};

export type SsoProviderCallbackErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * conflict: Conflict response.
	 */
	409: ConflictError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type SsoProviderCallbackError =
	SsoProviderCallbackErrors[keyof SsoProviderCallbackErrors];

export type SsoProviderCallbackResponses = {
	/**
	 * OK response.
	 */
	200: ProviderCallbackResponseBody2;
};

export type SsoProviderCallbackResponse =
	SsoProviderCallbackResponses[keyof SsoProviderCallbackResponses];

export type SsoListIdentityProvidersData = {
	body?: never;
	path?: never;
	query: {
		/**
		 * Organization ID
		 */
		organization_id: string;
	};
	url: "/v1/auth/sso/identity-providers";
};

export type SsoListIdentityProvidersErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * conflict: Conflict response.
	 */
	409: ConflictError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type SsoListIdentityProvidersError =
	SsoListIdentityProvidersErrors[keyof SsoListIdentityProvidersErrors];

export type SsoListIdentityProvidersResponses = {
	/**
	 * OK response.
	 */
	200: ListIdentityProvidersResponseBody;
};

export type SsoListIdentityProvidersResponse =
	SsoListIdentityProvidersResponses[keyof SsoListIdentityProvidersResponses];

export type SsoCreateIdentityProviderData = {
	body: CreateIdentityProviderRequestBody;
	path?: never;
	query?: never;
	url: "/v1/auth/sso/identity-providers";
};

export type SsoCreateIdentityProviderErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * conflict: Conflict response.
	 */
	409: ConflictError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type SsoCreateIdentityProviderError =
	SsoCreateIdentityProviderErrors[keyof SsoCreateIdentityProviderErrors];

export type SsoCreateIdentityProviderResponses = {
	/**
	 * Created response.
	 */
	201: IdentityProviderResponse;
};

export type SsoCreateIdentityProviderResponse =
	SsoCreateIdentityProviderResponses[keyof SsoCreateIdentityProviderResponses];

export type SsoDeleteIdentityProviderData = {
	body?: never;
	path: {
		/**
		 * Provider ID
		 */
		id: string;
	};
	query?: never;
	url: "/v1/auth/sso/identity-providers/{id}";
};

export type SsoDeleteIdentityProviderErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * conflict: Conflict response.
	 */
	409: ConflictError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type SsoDeleteIdentityProviderError =
	SsoDeleteIdentityProviderErrors[keyof SsoDeleteIdentityProviderErrors];

export type SsoDeleteIdentityProviderResponses = {
	/**
	 * No Content response.
	 */
	204: void;
};

export type SsoDeleteIdentityProviderResponse =
	SsoDeleteIdentityProviderResponses[keyof SsoDeleteIdentityProviderResponses];

export type SsoGetIdentityProviderData = {
	body?: never;
	path: {
		/**
		 * Provider ID
		 */
		id: string;
	};
	query?: never;
	url: "/v1/auth/sso/identity-providers/{id}";
};

export type SsoGetIdentityProviderErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * conflict: Conflict response.
	 */
	409: ConflictError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type SsoGetIdentityProviderError =
	SsoGetIdentityProviderErrors[keyof SsoGetIdentityProviderErrors];

export type SsoGetIdentityProviderResponses = {
	/**
	 * OK response.
	 */
	200: IdentityProviderResponse;
};

export type SsoGetIdentityProviderResponse =
	SsoGetIdentityProviderResponses[keyof SsoGetIdentityProviderResponses];

export type SsoUpdateIdentityProviderData = {
	body: UpdateIdentityProviderRequestBody;
	path: {
		/**
		 * Provider ID
		 */
		id: string;
	};
	query?: never;
	url: "/v1/auth/sso/identity-providers/{id}";
};

export type SsoUpdateIdentityProviderErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * conflict: Conflict response.
	 */
	409: ConflictError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type SsoUpdateIdentityProviderError =
	SsoUpdateIdentityProviderErrors[keyof SsoUpdateIdentityProviderErrors];

export type SsoUpdateIdentityProviderResponses = {
	/**
	 * OK response.
	 */
	200: IdentityProviderResponse;
};

export type SsoUpdateIdentityProviderResponse =
	SsoUpdateIdentityProviderResponses[keyof SsoUpdateIdentityProviderResponses];

export type SsoListProvidersData = {
	body?: never;
	path?: never;
	query?: {
		/**
		 * Organization ID
		 */
		organization_id?: string;
	};
	url: "/v1/auth/sso/providers";
};

export type SsoListProvidersErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * conflict: Conflict response.
	 */
	409: ConflictError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type SsoListProvidersError =
	SsoListProvidersErrors[keyof SsoListProvidersErrors];

export type SsoListProvidersResponses = {
	/**
	 * OK response.
	 */
	200: ListProvidersResponseBody;
};

export type SsoListProvidersResponse =
	SsoListProvidersResponses[keyof SsoListProvidersResponses];

export type SsoProviderAuthData = {
	body?: never;
	path: {
		/**
		 * Provider ID
		 */
		provider: string;
	};
	query?: {
		/**
		 * Redirect URI after authentication
		 */
		redirect_uri?: string;
	};
	url: "/v1/auth/sso/providers/{provider}";
};

export type SsoProviderAuthErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * conflict: Conflict response.
	 */
	409: ConflictError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type SsoProviderAuthError =
	SsoProviderAuthErrors[keyof SsoProviderAuthErrors];

export type SsoSamlAcsData = {
	body?: never;
	path: {
		/**
		 * Provider ID
		 */
		id: string;
	};
	query?: never;
	url: "/v1/auth/sso/saml/{id}/acs";
};

export type SsoSamlAcsErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * conflict: Conflict response.
	 */
	409: ConflictError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type SsoSamlAcsError = SsoSamlAcsErrors[keyof SsoSamlAcsErrors];

export type SsoSamlAcsResponses = {
	/**
	 * HTML response for browser redirection
	 */
	200: string;
};

export type SsoSamlAcsResponse = SsoSamlAcsResponses[keyof SsoSamlAcsResponses];

export type SsoSamlMetadataData = {
	body?: never;
	path: {
		/**
		 * Provider ID
		 */
		id: string;
	};
	query?: never;
	url: "/v1/auth/sso/saml/{id}/metadata";
};

export type SsoSamlMetadataErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * conflict: Conflict response.
	 */
	409: ConflictError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type SsoSamlMetadataError =
	SsoSamlMetadataErrors[keyof SsoSamlMetadataErrors];

export type SsoSamlMetadataResponses = {
	/**
	 * OK response.
	 */
	200: SamlMetadataResponseBody;
};

export type SsoSamlMetadataResponse =
	SsoSamlMetadataResponses[keyof SsoSamlMetadataResponses];

export type AuthVerifyEmailData = {
	body: VerifyEmailRequest;
	path?: never;
	query?: never;
	url: "/v1/auth/verify-email";
};

export type AuthVerifyEmailErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * conflict: Conflict response.
	 */
	409: ConflictError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type AuthVerifyEmailError =
	AuthVerifyEmailErrors[keyof AuthVerifyEmailErrors];

export type AuthVerifyEmailResponses = {
	/**
	 * OK response.
	 */
	200: SendResponseBody;
};

export type AuthVerifyEmailResponse =
	AuthVerifyEmailResponses[keyof AuthVerifyEmailResponses];

export type EmailSendData = {
	body: SendEmailRequest;
	path?: never;
	query?: never;
	url: "/v1/email/send";
};

export type EmailSendErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type EmailSendError = EmailSendErrors[keyof EmailSendErrors];

export type EmailSendResponses = {
	/**
	 * OK response.
	 */
	200: SendResponseBody;
};

export type EmailSendResponse = EmailSendResponses[keyof EmailSendResponses];

export type EmailSendTemplateData = {
	body: SendTemplateEmailRequest;
	path?: never;
	query?: never;
	url: "/v1/email/send-template";
};

export type EmailSendTemplateErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type EmailSendTemplateError =
	EmailSendTemplateErrors[keyof EmailSendTemplateErrors];

export type EmailSendTemplateResponses = {
	/**
	 * OK response.
	 */
	200: SendResponseBody;
};

export type EmailSendTemplateResponse =
	EmailSendTemplateResponses[keyof EmailSendTemplateResponses];

export type EmailListTemplatesData = {
	body?: never;
	path?: never;
	query?: {
		/**
		 * Pagination offset
		 */
		offset?: bigint;
		/**
		 * Number of items to return
		 */
		limit?: bigint;
		/**
		 * Filter by template type
		 */
		type?: string;
		/**
		 * Filter by organization ID
		 */
		organization_id?: string;
		/**
		 * Filter by locale
		 */
		locale?: string;
	};
	url: "/v1/email/templates";
};

export type EmailListTemplatesErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type EmailListTemplatesError =
	EmailListTemplatesErrors[keyof EmailListTemplatesErrors];

export type EmailListTemplatesResponses = {
	/**
	 * OK response.
	 */
	200: ListTemplatesResponseBody;
};

export type EmailListTemplatesResponse =
	EmailListTemplatesResponses[keyof EmailListTemplatesResponses];

export type EmailCreateTemplateData = {
	body: CreateEmailTemplateRequest;
	path?: never;
	query?: never;
	url: "/v1/email/templates";
};

export type EmailCreateTemplateErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type EmailCreateTemplateError =
	EmailCreateTemplateErrors[keyof EmailCreateTemplateErrors];

export type EmailCreateTemplateResponses = {
	/**
	 * Created response.
	 */
	201: EmailTemplateResponse;
};

export type EmailCreateTemplateResponse =
	EmailCreateTemplateResponses[keyof EmailCreateTemplateResponses];

export type EmailGetTemplateByTypeData = {
	body?: never;
	path: {
		/**
		 * Template type
		 */
		type: string;
	};
	query?: {
		/**
		 * Organization ID
		 */
		organization_id?: string;
		/**
		 * Template locale
		 */
		locale?: string;
	};
	url: "/v1/email/templates/by-type/{type}";
};

export type EmailGetTemplateByTypeErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type EmailGetTemplateByTypeError =
	EmailGetTemplateByTypeErrors[keyof EmailGetTemplateByTypeErrors];

export type EmailGetTemplateByTypeResponses = {
	/**
	 * OK response.
	 */
	200: EmailTemplateResponse;
};

export type EmailGetTemplateByTypeResponse =
	EmailGetTemplateByTypeResponses[keyof EmailGetTemplateByTypeResponses];

export type EmailDeleteTemplateData = {
	body?: never;
	path: {
		/**
		 * Template ID
		 */
		id: string;
	};
	query?: never;
	url: "/v1/email/templates/{id}";
};

export type EmailDeleteTemplateErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type EmailDeleteTemplateError =
	EmailDeleteTemplateErrors[keyof EmailDeleteTemplateErrors];

export type EmailDeleteTemplateResponses = {
	/**
	 * No Content response.
	 */
	204: void;
};

export type EmailDeleteTemplateResponse =
	EmailDeleteTemplateResponses[keyof EmailDeleteTemplateResponses];

export type EmailGetTemplateData = {
	body?: never;
	path: {
		/**
		 * Template ID
		 */
		id: string;
	};
	query?: never;
	url: "/v1/email/templates/{id}";
};

export type EmailGetTemplateErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type EmailGetTemplateError =
	EmailGetTemplateErrors[keyof EmailGetTemplateErrors];

export type EmailGetTemplateResponses = {
	/**
	 * OK response.
	 */
	200: EmailTemplateResponse;
};

export type EmailGetTemplateResponse =
	EmailGetTemplateResponses[keyof EmailGetTemplateResponses];

export type EmailUpdateTemplateData = {
	body: UpdateTemplateRequestBody;
	path: {
		/**
		 * Template ID
		 */
		id: string;
	};
	query?: never;
	url: "/v1/email/templates/{id}";
};

export type EmailUpdateTemplateErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type EmailUpdateTemplateError =
	EmailUpdateTemplateErrors[keyof EmailUpdateTemplateErrors];

export type EmailUpdateTemplateResponses = {
	/**
	 * OK response.
	 */
	200: EmailTemplateResponse;
};

export type EmailUpdateTemplateResponse =
	EmailUpdateTemplateResponses[keyof EmailUpdateTemplateResponses];

export type OauthProviderJwksData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/v1/oauth/.well-known/jwks.json";
};

export type OauthProviderJwksErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * conflict: Conflict response.
	 */
	409: ConflictError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type OauthProviderJwksError =
	OauthProviderJwksErrors[keyof OauthProviderJwksErrors];

export type OauthProviderJwksResponses = {
	/**
	 * OK response.
	 */
	200: JwksResponseBody;
};

export type OauthProviderJwksResponse =
	OauthProviderJwksResponses[keyof OauthProviderJwksResponses];

export type OauthProviderOidcConfigurationData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/v1/oauth/.well-known/openid-configuration";
};

export type OauthProviderOidcConfigurationErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * conflict: Conflict response.
	 */
	409: ConflictError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type OauthProviderOidcConfigurationError =
	OauthProviderOidcConfigurationErrors[keyof OauthProviderOidcConfigurationErrors];

export type OauthProviderOidcConfigurationResponses = {
	/**
	 * OK response.
	 */
	200: OidcConfigurationResponseBody;
};

export type OauthProviderOidcConfigurationResponse =
	OauthProviderOidcConfigurationResponses[keyof OauthProviderOidcConfigurationResponses];

export type OauthProviderAuthorizeData = {
	body?: never;
	path?: never;
	query: {
		/**
		 * OAuth client identifier
		 */
		client_id: string;
		/**
		 * OAuth response type
		 */
		response_type: string;
		/**
		 * Redirect URI after authorization
		 */
		redirect_uri: string;
		/**
		 * Requested scopes (space-separated)
		 */
		scope?: string;
		/**
		 * OAuth state parameter
		 */
		state?: string;
		/**
		 * PKCE code challenge
		 */
		code_challenge?: string;
		/**
		 * PKCE code challenge method
		 */
		code_challenge_method?: string;
	};
	url: "/v1/oauth/authorize";
};

export type OauthProviderAuthorizeErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * conflict: Conflict response.
	 */
	409: ConflictError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type OauthProviderAuthorizeError =
	OauthProviderAuthorizeErrors[keyof OauthProviderAuthorizeErrors];

export type OauthProviderAuthorizeResponses = {
	/**
	 * HTML response
	 */
	200: string;
};

export type OauthProviderAuthorizeResponse =
	OauthProviderAuthorizeResponses[keyof OauthProviderAuthorizeResponses];

export type OauthProviderListClientsData = {
	body?: never;
	path?: never;
	query?: {
		/**
		 * Pagination offset
		 */
		offset?: bigint;
		/**
		 * Number of items to return
		 */
		limit?: bigint;
		/**
		 * Filter by organization ID
		 */
		organization_id?: string;
	};
	url: "/v1/oauth/clients";
};

export type OauthProviderListClientsErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * conflict: Conflict response.
	 */
	409: ConflictError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type OauthProviderListClientsError =
	OauthProviderListClientsErrors[keyof OauthProviderListClientsErrors];

export type OauthProviderListClientsResponses = {
	/**
	 * OK response.
	 */
	200: ListClientsResponseBody;
};

export type OauthProviderListClientsResponse =
	OauthProviderListClientsResponses[keyof OauthProviderListClientsResponses];

export type OauthProviderCreateClientData = {
	body: CreateOAuthClientRequest;
	path?: never;
	query?: never;
	url: "/v1/oauth/clients";
};

export type OauthProviderCreateClientErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * conflict: Conflict response.
	 */
	409: ConflictError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type OauthProviderCreateClientError =
	OauthProviderCreateClientErrors[keyof OauthProviderCreateClientErrors];

export type OauthProviderCreateClientResponses = {
	/**
	 * Created response.
	 */
	201: OAuthClientWithSecretResponse;
};

export type OauthProviderCreateClientResponse =
	OauthProviderCreateClientResponses[keyof OauthProviderCreateClientResponses];

export type OauthProviderDeleteClientData = {
	body?: never;
	path: {
		/**
		 * Client ID
		 */
		id: string;
	};
	query?: never;
	url: "/v1/oauth/clients/{id}";
};

export type OauthProviderDeleteClientErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * conflict: Conflict response.
	 */
	409: ConflictError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type OauthProviderDeleteClientError =
	OauthProviderDeleteClientErrors[keyof OauthProviderDeleteClientErrors];

export type OauthProviderDeleteClientResponses = {
	/**
	 * No Content response.
	 */
	204: void;
};

export type OauthProviderDeleteClientResponse =
	OauthProviderDeleteClientResponses[keyof OauthProviderDeleteClientResponses];

export type OauthProviderGetClientData = {
	body?: never;
	path: {
		/**
		 * Client ID
		 */
		id: string;
	};
	query?: never;
	url: "/v1/oauth/clients/{id}";
};

export type OauthProviderGetClientErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * conflict: Conflict response.
	 */
	409: ConflictError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type OauthProviderGetClientError =
	OauthProviderGetClientErrors[keyof OauthProviderGetClientErrors];

export type OauthProviderGetClientResponses = {
	/**
	 * OK response.
	 */
	200: OAuthClientResponse;
};

export type OauthProviderGetClientResponse =
	OauthProviderGetClientResponses[keyof OauthProviderGetClientResponses];

export type OauthProviderUpdateClientData = {
	body: UpdateClientRequestBody;
	path: {
		/**
		 * Client ID
		 */
		id: string;
	};
	query?: never;
	url: "/v1/oauth/clients/{id}";
};

export type OauthProviderUpdateClientErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * conflict: Conflict response.
	 */
	409: ConflictError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type OauthProviderUpdateClientError =
	OauthProviderUpdateClientErrors[keyof OauthProviderUpdateClientErrors];

export type OauthProviderUpdateClientResponses = {
	/**
	 * OK response.
	 */
	200: OAuthClientResponse;
};

export type OauthProviderUpdateClientResponse =
	OauthProviderUpdateClientResponses[keyof OauthProviderUpdateClientResponses];

export type OauthProviderRotateClientSecretData = {
	body?: never;
	path: {
		/**
		 * Client ID
		 */
		id: string;
	};
	query?: never;
	url: "/v1/oauth/clients/{id}/rotate-secret";
};

export type OauthProviderRotateClientSecretErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * conflict: Conflict response.
	 */
	409: ConflictError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type OauthProviderRotateClientSecretError =
	OauthProviderRotateClientSecretErrors[keyof OauthProviderRotateClientSecretErrors];

export type OauthProviderRotateClientSecretResponses = {
	/**
	 * OK response.
	 */
	200: RotateClientSecretResponseBody;
};

export type OauthProviderRotateClientSecretResponse =
	OauthProviderRotateClientSecretResponses[keyof OauthProviderRotateClientSecretResponses];

export type OauthProviderConsentData = {
	body: ConsentRequest;
	path?: never;
	query?: never;
	url: "/v1/oauth/consent";
};

export type OauthProviderConsentErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * conflict: Conflict response.
	 */
	409: ConflictError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type OauthProviderConsentError =
	OauthProviderConsentErrors[keyof OauthProviderConsentErrors];

export type OauthProviderIntrospectData = {
	body?: never;
	path?: never;
	query: {
		/**
		 * Token to introspect
		 */
		token: string;
		/**
		 * Token type hint
		 */
		token_type_hint?: string;
	};
	url: "/v1/oauth/introspect";
};

export type OauthProviderIntrospectErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * conflict: Conflict response.
	 */
	409: ConflictError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type OauthProviderIntrospectError =
	OauthProviderIntrospectErrors[keyof OauthProviderIntrospectErrors];

export type OauthProviderIntrospectResponses = {
	/**
	 * OK response.
	 */
	200: IntrospectResponseBody;
};

export type OauthProviderIntrospectResponse =
	OauthProviderIntrospectResponses[keyof OauthProviderIntrospectResponses];

export type OauthProviderRevokeData = {
	body?: never;
	path?: never;
	query: {
		/**
		 * Token to revoke
		 */
		token: string;
		/**
		 * Token type hint
		 */
		token_type_hint?: string;
		/**
		 * Client ID
		 */
		client_id?: string;
		/**
		 * Client secret
		 */
		client_secret?: string;
	};
	url: "/v1/oauth/revoke";
};

export type OauthProviderRevokeErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * conflict: Conflict response.
	 */
	409: ConflictError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type OauthProviderRevokeError =
	OauthProviderRevokeErrors[keyof OauthProviderRevokeErrors];

export type OauthProviderRevokeResponses = {
	/**
	 * OK response.
	 */
	200: unknown;
};

export type OauthProviderListScopesData = {
	body?: never;
	path?: never;
	query?: {
		/**
		 * Pagination offset
		 */
		offset?: bigint;
		/**
		 * Number of items to return
		 */
		limit?: bigint;
	};
	url: "/v1/oauth/scopes";
};

export type OauthProviderListScopesErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * conflict: Conflict response.
	 */
	409: ConflictError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type OauthProviderListScopesError =
	OauthProviderListScopesErrors[keyof OauthProviderListScopesErrors];

export type OauthProviderListScopesResponses = {
	/**
	 * OK response.
	 */
	200: ListScopesResponseBody;
};

export type OauthProviderListScopesResponse =
	OauthProviderListScopesResponses[keyof OauthProviderListScopesResponses];

export type OauthProviderCreateScopeData = {
	body: CreateOAuthScopeRequest;
	path?: never;
	query?: never;
	url: "/v1/oauth/scopes";
};

export type OauthProviderCreateScopeErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * conflict: Conflict response.
	 */
	409: ConflictError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type OauthProviderCreateScopeError =
	OauthProviderCreateScopeErrors[keyof OauthProviderCreateScopeErrors];

export type OauthProviderCreateScopeResponses = {
	/**
	 * Created response.
	 */
	201: OAuthScopeResponse;
};

export type OauthProviderCreateScopeResponse =
	OauthProviderCreateScopeResponses[keyof OauthProviderCreateScopeResponses];

export type OauthProviderDeleteScopeData = {
	body?: never;
	path: {
		/**
		 * Scope ID
		 */
		id: string;
	};
	query?: never;
	url: "/v1/oauth/scopes/{id}";
};

export type OauthProviderDeleteScopeErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * conflict: Conflict response.
	 */
	409: ConflictError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type OauthProviderDeleteScopeError =
	OauthProviderDeleteScopeErrors[keyof OauthProviderDeleteScopeErrors];

export type OauthProviderDeleteScopeResponses = {
	/**
	 * No Content response.
	 */
	204: void;
};

export type OauthProviderDeleteScopeResponse =
	OauthProviderDeleteScopeResponses[keyof OauthProviderDeleteScopeResponses];

export type OauthProviderGetScopeData = {
	body?: never;
	path: {
		/**
		 * Scope ID
		 */
		id: string;
	};
	query?: never;
	url: "/v1/oauth/scopes/{id}";
};

export type OauthProviderGetScopeErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * conflict: Conflict response.
	 */
	409: ConflictError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type OauthProviderGetScopeError =
	OauthProviderGetScopeErrors[keyof OauthProviderGetScopeErrors];

export type OauthProviderGetScopeResponses = {
	/**
	 * OK response.
	 */
	200: OAuthScopeResponse;
};

export type OauthProviderGetScopeResponse =
	OauthProviderGetScopeResponses[keyof OauthProviderGetScopeResponses];

export type OauthProviderUpdateScopeData = {
	body: UpdateScopeRequestBody;
	path: {
		/**
		 * Scope ID
		 */
		id: string;
	};
	query?: never;
	url: "/v1/oauth/scopes/{id}";
};

export type OauthProviderUpdateScopeErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * conflict: Conflict response.
	 */
	409: ConflictError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type OauthProviderUpdateScopeError =
	OauthProviderUpdateScopeErrors[keyof OauthProviderUpdateScopeErrors];

export type OauthProviderUpdateScopeResponses = {
	/**
	 * OK response.
	 */
	200: OAuthScopeResponse;
};

export type OauthProviderUpdateScopeResponse =
	OauthProviderUpdateScopeResponses[keyof OauthProviderUpdateScopeResponses];

export type OauthProviderTokenData = {
	body?: never;
	path?: never;
	query: {
		/**
		 * Grant type
		 */
		grant_type: string;
		/**
		 * Authorization code (for authorization_code grant)
		 */
		code?: string;
		/**
		 * Redirect URI (for authorization_code grant)
		 */
		redirect_uri?: string;
		/**
		 * Client ID
		 */
		client_id?: string;
		/**
		 * Client secret
		 */
		client_secret?: string;
		/**
		 * Refresh token (for refresh_token grant)
		 */
		refresh_token?: string;
		/**
		 * PKCE code verifier (for authorization_code grant)
		 */
		code_verifier?: string;
		/**
		 * Resource owner username (for password grant)
		 */
		username?: string;
		/**
		 * Resource owner password (for password grant)
		 */
		password?: string;
		/**
		 * Requested scopes (space-separated)
		 */
		scope?: string;
	};
	url: "/v1/oauth/token";
};

export type OauthProviderTokenErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * conflict: Conflict response.
	 */
	409: ConflictError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type OauthProviderTokenError =
	OauthProviderTokenErrors[keyof OauthProviderTokenErrors];

export type OauthProviderTokenResponses = {
	/**
	 * OK response.
	 */
	200: TokenResponseBody;
};

export type OauthProviderTokenResponse =
	OauthProviderTokenResponses[keyof OauthProviderTokenResponses];

export type OauthProviderUserinfoData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/v1/oauth/userinfo";
};

export type OauthProviderUserinfoErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * conflict: Conflict response.
	 */
	409: ConflictError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type OauthProviderUserinfoError =
	OauthProviderUserinfoErrors[keyof OauthProviderUserinfoErrors];

export type OauthProviderUserinfoResponses = {
	/**
	 * OK response.
	 */
	200: UserinfoResponseBody;
};

export type OauthProviderUserinfoResponse =
	OauthProviderUserinfoResponses[keyof OauthProviderUserinfoResponses];

export type OrganizationsListData = {
	body?: never;
	path?: never;
	query?: {
		/**
		 * Pagination offset
		 */
		offset?: bigint;
		/**
		 * Number of items to return
		 */
		limit?: bigint;
		/**
		 * Search term
		 */
		search?: string;
	};
	url: "/v1/organizations";
};

export type OrganizationsListErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * conflict: Conflict response.
	 */
	409: ConflictError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type OrganizationsListError =
	OrganizationsListErrors[keyof OrganizationsListErrors];

export type OrganizationsListResponses = {
	/**
	 * OK response.
	 */
	200: ListResponseBody2;
};

export type OrganizationsListResponse =
	OrganizationsListResponses[keyof OrganizationsListResponses];

export type OrganizationsCreateData = {
	body: CreateRequestBody2;
	path?: never;
	query?: never;
	url: "/v1/organizations";
};

export type OrganizationsCreateErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * conflict: Conflict response.
	 */
	409: ConflictError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type OrganizationsCreateError =
	OrganizationsCreateErrors[keyof OrganizationsCreateErrors];

export type OrganizationsCreateResponses = {
	/**
	 * Created response.
	 */
	201: OrganizationResponse;
};

export type OrganizationsCreateResponse =
	OrganizationsCreateResponses[keyof OrganizationsCreateResponses];

export type OrganizationsDeleteData = {
	body?: never;
	path: {
		/**
		 * Organization ID
		 */
		id: string;
	};
	query?: never;
	url: "/v1/organizations/{id}";
};

export type OrganizationsDeleteErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * conflict: Conflict response.
	 */
	409: ConflictError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type OrganizationsDeleteError =
	OrganizationsDeleteErrors[keyof OrganizationsDeleteErrors];

export type OrganizationsDeleteResponses = {
	/**
	 * No Content response.
	 */
	204: void;
};

export type OrganizationsDeleteResponse =
	OrganizationsDeleteResponses[keyof OrganizationsDeleteResponses];

export type OrganizationsGetData = {
	body?: never;
	path: {
		/**
		 * Organization ID
		 */
		id: string;
	};
	query?: never;
	url: "/v1/organizations/{id}";
};

export type OrganizationsGetErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * conflict: Conflict response.
	 */
	409: ConflictError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type OrganizationsGetError =
	OrganizationsGetErrors[keyof OrganizationsGetErrors];

export type OrganizationsGetResponses = {
	/**
	 * OK response.
	 */
	200: OrganizationResponse;
};

export type OrganizationsGetResponse =
	OrganizationsGetResponses[keyof OrganizationsGetResponses];

export type OrganizationsUpdateData = {
	body: UpdateRequestBody2;
	path: {
		/**
		 * Organization ID
		 */
		id: string;
	};
	query?: never;
	url: "/v1/organizations/{id}";
};

export type OrganizationsUpdateErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * conflict: Conflict response.
	 */
	409: ConflictError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type OrganizationsUpdateError =
	OrganizationsUpdateErrors[keyof OrganizationsUpdateErrors];

export type OrganizationsUpdateResponses = {
	/**
	 * OK response.
	 */
	200: OrganizationResponse;
};

export type OrganizationsUpdateResponse =
	OrganizationsUpdateResponses[keyof OrganizationsUpdateResponses];

export type OrganizationsListFeaturesData = {
	body?: never;
	path: {
		/**
		 * Organization ID
		 */
		id: string;
	};
	query?: never;
	url: "/v1/organizations/{id}/features";
};

export type OrganizationsListFeaturesErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * conflict: Conflict response.
	 */
	409: ConflictError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type OrganizationsListFeaturesError =
	OrganizationsListFeaturesErrors[keyof OrganizationsListFeaturesErrors];

export type OrganizationsListFeaturesResponses = {
	/**
	 * OK response.
	 */
	200: ListFeaturesResponseBody;
};

export type OrganizationsListFeaturesResponse =
	OrganizationsListFeaturesResponses[keyof OrganizationsListFeaturesResponses];

export type OrganizationsEnableFeatureData = {
	body: EnableFeatureRequestBody;
	path: {
		/**
		 * Organization ID
		 */
		id: string;
	};
	query?: never;
	url: "/v1/organizations/{id}/features";
};

export type OrganizationsEnableFeatureErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * conflict: Conflict response.
	 */
	409: ConflictError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type OrganizationsEnableFeatureError =
	OrganizationsEnableFeatureErrors[keyof OrganizationsEnableFeatureErrors];

export type OrganizationsEnableFeatureResponses = {
	/**
	 * OK response.
	 */
	200: SendResponseBody;
};

export type OrganizationsEnableFeatureResponse =
	OrganizationsEnableFeatureResponses[keyof OrganizationsEnableFeatureResponses];

export type OrganizationsDisableFeatureData = {
	body?: never;
	path: {
		/**
		 * Organization ID
		 */
		id: string;
		/**
		 * Feature key
		 */
		feature_key: string;
	};
	query?: never;
	url: "/v1/organizations/{id}/features/{feature_key}";
};

export type OrganizationsDisableFeatureErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * conflict: Conflict response.
	 */
	409: ConflictError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type OrganizationsDisableFeatureError =
	OrganizationsDisableFeatureErrors[keyof OrganizationsDisableFeatureErrors];

export type OrganizationsDisableFeatureResponses = {
	/**
	 * No Content response.
	 */
	204: void;
};

export type OrganizationsDisableFeatureResponse =
	OrganizationsDisableFeatureResponses[keyof OrganizationsDisableFeatureResponses];

export type OrganizationsListMembersData = {
	body?: never;
	path: {
		/**
		 * Organization ID
		 */
		id: string;
	};
	query?: {
		/**
		 * Pagination offset
		 */
		offset?: bigint;
		/**
		 * Number of items to return
		 */
		limit?: bigint;
		/**
		 * Search term
		 */
		search?: string;
	};
	url: "/v1/organizations/{id}/members";
};

export type OrganizationsListMembersErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * conflict: Conflict response.
	 */
	409: ConflictError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type OrganizationsListMembersError =
	OrganizationsListMembersErrors[keyof OrganizationsListMembersErrors];

export type OrganizationsListMembersResponses = {
	/**
	 * OK response.
	 */
	200: ListMembersResponseBody;
};

export type OrganizationsListMembersResponse =
	OrganizationsListMembersResponses[keyof OrganizationsListMembersResponses];

export type OrganizationsAddMemberData = {
	body: AddMemberRequestBody;
	path: {
		/**
		 * Organization ID
		 */
		id: string;
	};
	query?: never;
	url: "/v1/organizations/{id}/members";
};

export type OrganizationsAddMemberErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * conflict: Conflict response.
	 */
	409: ConflictError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type OrganizationsAddMemberError =
	OrganizationsAddMemberErrors[keyof OrganizationsAddMemberErrors];

export type OrganizationsAddMemberResponses = {
	/**
	 * OK response.
	 */
	200: SendResponseBody;
};

export type OrganizationsAddMemberResponse =
	OrganizationsAddMemberResponses[keyof OrganizationsAddMemberResponses];

export type OrganizationsRemoveMemberData = {
	body?: never;
	path: {
		/**
		 * Organization ID
		 */
		id: string;
		/**
		 * User ID
		 */
		user_id: string;
	};
	query?: never;
	url: "/v1/organizations/{id}/members/{user_id}";
};

export type OrganizationsRemoveMemberErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * conflict: Conflict response.
	 */
	409: ConflictError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type OrganizationsRemoveMemberError =
	OrganizationsRemoveMemberErrors[keyof OrganizationsRemoveMemberErrors];

export type OrganizationsRemoveMemberResponses = {
	/**
	 * No Content response.
	 */
	204: void;
};

export type OrganizationsRemoveMemberResponse =
	OrganizationsRemoveMemberResponses[keyof OrganizationsRemoveMemberResponses];

export type OrganizationsUpdateMemberData = {
	body: UpdateMemberRequestBody;
	path: {
		/**
		 * Organization ID
		 */
		id: string;
		/**
		 * User ID
		 */
		user_id: string;
	};
	query?: never;
	url: "/v1/organizations/{id}/members/{user_id}";
};

export type OrganizationsUpdateMemberErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * conflict: Conflict response.
	 */
	409: ConflictError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type OrganizationsUpdateMemberError =
	OrganizationsUpdateMemberErrors[keyof OrganizationsUpdateMemberErrors];

export type OrganizationsUpdateMemberResponses = {
	/**
	 * OK response.
	 */
	200: SendResponseBody;
};

export type OrganizationsUpdateMemberResponse =
	OrganizationsUpdateMemberResponses[keyof OrganizationsUpdateMemberResponses];

export type RbacListPermissionsData = {
	body?: never;
	path?: never;
	query?: {
		/**
		 * Pagination offset
		 */
		offset?: bigint;
		/**
		 * Number of items to return
		 */
		limit?: bigint;
		/**
		 * Filter by resource
		 */
		resource?: string;
		/**
		 * Filter by action
		 */
		action?: string;
		/**
		 * Search term
		 */
		search?: string;
	};
	url: "/v1/permissions";
};

export type RbacListPermissionsErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * conflict: Conflict response.
	 */
	409: ConflictError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type RbacListPermissionsError =
	RbacListPermissionsErrors[keyof RbacListPermissionsErrors];

export type RbacListPermissionsResponses = {
	/**
	 * OK response.
	 */
	200: ListPermissionsResponse;
};

export type RbacListPermissionsResponse =
	RbacListPermissionsResponses[keyof RbacListPermissionsResponses];

export type RbacCreatePermissionData = {
	body: CreatePermissionRequestBody;
	path?: never;
	query?: never;
	url: "/v1/permissions";
};

export type RbacCreatePermissionErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * conflict: Conflict response.
	 */
	409: ConflictError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type RbacCreatePermissionError =
	RbacCreatePermissionErrors[keyof RbacCreatePermissionErrors];

export type RbacCreatePermissionResponses = {
	/**
	 * Created response.
	 */
	201: PermissionResponse;
};

export type RbacCreatePermissionResponse =
	RbacCreatePermissionResponses[keyof RbacCreatePermissionResponses];

export type RbacDeletePermissionData = {
	body?: never;
	path: {
		/**
		 * Permission ID
		 */
		id: string;
	};
	query?: never;
	url: "/v1/permissions/{id}";
};

export type RbacDeletePermissionErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * conflict: Conflict response.
	 */
	409: ConflictError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type RbacDeletePermissionError =
	RbacDeletePermissionErrors[keyof RbacDeletePermissionErrors];

export type RbacDeletePermissionResponses = {
	/**
	 * No Content response.
	 */
	204: void;
};

export type RbacDeletePermissionResponse =
	RbacDeletePermissionResponses[keyof RbacDeletePermissionResponses];

export type RbacGetPermissionData = {
	body?: never;
	path: {
		/**
		 * Permission ID
		 */
		id: string;
	};
	query?: never;
	url: "/v1/permissions/{id}";
};

export type RbacGetPermissionErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * conflict: Conflict response.
	 */
	409: ConflictError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type RbacGetPermissionError =
	RbacGetPermissionErrors[keyof RbacGetPermissionErrors];

export type RbacGetPermissionResponses = {
	/**
	 * OK response.
	 */
	200: PermissionResponse;
};

export type RbacGetPermissionResponse =
	RbacGetPermissionResponses[keyof RbacGetPermissionResponses];

export type RbacUpdatePermissionData = {
	body: UpdatePermissionRequestBody;
	path: {
		/**
		 * Permission ID
		 */
		id: string;
	};
	query?: never;
	url: "/v1/permissions/{id}";
};

export type RbacUpdatePermissionErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * conflict: Conflict response.
	 */
	409: ConflictError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type RbacUpdatePermissionError =
	RbacUpdatePermissionErrors[keyof RbacUpdatePermissionErrors];

export type RbacUpdatePermissionResponses = {
	/**
	 * OK response.
	 */
	200: PermissionResponse;
};

export type RbacUpdatePermissionResponse =
	RbacUpdatePermissionResponses[keyof RbacUpdatePermissionResponses];

export type RbacListRolesData = {
	body?: never;
	path?: never;
	query?: {
		/**
		 * Pagination offset
		 */
		offset?: bigint;
		/**
		 * Number of items to return
		 */
		limit?: bigint;
		/**
		 * Filter by organization ID
		 */
		organization_id?: string;
		/**
		 * Search term
		 */
		search?: string;
	};
	url: "/v1/roles";
};

export type RbacListRolesErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * conflict: Conflict response.
	 */
	409: ConflictError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type RbacListRolesError = RbacListRolesErrors[keyof RbacListRolesErrors];

export type RbacListRolesResponses = {
	/**
	 * OK response.
	 */
	200: ListRolesResponseBody;
};

export type RbacListRolesResponse =
	RbacListRolesResponses[keyof RbacListRolesResponses];

export type RbacCreateRoleData = {
	body: CreateRoleRequestBody;
	path?: never;
	query?: never;
	url: "/v1/roles";
};

export type RbacCreateRoleErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * conflict: Conflict response.
	 */
	409: ConflictError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type RbacCreateRoleError =
	RbacCreateRoleErrors[keyof RbacCreateRoleErrors];

export type RbacCreateRoleResponses = {
	/**
	 * Created response.
	 */
	201: RoleResponse;
};

export type RbacCreateRoleResponse =
	RbacCreateRoleResponses[keyof RbacCreateRoleResponses];

export type RbacDeleteRoleData = {
	body?: never;
	path: {
		/**
		 * Role ID
		 */
		id: string;
	};
	query?: never;
	url: "/v1/roles/{id}";
};

export type RbacDeleteRoleErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * conflict: Conflict response.
	 */
	409: ConflictError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type RbacDeleteRoleError =
	RbacDeleteRoleErrors[keyof RbacDeleteRoleErrors];

export type RbacDeleteRoleResponses = {
	/**
	 * No Content response.
	 */
	204: void;
};

export type RbacDeleteRoleResponse =
	RbacDeleteRoleResponses[keyof RbacDeleteRoleResponses];

export type RbacGetRoleData = {
	body?: never;
	path: {
		/**
		 * Role ID
		 */
		id: string;
	};
	query?: never;
	url: "/v1/roles/{id}";
};

export type RbacGetRoleErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * conflict: Conflict response.
	 */
	409: ConflictError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type RbacGetRoleError = RbacGetRoleErrors[keyof RbacGetRoleErrors];

export type RbacGetRoleResponses = {
	/**
	 * OK response.
	 */
	200: RoleResponse;
};

export type RbacGetRoleResponse =
	RbacGetRoleResponses[keyof RbacGetRoleResponses];

export type RbacUpdateRoleData = {
	body: UpdateRoleRequestBody;
	path: {
		/**
		 * Role ID
		 */
		id: string;
	};
	query?: never;
	url: "/v1/roles/{id}";
};

export type RbacUpdateRoleErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * conflict: Conflict response.
	 */
	409: ConflictError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type RbacUpdateRoleError =
	RbacUpdateRoleErrors[keyof RbacUpdateRoleErrors];

export type RbacUpdateRoleResponses = {
	/**
	 * OK response.
	 */
	200: RoleResponse;
};

export type RbacUpdateRoleResponse =
	RbacUpdateRoleResponses[keyof RbacUpdateRoleResponses];

export type RbacListRolePermissionsData = {
	body?: never;
	path: {
		/**
		 * Role ID
		 */
		id: string;
	};
	query?: never;
	url: "/v1/roles/{id}/permissions";
};

export type RbacListRolePermissionsErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * conflict: Conflict response.
	 */
	409: ConflictError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type RbacListRolePermissionsError =
	RbacListRolePermissionsErrors[keyof RbacListRolePermissionsErrors];

export type RbacListRolePermissionsResponses = {
	/**
	 * OK response.
	 */
	200: ListRolePermissionsResponseBody;
};

export type RbacListRolePermissionsResponse =
	RbacListRolePermissionsResponses[keyof RbacListRolePermissionsResponses];

export type RbacAddRolePermissionData = {
	body: AddRolePermissionRequestBody;
	path: {
		/**
		 * Role ID
		 */
		id: string;
	};
	query?: never;
	url: "/v1/roles/{id}/permissions";
};

export type RbacAddRolePermissionErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * conflict: Conflict response.
	 */
	409: ConflictError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type RbacAddRolePermissionError =
	RbacAddRolePermissionErrors[keyof RbacAddRolePermissionErrors];

export type RbacAddRolePermissionResponses = {
	/**
	 * OK response.
	 */
	200: SendResponseBody;
};

export type RbacAddRolePermissionResponse =
	RbacAddRolePermissionResponses[keyof RbacAddRolePermissionResponses];

export type RbacRemoveRolePermissionData = {
	body?: never;
	path: {
		/**
		 * Role ID
		 */
		id: string;
		/**
		 * Permission ID
		 */
		permission_id: string;
	};
	query?: never;
	url: "/v1/roles/{id}/permissions/{permission_id}";
};

export type RbacRemoveRolePermissionErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * conflict: Conflict response.
	 */
	409: ConflictError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type RbacRemoveRolePermissionError =
	RbacRemoveRolePermissionErrors[keyof RbacRemoveRolePermissionErrors];

export type RbacRemoveRolePermissionResponses = {
	/**
	 * No Content response.
	 */
	204: void;
};

export type RbacRemoveRolePermissionResponse =
	RbacRemoveRolePermissionResponses[keyof RbacRemoveRolePermissionResponses];

export type UsersListData = {
	body?: never;
	path?: never;
	query?: {
		/**
		 * Pagination offset
		 */
		offset?: bigint;
		/**
		 * Number of items to return
		 */
		limit?: bigint;
		/**
		 * Search term
		 */
		search?: string;
		/**
		 * Filter by organization ID
		 */
		organization_id?: string;
	};
	url: "/v1/users";
};

export type UsersListErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * conflict: Conflict response.
	 */
	409: ConflictError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type UsersListError = UsersListErrors[keyof UsersListErrors];

export type UsersListResponses = {
	/**
	 * OK response.
	 */
	200: ListResponseBody4;
};

export type UsersListResponse = UsersListResponses[keyof UsersListResponses];

export type UsersCreateData = {
	body: CreateUserRequest;
	path?: never;
	query?: never;
	url: "/v1/users";
};

export type UsersCreateErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * conflict: Conflict response.
	 */
	409: ConflictError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type UsersCreateError = UsersCreateErrors[keyof UsersCreateErrors];

export type UsersCreateResponses = {
	/**
	 * Created response.
	 */
	201: User;
};

export type UsersCreateResponse =
	UsersCreateResponses[keyof UsersCreateResponses];

export type UsersUpdateMeData = {
	body: UpdateUserRequest;
	path?: never;
	query?: never;
	url: "/v1/users/me";
};

export type UsersUpdateMeErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * conflict: Conflict response.
	 */
	409: ConflictError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type UsersUpdateMeError = UsersUpdateMeErrors[keyof UsersUpdateMeErrors];

export type UsersUpdateMeResponses = {
	/**
	 * OK response.
	 */
	200: User;
};

export type UsersUpdateMeResponse =
	UsersUpdateMeResponses[keyof UsersUpdateMeResponses];

export type UsersUpdatePasswordData = {
	body: UpdatePasswordRequest;
	path?: never;
	query?: never;
	url: "/v1/users/me/password";
};

export type UsersUpdatePasswordErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * conflict: Conflict response.
	 */
	409: ConflictError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type UsersUpdatePasswordError =
	UsersUpdatePasswordErrors[keyof UsersUpdatePasswordErrors];

export type UsersUpdatePasswordResponses = {
	/**
	 * OK response.
	 */
	200: SendResponseBody;
};

export type UsersUpdatePasswordResponse =
	UsersUpdatePasswordResponses[keyof UsersUpdatePasswordResponses];

export type UsersGetSessionsData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/v1/users/me/sessions";
};

export type UsersGetSessionsErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * conflict: Conflict response.
	 */
	409: ConflictError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type UsersGetSessionsError =
	UsersGetSessionsErrors[keyof UsersGetSessionsErrors];

export type UsersGetSessionsResponses = {
	/**
	 * OK response.
	 */
	200: GetUserSessionResponse;
};

export type UsersGetSessionsResponse =
	UsersGetSessionsResponses[keyof UsersGetSessionsResponses];

export type UsersDeleteSessionData = {
	body?: never;
	path: {
		/**
		 * Session ID
		 */
		session_id: string;
	};
	query?: never;
	url: "/v1/users/me/sessions/{session_id}";
};

export type UsersDeleteSessionErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * conflict: Conflict response.
	 */
	409: ConflictError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type UsersDeleteSessionError =
	UsersDeleteSessionErrors[keyof UsersDeleteSessionErrors];

export type UsersDeleteSessionResponses = {
	/**
	 * No Content response.
	 */
	204: void;
};

export type UsersDeleteSessionResponse =
	UsersDeleteSessionResponses[keyof UsersDeleteSessionResponses];

export type UsersDeleteData = {
	body?: never;
	path: {
		/**
		 * User ID
		 */
		id: string;
	};
	query?: never;
	url: "/v1/users/{id}";
};

export type UsersDeleteErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * conflict: Conflict response.
	 */
	409: ConflictError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type UsersDeleteError = UsersDeleteErrors[keyof UsersDeleteErrors];

export type UsersDeleteResponses = {
	/**
	 * No Content response.
	 */
	204: void;
};

export type UsersDeleteResponse =
	UsersDeleteResponses[keyof UsersDeleteResponses];

export type UsersGetData = {
	body?: never;
	path: {
		/**
		 * User ID
		 */
		id: string;
	};
	query?: never;
	url: "/v1/users/{id}";
};

export type UsersGetErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * conflict: Conflict response.
	 */
	409: ConflictError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type UsersGetError = UsersGetErrors[keyof UsersGetErrors];

export type UsersGetResponses = {
	/**
	 * OK response.
	 */
	200: User;
};

export type UsersGetResponse = UsersGetResponses[keyof UsersGetResponses];

export type UsersUpdateData = {
	body: UpdateRequestBody4;
	path: {
		/**
		 * User ID
		 */
		id: string;
	};
	query?: never;
	url: "/v1/users/{id}";
};

export type UsersUpdateErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * conflict: Conflict response.
	 */
	409: ConflictError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type UsersUpdateError = UsersUpdateErrors[keyof UsersUpdateErrors];

export type UsersUpdateResponses = {
	/**
	 * OK response.
	 */
	200: User;
};

export type UsersUpdateResponse =
	UsersUpdateResponses[keyof UsersUpdateResponses];

export type UsersGetOrganizationsData = {
	body?: never;
	path: {
		/**
		 * User ID
		 */
		id: string;
	};
	query?: never;
	url: "/v1/users/{id}/organizations";
};

export type UsersGetOrganizationsErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * conflict: Conflict response.
	 */
	409: ConflictError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type UsersGetOrganizationsError =
	UsersGetOrganizationsErrors[keyof UsersGetOrganizationsErrors];

export type UsersGetOrganizationsResponses = {
	/**
	 * OK response.
	 */
	200: GetOrganizationsResponseBody;
};

export type UsersGetOrganizationsResponse =
	UsersGetOrganizationsResponses[keyof UsersGetOrganizationsResponses];

export type WebhooksListData = {
	body?: never;
	path?: never;
	query?: {
		/**
		 * Pagination offset
		 */
		offset?: bigint;
		/**
		 * Number of items to return
		 */
		limit?: bigint;
		/**
		 * Organization ID
		 */
		organization_id?: string;
		/**
		 * Filter by event types
		 */
		event_types?: Array<string>;
	};
	url: "/v1/webhooks";
};

export type WebhooksListErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type WebhooksListError = WebhooksListErrors[keyof WebhooksListErrors];

export type WebhooksListResponses = {
	/**
	 * OK response.
	 */
	200: ListResponseBody5;
};

export type WebhooksListResponse =
	WebhooksListResponses[keyof WebhooksListResponses];

export type WebhooksCreateData = {
	body: CreateRequestBody3;
	path?: never;
	query?: never;
	url: "/v1/webhooks";
};

export type WebhooksCreateErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type WebhooksCreateError =
	WebhooksCreateErrors[keyof WebhooksCreateErrors];

export type WebhooksCreateResponses = {
	/**
	 * Created response.
	 */
	201: WebhookSecretResponse;
};

export type WebhooksCreateResponse =
	WebhooksCreateResponses[keyof WebhooksCreateResponses];

export type WebhooksReceiveData = {
	body?: never;
	path: {
		/**
		 * Webhook receiver ID
		 */
		id: string;
	};
	query?: never;
	url: "/v1/webhooks/external/receive/{id}";
};

export type WebhooksReceiveErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type WebhooksReceiveError =
	WebhooksReceiveErrors[keyof WebhooksReceiveErrors];

export type WebhooksReceiveResponses = {
	/**
	 * OK response.
	 */
	200: SendResponseBody;
};

export type WebhooksReceiveResponse =
	WebhooksReceiveResponses[keyof WebhooksReceiveResponses];

export type WebhooksTriggerEventData = {
	body: TriggerEventRequestBody;
	path?: never;
	query?: never;
	url: "/v1/webhooks/trigger";
};

export type WebhooksTriggerEventErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type WebhooksTriggerEventError =
	WebhooksTriggerEventErrors[keyof WebhooksTriggerEventErrors];

export type WebhooksTriggerEventResponses = {
	/**
	 * OK response.
	 */
	200: WebhookEventResponse;
};

export type WebhooksTriggerEventResponse =
	WebhooksTriggerEventResponses[keyof WebhooksTriggerEventResponses];

export type WebhooksDeleteData = {
	body?: never;
	path: {
		/**
		 * Webhook ID
		 */
		id: string;
	};
	query?: never;
	url: "/v1/webhooks/{id}";
};

export type WebhooksDeleteErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type WebhooksDeleteError =
	WebhooksDeleteErrors[keyof WebhooksDeleteErrors];

export type WebhooksDeleteResponses = {
	/**
	 * No Content response.
	 */
	204: void;
};

export type WebhooksDeleteResponse =
	WebhooksDeleteResponses[keyof WebhooksDeleteResponses];

export type WebhooksGetData = {
	body?: never;
	path: {
		/**
		 * Webhook ID
		 */
		id: string;
	};
	query?: never;
	url: "/v1/webhooks/{id}";
};

export type WebhooksGetErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type WebhooksGetError = WebhooksGetErrors[keyof WebhooksGetErrors];

export type WebhooksGetResponses = {
	/**
	 * OK response.
	 */
	200: WebhookResponse;
};

export type WebhooksGetResponse =
	WebhooksGetResponses[keyof WebhooksGetResponses];

export type WebhooksUpdateData = {
	body: UpdateRequestBody5;
	path: {
		/**
		 * Webhook ID
		 */
		id: string;
	};
	query?: never;
	url: "/v1/webhooks/{id}";
};

export type WebhooksUpdateErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type WebhooksUpdateError =
	WebhooksUpdateErrors[keyof WebhooksUpdateErrors];

export type WebhooksUpdateResponses = {
	/**
	 * OK response.
	 */
	200: WebhookResponse;
};

export type WebhooksUpdateResponse =
	WebhooksUpdateResponses[keyof WebhooksUpdateResponses];

export type WebhooksListEventsData = {
	body?: never;
	path: {
		/**
		 * Webhook ID
		 */
		id: string;
	};
	query?: {
		/**
		 * Pagination offset
		 */
		offset?: bigint;
		/**
		 * Number of items to return
		 */
		limit?: bigint;
		/**
		 * Filter by event type
		 */
		event_type?: string;
		/**
		 * Filter by delivery status
		 */
		delivered?: boolean;
	};
	url: "/v1/webhooks/{id}/events";
};

export type WebhooksListEventsErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type WebhooksListEventsError =
	WebhooksListEventsErrors[keyof WebhooksListEventsErrors];

export type WebhooksListEventsResponses = {
	/**
	 * OK response.
	 */
	200: ListEventsResponseBody;
};

export type WebhooksListEventsResponse =
	WebhooksListEventsResponses[keyof WebhooksListEventsResponses];

export type WebhooksReplayEventData = {
	body?: never;
	path: {
		/**
		 * Webhook ID
		 */
		id: string;
		/**
		 * Event ID
		 */
		event_id: string;
	};
	query?: never;
	url: "/v1/webhooks/{id}/events/{event_id}/replay";
};

export type WebhooksReplayEventErrors = {
	/**
	 * bad_request: Bad Request response.
	 */
	400: BadRequestError;
	/**
	 * unauthorized: Unauthorized response.
	 */
	401: UnauthorizedError;
	/**
	 * forbidden: Forbidden response.
	 */
	403: ForbiddenError;
	/**
	 * not_found: Not Found response.
	 */
	404: NotFoundError;
	/**
	 * internal_error: Internal Server Error response.
	 */
	500: InternalServerError;
};

export type WebhooksReplayEventError =
	WebhooksReplayEventErrors[keyof WebhooksReplayEventErrors];

export type WebhooksReplayEventResponses = {
	/**
	 * OK response.
	 */
	200: WebhookEventResponse;
};

export type WebhooksReplayEventResponse =
	WebhooksReplayEventResponses[keyof WebhooksReplayEventResponses];

export type ClientOptions = {
	baseUrl:
		| "http://localhost:{port}"
		| "https://{version}.{domain}"
		| "https://{version}.{domain}"
		| (string & {});
};
