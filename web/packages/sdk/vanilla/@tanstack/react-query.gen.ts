// This file is auto-generated by @hey-api/openapi-ts

import {
	type Options,
	webHome,
	healthDebug,
	healthCheck,
	healthMetrics,
	healthReady,
	healthVersion,
	adminHome1,
	adminAdminFilepath,
	adminFaviconIco,
	adminRobotsTxt,
	webHome1,
	webUiFilepath,
	rbacCheckPermission,
	rbacCheckRole,
	apiKeysList,
	apiKeysCreate,
	apiKeysValidate,
	apiKeysDelete,
	apiKeysGet,
	apiKeysUpdate,
	authCheckEmailVerification,
	authCsrf,
	authForgotPassword,
	authLogin,
	authLogout,
	authMe,
	mfaEnroll,
	mfaMethods,
	mfaSendCode,
	mfaUnenroll,
	mfaVerify,
	oauthClientProviderCallback,
	oauthClientListProviders,
	oauthClientProviderAuth,
	passkeysList,
	passkeysLoginBegin,
	passkeysLoginComplete,
	passkeysRegisterBegin,
	passkeysRegisterComplete,
	passkeysDelete,
	passkeysUpdate,
	passwordlessEmail,
	passwordlessMagicLink,
	passwordlessMethods,
	passwordlessSms,
	passwordlessVerify,
	authRefreshToken,
	authRegister,
	authResetPassword,
	authSendEmailVerification,
	ssoProviderCallback,
	ssoListIdentityProviders,
	ssoCreateIdentityProvider,
	ssoDeleteIdentityProvider,
	ssoGetIdentityProvider,
	ssoUpdateIdentityProvider,
	ssoListProviders,
	ssoProviderAuth,
	ssoSamlAcs,
	ssoSamlMetadata,
	authVerifyEmail,
	emailSend,
	emailSendTemplate,
	emailListTemplates,
	emailCreateTemplate,
	emailGetTemplateByType,
	emailDeleteTemplate,
	emailGetTemplate,
	emailUpdateTemplate,
	oauthProviderJwks,
	oauthProviderOidcConfiguration,
	oauthProviderAuthorize,
	oauthProviderListClients,
	oauthProviderCreateClient,
	oauthProviderDeleteClient,
	oauthProviderGetClient,
	oauthProviderUpdateClient,
	oauthProviderRotateClientSecret,
	oauthProviderConsent,
	oauthProviderIntrospect,
	oauthProviderRevoke,
	oauthProviderListScopes,
	oauthProviderCreateScope,
	oauthProviderDeleteScope,
	oauthProviderGetScope,
	oauthProviderUpdateScope,
	oauthProviderToken,
	oauthProviderUserinfo,
	organizationsList,
	organizationsCreate,
	organizationsDelete,
	organizationsGet,
	organizationsUpdate,
	organizationsListFeatures,
	organizationsEnableFeature,
	organizationsDisableFeature,
	organizationsListMembers,
	organizationsAddMember,
	organizationsRemoveMember,
	organizationsUpdateMember,
	rbacListPermissions,
	rbacCreatePermission,
	rbacDeletePermission,
	rbacGetPermission,
	rbacUpdatePermission,
	rbacListRoles,
	rbacCreateRole,
	rbacDeleteRole,
	rbacGetRole,
	rbacUpdateRole,
	rbacListRolePermissions,
	rbacAddRolePermission,
	rbacRemoveRolePermission,
	usersList,
	usersCreate,
	usersUpdateMe,
	usersUpdatePassword,
	usersGetSessions,
	usersDeleteSession,
	usersDelete,
	usersGet,
	usersUpdate,
	usersGetOrganizations,
	webhooksList,
	webhooksCreate,
	webhooksReceive,
	webhooksTriggerEvent,
	webhooksDelete,
	webhooksGet,
	webhooksUpdate,
	webhooksListEvents,
	webhooksReplayEvent,
} from "../sdk.gen";
import {
	queryOptions,
	infiniteQueryOptions,
	type InfiniteData,
	type UseMutationOptions,
} from "@tanstack/react-query";
import type {
	WebHomeData,
	HealthDebugData,
	HealthCheckData,
	HealthMetricsData,
	HealthReadyData,
	HealthVersionData,
	AdminHome1Data,
	AdminAdminFilepathData,
	AdminFaviconIcoData,
	AdminRobotsTxtData,
	WebHome1Data,
	WebUiFilepathData,
	RbacCheckPermissionData,
	RbacCheckRoleData,
	ApiKeysListData,
	ApiKeysListError,
	ApiKeysListResponse,
	ApiKeysCreateData,
	ApiKeysCreateError,
	ApiKeysCreateResponse,
	ApiKeysValidateData,
	ApiKeysDeleteData,
	ApiKeysDeleteError,
	ApiKeysDeleteResponse,
	ApiKeysGetData,
	ApiKeysUpdateData,
	ApiKeysUpdateError,
	ApiKeysUpdateResponse,
	AuthCheckEmailVerificationData,
	AuthCsrfData,
	AuthForgotPasswordData,
	AuthForgotPasswordError,
	AuthForgotPasswordResponse,
	AuthLoginData,
	AuthLoginError,
	AuthLoginResponse,
	AuthLogoutData,
	AuthLogoutError,
	AuthLogoutResponse,
	AuthMeData,
	MfaEnrollData,
	MfaEnrollError,
	MfaEnrollResponse,
	MfaMethodsData,
	MfaSendCodeData,
	MfaSendCodeError,
	MfaSendCodeResponse,
	MfaUnenrollData,
	MfaUnenrollError,
	MfaUnenrollResponse,
	MfaVerifyData,
	MfaVerifyError,
	MfaVerifyResponse,
	OauthClientProviderCallbackData,
	OauthClientListProvidersData,
	OauthClientProviderAuthData,
	PasskeysListData,
	PasskeysLoginBeginData,
	PasskeysLoginBeginError,
	PasskeysLoginBeginResponse,
	PasskeysLoginCompleteData,
	PasskeysLoginCompleteError,
	PasskeysLoginCompleteResponse,
	PasskeysRegisterBeginData,
	PasskeysRegisterBeginError,
	PasskeysRegisterBeginResponse,
	PasskeysRegisterCompleteData,
	PasskeysRegisterCompleteError,
	PasskeysRegisterCompleteResponse,
	PasskeysDeleteData,
	PasskeysDeleteError,
	PasskeysDeleteResponse,
	PasskeysUpdateData,
	PasskeysUpdateError,
	PasskeysUpdateResponse,
	PasswordlessEmailData,
	PasswordlessEmailError,
	PasswordlessEmailResponse,
	PasswordlessMagicLinkData,
	PasswordlessMagicLinkError,
	PasswordlessMagicLinkResponse,
	PasswordlessMethodsData,
	PasswordlessSmsData,
	PasswordlessSmsError,
	PasswordlessSmsResponse,
	PasswordlessVerifyData,
	PasswordlessVerifyError,
	PasswordlessVerifyResponse,
	AuthRefreshTokenData,
	AuthRefreshTokenError,
	AuthRefreshTokenResponse,
	AuthRegisterData,
	AuthRegisterError,
	AuthRegisterResponse,
	AuthResetPasswordData,
	AuthResetPasswordError,
	AuthResetPasswordResponse,
	AuthSendEmailVerificationData,
	AuthSendEmailVerificationError,
	AuthSendEmailVerificationResponse,
	SsoProviderCallbackData,
	SsoListIdentityProvidersData,
	SsoCreateIdentityProviderData,
	SsoCreateIdentityProviderError,
	SsoCreateIdentityProviderResponse,
	SsoDeleteIdentityProviderData,
	SsoDeleteIdentityProviderError,
	SsoDeleteIdentityProviderResponse,
	SsoGetIdentityProviderData,
	SsoUpdateIdentityProviderData,
	SsoUpdateIdentityProviderError,
	SsoUpdateIdentityProviderResponse,
	SsoListProvidersData,
	SsoProviderAuthData,
	SsoSamlAcsData,
	SsoSamlAcsError,
	SsoSamlAcsResponse,
	SsoSamlMetadataData,
	AuthVerifyEmailData,
	AuthVerifyEmailError,
	AuthVerifyEmailResponse,
	EmailSendData,
	EmailSendError,
	EmailSendResponse,
	EmailSendTemplateData,
	EmailSendTemplateError,
	EmailSendTemplateResponse,
	EmailListTemplatesData,
	EmailListTemplatesError,
	EmailListTemplatesResponse,
	EmailCreateTemplateData,
	EmailCreateTemplateError,
	EmailCreateTemplateResponse,
	EmailGetTemplateByTypeData,
	EmailDeleteTemplateData,
	EmailDeleteTemplateError,
	EmailDeleteTemplateResponse,
	EmailGetTemplateData,
	EmailUpdateTemplateData,
	EmailUpdateTemplateError,
	EmailUpdateTemplateResponse,
	OauthProviderJwksData,
	OauthProviderOidcConfigurationData,
	OauthProviderAuthorizeData,
	OauthProviderListClientsData,
	OauthProviderListClientsError,
	OauthProviderListClientsResponse,
	OauthProviderCreateClientData,
	OauthProviderCreateClientError,
	OauthProviderCreateClientResponse,
	OauthProviderDeleteClientData,
	OauthProviderDeleteClientError,
	OauthProviderDeleteClientResponse,
	OauthProviderGetClientData,
	OauthProviderUpdateClientData,
	OauthProviderUpdateClientError,
	OauthProviderUpdateClientResponse,
	OauthProviderRotateClientSecretData,
	OauthProviderRotateClientSecretError,
	OauthProviderRotateClientSecretResponse,
	OauthProviderConsentData,
	OauthProviderConsentError,
	OauthProviderIntrospectData,
	OauthProviderIntrospectError,
	OauthProviderIntrospectResponse,
	OauthProviderRevokeData,
	OauthProviderRevokeError,
	OauthProviderListScopesData,
	OauthProviderListScopesError,
	OauthProviderListScopesResponse,
	OauthProviderCreateScopeData,
	OauthProviderCreateScopeError,
	OauthProviderCreateScopeResponse,
	OauthProviderDeleteScopeData,
	OauthProviderDeleteScopeError,
	OauthProviderDeleteScopeResponse,
	OauthProviderGetScopeData,
	OauthProviderUpdateScopeData,
	OauthProviderUpdateScopeError,
	OauthProviderUpdateScopeResponse,
	OauthProviderTokenData,
	OauthProviderTokenError,
	OauthProviderTokenResponse,
	OauthProviderUserinfoData,
	OrganizationsListData,
	OrganizationsListError,
	OrganizationsListResponse,
	OrganizationsCreateData,
	OrganizationsCreateError,
	OrganizationsCreateResponse,
	OrganizationsDeleteData,
	OrganizationsDeleteError,
	OrganizationsDeleteResponse,
	OrganizationsGetData,
	OrganizationsUpdateData,
	OrganizationsUpdateError,
	OrganizationsUpdateResponse,
	OrganizationsListFeaturesData,
	OrganizationsEnableFeatureData,
	OrganizationsEnableFeatureError,
	OrganizationsEnableFeatureResponse,
	OrganizationsDisableFeatureData,
	OrganizationsDisableFeatureError,
	OrganizationsDisableFeatureResponse,
	OrganizationsListMembersData,
	OrganizationsListMembersError,
	OrganizationsListMembersResponse,
	OrganizationsAddMemberData,
	OrganizationsAddMemberError,
	OrganizationsAddMemberResponse,
	OrganizationsRemoveMemberData,
	OrganizationsRemoveMemberError,
	OrganizationsRemoveMemberResponse,
	OrganizationsUpdateMemberData,
	OrganizationsUpdateMemberError,
	OrganizationsUpdateMemberResponse,
	RbacListPermissionsData,
	RbacListPermissionsError,
	RbacListPermissionsResponse,
	RbacCreatePermissionData,
	RbacCreatePermissionError,
	RbacCreatePermissionResponse,
	RbacDeletePermissionData,
	RbacDeletePermissionError,
	RbacDeletePermissionResponse,
	RbacGetPermissionData,
	RbacUpdatePermissionData,
	RbacUpdatePermissionError,
	RbacUpdatePermissionResponse,
	RbacListRolesData,
	RbacListRolesError,
	RbacListRolesResponse,
	RbacCreateRoleData,
	RbacCreateRoleError,
	RbacCreateRoleResponse,
	RbacDeleteRoleData,
	RbacDeleteRoleError,
	RbacDeleteRoleResponse,
	RbacGetRoleData,
	RbacUpdateRoleData,
	RbacUpdateRoleError,
	RbacUpdateRoleResponse,
	RbacListRolePermissionsData,
	RbacAddRolePermissionData,
	RbacAddRolePermissionError,
	RbacAddRolePermissionResponse,
	RbacRemoveRolePermissionData,
	RbacRemoveRolePermissionError,
	RbacRemoveRolePermissionResponse,
	UsersListData,
	UsersListError,
	UsersListResponse,
	UsersCreateData,
	UsersCreateError,
	UsersCreateResponse,
	UsersUpdateMeData,
	UsersUpdateMeError,
	UsersUpdateMeResponse,
	UsersUpdatePasswordData,
	UsersUpdatePasswordError,
	UsersUpdatePasswordResponse,
	UsersGetSessionsData,
	UsersDeleteSessionData,
	UsersDeleteSessionError,
	UsersDeleteSessionResponse,
	UsersDeleteData,
	UsersDeleteError,
	UsersDeleteResponse,
	UsersGetData,
	UsersUpdateData,
	UsersUpdateError,
	UsersUpdateResponse,
	UsersGetOrganizationsData,
	WebhooksListData,
	WebhooksListError,
	WebhooksListResponse,
	WebhooksCreateData,
	WebhooksCreateError,
	WebhooksCreateResponse,
	WebhooksReceiveData,
	WebhooksReceiveError,
	WebhooksReceiveResponse,
	WebhooksTriggerEventData,
	WebhooksTriggerEventError,
	WebhooksTriggerEventResponse,
	WebhooksDeleteData,
	WebhooksDeleteError,
	WebhooksDeleteResponse,
	WebhooksGetData,
	WebhooksUpdateData,
	WebhooksUpdateError,
	WebhooksUpdateResponse,
	WebhooksListEventsData,
	WebhooksListEventsError,
	WebhooksListEventsResponse,
	WebhooksReplayEventData,
	WebhooksReplayEventError,
	WebhooksReplayEventResponse,
} from "../types.gen";
import { client as _heyApiClient } from "../client.gen";

export type QueryKey<TOptions extends Options> = [
	Pick<TOptions, "baseUrl" | "body" | "headers" | "path" | "query"> & {
		_id: string;
		_infinite?: boolean;
	},
];

const createQueryKey = <TOptions extends Options>(
	id: string,
	options?: TOptions,
	infinite?: boolean,
): [QueryKey<TOptions>[0]] => {
	const params: QueryKey<TOptions>[0] = {
		_id: id,
		baseUrl: (options?.client ?? _heyApiClient).getConfig().baseUrl,
	} as QueryKey<TOptions>[0];
	if (infinite) {
		params._infinite = infinite;
	}
	if (options?.body) {
		params.body = options.body;
	}
	if (options?.headers) {
		params.headers = options.headers;
	}
	if (options?.path) {
		params.path = options.path;
	}
	if (options?.query) {
		params.query = options.query;
	}
	return [params];
};

export const webHomeQueryKey = (options?: Options<WebHomeData>) =>
	createQueryKey("webHome", options);

export const webHomeOptions = (options?: Options<WebHomeData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await webHome({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: webHomeQueryKey(options),
	});
};

export const healthDebugQueryKey = (options?: Options<HealthDebugData>) =>
	createQueryKey("healthDebug", options);

export const healthDebugOptions = (options?: Options<HealthDebugData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await healthDebug({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: healthDebugQueryKey(options),
	});
};

export const healthCheckQueryKey = (options?: Options<HealthCheckData>) =>
	createQueryKey("healthCheck", options);

export const healthCheckOptions = (options?: Options<HealthCheckData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await healthCheck({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: healthCheckQueryKey(options),
	});
};

export const healthMetricsQueryKey = (options?: Options<HealthMetricsData>) =>
	createQueryKey("healthMetrics", options);

export const healthMetricsOptions = (options?: Options<HealthMetricsData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await healthMetrics({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: healthMetricsQueryKey(options),
	});
};

export const healthReadyQueryKey = (options?: Options<HealthReadyData>) =>
	createQueryKey("healthReady", options);

export const healthReadyOptions = (options?: Options<HealthReadyData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await healthReady({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: healthReadyQueryKey(options),
	});
};

export const healthVersionQueryKey = (options?: Options<HealthVersionData>) =>
	createQueryKey("healthVersion", options);

export const healthVersionOptions = (options?: Options<HealthVersionData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await healthVersion({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: healthVersionQueryKey(options),
	});
};

export const adminHome1QueryKey = (options?: Options<AdminHome1Data>) =>
	createQueryKey("adminHome1", options);

export const adminHome1Options = (options?: Options<AdminHome1Data>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await adminHome1({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: adminHome1QueryKey(options),
	});
};

export const adminAdminFilepathQueryKey = (
	options: Options<AdminAdminFilepathData>,
) => createQueryKey("adminAdminFilepath", options);

export const adminAdminFilepathOptions = (
	options: Options<AdminAdminFilepathData>,
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await adminAdminFilepath({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: adminAdminFilepathQueryKey(options),
	});
};

export const adminFaviconIcoQueryKey = (
	options?: Options<AdminFaviconIcoData>,
) => createQueryKey("adminFaviconIco", options);

export const adminFaviconIcoOptions = (
	options?: Options<AdminFaviconIcoData>,
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await adminFaviconIco({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: adminFaviconIcoQueryKey(options),
	});
};

export const adminRobotsTxtQueryKey = (options?: Options<AdminRobotsTxtData>) =>
	createQueryKey("adminRobotsTxt", options);

export const adminRobotsTxtOptions = (
	options?: Options<AdminRobotsTxtData>,
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await adminRobotsTxt({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: adminRobotsTxtQueryKey(options),
	});
};

export const webHome1QueryKey = (options?: Options<WebHome1Data>) =>
	createQueryKey("webHome1", options);

export const webHome1Options = (options?: Options<WebHome1Data>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await webHome1({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: webHome1QueryKey(options),
	});
};

export const webUiFilepathQueryKey = (options: Options<WebUiFilepathData>) =>
	createQueryKey("webUiFilepath", options);

export const webUiFilepathOptions = (options: Options<WebUiFilepathData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await webUiFilepath({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: webUiFilepathQueryKey(options),
	});
};

export const rbacCheckPermissionQueryKey = (
	options: Options<RbacCheckPermissionData>,
) => createQueryKey("rbacCheckPermission", options);

export const rbacCheckPermissionOptions = (
	options: Options<RbacCheckPermissionData>,
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await rbacCheckPermission({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: rbacCheckPermissionQueryKey(options),
	});
};

export const rbacCheckRoleQueryKey = (options: Options<RbacCheckRoleData>) =>
	createQueryKey("rbacCheckRole", options);

export const rbacCheckRoleOptions = (options: Options<RbacCheckRoleData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await rbacCheckRole({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: rbacCheckRoleQueryKey(options),
	});
};

export const apiKeysListQueryKey = (options?: Options<ApiKeysListData>) =>
	createQueryKey("apiKeysList", options);

export const apiKeysListOptions = (options?: Options<ApiKeysListData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await apiKeysList({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: apiKeysListQueryKey(options),
	});
};

const createInfiniteParams = <
	K extends Pick<QueryKey<Options>[0], "body" | "headers" | "path" | "query">,
>(
	queryKey: QueryKey<Options>,
	page: K,
) => {
	const params = queryKey[0];
	if (page.body) {
		params.body = {
			...(queryKey[0].body as any),
			...(page.body as any),
		};
	}
	if (page.headers) {
		params.headers = {
			...queryKey[0].headers,
			...page.headers,
		};
	}
	if (page.path) {
		params.path = {
			...(queryKey[0].path as any),
			...(page.path as any),
		};
	}
	if (page.query) {
		params.query = {
			...(queryKey[0].query as any),
			...(page.query as any),
		};
	}
	return params as unknown as typeof page;
};

export const apiKeysListInfiniteQueryKey = (
	options?: Options<ApiKeysListData>,
): QueryKey<Options<ApiKeysListData>> =>
	createQueryKey("apiKeysList", options, true);

export const apiKeysListInfiniteOptions = (
	options?: Options<ApiKeysListData>,
) => {
	return infiniteQueryOptions<
		ApiKeysListResponse,
		ApiKeysListError,
		InfiniteData<ApiKeysListResponse>,
		QueryKey<Options<ApiKeysListData>>,
		| bigint
		| Pick<
				QueryKey<Options<ApiKeysListData>>[0],
				"body" | "headers" | "path" | "query"
		  >
	>(
		// @ts-ignore
		{
			queryFn: async ({ pageParam, queryKey, signal }) => {
				// @ts-ignore
				const page: Pick<
					QueryKey<Options<ApiKeysListData>>[0],
					"body" | "headers" | "path" | "query"
				> =
					typeof pageParam === "object"
						? pageParam
						: {
								query: {
									offset: pageParam,
								},
							};
				const params = createInfiniteParams(queryKey, page);
				const { data } = await apiKeysList({
					...options,
					...params,
					signal,
					throwOnError: true,
				});
				return data;
			},
			queryKey: apiKeysListInfiniteQueryKey(options),
		},
	);
};

export const apiKeysCreateQueryKey = (options: Options<ApiKeysCreateData>) =>
	createQueryKey("apiKeysCreate", options);

export const apiKeysCreateOptions = (options: Options<ApiKeysCreateData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await apiKeysCreate({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: apiKeysCreateQueryKey(options),
	});
};

export const apiKeysCreateMutation = (
	options?: Partial<Options<ApiKeysCreateData>>,
) => {
	const mutationOptions: UseMutationOptions<
		ApiKeysCreateResponse,
		ApiKeysCreateError,
		Options<ApiKeysCreateData>
	> = {
		mutationFn: async (localOptions) => {
			const { data } = await apiKeysCreate({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const apiKeysValidateQueryKey = (
	options: Options<ApiKeysValidateData>,
) => createQueryKey("apiKeysValidate", options);

export const apiKeysValidateOptions = (
	options: Options<ApiKeysValidateData>,
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await apiKeysValidate({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: apiKeysValidateQueryKey(options),
	});
};

export const apiKeysDeleteMutation = (
	options?: Partial<Options<ApiKeysDeleteData>>,
) => {
	const mutationOptions: UseMutationOptions<
		ApiKeysDeleteResponse,
		ApiKeysDeleteError,
		Options<ApiKeysDeleteData>
	> = {
		mutationFn: async (localOptions) => {
			const { data } = await apiKeysDelete({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const apiKeysGetQueryKey = (options: Options<ApiKeysGetData>) =>
	createQueryKey("apiKeysGet", options);

export const apiKeysGetOptions = (options: Options<ApiKeysGetData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await apiKeysGet({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: apiKeysGetQueryKey(options),
	});
};

export const apiKeysUpdateMutation = (
	options?: Partial<Options<ApiKeysUpdateData>>,
) => {
	const mutationOptions: UseMutationOptions<
		ApiKeysUpdateResponse,
		ApiKeysUpdateError,
		Options<ApiKeysUpdateData>
	> = {
		mutationFn: async (localOptions) => {
			const { data } = await apiKeysUpdate({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const authCheckEmailVerificationQueryKey = (
	options: Options<AuthCheckEmailVerificationData>,
) => createQueryKey("authCheckEmailVerification", options);

export const authCheckEmailVerificationOptions = (
	options: Options<AuthCheckEmailVerificationData>,
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await authCheckEmailVerification({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: authCheckEmailVerificationQueryKey(options),
	});
};

export const authCsrfQueryKey = (options?: Options<AuthCsrfData>) =>
	createQueryKey("authCsrf", options);

export const authCsrfOptions = (options?: Options<AuthCsrfData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await authCsrf({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: authCsrfQueryKey(options),
	});
};

export const authForgotPasswordQueryKey = (
	options: Options<AuthForgotPasswordData>,
) => createQueryKey("authForgotPassword", options);

export const authForgotPasswordOptions = (
	options: Options<AuthForgotPasswordData>,
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await authForgotPassword({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: authForgotPasswordQueryKey(options),
	});
};

export const authForgotPasswordMutation = (
	options?: Partial<Options<AuthForgotPasswordData>>,
) => {
	const mutationOptions: UseMutationOptions<
		AuthForgotPasswordResponse,
		AuthForgotPasswordError,
		Options<AuthForgotPasswordData>
	> = {
		mutationFn: async (localOptions) => {
			const { data } = await authForgotPassword({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const authLoginQueryKey = (options: Options<AuthLoginData>) =>
	createQueryKey("authLogin", options);

export const authLoginOptions = (options: Options<AuthLoginData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await authLogin({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: authLoginQueryKey(options),
	});
};

export const authLoginMutation = (
	options?: Partial<Options<AuthLoginData>>,
) => {
	const mutationOptions: UseMutationOptions<
		AuthLoginResponse,
		AuthLoginError,
		Options<AuthLoginData>
	> = {
		mutationFn: async (localOptions) => {
			const { data } = await authLogin({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const authLogoutQueryKey = (options?: Options<AuthLogoutData>) =>
	createQueryKey("authLogout", options);

export const authLogoutOptions = (options?: Options<AuthLogoutData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await authLogout({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: authLogoutQueryKey(options),
	});
};

export const authLogoutMutation = (
	options?: Partial<Options<AuthLogoutData>>,
) => {
	const mutationOptions: UseMutationOptions<
		AuthLogoutResponse,
		AuthLogoutError,
		Options<AuthLogoutData>
	> = {
		mutationFn: async (localOptions) => {
			const { data } = await authLogout({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const authMeQueryKey = (options?: Options<AuthMeData>) =>
	createQueryKey("authMe", options);

export const authMeOptions = (options?: Options<AuthMeData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await authMe({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: authMeQueryKey(options),
	});
};

export const mfaEnrollQueryKey = (options: Options<MfaEnrollData>) =>
	createQueryKey("mfaEnroll", options);

export const mfaEnrollOptions = (options: Options<MfaEnrollData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await mfaEnroll({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: mfaEnrollQueryKey(options),
	});
};

export const mfaEnrollMutation = (
	options?: Partial<Options<MfaEnrollData>>,
) => {
	const mutationOptions: UseMutationOptions<
		MfaEnrollResponse,
		MfaEnrollError,
		Options<MfaEnrollData>
	> = {
		mutationFn: async (localOptions) => {
			const { data } = await mfaEnroll({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const mfaMethodsQueryKey = (options?: Options<MfaMethodsData>) =>
	createQueryKey("mfaMethods", options);

export const mfaMethodsOptions = (options?: Options<MfaMethodsData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await mfaMethods({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: mfaMethodsQueryKey(options),
	});
};

export const mfaSendCodeQueryKey = (options: Options<MfaSendCodeData>) =>
	createQueryKey("mfaSendCode", options);

export const mfaSendCodeOptions = (options: Options<MfaSendCodeData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await mfaSendCode({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: mfaSendCodeQueryKey(options),
	});
};

export const mfaSendCodeMutation = (
	options?: Partial<Options<MfaSendCodeData>>,
) => {
	const mutationOptions: UseMutationOptions<
		MfaSendCodeResponse,
		MfaSendCodeError,
		Options<MfaSendCodeData>
	> = {
		mutationFn: async (localOptions) => {
			const { data } = await mfaSendCode({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const mfaUnenrollQueryKey = (options: Options<MfaUnenrollData>) =>
	createQueryKey("mfaUnenroll", options);

export const mfaUnenrollOptions = (options: Options<MfaUnenrollData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await mfaUnenroll({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: mfaUnenrollQueryKey(options),
	});
};

export const mfaUnenrollMutation = (
	options?: Partial<Options<MfaUnenrollData>>,
) => {
	const mutationOptions: UseMutationOptions<
		MfaUnenrollResponse,
		MfaUnenrollError,
		Options<MfaUnenrollData>
	> = {
		mutationFn: async (localOptions) => {
			const { data } = await mfaUnenroll({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const mfaVerifyQueryKey = (options: Options<MfaVerifyData>) =>
	createQueryKey("mfaVerify", options);

export const mfaVerifyOptions = (options: Options<MfaVerifyData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await mfaVerify({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: mfaVerifyQueryKey(options),
	});
};

export const mfaVerifyMutation = (
	options?: Partial<Options<MfaVerifyData>>,
) => {
	const mutationOptions: UseMutationOptions<
		MfaVerifyResponse,
		MfaVerifyError,
		Options<MfaVerifyData>
	> = {
		mutationFn: async (localOptions) => {
			const { data } = await mfaVerify({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const oauthClientProviderCallbackQueryKey = (
	options: Options<OauthClientProviderCallbackData>,
) => createQueryKey("oauthClientProviderCallback", options);

export const oauthClientProviderCallbackOptions = (
	options: Options<OauthClientProviderCallbackData>,
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await oauthClientProviderCallback({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: oauthClientProviderCallbackQueryKey(options),
	});
};

export const oauthClientListProvidersQueryKey = (
	options?: Options<OauthClientListProvidersData>,
) => createQueryKey("oauthClientListProviders", options);

export const oauthClientListProvidersOptions = (
	options?: Options<OauthClientListProvidersData>,
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await oauthClientListProviders({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: oauthClientListProvidersQueryKey(options),
	});
};

export const oauthClientProviderAuthQueryKey = (
	options: Options<OauthClientProviderAuthData>,
) => createQueryKey("oauthClientProviderAuth", options);

export const oauthClientProviderAuthOptions = (
	options: Options<OauthClientProviderAuthData>,
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await oauthClientProviderAuth({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: oauthClientProviderAuthQueryKey(options),
	});
};

export const passkeysListQueryKey = (options?: Options<PasskeysListData>) =>
	createQueryKey("passkeysList", options);

export const passkeysListOptions = (options?: Options<PasskeysListData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await passkeysList({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: passkeysListQueryKey(options),
	});
};

export const passkeysLoginBeginQueryKey = (
	options?: Options<PasskeysLoginBeginData>,
) => createQueryKey("passkeysLoginBegin", options);

export const passkeysLoginBeginOptions = (
	options?: Options<PasskeysLoginBeginData>,
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await passkeysLoginBegin({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: passkeysLoginBeginQueryKey(options),
	});
};

export const passkeysLoginBeginMutation = (
	options?: Partial<Options<PasskeysLoginBeginData>>,
) => {
	const mutationOptions: UseMutationOptions<
		PasskeysLoginBeginResponse,
		PasskeysLoginBeginError,
		Options<PasskeysLoginBeginData>
	> = {
		mutationFn: async (localOptions) => {
			const { data } = await passkeysLoginBegin({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const passkeysLoginCompleteQueryKey = (
	options: Options<PasskeysLoginCompleteData>,
) => createQueryKey("passkeysLoginComplete", options);

export const passkeysLoginCompleteOptions = (
	options: Options<PasskeysLoginCompleteData>,
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await passkeysLoginComplete({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: passkeysLoginCompleteQueryKey(options),
	});
};

export const passkeysLoginCompleteMutation = (
	options?: Partial<Options<PasskeysLoginCompleteData>>,
) => {
	const mutationOptions: UseMutationOptions<
		PasskeysLoginCompleteResponse,
		PasskeysLoginCompleteError,
		Options<PasskeysLoginCompleteData>
	> = {
		mutationFn: async (localOptions) => {
			const { data } = await passkeysLoginComplete({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const passkeysRegisterBeginQueryKey = (
	options: Options<PasskeysRegisterBeginData>,
) => createQueryKey("passkeysRegisterBegin", options);

export const passkeysRegisterBeginOptions = (
	options: Options<PasskeysRegisterBeginData>,
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await passkeysRegisterBegin({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: passkeysRegisterBeginQueryKey(options),
	});
};

export const passkeysRegisterBeginMutation = (
	options?: Partial<Options<PasskeysRegisterBeginData>>,
) => {
	const mutationOptions: UseMutationOptions<
		PasskeysRegisterBeginResponse,
		PasskeysRegisterBeginError,
		Options<PasskeysRegisterBeginData>
	> = {
		mutationFn: async (localOptions) => {
			const { data } = await passkeysRegisterBegin({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const passkeysRegisterCompleteQueryKey = (
	options: Options<PasskeysRegisterCompleteData>,
) => createQueryKey("passkeysRegisterComplete", options);

export const passkeysRegisterCompleteOptions = (
	options: Options<PasskeysRegisterCompleteData>,
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await passkeysRegisterComplete({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: passkeysRegisterCompleteQueryKey(options),
	});
};

export const passkeysRegisterCompleteMutation = (
	options?: Partial<Options<PasskeysRegisterCompleteData>>,
) => {
	const mutationOptions: UseMutationOptions<
		PasskeysRegisterCompleteResponse,
		PasskeysRegisterCompleteError,
		Options<PasskeysRegisterCompleteData>
	> = {
		mutationFn: async (localOptions) => {
			const { data } = await passkeysRegisterComplete({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const passkeysDeleteMutation = (
	options?: Partial<Options<PasskeysDeleteData>>,
) => {
	const mutationOptions: UseMutationOptions<
		PasskeysDeleteResponse,
		PasskeysDeleteError,
		Options<PasskeysDeleteData>
	> = {
		mutationFn: async (localOptions) => {
			const { data } = await passkeysDelete({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const passkeysUpdateMutation = (
	options?: Partial<Options<PasskeysUpdateData>>,
) => {
	const mutationOptions: UseMutationOptions<
		PasskeysUpdateResponse,
		PasskeysUpdateError,
		Options<PasskeysUpdateData>
	> = {
		mutationFn: async (localOptions) => {
			const { data } = await passkeysUpdate({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const passwordlessEmailQueryKey = (
	options: Options<PasswordlessEmailData>,
) => createQueryKey("passwordlessEmail", options);

export const passwordlessEmailOptions = (
	options: Options<PasswordlessEmailData>,
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await passwordlessEmail({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: passwordlessEmailQueryKey(options),
	});
};

export const passwordlessEmailMutation = (
	options?: Partial<Options<PasswordlessEmailData>>,
) => {
	const mutationOptions: UseMutationOptions<
		PasswordlessEmailResponse,
		PasswordlessEmailError,
		Options<PasswordlessEmailData>
	> = {
		mutationFn: async (localOptions) => {
			const { data } = await passwordlessEmail({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const passwordlessMagicLinkQueryKey = (
	options: Options<PasswordlessMagicLinkData>,
) => createQueryKey("passwordlessMagicLink", options);

export const passwordlessMagicLinkOptions = (
	options: Options<PasswordlessMagicLinkData>,
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await passwordlessMagicLink({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: passwordlessMagicLinkQueryKey(options),
	});
};

export const passwordlessMagicLinkMutation = (
	options?: Partial<Options<PasswordlessMagicLinkData>>,
) => {
	const mutationOptions: UseMutationOptions<
		PasswordlessMagicLinkResponse,
		PasswordlessMagicLinkError,
		Options<PasswordlessMagicLinkData>
	> = {
		mutationFn: async (localOptions) => {
			const { data } = await passwordlessMagicLink({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const passwordlessMethodsQueryKey = (
	options?: Options<PasswordlessMethodsData>,
) => createQueryKey("passwordlessMethods", options);

export const passwordlessMethodsOptions = (
	options?: Options<PasswordlessMethodsData>,
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await passwordlessMethods({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: passwordlessMethodsQueryKey(options),
	});
};

export const passwordlessSmsQueryKey = (
	options: Options<PasswordlessSmsData>,
) => createQueryKey("passwordlessSms", options);

export const passwordlessSmsOptions = (
	options: Options<PasswordlessSmsData>,
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await passwordlessSms({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: passwordlessSmsQueryKey(options),
	});
};

export const passwordlessSmsMutation = (
	options?: Partial<Options<PasswordlessSmsData>>,
) => {
	const mutationOptions: UseMutationOptions<
		PasswordlessSmsResponse,
		PasswordlessSmsError,
		Options<PasswordlessSmsData>
	> = {
		mutationFn: async (localOptions) => {
			const { data } = await passwordlessSms({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const passwordlessVerifyQueryKey = (
	options: Options<PasswordlessVerifyData>,
) => createQueryKey("passwordlessVerify", options);

export const passwordlessVerifyOptions = (
	options: Options<PasswordlessVerifyData>,
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await passwordlessVerify({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: passwordlessVerifyQueryKey(options),
	});
};

export const passwordlessVerifyMutation = (
	options?: Partial<Options<PasswordlessVerifyData>>,
) => {
	const mutationOptions: UseMutationOptions<
		PasswordlessVerifyResponse,
		PasswordlessVerifyError,
		Options<PasswordlessVerifyData>
	> = {
		mutationFn: async (localOptions) => {
			const { data } = await passwordlessVerify({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const authRefreshTokenQueryKey = (
	options: Options<AuthRefreshTokenData>,
) => createQueryKey("authRefreshToken", options);

export const authRefreshTokenOptions = (
	options: Options<AuthRefreshTokenData>,
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await authRefreshToken({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: authRefreshTokenQueryKey(options),
	});
};

export const authRefreshTokenMutation = (
	options?: Partial<Options<AuthRefreshTokenData>>,
) => {
	const mutationOptions: UseMutationOptions<
		AuthRefreshTokenResponse,
		AuthRefreshTokenError,
		Options<AuthRefreshTokenData>
	> = {
		mutationFn: async (localOptions) => {
			const { data } = await authRefreshToken({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const authRegisterQueryKey = (options: Options<AuthRegisterData>) =>
	createQueryKey("authRegister", options);

export const authRegisterOptions = (options: Options<AuthRegisterData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await authRegister({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: authRegisterQueryKey(options),
	});
};

export const authRegisterMutation = (
	options?: Partial<Options<AuthRegisterData>>,
) => {
	const mutationOptions: UseMutationOptions<
		AuthRegisterResponse,
		AuthRegisterError,
		Options<AuthRegisterData>
	> = {
		mutationFn: async (localOptions) => {
			const { data } = await authRegister({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const authResetPasswordQueryKey = (
	options: Options<AuthResetPasswordData>,
) => createQueryKey("authResetPassword", options);

export const authResetPasswordOptions = (
	options: Options<AuthResetPasswordData>,
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await authResetPassword({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: authResetPasswordQueryKey(options),
	});
};

export const authResetPasswordMutation = (
	options?: Partial<Options<AuthResetPasswordData>>,
) => {
	const mutationOptions: UseMutationOptions<
		AuthResetPasswordResponse,
		AuthResetPasswordError,
		Options<AuthResetPasswordData>
	> = {
		mutationFn: async (localOptions) => {
			const { data } = await authResetPassword({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const authSendEmailVerificationQueryKey = (
	options: Options<AuthSendEmailVerificationData>,
) => createQueryKey("authSendEmailVerification", options);

export const authSendEmailVerificationOptions = (
	options: Options<AuthSendEmailVerificationData>,
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await authSendEmailVerification({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: authSendEmailVerificationQueryKey(options),
	});
};

export const authSendEmailVerificationMutation = (
	options?: Partial<Options<AuthSendEmailVerificationData>>,
) => {
	const mutationOptions: UseMutationOptions<
		AuthSendEmailVerificationResponse,
		AuthSendEmailVerificationError,
		Options<AuthSendEmailVerificationData>
	> = {
		mutationFn: async (localOptions) => {
			const { data } = await authSendEmailVerification({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const ssoProviderCallbackQueryKey = (
	options: Options<SsoProviderCallbackData>,
) => createQueryKey("ssoProviderCallback", options);

export const ssoProviderCallbackOptions = (
	options: Options<SsoProviderCallbackData>,
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await ssoProviderCallback({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: ssoProviderCallbackQueryKey(options),
	});
};

export const ssoListIdentityProvidersQueryKey = (
	options: Options<SsoListIdentityProvidersData>,
) => createQueryKey("ssoListIdentityProviders", options);

export const ssoListIdentityProvidersOptions = (
	options: Options<SsoListIdentityProvidersData>,
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await ssoListIdentityProviders({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: ssoListIdentityProvidersQueryKey(options),
	});
};

export const ssoCreateIdentityProviderQueryKey = (
	options: Options<SsoCreateIdentityProviderData>,
) => createQueryKey("ssoCreateIdentityProvider", options);

export const ssoCreateIdentityProviderOptions = (
	options: Options<SsoCreateIdentityProviderData>,
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await ssoCreateIdentityProvider({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: ssoCreateIdentityProviderQueryKey(options),
	});
};

export const ssoCreateIdentityProviderMutation = (
	options?: Partial<Options<SsoCreateIdentityProviderData>>,
) => {
	const mutationOptions: UseMutationOptions<
		SsoCreateIdentityProviderResponse,
		SsoCreateIdentityProviderError,
		Options<SsoCreateIdentityProviderData>
	> = {
		mutationFn: async (localOptions) => {
			const { data } = await ssoCreateIdentityProvider({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const ssoDeleteIdentityProviderMutation = (
	options?: Partial<Options<SsoDeleteIdentityProviderData>>,
) => {
	const mutationOptions: UseMutationOptions<
		SsoDeleteIdentityProviderResponse,
		SsoDeleteIdentityProviderError,
		Options<SsoDeleteIdentityProviderData>
	> = {
		mutationFn: async (localOptions) => {
			const { data } = await ssoDeleteIdentityProvider({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const ssoGetIdentityProviderQueryKey = (
	options: Options<SsoGetIdentityProviderData>,
) => createQueryKey("ssoGetIdentityProvider", options);

export const ssoGetIdentityProviderOptions = (
	options: Options<SsoGetIdentityProviderData>,
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await ssoGetIdentityProvider({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: ssoGetIdentityProviderQueryKey(options),
	});
};

export const ssoUpdateIdentityProviderMutation = (
	options?: Partial<Options<SsoUpdateIdentityProviderData>>,
) => {
	const mutationOptions: UseMutationOptions<
		SsoUpdateIdentityProviderResponse,
		SsoUpdateIdentityProviderError,
		Options<SsoUpdateIdentityProviderData>
	> = {
		mutationFn: async (localOptions) => {
			const { data } = await ssoUpdateIdentityProvider({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const ssoListProvidersQueryKey = (
	options?: Options<SsoListProvidersData>,
) => createQueryKey("ssoListProviders", options);

export const ssoListProvidersOptions = (
	options?: Options<SsoListProvidersData>,
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await ssoListProviders({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: ssoListProvidersQueryKey(options),
	});
};

export const ssoProviderAuthQueryKey = (
	options: Options<SsoProviderAuthData>,
) => createQueryKey("ssoProviderAuth", options);

export const ssoProviderAuthOptions = (
	options: Options<SsoProviderAuthData>,
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await ssoProviderAuth({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: ssoProviderAuthQueryKey(options),
	});
};

export const ssoSamlAcsQueryKey = (options: Options<SsoSamlAcsData>) =>
	createQueryKey("ssoSamlAcs", options);

export const ssoSamlAcsOptions = (options: Options<SsoSamlAcsData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await ssoSamlAcs({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: ssoSamlAcsQueryKey(options),
	});
};

export const ssoSamlAcsMutation = (
	options?: Partial<Options<SsoSamlAcsData>>,
) => {
	const mutationOptions: UseMutationOptions<
		SsoSamlAcsResponse,
		SsoSamlAcsError,
		Options<SsoSamlAcsData>
	> = {
		mutationFn: async (localOptions) => {
			const { data } = await ssoSamlAcs({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const ssoSamlMetadataQueryKey = (
	options: Options<SsoSamlMetadataData>,
) => createQueryKey("ssoSamlMetadata", options);

export const ssoSamlMetadataOptions = (
	options: Options<SsoSamlMetadataData>,
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await ssoSamlMetadata({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: ssoSamlMetadataQueryKey(options),
	});
};

export const authVerifyEmailQueryKey = (
	options: Options<AuthVerifyEmailData>,
) => createQueryKey("authVerifyEmail", options);

export const authVerifyEmailOptions = (
	options: Options<AuthVerifyEmailData>,
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await authVerifyEmail({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: authVerifyEmailQueryKey(options),
	});
};

export const authVerifyEmailMutation = (
	options?: Partial<Options<AuthVerifyEmailData>>,
) => {
	const mutationOptions: UseMutationOptions<
		AuthVerifyEmailResponse,
		AuthVerifyEmailError,
		Options<AuthVerifyEmailData>
	> = {
		mutationFn: async (localOptions) => {
			const { data } = await authVerifyEmail({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const emailSendQueryKey = (options: Options<EmailSendData>) =>
	createQueryKey("emailSend", options);

export const emailSendOptions = (options: Options<EmailSendData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await emailSend({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: emailSendQueryKey(options),
	});
};

export const emailSendMutation = (
	options?: Partial<Options<EmailSendData>>,
) => {
	const mutationOptions: UseMutationOptions<
		EmailSendResponse,
		EmailSendError,
		Options<EmailSendData>
	> = {
		mutationFn: async (localOptions) => {
			const { data } = await emailSend({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const emailSendTemplateQueryKey = (
	options: Options<EmailSendTemplateData>,
) => createQueryKey("emailSendTemplate", options);

export const emailSendTemplateOptions = (
	options: Options<EmailSendTemplateData>,
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await emailSendTemplate({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: emailSendTemplateQueryKey(options),
	});
};

export const emailSendTemplateMutation = (
	options?: Partial<Options<EmailSendTemplateData>>,
) => {
	const mutationOptions: UseMutationOptions<
		EmailSendTemplateResponse,
		EmailSendTemplateError,
		Options<EmailSendTemplateData>
	> = {
		mutationFn: async (localOptions) => {
			const { data } = await emailSendTemplate({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const emailListTemplatesQueryKey = (
	options?: Options<EmailListTemplatesData>,
) => createQueryKey("emailListTemplates", options);

export const emailListTemplatesOptions = (
	options?: Options<EmailListTemplatesData>,
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await emailListTemplates({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: emailListTemplatesQueryKey(options),
	});
};

export const emailListTemplatesInfiniteQueryKey = (
	options?: Options<EmailListTemplatesData>,
): QueryKey<Options<EmailListTemplatesData>> =>
	createQueryKey("emailListTemplates", options, true);

export const emailListTemplatesInfiniteOptions = (
	options?: Options<EmailListTemplatesData>,
) => {
	return infiniteQueryOptions<
		EmailListTemplatesResponse,
		EmailListTemplatesError,
		InfiniteData<EmailListTemplatesResponse>,
		QueryKey<Options<EmailListTemplatesData>>,
		| bigint
		| Pick<
				QueryKey<Options<EmailListTemplatesData>>[0],
				"body" | "headers" | "path" | "query"
		  >
	>(
		// @ts-ignore
		{
			queryFn: async ({ pageParam, queryKey, signal }) => {
				// @ts-ignore
				const page: Pick<
					QueryKey<Options<EmailListTemplatesData>>[0],
					"body" | "headers" | "path" | "query"
				> =
					typeof pageParam === "object"
						? pageParam
						: {
								query: {
									offset: pageParam,
								},
							};
				const params = createInfiniteParams(queryKey, page);
				const { data } = await emailListTemplates({
					...options,
					...params,
					signal,
					throwOnError: true,
				});
				return data;
			},
			queryKey: emailListTemplatesInfiniteQueryKey(options),
		},
	);
};

export const emailCreateTemplateQueryKey = (
	options: Options<EmailCreateTemplateData>,
) => createQueryKey("emailCreateTemplate", options);

export const emailCreateTemplateOptions = (
	options: Options<EmailCreateTemplateData>,
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await emailCreateTemplate({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: emailCreateTemplateQueryKey(options),
	});
};

export const emailCreateTemplateMutation = (
	options?: Partial<Options<EmailCreateTemplateData>>,
) => {
	const mutationOptions: UseMutationOptions<
		EmailCreateTemplateResponse,
		EmailCreateTemplateError,
		Options<EmailCreateTemplateData>
	> = {
		mutationFn: async (localOptions) => {
			const { data } = await emailCreateTemplate({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const emailGetTemplateByTypeQueryKey = (
	options: Options<EmailGetTemplateByTypeData>,
) => createQueryKey("emailGetTemplateByType", options);

export const emailGetTemplateByTypeOptions = (
	options: Options<EmailGetTemplateByTypeData>,
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await emailGetTemplateByType({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: emailGetTemplateByTypeQueryKey(options),
	});
};

export const emailDeleteTemplateMutation = (
	options?: Partial<Options<EmailDeleteTemplateData>>,
) => {
	const mutationOptions: UseMutationOptions<
		EmailDeleteTemplateResponse,
		EmailDeleteTemplateError,
		Options<EmailDeleteTemplateData>
	> = {
		mutationFn: async (localOptions) => {
			const { data } = await emailDeleteTemplate({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const emailGetTemplateQueryKey = (
	options: Options<EmailGetTemplateData>,
) => createQueryKey("emailGetTemplate", options);

export const emailGetTemplateOptions = (
	options: Options<EmailGetTemplateData>,
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await emailGetTemplate({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: emailGetTemplateQueryKey(options),
	});
};

export const emailUpdateTemplateMutation = (
	options?: Partial<Options<EmailUpdateTemplateData>>,
) => {
	const mutationOptions: UseMutationOptions<
		EmailUpdateTemplateResponse,
		EmailUpdateTemplateError,
		Options<EmailUpdateTemplateData>
	> = {
		mutationFn: async (localOptions) => {
			const { data } = await emailUpdateTemplate({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const oauthProviderJwksQueryKey = (
	options?: Options<OauthProviderJwksData>,
) => createQueryKey("oauthProviderJwks", options);

export const oauthProviderJwksOptions = (
	options?: Options<OauthProviderJwksData>,
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await oauthProviderJwks({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: oauthProviderJwksQueryKey(options),
	});
};

export const oauthProviderOidcConfigurationQueryKey = (
	options?: Options<OauthProviderOidcConfigurationData>,
) => createQueryKey("oauthProviderOidcConfiguration", options);

export const oauthProviderOidcConfigurationOptions = (
	options?: Options<OauthProviderOidcConfigurationData>,
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await oauthProviderOidcConfiguration({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: oauthProviderOidcConfigurationQueryKey(options),
	});
};

export const oauthProviderAuthorizeQueryKey = (
	options: Options<OauthProviderAuthorizeData>,
) => createQueryKey("oauthProviderAuthorize", options);

export const oauthProviderAuthorizeOptions = (
	options: Options<OauthProviderAuthorizeData>,
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await oauthProviderAuthorize({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: oauthProviderAuthorizeQueryKey(options),
	});
};

export const oauthProviderListClientsQueryKey = (
	options?: Options<OauthProviderListClientsData>,
) => createQueryKey("oauthProviderListClients", options);

export const oauthProviderListClientsOptions = (
	options?: Options<OauthProviderListClientsData>,
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await oauthProviderListClients({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: oauthProviderListClientsQueryKey(options),
	});
};

export const oauthProviderListClientsInfiniteQueryKey = (
	options?: Options<OauthProviderListClientsData>,
): QueryKey<Options<OauthProviderListClientsData>> =>
	createQueryKey("oauthProviderListClients", options, true);

export const oauthProviderListClientsInfiniteOptions = (
	options?: Options<OauthProviderListClientsData>,
) => {
	return infiniteQueryOptions<
		OauthProviderListClientsResponse,
		OauthProviderListClientsError,
		InfiniteData<OauthProviderListClientsResponse>,
		QueryKey<Options<OauthProviderListClientsData>>,
		| bigint
		| Pick<
				QueryKey<Options<OauthProviderListClientsData>>[0],
				"body" | "headers" | "path" | "query"
		  >
	>(
		// @ts-ignore
		{
			queryFn: async ({ pageParam, queryKey, signal }) => {
				// @ts-ignore
				const page: Pick<
					QueryKey<Options<OauthProviderListClientsData>>[0],
					"body" | "headers" | "path" | "query"
				> =
					typeof pageParam === "object"
						? pageParam
						: {
								query: {
									offset: pageParam,
								},
							};
				const params = createInfiniteParams(queryKey, page);
				const { data } = await oauthProviderListClients({
					...options,
					...params,
					signal,
					throwOnError: true,
				});
				return data;
			},
			queryKey: oauthProviderListClientsInfiniteQueryKey(options),
		},
	);
};

export const oauthProviderCreateClientQueryKey = (
	options: Options<OauthProviderCreateClientData>,
) => createQueryKey("oauthProviderCreateClient", options);

export const oauthProviderCreateClientOptions = (
	options: Options<OauthProviderCreateClientData>,
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await oauthProviderCreateClient({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: oauthProviderCreateClientQueryKey(options),
	});
};

export const oauthProviderCreateClientMutation = (
	options?: Partial<Options<OauthProviderCreateClientData>>,
) => {
	const mutationOptions: UseMutationOptions<
		OauthProviderCreateClientResponse,
		OauthProviderCreateClientError,
		Options<OauthProviderCreateClientData>
	> = {
		mutationFn: async (localOptions) => {
			const { data } = await oauthProviderCreateClient({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const oauthProviderDeleteClientMutation = (
	options?: Partial<Options<OauthProviderDeleteClientData>>,
) => {
	const mutationOptions: UseMutationOptions<
		OauthProviderDeleteClientResponse,
		OauthProviderDeleteClientError,
		Options<OauthProviderDeleteClientData>
	> = {
		mutationFn: async (localOptions) => {
			const { data } = await oauthProviderDeleteClient({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const oauthProviderGetClientQueryKey = (
	options: Options<OauthProviderGetClientData>,
) => createQueryKey("oauthProviderGetClient", options);

export const oauthProviderGetClientOptions = (
	options: Options<OauthProviderGetClientData>,
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await oauthProviderGetClient({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: oauthProviderGetClientQueryKey(options),
	});
};

export const oauthProviderUpdateClientMutation = (
	options?: Partial<Options<OauthProviderUpdateClientData>>,
) => {
	const mutationOptions: UseMutationOptions<
		OauthProviderUpdateClientResponse,
		OauthProviderUpdateClientError,
		Options<OauthProviderUpdateClientData>
	> = {
		mutationFn: async (localOptions) => {
			const { data } = await oauthProviderUpdateClient({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const oauthProviderRotateClientSecretQueryKey = (
	options: Options<OauthProviderRotateClientSecretData>,
) => createQueryKey("oauthProviderRotateClientSecret", options);

export const oauthProviderRotateClientSecretOptions = (
	options: Options<OauthProviderRotateClientSecretData>,
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await oauthProviderRotateClientSecret({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: oauthProviderRotateClientSecretQueryKey(options),
	});
};

export const oauthProviderRotateClientSecretMutation = (
	options?: Partial<Options<OauthProviderRotateClientSecretData>>,
) => {
	const mutationOptions: UseMutationOptions<
		OauthProviderRotateClientSecretResponse,
		OauthProviderRotateClientSecretError,
		Options<OauthProviderRotateClientSecretData>
	> = {
		mutationFn: async (localOptions) => {
			const { data } = await oauthProviderRotateClientSecret({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const oauthProviderConsentQueryKey = (
	options: Options<OauthProviderConsentData>,
) => createQueryKey("oauthProviderConsent", options);

export const oauthProviderConsentOptions = (
	options: Options<OauthProviderConsentData>,
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await oauthProviderConsent({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: oauthProviderConsentQueryKey(options),
	});
};

export const oauthProviderConsentMutation = (
	options?: Partial<Options<OauthProviderConsentData>>,
) => {
	const mutationOptions: UseMutationOptions<
		unknown,
		OauthProviderConsentError,
		Options<OauthProviderConsentData>
	> = {
		mutationFn: async (localOptions) => {
			const { data } = await oauthProviderConsent({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const oauthProviderIntrospectQueryKey = (
	options: Options<OauthProviderIntrospectData>,
) => createQueryKey("oauthProviderIntrospect", options);

export const oauthProviderIntrospectOptions = (
	options: Options<OauthProviderIntrospectData>,
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await oauthProviderIntrospect({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: oauthProviderIntrospectQueryKey(options),
	});
};

export const oauthProviderIntrospectMutation = (
	options?: Partial<Options<OauthProviderIntrospectData>>,
) => {
	const mutationOptions: UseMutationOptions<
		OauthProviderIntrospectResponse,
		OauthProviderIntrospectError,
		Options<OauthProviderIntrospectData>
	> = {
		mutationFn: async (localOptions) => {
			const { data } = await oauthProviderIntrospect({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const oauthProviderRevokeQueryKey = (
	options: Options<OauthProviderRevokeData>,
) => createQueryKey("oauthProviderRevoke", options);

export const oauthProviderRevokeOptions = (
	options: Options<OauthProviderRevokeData>,
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await oauthProviderRevoke({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: oauthProviderRevokeQueryKey(options),
	});
};

export const oauthProviderRevokeMutation = (
	options?: Partial<Options<OauthProviderRevokeData>>,
) => {
	const mutationOptions: UseMutationOptions<
		unknown,
		OauthProviderRevokeError,
		Options<OauthProviderRevokeData>
	> = {
		mutationFn: async (localOptions) => {
			const { data } = await oauthProviderRevoke({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const oauthProviderListScopesQueryKey = (
	options?: Options<OauthProviderListScopesData>,
) => createQueryKey("oauthProviderListScopes", options);

export const oauthProviderListScopesOptions = (
	options?: Options<OauthProviderListScopesData>,
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await oauthProviderListScopes({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: oauthProviderListScopesQueryKey(options),
	});
};

export const oauthProviderListScopesInfiniteQueryKey = (
	options?: Options<OauthProviderListScopesData>,
): QueryKey<Options<OauthProviderListScopesData>> =>
	createQueryKey("oauthProviderListScopes", options, true);

export const oauthProviderListScopesInfiniteOptions = (
	options?: Options<OauthProviderListScopesData>,
) => {
	return infiniteQueryOptions<
		OauthProviderListScopesResponse,
		OauthProviderListScopesError,
		InfiniteData<OauthProviderListScopesResponse>,
		QueryKey<Options<OauthProviderListScopesData>>,
		| bigint
		| Pick<
				QueryKey<Options<OauthProviderListScopesData>>[0],
				"body" | "headers" | "path" | "query"
		  >
	>(
		// @ts-ignore
		{
			queryFn: async ({ pageParam, queryKey, signal }) => {
				// @ts-ignore
				const page: Pick<
					QueryKey<Options<OauthProviderListScopesData>>[0],
					"body" | "headers" | "path" | "query"
				> =
					typeof pageParam === "object"
						? pageParam
						: {
								query: {
									offset: pageParam,
								},
							};
				const params = createInfiniteParams(queryKey, page);
				const { data } = await oauthProviderListScopes({
					...options,
					...params,
					signal,
					throwOnError: true,
				});
				return data;
			},
			queryKey: oauthProviderListScopesInfiniteQueryKey(options),
		},
	);
};

export const oauthProviderCreateScopeQueryKey = (
	options: Options<OauthProviderCreateScopeData>,
) => createQueryKey("oauthProviderCreateScope", options);

export const oauthProviderCreateScopeOptions = (
	options: Options<OauthProviderCreateScopeData>,
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await oauthProviderCreateScope({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: oauthProviderCreateScopeQueryKey(options),
	});
};

export const oauthProviderCreateScopeMutation = (
	options?: Partial<Options<OauthProviderCreateScopeData>>,
) => {
	const mutationOptions: UseMutationOptions<
		OauthProviderCreateScopeResponse,
		OauthProviderCreateScopeError,
		Options<OauthProviderCreateScopeData>
	> = {
		mutationFn: async (localOptions) => {
			const { data } = await oauthProviderCreateScope({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const oauthProviderDeleteScopeMutation = (
	options?: Partial<Options<OauthProviderDeleteScopeData>>,
) => {
	const mutationOptions: UseMutationOptions<
		OauthProviderDeleteScopeResponse,
		OauthProviderDeleteScopeError,
		Options<OauthProviderDeleteScopeData>
	> = {
		mutationFn: async (localOptions) => {
			const { data } = await oauthProviderDeleteScope({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const oauthProviderGetScopeQueryKey = (
	options: Options<OauthProviderGetScopeData>,
) => createQueryKey("oauthProviderGetScope", options);

export const oauthProviderGetScopeOptions = (
	options: Options<OauthProviderGetScopeData>,
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await oauthProviderGetScope({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: oauthProviderGetScopeQueryKey(options),
	});
};

export const oauthProviderUpdateScopeMutation = (
	options?: Partial<Options<OauthProviderUpdateScopeData>>,
) => {
	const mutationOptions: UseMutationOptions<
		OauthProviderUpdateScopeResponse,
		OauthProviderUpdateScopeError,
		Options<OauthProviderUpdateScopeData>
	> = {
		mutationFn: async (localOptions) => {
			const { data } = await oauthProviderUpdateScope({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const oauthProviderTokenQueryKey = (
	options: Options<OauthProviderTokenData>,
) => createQueryKey("oauthProviderToken", options);

export const oauthProviderTokenOptions = (
	options: Options<OauthProviderTokenData>,
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await oauthProviderToken({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: oauthProviderTokenQueryKey(options),
	});
};

export const oauthProviderTokenMutation = (
	options?: Partial<Options<OauthProviderTokenData>>,
) => {
	const mutationOptions: UseMutationOptions<
		OauthProviderTokenResponse,
		OauthProviderTokenError,
		Options<OauthProviderTokenData>
	> = {
		mutationFn: async (localOptions) => {
			const { data } = await oauthProviderToken({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const oauthProviderUserinfoQueryKey = (
	options?: Options<OauthProviderUserinfoData>,
) => createQueryKey("oauthProviderUserinfo", options);

export const oauthProviderUserinfoOptions = (
	options?: Options<OauthProviderUserinfoData>,
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await oauthProviderUserinfo({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: oauthProviderUserinfoQueryKey(options),
	});
};

export const organizationsListQueryKey = (
	options?: Options<OrganizationsListData>,
) => createQueryKey("organizationsList", options);

export const organizationsListOptions = (
	options?: Options<OrganizationsListData>,
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await organizationsList({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: organizationsListQueryKey(options),
	});
};

export const organizationsListInfiniteQueryKey = (
	options?: Options<OrganizationsListData>,
): QueryKey<Options<OrganizationsListData>> =>
	createQueryKey("organizationsList", options, true);

export const organizationsListInfiniteOptions = (
	options?: Options<OrganizationsListData>,
) => {
	return infiniteQueryOptions<
		OrganizationsListResponse,
		OrganizationsListError,
		InfiniteData<OrganizationsListResponse>,
		QueryKey<Options<OrganizationsListData>>,
		| bigint
		| Pick<
				QueryKey<Options<OrganizationsListData>>[0],
				"body" | "headers" | "path" | "query"
		  >
	>(
		// @ts-ignore
		{
			queryFn: async ({ pageParam, queryKey, signal }) => {
				// @ts-ignore
				const page: Pick<
					QueryKey<Options<OrganizationsListData>>[0],
					"body" | "headers" | "path" | "query"
				> =
					typeof pageParam === "object"
						? pageParam
						: {
								query: {
									offset: pageParam,
								},
							};
				const params = createInfiniteParams(queryKey, page);
				const { data } = await organizationsList({
					...options,
					...params,
					signal,
					throwOnError: true,
				});
				return data;
			},
			queryKey: organizationsListInfiniteQueryKey(options),
		},
	);
};

export const organizationsCreateQueryKey = (
	options: Options<OrganizationsCreateData>,
) => createQueryKey("organizationsCreate", options);

export const organizationsCreateOptions = (
	options: Options<OrganizationsCreateData>,
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await organizationsCreate({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: organizationsCreateQueryKey(options),
	});
};

export const organizationsCreateMutation = (
	options?: Partial<Options<OrganizationsCreateData>>,
) => {
	const mutationOptions: UseMutationOptions<
		OrganizationsCreateResponse,
		OrganizationsCreateError,
		Options<OrganizationsCreateData>
	> = {
		mutationFn: async (localOptions) => {
			const { data } = await organizationsCreate({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const organizationsDeleteMutation = (
	options?: Partial<Options<OrganizationsDeleteData>>,
) => {
	const mutationOptions: UseMutationOptions<
		OrganizationsDeleteResponse,
		OrganizationsDeleteError,
		Options<OrganizationsDeleteData>
	> = {
		mutationFn: async (localOptions) => {
			const { data } = await organizationsDelete({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const organizationsGetQueryKey = (
	options: Options<OrganizationsGetData>,
) => createQueryKey("organizationsGet", options);

export const organizationsGetOptions = (
	options: Options<OrganizationsGetData>,
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await organizationsGet({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: organizationsGetQueryKey(options),
	});
};

export const organizationsUpdateMutation = (
	options?: Partial<Options<OrganizationsUpdateData>>,
) => {
	const mutationOptions: UseMutationOptions<
		OrganizationsUpdateResponse,
		OrganizationsUpdateError,
		Options<OrganizationsUpdateData>
	> = {
		mutationFn: async (localOptions) => {
			const { data } = await organizationsUpdate({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const organizationsListFeaturesQueryKey = (
	options: Options<OrganizationsListFeaturesData>,
) => createQueryKey("organizationsListFeatures", options);

export const organizationsListFeaturesOptions = (
	options: Options<OrganizationsListFeaturesData>,
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await organizationsListFeatures({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: organizationsListFeaturesQueryKey(options),
	});
};

export const organizationsEnableFeatureQueryKey = (
	options: Options<OrganizationsEnableFeatureData>,
) => createQueryKey("organizationsEnableFeature", options);

export const organizationsEnableFeatureOptions = (
	options: Options<OrganizationsEnableFeatureData>,
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await organizationsEnableFeature({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: organizationsEnableFeatureQueryKey(options),
	});
};

export const organizationsEnableFeatureMutation = (
	options?: Partial<Options<OrganizationsEnableFeatureData>>,
) => {
	const mutationOptions: UseMutationOptions<
		OrganizationsEnableFeatureResponse,
		OrganizationsEnableFeatureError,
		Options<OrganizationsEnableFeatureData>
	> = {
		mutationFn: async (localOptions) => {
			const { data } = await organizationsEnableFeature({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const organizationsDisableFeatureMutation = (
	options?: Partial<Options<OrganizationsDisableFeatureData>>,
) => {
	const mutationOptions: UseMutationOptions<
		OrganizationsDisableFeatureResponse,
		OrganizationsDisableFeatureError,
		Options<OrganizationsDisableFeatureData>
	> = {
		mutationFn: async (localOptions) => {
			const { data } = await organizationsDisableFeature({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const organizationsListMembersQueryKey = (
	options: Options<OrganizationsListMembersData>,
) => createQueryKey("organizationsListMembers", options);

export const organizationsListMembersOptions = (
	options: Options<OrganizationsListMembersData>,
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await organizationsListMembers({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: organizationsListMembersQueryKey(options),
	});
};

export const organizationsListMembersInfiniteQueryKey = (
	options: Options<OrganizationsListMembersData>,
): QueryKey<Options<OrganizationsListMembersData>> =>
	createQueryKey("organizationsListMembers", options, true);

export const organizationsListMembersInfiniteOptions = (
	options: Options<OrganizationsListMembersData>,
) => {
	return infiniteQueryOptions<
		OrganizationsListMembersResponse,
		OrganizationsListMembersError,
		InfiniteData<OrganizationsListMembersResponse>,
		QueryKey<Options<OrganizationsListMembersData>>,
		| bigint
		| Pick<
				QueryKey<Options<OrganizationsListMembersData>>[0],
				"body" | "headers" | "path" | "query"
		  >
	>(
		// @ts-ignore
		{
			queryFn: async ({ pageParam, queryKey, signal }) => {
				// @ts-ignore
				const page: Pick<
					QueryKey<Options<OrganizationsListMembersData>>[0],
					"body" | "headers" | "path" | "query"
				> =
					typeof pageParam === "object"
						? pageParam
						: {
								query: {
									offset: pageParam,
								},
							};
				const params = createInfiniteParams(queryKey, page);
				const { data } = await organizationsListMembers({
					...options,
					...params,
					signal,
					throwOnError: true,
				});
				return data;
			},
			queryKey: organizationsListMembersInfiniteQueryKey(options),
		},
	);
};

export const organizationsAddMemberQueryKey = (
	options: Options<OrganizationsAddMemberData>,
) => createQueryKey("organizationsAddMember", options);

export const organizationsAddMemberOptions = (
	options: Options<OrganizationsAddMemberData>,
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await organizationsAddMember({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: organizationsAddMemberQueryKey(options),
	});
};

export const organizationsAddMemberMutation = (
	options?: Partial<Options<OrganizationsAddMemberData>>,
) => {
	const mutationOptions: UseMutationOptions<
		OrganizationsAddMemberResponse,
		OrganizationsAddMemberError,
		Options<OrganizationsAddMemberData>
	> = {
		mutationFn: async (localOptions) => {
			const { data } = await organizationsAddMember({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const organizationsRemoveMemberMutation = (
	options?: Partial<Options<OrganizationsRemoveMemberData>>,
) => {
	const mutationOptions: UseMutationOptions<
		OrganizationsRemoveMemberResponse,
		OrganizationsRemoveMemberError,
		Options<OrganizationsRemoveMemberData>
	> = {
		mutationFn: async (localOptions) => {
			const { data } = await organizationsRemoveMember({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const organizationsUpdateMemberMutation = (
	options?: Partial<Options<OrganizationsUpdateMemberData>>,
) => {
	const mutationOptions: UseMutationOptions<
		OrganizationsUpdateMemberResponse,
		OrganizationsUpdateMemberError,
		Options<OrganizationsUpdateMemberData>
	> = {
		mutationFn: async (localOptions) => {
			const { data } = await organizationsUpdateMember({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const rbacListPermissionsQueryKey = (
	options?: Options<RbacListPermissionsData>,
) => createQueryKey("rbacListPermissions", options);

export const rbacListPermissionsOptions = (
	options?: Options<RbacListPermissionsData>,
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await rbacListPermissions({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: rbacListPermissionsQueryKey(options),
	});
};

export const rbacListPermissionsInfiniteQueryKey = (
	options?: Options<RbacListPermissionsData>,
): QueryKey<Options<RbacListPermissionsData>> =>
	createQueryKey("rbacListPermissions", options, true);

export const rbacListPermissionsInfiniteOptions = (
	options?: Options<RbacListPermissionsData>,
) => {
	return infiniteQueryOptions<
		RbacListPermissionsResponse,
		RbacListPermissionsError,
		InfiniteData<RbacListPermissionsResponse>,
		QueryKey<Options<RbacListPermissionsData>>,
		| bigint
		| Pick<
				QueryKey<Options<RbacListPermissionsData>>[0],
				"body" | "headers" | "path" | "query"
		  >
	>(
		// @ts-ignore
		{
			queryFn: async ({ pageParam, queryKey, signal }) => {
				// @ts-ignore
				const page: Pick<
					QueryKey<Options<RbacListPermissionsData>>[0],
					"body" | "headers" | "path" | "query"
				> =
					typeof pageParam === "object"
						? pageParam
						: {
								query: {
									offset: pageParam,
								},
							};
				const params = createInfiniteParams(queryKey, page);
				const { data } = await rbacListPermissions({
					...options,
					...params,
					signal,
					throwOnError: true,
				});
				return data;
			},
			queryKey: rbacListPermissionsInfiniteQueryKey(options),
		},
	);
};

export const rbacCreatePermissionQueryKey = (
	options: Options<RbacCreatePermissionData>,
) => createQueryKey("rbacCreatePermission", options);

export const rbacCreatePermissionOptions = (
	options: Options<RbacCreatePermissionData>,
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await rbacCreatePermission({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: rbacCreatePermissionQueryKey(options),
	});
};

export const rbacCreatePermissionMutation = (
	options?: Partial<Options<RbacCreatePermissionData>>,
) => {
	const mutationOptions: UseMutationOptions<
		RbacCreatePermissionResponse,
		RbacCreatePermissionError,
		Options<RbacCreatePermissionData>
	> = {
		mutationFn: async (localOptions) => {
			const { data } = await rbacCreatePermission({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const rbacDeletePermissionMutation = (
	options?: Partial<Options<RbacDeletePermissionData>>,
) => {
	const mutationOptions: UseMutationOptions<
		RbacDeletePermissionResponse,
		RbacDeletePermissionError,
		Options<RbacDeletePermissionData>
	> = {
		mutationFn: async (localOptions) => {
			const { data } = await rbacDeletePermission({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const rbacGetPermissionQueryKey = (
	options: Options<RbacGetPermissionData>,
) => createQueryKey("rbacGetPermission", options);

export const rbacGetPermissionOptions = (
	options: Options<RbacGetPermissionData>,
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await rbacGetPermission({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: rbacGetPermissionQueryKey(options),
	});
};

export const rbacUpdatePermissionMutation = (
	options?: Partial<Options<RbacUpdatePermissionData>>,
) => {
	const mutationOptions: UseMutationOptions<
		RbacUpdatePermissionResponse,
		RbacUpdatePermissionError,
		Options<RbacUpdatePermissionData>
	> = {
		mutationFn: async (localOptions) => {
			const { data } = await rbacUpdatePermission({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const rbacListRolesQueryKey = (options?: Options<RbacListRolesData>) =>
	createQueryKey("rbacListRoles", options);

export const rbacListRolesOptions = (options?: Options<RbacListRolesData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await rbacListRoles({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: rbacListRolesQueryKey(options),
	});
};

export const rbacListRolesInfiniteQueryKey = (
	options?: Options<RbacListRolesData>,
): QueryKey<Options<RbacListRolesData>> =>
	createQueryKey("rbacListRoles", options, true);

export const rbacListRolesInfiniteOptions = (
	options?: Options<RbacListRolesData>,
) => {
	return infiniteQueryOptions<
		RbacListRolesResponse,
		RbacListRolesError,
		InfiniteData<RbacListRolesResponse>,
		QueryKey<Options<RbacListRolesData>>,
		| bigint
		| Pick<
				QueryKey<Options<RbacListRolesData>>[0],
				"body" | "headers" | "path" | "query"
		  >
	>(
		// @ts-ignore
		{
			queryFn: async ({ pageParam, queryKey, signal }) => {
				// @ts-ignore
				const page: Pick<
					QueryKey<Options<RbacListRolesData>>[0],
					"body" | "headers" | "path" | "query"
				> =
					typeof pageParam === "object"
						? pageParam
						: {
								query: {
									offset: pageParam,
								},
							};
				const params = createInfiniteParams(queryKey, page);
				const { data } = await rbacListRoles({
					...options,
					...params,
					signal,
					throwOnError: true,
				});
				return data;
			},
			queryKey: rbacListRolesInfiniteQueryKey(options),
		},
	);
};

export const rbacCreateRoleQueryKey = (options: Options<RbacCreateRoleData>) =>
	createQueryKey("rbacCreateRole", options);

export const rbacCreateRoleOptions = (options: Options<RbacCreateRoleData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await rbacCreateRole({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: rbacCreateRoleQueryKey(options),
	});
};

export const rbacCreateRoleMutation = (
	options?: Partial<Options<RbacCreateRoleData>>,
) => {
	const mutationOptions: UseMutationOptions<
		RbacCreateRoleResponse,
		RbacCreateRoleError,
		Options<RbacCreateRoleData>
	> = {
		mutationFn: async (localOptions) => {
			const { data } = await rbacCreateRole({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const rbacDeleteRoleMutation = (
	options?: Partial<Options<RbacDeleteRoleData>>,
) => {
	const mutationOptions: UseMutationOptions<
		RbacDeleteRoleResponse,
		RbacDeleteRoleError,
		Options<RbacDeleteRoleData>
	> = {
		mutationFn: async (localOptions) => {
			const { data } = await rbacDeleteRole({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const rbacGetRoleQueryKey = (options: Options<RbacGetRoleData>) =>
	createQueryKey("rbacGetRole", options);

export const rbacGetRoleOptions = (options: Options<RbacGetRoleData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await rbacGetRole({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: rbacGetRoleQueryKey(options),
	});
};

export const rbacUpdateRoleMutation = (
	options?: Partial<Options<RbacUpdateRoleData>>,
) => {
	const mutationOptions: UseMutationOptions<
		RbacUpdateRoleResponse,
		RbacUpdateRoleError,
		Options<RbacUpdateRoleData>
	> = {
		mutationFn: async (localOptions) => {
			const { data } = await rbacUpdateRole({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const rbacListRolePermissionsQueryKey = (
	options: Options<RbacListRolePermissionsData>,
) => createQueryKey("rbacListRolePermissions", options);

export const rbacListRolePermissionsOptions = (
	options: Options<RbacListRolePermissionsData>,
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await rbacListRolePermissions({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: rbacListRolePermissionsQueryKey(options),
	});
};

export const rbacAddRolePermissionQueryKey = (
	options: Options<RbacAddRolePermissionData>,
) => createQueryKey("rbacAddRolePermission", options);

export const rbacAddRolePermissionOptions = (
	options: Options<RbacAddRolePermissionData>,
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await rbacAddRolePermission({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: rbacAddRolePermissionQueryKey(options),
	});
};

export const rbacAddRolePermissionMutation = (
	options?: Partial<Options<RbacAddRolePermissionData>>,
) => {
	const mutationOptions: UseMutationOptions<
		RbacAddRolePermissionResponse,
		RbacAddRolePermissionError,
		Options<RbacAddRolePermissionData>
	> = {
		mutationFn: async (localOptions) => {
			const { data } = await rbacAddRolePermission({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const rbacRemoveRolePermissionMutation = (
	options?: Partial<Options<RbacRemoveRolePermissionData>>,
) => {
	const mutationOptions: UseMutationOptions<
		RbacRemoveRolePermissionResponse,
		RbacRemoveRolePermissionError,
		Options<RbacRemoveRolePermissionData>
	> = {
		mutationFn: async (localOptions) => {
			const { data } = await rbacRemoveRolePermission({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const usersListQueryKey = (options?: Options<UsersListData>) =>
	createQueryKey("usersList", options);

export const usersListOptions = (options?: Options<UsersListData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await usersList({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: usersListQueryKey(options),
	});
};

export const usersListInfiniteQueryKey = (
	options?: Options<UsersListData>,
): QueryKey<Options<UsersListData>> =>
	createQueryKey("usersList", options, true);

export const usersListInfiniteOptions = (options?: Options<UsersListData>) => {
	return infiniteQueryOptions<
		UsersListResponse,
		UsersListError,
		InfiniteData<UsersListResponse>,
		QueryKey<Options<UsersListData>>,
		| bigint
		| Pick<
				QueryKey<Options<UsersListData>>[0],
				"body" | "headers" | "path" | "query"
		  >
	>(
		// @ts-ignore
		{
			queryFn: async ({ pageParam, queryKey, signal }) => {
				// @ts-ignore
				const page: Pick<
					QueryKey<Options<UsersListData>>[0],
					"body" | "headers" | "path" | "query"
				> =
					typeof pageParam === "object"
						? pageParam
						: {
								query: {
									offset: pageParam,
								},
							};
				const params = createInfiniteParams(queryKey, page);
				const { data } = await usersList({
					...options,
					...params,
					signal,
					throwOnError: true,
				});
				return data;
			},
			queryKey: usersListInfiniteQueryKey(options),
		},
	);
};

export const usersCreateQueryKey = (options: Options<UsersCreateData>) =>
	createQueryKey("usersCreate", options);

export const usersCreateOptions = (options: Options<UsersCreateData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await usersCreate({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: usersCreateQueryKey(options),
	});
};

export const usersCreateMutation = (
	options?: Partial<Options<UsersCreateData>>,
) => {
	const mutationOptions: UseMutationOptions<
		UsersCreateResponse,
		UsersCreateError,
		Options<UsersCreateData>
	> = {
		mutationFn: async (localOptions) => {
			const { data } = await usersCreate({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const usersUpdateMeMutation = (
	options?: Partial<Options<UsersUpdateMeData>>,
) => {
	const mutationOptions: UseMutationOptions<
		UsersUpdateMeResponse,
		UsersUpdateMeError,
		Options<UsersUpdateMeData>
	> = {
		mutationFn: async (localOptions) => {
			const { data } = await usersUpdateMe({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const usersUpdatePasswordMutation = (
	options?: Partial<Options<UsersUpdatePasswordData>>,
) => {
	const mutationOptions: UseMutationOptions<
		UsersUpdatePasswordResponse,
		UsersUpdatePasswordError,
		Options<UsersUpdatePasswordData>
	> = {
		mutationFn: async (localOptions) => {
			const { data } = await usersUpdatePassword({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const usersGetSessionsQueryKey = (
	options?: Options<UsersGetSessionsData>,
) => createQueryKey("usersGetSessions", options);

export const usersGetSessionsOptions = (
	options?: Options<UsersGetSessionsData>,
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await usersGetSessions({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: usersGetSessionsQueryKey(options),
	});
};

export const usersDeleteSessionMutation = (
	options?: Partial<Options<UsersDeleteSessionData>>,
) => {
	const mutationOptions: UseMutationOptions<
		UsersDeleteSessionResponse,
		UsersDeleteSessionError,
		Options<UsersDeleteSessionData>
	> = {
		mutationFn: async (localOptions) => {
			const { data } = await usersDeleteSession({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const usersDeleteMutation = (
	options?: Partial<Options<UsersDeleteData>>,
) => {
	const mutationOptions: UseMutationOptions<
		UsersDeleteResponse,
		UsersDeleteError,
		Options<UsersDeleteData>
	> = {
		mutationFn: async (localOptions) => {
			const { data } = await usersDelete({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const usersGetQueryKey = (options: Options<UsersGetData>) =>
	createQueryKey("usersGet", options);

export const usersGetOptions = (options: Options<UsersGetData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await usersGet({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: usersGetQueryKey(options),
	});
};

export const usersUpdateMutation = (
	options?: Partial<Options<UsersUpdateData>>,
) => {
	const mutationOptions: UseMutationOptions<
		UsersUpdateResponse,
		UsersUpdateError,
		Options<UsersUpdateData>
	> = {
		mutationFn: async (localOptions) => {
			const { data } = await usersUpdate({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const usersGetOrganizationsQueryKey = (
	options: Options<UsersGetOrganizationsData>,
) => createQueryKey("usersGetOrganizations", options);

export const usersGetOrganizationsOptions = (
	options: Options<UsersGetOrganizationsData>,
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await usersGetOrganizations({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: usersGetOrganizationsQueryKey(options),
	});
};

export const webhooksListQueryKey = (options?: Options<WebhooksListData>) =>
	createQueryKey("webhooksList", options);

export const webhooksListOptions = (options?: Options<WebhooksListData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await webhooksList({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: webhooksListQueryKey(options),
	});
};

export const webhooksListInfiniteQueryKey = (
	options?: Options<WebhooksListData>,
): QueryKey<Options<WebhooksListData>> =>
	createQueryKey("webhooksList", options, true);

export const webhooksListInfiniteOptions = (
	options?: Options<WebhooksListData>,
) => {
	return infiniteQueryOptions<
		WebhooksListResponse,
		WebhooksListError,
		InfiniteData<WebhooksListResponse>,
		QueryKey<Options<WebhooksListData>>,
		| bigint
		| Pick<
				QueryKey<Options<WebhooksListData>>[0],
				"body" | "headers" | "path" | "query"
		  >
	>(
		// @ts-ignore
		{
			queryFn: async ({ pageParam, queryKey, signal }) => {
				// @ts-ignore
				const page: Pick<
					QueryKey<Options<WebhooksListData>>[0],
					"body" | "headers" | "path" | "query"
				> =
					typeof pageParam === "object"
						? pageParam
						: {
								query: {
									offset: pageParam,
								},
							};
				const params = createInfiniteParams(queryKey, page);
				const { data } = await webhooksList({
					...options,
					...params,
					signal,
					throwOnError: true,
				});
				return data;
			},
			queryKey: webhooksListInfiniteQueryKey(options),
		},
	);
};

export const webhooksCreateQueryKey = (options: Options<WebhooksCreateData>) =>
	createQueryKey("webhooksCreate", options);

export const webhooksCreateOptions = (options: Options<WebhooksCreateData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await webhooksCreate({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: webhooksCreateQueryKey(options),
	});
};

export const webhooksCreateMutation = (
	options?: Partial<Options<WebhooksCreateData>>,
) => {
	const mutationOptions: UseMutationOptions<
		WebhooksCreateResponse,
		WebhooksCreateError,
		Options<WebhooksCreateData>
	> = {
		mutationFn: async (localOptions) => {
			const { data } = await webhooksCreate({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const webhooksReceiveQueryKey = (
	options: Options<WebhooksReceiveData>,
) => createQueryKey("webhooksReceive", options);

export const webhooksReceiveOptions = (
	options: Options<WebhooksReceiveData>,
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await webhooksReceive({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: webhooksReceiveQueryKey(options),
	});
};

export const webhooksReceiveMutation = (
	options?: Partial<Options<WebhooksReceiveData>>,
) => {
	const mutationOptions: UseMutationOptions<
		WebhooksReceiveResponse,
		WebhooksReceiveError,
		Options<WebhooksReceiveData>
	> = {
		mutationFn: async (localOptions) => {
			const { data } = await webhooksReceive({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const webhooksTriggerEventQueryKey = (
	options: Options<WebhooksTriggerEventData>,
) => createQueryKey("webhooksTriggerEvent", options);

export const webhooksTriggerEventOptions = (
	options: Options<WebhooksTriggerEventData>,
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await webhooksTriggerEvent({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: webhooksTriggerEventQueryKey(options),
	});
};

export const webhooksTriggerEventMutation = (
	options?: Partial<Options<WebhooksTriggerEventData>>,
) => {
	const mutationOptions: UseMutationOptions<
		WebhooksTriggerEventResponse,
		WebhooksTriggerEventError,
		Options<WebhooksTriggerEventData>
	> = {
		mutationFn: async (localOptions) => {
			const { data } = await webhooksTriggerEvent({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const webhooksDeleteMutation = (
	options?: Partial<Options<WebhooksDeleteData>>,
) => {
	const mutationOptions: UseMutationOptions<
		WebhooksDeleteResponse,
		WebhooksDeleteError,
		Options<WebhooksDeleteData>
	> = {
		mutationFn: async (localOptions) => {
			const { data } = await webhooksDelete({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const webhooksGetQueryKey = (options: Options<WebhooksGetData>) =>
	createQueryKey("webhooksGet", options);

export const webhooksGetOptions = (options: Options<WebhooksGetData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await webhooksGet({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: webhooksGetQueryKey(options),
	});
};

export const webhooksUpdateMutation = (
	options?: Partial<Options<WebhooksUpdateData>>,
) => {
	const mutationOptions: UseMutationOptions<
		WebhooksUpdateResponse,
		WebhooksUpdateError,
		Options<WebhooksUpdateData>
	> = {
		mutationFn: async (localOptions) => {
			const { data } = await webhooksUpdate({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const webhooksListEventsQueryKey = (
	options: Options<WebhooksListEventsData>,
) => createQueryKey("webhooksListEvents", options);

export const webhooksListEventsOptions = (
	options: Options<WebhooksListEventsData>,
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await webhooksListEvents({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: webhooksListEventsQueryKey(options),
	});
};

export const webhooksListEventsInfiniteQueryKey = (
	options: Options<WebhooksListEventsData>,
): QueryKey<Options<WebhooksListEventsData>> =>
	createQueryKey("webhooksListEvents", options, true);

export const webhooksListEventsInfiniteOptions = (
	options: Options<WebhooksListEventsData>,
) => {
	return infiniteQueryOptions<
		WebhooksListEventsResponse,
		WebhooksListEventsError,
		InfiniteData<WebhooksListEventsResponse>,
		QueryKey<Options<WebhooksListEventsData>>,
		| bigint
		| Pick<
				QueryKey<Options<WebhooksListEventsData>>[0],
				"body" | "headers" | "path" | "query"
		  >
	>(
		// @ts-ignore
		{
			queryFn: async ({ pageParam, queryKey, signal }) => {
				// @ts-ignore
				const page: Pick<
					QueryKey<Options<WebhooksListEventsData>>[0],
					"body" | "headers" | "path" | "query"
				> =
					typeof pageParam === "object"
						? pageParam
						: {
								query: {
									offset: pageParam,
								},
							};
				const params = createInfiniteParams(queryKey, page);
				const { data } = await webhooksListEvents({
					...options,
					...params,
					signal,
					throwOnError: true,
				});
				return data;
			},
			queryKey: webhooksListEventsInfiniteQueryKey(options),
		},
	);
};

export const webhooksReplayEventQueryKey = (
	options: Options<WebhooksReplayEventData>,
) => createQueryKey("webhooksReplayEvent", options);

export const webhooksReplayEventOptions = (
	options: Options<WebhooksReplayEventData>,
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await webhooksReplayEvent({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: webhooksReplayEventQueryKey(options),
	});
};

export const webhooksReplayEventMutation = (
	options?: Partial<Options<WebhooksReplayEventData>>,
) => {
	const mutationOptions: UseMutationOptions<
		WebhooksReplayEventResponse,
		WebhooksReplayEventError,
		Options<WebhooksReplayEventData>
	> = {
		mutationFn: async (localOptions) => {
			const { data } = await webhooksReplayEvent({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};
