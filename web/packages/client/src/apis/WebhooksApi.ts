/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BulkWebhookOperationRequest,
  BulkWebhookOperationResponse,
  CreateWebhookRequest,
  GetGlobalActivityStats400Response,
  PaginatedOutputWebhookEventSummary,
  PaginatedOutputWebhookSummary,
  RetryWebhookEventRequest,
  RetryWebhookEventResponse,
  TestWebhookRequest,
  TestWebhookResponse,
  UpdateWebhookRequest,
  UpdateWebhookSecurityRequest,
  Webhook,
  WebhookDeliveryRetryRequest,
  WebhookDeliveryRetryResponse,
  WebhookEvent,
  WebhookExportRequest,
  WebhookExportResponse,
  WebhookGlobalStats,
  WebhookHealthCheck,
  WebhookSecuritySettings,
  WebhookStats,
} from '../models/index';
import {
    BulkWebhookOperationRequestFromJSON,
    BulkWebhookOperationRequestToJSON,
    BulkWebhookOperationResponseFromJSON,
    BulkWebhookOperationResponseToJSON,
    CreateWebhookRequestFromJSON,
    CreateWebhookRequestToJSON,
    GetGlobalActivityStats400ResponseFromJSON,
    GetGlobalActivityStats400ResponseToJSON,
    PaginatedOutputWebhookEventSummaryFromJSON,
    PaginatedOutputWebhookEventSummaryToJSON,
    PaginatedOutputWebhookSummaryFromJSON,
    PaginatedOutputWebhookSummaryToJSON,
    RetryWebhookEventRequestFromJSON,
    RetryWebhookEventRequestToJSON,
    RetryWebhookEventResponseFromJSON,
    RetryWebhookEventResponseToJSON,
    TestWebhookRequestFromJSON,
    TestWebhookRequestToJSON,
    TestWebhookResponseFromJSON,
    TestWebhookResponseToJSON,
    UpdateWebhookRequestFromJSON,
    UpdateWebhookRequestToJSON,
    UpdateWebhookSecurityRequestFromJSON,
    UpdateWebhookSecurityRequestToJSON,
    WebhookFromJSON,
    WebhookToJSON,
    WebhookDeliveryRetryRequestFromJSON,
    WebhookDeliveryRetryRequestToJSON,
    WebhookDeliveryRetryResponseFromJSON,
    WebhookDeliveryRetryResponseToJSON,
    WebhookEventFromJSON,
    WebhookEventToJSON,
    WebhookExportRequestFromJSON,
    WebhookExportRequestToJSON,
    WebhookExportResponseFromJSON,
    WebhookExportResponseToJSON,
    WebhookGlobalStatsFromJSON,
    WebhookGlobalStatsToJSON,
    WebhookHealthCheckFromJSON,
    WebhookHealthCheckToJSON,
    WebhookSecuritySettingsFromJSON,
    WebhookSecuritySettingsToJSON,
    WebhookStatsFromJSON,
    WebhookStatsToJSON,
} from '../models/index';

export interface ActivateWebhookRequest {
    orgId: string;
    id: string;
}

export interface BulkRetryEventsRequest {
    orgId: string;
    webhookDeliveryRetryRequest: Omit<WebhookDeliveryRetryRequest, '$schema'>;
}

export interface BulkWebhookOperationOperationRequest {
    orgId: string;
    bulkWebhookOperationRequest: Omit<BulkWebhookOperationRequest, '$schema'>;
}

export interface CreateWebhookOperationRequest {
    orgId: string;
    createWebhookRequest: Omit<CreateWebhookRequest, '$schema'>;
}

export interface DeactivateWebhookRequest {
    orgId: string;
    id: string;
}

export interface DeleteWebhookRequest {
    orgId: string;
    id: string;
}

export interface ExportWebhookDataRequest {
    orgId: string;
    webhookExportRequest: Omit<WebhookExportRequest, '$schema'>;
}

export interface GetGlobalWebhookStatsRequest {
    orgId: string;
}

export interface GetWebhookRequest {
    orgId: string;
    id: string;
}

export interface GetWebhookEventRequest {
    orgId: string;
    id: string;
}

export interface GetWebhookHealthRequest {
    orgId: string;
    id: string;
}

export interface GetWebhookSecurityRequest {
    orgId: string;
    id: string;
}

export interface GetWebhookStatsRequest {
    orgId: string;
    id: string;
}

export interface ListWebhookEventsRequest {
    orgId: string;
    after?: string;
    before?: string;
    first?: number;
    last?: number;
    limit?: number;
    offset?: number;
    fields?: Array<string> | null;
    orderBy?: Array<string> | null;
    page?: number;
    webhookId?: string;
    eventType?: string;
    delivered?: boolean;
    statusCode?: number;
    startDate?: Date;
    endDate?: Date;
    hasError?: boolean;
}

export interface ListWebhooksRequest {
    orgId: string;
    after?: string;
    before?: string;
    first?: number;
    last?: number;
    limit?: number;
    offset?: number;
    fields?: Array<string> | null;
    orderBy?: Array<string> | null;
    page?: number;
    organizationId?: string;
    active?: boolean;
    eventType?: string;
    search?: string;
}

export interface ReceiveWebhookRequest {
    webhookId: string;
    requestBody: { [key: string]: any; };
}

export interface RegenerateWebhookSecretRequest {
    orgId: string;
    id: string;
}

export interface RetryWebhookEventOperationRequest {
    orgId: string;
    retryWebhookEventRequest: Omit<RetryWebhookEventRequest, '$schema'>;
}

export interface TestWebhookOperationRequest {
    orgId: string;
    testWebhookRequest: Omit<TestWebhookRequest, '$schema'>;
}

export interface UpdateWebhookOperationRequest {
    orgId: string;
    id: string;
    updateWebhookRequest: Omit<UpdateWebhookRequest, '$schema'>;
}

export interface UpdateWebhookSecurityOperationRequest {
    orgId: string;
    id: string;
    updateWebhookSecurityRequest: Omit<UpdateWebhookSecurityRequest, '$schema'>;
}

/**
 * 
 */
export class WebhooksApi extends runtime.BaseAPI {

    /**
     * Activate a webhook to start receiving events
     * Activate webhook
     */
    async activateWebhookRaw(requestParameters: ActivateWebhookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling activateWebhook().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling activateWebhook().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/webhooks/{id}/activate`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Activate a webhook to start receiving events
     * Activate webhook
     */
    async activateWebhook(requestParameters: ActivateWebhookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.activateWebhookRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retry multiple failed webhook events
     * Bulk retry webhook events
     */
    async bulkRetryEventsRaw(requestParameters: BulkRetryEventsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WebhookDeliveryRetryResponse>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling bulkRetryEvents().'
            );
        }

        if (requestParameters['webhookDeliveryRetryRequest'] == null) {
            throw new runtime.RequiredError(
                'webhookDeliveryRetryRequest',
                'Required parameter "webhookDeliveryRetryRequest" was null or undefined when calling bulkRetryEvents().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/webhooks/bulk-retry`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WebhookDeliveryRetryRequestToJSON(requestParameters['webhookDeliveryRetryRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WebhookDeliveryRetryResponseFromJSON(jsonValue));
    }

    /**
     * Retry multiple failed webhook events
     * Bulk retry webhook events
     */
    async bulkRetryEvents(requestParameters: BulkRetryEventsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WebhookDeliveryRetryResponse> {
        const response = await this.bulkRetryEventsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Perform bulk operations on multiple webhooks
     * Bulk webhook operation
     */
    async bulkWebhookOperationRaw(requestParameters: BulkWebhookOperationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BulkWebhookOperationResponse>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling bulkWebhookOperation().'
            );
        }

        if (requestParameters['bulkWebhookOperationRequest'] == null) {
            throw new runtime.RequiredError(
                'bulkWebhookOperationRequest',
                'Required parameter "bulkWebhookOperationRequest" was null or undefined when calling bulkWebhookOperation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/webhooks/bulk`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BulkWebhookOperationRequestToJSON(requestParameters['bulkWebhookOperationRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BulkWebhookOperationResponseFromJSON(jsonValue));
    }

    /**
     * Perform bulk operations on multiple webhooks
     * Bulk webhook operation
     */
    async bulkWebhookOperation(requestParameters: BulkWebhookOperationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BulkWebhookOperationResponse> {
        const response = await this.bulkWebhookOperationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new webhook for the organization
     * Create webhook
     */
    async createWebhookRaw(requestParameters: CreateWebhookOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Webhook>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling createWebhook().'
            );
        }

        if (requestParameters['createWebhookRequest'] == null) {
            throw new runtime.RequiredError(
                'createWebhookRequest',
                'Required parameter "createWebhookRequest" was null or undefined when calling createWebhook().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/webhooks`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateWebhookRequestToJSON(requestParameters['createWebhookRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WebhookFromJSON(jsonValue));
    }

    /**
     * Create a new webhook for the organization
     * Create webhook
     */
    async createWebhook(requestParameters: CreateWebhookOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Webhook> {
        const response = await this.createWebhookRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deactivate a webhook to stop receiving events
     * Deactivate webhook
     */
    async deactivateWebhookRaw(requestParameters: DeactivateWebhookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling deactivateWebhook().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deactivateWebhook().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/webhooks/{id}/deactivate`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Deactivate a webhook to stop receiving events
     * Deactivate webhook
     */
    async deactivateWebhook(requestParameters: DeactivateWebhookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.deactivateWebhookRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a webhook
     * Delete webhook
     */
    async deleteWebhookRaw(requestParameters: DeleteWebhookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling deleteWebhook().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteWebhook().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/webhooks/{id}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Delete a webhook
     * Delete webhook
     */
    async deleteWebhook(requestParameters: DeleteWebhookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.deleteWebhookRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Export webhook configuration and event data
     * Export webhook data
     */
    async exportWebhookDataRaw(requestParameters: ExportWebhookDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WebhookExportResponse>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling exportWebhookData().'
            );
        }

        if (requestParameters['webhookExportRequest'] == null) {
            throw new runtime.RequiredError(
                'webhookExportRequest',
                'Required parameter "webhookExportRequest" was null or undefined when calling exportWebhookData().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/webhooks/export`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WebhookExportRequestToJSON(requestParameters['webhookExportRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WebhookExportResponseFromJSON(jsonValue));
    }

    /**
     * Export webhook configuration and event data
     * Export webhook data
     */
    async exportWebhookData(requestParameters: ExportWebhookDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WebhookExportResponse> {
        const response = await this.exportWebhookDataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get statistics for all webhooks in the organization
     * Get global webhook statistics
     */
    async getGlobalWebhookStatsRaw(requestParameters: GetGlobalWebhookStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WebhookGlobalStats>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling getGlobalWebhookStats().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/webhooks/stats`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WebhookGlobalStatsFromJSON(jsonValue));
    }

    /**
     * Get statistics for all webhooks in the organization
     * Get global webhook statistics
     */
    async getGlobalWebhookStats(requestParameters: GetGlobalWebhookStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WebhookGlobalStats> {
        const response = await this.getGlobalWebhookStatsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get details of a specific webhook
     * Get webhook
     */
    async getWebhookRaw(requestParameters: GetWebhookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Webhook>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling getWebhook().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getWebhook().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/webhooks/{id}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WebhookFromJSON(jsonValue));
    }

    /**
     * Get details of a specific webhook
     * Get webhook
     */
    async getWebhook(requestParameters: GetWebhookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Webhook> {
        const response = await this.getWebhookRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get details of a specific webhook event
     * Get webhook event
     */
    async getWebhookEventRaw(requestParameters: GetWebhookEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WebhookEvent>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling getWebhookEvent().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getWebhookEvent().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/webhook-events/{id}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WebhookEventFromJSON(jsonValue));
    }

    /**
     * Get details of a specific webhook event
     * Get webhook event
     */
    async getWebhookEvent(requestParameters: GetWebhookEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WebhookEvent> {
        const response = await this.getWebhookEventRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Check the health status of a webhook endpoint
     * Get webhook health
     */
    async getWebhookHealthRaw(requestParameters: GetWebhookHealthRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WebhookHealthCheck>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling getWebhookHealth().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getWebhookHealth().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/webhooks/{id}/health`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WebhookHealthCheckFromJSON(jsonValue));
    }

    /**
     * Check the health status of a webhook endpoint
     * Get webhook health
     */
    async getWebhookHealth(requestParameters: GetWebhookHealthRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WebhookHealthCheck> {
        const response = await this.getWebhookHealthRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get security configuration for a webhook
     * Get webhook security settings
     */
    async getWebhookSecurityRaw(requestParameters: GetWebhookSecurityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WebhookSecuritySettings>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling getWebhookSecurity().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getWebhookSecurity().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/webhooks/{id}/security`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WebhookSecuritySettingsFromJSON(jsonValue));
    }

    /**
     * Get security configuration for a webhook
     * Get webhook security settings
     */
    async getWebhookSecurity(requestParameters: GetWebhookSecurityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WebhookSecuritySettings> {
        const response = await this.getWebhookSecurityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get detailed statistics for a specific webhook
     * Get webhook statistics
     */
    async getWebhookStatsRaw(requestParameters: GetWebhookStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WebhookStats>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling getWebhookStats().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getWebhookStats().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/webhooks/{id}/stats`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WebhookStatsFromJSON(jsonValue));
    }

    /**
     * Get detailed statistics for a specific webhook
     * Get webhook statistics
     */
    async getWebhookStats(requestParameters: GetWebhookStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WebhookStats> {
        const response = await this.getWebhookStatsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a paginated list of webhook events
     * List webhook events
     */
    async listWebhookEventsRaw(requestParameters: ListWebhookEventsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedOutputWebhookEventSummary>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling listWebhookEvents().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['after'] != null) {
            queryParameters['after'] = requestParameters['after'];
        }

        if (requestParameters['before'] != null) {
            queryParameters['before'] = requestParameters['before'];
        }

        if (requestParameters['first'] != null) {
            queryParameters['first'] = requestParameters['first'];
        }

        if (requestParameters['last'] != null) {
            queryParameters['last'] = requestParameters['last'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['orderBy'] = requestParameters['orderBy']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['webhookId'] != null) {
            queryParameters['webhookId'] = requestParameters['webhookId'];
        }

        if (requestParameters['eventType'] != null) {
            queryParameters['eventType'] = requestParameters['eventType'];
        }

        if (requestParameters['delivered'] != null) {
            queryParameters['delivered'] = requestParameters['delivered'];
        }

        if (requestParameters['statusCode'] != null) {
            queryParameters['statusCode'] = requestParameters['statusCode'];
        }

        if (requestParameters['startDate'] != null) {
            queryParameters['startDate'] = (requestParameters['startDate'] as any).toISOString();
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['endDate'] = (requestParameters['endDate'] as any).toISOString();
        }

        if (requestParameters['hasError'] != null) {
            queryParameters['hasError'] = requestParameters['hasError'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/webhook-events`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedOutputWebhookEventSummaryFromJSON(jsonValue));
    }

    /**
     * Get a paginated list of webhook events
     * List webhook events
     */
    async listWebhookEvents(requestParameters: ListWebhookEventsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedOutputWebhookEventSummary> {
        const response = await this.listWebhookEventsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a paginated list of webhooks for the organization
     * List webhooks
     */
    async listWebhooksRaw(requestParameters: ListWebhooksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedOutputWebhookSummary>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling listWebhooks().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['after'] != null) {
            queryParameters['after'] = requestParameters['after'];
        }

        if (requestParameters['before'] != null) {
            queryParameters['before'] = requestParameters['before'];
        }

        if (requestParameters['first'] != null) {
            queryParameters['first'] = requestParameters['first'];
        }

        if (requestParameters['last'] != null) {
            queryParameters['last'] = requestParameters['last'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['orderBy'] = requestParameters['orderBy']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['organizationId'] != null) {
            queryParameters['organizationId'] = requestParameters['organizationId'];
        }

        if (requestParameters['active'] != null) {
            queryParameters['active'] = requestParameters['active'];
        }

        if (requestParameters['eventType'] != null) {
            queryParameters['eventType'] = requestParameters['eventType'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/webhooks`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedOutputWebhookSummaryFromJSON(jsonValue));
    }

    /**
     * Get a paginated list of webhooks for the organization
     * List webhooks
     */
    async listWebhooks(requestParameters: ListWebhooksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedOutputWebhookSummary> {
        const response = await this.listWebhooksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Endpoint for receiving webhooks from external services
     * Receive webhook
     */
    async receiveWebhookRaw(requestParameters: ReceiveWebhookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        if (requestParameters['webhookId'] == null) {
            throw new runtime.RequiredError(
                'webhookId',
                'Required parameter "webhookId" was null or undefined when calling receiveWebhook().'
            );
        }

        if (requestParameters['requestBody'] == null) {
            throw new runtime.RequiredError(
                'requestBody',
                'Required parameter "requestBody" was null or undefined when calling receiveWebhook().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/public/webhooks/receive/{webhookId}`.replace(`{${"webhookId"}}`, encodeURIComponent(String(requestParameters['webhookId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Endpoint for receiving webhooks from external services
     * Receive webhook
     */
    async receiveWebhook(requestParameters: ReceiveWebhookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.receiveWebhookRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Generate a new secret for webhook signature verification
     * Regenerate webhook secret
     */
    async regenerateWebhookSecretRaw(requestParameters: RegenerateWebhookSecretRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: string; }>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling regenerateWebhookSecret().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling regenerateWebhookSecret().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/webhooks/{id}/regenerate-secret`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Generate a new secret for webhook signature verification
     * Regenerate webhook secret
     */
    async regenerateWebhookSecret(requestParameters: RegenerateWebhookSecretRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: string; }> {
        const response = await this.regenerateWebhookSecretRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retry delivery of a failed webhook event
     * Retry webhook event
     */
    async retryWebhookEventRaw(requestParameters: RetryWebhookEventOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RetryWebhookEventResponse>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling retryWebhookEvent().'
            );
        }

        if (requestParameters['retryWebhookEventRequest'] == null) {
            throw new runtime.RequiredError(
                'retryWebhookEventRequest',
                'Required parameter "retryWebhookEventRequest" was null or undefined when calling retryWebhookEvent().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/webhook-events/retry`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RetryWebhookEventRequestToJSON(requestParameters['retryWebhookEventRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RetryWebhookEventResponseFromJSON(jsonValue));
    }

    /**
     * Retry delivery of a failed webhook event
     * Retry webhook event
     */
    async retryWebhookEvent(requestParameters: RetryWebhookEventOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RetryWebhookEventResponse> {
        const response = await this.retryWebhookEventRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Send a test event to a webhook endpoint
     * Test webhook
     */
    async testWebhookRaw(requestParameters: TestWebhookOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TestWebhookResponse>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling testWebhook().'
            );
        }

        if (requestParameters['testWebhookRequest'] == null) {
            throw new runtime.RequiredError(
                'testWebhookRequest',
                'Required parameter "testWebhookRequest" was null or undefined when calling testWebhook().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/webhooks/test`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TestWebhookRequestToJSON(requestParameters['testWebhookRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TestWebhookResponseFromJSON(jsonValue));
    }

    /**
     * Send a test event to a webhook endpoint
     * Test webhook
     */
    async testWebhook(requestParameters: TestWebhookOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TestWebhookResponse> {
        const response = await this.testWebhookRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing webhook configuration
     * Update webhook
     */
    async updateWebhookRaw(requestParameters: UpdateWebhookOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Webhook>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling updateWebhook().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateWebhook().'
            );
        }

        if (requestParameters['updateWebhookRequest'] == null) {
            throw new runtime.RequiredError(
                'updateWebhookRequest',
                'Required parameter "updateWebhookRequest" was null or undefined when calling updateWebhook().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/webhooks/{id}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateWebhookRequestToJSON(requestParameters['updateWebhookRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WebhookFromJSON(jsonValue));
    }

    /**
     * Update an existing webhook configuration
     * Update webhook
     */
    async updateWebhook(requestParameters: UpdateWebhookOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Webhook> {
        const response = await this.updateWebhookRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update security configuration for a webhook
     * Update webhook security settings
     */
    async updateWebhookSecurityRaw(requestParameters: UpdateWebhookSecurityOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WebhookSecuritySettings>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling updateWebhookSecurity().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateWebhookSecurity().'
            );
        }

        if (requestParameters['updateWebhookSecurityRequest'] == null) {
            throw new runtime.RequiredError(
                'updateWebhookSecurityRequest',
                'Required parameter "updateWebhookSecurityRequest" was null or undefined when calling updateWebhookSecurity().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/webhooks/{id}/security`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateWebhookSecurityRequestToJSON(requestParameters['updateWebhookSecurityRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WebhookSecuritySettingsFromJSON(jsonValue));
    }

    /**
     * Update security configuration for a webhook
     * Update webhook security settings
     */
    async updateWebhookSecurity(requestParameters: UpdateWebhookSecurityOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WebhookSecuritySettings> {
        const response = await this.updateWebhookSecurityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Validate a webhook URL for security and accessibility
     * Validate webhook URL
     */
    async validateWebhookURLRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/webhooks/validate-url`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Validate a webhook URL for security and accessibility
     * Validate webhook URL
     */
    async validateWebhookURL(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.validateWebhookURLRaw(initOverrides);
        return await response.value();
    }

}
