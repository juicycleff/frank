/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  EmailCodeResponse,
  EmailMFASetupResponse,
  GenerateBackupCodesRequest,
  GetGlobalActivityStats400Response,
  MFABackCodes,
  MFAChallengeResponse,
  MFAMethod,
  MFARecoveryOptions,
  MFARequirementCheck,
  MFAVerifyRequest,
  MFAVerifyResponse,
  PaginatedOutputMFAActivity,
  PaginatedOutputMFAMethod,
  ResendMFACodeRequest,
  ResendMFACodeResponse,
  SMSCodeResponse,
  SetupEmailRequest,
  SetupSMSRequest,
  SetupSMSResponse,
  SetupTOTPRequest,
  TOTPSetupResponse,
  UpdateMFAMethodRequest,
  UseBackupCodeRequest,
  ValidateMFAChallengeRequest,
  VerifyEmailRequestBody,
  VerifySMSRequest,
  VerifyTOTPRequest,
} from '../models/index';
import {
    EmailCodeResponseFromJSON,
    EmailCodeResponseToJSON,
    EmailMFASetupResponseFromJSON,
    EmailMFASetupResponseToJSON,
    GenerateBackupCodesRequestFromJSON,
    GenerateBackupCodesRequestToJSON,
    GetGlobalActivityStats400ResponseFromJSON,
    GetGlobalActivityStats400ResponseToJSON,
    MFABackCodesFromJSON,
    MFABackCodesToJSON,
    MFAChallengeResponseFromJSON,
    MFAChallengeResponseToJSON,
    MFAMethodFromJSON,
    MFAMethodToJSON,
    MFARecoveryOptionsFromJSON,
    MFARecoveryOptionsToJSON,
    MFARequirementCheckFromJSON,
    MFARequirementCheckToJSON,
    MFAVerifyRequestFromJSON,
    MFAVerifyRequestToJSON,
    MFAVerifyResponseFromJSON,
    MFAVerifyResponseToJSON,
    PaginatedOutputMFAActivityFromJSON,
    PaginatedOutputMFAActivityToJSON,
    PaginatedOutputMFAMethodFromJSON,
    PaginatedOutputMFAMethodToJSON,
    ResendMFACodeRequestFromJSON,
    ResendMFACodeRequestToJSON,
    ResendMFACodeResponseFromJSON,
    ResendMFACodeResponseToJSON,
    SMSCodeResponseFromJSON,
    SMSCodeResponseToJSON,
    SetupEmailRequestFromJSON,
    SetupEmailRequestToJSON,
    SetupSMSRequestFromJSON,
    SetupSMSRequestToJSON,
    SetupSMSResponseFromJSON,
    SetupSMSResponseToJSON,
    SetupTOTPRequestFromJSON,
    SetupTOTPRequestToJSON,
    TOTPSetupResponseFromJSON,
    TOTPSetupResponseToJSON,
    UpdateMFAMethodRequestFromJSON,
    UpdateMFAMethodRequestToJSON,
    UseBackupCodeRequestFromJSON,
    UseBackupCodeRequestToJSON,
    ValidateMFAChallengeRequestFromJSON,
    ValidateMFAChallengeRequestToJSON,
    VerifyEmailRequestBodyFromJSON,
    VerifyEmailRequestBodyToJSON,
    VerifySMSRequestFromJSON,
    VerifySMSRequestToJSON,
    VerifyTOTPRequestFromJSON,
    VerifyTOTPRequestToJSON,
} from '../models/index';

export interface CheckMFARequirementRequest {
    orgId: string;
    userId: string;
}

export interface CreateMFAChallengeRequest {
    orgId: string;
    userId: string;
}

export interface DeleteMFAMethodRequest {
    orgId: string;
    userId: string;
    id: string;
}

export interface DisableAllMFARequest {
    orgId: string;
    userId: string;
}

export interface DisableEmailMFARequest {
    orgId: string;
    userId: string;
}

export interface DisableSMSRequest {
    orgId: string;
    userId: string;
}

export interface DisableTOTPRequest {
    orgId: string;
    userId: string;
}

export interface GenerateBackupCodesOperationRequest {
    orgId: string;
    userId: string;
    generateBackupCodesRequest: Omit<GenerateBackupCodesRequest, '$schema'>;
}

export interface GetMFAActivityRequest {
    orgId: string;
    userId: string;
    after?: string;
    before?: string;
    first?: number;
    last?: number;
    limit?: number;
    offset?: number;
    fields?: Array<string> | null;
    orderBy?: Array<string> | null;
    page?: number;
    userId2?: string;
    methodId?: string;
    method?: string;
    action?: string;
    success?: boolean;
    startDate?: Date;
    endDate?: Date;
}

export interface GetMFAMethodRequest {
    orgId: string;
    userId: string;
    id: string;
}

export interface GetRecoveryOptionsRequest {
    orgId: string;
    userId: string;
}

export interface ListMFAMethodsRequest {
    orgId: string;
    userId: string;
    after?: string;
    before?: string;
    first?: number;
    last?: number;
    limit?: number;
    offset?: number;
    fields?: Array<string> | null;
    orderBy?: Array<string> | null;
    page?: number;
    userId2?: string;
    method?: string;
    verified?: boolean;
    active?: boolean;
    search?: string;
}

export interface RegenerateBackupCodesRequest {
    orgId: string;
    userId: string;
    generateBackupCodesRequest: Omit<GenerateBackupCodesRequest, '$schema'>;
}

export interface ResendMFACodeOperationRequest {
    orgId: string;
    userId: string;
    resendMFACodeRequest: Omit<ResendMFACodeRequest, '$schema'>;
}

export interface SendEmailCodeRequest {
    orgId: string;
    userId: string;
}

export interface SendSMSCodeRequest {
    orgId: string;
    userId: string;
}

export interface SetupEmailMFARequest {
    orgId: string;
    userId: string;
    setupEmailRequest: Omit<SetupEmailRequest, '$schema'>;
}

export interface SetupSMSOperationRequest {
    orgId: string;
    userId: string;
    setupSMSRequest: Omit<SetupSMSRequest, '$schema'>;
}

export interface SetupTOTPOperationRequest {
    orgId: string;
    userId: string;
    setupTOTPRequest: Omit<SetupTOTPRequest, '$schema'>;
}

export interface UpdateMFAMethodOperationRequest {
    orgId: string;
    userId: string;
    id: string;
    updateMFAMethodRequest: Omit<UpdateMFAMethodRequest, '$schema'>;
}

export interface ValidateMFAChallengeOperationRequest {
    orgId: string;
    userId: string;
    validateMFAChallengeRequest: Omit<ValidateMFAChallengeRequest, '$schema'>;
}

export interface VerifyBackupCodeRequest {
    orgId: string;
    userId: string;
    useBackupCodeRequest: Omit<UseBackupCodeRequest, '$schema'>;
}

export interface VerifyEmailCodeRequest {
    orgId: string;
    userId: string;
    verifyEmailRequestBody: Omit<VerifyEmailRequestBody, '$schema'>;
}

export interface VerifyMFARequest {
    orgId: string;
    userId: string;
    mFAVerifyRequest: Omit<MFAVerifyRequest, '$schema'>;
}

export interface VerifySMSCodeRequest {
    orgId: string;
    userId: string;
    verifySMSRequest: Omit<VerifySMSRequest, '$schema'>;
}

export interface VerifyTOTPOperationRequest {
    orgId: string;
    userId: string;
    verifyTOTPRequest: Omit<VerifyTOTPRequest, '$schema'>;
}

/**
 * 
 */
export class MFAApi extends runtime.BaseAPI {

    /**
     * Check if MFA is required for a user and what methods are available
     * Check MFA requirement
     */
    async checkMFARequirementRaw(requestParameters: CheckMFARequirementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MFARequirementCheck>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling checkMFARequirement().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling checkMFARequirement().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/users/{userId}/mfa/requirement`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MFARequirementCheckFromJSON(jsonValue));
    }

    /**
     * Check if MFA is required for a user and what methods are available
     * Check MFA requirement
     */
    async checkMFARequirement(requestParameters: CheckMFARequirementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MFARequirementCheck> {
        const response = await this.checkMFARequirementRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create an MFA challenge for user verification
     * Create MFA challenge
     */
    async createMFAChallengeRaw(requestParameters: CreateMFAChallengeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MFAChallengeResponse>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling createMFAChallenge().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling createMFAChallenge().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/users/{userId}/mfa/challenge`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MFAChallengeResponseFromJSON(jsonValue));
    }

    /**
     * Create an MFA challenge for user verification
     * Create MFA challenge
     */
    async createMFAChallenge(requestParameters: CreateMFAChallengeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MFAChallengeResponse> {
        const response = await this.createMFAChallengeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an MFA method
     * Delete MFA method
     */
    async deleteMFAMethodRaw(requestParameters: DeleteMFAMethodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling deleteMFAMethod().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling deleteMFAMethod().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteMFAMethod().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/users/{userId}/mfa/methods/{id}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete an MFA method
     * Delete MFA method
     */
    async deleteMFAMethod(requestParameters: DeleteMFAMethodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteMFAMethodRaw(requestParameters, initOverrides);
    }

    /**
     * Disable all MFA methods for a user (recovery operation)
     * Disable all MFA
     */
    async disableAllMFARaw(requestParameters: DisableAllMFARequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling disableAllMFA().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling disableAllMFA().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/users/{userId}/mfa/all`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Disable all MFA methods for a user (recovery operation)
     * Disable all MFA
     */
    async disableAllMFA(requestParameters: DisableAllMFARequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.disableAllMFARaw(requestParameters, initOverrides);
    }

    /**
     * Disable email-based multi-factor authentication for a user
     * Disable email MFA
     */
    async disableEmailMFARaw(requestParameters: DisableEmailMFARequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling disableEmailMFA().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling disableEmailMFA().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/users/{userId}/mfa/email`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Disable email-based multi-factor authentication for a user
     * Disable email MFA
     */
    async disableEmailMFA(requestParameters: DisableEmailMFARequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.disableEmailMFARaw(requestParameters, initOverrides);
    }

    /**
     * Disable SMS-based multi-factor authentication for a user
     * Disable SMS MFA
     */
    async disableSMSRaw(requestParameters: DisableSMSRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling disableSMS().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling disableSMS().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/users/{userId}/mfa/sms`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Disable SMS-based multi-factor authentication for a user
     * Disable SMS MFA
     */
    async disableSMS(requestParameters: DisableSMSRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.disableSMSRaw(requestParameters, initOverrides);
    }

    /**
     * Disable TOTP authentication for a user
     * Disable TOTP
     */
    async disableTOTPRaw(requestParameters: DisableTOTPRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling disableTOTP().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling disableTOTP().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/users/{userId}/mfa/totp`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Disable TOTP authentication for a user
     * Disable TOTP
     */
    async disableTOTP(requestParameters: DisableTOTPRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.disableTOTPRaw(requestParameters, initOverrides);
    }

    /**
     * Generate backup codes for MFA recovery
     * Generate backup codes
     */
    async generateBackupCodesRaw(requestParameters: GenerateBackupCodesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MFABackCodes>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling generateBackupCodes().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling generateBackupCodes().'
            );
        }

        if (requestParameters['generateBackupCodesRequest'] == null) {
            throw new runtime.RequiredError(
                'generateBackupCodesRequest',
                'Required parameter "generateBackupCodesRequest" was null or undefined when calling generateBackupCodes().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/users/{userId}/mfa/backup-codes/generate`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GenerateBackupCodesRequestToJSON(requestParameters['generateBackupCodesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MFABackCodesFromJSON(jsonValue));
    }

    /**
     * Generate backup codes for MFA recovery
     * Generate backup codes
     */
    async generateBackupCodes(requestParameters: GenerateBackupCodesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MFABackCodes> {
        const response = await this.generateBackupCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get MFA activity logs for a user with pagination and filtering
     * Get MFA activity
     */
    async getMFAActivityRaw(requestParameters: GetMFAActivityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedOutputMFAActivity>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling getMFAActivity().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getMFAActivity().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['after'] != null) {
            queryParameters['after'] = requestParameters['after'];
        }

        if (requestParameters['before'] != null) {
            queryParameters['before'] = requestParameters['before'];
        }

        if (requestParameters['first'] != null) {
            queryParameters['first'] = requestParameters['first'];
        }

        if (requestParameters['last'] != null) {
            queryParameters['last'] = requestParameters['last'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['orderBy'] = requestParameters['orderBy']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['userId2'] != null) {
            queryParameters['userId'] = requestParameters['userId2'];
        }

        if (requestParameters['methodId'] != null) {
            queryParameters['methodId'] = requestParameters['methodId'];
        }

        if (requestParameters['method'] != null) {
            queryParameters['method'] = requestParameters['method'];
        }

        if (requestParameters['action'] != null) {
            queryParameters['action'] = requestParameters['action'];
        }

        if (requestParameters['success'] != null) {
            queryParameters['success'] = requestParameters['success'];
        }

        if (requestParameters['startDate'] != null) {
            queryParameters['startDate'] = (requestParameters['startDate'] as any).toISOString();
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['endDate'] = (requestParameters['endDate'] as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/users/{userId}/mfa/activity`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedOutputMFAActivityFromJSON(jsonValue));
    }

    /**
     * Get MFA activity logs for a user with pagination and filtering
     * Get MFA activity
     */
    async getMFAActivity(requestParameters: GetMFAActivityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedOutputMFAActivity> {
        const response = await this.getMFAActivityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get details of a specific MFA method
     * Get MFA method
     */
    async getMFAMethodRaw(requestParameters: GetMFAMethodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MFAMethod>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling getMFAMethod().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getMFAMethod().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getMFAMethod().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/users/{userId}/mfa/methods/{id}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MFAMethodFromJSON(jsonValue));
    }

    /**
     * Get details of a specific MFA method
     * Get MFA method
     */
    async getMFAMethod(requestParameters: GetMFAMethodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MFAMethod> {
        const response = await this.getMFAMethodRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get available MFA recovery options for a user
     * Get recovery options
     */
    async getRecoveryOptionsRaw(requestParameters: GetRecoveryOptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MFARecoveryOptions>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling getRecoveryOptions().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getRecoveryOptions().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/users/{userId}/mfa/recovery`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MFARecoveryOptionsFromJSON(jsonValue));
    }

    /**
     * Get available MFA recovery options for a user
     * Get recovery options
     */
    async getRecoveryOptions(requestParameters: GetRecoveryOptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MFARecoveryOptions> {
        const response = await this.getRecoveryOptionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all MFA methods for a user with pagination and filtering options
     * List MFA methods
     */
    async listMFAMethodsRaw(requestParameters: ListMFAMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedOutputMFAMethod>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling listMFAMethods().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling listMFAMethods().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['after'] != null) {
            queryParameters['after'] = requestParameters['after'];
        }

        if (requestParameters['before'] != null) {
            queryParameters['before'] = requestParameters['before'];
        }

        if (requestParameters['first'] != null) {
            queryParameters['first'] = requestParameters['first'];
        }

        if (requestParameters['last'] != null) {
            queryParameters['last'] = requestParameters['last'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['orderBy'] = requestParameters['orderBy']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['userId2'] != null) {
            queryParameters['userId'] = requestParameters['userId2'];
        }

        if (requestParameters['method'] != null) {
            queryParameters['method'] = requestParameters['method'];
        }

        if (requestParameters['verified'] != null) {
            queryParameters['verified'] = requestParameters['verified'];
        }

        if (requestParameters['active'] != null) {
            queryParameters['active'] = requestParameters['active'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/users/{userId}/mfa/methods`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedOutputMFAMethodFromJSON(jsonValue));
    }

    /**
     * List all MFA methods for a user with pagination and filtering options
     * List MFA methods
     */
    async listMFAMethods(requestParameters: ListMFAMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedOutputMFAMethod> {
        const response = await this.listMFAMethodsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Regenerate backup codes, invalidating previous ones
     * Regenerate backup codes
     */
    async regenerateBackupCodesRaw(requestParameters: RegenerateBackupCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MFABackCodes>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling regenerateBackupCodes().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling regenerateBackupCodes().'
            );
        }

        if (requestParameters['generateBackupCodesRequest'] == null) {
            throw new runtime.RequiredError(
                'generateBackupCodesRequest',
                'Required parameter "generateBackupCodesRequest" was null or undefined when calling regenerateBackupCodes().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/users/{userId}/mfa/backup-codes/regenerate`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GenerateBackupCodesRequestToJSON(requestParameters['generateBackupCodesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MFABackCodesFromJSON(jsonValue));
    }

    /**
     * Regenerate backup codes, invalidating previous ones
     * Regenerate backup codes
     */
    async regenerateBackupCodes(requestParameters: RegenerateBackupCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MFABackCodes> {
        const response = await this.regenerateBackupCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Resend MFA verification code for SMS or email methods
     * Resend MFA code
     */
    async resendMFACodeRaw(requestParameters: ResendMFACodeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResendMFACodeResponse>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling resendMFACode().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling resendMFACode().'
            );
        }

        if (requestParameters['resendMFACodeRequest'] == null) {
            throw new runtime.RequiredError(
                'resendMFACodeRequest',
                'Required parameter "resendMFACodeRequest" was null or undefined when calling resendMFACode().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/users/{userId}/mfa/resend`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ResendMFACodeRequestToJSON(requestParameters['resendMFACodeRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResendMFACodeResponseFromJSON(jsonValue));
    }

    /**
     * Resend MFA verification code for SMS or email methods
     * Resend MFA code
     */
    async resendMFACode(requestParameters: ResendMFACodeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResendMFACodeResponse> {
        const response = await this.resendMFACodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Send an email verification code to the user\'s email
     * Send email code
     */
    async sendEmailCodeRaw(requestParameters: SendEmailCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailCodeResponse>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling sendEmailCode().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling sendEmailCode().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/users/{userId}/mfa/email/send`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailCodeResponseFromJSON(jsonValue));
    }

    /**
     * Send an email verification code to the user\'s email
     * Send email code
     */
    async sendEmailCode(requestParameters: SendEmailCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailCodeResponse> {
        const response = await this.sendEmailCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Send an SMS verification code to the user\'s phone
     * Send SMS code
     */
    async sendSMSCodeRaw(requestParameters: SendSMSCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SMSCodeResponse>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling sendSMSCode().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling sendSMSCode().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/users/{userId}/mfa/sms/send`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SMSCodeResponseFromJSON(jsonValue));
    }

    /**
     * Send an SMS verification code to the user\'s phone
     * Send SMS code
     */
    async sendSMSCode(requestParameters: SendSMSCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SMSCodeResponse> {
        const response = await this.sendSMSCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Setup email-based multi-factor authentication for a user
     * Setup email MFA
     */
    async setupEmailMFARaw(requestParameters: SetupEmailMFARequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailMFASetupResponse>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling setupEmailMFA().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling setupEmailMFA().'
            );
        }

        if (requestParameters['setupEmailRequest'] == null) {
            throw new runtime.RequiredError(
                'setupEmailRequest',
                'Required parameter "setupEmailRequest" was null or undefined when calling setupEmailMFA().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/users/{userId}/mfa/email/setup`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SetupEmailRequestToJSON(requestParameters['setupEmailRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailMFASetupResponseFromJSON(jsonValue));
    }

    /**
     * Setup email-based multi-factor authentication for a user
     * Setup email MFA
     */
    async setupEmailMFA(requestParameters: SetupEmailMFARequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailMFASetupResponse> {
        const response = await this.setupEmailMFARaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Setup SMS-based multi-factor authentication for a user
     * Setup SMS MFA
     */
    async setupSMSRaw(requestParameters: SetupSMSOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SetupSMSResponse>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling setupSMS().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling setupSMS().'
            );
        }

        if (requestParameters['setupSMSRequest'] == null) {
            throw new runtime.RequiredError(
                'setupSMSRequest',
                'Required parameter "setupSMSRequest" was null or undefined when calling setupSMS().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/users/{userId}/mfa/sms/setup`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SetupSMSRequestToJSON(requestParameters['setupSMSRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SetupSMSResponseFromJSON(jsonValue));
    }

    /**
     * Setup SMS-based multi-factor authentication for a user
     * Setup SMS MFA
     */
    async setupSMS(requestParameters: SetupSMSOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SetupSMSResponse> {
        const response = await this.setupSMSRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Setup Time-based One-Time Password (TOTP) authentication for a user
     * Setup TOTP
     */
    async setupTOTPRaw(requestParameters: SetupTOTPOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TOTPSetupResponse>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling setupTOTP().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling setupTOTP().'
            );
        }

        if (requestParameters['setupTOTPRequest'] == null) {
            throw new runtime.RequiredError(
                'setupTOTPRequest',
                'Required parameter "setupTOTPRequest" was null or undefined when calling setupTOTP().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/users/{userId}/mfa/totp/setup`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SetupTOTPRequestToJSON(requestParameters['setupTOTPRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TOTPSetupResponseFromJSON(jsonValue));
    }

    /**
     * Setup Time-based One-Time Password (TOTP) authentication for a user
     * Setup TOTP
     */
    async setupTOTP(requestParameters: SetupTOTPOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TOTPSetupResponse> {
        const response = await this.setupTOTPRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing MFA method configuration
     * Update MFA method
     */
    async updateMFAMethodRaw(requestParameters: UpdateMFAMethodOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MFAMethod>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling updateMFAMethod().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling updateMFAMethod().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateMFAMethod().'
            );
        }

        if (requestParameters['updateMFAMethodRequest'] == null) {
            throw new runtime.RequiredError(
                'updateMFAMethodRequest',
                'Required parameter "updateMFAMethodRequest" was null or undefined when calling updateMFAMethod().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/users/{userId}/mfa/methods/{id}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateMFAMethodRequestToJSON(requestParameters['updateMFAMethodRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MFAMethodFromJSON(jsonValue));
    }

    /**
     * Update an existing MFA method configuration
     * Update MFA method
     */
    async updateMFAMethod(requestParameters: UpdateMFAMethodOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MFAMethod> {
        const response = await this.updateMFAMethodRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Validate an MFA challenge response
     * Validate MFA challenge
     */
    async validateMFAChallengeRaw(requestParameters: ValidateMFAChallengeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MFAVerifyResponse>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling validateMFAChallenge().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling validateMFAChallenge().'
            );
        }

        if (requestParameters['validateMFAChallengeRequest'] == null) {
            throw new runtime.RequiredError(
                'validateMFAChallengeRequest',
                'Required parameter "validateMFAChallengeRequest" was null or undefined when calling validateMFAChallenge().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/users/{userId}/mfa/challenge/validate`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ValidateMFAChallengeRequestToJSON(requestParameters['validateMFAChallengeRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MFAVerifyResponseFromJSON(jsonValue));
    }

    /**
     * Validate an MFA challenge response
     * Validate MFA challenge
     */
    async validateMFAChallenge(requestParameters: ValidateMFAChallengeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MFAVerifyResponse> {
        const response = await this.validateMFAChallengeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Verify a backup code for MFA authentication
     * Verify backup code
     */
    async verifyBackupCodeRaw(requestParameters: VerifyBackupCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MFAVerifyResponse>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling verifyBackupCode().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling verifyBackupCode().'
            );
        }

        if (requestParameters['useBackupCodeRequest'] == null) {
            throw new runtime.RequiredError(
                'useBackupCodeRequest',
                'Required parameter "useBackupCodeRequest" was null or undefined when calling verifyBackupCode().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/users/{userId}/mfa/backup-codes/verify`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UseBackupCodeRequestToJSON(requestParameters['useBackupCodeRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MFAVerifyResponseFromJSON(jsonValue));
    }

    /**
     * Verify a backup code for MFA authentication
     * Verify backup code
     */
    async verifyBackupCode(requestParameters: VerifyBackupCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MFAVerifyResponse> {
        const response = await this.verifyBackupCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Verify an email verification code
     * Verify email code
     */
    async verifyEmailCodeRaw(requestParameters: VerifyEmailCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MFAVerifyResponse>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling verifyEmailCode().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling verifyEmailCode().'
            );
        }

        if (requestParameters['verifyEmailRequestBody'] == null) {
            throw new runtime.RequiredError(
                'verifyEmailRequestBody',
                'Required parameter "verifyEmailRequestBody" was null or undefined when calling verifyEmailCode().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/users/{userId}/mfa/email/verify`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VerifyEmailRequestBodyToJSON(requestParameters['verifyEmailRequestBody']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MFAVerifyResponseFromJSON(jsonValue));
    }

    /**
     * Verify an email verification code
     * Verify email code
     */
    async verifyEmailCode(requestParameters: VerifyEmailCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MFAVerifyResponse> {
        const response = await this.verifyEmailCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Verify MFA using any available method
     * Verify MFA
     */
    async verifyMFARaw(requestParameters: VerifyMFARequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MFAVerifyResponse>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling verifyMFA().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling verifyMFA().'
            );
        }

        if (requestParameters['mFAVerifyRequest'] == null) {
            throw new runtime.RequiredError(
                'mFAVerifyRequest',
                'Required parameter "mFAVerifyRequest" was null or undefined when calling verifyMFA().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/users/{userId}/mfa/verify`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MFAVerifyRequestToJSON(requestParameters['mFAVerifyRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MFAVerifyResponseFromJSON(jsonValue));
    }

    /**
     * Verify MFA using any available method
     * Verify MFA
     */
    async verifyMFA(requestParameters: VerifyMFARequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MFAVerifyResponse> {
        const response = await this.verifyMFARaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Verify an SMS verification code
     * Verify SMS code
     */
    async verifySMSCodeRaw(requestParameters: VerifySMSCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MFAVerifyResponse>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling verifySMSCode().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling verifySMSCode().'
            );
        }

        if (requestParameters['verifySMSRequest'] == null) {
            throw new runtime.RequiredError(
                'verifySMSRequest',
                'Required parameter "verifySMSRequest" was null or undefined when calling verifySMSCode().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/users/{userId}/mfa/sms/verify`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VerifySMSRequestToJSON(requestParameters['verifySMSRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MFAVerifyResponseFromJSON(jsonValue));
    }

    /**
     * Verify an SMS verification code
     * Verify SMS code
     */
    async verifySMSCode(requestParameters: VerifySMSCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MFAVerifyResponse> {
        const response = await this.verifySMSCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Verify a TOTP code for authentication
     * Verify TOTP
     */
    async verifyTOTPRaw(requestParameters: VerifyTOTPOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MFAVerifyResponse>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling verifyTOTP().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling verifyTOTP().'
            );
        }

        if (requestParameters['verifyTOTPRequest'] == null) {
            throw new runtime.RequiredError(
                'verifyTOTPRequest',
                'Required parameter "verifyTOTPRequest" was null or undefined when calling verifyTOTP().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/users/{userId}/mfa/totp/verify`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VerifyTOTPRequestToJSON(requestParameters['verifyTOTPRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MFAVerifyResponseFromJSON(jsonValue));
    }

    /**
     * Verify a TOTP code for authentication
     * Verify TOTP
     */
    async verifyTOTP(requestParameters: VerifyTOTPOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MFAVerifyResponse> {
        const response = await this.verifyTOTPRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
