/* tslint:disable */
/* eslint-disable */
/**
 * My Project
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    EmptyOutputBody,
    EmptyOutputBodyFromJSON,
    EmptyOutputBodyToJSON,
    GenerateBackupCodesRequest,
    GenerateBackupCodesRequestFromJSON,
    GenerateBackupCodesRequestToJSON,
    InlineResponse400,
    InlineResponse400FromJSON,
    InlineResponse400ToJSON,
    MfaBackCodes,
    MfaBackCodesFromJSON,
    MfaBackCodesToJSON,
    MfaVerifyRequest,
    MfaVerifyRequestFromJSON,
    MfaVerifyRequestToJSON,
    MfaVerifyResponse,
    MfaVerifyResponseFromJSON,
    MfaVerifyResponseToJSON,
    SetupTotpRequest,
    SetupTotpRequestFromJSON,
    SetupTotpRequestToJSON,
    TotpSetupResponse,
    TotpSetupResponseFromJSON,
    TotpSetupResponseToJSON,
} from '../models';

export interface DisableUserMFARequest {
    orgId: string;
    id: string;
}

export interface EnableUserMFARequest {
    orgId: string;
    id: string;
}

export interface GetMFABackupCodesRequest {
    generateBackupCodesRequest?: GenerateBackupCodesRequest;
}

export interface GetUserMFARequest {
    orgId: string;
    id: string;
}

export interface ResetUserMFARequest {
    orgId: string;
    id: string;
}

export interface SetupMFARequest {
    setupTotpRequest?: SetupTotpRequest;
}

export interface VerifyMFARequest {
    mfaVerifyRequest?: MfaVerifyRequest;
}

/**
 * MFAApi - interface
 * 
 * @export
 * @interface MFAApiInterface
 */
export interface MFAApiInterface {
    /**
     * Disable multi-factor authentication
     * @summary Disable MFA
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MFAApiInterface
     */
    disableMFARaw(): Promise<runtime.ApiResponse<EmptyOutputBody>>;

    /**
     * Disable multi-factor authentication
     * Disable MFA
     */
    disableMFA(): Promise<EmptyOutputBody>;

    /**
     * Disable MFA for a user (admin action)
     * @summary Disable MFA for user
     * @param {string} orgId 
     * @param {string} id User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MFAApiInterface
     */
    disableUserMFARaw(requestParameters: DisableUserMFARequest): Promise<runtime.ApiResponse<EmptyOutputBody>>;

    /**
     * Disable MFA for a user (admin action)
     * Disable MFA for user
     */
    disableUserMFA(requestParameters: DisableUserMFARequest): Promise<EmptyOutputBody>;

    /**
     * Enable MFA for a user (admin action)
     * @summary Enable MFA for user
     * @param {string} orgId 
     * @param {string} id User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MFAApiInterface
     */
    enableUserMFARaw(requestParameters: EnableUserMFARequest): Promise<runtime.ApiResponse<EmptyOutputBody>>;

    /**
     * Enable MFA for a user (admin action)
     * Enable MFA for user
     */
    enableUserMFA(requestParameters: EnableUserMFARequest): Promise<EmptyOutputBody>;

    /**
     * Get or regenerate MFA backup codes
     * @summary Get MFA backup codes
     * @param {GenerateBackupCodesRequest} [generateBackupCodesRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MFAApiInterface
     */
    getMFABackupCodesRaw(requestParameters: GetMFABackupCodesRequest): Promise<runtime.ApiResponse<MfaBackCodes>>;

    /**
     * Get or regenerate MFA backup codes
     * Get MFA backup codes
     */
    getMFABackupCodes(requestParameters: GetMFABackupCodesRequest): Promise<MfaBackCodes>;

    /**
     * Get MFA configuration and status for a user
     * @summary Get user MFA status
     * @param {string} orgId 
     * @param {string} id User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MFAApiInterface
     */
    getUserMFARaw(requestParameters: GetUserMFARequest): Promise<runtime.ApiResponse<EmptyOutputBody>>;

    /**
     * Get MFA configuration and status for a user
     * Get user MFA status
     */
    getUserMFA(requestParameters: GetUserMFARequest): Promise<EmptyOutputBody>;

    /**
     * Use backup code for MFA recovery
     * @summary MFA recovery
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MFAApiInterface
     */
    mfaRecoveryRaw(): Promise<runtime.ApiResponse<EmptyOutputBody>>;

    /**
     * Use backup code for MFA recovery
     * MFA recovery
     */
    mfaRecovery(): Promise<EmptyOutputBody>;

    /**
     * Reset MFA configuration for a user (admin action)
     * @summary Reset user MFA
     * @param {string} orgId 
     * @param {string} id User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MFAApiInterface
     */
    resetUserMFARaw(requestParameters: ResetUserMFARequest): Promise<runtime.ApiResponse<EmptyOutputBody>>;

    /**
     * Reset MFA configuration for a user (admin action)
     * Reset user MFA
     */
    resetUserMFA(requestParameters: ResetUserMFARequest): Promise<EmptyOutputBody>;

    /**
     * Setup multi-factor authentication
     * @summary Setup MFA
     * @param {SetupTotpRequest} [setupTotpRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MFAApiInterface
     */
    setupMFARaw(requestParameters: SetupMFARequest): Promise<runtime.ApiResponse<TotpSetupResponse>>;

    /**
     * Setup multi-factor authentication
     * Setup MFA
     */
    setupMFA(requestParameters: SetupMFARequest): Promise<TotpSetupResponse>;

    /**
     * Verify multi-factor authentication code
     * @summary Verify MFA
     * @param {MfaVerifyRequest} [mfaVerifyRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MFAApiInterface
     */
    verifyMFARaw(requestParameters: VerifyMFARequest): Promise<runtime.ApiResponse<MfaVerifyResponse>>;

    /**
     * Verify multi-factor authentication code
     * Verify MFA
     */
    verifyMFA(requestParameters: VerifyMFARequest): Promise<MfaVerifyResponse>;

}

/**
 * 
 */
export class MFAApi extends runtime.BaseAPI implements MFAApiInterface {

    /**
     * Disable multi-factor authentication
     * Disable MFA
     */
    async disableMFARaw(): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/auth/mfa`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Disable multi-factor authentication
     * Disable MFA
     */
    async disableMFA(): Promise<EmptyOutputBody> {
        const response = await this.disableMFARaw();
        return await response.value();
    }

    /**
     * Disable MFA for a user (admin action)
     * Disable MFA for user
     */
    async disableUserMFARaw(requestParameters: DisableUserMFARequest): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling disableUserMFA.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling disableUserMFA.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/users/{id}/mfa`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Disable MFA for a user (admin action)
     * Disable MFA for user
     */
    async disableUserMFA(requestParameters: DisableUserMFARequest): Promise<EmptyOutputBody> {
        const response = await this.disableUserMFARaw(requestParameters);
        return await response.value();
    }

    /**
     * Enable MFA for a user (admin action)
     * Enable MFA for user
     */
    async enableUserMFARaw(requestParameters: EnableUserMFARequest): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling enableUserMFA.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling enableUserMFA.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/users/{id}/mfa/enable`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Enable MFA for a user (admin action)
     * Enable MFA for user
     */
    async enableUserMFA(requestParameters: EnableUserMFARequest): Promise<EmptyOutputBody> {
        const response = await this.enableUserMFARaw(requestParameters);
        return await response.value();
    }

    /**
     * Get or regenerate MFA backup codes
     * Get MFA backup codes
     */
    async getMFABackupCodesRaw(requestParameters: GetMFABackupCodesRequest): Promise<runtime.ApiResponse<MfaBackCodes>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/auth/mfa/backup-codes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            body: GenerateBackupCodesRequestToJSON(requestParameters.generateBackupCodesRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MfaBackCodesFromJSON(jsonValue));
    }

    /**
     * Get or regenerate MFA backup codes
     * Get MFA backup codes
     */
    async getMFABackupCodes(requestParameters: GetMFABackupCodesRequest): Promise<MfaBackCodes> {
        const response = await this.getMFABackupCodesRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get MFA configuration and status for a user
     * Get user MFA status
     */
    async getUserMFARaw(requestParameters: GetUserMFARequest): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getUserMFA.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getUserMFA.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/users/{id}/mfa`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Get MFA configuration and status for a user
     * Get user MFA status
     */
    async getUserMFA(requestParameters: GetUserMFARequest): Promise<EmptyOutputBody> {
        const response = await this.getUserMFARaw(requestParameters);
        return await response.value();
    }

    /**
     * Use backup code for MFA recovery
     * MFA recovery
     */
    async mfaRecoveryRaw(): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/public/auth/mfa/recovery`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Use backup code for MFA recovery
     * MFA recovery
     */
    async mfaRecovery(): Promise<EmptyOutputBody> {
        const response = await this.mfaRecoveryRaw();
        return await response.value();
    }

    /**
     * Reset MFA configuration for a user (admin action)
     * Reset user MFA
     */
    async resetUserMFARaw(requestParameters: ResetUserMFARequest): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling resetUserMFA.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling resetUserMFA.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/users/{id}/mfa/reset`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Reset MFA configuration for a user (admin action)
     * Reset user MFA
     */
    async resetUserMFA(requestParameters: ResetUserMFARequest): Promise<EmptyOutputBody> {
        const response = await this.resetUserMFARaw(requestParameters);
        return await response.value();
    }

    /**
     * Setup multi-factor authentication
     * Setup MFA
     */
    async setupMFARaw(requestParameters: SetupMFARequest): Promise<runtime.ApiResponse<TotpSetupResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/auth/mfa/setup`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SetupTotpRequestToJSON(requestParameters.setupTotpRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TotpSetupResponseFromJSON(jsonValue));
    }

    /**
     * Setup multi-factor authentication
     * Setup MFA
     */
    async setupMFA(requestParameters: SetupMFARequest): Promise<TotpSetupResponse> {
        const response = await this.setupMFARaw(requestParameters);
        return await response.value();
    }

    /**
     * Verify multi-factor authentication code
     * Verify MFA
     */
    async verifyMFARaw(requestParameters: VerifyMFARequest): Promise<runtime.ApiResponse<MfaVerifyResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/auth/mfa/verify`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MfaVerifyRequestToJSON(requestParameters.mfaVerifyRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MfaVerifyResponseFromJSON(jsonValue));
    }

    /**
     * Verify multi-factor authentication code
     * Verify MFA
     */
    async verifyMFA(requestParameters: VerifyMFARequest): Promise<MfaVerifyResponse> {
        const response = await this.verifyMFARaw(requestParameters);
        return await response.value();
    }

}
