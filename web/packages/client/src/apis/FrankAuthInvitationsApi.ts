/* tslint:disable */
/* eslint-disable */
/**
 * My Project
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AcceptInvitationRequest,
    AcceptInvitationRequestFromJSON,
    AcceptInvitationRequestToJSON,
    AcceptInvitationResponse,
    AcceptInvitationResponseFromJSON,
    AcceptInvitationResponseToJSON,
    BulkCreateInvitationsRequest,
    BulkCreateInvitationsRequestFromJSON,
    BulkCreateInvitationsRequestToJSON,
    BulkInvitationResponse,
    BulkInvitationResponseFromJSON,
    BulkInvitationResponseToJSON,
    CancelInvitationRequest,
    CancelInvitationRequestFromJSON,
    CancelInvitationRequestToJSON,
    CreateInvitationRequest,
    CreateInvitationRequestFromJSON,
    CreateInvitationRequestToJSON,
    CreateMembershipResponse,
    CreateMembershipResponseFromJSON,
    CreateMembershipResponseToJSON,
    DeclineInvitationRequest,
    DeclineInvitationRequestFromJSON,
    DeclineInvitationRequestToJSON,
    EmptyOutputBody,
    EmptyOutputBodyFromJSON,
    EmptyOutputBodyToJSON,
    InlineResponse400,
    InlineResponse400FromJSON,
    InlineResponse400ToJSON,
    Invitation,
    InvitationFromJSON,
    InvitationToJSON,
    InvitationValidationRequest,
    InvitationValidationRequestFromJSON,
    InvitationValidationRequestToJSON,
    InvitationValidationResponse,
    InvitationValidationResponseFromJSON,
    InvitationValidationResponseToJSON,
    PaginatedOutputInvitationSummary,
    PaginatedOutputInvitationSummaryFromJSON,
    PaginatedOutputInvitationSummaryToJSON,
    ResendInvitationRequest,
    ResendInvitationRequestFromJSON,
    ResendInvitationRequestToJSON,
} from '../models';

export interface AcceptInvitationOperationRequest {
    orgId: string;
    id: string;
    acceptInvitationRequest?: AcceptInvitationRequest;
}

export interface BulkInvitationsRequest {
    orgId: string;
    bulkCreateInvitationsRequest?: BulkCreateInvitationsRequest;
}

export interface CancelInvitationOperationRequest {
    orgId: string;
    id: string;
    cancelInvitationRequest?: CancelInvitationRequest;
}

export interface CreateInvitationOperationRequest {
    orgId: string;
    createInvitationRequest?: CreateInvitationRequest;
}

export interface DeclineInvitationOperationRequest {
    orgId: string;
    id: string;
    declineInvitationRequest?: DeclineInvitationRequest;
}

export interface GetInvitationRequest {
    orgId: string;
    id: string;
}

export interface ListInvitationsRequest {
    orgId: string;
    after?: string;
    before?: string;
    first?: number;
    last?: number;
    limit?: number;
    offset?: number;
    fields?: Array<string> | null;
    orderBy?: Array<string> | null;
    page?: number;
    status?: ListInvitationsStatusEnum;
    email?: string;
    roleId?: string;
    invitedBy?: string;
    search?: string;
    includeExpired?: boolean;
    startDate?: Date;
    endDate?: Date;
    sortBy?: ListInvitationsSortByEnum;
    sortOrder?: ListInvitationsSortOrderEnum;
}

export interface ResendInvitationOperationRequest {
    orgId: string;
    id: string;
    resendInvitationRequest?: ResendInvitationRequest;
}

export interface ValidateInvitationRequest {
    orgId: string;
    invitationValidationRequest?: InvitationValidationRequest;
}

/**
 * FrankAuthInvitationsApi - interface
 * 
 * @export
 * @interface FrankAuthInvitationsApiInterface
 */
export interface FrankAuthInvitationsApiInterface {
    /**
     * Accept an invitation to join the organization
     * @summary Accept invitation
     * @param {string} orgId 
     * @param {string} id Invitation ID
     * @param {AcceptInvitationRequest} [acceptInvitationRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrankAuthInvitationsApiInterface
     */
    acceptInvitationRaw(requestParameters: AcceptInvitationOperationRequest): Promise<runtime.ApiResponse<AcceptInvitationResponse>>;

    /**
     * Accept an invitation to join the organization
     * Accept invitation
     */
    acceptInvitation(requestParameters: AcceptInvitationOperationRequest): Promise<AcceptInvitationResponse>;

    /**
     * Send multiple invitations at once
     * @summary Bulk invitations
     * @param {string} orgId 
     * @param {BulkCreateInvitationsRequest} [bulkCreateInvitationsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrankAuthInvitationsApiInterface
     */
    bulkInvitationsRaw(requestParameters: BulkInvitationsRequest): Promise<runtime.ApiResponse<BulkInvitationResponse>>;

    /**
     * Send multiple invitations at once
     * Bulk invitations
     */
    bulkInvitations(requestParameters: BulkInvitationsRequest): Promise<BulkInvitationResponse>;

    /**
     * Cancel a pending invitation
     * @summary Cancel invitation
     * @param {string} orgId 
     * @param {string} id Invitation ID
     * @param {CancelInvitationRequest} [cancelInvitationRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrankAuthInvitationsApiInterface
     */
    cancelInvitationRaw(requestParameters: CancelInvitationOperationRequest): Promise<runtime.ApiResponse<EmptyOutputBody>>;

    /**
     * Cancel a pending invitation
     * Cancel invitation
     */
    cancelInvitation(requestParameters: CancelInvitationOperationRequest): Promise<EmptyOutputBody>;

    /**
     * Create and send an invitation to join the organization
     * @summary Create invitation
     * @param {string} orgId 
     * @param {CreateInvitationRequest} [createInvitationRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrankAuthInvitationsApiInterface
     */
    createInvitationRaw(requestParameters: CreateInvitationOperationRequest): Promise<runtime.ApiResponse<CreateMembershipResponse>>;

    /**
     * Create and send an invitation to join the organization
     * Create invitation
     */
    createInvitation(requestParameters: CreateInvitationOperationRequest): Promise<CreateMembershipResponse>;

    /**
     * Decline an invitation to join the organization
     * @summary Decline invitation
     * @param {string} orgId 
     * @param {string} id Invitation ID
     * @param {DeclineInvitationRequest} [declineInvitationRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrankAuthInvitationsApiInterface
     */
    declineInvitationRaw(requestParameters: DeclineInvitationOperationRequest): Promise<runtime.ApiResponse<EmptyOutputBody>>;

    /**
     * Decline an invitation to join the organization
     * Decline invitation
     */
    declineInvitation(requestParameters: DeclineInvitationOperationRequest): Promise<EmptyOutputBody>;

    /**
     * Get invitation details by ID
     * @summary Get invitation
     * @param {string} orgId 
     * @param {string} id Invitation ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrankAuthInvitationsApiInterface
     */
    getInvitationRaw(requestParameters: GetInvitationRequest): Promise<runtime.ApiResponse<Invitation>>;

    /**
     * Get invitation details by ID
     * Get invitation
     */
    getInvitation(requestParameters: GetInvitationRequest): Promise<Invitation>;

    /**
     * List all invitations for the organization with pagination and filtering
     * @summary List invitations
     * @param {string} orgId 
     * @param {string} [after] 
     * @param {string} [before] 
     * @param {number} [first] 
     * @param {number} [last] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {Array<string>} [fields] 
     * @param {Array<string>} [orderBy] 
     * @param {number} [page] 
     * @param {'pending' | 'accepted' | 'declined' | 'expired' | 'cancelled'} [status] Filter by invitation status
     * @param {string} [email] Filter by email address
     * @param {string} [roleId] Filter by role ID
     * @param {string} [invitedBy] Filter by inviter
     * @param {string} [search] Search in email, message
     * @param {boolean} [includeExpired] Include expired invitations
     * @param {Date} [startDate] Filter from date
     * @param {Date} [endDate] Filter to date
     * @param {'createdAt' | 'expiresAt' | 'email' | 'status'} [sortBy] Sort field
     * @param {'asc' | 'desc'} [sortOrder] Sort order
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrankAuthInvitationsApiInterface
     */
    listInvitationsRaw(requestParameters: ListInvitationsRequest): Promise<runtime.ApiResponse<PaginatedOutputInvitationSummary>>;

    /**
     * List all invitations for the organization with pagination and filtering
     * List invitations
     */
    listInvitations(requestParameters: ListInvitationsRequest): Promise<PaginatedOutputInvitationSummary>;

    /**
     * Resend an invitation email
     * @summary Resend invitation
     * @param {string} orgId 
     * @param {string} id Invitation ID
     * @param {ResendInvitationRequest} [resendInvitationRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrankAuthInvitationsApiInterface
     */
    resendInvitationRaw(requestParameters: ResendInvitationOperationRequest): Promise<runtime.ApiResponse<EmptyOutputBody>>;

    /**
     * Resend an invitation email
     * Resend invitation
     */
    resendInvitation(requestParameters: ResendInvitationOperationRequest): Promise<EmptyOutputBody>;

    /**
     * Validate an invitation token
     * @summary Validate invitation
     * @param {string} orgId 
     * @param {InvitationValidationRequest} [invitationValidationRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrankAuthInvitationsApiInterface
     */
    validateInvitationRaw(requestParameters: ValidateInvitationRequest): Promise<runtime.ApiResponse<InvitationValidationResponse>>;

    /**
     * Validate an invitation token
     * Validate invitation
     */
    validateInvitation(requestParameters: ValidateInvitationRequest): Promise<InvitationValidationResponse>;

}

/**
 * 
 */
export class FrankAuthInvitationsApi extends runtime.BaseAPI implements FrankAuthInvitationsApiInterface {

    /**
     * Accept an invitation to join the organization
     * Accept invitation
     */
    async acceptInvitationRaw(requestParameters: AcceptInvitationOperationRequest): Promise<runtime.ApiResponse<AcceptInvitationResponse>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling acceptInvitation.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling acceptInvitation.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/invitations/{id}/accept`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AcceptInvitationRequestToJSON(requestParameters.acceptInvitationRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AcceptInvitationResponseFromJSON(jsonValue));
    }

    /**
     * Accept an invitation to join the organization
     * Accept invitation
     */
    async acceptInvitation(requestParameters: AcceptInvitationOperationRequest): Promise<AcceptInvitationResponse> {
        const response = await this.acceptInvitationRaw(requestParameters);
        return await response.value();
    }

    /**
     * Send multiple invitations at once
     * Bulk invitations
     */
    async bulkInvitationsRaw(requestParameters: BulkInvitationsRequest): Promise<runtime.ApiResponse<BulkInvitationResponse>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling bulkInvitations.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/invitations/bulk`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BulkCreateInvitationsRequestToJSON(requestParameters.bulkCreateInvitationsRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => BulkInvitationResponseFromJSON(jsonValue));
    }

    /**
     * Send multiple invitations at once
     * Bulk invitations
     */
    async bulkInvitations(requestParameters: BulkInvitationsRequest): Promise<BulkInvitationResponse> {
        const response = await this.bulkInvitationsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Cancel a pending invitation
     * Cancel invitation
     */
    async cancelInvitationRaw(requestParameters: CancelInvitationOperationRequest): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling cancelInvitation.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling cancelInvitation.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/invitations/{id}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: CancelInvitationRequestToJSON(requestParameters.cancelInvitationRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Cancel a pending invitation
     * Cancel invitation
     */
    async cancelInvitation(requestParameters: CancelInvitationOperationRequest): Promise<EmptyOutputBody> {
        const response = await this.cancelInvitationRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create and send an invitation to join the organization
     * Create invitation
     */
    async createInvitationRaw(requestParameters: CreateInvitationOperationRequest): Promise<runtime.ApiResponse<CreateMembershipResponse>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling createInvitation.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/invitations`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateInvitationRequestToJSON(requestParameters.createInvitationRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateMembershipResponseFromJSON(jsonValue));
    }

    /**
     * Create and send an invitation to join the organization
     * Create invitation
     */
    async createInvitation(requestParameters: CreateInvitationOperationRequest): Promise<CreateMembershipResponse> {
        const response = await this.createInvitationRaw(requestParameters);
        return await response.value();
    }

    /**
     * Decline an invitation to join the organization
     * Decline invitation
     */
    async declineInvitationRaw(requestParameters: DeclineInvitationOperationRequest): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling declineInvitation.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling declineInvitation.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/invitations/{id}/decline`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DeclineInvitationRequestToJSON(requestParameters.declineInvitationRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Decline an invitation to join the organization
     * Decline invitation
     */
    async declineInvitation(requestParameters: DeclineInvitationOperationRequest): Promise<EmptyOutputBody> {
        const response = await this.declineInvitationRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get invitation details by ID
     * Get invitation
     */
    async getInvitationRaw(requestParameters: GetInvitationRequest): Promise<runtime.ApiResponse<Invitation>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getInvitation.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getInvitation.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/invitations/{id}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InvitationFromJSON(jsonValue));
    }

    /**
     * Get invitation details by ID
     * Get invitation
     */
    async getInvitation(requestParameters: GetInvitationRequest): Promise<Invitation> {
        const response = await this.getInvitationRaw(requestParameters);
        return await response.value();
    }

    /**
     * List all invitations for the organization with pagination and filtering
     * List invitations
     */
    async listInvitationsRaw(requestParameters: ListInvitationsRequest): Promise<runtime.ApiResponse<PaginatedOutputInvitationSummary>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling listInvitations.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.after !== undefined) {
            queryParameters['after'] = requestParameters.after;
        }

        if (requestParameters.before !== undefined) {
            queryParameters['before'] = requestParameters.before;
        }

        if (requestParameters.first !== undefined) {
            queryParameters['first'] = requestParameters.first;
        }

        if (requestParameters.last !== undefined) {
            queryParameters['last'] = requestParameters.last;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.fields) {
            queryParameters['fields'] = requestParameters.fields;
        }

        if (requestParameters.orderBy) {
            queryParameters['orderBy'] = requestParameters.orderBy;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.status !== undefined) {
            queryParameters['status'] = requestParameters.status;
        }

        if (requestParameters.email !== undefined) {
            queryParameters['email'] = requestParameters.email;
        }

        if (requestParameters.roleId !== undefined) {
            queryParameters['roleId'] = requestParameters.roleId;
        }

        if (requestParameters.invitedBy !== undefined) {
            queryParameters['invitedBy'] = requestParameters.invitedBy;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.includeExpired !== undefined) {
            queryParameters['includeExpired'] = requestParameters.includeExpired;
        }

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = (requestParameters.startDate as any).toISOString();
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = (requestParameters.endDate as any).toISOString();
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.sortOrder !== undefined) {
            queryParameters['sortOrder'] = requestParameters.sortOrder;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/invitations`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedOutputInvitationSummaryFromJSON(jsonValue));
    }

    /**
     * List all invitations for the organization with pagination and filtering
     * List invitations
     */
    async listInvitations(requestParameters: ListInvitationsRequest): Promise<PaginatedOutputInvitationSummary> {
        const response = await this.listInvitationsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Resend an invitation email
     * Resend invitation
     */
    async resendInvitationRaw(requestParameters: ResendInvitationOperationRequest): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling resendInvitation.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling resendInvitation.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/invitations/{id}/resend`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ResendInvitationRequestToJSON(requestParameters.resendInvitationRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Resend an invitation email
     * Resend invitation
     */
    async resendInvitation(requestParameters: ResendInvitationOperationRequest): Promise<EmptyOutputBody> {
        const response = await this.resendInvitationRaw(requestParameters);
        return await response.value();
    }

    /**
     * Validate an invitation token
     * Validate invitation
     */
    async validateInvitationRaw(requestParameters: ValidateInvitationRequest): Promise<runtime.ApiResponse<InvitationValidationResponse>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling validateInvitation.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/invitations/validate`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InvitationValidationRequestToJSON(requestParameters.invitationValidationRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InvitationValidationResponseFromJSON(jsonValue));
    }

    /**
     * Validate an invitation token
     * Validate invitation
     */
    async validateInvitation(requestParameters: ValidateInvitationRequest): Promise<InvitationValidationResponse> {
        const response = await this.validateInvitationRaw(requestParameters);
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum ListInvitationsStatusEnum {
    Pending = 'pending',
    Accepted = 'accepted',
    Declined = 'declined',
    Expired = 'expired',
    Cancelled = 'cancelled'
}
/**
    * @export
    * @enum {string}
    */
export enum ListInvitationsSortByEnum {
    CreatedAt = 'createdAt',
    ExpiresAt = 'expiresAt',
    Email = 'email',
    Status = 'status'
}
/**
    * @export
    * @enum {string}
    */
export enum ListInvitationsSortOrderEnum {
    Asc = 'asc',
    Desc = 'desc'
}
