/* tslint:disable */
/* eslint-disable */
/**
 * My Project
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AssignPermissionRequest,
    AssignPermissionRequestFromJSON,
    AssignPermissionRequestToJSON,
    EmptyOutputBody,
    EmptyOutputBodyFromJSON,
    EmptyOutputBodyToJSON,
    InlineResponse400,
    InlineResponse400FromJSON,
    InlineResponse400ToJSON,
    UserPermissionAssignment,
    UserPermissionAssignmentFromJSON,
    UserPermissionAssignmentToJSON,
} from '../models';

export interface AssignUserPermissionRequest {
    orgId: string;
    id: string;
    assignPermissionRequest?: AssignPermissionRequest;
}

export interface ListUserPermissionsRequest {
    orgId: string;
    id: string;
}

export interface RemoveUserPermissionRequest {
    orgId: string;
    id: string;
    permissionId: string;
}

/**
 * PermissionsApi - interface
 * 
 * @export
 * @interface PermissionsApiInterface
 */
export interface PermissionsApiInterface {
    /**
     * Assign a direct permission to a user
     * @summary Assign permission to user
     * @param {string} orgId 
     * @param {string} id User ID
     * @param {AssignPermissionRequest} [assignPermissionRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionsApiInterface
     */
    assignUserPermissionRaw(requestParameters: AssignUserPermissionRequest): Promise<runtime.ApiResponse<EmptyOutputBody>>;

    /**
     * Assign a direct permission to a user
     * Assign permission to user
     */
    assignUserPermission(requestParameters: AssignUserPermissionRequest): Promise<EmptyOutputBody>;

    /**
     * List all permissions for a user (direct and inherited from roles)
     * @summary List user permissions
     * @param {string} orgId 
     * @param {string} id User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionsApiInterface
     */
    listUserPermissionsRaw(requestParameters: ListUserPermissionsRequest): Promise<runtime.ApiResponse<Array<UserPermissionAssignment>>>;

    /**
     * List all permissions for a user (direct and inherited from roles)
     * List user permissions
     */
    listUserPermissions(requestParameters: ListUserPermissionsRequest): Promise<Array<UserPermissionAssignment>>;

    /**
     * Remove a direct permission assignment from a user
     * @summary Remove permission from user
     * @param {string} orgId 
     * @param {string} id User ID
     * @param {string} permissionId Permission ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionsApiInterface
     */
    removeUserPermissionRaw(requestParameters: RemoveUserPermissionRequest): Promise<runtime.ApiResponse<EmptyOutputBody>>;

    /**
     * Remove a direct permission assignment from a user
     * Remove permission from user
     */
    removeUserPermission(requestParameters: RemoveUserPermissionRequest): Promise<EmptyOutputBody>;

}

/**
 * 
 */
export class PermissionsApi extends runtime.BaseAPI implements PermissionsApiInterface {

    /**
     * Assign a direct permission to a user
     * Assign permission to user
     */
    async assignUserPermissionRaw(requestParameters: AssignUserPermissionRequest): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling assignUserPermission.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling assignUserPermission.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/users/{id}/permissions`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AssignPermissionRequestToJSON(requestParameters.assignPermissionRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Assign a direct permission to a user
     * Assign permission to user
     */
    async assignUserPermission(requestParameters: AssignUserPermissionRequest): Promise<EmptyOutputBody> {
        const response = await this.assignUserPermissionRaw(requestParameters);
        return await response.value();
    }

    /**
     * List all permissions for a user (direct and inherited from roles)
     * List user permissions
     */
    async listUserPermissionsRaw(requestParameters: ListUserPermissionsRequest): Promise<runtime.ApiResponse<Array<UserPermissionAssignment>>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling listUserPermissions.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling listUserPermissions.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/users/{id}/permissions`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserPermissionAssignmentFromJSON));
    }

    /**
     * List all permissions for a user (direct and inherited from roles)
     * List user permissions
     */
    async listUserPermissions(requestParameters: ListUserPermissionsRequest): Promise<Array<UserPermissionAssignment>> {
        const response = await this.listUserPermissionsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Remove a direct permission assignment from a user
     * Remove permission from user
     */
    async removeUserPermissionRaw(requestParameters: RemoveUserPermissionRequest): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling removeUserPermission.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling removeUserPermission.');
        }

        if (requestParameters.permissionId === null || requestParameters.permissionId === undefined) {
            throw new runtime.RequiredError('permissionId','Required parameter requestParameters.permissionId was null or undefined when calling removeUserPermission.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/users/{id}/permissions/{permissionId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"permissionId"}}`, encodeURIComponent(String(requestParameters.permissionId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Remove a direct permission assignment from a user
     * Remove permission from user
     */
    async removeUserPermission(requestParameters: RemoveUserPermissionRequest): Promise<EmptyOutputBody> {
        const response = await this.removeUserPermissionRaw(requestParameters);
        return await response.value();
    }

}
