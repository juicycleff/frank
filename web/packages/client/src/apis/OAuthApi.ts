/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AuthorizeResponse,
  BulkRevokeTokensRequest,
  BulkRevokeTokensResponse,
  CreateOAuthClientRequest,
  CreateOAuthClientResponse,
  CreateOAuthScopeRequest,
  GetGlobalActivityStats400Response,
  IntrospectTokenRequest,
  IntrospectTokenResponse,
  OAuthClient,
  OAuthClientStats,
  OAuthScope,
  OAuthStats,
  OAuthToken,
  PaginatedOutputOAuthClientSummary,
  PaginatedOutputOAuthScope,
  PaginatedOutputOAuthTokenSummary,
  RegenerateClientSecretResponse,
  RevokeTokenRequest,
  TokenRequest,
  TokenResponse,
  TokenUsageStats,
  UpdateOAuthClientRequest,
  UpdateOAuthScopeRequest,
} from '../models/index';
import {
    AuthorizeResponseFromJSON,
    AuthorizeResponseToJSON,
    BulkRevokeTokensRequestFromJSON,
    BulkRevokeTokensRequestToJSON,
    BulkRevokeTokensResponseFromJSON,
    BulkRevokeTokensResponseToJSON,
    CreateOAuthClientRequestFromJSON,
    CreateOAuthClientRequestToJSON,
    CreateOAuthClientResponseFromJSON,
    CreateOAuthClientResponseToJSON,
    CreateOAuthScopeRequestFromJSON,
    CreateOAuthScopeRequestToJSON,
    GetGlobalActivityStats400ResponseFromJSON,
    GetGlobalActivityStats400ResponseToJSON,
    IntrospectTokenRequestFromJSON,
    IntrospectTokenRequestToJSON,
    IntrospectTokenResponseFromJSON,
    IntrospectTokenResponseToJSON,
    OAuthClientFromJSON,
    OAuthClientToJSON,
    OAuthClientStatsFromJSON,
    OAuthClientStatsToJSON,
    OAuthScopeFromJSON,
    OAuthScopeToJSON,
    OAuthStatsFromJSON,
    OAuthStatsToJSON,
    OAuthTokenFromJSON,
    OAuthTokenToJSON,
    PaginatedOutputOAuthClientSummaryFromJSON,
    PaginatedOutputOAuthClientSummaryToJSON,
    PaginatedOutputOAuthScopeFromJSON,
    PaginatedOutputOAuthScopeToJSON,
    PaginatedOutputOAuthTokenSummaryFromJSON,
    PaginatedOutputOAuthTokenSummaryToJSON,
    RegenerateClientSecretResponseFromJSON,
    RegenerateClientSecretResponseToJSON,
    RevokeTokenRequestFromJSON,
    RevokeTokenRequestToJSON,
    TokenRequestFromJSON,
    TokenRequestToJSON,
    TokenResponseFromJSON,
    TokenResponseToJSON,
    TokenUsageStatsFromJSON,
    TokenUsageStatsToJSON,
    UpdateOAuthClientRequestFromJSON,
    UpdateOAuthClientRequestToJSON,
    UpdateOAuthScopeRequestFromJSON,
    UpdateOAuthScopeRequestToJSON,
} from '../models/index';

export interface ActivateOAuthClientRequest {
    orgId: string;
    id: string;
}

export interface BulkRevokeTokensOperationRequest {
    orgId: string;
    bulkRevokeTokensRequest: Omit<BulkRevokeTokensRequest, '$schema'>;
}

export interface CreateOAuthClientOperationRequest {
    orgId: string;
    createOAuthClientRequest: Omit<CreateOAuthClientRequest, '$schema'>;
}

export interface CreateOAuthScopeOperationRequest {
    orgId: string;
    createOAuthScopeRequest: Omit<CreateOAuthScopeRequest, '$schema'>;
}

export interface DeactivateOAuthClientRequest {
    orgId: string;
    id: string;
}

export interface DeleteOAuthClientRequest {
    orgId: string;
    id: string;
}

export interface DeleteOAuthScopeRequest {
    orgId: string;
    id: string;
}

export interface GetClientStatsRequest {
    orgId: string;
    id: string;
    days?: number;
}

export interface GetOAuthClientRequest {
    orgId: string;
    id: string;
}

export interface GetOAuthScopeRequest {
    orgId: string;
    id: string;
}

export interface GetOAuthStatsRequest {
    orgId: string;
    days?: number;
}

export interface GetOAuthTokenRequest {
    orgId: string;
    id: string;
}

export interface GetTokenStatsRequest {
    orgId: string;
    days?: number;
    clientId?: string;
    userId?: string;
}

export interface ListClientTokensRequest {
    orgId: string;
    clientId: string;
    after?: string;
    before?: string;
    first?: number;
    last?: number;
    limit?: number;
    offset?: number;
    fields?: Array<string> | null;
    orderBy?: Array<string> | null;
    page?: number;
    clientId2?: string;
    userId?: string;
    organizationId?: string;
    revoked?: boolean;
    expired?: boolean;
    scope?: string;
}

export interface ListOAuthClientsRequest {
    orgId: string;
    after?: string;
    before?: string;
    first?: number;
    last?: number;
    limit?: number;
    offset?: number;
    fields?: Array<string> | null;
    orderBy?: Array<string> | null;
    page?: number;
    organizationId?: string;
    _public?: boolean;
    active?: boolean;
    search?: string;
}

export interface ListOAuthScopesRequest {
    orgId: string;
    after?: string;
    before?: string;
    first?: number;
    last?: number;
    limit?: number;
    offset?: number;
    fields?: Array<string> | null;
    orderBy?: Array<string> | null;
    page?: number;
}

export interface ListOAuthTokensRequest {
    orgId: string;
    after?: string;
    before?: string;
    first?: number;
    last?: number;
    limit?: number;
    offset?: number;
    fields?: Array<string> | null;
    orderBy?: Array<string> | null;
    page?: number;
    clientId?: string;
    userId?: string;
    organizationId?: string;
    revoked?: boolean;
    expired?: boolean;
    scope?: string;
}

export interface ListUserTokensRequest {
    orgId: string;
    userId: string;
    after?: string;
    before?: string;
    first?: number;
    last?: number;
    limit?: number;
    offset?: number;
    fields?: Array<string> | null;
    orderBy?: Array<string> | null;
    page?: number;
    clientId?: string;
    userId2?: string;
    organizationId?: string;
    revoked?: boolean;
    expired?: boolean;
    scope?: string;
}

export interface OauthIntrospectRequest {
    introspectTokenRequest: Omit<IntrospectTokenRequest, '$schema'>;
}

export interface OauthRevokeRequest {
    revokeTokenRequest: Omit<RevokeTokenRequest, '$schema'>;
}

export interface OauthTokenRequest {
    tokenRequest: Omit<TokenRequest, '$schema'>;
}

export interface OauthUserInfoRequest {
    authorization?: string;
}

export interface RegenerateClientSecretRequest {
    orgId: string;
    id: string;
}

export interface RevokeOAuthTokenRequest {
    orgId: string;
    id: string;
}

export interface UpdateOAuthClientOperationRequest {
    orgId: string;
    id: string;
    updateOAuthClientRequest: Omit<UpdateOAuthClientRequest, '$schema'>;
}

export interface UpdateOAuthScopeOperationRequest {
    orgId: string;
    id: string;
    updateOAuthScopeRequest: Omit<UpdateOAuthScopeRequest, '$schema'>;
}

/**
 * 
 */
export class OAuthApi extends runtime.BaseAPI {

    /**
     * Activate an OAuth client
     * Activate OAuth client
     */
    async activateOAuthClientRaw(requestParameters: ActivateOAuthClientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling activateOAuthClient().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling activateOAuthClient().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/oauth/clients/{id}/activate`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Activate an OAuth client
     * Activate OAuth client
     */
    async activateOAuthClient(requestParameters: ActivateOAuthClientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.activateOAuthClientRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Revoke multiple OAuth tokens based on criteria
     * Bulk revoke OAuth tokens
     */
    async bulkRevokeTokensRaw(requestParameters: BulkRevokeTokensOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BulkRevokeTokensResponse>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling bulkRevokeTokens().'
            );
        }

        if (requestParameters['bulkRevokeTokensRequest'] == null) {
            throw new runtime.RequiredError(
                'bulkRevokeTokensRequest',
                'Required parameter "bulkRevokeTokensRequest" was null or undefined when calling bulkRevokeTokens().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/oauth/tokens/bulk-revoke`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BulkRevokeTokensRequestToJSON(requestParameters['bulkRevokeTokensRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BulkRevokeTokensResponseFromJSON(jsonValue));
    }

    /**
     * Revoke multiple OAuth tokens based on criteria
     * Bulk revoke OAuth tokens
     */
    async bulkRevokeTokens(requestParameters: BulkRevokeTokensOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BulkRevokeTokensResponse> {
        const response = await this.bulkRevokeTokensRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new OAuth client for the organization
     * Create OAuth client
     */
    async createOAuthClientRaw(requestParameters: CreateOAuthClientOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateOAuthClientResponse>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling createOAuthClient().'
            );
        }

        if (requestParameters['createOAuthClientRequest'] == null) {
            throw new runtime.RequiredError(
                'createOAuthClientRequest',
                'Required parameter "createOAuthClientRequest" was null or undefined when calling createOAuthClient().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/oauth/clients`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateOAuthClientRequestToJSON(requestParameters['createOAuthClientRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateOAuthClientResponseFromJSON(jsonValue));
    }

    /**
     * Create a new OAuth client for the organization
     * Create OAuth client
     */
    async createOAuthClient(requestParameters: CreateOAuthClientOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateOAuthClientResponse> {
        const response = await this.createOAuthClientRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new OAuth scope for the organization
     * Create OAuth scope
     */
    async createOAuthScopeRaw(requestParameters: CreateOAuthScopeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OAuthScope>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling createOAuthScope().'
            );
        }

        if (requestParameters['createOAuthScopeRequest'] == null) {
            throw new runtime.RequiredError(
                'createOAuthScopeRequest',
                'Required parameter "createOAuthScopeRequest" was null or undefined when calling createOAuthScope().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/oauth/scopes`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateOAuthScopeRequestToJSON(requestParameters['createOAuthScopeRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OAuthScopeFromJSON(jsonValue));
    }

    /**
     * Create a new OAuth scope for the organization
     * Create OAuth scope
     */
    async createOAuthScope(requestParameters: CreateOAuthScopeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OAuthScope> {
        const response = await this.createOAuthScopeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deactivate an OAuth client
     * Deactivate OAuth client
     */
    async deactivateOAuthClientRaw(requestParameters: DeactivateOAuthClientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling deactivateOAuthClient().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deactivateOAuthClient().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/oauth/clients/{id}/deactivate`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Deactivate an OAuth client
     * Deactivate OAuth client
     */
    async deactivateOAuthClient(requestParameters: DeactivateOAuthClientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.deactivateOAuthClientRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an OAuth client
     * Delete OAuth client
     */
    async deleteOAuthClientRaw(requestParameters: DeleteOAuthClientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling deleteOAuthClient().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteOAuthClient().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/oauth/clients/{id}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Delete an OAuth client
     * Delete OAuth client
     */
    async deleteOAuthClient(requestParameters: DeleteOAuthClientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.deleteOAuthClientRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an OAuth scope
     * Delete OAuth scope
     */
    async deleteOAuthScopeRaw(requestParameters: DeleteOAuthScopeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling deleteOAuthScope().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteOAuthScope().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/oauth/scopes/{id}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Delete an OAuth scope
     * Delete OAuth scope
     */
    async deleteOAuthScope(requestParameters: DeleteOAuthScopeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.deleteOAuthScopeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get usage statistics for a specific OAuth client
     * Get OAuth client statistics
     */
    async getClientStatsRaw(requestParameters: GetClientStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OAuthClientStats>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling getClientStats().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getClientStats().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['days'] != null) {
            queryParameters['days'] = requestParameters['days'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/oauth/clients/{id}/stats`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OAuthClientStatsFromJSON(jsonValue));
    }

    /**
     * Get usage statistics for a specific OAuth client
     * Get OAuth client statistics
     */
    async getClientStats(requestParameters: GetClientStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OAuthClientStats> {
        const response = await this.getClientStatsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get an OAuth client by ID
     * Get OAuth client
     */
    async getOAuthClientRaw(requestParameters: GetOAuthClientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OAuthClient>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling getOAuthClient().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getOAuthClient().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/oauth/clients/{id}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OAuthClientFromJSON(jsonValue));
    }

    /**
     * Get an OAuth client by ID
     * Get OAuth client
     */
    async getOAuthClient(requestParameters: GetOAuthClientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OAuthClient> {
        const response = await this.getOAuthClientRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get an OAuth scope by ID
     * Get OAuth scope
     */
    async getOAuthScopeRaw(requestParameters: GetOAuthScopeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OAuthScope>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling getOAuthScope().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getOAuthScope().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/oauth/scopes/{id}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OAuthScopeFromJSON(jsonValue));
    }

    /**
     * Get an OAuth scope by ID
     * Get OAuth scope
     */
    async getOAuthScope(requestParameters: GetOAuthScopeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OAuthScope> {
        const response = await this.getOAuthScopeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get OAuth usage statistics for the organization
     * Get OAuth statistics
     */
    async getOAuthStatsRaw(requestParameters: GetOAuthStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OAuthStats>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling getOAuthStats().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['days'] != null) {
            queryParameters['days'] = requestParameters['days'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/oauth/stats`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OAuthStatsFromJSON(jsonValue));
    }

    /**
     * Get OAuth usage statistics for the organization
     * Get OAuth statistics
     */
    async getOAuthStats(requestParameters: GetOAuthStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OAuthStats> {
        const response = await this.getOAuthStatsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get an OAuth token by ID
     * Get OAuth token
     */
    async getOAuthTokenRaw(requestParameters: GetOAuthTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OAuthToken>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling getOAuthToken().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getOAuthToken().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/oauth/tokens/{id}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OAuthTokenFromJSON(jsonValue));
    }

    /**
     * Get an OAuth token by ID
     * Get OAuth token
     */
    async getOAuthToken(requestParameters: GetOAuthTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OAuthToken> {
        const response = await this.getOAuthTokenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get token usage statistics for the organization
     * Get OAuth token statistics
     */
    async getTokenStatsRaw(requestParameters: GetTokenStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenUsageStats>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling getTokenStats().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['days'] != null) {
            queryParameters['days'] = requestParameters['days'];
        }

        if (requestParameters['clientId'] != null) {
            queryParameters['clientId'] = requestParameters['clientId'];
        }

        if (requestParameters['userId'] != null) {
            queryParameters['userId'] = requestParameters['userId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/oauth/tokens/stats`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenUsageStatsFromJSON(jsonValue));
    }

    /**
     * Get token usage statistics for the organization
     * Get OAuth token statistics
     */
    async getTokenStats(requestParameters: GetTokenStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenUsageStats> {
        const response = await this.getTokenStatsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a paginated list of OAuth tokens for a specific client
     * List client OAuth tokens
     */
    async listClientTokensRaw(requestParameters: ListClientTokensRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedOutputOAuthTokenSummary>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling listClientTokens().'
            );
        }

        if (requestParameters['clientId'] == null) {
            throw new runtime.RequiredError(
                'clientId',
                'Required parameter "clientId" was null or undefined when calling listClientTokens().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['after'] != null) {
            queryParameters['after'] = requestParameters['after'];
        }

        if (requestParameters['before'] != null) {
            queryParameters['before'] = requestParameters['before'];
        }

        if (requestParameters['first'] != null) {
            queryParameters['first'] = requestParameters['first'];
        }

        if (requestParameters['last'] != null) {
            queryParameters['last'] = requestParameters['last'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['orderBy'] = requestParameters['orderBy']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['clientId2'] != null) {
            queryParameters['clientId'] = requestParameters['clientId2'];
        }

        if (requestParameters['userId'] != null) {
            queryParameters['userId'] = requestParameters['userId'];
        }

        if (requestParameters['organizationId'] != null) {
            queryParameters['organizationId'] = requestParameters['organizationId'];
        }

        if (requestParameters['revoked'] != null) {
            queryParameters['revoked'] = requestParameters['revoked'];
        }

        if (requestParameters['expired'] != null) {
            queryParameters['expired'] = requestParameters['expired'];
        }

        if (requestParameters['scope'] != null) {
            queryParameters['scope'] = requestParameters['scope'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/oauth/clients/{clientId}/tokens`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"clientId"}}`, encodeURIComponent(String(requestParameters['clientId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedOutputOAuthTokenSummaryFromJSON(jsonValue));
    }

    /**
     * Get a paginated list of OAuth tokens for a specific client
     * List client OAuth tokens
     */
    async listClientTokens(requestParameters: ListClientTokensRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedOutputOAuthTokenSummary> {
        const response = await this.listClientTokensRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a paginated list of OAuth clients for the organization
     * List OAuth clients
     */
    async listOAuthClientsRaw(requestParameters: ListOAuthClientsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedOutputOAuthClientSummary>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling listOAuthClients().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['after'] != null) {
            queryParameters['after'] = requestParameters['after'];
        }

        if (requestParameters['before'] != null) {
            queryParameters['before'] = requestParameters['before'];
        }

        if (requestParameters['first'] != null) {
            queryParameters['first'] = requestParameters['first'];
        }

        if (requestParameters['last'] != null) {
            queryParameters['last'] = requestParameters['last'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['orderBy'] = requestParameters['orderBy']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['organizationId'] != null) {
            queryParameters['organizationId'] = requestParameters['organizationId'];
        }

        if (requestParameters['_public'] != null) {
            queryParameters['public'] = requestParameters['_public'];
        }

        if (requestParameters['active'] != null) {
            queryParameters['active'] = requestParameters['active'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/oauth/clients`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedOutputOAuthClientSummaryFromJSON(jsonValue));
    }

    /**
     * Get a paginated list of OAuth clients for the organization
     * List OAuth clients
     */
    async listOAuthClients(requestParameters: ListOAuthClientsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedOutputOAuthClientSummary> {
        const response = await this.listOAuthClientsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a paginated list of OAuth scopes for the organization
     * List OAuth scopes
     */
    async listOAuthScopesRaw(requestParameters: ListOAuthScopesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedOutputOAuthScope>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling listOAuthScopes().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['after'] != null) {
            queryParameters['after'] = requestParameters['after'];
        }

        if (requestParameters['before'] != null) {
            queryParameters['before'] = requestParameters['before'];
        }

        if (requestParameters['first'] != null) {
            queryParameters['first'] = requestParameters['first'];
        }

        if (requestParameters['last'] != null) {
            queryParameters['last'] = requestParameters['last'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['orderBy'] = requestParameters['orderBy']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/oauth/scopes`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedOutputOAuthScopeFromJSON(jsonValue));
    }

    /**
     * Get a paginated list of OAuth scopes for the organization
     * List OAuth scopes
     */
    async listOAuthScopes(requestParameters: ListOAuthScopesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedOutputOAuthScope> {
        const response = await this.listOAuthScopesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a paginated list of OAuth tokens for the organization
     * List OAuth tokens
     */
    async listOAuthTokensRaw(requestParameters: ListOAuthTokensRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedOutputOAuthTokenSummary>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling listOAuthTokens().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['after'] != null) {
            queryParameters['after'] = requestParameters['after'];
        }

        if (requestParameters['before'] != null) {
            queryParameters['before'] = requestParameters['before'];
        }

        if (requestParameters['first'] != null) {
            queryParameters['first'] = requestParameters['first'];
        }

        if (requestParameters['last'] != null) {
            queryParameters['last'] = requestParameters['last'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['orderBy'] = requestParameters['orderBy']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['clientId'] != null) {
            queryParameters['clientId'] = requestParameters['clientId'];
        }

        if (requestParameters['userId'] != null) {
            queryParameters['userId'] = requestParameters['userId'];
        }

        if (requestParameters['organizationId'] != null) {
            queryParameters['organizationId'] = requestParameters['organizationId'];
        }

        if (requestParameters['revoked'] != null) {
            queryParameters['revoked'] = requestParameters['revoked'];
        }

        if (requestParameters['expired'] != null) {
            queryParameters['expired'] = requestParameters['expired'];
        }

        if (requestParameters['scope'] != null) {
            queryParameters['scope'] = requestParameters['scope'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/oauth/tokens`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedOutputOAuthTokenSummaryFromJSON(jsonValue));
    }

    /**
     * Get a paginated list of OAuth tokens for the organization
     * List OAuth tokens
     */
    async listOAuthTokens(requestParameters: ListOAuthTokensRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedOutputOAuthTokenSummary> {
        const response = await this.listOAuthTokensRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a paginated list of OAuth tokens for a specific user
     * List user OAuth tokens
     */
    async listUserTokensRaw(requestParameters: ListUserTokensRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedOutputOAuthTokenSummary>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling listUserTokens().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling listUserTokens().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['after'] != null) {
            queryParameters['after'] = requestParameters['after'];
        }

        if (requestParameters['before'] != null) {
            queryParameters['before'] = requestParameters['before'];
        }

        if (requestParameters['first'] != null) {
            queryParameters['first'] = requestParameters['first'];
        }

        if (requestParameters['last'] != null) {
            queryParameters['last'] = requestParameters['last'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['orderBy'] = requestParameters['orderBy']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['clientId'] != null) {
            queryParameters['clientId'] = requestParameters['clientId'];
        }

        if (requestParameters['userId2'] != null) {
            queryParameters['userId'] = requestParameters['userId2'];
        }

        if (requestParameters['organizationId'] != null) {
            queryParameters['organizationId'] = requestParameters['organizationId'];
        }

        if (requestParameters['revoked'] != null) {
            queryParameters['revoked'] = requestParameters['revoked'];
        }

        if (requestParameters['expired'] != null) {
            queryParameters['expired'] = requestParameters['expired'];
        }

        if (requestParameters['scope'] != null) {
            queryParameters['scope'] = requestParameters['scope'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/users/{userId}/oauth/tokens`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedOutputOAuthTokenSummaryFromJSON(jsonValue));
    }

    /**
     * Get a paginated list of OAuth tokens for a specific user
     * List user OAuth tokens
     */
    async listUserTokens(requestParameters: ListUserTokensRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedOutputOAuthTokenSummary> {
        const response = await this.listUserTokensRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * OAuth 2.0 authorization endpoint for starting authorization flow
     * OAuth authorization endpoint
     */
    async oauthAuthorizeRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthorizeResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/public/oauth/authorize`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthorizeResponseFromJSON(jsonValue));
    }

    /**
     * OAuth 2.0 authorization endpoint for starting authorization flow
     * OAuth authorization endpoint
     */
    async oauthAuthorize(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthorizeResponse> {
        const response = await this.oauthAuthorizeRaw(initOverrides);
        return await response.value();
    }

    /**
     * OAuth 2.0 token introspection endpoint for validating and getting information about tokens
     * OAuth token introspection endpoint
     */
    async oauthIntrospectRaw(requestParameters: OauthIntrospectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IntrospectTokenResponse>> {
        if (requestParameters['introspectTokenRequest'] == null) {
            throw new runtime.RequiredError(
                'introspectTokenRequest',
                'Required parameter "introspectTokenRequest" was null or undefined when calling oauthIntrospect().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/public/oauth/introspect`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IntrospectTokenRequestToJSON(requestParameters['introspectTokenRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IntrospectTokenResponseFromJSON(jsonValue));
    }

    /**
     * OAuth 2.0 token introspection endpoint for validating and getting information about tokens
     * OAuth token introspection endpoint
     */
    async oauthIntrospect(requestParameters: OauthIntrospectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IntrospectTokenResponse> {
        const response = await this.oauthIntrospectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * JSON Web Key Set endpoint for OAuth 2.0 token verification
     * OAuth JWKS endpoint
     */
    async oauthJWKSRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/public/.well-known/jwks.json`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * JSON Web Key Set endpoint for OAuth 2.0 token verification
     * OAuth JWKS endpoint
     */
    async oauthJWKS(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.oauthJWKSRaw(initOverrides);
        return await response.value();
    }

    /**
     * OAuth 2.0 token revocation endpoint for revoking access and refresh tokens
     * OAuth token revocation endpoint
     */
    async oauthRevokeRaw(requestParameters: OauthRevokeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        if (requestParameters['revokeTokenRequest'] == null) {
            throw new runtime.RequiredError(
                'revokeTokenRequest',
                'Required parameter "revokeTokenRequest" was null or undefined when calling oauthRevoke().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/public/oauth/revoke`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RevokeTokenRequestToJSON(requestParameters['revokeTokenRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * OAuth 2.0 token revocation endpoint for revoking access and refresh tokens
     * OAuth token revocation endpoint
     */
    async oauthRevoke(requestParameters: OauthRevokeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.oauthRevokeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * OAuth 2.0 token endpoint for exchanging authorization codes for access tokens
     * OAuth token endpoint
     */
    async oauthTokenRaw(requestParameters: OauthTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenResponse>> {
        if (requestParameters['tokenRequest'] == null) {
            throw new runtime.RequiredError(
                'tokenRequest',
                'Required parameter "tokenRequest" was null or undefined when calling oauthToken().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/public/oauth/token`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TokenRequestToJSON(requestParameters['tokenRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenResponseFromJSON(jsonValue));
    }

    /**
     * OAuth 2.0 token endpoint for exchanging authorization codes for access tokens
     * OAuth token endpoint
     */
    async oauthToken(requestParameters: OauthTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenResponse> {
        const response = await this.oauthTokenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * OAuth 2.0 user info endpoint for getting user information from access token
     * OAuth user info endpoint
     */
    async oauthUserInfoRaw(requestParameters: OauthUserInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/v1/public/oauth/userinfo`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * OAuth 2.0 user info endpoint for getting user information from access token
     * OAuth user info endpoint
     */
    async oauthUserInfo(requestParameters: OauthUserInfoRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.oauthUserInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * OAuth 2.0 authorization server metadata endpoint
     * OAuth well-known configuration
     */
    async oauthWellKnownRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/public/.well-known/oauth-authorization-server`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * OAuth 2.0 authorization server metadata endpoint
     * OAuth well-known configuration
     */
    async oauthWellKnown(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.oauthWellKnownRaw(initOverrides);
        return await response.value();
    }

    /**
     * Regenerate the client secret for an OAuth client
     * Regenerate client secret
     */
    async regenerateClientSecretRaw(requestParameters: RegenerateClientSecretRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RegenerateClientSecretResponse>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling regenerateClientSecret().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling regenerateClientSecret().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/oauth/clients/{id}/regenerate-secret`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RegenerateClientSecretResponseFromJSON(jsonValue));
    }

    /**
     * Regenerate the client secret for an OAuth client
     * Regenerate client secret
     */
    async regenerateClientSecret(requestParameters: RegenerateClientSecretRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RegenerateClientSecretResponse> {
        const response = await this.regenerateClientSecretRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Revoke an OAuth token
     * Revoke OAuth token
     */
    async revokeOAuthTokenRaw(requestParameters: RevokeOAuthTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling revokeOAuthToken().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling revokeOAuthToken().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/oauth/tokens/{id}/revoke`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Revoke an OAuth token
     * Revoke OAuth token
     */
    async revokeOAuthToken(requestParameters: RevokeOAuthTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.revokeOAuthTokenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an OAuth client
     * Update OAuth client
     */
    async updateOAuthClientRaw(requestParameters: UpdateOAuthClientOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OAuthClient>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling updateOAuthClient().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateOAuthClient().'
            );
        }

        if (requestParameters['updateOAuthClientRequest'] == null) {
            throw new runtime.RequiredError(
                'updateOAuthClientRequest',
                'Required parameter "updateOAuthClientRequest" was null or undefined when calling updateOAuthClient().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/oauth/clients/{id}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateOAuthClientRequestToJSON(requestParameters['updateOAuthClientRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OAuthClientFromJSON(jsonValue));
    }

    /**
     * Update an OAuth client
     * Update OAuth client
     */
    async updateOAuthClient(requestParameters: UpdateOAuthClientOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OAuthClient> {
        const response = await this.updateOAuthClientRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an OAuth scope
     * Update OAuth scope
     */
    async updateOAuthScopeRaw(requestParameters: UpdateOAuthScopeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OAuthScope>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling updateOAuthScope().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateOAuthScope().'
            );
        }

        if (requestParameters['updateOAuthScopeRequest'] == null) {
            throw new runtime.RequiredError(
                'updateOAuthScopeRequest',
                'Required parameter "updateOAuthScopeRequest" was null or undefined when calling updateOAuthScope().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/oauth/scopes/{id}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateOAuthScopeRequestToJSON(requestParameters['updateOAuthScopeRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OAuthScopeFromJSON(jsonValue));
    }

    /**
     * Update an OAuth scope
     * Update OAuth scope
     */
    async updateOAuthScope(requestParameters: UpdateOAuthScopeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OAuthScope> {
        const response = await this.updateOAuthScopeRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
