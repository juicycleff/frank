/* tslint:disable */
/* eslint-disable */
/**
 * My Project
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    EmptyOutputBody,
    EmptyOutputBodyFromJSON,
    EmptyOutputBodyToJSON,
    InlineResponse400,
    InlineResponse400FromJSON,
    InlineResponse400ToJSON,
    LoginResponse,
    LoginResponseFromJSON,
    LoginResponseToJSON,
} from '../models';

export interface OauthAuthorizeRequest {
    provider: string;
    state?: string;
    code?: string;
}

export interface OauthCallbackRequest {
    provider: string;
    state?: string;
    code?: string;
}

/**
 * OAuthApi - interface
 * 
 * @export
 * @interface OAuthApiInterface
 */
export interface OAuthApiInterface {
    /**
     * List available OAuth providers
     * @summary List OAuth providers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OAuthApiInterface
     */
    listOAuthProvidersRaw(): Promise<runtime.ApiResponse<EmptyOutputBody>>;

    /**
     * List available OAuth providers
     * List OAuth providers
     */
    listOAuthProviders(): Promise<EmptyOutputBody>;

    /**
     * Redirect to OAuth provider for authorization
     * @summary OAuth authorization
     * @param {string} provider OAuth provider name
     * @param {string} [state] OAuth provider state
     * @param {string} [code] OAuth provider code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OAuthApiInterface
     */
    oauthAuthorizeRaw(requestParameters: OauthAuthorizeRequest): Promise<runtime.ApiResponse<void>>;

    /**
     * Redirect to OAuth provider for authorization
     * OAuth authorization
     */
    oauthAuthorize(requestParameters: OauthAuthorizeRequest): Promise<void>;

    /**
     * Handle OAuth provider callback
     * @summary OAuth callback
     * @param {string} provider OAuth provider name
     * @param {string} [state] OAuth provider state
     * @param {string} [code] OAuth provider code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OAuthApiInterface
     */
    oauthCallbackRaw(requestParameters: OauthCallbackRequest): Promise<runtime.ApiResponse<LoginResponse>>;

    /**
     * Handle OAuth provider callback
     * OAuth callback
     */
    oauthCallback(requestParameters: OauthCallbackRequest): Promise<LoginResponse>;

    /**
     * Exchange OAuth authorization code for tokens
     * @summary OAuth token exchange
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OAuthApiInterface
     */
    oauthTokenRaw(): Promise<runtime.ApiResponse<EmptyOutputBody>>;

    /**
     * Exchange OAuth authorization code for tokens
     * OAuth token exchange
     */
    oauthToken(): Promise<EmptyOutputBody>;

    /**
     * Get user information from OAuth token
     * @summary OAuth user info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OAuthApiInterface
     */
    oauthUserInfoRaw(): Promise<runtime.ApiResponse<EmptyOutputBody>>;

    /**
     * Get user information from OAuth token
     * OAuth user info
     */
    oauthUserInfo(): Promise<EmptyOutputBody>;

}

/**
 * 
 */
export class OAuthApi extends runtime.BaseAPI implements OAuthApiInterface {

    /**
     * List available OAuth providers
     * List OAuth providers
     */
    async listOAuthProvidersRaw(): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/public/auth/oauth/providers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * List available OAuth providers
     * List OAuth providers
     */
    async listOAuthProviders(): Promise<EmptyOutputBody> {
        const response = await this.listOAuthProvidersRaw();
        return await response.value();
    }

    /**
     * Redirect to OAuth provider for authorization
     * OAuth authorization
     */
    async oauthAuthorizeRaw(requestParameters: OauthAuthorizeRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.provider === null || requestParameters.provider === undefined) {
            throw new runtime.RequiredError('provider','Required parameter requestParameters.provider was null or undefined when calling oauthAuthorize.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.state !== undefined) {
            queryParameters['state'] = requestParameters.state;
        }

        if (requestParameters.code !== undefined) {
            queryParameters['code'] = requestParameters.code;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/public/auth/oauth/{provider}/authorize`.replace(`{${"provider"}}`, encodeURIComponent(String(requestParameters.provider))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Redirect to OAuth provider for authorization
     * OAuth authorization
     */
    async oauthAuthorize(requestParameters: OauthAuthorizeRequest): Promise<void> {
        await this.oauthAuthorizeRaw(requestParameters);
    }

    /**
     * Handle OAuth provider callback
     * OAuth callback
     */
    async oauthCallbackRaw(requestParameters: OauthCallbackRequest): Promise<runtime.ApiResponse<LoginResponse>> {
        if (requestParameters.provider === null || requestParameters.provider === undefined) {
            throw new runtime.RequiredError('provider','Required parameter requestParameters.provider was null or undefined when calling oauthCallback.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.state !== undefined) {
            queryParameters['state'] = requestParameters.state;
        }

        if (requestParameters.code !== undefined) {
            queryParameters['code'] = requestParameters.code;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/public/auth/oauth/{provider}/callback`.replace(`{${"provider"}}`, encodeURIComponent(String(requestParameters.provider))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => LoginResponseFromJSON(jsonValue));
    }

    /**
     * Handle OAuth provider callback
     * OAuth callback
     */
    async oauthCallback(requestParameters: OauthCallbackRequest): Promise<LoginResponse> {
        const response = await this.oauthCallbackRaw(requestParameters);
        return await response.value();
    }

    /**
     * Exchange OAuth authorization code for tokens
     * OAuth token exchange
     */
    async oauthTokenRaw(): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/public/auth/oauth/token`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Exchange OAuth authorization code for tokens
     * OAuth token exchange
     */
    async oauthToken(): Promise<EmptyOutputBody> {
        const response = await this.oauthTokenRaw();
        return await response.value();
    }

    /**
     * Get user information from OAuth token
     * OAuth user info
     */
    async oauthUserInfoRaw(): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/public/auth/oauth/userinfo`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Get user information from OAuth token
     * OAuth user info
     */
    async oauthUserInfo(): Promise<EmptyOutputBody> {
        const response = await this.oauthUserInfoRaw();
        return await response.value();
    }

}
