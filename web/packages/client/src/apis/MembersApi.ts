/* tslint:disable */
/* eslint-disable */
/**
 * My Project
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    BulkMemberRoleUpdate,
    BulkMemberRoleUpdateFromJSON,
    BulkMemberRoleUpdateToJSON,
    BulkMembershipOperation,
    BulkMembershipOperationFromJSON,
    BulkMembershipOperationToJSON,
    BulkUpdateResponse,
    BulkUpdateResponseFromJSON,
    BulkUpdateResponseToJSON,
    EmptyOutputBody,
    EmptyOutputBodyFromJSON,
    EmptyOutputBodyToJSON,
    InlineResponse400,
    InlineResponse400FromJSON,
    InlineResponse400ToJSON,
    Membership,
    MembershipFromJSON,
    MembershipToJSON,
    PaginatedOutputMemberSummary,
    PaginatedOutputMemberSummaryFromJSON,
    PaginatedOutputMemberSummaryToJSON,
    RemoveMemberRequest,
    RemoveMemberRequestFromJSON,
    RemoveMemberRequestToJSON,
} from '../models';

export interface BulkMemberOperationsRequest {
    orgId: string;
    bulkMembershipOperation?: BulkMembershipOperation;
}

export interface GetMemberRequest {
    orgId: string;
    userId: string;
}

export interface ListMembersRequest {
    orgId: string;
    after?: string;
    before?: string;
    first?: number;
    last?: number;
    limit?: number;
    offset?: number;
    fields?: Array<string> | null;
    orderBy?: Array<string> | null;
    page?: number;
}

export interface RemoveMemberOperationRequest {
    orgId: string;
    userId: string;
    removeMemberRequest?: RemoveMemberRequest;
}

export interface UpdateMemberRoleRequest {
    orgId: string;
    userId: string;
    bulkMemberRoleUpdate?: BulkMemberRoleUpdate;
}

/**
 * MembersApi - interface
 * 
 * @export
 * @interface MembersApiInterface
 */
export interface MembersApiInterface {
    /**
     * Perform bulk operations on multiple members
     * @summary Bulk member operations
     * @param {string} orgId 
     * @param {BulkMembershipOperation} [bulkMembershipOperation] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembersApiInterface
     */
    bulkMemberOperationsRaw(requestParameters: BulkMemberOperationsRequest): Promise<runtime.ApiResponse<BulkUpdateResponse>>;

    /**
     * Perform bulk operations on multiple members
     * Bulk member operations
     */
    bulkMemberOperations(requestParameters: BulkMemberOperationsRequest): Promise<BulkUpdateResponse>;

    /**
     * Get member details by user ID
     * @summary Get member
     * @param {string} orgId 
     * @param {string} userId User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembersApiInterface
     */
    getMemberRaw(requestParameters: GetMemberRequest): Promise<runtime.ApiResponse<object>>;

    /**
     * Get member details by user ID
     * Get member
     */
    getMember(requestParameters: GetMemberRequest): Promise<object>;

    /**
     * List all members in an organization with pagination and filtering
     * @summary List members
     * @param {string} orgId 
     * @param {string} [after] 
     * @param {string} [before] 
     * @param {number} [first] 
     * @param {number} [last] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {Array<string>} [fields] 
     * @param {Array<string>} [orderBy] 
     * @param {number} [page] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembersApiInterface
     */
    listMembersRaw(requestParameters: ListMembersRequest): Promise<runtime.ApiResponse<PaginatedOutputMemberSummary>>;

    /**
     * List all members in an organization with pagination and filtering
     * List members
     */
    listMembers(requestParameters: ListMembersRequest): Promise<PaginatedOutputMemberSummary>;

    /**
     * Remove a member from the organization
     * @summary Remove member
     * @param {string} orgId 
     * @param {string} userId User ID
     * @param {RemoveMemberRequest} [removeMemberRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembersApiInterface
     */
    removeMemberRaw(requestParameters: RemoveMemberOperationRequest): Promise<runtime.ApiResponse<EmptyOutputBody>>;

    /**
     * Remove a member from the organization
     * Remove member
     */
    removeMember(requestParameters: RemoveMemberOperationRequest): Promise<EmptyOutputBody>;

    /**
     * Update a member\'s role within the organization
     * @summary Update member role
     * @param {string} orgId 
     * @param {string} userId User ID
     * @param {BulkMemberRoleUpdate} [bulkMemberRoleUpdate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembersApiInterface
     */
    updateMemberRoleRaw(requestParameters: UpdateMemberRoleRequest): Promise<runtime.ApiResponse<Membership>>;

    /**
     * Update a member\'s role within the organization
     * Update member role
     */
    updateMemberRole(requestParameters: UpdateMemberRoleRequest): Promise<Membership>;

}

/**
 * 
 */
export class MembersApi extends runtime.BaseAPI implements MembersApiInterface {

    /**
     * Perform bulk operations on multiple members
     * Bulk member operations
     */
    async bulkMemberOperationsRaw(requestParameters: BulkMemberOperationsRequest): Promise<runtime.ApiResponse<BulkUpdateResponse>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling bulkMemberOperations.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/members/bulk`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BulkMembershipOperationToJSON(requestParameters.bulkMembershipOperation),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => BulkUpdateResponseFromJSON(jsonValue));
    }

    /**
     * Perform bulk operations on multiple members
     * Bulk member operations
     */
    async bulkMemberOperations(requestParameters: BulkMemberOperationsRequest): Promise<BulkUpdateResponse> {
        const response = await this.bulkMemberOperationsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get member details by user ID
     * Get member
     */
    async getMemberRaw(requestParameters: GetMemberRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getMember.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling getMember.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/members/{userId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get member details by user ID
     * Get member
     */
    async getMember(requestParameters: GetMemberRequest): Promise<object> {
        const response = await this.getMemberRaw(requestParameters);
        return await response.value();
    }

    /**
     * List all members in an organization with pagination and filtering
     * List members
     */
    async listMembersRaw(requestParameters: ListMembersRequest): Promise<runtime.ApiResponse<PaginatedOutputMemberSummary>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling listMembers.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.after !== undefined) {
            queryParameters['after'] = requestParameters.after;
        }

        if (requestParameters.before !== undefined) {
            queryParameters['before'] = requestParameters.before;
        }

        if (requestParameters.first !== undefined) {
            queryParameters['first'] = requestParameters.first;
        }

        if (requestParameters.last !== undefined) {
            queryParameters['last'] = requestParameters.last;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.fields) {
            queryParameters['fields'] = requestParameters.fields;
        }

        if (requestParameters.orderBy) {
            queryParameters['orderBy'] = requestParameters.orderBy;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/members`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedOutputMemberSummaryFromJSON(jsonValue));
    }

    /**
     * List all members in an organization with pagination and filtering
     * List members
     */
    async listMembers(requestParameters: ListMembersRequest): Promise<PaginatedOutputMemberSummary> {
        const response = await this.listMembersRaw(requestParameters);
        return await response.value();
    }

    /**
     * Remove a member from the organization
     * Remove member
     */
    async removeMemberRaw(requestParameters: RemoveMemberOperationRequest): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling removeMember.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling removeMember.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/members/{userId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: RemoveMemberRequestToJSON(requestParameters.removeMemberRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Remove a member from the organization
     * Remove member
     */
    async removeMember(requestParameters: RemoveMemberOperationRequest): Promise<EmptyOutputBody> {
        const response = await this.removeMemberRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update a member\'s role within the organization
     * Update member role
     */
    async updateMemberRoleRaw(requestParameters: UpdateMemberRoleRequest): Promise<runtime.ApiResponse<Membership>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling updateMemberRole.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling updateMemberRole.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/members/{userId}/role`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: BulkMemberRoleUpdateToJSON(requestParameters.bulkMemberRoleUpdate),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MembershipFromJSON(jsonValue));
    }

    /**
     * Update a member\'s role within the organization
     * Update member role
     */
    async updateMemberRole(requestParameters: UpdateMemberRoleRequest): Promise<Membership> {
        const response = await this.updateMemberRoleRaw(requestParameters);
        return await response.value();
    }

}
