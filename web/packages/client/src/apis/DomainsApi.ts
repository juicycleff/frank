/* tslint:disable */
/* eslint-disable */
/**
 * My Project
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    DomainVerificationRequest,
    DomainVerificationRequestFromJSON,
    DomainVerificationRequestToJSON,
    DomainVerificationResponse,
    DomainVerificationResponseFromJSON,
    DomainVerificationResponseToJSON,
    EmptyOutputBody,
    EmptyOutputBodyFromJSON,
    EmptyOutputBodyToJSON,
    InlineResponse400,
    InlineResponse400FromJSON,
    InlineResponse400ToJSON,
} from '../models';

export interface AddOrganizationDomainRequest {
    id: string;
    domainVerificationRequest?: DomainVerificationRequest;
}

export interface ListOrganizationDomainsRequest {
    id: string;
}

export interface RemoveOrganizationDomainRequest {
    id: string;
    domain: string;
}

export interface VerifyOrganizationDomainRequest {
    id: string;
    domain: string;
}

/**
 * DomainsApi - interface
 * 
 * @export
 * @interface DomainsApiInterface
 */
export interface DomainsApiInterface {
    /**
     * Add a new domain to the organization
     * @summary Add organization domain
     * @param {string} id Organization ID
     * @param {DomainVerificationRequest} [domainVerificationRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainsApiInterface
     */
    addOrganizationDomainRaw(requestParameters: AddOrganizationDomainRequest): Promise<runtime.ApiResponse<EmptyOutputBody>>;

    /**
     * Add a new domain to the organization
     * Add organization domain
     */
    addOrganizationDomain(requestParameters: AddOrganizationDomainRequest): Promise<EmptyOutputBody>;

    /**
     * List all domains associated with the organization
     * @summary List organization domains
     * @param {string} id Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainsApiInterface
     */
    listOrganizationDomainsRaw(requestParameters: ListOrganizationDomainsRequest): Promise<runtime.ApiResponse<EmptyOutputBody>>;

    /**
     * List all domains associated with the organization
     * List organization domains
     */
    listOrganizationDomains(requestParameters: ListOrganizationDomainsRequest): Promise<EmptyOutputBody>;

    /**
     * Remove a domain from the organization
     * @summary Remove organization domain
     * @param {string} id Organization ID
     * @param {string} domain Domain name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainsApiInterface
     */
    removeOrganizationDomainRaw(requestParameters: RemoveOrganizationDomainRequest): Promise<runtime.ApiResponse<EmptyOutputBody>>;

    /**
     * Remove a domain from the organization
     * Remove organization domain
     */
    removeOrganizationDomain(requestParameters: RemoveOrganizationDomainRequest): Promise<EmptyOutputBody>;

    /**
     * Verify domain ownership via DNS records
     * @summary Verify organization domain
     * @param {string} id Organization ID
     * @param {string} domain Domain name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainsApiInterface
     */
    verifyOrganizationDomainRaw(requestParameters: VerifyOrganizationDomainRequest): Promise<runtime.ApiResponse<DomainVerificationResponse>>;

    /**
     * Verify domain ownership via DNS records
     * Verify organization domain
     */
    verifyOrganizationDomain(requestParameters: VerifyOrganizationDomainRequest): Promise<DomainVerificationResponse>;

}

/**
 * 
 */
export class DomainsApi extends runtime.BaseAPI implements DomainsApiInterface {

    /**
     * Add a new domain to the organization
     * Add organization domain
     */
    async addOrganizationDomainRaw(requestParameters: AddOrganizationDomainRequest): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling addOrganizationDomain.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{id}/domains`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DomainVerificationRequestToJSON(requestParameters.domainVerificationRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Add a new domain to the organization
     * Add organization domain
     */
    async addOrganizationDomain(requestParameters: AddOrganizationDomainRequest): Promise<EmptyOutputBody> {
        const response = await this.addOrganizationDomainRaw(requestParameters);
        return await response.value();
    }

    /**
     * List all domains associated with the organization
     * List organization domains
     */
    async listOrganizationDomainsRaw(requestParameters: ListOrganizationDomainsRequest): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling listOrganizationDomains.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{id}/domains`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * List all domains associated with the organization
     * List organization domains
     */
    async listOrganizationDomains(requestParameters: ListOrganizationDomainsRequest): Promise<EmptyOutputBody> {
        const response = await this.listOrganizationDomainsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Remove a domain from the organization
     * Remove organization domain
     */
    async removeOrganizationDomainRaw(requestParameters: RemoveOrganizationDomainRequest): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling removeOrganizationDomain.');
        }

        if (requestParameters.domain === null || requestParameters.domain === undefined) {
            throw new runtime.RequiredError('domain','Required parameter requestParameters.domain was null or undefined when calling removeOrganizationDomain.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{id}/domains/{domain}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"domain"}}`, encodeURIComponent(String(requestParameters.domain))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Remove a domain from the organization
     * Remove organization domain
     */
    async removeOrganizationDomain(requestParameters: RemoveOrganizationDomainRequest): Promise<EmptyOutputBody> {
        const response = await this.removeOrganizationDomainRaw(requestParameters);
        return await response.value();
    }

    /**
     * Verify domain ownership via DNS records
     * Verify organization domain
     */
    async verifyOrganizationDomainRaw(requestParameters: VerifyOrganizationDomainRequest): Promise<runtime.ApiResponse<DomainVerificationResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling verifyOrganizationDomain.');
        }

        if (requestParameters.domain === null || requestParameters.domain === undefined) {
            throw new runtime.RequiredError('domain','Required parameter requestParameters.domain was null or undefined when calling verifyOrganizationDomain.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{id}/domains/{domain}/verify`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"domain"}}`, encodeURIComponent(String(requestParameters.domain))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainVerificationResponseFromJSON(jsonValue));
    }

    /**
     * Verify domain ownership via DNS records
     * Verify organization domain
     */
    async verifyOrganizationDomain(requestParameters: VerifyOrganizationDomainRequest): Promise<DomainVerificationResponse> {
        const response = await this.verifyOrganizationDomainRaw(requestParameters);
        return await response.value();
    }

}
