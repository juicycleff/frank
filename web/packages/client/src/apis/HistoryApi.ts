/* tslint:disable */
/* eslint-disable */
/**
 * My Project
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    InlineResponse400,
    InlineResponse400FromJSON,
    InlineResponse400ToJSON,
    PaginatedOutputMembershipChangeLog,
    PaginatedOutputMembershipChangeLogFromJSON,
    PaginatedOutputMembershipChangeLogToJSON,
} from '../models';

export interface GetMembershipHistoryRequest {
    orgId: string;
    id: string;
    after?: string;
    before?: string;
    first?: number;
    last?: number;
    limit?: number;
    offset?: number;
    fields?: Array<string> | null;
    orderBy?: Array<string> | null;
    page?: number;
    membershipId?: string;
    userId?: string;
    organizationId?: string;
    changeType?: string;
    changedBy?: string;
    startDate?: Date;
    endDate?: Date;
}

/**
 * HistoryApi - interface
 * 
 * @export
 * @interface HistoryApiInterface
 */
export interface HistoryApiInterface {
    /**
     * Get change history for a membership
     * @summary Get membership history
     * @param {string} orgId 
     * @param {string} id Membership ID
     * @param {string} [after] 
     * @param {string} [before] 
     * @param {number} [first] 
     * @param {number} [last] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {Array<string>} [fields] 
     * @param {Array<string>} [orderBy] 
     * @param {number} [page] 
     * @param {string} [membershipId] 
     * @param {string} [userId] 
     * @param {string} [organizationId] 
     * @param {string} [changeType] 
     * @param {string} [changedBy] 
     * @param {Date} [startDate] 
     * @param {Date} [endDate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HistoryApiInterface
     */
    getMembershipHistoryRaw(requestParameters: GetMembershipHistoryRequest): Promise<runtime.ApiResponse<PaginatedOutputMembershipChangeLog>>;

    /**
     * Get change history for a membership
     * Get membership history
     */
    getMembershipHistory(requestParameters: GetMembershipHistoryRequest): Promise<PaginatedOutputMembershipChangeLog>;

}

/**
 * 
 */
export class HistoryApi extends runtime.BaseAPI implements HistoryApiInterface {

    /**
     * Get change history for a membership
     * Get membership history
     */
    async getMembershipHistoryRaw(requestParameters: GetMembershipHistoryRequest): Promise<runtime.ApiResponse<PaginatedOutputMembershipChangeLog>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getMembershipHistory.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getMembershipHistory.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.after !== undefined) {
            queryParameters['after'] = requestParameters.after;
        }

        if (requestParameters.before !== undefined) {
            queryParameters['before'] = requestParameters.before;
        }

        if (requestParameters.first !== undefined) {
            queryParameters['first'] = requestParameters.first;
        }

        if (requestParameters.last !== undefined) {
            queryParameters['last'] = requestParameters.last;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.fields) {
            queryParameters['fields'] = requestParameters.fields;
        }

        if (requestParameters.orderBy) {
            queryParameters['orderBy'] = requestParameters.orderBy;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.membershipId !== undefined) {
            queryParameters['membershipId'] = requestParameters.membershipId;
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        if (requestParameters.organizationId !== undefined) {
            queryParameters['organizationId'] = requestParameters.organizationId;
        }

        if (requestParameters.changeType !== undefined) {
            queryParameters['changeType'] = requestParameters.changeType;
        }

        if (requestParameters.changedBy !== undefined) {
            queryParameters['changedBy'] = requestParameters.changedBy;
        }

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = (requestParameters.startDate as any).toISOString();
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = (requestParameters.endDate as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/memberships/{id}/history`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedOutputMembershipChangeLogFromJSON(jsonValue));
    }

    /**
     * Get change history for a membership
     * Get membership history
     */
    async getMembershipHistory(requestParameters: GetMembershipHistoryRequest): Promise<PaginatedOutputMembershipChangeLog> {
        const response = await this.getMembershipHistoryRaw(requestParameters);
        return await response.value();
    }

}
