/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AssignPermissionToRoleRequest,
  AssignRoleToUserRequest,
  BulkRoleAssignmentRequest,
  BulkRoleAssignmentResponse,
  CheckPermissionRequest,
  CheckPermissionResponse,
  CreatePermissionRequest,
  CreateRoleRequest,
  EmptyOutputBody,
  GetGlobalActivityStats400Response,
  PaginatedOutputPermission,
  PaginatedOutputRole,
  Permission,
  PermissionStats,
  RBACStats,
  RemoveRoleInput,
  Role,
  RoleHierarchy,
  RoleStats,
  RoleType,
  SetRoleParentInputBody,
  SyncRolePermissionsRequest,
  UpdatePermissionRequest,
  UpdateRoleRequest,
  UserPermissionsResponse,
  UserRolesResponse,
} from '../models/index';
import {
    AssignPermissionToRoleRequestFromJSON,
    AssignPermissionToRoleRequestToJSON,
    AssignRoleToUserRequestFromJSON,
    AssignRoleToUserRequestToJSON,
    BulkRoleAssignmentRequestFromJSON,
    BulkRoleAssignmentRequestToJSON,
    BulkRoleAssignmentResponseFromJSON,
    BulkRoleAssignmentResponseToJSON,
    CheckPermissionRequestFromJSON,
    CheckPermissionRequestToJSON,
    CheckPermissionResponseFromJSON,
    CheckPermissionResponseToJSON,
    CreatePermissionRequestFromJSON,
    CreatePermissionRequestToJSON,
    CreateRoleRequestFromJSON,
    CreateRoleRequestToJSON,
    EmptyOutputBodyFromJSON,
    EmptyOutputBodyToJSON,
    GetGlobalActivityStats400ResponseFromJSON,
    GetGlobalActivityStats400ResponseToJSON,
    PaginatedOutputPermissionFromJSON,
    PaginatedOutputPermissionToJSON,
    PaginatedOutputRoleFromJSON,
    PaginatedOutputRoleToJSON,
    PermissionFromJSON,
    PermissionToJSON,
    PermissionStatsFromJSON,
    PermissionStatsToJSON,
    RBACStatsFromJSON,
    RBACStatsToJSON,
    RemoveRoleInputFromJSON,
    RemoveRoleInputToJSON,
    RoleFromJSON,
    RoleToJSON,
    RoleHierarchyFromJSON,
    RoleHierarchyToJSON,
    RoleStatsFromJSON,
    RoleStatsToJSON,
    RoleTypeFromJSON,
    RoleTypeToJSON,
    SetRoleParentInputBodyFromJSON,
    SetRoleParentInputBodyToJSON,
    SyncRolePermissionsRequestFromJSON,
    SyncRolePermissionsRequestToJSON,
    UpdatePermissionRequestFromJSON,
    UpdatePermissionRequestToJSON,
    UpdateRoleRequestFromJSON,
    UpdateRoleRequestToJSON,
    UserPermissionsResponseFromJSON,
    UserPermissionsResponseToJSON,
    UserRolesResponseFromJSON,
    UserRolesResponseToJSON,
} from '../models/index';

export interface AddRolePermissionRequest {
    orgId: string;
    id: string;
    assignPermissionToRoleRequest: Omit<AssignPermissionToRoleRequest, '$schema'>;
}

export interface AssignUserRoleAdvanceRequest {
    orgId: string;
    assignRoleToUserRequest: Omit<AssignRoleToUserRequest, '$schema'>;
}

export interface BulkAssignRolesRequest {
    orgId: string;
    bulkRoleAssignmentRequest: Omit<BulkRoleAssignmentRequest, '$schema'>;
}

export interface CheckUserPermissionRequest {
    orgId: string;
    checkPermissionRequest: Omit<CheckPermissionRequest, '$schema'>;
}

export interface CreatePermissionOperationRequest {
    orgId: string;
    createPermissionRequest: Omit<CreatePermissionRequest, '$schema'>;
}

export interface CreateRoleOperationRequest {
    orgId: string;
    createRoleRequest: Omit<CreateRoleRequest, '$schema'>;
}

export interface DeletePermissionRequest {
    orgId: string;
    id: string;
}

export interface DeleteRoleRequest {
    orgId: string;
    id: string;
}

export interface GetDefaultRolesRequest {
    orgId: string;
    roleType?: RoleType;
    applicationId?: string;
}

export interface GetPermissionRequest {
    orgId: string;
    id: string;
    includeRoles?: boolean;
}

export interface GetPermissionByResourceRequest {
    orgId: string;
    resource: string;
    after?: string;
    before?: string;
    first?: number;
    last?: number;
    limit?: number;
    offset?: number;
    fields?: Array<string> | null;
    orderBy?: Array<string> | null;
    page?: number;
    action?: string;
}

export interface GetPermissionStatsRequest {
    orgId: string;
}

export interface GetRBACStatsRequest {
    orgId: string;
}

export interface GetRoleRequest {
    orgId: string;
    id: string;
    includeParent?: boolean;
    includeChildren?: boolean;
    includePermissions?: boolean;
}

export interface GetRoleHierarchyRequest {
    orgId: string;
    id: string;
}

export interface GetRoleStatsRequest {
    orgId: string;
    limit?: number;
}

export interface GetUserPermissionsRequest {
    orgId: string;
    userId: string;
}

export interface GetUserRolesRequest {
    orgId: string;
    userId: string;
    contextType?: string;
    includePermissions?: boolean;
}

export interface ListPermissionsRequest {
    orgId: string;
    after?: string;
    before?: string;
    first?: number;
    last?: number;
    limit?: number;
    offset?: number;
    fields?: Array<string> | null;
    orderBy?: Array<string> | null;
    page?: number;
}

export interface ListRolePermissionsRequest {
    orgId: string;
    id: string;
    after?: string;
    before?: string;
    first?: number;
    last?: number;
    limit?: number;
    offset?: number;
    fields?: Array<string> | null;
    orderBy?: Array<string> | null;
    page?: number;
    effective?: boolean;
    category?: string;
    resource?: string;
    dangerous?: boolean;
}

export interface ListRolesRequest {
    orgId: string;
    after?: string;
    before?: string;
    first?: number;
    last?: number;
    limit?: number;
    offset?: number;
    fields?: Array<string> | null;
    orderBy?: Array<string> | null;
    page?: number;
}

export interface RemoveRoleParentRequest {
    orgId: string;
    id: string;
}

export interface RemoveRolePermissionRequest {
    orgId: string;
    id: string;
    permissionId: string;
}

export interface RemoveUserRoleAdvanceRequest {
    orgId: string;
    removeRoleInput: Omit<RemoveRoleInput, '$schema'>;
}

export interface SearchPermissionsRequest {
    orgId: string;
    after?: string;
    before?: string;
    first?: number;
    last?: number;
    limit?: number;
    offset?: number;
    fields?: Array<string> | null;
    orderBy?: Array<string> | null;
    page?: number;
    q?: string;
}

export interface SetDefaultRoleRequest {
    orgId: string;
    id: string;
}

export interface SetRoleParentRequest {
    orgId: string;
    id: string;
    setRoleParentInputBody: Omit<SetRoleParentInputBody, '$schema'>;
}

export interface SyncRolePermissionsOperationRequest {
    orgId: string;
    id: string;
    syncRolePermissionsRequest: Omit<SyncRolePermissionsRequest, '$schema'>;
}

export interface UnsetDefaultRoleRequest {
    orgId: string;
    id: string;
}

export interface UpdatePermissionOperationRequest {
    orgId: string;
    id: string;
    updatePermissionRequest: Omit<UpdatePermissionRequest, '$schema'>;
}

export interface UpdateRoleOperationRequest {
    orgId: string;
    id: string;
    updateRoleRequest: Omit<UpdateRoleRequest, '$schema'>;
}

/**
 * 
 */
export class RBACApi extends runtime.BaseAPI {

    /**
     * Add a permission to a role
     * Add permission to role
     */
    async addRolePermissionRaw(requestParameters: AddRolePermissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling addRolePermission().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling addRolePermission().'
            );
        }

        if (requestParameters['assignPermissionToRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'assignPermissionToRoleRequest',
                'Required parameter "assignPermissionToRoleRequest" was null or undefined when calling addRolePermission().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/roles/{id}/permissions`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AssignPermissionToRoleRequestToJSON(requestParameters['assignPermissionToRoleRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Add a permission to a role
     * Add permission to role
     */
    async addRolePermission(requestParameters: AddRolePermissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmptyOutputBody> {
        const response = await this.addRolePermissionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Assign a role to a user in a specific context
     * Assign role to user
     */
    async assignUserRoleAdvanceRaw(requestParameters: AssignUserRoleAdvanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling assignUserRoleAdvance().'
            );
        }

        if (requestParameters['assignRoleToUserRequest'] == null) {
            throw new runtime.RequiredError(
                'assignRoleToUserRequest',
                'Required parameter "assignRoleToUserRequest" was null or undefined when calling assignUserRoleAdvance().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/users/roles/assign`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AssignRoleToUserRequestToJSON(requestParameters['assignRoleToUserRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Assign a role to a user in a specific context
     * Assign role to user
     */
    async assignUserRoleAdvance(requestParameters: AssignUserRoleAdvanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmptyOutputBody> {
        const response = await this.assignUserRoleAdvanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Assign roles to multiple users at once
     * Bulk assign roles
     */
    async bulkAssignRolesRaw(requestParameters: BulkAssignRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BulkRoleAssignmentResponse>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling bulkAssignRoles().'
            );
        }

        if (requestParameters['bulkRoleAssignmentRequest'] == null) {
            throw new runtime.RequiredError(
                'bulkRoleAssignmentRequest',
                'Required parameter "bulkRoleAssignmentRequest" was null or undefined when calling bulkAssignRoles().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/users/roles/bulk-assign`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BulkRoleAssignmentRequestToJSON(requestParameters['bulkRoleAssignmentRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BulkRoleAssignmentResponseFromJSON(jsonValue));
    }

    /**
     * Assign roles to multiple users at once
     * Bulk assign roles
     */
    async bulkAssignRoles(requestParameters: BulkAssignRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BulkRoleAssignmentResponse> {
        const response = await this.bulkAssignRolesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Check if a user has a specific permission
     * Check user permission
     */
    async checkUserPermissionRaw(requestParameters: CheckUserPermissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CheckPermissionResponse>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling checkUserPermission().'
            );
        }

        if (requestParameters['checkPermissionRequest'] == null) {
            throw new runtime.RequiredError(
                'checkPermissionRequest',
                'Required parameter "checkPermissionRequest" was null or undefined when calling checkUserPermission().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/users/permissions/check`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CheckPermissionRequestToJSON(requestParameters['checkPermissionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckPermissionResponseFromJSON(jsonValue));
    }

    /**
     * Check if a user has a specific permission
     * Check user permission
     */
    async checkUserPermission(requestParameters: CheckUserPermissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CheckPermissionResponse> {
        const response = await this.checkUserPermissionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new permission with the specified configuration
     * Create a new permission
     */
    async createPermissionRaw(requestParameters: CreatePermissionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Permission>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling createPermission().'
            );
        }

        if (requestParameters['createPermissionRequest'] == null) {
            throw new runtime.RequiredError(
                'createPermissionRequest',
                'Required parameter "createPermissionRequest" was null or undefined when calling createPermission().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/permissions`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreatePermissionRequestToJSON(requestParameters['createPermissionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PermissionFromJSON(jsonValue));
    }

    /**
     * Create a new permission with the specified configuration
     * Create a new permission
     */
    async createPermission(requestParameters: CreatePermissionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Permission> {
        const response = await this.createPermissionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new role with the specified configuration
     * Create a new role
     */
    async createRoleRaw(requestParameters: CreateRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Role>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling createRole().'
            );
        }

        if (requestParameters['createRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'createRoleRequest',
                'Required parameter "createRoleRequest" was null or undefined when calling createRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/roles`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateRoleRequestToJSON(requestParameters['createRoleRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoleFromJSON(jsonValue));
    }

    /**
     * Create a new role with the specified configuration
     * Create a new role
     */
    async createRole(requestParameters: CreateRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Role> {
        const response = await this.createRoleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a permission by ID
     * Delete a permission
     */
    async deletePermissionRaw(requestParameters: DeletePermissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling deletePermission().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deletePermission().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/permissions/{id}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Delete a permission by ID
     * Delete a permission
     */
    async deletePermission(requestParameters: DeletePermissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmptyOutputBody> {
        const response = await this.deletePermissionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a role by ID
     * Delete a role
     */
    async deleteRoleRaw(requestParameters: DeleteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling deleteRole().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/roles/{id}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Delete a role by ID
     * Delete a role
     */
    async deleteRole(requestParameters: DeleteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmptyOutputBody> {
        const response = await this.deleteRoleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all default roles for the organization
     * Get default roles
     */
    async getDefaultRolesRaw(requestParameters: GetDefaultRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Role>>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling getDefaultRoles().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['roleType'] != null) {
            queryParameters['roleType'] = requestParameters['roleType'];
        }

        if (requestParameters['applicationId'] != null) {
            queryParameters['applicationId'] = requestParameters['applicationId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/roles/default`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RoleFromJSON));
    }

    /**
     * Get all default roles for the organization
     * Get default roles
     */
    async getDefaultRoles(requestParameters: GetDefaultRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Role>> {
        const response = await this.getDefaultRolesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a permission by ID
     * Get a permission
     */
    async getPermissionRaw(requestParameters: GetPermissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Permission>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling getPermission().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getPermission().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['includeRoles'] != null) {
            queryParameters['includeRoles'] = requestParameters['includeRoles'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/permissions/{id}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PermissionFromJSON(jsonValue));
    }

    /**
     * Get a permission by ID
     * Get a permission
     */
    async getPermission(requestParameters: GetPermissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Permission> {
        const response = await this.getPermissionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get permissions for a specific resource
     * Get permissions by resource
     */
    async getPermissionByResourceRaw(requestParameters: GetPermissionByResourceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedOutputPermission>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling getPermissionByResource().'
            );
        }

        if (requestParameters['resource'] == null) {
            throw new runtime.RequiredError(
                'resource',
                'Required parameter "resource" was null or undefined when calling getPermissionByResource().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['after'] != null) {
            queryParameters['after'] = requestParameters['after'];
        }

        if (requestParameters['before'] != null) {
            queryParameters['before'] = requestParameters['before'];
        }

        if (requestParameters['first'] != null) {
            queryParameters['first'] = requestParameters['first'];
        }

        if (requestParameters['last'] != null) {
            queryParameters['last'] = requestParameters['last'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['orderBy'] = requestParameters['orderBy']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['action'] != null) {
            queryParameters['action'] = requestParameters['action'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/permissions/resource/{resource}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"resource"}}`, encodeURIComponent(String(requestParameters['resource']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedOutputPermissionFromJSON(jsonValue));
    }

    /**
     * Get permissions for a specific resource
     * Get permissions by resource
     */
    async getPermissionByResource(requestParameters: GetPermissionByResourceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedOutputPermission> {
        const response = await this.getPermissionByResourceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get detailed permission usage statistics
     * Get permission statistics
     */
    async getPermissionStatsRaw(requestParameters: GetPermissionStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PermissionStats>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling getPermissionStats().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/permissions/stats`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PermissionStatsFromJSON(jsonValue));
    }

    /**
     * Get detailed permission usage statistics
     * Get permission statistics
     */
    async getPermissionStats(requestParameters: GetPermissionStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PermissionStats> {
        const response = await this.getPermissionStatsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get comprehensive RBAC statistics for the organization
     * Get RBAC statistics
     */
    async getRBACStatsRaw(requestParameters: GetRBACStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RBACStats>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling getRBACStats().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/rbac/stats`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RBACStatsFromJSON(jsonValue));
    }

    /**
     * Get comprehensive RBAC statistics for the organization
     * Get RBAC statistics
     */
    async getRBACStats(requestParameters: GetRBACStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RBACStats> {
        const response = await this.getRBACStatsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a role by ID with optional relationship data
     * Get a role
     */
    async getRoleRaw(requestParameters: GetRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Role>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling getRole().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getRole().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['includeParent'] != null) {
            queryParameters['includeParent'] = requestParameters['includeParent'];
        }

        if (requestParameters['includeChildren'] != null) {
            queryParameters['includeChildren'] = requestParameters['includeChildren'];
        }

        if (requestParameters['includePermissions'] != null) {
            queryParameters['includePermissions'] = requestParameters['includePermissions'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/roles/{id}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoleFromJSON(jsonValue));
    }

    /**
     * Get a role by ID with optional relationship data
     * Get a role
     */
    async getRole(requestParameters: GetRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Role> {
        const response = await this.getRoleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get role hierarchy information including ancestors and descendants
     * Get role hierarchy
     */
    async getRoleHierarchyRaw(requestParameters: GetRoleHierarchyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoleHierarchy>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling getRoleHierarchy().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getRoleHierarchy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/roles/{id}/hierarchy`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoleHierarchyFromJSON(jsonValue));
    }

    /**
     * Get role hierarchy information including ancestors and descendants
     * Get role hierarchy
     */
    async getRoleHierarchy(requestParameters: GetRoleHierarchyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoleHierarchy> {
        const response = await this.getRoleHierarchyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get detailed role usage statistics
     * Get role statistics
     */
    async getRoleStatsRaw(requestParameters: GetRoleStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoleStats>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling getRoleStats().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/roles/stats`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoleStatsFromJSON(jsonValue));
    }

    /**
     * Get detailed role usage statistics
     * Get role statistics
     */
    async getRoleStats(requestParameters: GetRoleStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoleStats> {
        const response = await this.getRoleStatsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all effective permissions for a user
     * Get user permissions
     */
    async getUserPermissionsRaw(requestParameters: GetUserPermissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserPermissionsResponse>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling getUserPermissions().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getUserPermissions().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/users/{userId}/permissions`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserPermissionsResponseFromJSON(jsonValue));
    }

    /**
     * Get all effective permissions for a user
     * Get user permissions
     */
    async getUserPermissions(requestParameters: GetUserPermissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserPermissionsResponse> {
        const response = await this.getUserPermissionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all roles assigned to a user
     * Get user roles
     */
    async getUserRolesRaw(requestParameters: GetUserRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserRolesResponse>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling getUserRoles().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getUserRoles().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['contextType'] != null) {
            queryParameters['contextType'] = requestParameters['contextType'];
        }

        if (requestParameters['includePermissions'] != null) {
            queryParameters['includePermissions'] = requestParameters['includePermissions'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/users/{userId}/roles`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserRolesResponseFromJSON(jsonValue));
    }

    /**
     * Get all roles assigned to a user
     * Get user roles
     */
    async getUserRoles(requestParameters: GetUserRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserRolesResponse> {
        const response = await this.getUserRolesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all permissions with pagination and filtering options
     * List permissions
     */
    async listPermissionsRaw(requestParameters: ListPermissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedOutputPermission>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling listPermissions().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['after'] != null) {
            queryParameters['after'] = requestParameters['after'];
        }

        if (requestParameters['before'] != null) {
            queryParameters['before'] = requestParameters['before'];
        }

        if (requestParameters['first'] != null) {
            queryParameters['first'] = requestParameters['first'];
        }

        if (requestParameters['last'] != null) {
            queryParameters['last'] = requestParameters['last'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['orderBy'] = requestParameters['orderBy']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/permissions`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedOutputPermissionFromJSON(jsonValue));
    }

    /**
     * List all permissions with pagination and filtering options
     * List permissions
     */
    async listPermissions(requestParameters: ListPermissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedOutputPermission> {
        const response = await this.listPermissionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all permissions assigned to a role
     * List role permissions
     */
    async listRolePermissionsRaw(requestParameters: ListRolePermissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedOutputPermission>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling listRolePermissions().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling listRolePermissions().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['after'] != null) {
            queryParameters['after'] = requestParameters['after'];
        }

        if (requestParameters['before'] != null) {
            queryParameters['before'] = requestParameters['before'];
        }

        if (requestParameters['first'] != null) {
            queryParameters['first'] = requestParameters['first'];
        }

        if (requestParameters['last'] != null) {
            queryParameters['last'] = requestParameters['last'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['orderBy'] = requestParameters['orderBy']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['effective'] != null) {
            queryParameters['effective'] = requestParameters['effective'];
        }

        if (requestParameters['category'] != null) {
            queryParameters['category'] = requestParameters['category'];
        }

        if (requestParameters['resource'] != null) {
            queryParameters['resource'] = requestParameters['resource'];
        }

        if (requestParameters['dangerous'] != null) {
            queryParameters['dangerous'] = requestParameters['dangerous'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/roles/{id}/permissions`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedOutputPermissionFromJSON(jsonValue));
    }

    /**
     * List all permissions assigned to a role
     * List role permissions
     */
    async listRolePermissions(requestParameters: ListRolePermissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedOutputPermission> {
        const response = await this.listRolePermissionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all roles for an organization with pagination and filtering options
     * List roles
     */
    async listRolesRaw(requestParameters: ListRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedOutputRole>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling listRoles().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['after'] != null) {
            queryParameters['after'] = requestParameters['after'];
        }

        if (requestParameters['before'] != null) {
            queryParameters['before'] = requestParameters['before'];
        }

        if (requestParameters['first'] != null) {
            queryParameters['first'] = requestParameters['first'];
        }

        if (requestParameters['last'] != null) {
            queryParameters['last'] = requestParameters['last'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['orderBy'] = requestParameters['orderBy']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/roles`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedOutputRoleFromJSON(jsonValue));
    }

    /**
     * List all roles for an organization with pagination and filtering options
     * List roles
     */
    async listRoles(requestParameters: ListRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedOutputRole> {
        const response = await this.listRolesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove parent role from hierarchy
     * Remove role parent
     */
    async removeRoleParentRaw(requestParameters: RemoveRoleParentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling removeRoleParent().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling removeRoleParent().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/roles/{id}/parent`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Remove parent role from hierarchy
     * Remove role parent
     */
    async removeRoleParent(requestParameters: RemoveRoleParentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmptyOutputBody> {
        const response = await this.removeRoleParentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove a permission from a role
     * Remove permission from role
     */
    async removeRolePermissionRaw(requestParameters: RemoveRolePermissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling removeRolePermission().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling removeRolePermission().'
            );
        }

        if (requestParameters['permissionId'] == null) {
            throw new runtime.RequiredError(
                'permissionId',
                'Required parameter "permissionId" was null or undefined when calling removeRolePermission().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/roles/{id}/permissions/{permissionId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"permissionId"}}`, encodeURIComponent(String(requestParameters['permissionId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Remove a permission from a role
     * Remove permission from role
     */
    async removeRolePermission(requestParameters: RemoveRolePermissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmptyOutputBody> {
        const response = await this.removeRolePermissionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove a role assignment from a user
     * Remove role from user
     */
    async removeUserRoleAdvanceRaw(requestParameters: RemoveUserRoleAdvanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling removeUserRoleAdvance().'
            );
        }

        if (requestParameters['removeRoleInput'] == null) {
            throw new runtime.RequiredError(
                'removeRoleInput',
                'Required parameter "removeRoleInput" was null or undefined when calling removeUserRoleAdvance().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/users/roles/remove`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: RemoveRoleInputToJSON(requestParameters['removeRoleInput']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Remove a role assignment from a user
     * Remove role from user
     */
    async removeUserRoleAdvance(requestParameters: RemoveUserRoleAdvanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmptyOutputBody> {
        const response = await this.removeUserRoleAdvanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search permissions by query with advanced filtering
     * Search permissions
     */
    async searchPermissionsRaw(requestParameters: SearchPermissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedOutputPermission>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling searchPermissions().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['after'] != null) {
            queryParameters['after'] = requestParameters['after'];
        }

        if (requestParameters['before'] != null) {
            queryParameters['before'] = requestParameters['before'];
        }

        if (requestParameters['first'] != null) {
            queryParameters['first'] = requestParameters['first'];
        }

        if (requestParameters['last'] != null) {
            queryParameters['last'] = requestParameters['last'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['orderBy'] = requestParameters['orderBy']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['q'] != null) {
            queryParameters['q'] = requestParameters['q'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/permissions/search`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedOutputPermissionFromJSON(jsonValue));
    }

    /**
     * Search permissions by query with advanced filtering
     * Search permissions
     */
    async searchPermissions(requestParameters: SearchPermissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedOutputPermission> {
        const response = await this.searchPermissionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Set a role as default for new users
     * Set role as default
     */
    async setDefaultRoleRaw(requestParameters: SetDefaultRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling setDefaultRole().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling setDefaultRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/roles/{id}/default`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Set a role as default for new users
     * Set role as default
     */
    async setDefaultRole(requestParameters: SetDefaultRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmptyOutputBody> {
        const response = await this.setDefaultRoleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Set parent role for hierarchy
     * Set role parent
     */
    async setRoleParentRaw(requestParameters: SetRoleParentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling setRoleParent().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling setRoleParent().'
            );
        }

        if (requestParameters['setRoleParentInputBody'] == null) {
            throw new runtime.RequiredError(
                'setRoleParentInputBody',
                'Required parameter "setRoleParentInputBody" was null or undefined when calling setRoleParent().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/roles/{id}/parent`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SetRoleParentInputBodyToJSON(requestParameters['setRoleParentInputBody']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Set parent role for hierarchy
     * Set role parent
     */
    async setRoleParent(requestParameters: SetRoleParentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmptyOutputBody> {
        const response = await this.setRoleParentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Synchronize role permissions to match provided list
     * Sync role permissions
     */
    async syncRolePermissionsRaw(requestParameters: SyncRolePermissionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling syncRolePermissions().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling syncRolePermissions().'
            );
        }

        if (requestParameters['syncRolePermissionsRequest'] == null) {
            throw new runtime.RequiredError(
                'syncRolePermissionsRequest',
                'Required parameter "syncRolePermissionsRequest" was null or undefined when calling syncRolePermissions().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/roles/{id}/permissions/sync`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SyncRolePermissionsRequestToJSON(requestParameters['syncRolePermissionsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Synchronize role permissions to match provided list
     * Sync role permissions
     */
    async syncRolePermissions(requestParameters: SyncRolePermissionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmptyOutputBody> {
        const response = await this.syncRolePermissionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove default status from a role
     * Unset role as default
     */
    async unsetDefaultRoleRaw(requestParameters: UnsetDefaultRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling unsetDefaultRole().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling unsetDefaultRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/roles/{id}/default`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Remove default status from a role
     * Unset role as default
     */
    async unsetDefaultRole(requestParameters: UnsetDefaultRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmptyOutputBody> {
        const response = await this.unsetDefaultRoleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing permission by ID
     * Update a permission
     */
    async updatePermissionRaw(requestParameters: UpdatePermissionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Permission>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling updatePermission().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updatePermission().'
            );
        }

        if (requestParameters['updatePermissionRequest'] == null) {
            throw new runtime.RequiredError(
                'updatePermissionRequest',
                'Required parameter "updatePermissionRequest" was null or undefined when calling updatePermission().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/permissions/{id}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdatePermissionRequestToJSON(requestParameters['updatePermissionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PermissionFromJSON(jsonValue));
    }

    /**
     * Update an existing permission by ID
     * Update a permission
     */
    async updatePermission(requestParameters: UpdatePermissionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Permission> {
        const response = await this.updatePermissionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing role by ID
     * Update a role
     */
    async updateRoleRaw(requestParameters: UpdateRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Role>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling updateRole().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateRole().'
            );
        }

        if (requestParameters['updateRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'updateRoleRequest',
                'Required parameter "updateRoleRequest" was null or undefined when calling updateRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/roles/{id}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateRoleRequestToJSON(requestParameters['updateRoleRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoleFromJSON(jsonValue));
    }

    /**
     * Update an existing role by ID
     * Update a role
     */
    async updateRole(requestParameters: UpdateRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Role> {
        const response = await this.updateRoleRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
