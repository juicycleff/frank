/* tslint:disable */
/* eslint-disable */
/**
 * My Project
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AcceptInvitationRequest,
    AcceptInvitationRequestFromJSON,
    AcceptInvitationRequestToJSON,
    AcceptInvitationResponse,
    AcceptInvitationResponseFromJSON,
    AcceptInvitationResponseToJSON,
    DeclineInvitationRequest,
    DeclineInvitationRequestFromJSON,
    DeclineInvitationRequestToJSON,
    EmptyOutputBody,
    EmptyOutputBodyFromJSON,
    EmptyOutputBodyToJSON,
    InlineResponse400,
    InlineResponse400FromJSON,
    InlineResponse400ToJSON,
    InvitationValidationRequest,
    InvitationValidationRequestFromJSON,
    InvitationValidationRequestToJSON,
    InvitationValidationResponse,
    InvitationValidationResponseFromJSON,
    InvitationValidationResponseToJSON,
} from '../models';

export interface PublicAcceptInvitationRequest {
    acceptInvitationRequest?: AcceptInvitationRequest;
}

export interface PublicDeclineInvitationRequest {
    declineInvitationRequest?: DeclineInvitationRequest;
}

export interface PublicValidateInvitationRequest {
    invitationValidationRequest?: InvitationValidationRequest;
}

/**
 * FrankAuthPublicApi - interface
 * 
 * @export
 * @interface FrankAuthPublicApiInterface
 */
export interface FrankAuthPublicApiInterface {
    /**
     * Accept an invitation using token (no authentication required)
     * @summary Accept invitation (public)
     * @param {AcceptInvitationRequest} [acceptInvitationRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrankAuthPublicApiInterface
     */
    publicAcceptInvitationRaw(requestParameters: PublicAcceptInvitationRequest): Promise<runtime.ApiResponse<AcceptInvitationResponse>>;

    /**
     * Accept an invitation using token (no authentication required)
     * Accept invitation (public)
     */
    publicAcceptInvitation(requestParameters: PublicAcceptInvitationRequest): Promise<AcceptInvitationResponse>;

    /**
     * Decline an invitation using token (no authentication required)
     * @summary Decline invitation (public)
     * @param {DeclineInvitationRequest} [declineInvitationRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrankAuthPublicApiInterface
     */
    publicDeclineInvitationRaw(requestParameters: PublicDeclineInvitationRequest): Promise<runtime.ApiResponse<EmptyOutputBody>>;

    /**
     * Decline an invitation using token (no authentication required)
     * Decline invitation (public)
     */
    publicDeclineInvitation(requestParameters: PublicDeclineInvitationRequest): Promise<EmptyOutputBody>;

    /**
     * Validate an invitation token (no authentication required)
     * @summary Validate invitation (public)
     * @param {InvitationValidationRequest} [invitationValidationRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrankAuthPublicApiInterface
     */
    publicValidateInvitationRaw(requestParameters: PublicValidateInvitationRequest): Promise<runtime.ApiResponse<InvitationValidationResponse>>;

    /**
     * Validate an invitation token (no authentication required)
     * Validate invitation (public)
     */
    publicValidateInvitation(requestParameters: PublicValidateInvitationRequest): Promise<InvitationValidationResponse>;

}

/**
 * 
 */
export class FrankAuthPublicApi extends runtime.BaseAPI implements FrankAuthPublicApiInterface {

    /**
     * Accept an invitation using token (no authentication required)
     * Accept invitation (public)
     */
    async publicAcceptInvitationRaw(requestParameters: PublicAcceptInvitationRequest): Promise<runtime.ApiResponse<AcceptInvitationResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/invitations/accept`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AcceptInvitationRequestToJSON(requestParameters.acceptInvitationRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AcceptInvitationResponseFromJSON(jsonValue));
    }

    /**
     * Accept an invitation using token (no authentication required)
     * Accept invitation (public)
     */
    async publicAcceptInvitation(requestParameters: PublicAcceptInvitationRequest): Promise<AcceptInvitationResponse> {
        const response = await this.publicAcceptInvitationRaw(requestParameters);
        return await response.value();
    }

    /**
     * Decline an invitation using token (no authentication required)
     * Decline invitation (public)
     */
    async publicDeclineInvitationRaw(requestParameters: PublicDeclineInvitationRequest): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/invitations/decline`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DeclineInvitationRequestToJSON(requestParameters.declineInvitationRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Decline an invitation using token (no authentication required)
     * Decline invitation (public)
     */
    async publicDeclineInvitation(requestParameters: PublicDeclineInvitationRequest): Promise<EmptyOutputBody> {
        const response = await this.publicDeclineInvitationRaw(requestParameters);
        return await response.value();
    }

    /**
     * Validate an invitation token (no authentication required)
     * Validate invitation (public)
     */
    async publicValidateInvitationRaw(requestParameters: PublicValidateInvitationRequest): Promise<runtime.ApiResponse<InvitationValidationResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/invitations/validate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InvitationValidationRequestToJSON(requestParameters.invitationValidationRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InvitationValidationResponseFromJSON(jsonValue));
    }

    /**
     * Validate an invitation token (no authentication required)
     * Validate invitation (public)
     */
    async publicValidateInvitation(requestParameters: PublicValidateInvitationRequest): Promise<InvitationValidationResponse> {
        const response = await this.publicValidateInvitationRaw(requestParameters);
        return await response.value();
    }

}
