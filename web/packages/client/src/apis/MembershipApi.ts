/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BulkMemberRoleUpdate,
  BulkMemberStatusUpdate,
  BulkMembershipOperationResponse,
  BulkRemoveMembersInputBody,
  CreateMembershipRequest,
  CreateMembershipResponse,
  EmptyOutputBody,
  GetGlobalActivityStats400Response,
  MemberMetrics,
  Membership,
  MembershipStats,
  PaginatedOutputMemberSummary,
  PaginatedOutputMembershipActivity,
  RemoveMemberRequest,
  SimpleMessage,
  UpdateMemberRoleInputBody,
  UpdateMemberStatusInputBody,
  UpdateMembershipRequest,
} from '../models/index';
import {
    BulkMemberRoleUpdateFromJSON,
    BulkMemberRoleUpdateToJSON,
    BulkMemberStatusUpdateFromJSON,
    BulkMemberStatusUpdateToJSON,
    BulkMembershipOperationResponseFromJSON,
    BulkMembershipOperationResponseToJSON,
    BulkRemoveMembersInputBodyFromJSON,
    BulkRemoveMembersInputBodyToJSON,
    CreateMembershipRequestFromJSON,
    CreateMembershipRequestToJSON,
    CreateMembershipResponseFromJSON,
    CreateMembershipResponseToJSON,
    EmptyOutputBodyFromJSON,
    EmptyOutputBodyToJSON,
    GetGlobalActivityStats400ResponseFromJSON,
    GetGlobalActivityStats400ResponseToJSON,
    MemberMetricsFromJSON,
    MemberMetricsToJSON,
    MembershipFromJSON,
    MembershipToJSON,
    MembershipStatsFromJSON,
    MembershipStatsToJSON,
    PaginatedOutputMemberSummaryFromJSON,
    PaginatedOutputMemberSummaryToJSON,
    PaginatedOutputMembershipActivityFromJSON,
    PaginatedOutputMembershipActivityToJSON,
    RemoveMemberRequestFromJSON,
    RemoveMemberRequestToJSON,
    SimpleMessageFromJSON,
    SimpleMessageToJSON,
    UpdateMemberRoleInputBodyFromJSON,
    UpdateMemberRoleInputBodyToJSON,
    UpdateMemberStatusInputBodyFromJSON,
    UpdateMemberStatusInputBodyToJSON,
    UpdateMembershipRequestFromJSON,
    UpdateMembershipRequestToJSON,
} from '../models/index';

export interface AddMemberRequest {
    orgId: string;
    createMembershipRequest: Omit<CreateMembershipRequest, '$schema'>;
}

export interface BulkRemoveMembersRequest {
    orgId: string;
    bulkRemoveMembersInputBody: Omit<BulkRemoveMembersInputBody, '$schema'>;
}

export interface BulkUpdateMemberRolesRequest {
    orgId: string;
    bulkMemberRoleUpdate: Array<BulkMemberRoleUpdate> | null;
}

export interface BulkUpdateMemberStatusRequest {
    orgId: string;
    bulkMemberStatusUpdate: Array<BulkMemberStatusUpdate> | null;
}

export interface CheckMemberPermissionRequest {
    orgId: string;
    userId: string;
    permission: string;
}

export interface GetMemberRequest {
    orgId: string;
    userId: string;
}

export interface GetMemberActivityRequest {
    orgId: string;
    days?: number;
}

export interface GetMemberMetricsRequest {
    orgId: string;
    period?: string;
}

export interface GetMemberPermissionsRequest {
    orgId: string;
    userId: string;
}

export interface GetMembershipStatsRequest {
    orgId: string;
}

export interface ListOrganizationMembersRequest {
    orgId: string;
    after?: string;
    before?: string;
    first?: number;
    last?: number;
    limit?: number;
    offset?: number;
    fields?: Array<string> | null;
    orderBy?: Array<string> | null;
    page?: number;
}

export interface RemoveBillingContactRequest {
    orgId: string;
    userId: string;
}

export interface RemoveMemberOperationRequest {
    orgId: string;
    userId: string;
    removeMemberRequest: Omit<RemoveMemberRequest, '$schema'>;
}

export interface SetBillingContactRequest {
    orgId: string;
    userId: string;
}

export interface SetPrimaryContactRequest {
    orgId: string;
    userId: string;
}

export interface UpdateMemberRequest {
    orgId: string;
    userId: string;
    updateMembershipRequest: Omit<UpdateMembershipRequest, '$schema'>;
}

export interface UpdateMemberRoleRequest {
    orgId: string;
    userId: string;
    updateMemberRoleInputBody: Omit<UpdateMemberRoleInputBody, '$schema'>;
}

export interface UpdateMemberStatusRequest {
    orgId: string;
    userId: string;
    updateMemberStatusInputBody: Omit<UpdateMemberStatusInputBody, '$schema'>;
}

/**
 * 
 */
export class MembershipApi extends runtime.BaseAPI {

    /**
     * Add an existing user as a member of the organization
     * Add organization member
     */
    async addMemberRaw(requestParameters: AddMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateMembershipResponse>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling addMember().'
            );
        }

        if (requestParameters['createMembershipRequest'] == null) {
            throw new runtime.RequiredError(
                'createMembershipRequest',
                'Required parameter "createMembershipRequest" was null or undefined when calling addMember().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/members`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateMembershipRequestToJSON(requestParameters['createMembershipRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateMembershipResponseFromJSON(jsonValue));
    }

    /**
     * Add an existing user as a member of the organization
     * Add organization member
     */
    async addMember(requestParameters: AddMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateMembershipResponse> {
        const response = await this.addMemberRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove multiple members from the organization at once
     * Bulk remove members
     */
    async bulkRemoveMembersRaw(requestParameters: BulkRemoveMembersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BulkMembershipOperationResponse>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling bulkRemoveMembers().'
            );
        }

        if (requestParameters['bulkRemoveMembersInputBody'] == null) {
            throw new runtime.RequiredError(
                'bulkRemoveMembersInputBody',
                'Required parameter "bulkRemoveMembersInputBody" was null or undefined when calling bulkRemoveMembers().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/members/bulk`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: BulkRemoveMembersInputBodyToJSON(requestParameters['bulkRemoveMembersInputBody']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BulkMembershipOperationResponseFromJSON(jsonValue));
    }

    /**
     * Remove multiple members from the organization at once
     * Bulk remove members
     */
    async bulkRemoveMembers(requestParameters: BulkRemoveMembersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BulkMembershipOperationResponse> {
        const response = await this.bulkRemoveMembersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update roles for multiple members at once
     * Bulk update member roles
     */
    async bulkUpdateMemberRolesRaw(requestParameters: BulkUpdateMemberRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BulkMembershipOperationResponse>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling bulkUpdateMemberRoles().'
            );
        }

        if (requestParameters['bulkMemberRoleUpdate'] == null) {
            throw new runtime.RequiredError(
                'bulkMemberRoleUpdate',
                'Required parameter "bulkMemberRoleUpdate" was null or undefined when calling bulkUpdateMemberRoles().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/members/bulk/roles`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['bulkMemberRoleUpdate']!.map(BulkMemberRoleUpdateToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BulkMembershipOperationResponseFromJSON(jsonValue));
    }

    /**
     * Update roles for multiple members at once
     * Bulk update member roles
     */
    async bulkUpdateMemberRoles(requestParameters: BulkUpdateMemberRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BulkMembershipOperationResponse> {
        const response = await this.bulkUpdateMemberRolesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update status for multiple members at once
     * Bulk update member status
     */
    async bulkUpdateMemberStatusRaw(requestParameters: BulkUpdateMemberStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BulkMembershipOperationResponse>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling bulkUpdateMemberStatus().'
            );
        }

        if (requestParameters['bulkMemberStatusUpdate'] == null) {
            throw new runtime.RequiredError(
                'bulkMemberStatusUpdate',
                'Required parameter "bulkMemberStatusUpdate" was null or undefined when calling bulkUpdateMemberStatus().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/members/bulk/status`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['bulkMemberStatusUpdate']!.map(BulkMemberStatusUpdateToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BulkMembershipOperationResponseFromJSON(jsonValue));
    }

    /**
     * Update status for multiple members at once
     * Bulk update member status
     */
    async bulkUpdateMemberStatus(requestParameters: BulkUpdateMemberStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BulkMembershipOperationResponse> {
        const response = await this.bulkUpdateMemberStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Check if a member has a specific permission
     * Check member permission
     */
    async checkMemberPermissionRaw(requestParameters: CheckMemberPermissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling checkMemberPermission().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling checkMemberPermission().'
            );
        }

        if (requestParameters['permission'] == null) {
            throw new runtime.RequiredError(
                'permission',
                'Required parameter "permission" was null or undefined when calling checkMemberPermission().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/members/{userId}/permissions/{permission}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))).replace(`{${"permission"}}`, encodeURIComponent(String(requestParameters['permission']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Check if a member has a specific permission
     * Check member permission
     */
    async checkMemberPermission(requestParameters: CheckMemberPermissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.checkMemberPermissionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get detailed information about a specific organization member
     * Get member details
     */
    async getMemberRaw(requestParameters: GetMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Membership>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling getMember().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getMember().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/members/{userId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MembershipFromJSON(jsonValue));
    }

    /**
     * Get detailed information about a specific organization member
     * Get member details
     */
    async getMember(requestParameters: GetMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Membership> {
        const response = await this.getMemberRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get recent member activity and changes
     * Get member activity
     */
    async getMemberActivityRaw(requestParameters: GetMemberActivityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedOutputMembershipActivity>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling getMemberActivity().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['days'] != null) {
            queryParameters['days'] = requestParameters['days'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/members/activity`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedOutputMembershipActivityFromJSON(jsonValue));
    }

    /**
     * Get recent member activity and changes
     * Get member activity
     */
    async getMemberActivity(requestParameters: GetMemberActivityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedOutputMembershipActivity> {
        const response = await this.getMemberActivityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get member metrics for a specific time period
     * Get member metrics
     */
    async getMemberMetricsRaw(requestParameters: GetMemberMetricsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MemberMetrics>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling getMemberMetrics().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['period'] != null) {
            queryParameters['period'] = requestParameters['period'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/members/metrics`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MemberMetricsFromJSON(jsonValue));
    }

    /**
     * Get member metrics for a specific time period
     * Get member metrics
     */
    async getMemberMetrics(requestParameters: GetMemberMetricsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MemberMetrics> {
        const response = await this.getMemberMetricsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all permissions for a specific member
     * Get member permissions
     */
    async getMemberPermissionsRaw(requestParameters: GetMemberPermissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling getMemberPermissions().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getMemberPermissions().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/members/{userId}/permissions`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get all permissions for a specific member
     * Get member permissions
     */
    async getMemberPermissions(requestParameters: GetMemberPermissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.getMemberPermissionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get comprehensive membership statistics for the organization
     * Get membership statistics
     */
    async getMembershipStatsRaw(requestParameters: GetMembershipStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MembershipStats>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling getMembershipStats().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/members/stats`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MembershipStatsFromJSON(jsonValue));
    }

    /**
     * Get comprehensive membership statistics for the organization
     * Get membership statistics
     */
    async getMembershipStats(requestParameters: GetMembershipStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MembershipStats> {
        const response = await this.getMembershipStatsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all members of an organization with filtering and pagination
     * List organization members
     */
    async listOrganizationMembersRaw(requestParameters: ListOrganizationMembersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedOutputMemberSummary>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling listOrganizationMembers().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['after'] != null) {
            queryParameters['after'] = requestParameters['after'];
        }

        if (requestParameters['before'] != null) {
            queryParameters['before'] = requestParameters['before'];
        }

        if (requestParameters['first'] != null) {
            queryParameters['first'] = requestParameters['first'];
        }

        if (requestParameters['last'] != null) {
            queryParameters['last'] = requestParameters['last'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['orderBy'] = requestParameters['orderBy']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/members`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedOutputMemberSummaryFromJSON(jsonValue));
    }

    /**
     * List all members of an organization with filtering and pagination
     * List organization members
     */
    async listOrganizationMembers(requestParameters: ListOrganizationMembersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedOutputMemberSummary> {
        const response = await this.listOrganizationMembersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove a member as a billing contact for the organization
     * Remove billing contact
     */
    async removeBillingContactRaw(requestParameters: RemoveBillingContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling removeBillingContact().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling removeBillingContact().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/members/{userId}/billing-contact`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Remove a member as a billing contact for the organization
     * Remove billing contact
     */
    async removeBillingContact(requestParameters: RemoveBillingContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmptyOutputBody> {
        const response = await this.removeBillingContactRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove a member from the organization
     * Remove member
     */
    async removeMemberRaw(requestParameters: RemoveMemberOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling removeMember().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling removeMember().'
            );
        }

        if (requestParameters['removeMemberRequest'] == null) {
            throw new runtime.RequiredError(
                'removeMemberRequest',
                'Required parameter "removeMemberRequest" was null or undefined when calling removeMember().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/members/{userId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: RemoveMemberRequestToJSON(requestParameters['removeMemberRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Remove a member from the organization
     * Remove member
     */
    async removeMember(requestParameters: RemoveMemberOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmptyOutputBody> {
        const response = await this.removeMemberRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Set a member as a billing contact for the organization
     * Set billing contact
     */
    async setBillingContactRaw(requestParameters: SetBillingContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SimpleMessage>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling setBillingContact().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling setBillingContact().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/members/{userId}/billing-contact`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SimpleMessageFromJSON(jsonValue));
    }

    /**
     * Set a member as a billing contact for the organization
     * Set billing contact
     */
    async setBillingContact(requestParameters: SetBillingContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SimpleMessage> {
        const response = await this.setBillingContactRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Set a member as the primary contact for the organization
     * Set primary contact
     */
    async setPrimaryContactRaw(requestParameters: SetPrimaryContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SimpleMessage>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling setPrimaryContact().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling setPrimaryContact().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/members/{userId}/primary-contact`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SimpleMessageFromJSON(jsonValue));
    }

    /**
     * Set a member as the primary contact for the organization
     * Set primary contact
     */
    async setPrimaryContact(requestParameters: SetPrimaryContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SimpleMessage> {
        const response = await this.setPrimaryContactRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update member information and settings
     * Update member
     */
    async updateMemberRaw(requestParameters: UpdateMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Membership>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling updateMember().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling updateMember().'
            );
        }

        if (requestParameters['updateMembershipRequest'] == null) {
            throw new runtime.RequiredError(
                'updateMembershipRequest',
                'Required parameter "updateMembershipRequest" was null or undefined when calling updateMember().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/members/{userId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateMembershipRequestToJSON(requestParameters['updateMembershipRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MembershipFromJSON(jsonValue));
    }

    /**
     * Update member information and settings
     * Update member
     */
    async updateMember(requestParameters: UpdateMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Membership> {
        const response = await this.updateMemberRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a member\'s role in the organization
     * Update member role
     */
    async updateMemberRoleRaw(requestParameters: UpdateMemberRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Membership>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling updateMemberRole().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling updateMemberRole().'
            );
        }

        if (requestParameters['updateMemberRoleInputBody'] == null) {
            throw new runtime.RequiredError(
                'updateMemberRoleInputBody',
                'Required parameter "updateMemberRoleInputBody" was null or undefined when calling updateMemberRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/members/{userId}/role`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateMemberRoleInputBodyToJSON(requestParameters['updateMemberRoleInputBody']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MembershipFromJSON(jsonValue));
    }

    /**
     * Update a member\'s role in the organization
     * Update member role
     */
    async updateMemberRole(requestParameters: UpdateMemberRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Membership> {
        const response = await this.updateMemberRoleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a member\'s status (active, inactive, suspended)
     * Update member status
     */
    async updateMemberStatusRaw(requestParameters: UpdateMemberStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Membership>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling updateMemberStatus().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling updateMemberStatus().'
            );
        }

        if (requestParameters['updateMemberStatusInputBody'] == null) {
            throw new runtime.RequiredError(
                'updateMemberStatusInputBody',
                'Required parameter "updateMemberStatusInputBody" was null or undefined when calling updateMemberStatus().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/members/{userId}/status`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateMemberStatusInputBodyToJSON(requestParameters['updateMemberStatusInputBody']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MembershipFromJSON(jsonValue));
    }

    /**
     * Update a member\'s status (active, inactive, suspended)
     * Update member status
     */
    async updateMemberStatus(requestParameters: UpdateMemberStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Membership> {
        const response = await this.updateMemberStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
