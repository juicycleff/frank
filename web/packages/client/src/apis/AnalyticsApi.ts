/* tslint:disable */
/* eslint-disable */
/**
 * My Project
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    InlineResponse400,
    InlineResponse400FromJSON,
    InlineResponse400ToJSON,
    MemberMetrics,
    MemberMetricsFromJSON,
    MemberMetricsToJSON,
    MembershipStats,
    MembershipStatsFromJSON,
    MembershipStatsToJSON,
    OrgStats,
    OrgStatsFromJSON,
    OrgStatsToJSON,
    UserStats,
    UserStatsFromJSON,
    UserStatsToJSON,
} from '../models';

export interface GetMembershipMetricsRequest {
    orgId: string;
}

export interface GetMembershipStatsRequest {
    orgId: string;
}

export interface GetOrganizationStatsRequest {
    id: string;
}

export interface GetUserStatsRequest {
    orgId: string;
}

/**
 * AnalyticsApi - interface
 * 
 * @export
 * @interface AnalyticsApiInterface
 */
export interface AnalyticsApiInterface {
    /**
     * Get detailed membership metrics and analytics
     * @summary Get membership metrics
     * @param {string} orgId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApiInterface
     */
    getMembershipMetricsRaw(requestParameters: GetMembershipMetricsRequest): Promise<runtime.ApiResponse<MemberMetrics>>;

    /**
     * Get detailed membership metrics and analytics
     * Get membership metrics
     */
    getMembershipMetrics(requestParameters: GetMembershipMetricsRequest): Promise<MemberMetrics>;

    /**
     * Get comprehensive membership statistics for the organization
     * @summary Get membership statistics
     * @param {string} orgId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApiInterface
     */
    getMembershipStatsRaw(requestParameters: GetMembershipStatsRequest): Promise<runtime.ApiResponse<MembershipStats>>;

    /**
     * Get comprehensive membership statistics for the organization
     * Get membership statistics
     */
    getMembershipStats(requestParameters: GetMembershipStatsRequest): Promise<MembershipStats>;

    /**
     * Get comprehensive organization statistics and metrics
     * @summary Get organization statistics
     * @param {string} id Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApiInterface
     */
    getOrganizationStatsRaw(requestParameters: GetOrganizationStatsRequest): Promise<runtime.ApiResponse<OrgStats>>;

    /**
     * Get comprehensive organization statistics and metrics
     * Get organization statistics
     */
    getOrganizationStats(requestParameters: GetOrganizationStatsRequest): Promise<OrgStats>;

    /**
     * Get user statistics for the organization
     * @summary Get user statistics
     * @param {string} orgId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApiInterface
     */
    getUserStatsRaw(requestParameters: GetUserStatsRequest): Promise<runtime.ApiResponse<UserStats>>;

    /**
     * Get user statistics for the organization
     * Get user statistics
     */
    getUserStats(requestParameters: GetUserStatsRequest): Promise<UserStats>;

}

/**
 * 
 */
export class AnalyticsApi extends runtime.BaseAPI implements AnalyticsApiInterface {

    /**
     * Get detailed membership metrics and analytics
     * Get membership metrics
     */
    async getMembershipMetricsRaw(requestParameters: GetMembershipMetricsRequest): Promise<runtime.ApiResponse<MemberMetrics>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getMembershipMetrics.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/memberships/metrics`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MemberMetricsFromJSON(jsonValue));
    }

    /**
     * Get detailed membership metrics and analytics
     * Get membership metrics
     */
    async getMembershipMetrics(requestParameters: GetMembershipMetricsRequest): Promise<MemberMetrics> {
        const response = await this.getMembershipMetricsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get comprehensive membership statistics for the organization
     * Get membership statistics
     */
    async getMembershipStatsRaw(requestParameters: GetMembershipStatsRequest): Promise<runtime.ApiResponse<MembershipStats>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getMembershipStats.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/memberships/stats`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MembershipStatsFromJSON(jsonValue));
    }

    /**
     * Get comprehensive membership statistics for the organization
     * Get membership statistics
     */
    async getMembershipStats(requestParameters: GetMembershipStatsRequest): Promise<MembershipStats> {
        const response = await this.getMembershipStatsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get comprehensive organization statistics and metrics
     * Get organization statistics
     */
    async getOrganizationStatsRaw(requestParameters: GetOrganizationStatsRequest): Promise<runtime.ApiResponse<OrgStats>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getOrganizationStats.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{id}/stats`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrgStatsFromJSON(jsonValue));
    }

    /**
     * Get comprehensive organization statistics and metrics
     * Get organization statistics
     */
    async getOrganizationStats(requestParameters: GetOrganizationStatsRequest): Promise<OrgStats> {
        const response = await this.getOrganizationStatsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get user statistics for the organization
     * Get user statistics
     */
    async getUserStatsRaw(requestParameters: GetUserStatsRequest): Promise<runtime.ApiResponse<UserStats>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getUserStats.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/users/stats`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserStatsFromJSON(jsonValue));
    }

    /**
     * Get user statistics for the organization
     * Get user statistics
     */
    async getUserStats(requestParameters: GetUserStatsRequest): Promise<UserStats> {
        const response = await this.getUserStatsRaw(requestParameters);
        return await response.value();
    }

}
