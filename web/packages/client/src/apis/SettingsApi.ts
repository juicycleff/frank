/* tslint:disable */
/* eslint-disable */
/**
 * My Project
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    InlineResponse400,
    InlineResponse400FromJSON,
    InlineResponse400ToJSON,
    OrganizationSettings,
    OrganizationSettingsFromJSON,
    OrganizationSettingsToJSON,
    UpdateOrganizationSettingsRequest,
    UpdateOrganizationSettingsRequestFromJSON,
    UpdateOrganizationSettingsRequestToJSON,
} from '../models';

export interface GetOrganizationSettingsRequest {
    id: string;
}

export interface UpdateOrganizationSettingsOperationRequest {
    id: string;
    updateOrganizationSettingsRequest?: UpdateOrganizationSettingsRequest;
}

/**
 * SettingsApi - interface
 * 
 * @export
 * @interface SettingsApiInterface
 */
export interface SettingsApiInterface {
    /**
     * Get organization configuration and settings
     * @summary Get organization settings
     * @param {string} id Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApiInterface
     */
    getOrganizationSettingsRaw(requestParameters: GetOrganizationSettingsRequest): Promise<runtime.ApiResponse<OrganizationSettings>>;

    /**
     * Get organization configuration and settings
     * Get organization settings
     */
    getOrganizationSettings(requestParameters: GetOrganizationSettingsRequest): Promise<OrganizationSettings>;

    /**
     * Update organization configuration and settings
     * @summary Update organization settings
     * @param {string} id Organization ID
     * @param {UpdateOrganizationSettingsRequest} [updateOrganizationSettingsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApiInterface
     */
    updateOrganizationSettingsRaw(requestParameters: UpdateOrganizationSettingsOperationRequest): Promise<runtime.ApiResponse<OrganizationSettings>>;

    /**
     * Update organization configuration and settings
     * Update organization settings
     */
    updateOrganizationSettings(requestParameters: UpdateOrganizationSettingsOperationRequest): Promise<OrganizationSettings>;

}

/**
 * 
 */
export class SettingsApi extends runtime.BaseAPI implements SettingsApiInterface {

    /**
     * Get organization configuration and settings
     * Get organization settings
     */
    async getOrganizationSettingsRaw(requestParameters: GetOrganizationSettingsRequest): Promise<runtime.ApiResponse<OrganizationSettings>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getOrganizationSettings.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{id}/settings`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganizationSettingsFromJSON(jsonValue));
    }

    /**
     * Get organization configuration and settings
     * Get organization settings
     */
    async getOrganizationSettings(requestParameters: GetOrganizationSettingsRequest): Promise<OrganizationSettings> {
        const response = await this.getOrganizationSettingsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update organization configuration and settings
     * Update organization settings
     */
    async updateOrganizationSettingsRaw(requestParameters: UpdateOrganizationSettingsOperationRequest): Promise<runtime.ApiResponse<OrganizationSettings>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateOrganizationSettings.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{id}/settings`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateOrganizationSettingsRequestToJSON(requestParameters.updateOrganizationSettingsRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganizationSettingsFromJSON(jsonValue));
    }

    /**
     * Update organization configuration and settings
     * Update organization settings
     */
    async updateOrganizationSettings(requestParameters: UpdateOrganizationSettingsOperationRequest): Promise<OrganizationSettings> {
        const response = await this.updateOrganizationSettingsRaw(requestParameters);
        return await response.value();
    }

}
