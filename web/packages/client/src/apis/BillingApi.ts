/* tslint:disable */
/* eslint-disable */
/**
 * My Project
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    EmptyOutputBody,
    EmptyOutputBodyFromJSON,
    EmptyOutputBodyToJSON,
    InlineResponse400,
    InlineResponse400FromJSON,
    InlineResponse400ToJSON,
    OrganizationBilling,
    OrganizationBillingFromJSON,
    OrganizationBillingToJSON,
    UpdateBillingRequest,
    UpdateBillingRequestFromJSON,
    UpdateBillingRequestToJSON,
} from '../models';

export interface GetOrganizationBillingRequest {
    id: string;
}

export interface GetOrganizationInvoicesRequest {
    id: string;
}

export interface UpdateOrganizationBillingRequest {
    id: string;
    updateBillingRequest?: UpdateBillingRequest;
}

/**
 * BillingApi - interface
 * 
 * @export
 * @interface BillingApiInterface
 */
export interface BillingApiInterface {
    /**
     * Get billing information and subscription details
     * @summary Get organization billing
     * @param {string} id Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingApiInterface
     */
    getOrganizationBillingRaw(requestParameters: GetOrganizationBillingRequest): Promise<runtime.ApiResponse<OrganizationBilling>>;

    /**
     * Get billing information and subscription details
     * Get organization billing
     */
    getOrganizationBilling(requestParameters: GetOrganizationBillingRequest): Promise<OrganizationBilling>;

    /**
     * Get billing invoices and payment history
     * @summary Get organization invoices
     * @param {string} id Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingApiInterface
     */
    getOrganizationInvoicesRaw(requestParameters: GetOrganizationInvoicesRequest): Promise<runtime.ApiResponse<EmptyOutputBody>>;

    /**
     * Get billing invoices and payment history
     * Get organization invoices
     */
    getOrganizationInvoices(requestParameters: GetOrganizationInvoicesRequest): Promise<EmptyOutputBody>;

    /**
     * Update billing information and subscription plan
     * @summary Update organization billing
     * @param {string} id Organization ID
     * @param {UpdateBillingRequest} [updateBillingRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingApiInterface
     */
    updateOrganizationBillingRaw(requestParameters: UpdateOrganizationBillingRequest): Promise<runtime.ApiResponse<OrganizationBilling>>;

    /**
     * Update billing information and subscription plan
     * Update organization billing
     */
    updateOrganizationBilling(requestParameters: UpdateOrganizationBillingRequest): Promise<OrganizationBilling>;

}

/**
 * 
 */
export class BillingApi extends runtime.BaseAPI implements BillingApiInterface {

    /**
     * Get billing information and subscription details
     * Get organization billing
     */
    async getOrganizationBillingRaw(requestParameters: GetOrganizationBillingRequest): Promise<runtime.ApiResponse<OrganizationBilling>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getOrganizationBilling.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{id}/billing`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganizationBillingFromJSON(jsonValue));
    }

    /**
     * Get billing information and subscription details
     * Get organization billing
     */
    async getOrganizationBilling(requestParameters: GetOrganizationBillingRequest): Promise<OrganizationBilling> {
        const response = await this.getOrganizationBillingRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get billing invoices and payment history
     * Get organization invoices
     */
    async getOrganizationInvoicesRaw(requestParameters: GetOrganizationInvoicesRequest): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getOrganizationInvoices.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{id}/invoices`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Get billing invoices and payment history
     * Get organization invoices
     */
    async getOrganizationInvoices(requestParameters: GetOrganizationInvoicesRequest): Promise<EmptyOutputBody> {
        const response = await this.getOrganizationInvoicesRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update billing information and subscription plan
     * Update organization billing
     */
    async updateOrganizationBillingRaw(requestParameters: UpdateOrganizationBillingRequest): Promise<runtime.ApiResponse<OrganizationBilling>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateOrganizationBilling.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{id}/billing`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateBillingRequestToJSON(requestParameters.updateBillingRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganizationBillingFromJSON(jsonValue));
    }

    /**
     * Update billing information and subscription plan
     * Update organization billing
     */
    async updateOrganizationBilling(requestParameters: UpdateOrganizationBillingRequest): Promise<OrganizationBilling> {
        const response = await this.updateOrganizationBillingRaw(requestParameters);
        return await response.value();
    }

}
