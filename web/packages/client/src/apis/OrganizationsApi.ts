/* tslint:disable */
/* eslint-disable */
/**
 * My Project
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreateOrganizationRequest,
    CreateOrganizationRequestFromJSON,
    CreateOrganizationRequestToJSON,
    DeleteOrganizationRequest,
    DeleteOrganizationRequestFromJSON,
    DeleteOrganizationRequestToJSON,
    DomainVerificationRequest,
    DomainVerificationRequestFromJSON,
    DomainVerificationRequestToJSON,
    DomainVerificationResponse,
    DomainVerificationResponseFromJSON,
    DomainVerificationResponseToJSON,
    EmptyOutputBody,
    EmptyOutputBodyFromJSON,
    EmptyOutputBodyToJSON,
    InlineResponse400,
    InlineResponse400FromJSON,
    InlineResponse400ToJSON,
    OrgStats,
    OrgStatsFromJSON,
    OrgStatsToJSON,
    Organization,
    OrganizationFromJSON,
    OrganizationToJSON,
    OrganizationBilling,
    OrganizationBillingFromJSON,
    OrganizationBillingToJSON,
    OrganizationSettings,
    OrganizationSettingsFromJSON,
    OrganizationSettingsToJSON,
    OrganizationUsage,
    OrganizationUsageFromJSON,
    OrganizationUsageToJSON,
    PaginatedOutputOrganizationSummary,
    PaginatedOutputOrganizationSummaryFromJSON,
    PaginatedOutputOrganizationSummaryToJSON,
    TransferUserOwnershipRequest,
    TransferUserOwnershipRequestFromJSON,
    TransferUserOwnershipRequestToJSON,
    UpdateBillingRequest,
    UpdateBillingRequestFromJSON,
    UpdateBillingRequestToJSON,
    UpdateOrganizationRequest,
    UpdateOrganizationRequestFromJSON,
    UpdateOrganizationRequestToJSON,
    UpdateOrganizationSettingsRequest,
    UpdateOrganizationSettingsRequestFromJSON,
    UpdateOrganizationSettingsRequestToJSON,
} from '../models';

export interface AddOrganizationDomainRequest {
    id: string;
    domainVerificationRequest?: DomainVerificationRequest;
}

export interface CreateOrganizationOperationRequest {
    createOrganizationRequest?: CreateOrganizationRequest;
}

export interface DeleteOrganizationOperationRequest {
    id: string;
    deleteOrganizationRequest?: DeleteOrganizationRequest;
}

export interface DisableOrganizationFeatureRequest {
    id: string;
    feature: string;
}

export interface EnableOrganizationFeatureRequest {
    id: string;
    feature: string;
}

export interface ExportOrganizationDataRequest {
    id: string;
}

export interface GetOrganizationRequest {
    id: string;
}

export interface GetOrganizationActivityRequest {
    id: string;
}

export interface GetOrganizationBillingRequest {
    id: string;
}

export interface GetOrganizationInvoicesRequest {
    id: string;
}

export interface GetOrganizationOwnershipRequest {
    id: string;
}

export interface GetOrganizationSettingsRequest {
    id: string;
}

export interface GetOrganizationStatsRequest {
    id: string;
}

export interface GetOrganizationUsageRequest {
    id: string;
}

export interface ListOrganizationDomainsRequest {
    id: string;
}

export interface ListOrganizationFeaturesRequest {
    id: string;
}

export interface ListOrganizationsRequest {
    after?: string;
    before?: string;
    first?: number;
    last?: number;
    limit?: number;
    offset?: number;
    fields?: Array<string> | null;
    orderBy?: Array<string> | null;
    page?: number;
    orgType?: string;
    plan?: string;
    active?: boolean;
    search?: string;
    ownerId?: string;
    hasTrial?: boolean;
    ssoEnabled?: boolean;
}

export interface RemoveOrganizationDomainRequest {
    id: string;
    domain: string;
}

export interface TransferOrganizationOwnershipRequest {
    id: string;
    transferUserOwnershipRequest?: TransferUserOwnershipRequest;
}

export interface UpdateOrganizationOperationRequest {
    id: string;
    updateOrganizationRequest?: UpdateOrganizationRequest;
}

export interface UpdateOrganizationBillingRequest {
    id: string;
    updateBillingRequest?: UpdateBillingRequest;
}

export interface UpdateOrganizationSettingsOperationRequest {
    id: string;
    updateOrganizationSettingsRequest?: UpdateOrganizationSettingsRequest;
}

export interface VerifyOrganizationDomainRequest {
    id: string;
    domain: string;
}

/**
 * OrganizationsApi - interface
 * 
 * @export
 * @interface OrganizationsApiInterface
 */
export interface OrganizationsApiInterface {
    /**
     * Add a new domain to the organization
     * @summary Add organization domain
     * @param {string} id Organization ID
     * @param {DomainVerificationRequest} [domainVerificationRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApiInterface
     */
    addOrganizationDomainRaw(requestParameters: AddOrganizationDomainRequest): Promise<runtime.ApiResponse<EmptyOutputBody>>;

    /**
     * Add a new domain to the organization
     * Add organization domain
     */
    addOrganizationDomain(requestParameters: AddOrganizationDomainRequest): Promise<EmptyOutputBody>;

    /**
     * Create a new organization
     * @summary Create organization
     * @param {CreateOrganizationRequest} [createOrganizationRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApiInterface
     */
    createOrganizationRaw(requestParameters: CreateOrganizationOperationRequest): Promise<runtime.ApiResponse<Organization>>;

    /**
     * Create a new organization
     * Create organization
     */
    createOrganization(requestParameters: CreateOrganizationOperationRequest): Promise<Organization>;

    /**
     * Delete organization and all associated data
     * @summary Delete organization
     * @param {string} id Organization ID
     * @param {DeleteOrganizationRequest} [deleteOrganizationRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApiInterface
     */
    deleteOrganizationRaw(requestParameters: DeleteOrganizationOperationRequest): Promise<runtime.ApiResponse<EmptyOutputBody>>;

    /**
     * Delete organization and all associated data
     * Delete organization
     */
    deleteOrganization(requestParameters: DeleteOrganizationOperationRequest): Promise<EmptyOutputBody>;

    /**
     * Disable a specific feature for the organization
     * @summary Disable organization feature
     * @param {string} id Organization ID
     * @param {string} feature Feature name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApiInterface
     */
    disableOrganizationFeatureRaw(requestParameters: DisableOrganizationFeatureRequest): Promise<runtime.ApiResponse<EmptyOutputBody>>;

    /**
     * Disable a specific feature for the organization
     * Disable organization feature
     */
    disableOrganizationFeature(requestParameters: DisableOrganizationFeatureRequest): Promise<EmptyOutputBody>;

    /**
     * Enable a specific feature for the organization
     * @summary Enable organization feature
     * @param {string} id Organization ID
     * @param {string} feature Feature name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApiInterface
     */
    enableOrganizationFeatureRaw(requestParameters: EnableOrganizationFeatureRequest): Promise<runtime.ApiResponse<EmptyOutputBody>>;

    /**
     * Enable a specific feature for the organization
     * Enable organization feature
     */
    enableOrganizationFeature(requestParameters: EnableOrganizationFeatureRequest): Promise<EmptyOutputBody>;

    /**
     * Export organization data for backup or compliance
     * @summary Export organization data
     * @param {string} id Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApiInterface
     */
    exportOrganizationDataRaw(requestParameters: ExportOrganizationDataRequest): Promise<runtime.ApiResponse<EmptyOutputBody>>;

    /**
     * Export organization data for backup or compliance
     * Export organization data
     */
    exportOrganizationData(requestParameters: ExportOrganizationDataRequest): Promise<EmptyOutputBody>;

    /**
     * Get organization details by ID
     * @summary Get organization
     * @param {string} id Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApiInterface
     */
    getOrganizationRaw(requestParameters: GetOrganizationRequest): Promise<runtime.ApiResponse<Organization>>;

    /**
     * Get organization details by ID
     * Get organization
     */
    getOrganization(requestParameters: GetOrganizationRequest): Promise<Organization>;

    /**
     * Get organization activity log and audit trail
     * @summary Get organization activity
     * @param {string} id Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApiInterface
     */
    getOrganizationActivityRaw(requestParameters: GetOrganizationActivityRequest): Promise<runtime.ApiResponse<EmptyOutputBody>>;

    /**
     * Get organization activity log and audit trail
     * Get organization activity
     */
    getOrganizationActivity(requestParameters: GetOrganizationActivityRequest): Promise<EmptyOutputBody>;

    /**
     * Get billing information and subscription details
     * @summary Get organization billing
     * @param {string} id Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApiInterface
     */
    getOrganizationBillingRaw(requestParameters: GetOrganizationBillingRequest): Promise<runtime.ApiResponse<OrganizationBilling>>;

    /**
     * Get billing information and subscription details
     * Get organization billing
     */
    getOrganizationBilling(requestParameters: GetOrganizationBillingRequest): Promise<OrganizationBilling>;

    /**
     * Get billing invoices and payment history
     * @summary Get organization invoices
     * @param {string} id Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApiInterface
     */
    getOrganizationInvoicesRaw(requestParameters: GetOrganizationInvoicesRequest): Promise<runtime.ApiResponse<EmptyOutputBody>>;

    /**
     * Get billing invoices and payment history
     * Get organization invoices
     */
    getOrganizationInvoices(requestParameters: GetOrganizationInvoicesRequest): Promise<EmptyOutputBody>;

    /**
     * Get current ownership information for the organization
     * @summary Get organization ownership
     * @param {string} id Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApiInterface
     */
    getOrganizationOwnershipRaw(requestParameters: GetOrganizationOwnershipRequest): Promise<runtime.ApiResponse<EmptyOutputBody>>;

    /**
     * Get current ownership information for the organization
     * Get organization ownership
     */
    getOrganizationOwnership(requestParameters: GetOrganizationOwnershipRequest): Promise<EmptyOutputBody>;

    /**
     * Get organization configuration and settings
     * @summary Get organization settings
     * @param {string} id Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApiInterface
     */
    getOrganizationSettingsRaw(requestParameters: GetOrganizationSettingsRequest): Promise<runtime.ApiResponse<OrganizationSettings>>;

    /**
     * Get organization configuration and settings
     * Get organization settings
     */
    getOrganizationSettings(requestParameters: GetOrganizationSettingsRequest): Promise<OrganizationSettings>;

    /**
     * Get comprehensive organization statistics and metrics
     * @summary Get organization statistics
     * @param {string} id Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApiInterface
     */
    getOrganizationStatsRaw(requestParameters: GetOrganizationStatsRequest): Promise<runtime.ApiResponse<OrgStats>>;

    /**
     * Get comprehensive organization statistics and metrics
     * Get organization statistics
     */
    getOrganizationStats(requestParameters: GetOrganizationStatsRequest): Promise<OrgStats>;

    /**
     * Get current usage statistics and limits
     * @summary Get organization usage
     * @param {string} id Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApiInterface
     */
    getOrganizationUsageRaw(requestParameters: GetOrganizationUsageRequest): Promise<runtime.ApiResponse<OrganizationUsage>>;

    /**
     * Get current usage statistics and limits
     * Get organization usage
     */
    getOrganizationUsage(requestParameters: GetOrganizationUsageRequest): Promise<OrganizationUsage>;

    /**
     * List all domains associated with the organization
     * @summary List organization domains
     * @param {string} id Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApiInterface
     */
    listOrganizationDomainsRaw(requestParameters: ListOrganizationDomainsRequest): Promise<runtime.ApiResponse<EmptyOutputBody>>;

    /**
     * List all domains associated with the organization
     * List organization domains
     */
    listOrganizationDomains(requestParameters: ListOrganizationDomainsRequest): Promise<EmptyOutputBody>;

    /**
     * List enabled and available features for the organization
     * @summary List organization features
     * @param {string} id Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApiInterface
     */
    listOrganizationFeaturesRaw(requestParameters: ListOrganizationFeaturesRequest): Promise<runtime.ApiResponse<EmptyOutputBody>>;

    /**
     * List enabled and available features for the organization
     * List organization features
     */
    listOrganizationFeatures(requestParameters: ListOrganizationFeaturesRequest): Promise<EmptyOutputBody>;

    /**
     * List organizations with pagination and filtering (admin only for all orgs, users see their orgs)
     * @summary List organizations
     * @param {string} [after] 
     * @param {string} [before] 
     * @param {number} [first] 
     * @param {number} [last] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {Array<string>} [fields] 
     * @param {Array<string>} [orderBy] 
     * @param {number} [page] 
     * @param {string} [orgType] Filter by organization type
     * @param {string} [plan] Filter by plan
     * @param {boolean} [active] Filter by active status
     * @param {string} [search] Search in name, slug, domain
     * @param {string} [ownerId] Filter by owner
     * @param {boolean} [hasTrial] Filter by trial status
     * @param {boolean} [ssoEnabled] Filter by SSO status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApiInterface
     */
    listOrganizationsRaw(requestParameters: ListOrganizationsRequest): Promise<runtime.ApiResponse<PaginatedOutputOrganizationSummary>>;

    /**
     * List organizations with pagination and filtering (admin only for all orgs, users see their orgs)
     * List organizations
     */
    listOrganizations(requestParameters: ListOrganizationsRequest): Promise<PaginatedOutputOrganizationSummary>;

    /**
     * Remove a domain from the organization
     * @summary Remove organization domain
     * @param {string} id Organization ID
     * @param {string} domain Domain name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApiInterface
     */
    removeOrganizationDomainRaw(requestParameters: RemoveOrganizationDomainRequest): Promise<runtime.ApiResponse<EmptyOutputBody>>;

    /**
     * Remove a domain from the organization
     * Remove organization domain
     */
    removeOrganizationDomain(requestParameters: RemoveOrganizationDomainRequest): Promise<EmptyOutputBody>;

    /**
     * Transfer ownership of the organization to another user
     * @summary Transfer organization ownership
     * @param {string} id Organization ID
     * @param {TransferUserOwnershipRequest} [transferUserOwnershipRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApiInterface
     */
    transferOrganizationOwnershipRaw(requestParameters: TransferOrganizationOwnershipRequest): Promise<runtime.ApiResponse<EmptyOutputBody>>;

    /**
     * Transfer ownership of the organization to another user
     * Transfer organization ownership
     */
    transferOrganizationOwnership(requestParameters: TransferOrganizationOwnershipRequest): Promise<EmptyOutputBody>;

    /**
     * Update organization information
     * @summary Update organization
     * @param {string} id Organization ID
     * @param {UpdateOrganizationRequest} [updateOrganizationRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApiInterface
     */
    updateOrganizationRaw(requestParameters: UpdateOrganizationOperationRequest): Promise<runtime.ApiResponse<Organization>>;

    /**
     * Update organization information
     * Update organization
     */
    updateOrganization(requestParameters: UpdateOrganizationOperationRequest): Promise<Organization>;

    /**
     * Update billing information and subscription plan
     * @summary Update organization billing
     * @param {string} id Organization ID
     * @param {UpdateBillingRequest} [updateBillingRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApiInterface
     */
    updateOrganizationBillingRaw(requestParameters: UpdateOrganizationBillingRequest): Promise<runtime.ApiResponse<OrganizationBilling>>;

    /**
     * Update billing information and subscription plan
     * Update organization billing
     */
    updateOrganizationBilling(requestParameters: UpdateOrganizationBillingRequest): Promise<OrganizationBilling>;

    /**
     * Update organization configuration and settings
     * @summary Update organization settings
     * @param {string} id Organization ID
     * @param {UpdateOrganizationSettingsRequest} [updateOrganizationSettingsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApiInterface
     */
    updateOrganizationSettingsRaw(requestParameters: UpdateOrganizationSettingsOperationRequest): Promise<runtime.ApiResponse<OrganizationSettings>>;

    /**
     * Update organization configuration and settings
     * Update organization settings
     */
    updateOrganizationSettings(requestParameters: UpdateOrganizationSettingsOperationRequest): Promise<OrganizationSettings>;

    /**
     * Verify domain ownership via DNS records
     * @summary Verify organization domain
     * @param {string} id Organization ID
     * @param {string} domain Domain name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApiInterface
     */
    verifyOrganizationDomainRaw(requestParameters: VerifyOrganizationDomainRequest): Promise<runtime.ApiResponse<DomainVerificationResponse>>;

    /**
     * Verify domain ownership via DNS records
     * Verify organization domain
     */
    verifyOrganizationDomain(requestParameters: VerifyOrganizationDomainRequest): Promise<DomainVerificationResponse>;

}

/**
 * 
 */
export class OrganizationsApi extends runtime.BaseAPI implements OrganizationsApiInterface {

    /**
     * Add a new domain to the organization
     * Add organization domain
     */
    async addOrganizationDomainRaw(requestParameters: AddOrganizationDomainRequest): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling addOrganizationDomain.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{id}/domains`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DomainVerificationRequestToJSON(requestParameters.domainVerificationRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Add a new domain to the organization
     * Add organization domain
     */
    async addOrganizationDomain(requestParameters: AddOrganizationDomainRequest): Promise<EmptyOutputBody> {
        const response = await this.addOrganizationDomainRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create a new organization
     * Create organization
     */
    async createOrganizationRaw(requestParameters: CreateOrganizationOperationRequest): Promise<runtime.ApiResponse<Organization>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateOrganizationRequestToJSON(requestParameters.createOrganizationRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganizationFromJSON(jsonValue));
    }

    /**
     * Create a new organization
     * Create organization
     */
    async createOrganization(requestParameters: CreateOrganizationOperationRequest): Promise<Organization> {
        const response = await this.createOrganizationRaw(requestParameters);
        return await response.value();
    }

    /**
     * Delete organization and all associated data
     * Delete organization
     */
    async deleteOrganizationRaw(requestParameters: DeleteOrganizationOperationRequest): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteOrganization.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteOrganizationRequestToJSON(requestParameters.deleteOrganizationRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Delete organization and all associated data
     * Delete organization
     */
    async deleteOrganization(requestParameters: DeleteOrganizationOperationRequest): Promise<EmptyOutputBody> {
        const response = await this.deleteOrganizationRaw(requestParameters);
        return await response.value();
    }

    /**
     * Disable a specific feature for the organization
     * Disable organization feature
     */
    async disableOrganizationFeatureRaw(requestParameters: DisableOrganizationFeatureRequest): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling disableOrganizationFeature.');
        }

        if (requestParameters.feature === null || requestParameters.feature === undefined) {
            throw new runtime.RequiredError('feature','Required parameter requestParameters.feature was null or undefined when calling disableOrganizationFeature.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{id}/features/{feature}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"feature"}}`, encodeURIComponent(String(requestParameters.feature))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Disable a specific feature for the organization
     * Disable organization feature
     */
    async disableOrganizationFeature(requestParameters: DisableOrganizationFeatureRequest): Promise<EmptyOutputBody> {
        const response = await this.disableOrganizationFeatureRaw(requestParameters);
        return await response.value();
    }

    /**
     * Enable a specific feature for the organization
     * Enable organization feature
     */
    async enableOrganizationFeatureRaw(requestParameters: EnableOrganizationFeatureRequest): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling enableOrganizationFeature.');
        }

        if (requestParameters.feature === null || requestParameters.feature === undefined) {
            throw new runtime.RequiredError('feature','Required parameter requestParameters.feature was null or undefined when calling enableOrganizationFeature.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{id}/features/{feature}/enable`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"feature"}}`, encodeURIComponent(String(requestParameters.feature))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Enable a specific feature for the organization
     * Enable organization feature
     */
    async enableOrganizationFeature(requestParameters: EnableOrganizationFeatureRequest): Promise<EmptyOutputBody> {
        const response = await this.enableOrganizationFeatureRaw(requestParameters);
        return await response.value();
    }

    /**
     * Export organization data for backup or compliance
     * Export organization data
     */
    async exportOrganizationDataRaw(requestParameters: ExportOrganizationDataRequest): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling exportOrganizationData.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{id}/export`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Export organization data for backup or compliance
     * Export organization data
     */
    async exportOrganizationData(requestParameters: ExportOrganizationDataRequest): Promise<EmptyOutputBody> {
        const response = await this.exportOrganizationDataRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get organization details by ID
     * Get organization
     */
    async getOrganizationRaw(requestParameters: GetOrganizationRequest): Promise<runtime.ApiResponse<Organization>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getOrganization.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganizationFromJSON(jsonValue));
    }

    /**
     * Get organization details by ID
     * Get organization
     */
    async getOrganization(requestParameters: GetOrganizationRequest): Promise<Organization> {
        const response = await this.getOrganizationRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get organization activity log and audit trail
     * Get organization activity
     */
    async getOrganizationActivityRaw(requestParameters: GetOrganizationActivityRequest): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getOrganizationActivity.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{id}/activity`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Get organization activity log and audit trail
     * Get organization activity
     */
    async getOrganizationActivity(requestParameters: GetOrganizationActivityRequest): Promise<EmptyOutputBody> {
        const response = await this.getOrganizationActivityRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get billing information and subscription details
     * Get organization billing
     */
    async getOrganizationBillingRaw(requestParameters: GetOrganizationBillingRequest): Promise<runtime.ApiResponse<OrganizationBilling>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getOrganizationBilling.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{id}/billing`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganizationBillingFromJSON(jsonValue));
    }

    /**
     * Get billing information and subscription details
     * Get organization billing
     */
    async getOrganizationBilling(requestParameters: GetOrganizationBillingRequest): Promise<OrganizationBilling> {
        const response = await this.getOrganizationBillingRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get billing invoices and payment history
     * Get organization invoices
     */
    async getOrganizationInvoicesRaw(requestParameters: GetOrganizationInvoicesRequest): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getOrganizationInvoices.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{id}/invoices`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Get billing invoices and payment history
     * Get organization invoices
     */
    async getOrganizationInvoices(requestParameters: GetOrganizationInvoicesRequest): Promise<EmptyOutputBody> {
        const response = await this.getOrganizationInvoicesRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get current ownership information for the organization
     * Get organization ownership
     */
    async getOrganizationOwnershipRaw(requestParameters: GetOrganizationOwnershipRequest): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getOrganizationOwnership.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{id}/ownership`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Get current ownership information for the organization
     * Get organization ownership
     */
    async getOrganizationOwnership(requestParameters: GetOrganizationOwnershipRequest): Promise<EmptyOutputBody> {
        const response = await this.getOrganizationOwnershipRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get organization configuration and settings
     * Get organization settings
     */
    async getOrganizationSettingsRaw(requestParameters: GetOrganizationSettingsRequest): Promise<runtime.ApiResponse<OrganizationSettings>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getOrganizationSettings.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{id}/settings`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganizationSettingsFromJSON(jsonValue));
    }

    /**
     * Get organization configuration and settings
     * Get organization settings
     */
    async getOrganizationSettings(requestParameters: GetOrganizationSettingsRequest): Promise<OrganizationSettings> {
        const response = await this.getOrganizationSettingsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get comprehensive organization statistics and metrics
     * Get organization statistics
     */
    async getOrganizationStatsRaw(requestParameters: GetOrganizationStatsRequest): Promise<runtime.ApiResponse<OrgStats>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getOrganizationStats.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{id}/stats`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrgStatsFromJSON(jsonValue));
    }

    /**
     * Get comprehensive organization statistics and metrics
     * Get organization statistics
     */
    async getOrganizationStats(requestParameters: GetOrganizationStatsRequest): Promise<OrgStats> {
        const response = await this.getOrganizationStatsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get current usage statistics and limits
     * Get organization usage
     */
    async getOrganizationUsageRaw(requestParameters: GetOrganizationUsageRequest): Promise<runtime.ApiResponse<OrganizationUsage>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getOrganizationUsage.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{id}/usage`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganizationUsageFromJSON(jsonValue));
    }

    /**
     * Get current usage statistics and limits
     * Get organization usage
     */
    async getOrganizationUsage(requestParameters: GetOrganizationUsageRequest): Promise<OrganizationUsage> {
        const response = await this.getOrganizationUsageRaw(requestParameters);
        return await response.value();
    }

    /**
     * List all domains associated with the organization
     * List organization domains
     */
    async listOrganizationDomainsRaw(requestParameters: ListOrganizationDomainsRequest): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling listOrganizationDomains.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{id}/domains`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * List all domains associated with the organization
     * List organization domains
     */
    async listOrganizationDomains(requestParameters: ListOrganizationDomainsRequest): Promise<EmptyOutputBody> {
        const response = await this.listOrganizationDomainsRaw(requestParameters);
        return await response.value();
    }

    /**
     * List enabled and available features for the organization
     * List organization features
     */
    async listOrganizationFeaturesRaw(requestParameters: ListOrganizationFeaturesRequest): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling listOrganizationFeatures.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{id}/features`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * List enabled and available features for the organization
     * List organization features
     */
    async listOrganizationFeatures(requestParameters: ListOrganizationFeaturesRequest): Promise<EmptyOutputBody> {
        const response = await this.listOrganizationFeaturesRaw(requestParameters);
        return await response.value();
    }

    /**
     * List organizations with pagination and filtering (admin only for all orgs, users see their orgs)
     * List organizations
     */
    async listOrganizationsRaw(requestParameters: ListOrganizationsRequest): Promise<runtime.ApiResponse<PaginatedOutputOrganizationSummary>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.after !== undefined) {
            queryParameters['after'] = requestParameters.after;
        }

        if (requestParameters.before !== undefined) {
            queryParameters['before'] = requestParameters.before;
        }

        if (requestParameters.first !== undefined) {
            queryParameters['first'] = requestParameters.first;
        }

        if (requestParameters.last !== undefined) {
            queryParameters['last'] = requestParameters.last;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.fields) {
            queryParameters['fields'] = requestParameters.fields;
        }

        if (requestParameters.orderBy) {
            queryParameters['orderBy'] = requestParameters.orderBy;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.orgType !== undefined) {
            queryParameters['orgType'] = requestParameters.orgType;
        }

        if (requestParameters.plan !== undefined) {
            queryParameters['plan'] = requestParameters.plan;
        }

        if (requestParameters.active !== undefined) {
            queryParameters['active'] = requestParameters.active;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.ownerId !== undefined) {
            queryParameters['ownerId'] = requestParameters.ownerId;
        }

        if (requestParameters.hasTrial !== undefined) {
            queryParameters['hasTrial'] = requestParameters.hasTrial;
        }

        if (requestParameters.ssoEnabled !== undefined) {
            queryParameters['ssoEnabled'] = requestParameters.ssoEnabled;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedOutputOrganizationSummaryFromJSON(jsonValue));
    }

    /**
     * List organizations with pagination and filtering (admin only for all orgs, users see their orgs)
     * List organizations
     */
    async listOrganizations(requestParameters: ListOrganizationsRequest): Promise<PaginatedOutputOrganizationSummary> {
        const response = await this.listOrganizationsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Remove a domain from the organization
     * Remove organization domain
     */
    async removeOrganizationDomainRaw(requestParameters: RemoveOrganizationDomainRequest): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling removeOrganizationDomain.');
        }

        if (requestParameters.domain === null || requestParameters.domain === undefined) {
            throw new runtime.RequiredError('domain','Required parameter requestParameters.domain was null or undefined when calling removeOrganizationDomain.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{id}/domains/{domain}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"domain"}}`, encodeURIComponent(String(requestParameters.domain))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Remove a domain from the organization
     * Remove organization domain
     */
    async removeOrganizationDomain(requestParameters: RemoveOrganizationDomainRequest): Promise<EmptyOutputBody> {
        const response = await this.removeOrganizationDomainRaw(requestParameters);
        return await response.value();
    }

    /**
     * Transfer ownership of the organization to another user
     * Transfer organization ownership
     */
    async transferOrganizationOwnershipRaw(requestParameters: TransferOrganizationOwnershipRequest): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling transferOrganizationOwnership.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{id}/transfer-ownership`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransferUserOwnershipRequestToJSON(requestParameters.transferUserOwnershipRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Transfer ownership of the organization to another user
     * Transfer organization ownership
     */
    async transferOrganizationOwnership(requestParameters: TransferOrganizationOwnershipRequest): Promise<EmptyOutputBody> {
        const response = await this.transferOrganizationOwnershipRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update organization information
     * Update organization
     */
    async updateOrganizationRaw(requestParameters: UpdateOrganizationOperationRequest): Promise<runtime.ApiResponse<Organization>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateOrganization.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateOrganizationRequestToJSON(requestParameters.updateOrganizationRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganizationFromJSON(jsonValue));
    }

    /**
     * Update organization information
     * Update organization
     */
    async updateOrganization(requestParameters: UpdateOrganizationOperationRequest): Promise<Organization> {
        const response = await this.updateOrganizationRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update billing information and subscription plan
     * Update organization billing
     */
    async updateOrganizationBillingRaw(requestParameters: UpdateOrganizationBillingRequest): Promise<runtime.ApiResponse<OrganizationBilling>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateOrganizationBilling.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{id}/billing`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateBillingRequestToJSON(requestParameters.updateBillingRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganizationBillingFromJSON(jsonValue));
    }

    /**
     * Update billing information and subscription plan
     * Update organization billing
     */
    async updateOrganizationBilling(requestParameters: UpdateOrganizationBillingRequest): Promise<OrganizationBilling> {
        const response = await this.updateOrganizationBillingRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update organization configuration and settings
     * Update organization settings
     */
    async updateOrganizationSettingsRaw(requestParameters: UpdateOrganizationSettingsOperationRequest): Promise<runtime.ApiResponse<OrganizationSettings>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateOrganizationSettings.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{id}/settings`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateOrganizationSettingsRequestToJSON(requestParameters.updateOrganizationSettingsRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganizationSettingsFromJSON(jsonValue));
    }

    /**
     * Update organization configuration and settings
     * Update organization settings
     */
    async updateOrganizationSettings(requestParameters: UpdateOrganizationSettingsOperationRequest): Promise<OrganizationSettings> {
        const response = await this.updateOrganizationSettingsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Verify domain ownership via DNS records
     * Verify organization domain
     */
    async verifyOrganizationDomainRaw(requestParameters: VerifyOrganizationDomainRequest): Promise<runtime.ApiResponse<DomainVerificationResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling verifyOrganizationDomain.');
        }

        if (requestParameters.domain === null || requestParameters.domain === undefined) {
            throw new runtime.RequiredError('domain','Required parameter requestParameters.domain was null or undefined when calling verifyOrganizationDomain.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{id}/domains/{domain}/verify`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"domain"}}`, encodeURIComponent(String(requestParameters.domain))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainVerificationResponseFromJSON(jsonValue));
    }

    /**
     * Verify domain ownership via DNS records
     * Verify organization domain
     */
    async verifyOrganizationDomain(requestParameters: VerifyOrganizationDomainRequest): Promise<DomainVerificationResponse> {
        const response = await this.verifyOrganizationDomainRaw(requestParameters);
        return await response.value();
    }

}
