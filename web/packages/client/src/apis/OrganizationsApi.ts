/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateOrganizationRequest,
  DeleteOrganizationRequest,
  DomainResponse,
  DomainVerificationRequest,
  DomainVerificationResponse,
  DomainsResponse,
  EmptyOutputBody,
  EnableOrganizationFeatureResponse,
  ExportOrganizationDataResponse,
  FeatureSummary,
  GetGlobalActivityStats400Response,
  OrgStats,
  OrgType,
  Organization,
  OrganizationBilling,
  OrganizationSettings,
  OrganizationUsage,
  PaginatedOutputInvoice,
  PaginatedOutputOrganizationSummary,
  TransferOwnershipResponse,
  TransferUserOwnershipRequest,
  UpdateOrganizationRequest,
  UpdateOrganizationSettingsRequest,
  UserSummary,
} from '../models/index';
import {
    CreateOrganizationRequestFromJSON,
    CreateOrganizationRequestToJSON,
    DeleteOrganizationRequestFromJSON,
    DeleteOrganizationRequestToJSON,
    DomainResponseFromJSON,
    DomainResponseToJSON,
    DomainVerificationRequestFromJSON,
    DomainVerificationRequestToJSON,
    DomainVerificationResponseFromJSON,
    DomainVerificationResponseToJSON,
    DomainsResponseFromJSON,
    DomainsResponseToJSON,
    EmptyOutputBodyFromJSON,
    EmptyOutputBodyToJSON,
    EnableOrganizationFeatureResponseFromJSON,
    EnableOrganizationFeatureResponseToJSON,
    ExportOrganizationDataResponseFromJSON,
    ExportOrganizationDataResponseToJSON,
    FeatureSummaryFromJSON,
    FeatureSummaryToJSON,
    GetGlobalActivityStats400ResponseFromJSON,
    GetGlobalActivityStats400ResponseToJSON,
    OrgStatsFromJSON,
    OrgStatsToJSON,
    OrgTypeFromJSON,
    OrgTypeToJSON,
    OrganizationFromJSON,
    OrganizationToJSON,
    OrganizationBillingFromJSON,
    OrganizationBillingToJSON,
    OrganizationSettingsFromJSON,
    OrganizationSettingsToJSON,
    OrganizationUsageFromJSON,
    OrganizationUsageToJSON,
    PaginatedOutputInvoiceFromJSON,
    PaginatedOutputInvoiceToJSON,
    PaginatedOutputOrganizationSummaryFromJSON,
    PaginatedOutputOrganizationSummaryToJSON,
    TransferOwnershipResponseFromJSON,
    TransferOwnershipResponseToJSON,
    TransferUserOwnershipRequestFromJSON,
    TransferUserOwnershipRequestToJSON,
    UpdateOrganizationRequestFromJSON,
    UpdateOrganizationRequestToJSON,
    UpdateOrganizationSettingsRequestFromJSON,
    UpdateOrganizationSettingsRequestToJSON,
    UserSummaryFromJSON,
    UserSummaryToJSON,
} from '../models/index';

export interface AddOrganizationDomainRequest {
    id: string;
    domainVerificationRequest: Omit<DomainVerificationRequest, '$schema'>;
}

export interface CreateOrganizationOperationRequest {
    createOrganizationRequest: Omit<CreateOrganizationRequest, '$schema'>;
}

export interface DeleteOrganizationOperationRequest {
    id: string;
    deleteOrganizationRequest: Omit<DeleteOrganizationRequest, '$schema'>;
}

export interface DisableOrganizationFeatureRequest {
    id: string;
    feature: string;
}

export interface EnableOrganizationFeatureRequest {
    id: string;
    feature: string;
}

export interface ExportOrganizationDataRequest {
    id: string;
}

export interface GetOrganizationRequest {
    id: string;
}

export interface GetOrganizationBillingRequest {
    id: string;
}

export interface GetOrganizationInvoicesRequest {
    id: string;
    after?: string;
    before?: string;
    first?: number;
    last?: number;
    limit?: number;
    offset?: number;
    fields?: Array<string> | null;
    orderBy?: Array<string> | null;
    page?: number;
    status?: GetOrganizationInvoicesStatusEnum;
    startDate?: Date;
    endDate?: Date;
    dueBefore?: Date;
    minAmount?: number;
    maxAmount?: number;
}

export interface GetOrganizationOwnershipRequest {
    id: string;
}

export interface GetOrganizationSettingsRequest {
    id: string;
}

export interface GetOrganizationStatsRequest {
    id: string;
}

export interface GetOrganizationUsageRequest {
    id: string;
}

export interface ListOrganizationDomainsRequest {
    id: string;
}

export interface ListOrganizationFeaturesRequest {
    id: string;
}

export interface ListOrganizationsRequest {
    after?: string;
    before?: string;
    first?: number;
    last?: number;
    limit?: number;
    offset?: number;
    fields?: Array<string> | null;
    orderBy?: Array<string> | null;
    page?: number;
    orgType?: OrgType;
    plan?: string;
    active?: boolean;
    search?: string;
    ownerId?: string;
    hasTrial?: boolean;
    ssoEnabled?: boolean;
}

export interface RemoveOrganizationDomainRequest {
    id: string;
    domain: string;
}

export interface TransferOrganizationOwnershipRequest {
    id: string;
    transferUserOwnershipRequest: Omit<TransferUserOwnershipRequest, '$schema'>;
}

export interface UpdateOrganizationOperationRequest {
    id: string;
    updateOrganizationRequest: Omit<UpdateOrganizationRequest, '$schema'>;
}

export interface UpdateOrganizationSettingsOperationRequest {
    id: string;
    updateOrganizationSettingsRequest: Omit<UpdateOrganizationSettingsRequest, '$schema'>;
}

export interface VerifyOrganizationDomainRequest {
    id: string;
    domain: string;
}

/**
 * 
 */
export class OrganizationsApi extends runtime.BaseAPI {

    /**
     * Add a new domain to the organization
     * Add organization domain
     */
    async addOrganizationDomainRaw(requestParameters: AddOrganizationDomainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DomainResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling addOrganizationDomain().'
            );
        }

        if (requestParameters['domainVerificationRequest'] == null) {
            throw new runtime.RequiredError(
                'domainVerificationRequest',
                'Required parameter "domainVerificationRequest" was null or undefined when calling addOrganizationDomain().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{id}/domains`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DomainVerificationRequestToJSON(requestParameters['domainVerificationRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainResponseFromJSON(jsonValue));
    }

    /**
     * Add a new domain to the organization
     * Add organization domain
     */
    async addOrganizationDomain(requestParameters: AddOrganizationDomainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainResponse> {
        const response = await this.addOrganizationDomainRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new organization
     * Create organization
     */
    async createOrganizationRaw(requestParameters: CreateOrganizationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Organization>> {
        if (requestParameters['createOrganizationRequest'] == null) {
            throw new runtime.RequiredError(
                'createOrganizationRequest',
                'Required parameter "createOrganizationRequest" was null or undefined when calling createOrganization().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/me/organizations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateOrganizationRequestToJSON(requestParameters['createOrganizationRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganizationFromJSON(jsonValue));
    }

    /**
     * Create a new organization
     * Create organization
     */
    async createOrganization(requestParameters: CreateOrganizationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Organization> {
        const response = await this.createOrganizationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete organization and all associated data
     * Delete organization
     */
    async deleteOrganizationRaw(requestParameters: DeleteOrganizationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteOrganization().'
            );
        }

        if (requestParameters['deleteOrganizationRequest'] == null) {
            throw new runtime.RequiredError(
                'deleteOrganizationRequest',
                'Required parameter "deleteOrganizationRequest" was null or undefined when calling deleteOrganization().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteOrganizationRequestToJSON(requestParameters['deleteOrganizationRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Delete organization and all associated data
     * Delete organization
     */
    async deleteOrganization(requestParameters: DeleteOrganizationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmptyOutputBody> {
        const response = await this.deleteOrganizationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Disable a specific feature for the organization
     * Disable organization feature
     */
    async disableOrganizationFeatureRaw(requestParameters: DisableOrganizationFeatureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling disableOrganizationFeature().'
            );
        }

        if (requestParameters['feature'] == null) {
            throw new runtime.RequiredError(
                'feature',
                'Required parameter "feature" was null or undefined when calling disableOrganizationFeature().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{id}/features/{feature}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"feature"}}`, encodeURIComponent(String(requestParameters['feature']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Disable a specific feature for the organization
     * Disable organization feature
     */
    async disableOrganizationFeature(requestParameters: DisableOrganizationFeatureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmptyOutputBody> {
        const response = await this.disableOrganizationFeatureRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Enable a specific feature for the organization
     * Enable organization feature
     */
    async enableOrganizationFeatureRaw(requestParameters: EnableOrganizationFeatureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EnableOrganizationFeatureResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling enableOrganizationFeature().'
            );
        }

        if (requestParameters['feature'] == null) {
            throw new runtime.RequiredError(
                'feature',
                'Required parameter "feature" was null or undefined when calling enableOrganizationFeature().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{id}/features/{feature}/enable`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"feature"}}`, encodeURIComponent(String(requestParameters['feature']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EnableOrganizationFeatureResponseFromJSON(jsonValue));
    }

    /**
     * Enable a specific feature for the organization
     * Enable organization feature
     */
    async enableOrganizationFeature(requestParameters: EnableOrganizationFeatureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EnableOrganizationFeatureResponse> {
        const response = await this.enableOrganizationFeatureRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Export organization data for backup or compliance
     * Export organization data
     */
    async exportOrganizationDataRaw(requestParameters: ExportOrganizationDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExportOrganizationDataResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling exportOrganizationData().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{id}/export`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExportOrganizationDataResponseFromJSON(jsonValue));
    }

    /**
     * Export organization data for backup or compliance
     * Export organization data
     */
    async exportOrganizationData(requestParameters: ExportOrganizationDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExportOrganizationDataResponse> {
        const response = await this.exportOrganizationDataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get organization details by ID
     * Get organization
     */
    async getOrganizationRaw(requestParameters: GetOrganizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Organization>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getOrganization().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/me/organizations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganizationFromJSON(jsonValue));
    }

    /**
     * Get organization details by ID
     * Get organization
     */
    async getOrganization(requestParameters: GetOrganizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Organization> {
        const response = await this.getOrganizationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get billing information and subscription details
     * Get organization billing
     */
    async getOrganizationBillingRaw(requestParameters: GetOrganizationBillingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganizationBilling>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getOrganizationBilling().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{id}/billing`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganizationBillingFromJSON(jsonValue));
    }

    /**
     * Get billing information and subscription details
     * Get organization billing
     */
    async getOrganizationBilling(requestParameters: GetOrganizationBillingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganizationBilling> {
        const response = await this.getOrganizationBillingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get billing invoices and payment history
     * Get organization invoices
     */
    async getOrganizationInvoicesRaw(requestParameters: GetOrganizationInvoicesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedOutputInvoice>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getOrganizationInvoices().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['after'] != null) {
            queryParameters['after'] = requestParameters['after'];
        }

        if (requestParameters['before'] != null) {
            queryParameters['before'] = requestParameters['before'];
        }

        if (requestParameters['first'] != null) {
            queryParameters['first'] = requestParameters['first'];
        }

        if (requestParameters['last'] != null) {
            queryParameters['last'] = requestParameters['last'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['orderBy'] = requestParameters['orderBy']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['startDate'] != null) {
            queryParameters['startDate'] = (requestParameters['startDate'] as any).toISOString();
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['endDate'] = (requestParameters['endDate'] as any).toISOString();
        }

        if (requestParameters['dueBefore'] != null) {
            queryParameters['dueBefore'] = (requestParameters['dueBefore'] as any).toISOString();
        }

        if (requestParameters['minAmount'] != null) {
            queryParameters['minAmount'] = requestParameters['minAmount'];
        }

        if (requestParameters['maxAmount'] != null) {
            queryParameters['maxAmount'] = requestParameters['maxAmount'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{id}/invoices`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedOutputInvoiceFromJSON(jsonValue));
    }

    /**
     * Get billing invoices and payment history
     * Get organization invoices
     */
    async getOrganizationInvoices(requestParameters: GetOrganizationInvoicesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedOutputInvoice> {
        const response = await this.getOrganizationInvoicesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get current ownership information for the organization
     * Get organization ownership
     */
    async getOrganizationOwnershipRaw(requestParameters: GetOrganizationOwnershipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserSummary>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getOrganizationOwnership().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{id}/ownership`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserSummaryFromJSON(jsonValue));
    }

    /**
     * Get current ownership information for the organization
     * Get organization ownership
     */
    async getOrganizationOwnership(requestParameters: GetOrganizationOwnershipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserSummary> {
        const response = await this.getOrganizationOwnershipRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get organization configuration and settings
     * Get organization settings
     */
    async getOrganizationSettingsRaw(requestParameters: GetOrganizationSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganizationSettings>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getOrganizationSettings().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{id}/settings`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganizationSettingsFromJSON(jsonValue));
    }

    /**
     * Get organization configuration and settings
     * Get organization settings
     */
    async getOrganizationSettings(requestParameters: GetOrganizationSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganizationSettings> {
        const response = await this.getOrganizationSettingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get comprehensive organization statistics and metrics
     * Get organization statistics
     */
    async getOrganizationStatsRaw(requestParameters: GetOrganizationStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrgStats>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getOrganizationStats().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{id}/stats`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrgStatsFromJSON(jsonValue));
    }

    /**
     * Get comprehensive organization statistics and metrics
     * Get organization statistics
     */
    async getOrganizationStats(requestParameters: GetOrganizationStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrgStats> {
        const response = await this.getOrganizationStatsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get current usage statistics and limits
     * Get organization usage
     */
    async getOrganizationUsageRaw(requestParameters: GetOrganizationUsageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganizationUsage>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getOrganizationUsage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{id}/usage`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganizationUsageFromJSON(jsonValue));
    }

    /**
     * Get current usage statistics and limits
     * Get organization usage
     */
    async getOrganizationUsage(requestParameters: GetOrganizationUsageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganizationUsage> {
        const response = await this.getOrganizationUsageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all domains associated with the organization
     * List organization domains
     */
    async listOrganizationDomainsRaw(requestParameters: ListOrganizationDomainsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DomainsResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling listOrganizationDomains().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{id}/domains`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainsResponseFromJSON(jsonValue));
    }

    /**
     * List all domains associated with the organization
     * List organization domains
     */
    async listOrganizationDomains(requestParameters: ListOrganizationDomainsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainsResponse> {
        const response = await this.listOrganizationDomainsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List enabled and available features for the organization
     * List organization features
     */
    async listOrganizationFeaturesRaw(requestParameters: ListOrganizationFeaturesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<FeatureSummary>>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling listOrganizationFeatures().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{id}/features`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FeatureSummaryFromJSON));
    }

    /**
     * List enabled and available features for the organization
     * List organization features
     */
    async listOrganizationFeatures(requestParameters: ListOrganizationFeaturesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<FeatureSummary>> {
        const response = await this.listOrganizationFeaturesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List organizations with pagination and filtering (admin only for all orgs, users see their orgs)
     * List organizations
     */
    async listOrganizationsRaw(requestParameters: ListOrganizationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedOutputOrganizationSummary>> {
        const queryParameters: any = {};

        if (requestParameters['after'] != null) {
            queryParameters['after'] = requestParameters['after'];
        }

        if (requestParameters['before'] != null) {
            queryParameters['before'] = requestParameters['before'];
        }

        if (requestParameters['first'] != null) {
            queryParameters['first'] = requestParameters['first'];
        }

        if (requestParameters['last'] != null) {
            queryParameters['last'] = requestParameters['last'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['orderBy'] = requestParameters['orderBy']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['orgType'] != null) {
            queryParameters['orgType'] = requestParameters['orgType'];
        }

        if (requestParameters['plan'] != null) {
            queryParameters['plan'] = requestParameters['plan'];
        }

        if (requestParameters['active'] != null) {
            queryParameters['active'] = requestParameters['active'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['ownerId'] != null) {
            queryParameters['ownerId'] = requestParameters['ownerId'];
        }

        if (requestParameters['hasTrial'] != null) {
            queryParameters['hasTrial'] = requestParameters['hasTrial'];
        }

        if (requestParameters['ssoEnabled'] != null) {
            queryParameters['ssoEnabled'] = requestParameters['ssoEnabled'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/me/organizations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedOutputOrganizationSummaryFromJSON(jsonValue));
    }

    /**
     * List organizations with pagination and filtering (admin only for all orgs, users see their orgs)
     * List organizations
     */
    async listOrganizations(requestParameters: ListOrganizationsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedOutputOrganizationSummary> {
        const response = await this.listOrganizationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove a domain from the organization
     * Remove organization domain
     */
    async removeOrganizationDomainRaw(requestParameters: RemoveOrganizationDomainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling removeOrganizationDomain().'
            );
        }

        if (requestParameters['domain'] == null) {
            throw new runtime.RequiredError(
                'domain',
                'Required parameter "domain" was null or undefined when calling removeOrganizationDomain().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{id}/domains/{domain}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"domain"}}`, encodeURIComponent(String(requestParameters['domain']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Remove a domain from the organization
     * Remove organization domain
     */
    async removeOrganizationDomain(requestParameters: RemoveOrganizationDomainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmptyOutputBody> {
        const response = await this.removeOrganizationDomainRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Transfer ownership of the organization to another user
     * Transfer organization ownership
     */
    async transferOrganizationOwnershipRaw(requestParameters: TransferOrganizationOwnershipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransferOwnershipResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling transferOrganizationOwnership().'
            );
        }

        if (requestParameters['transferUserOwnershipRequest'] == null) {
            throw new runtime.RequiredError(
                'transferUserOwnershipRequest',
                'Required parameter "transferUserOwnershipRequest" was null or undefined when calling transferOrganizationOwnership().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{id}/transfer-ownership`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransferUserOwnershipRequestToJSON(requestParameters['transferUserOwnershipRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransferOwnershipResponseFromJSON(jsonValue));
    }

    /**
     * Transfer ownership of the organization to another user
     * Transfer organization ownership
     */
    async transferOrganizationOwnership(requestParameters: TransferOrganizationOwnershipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransferOwnershipResponse> {
        const response = await this.transferOrganizationOwnershipRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update organization information
     * Update organization
     */
    async updateOrganizationRaw(requestParameters: UpdateOrganizationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Organization>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateOrganization().'
            );
        }

        if (requestParameters['updateOrganizationRequest'] == null) {
            throw new runtime.RequiredError(
                'updateOrganizationRequest',
                'Required parameter "updateOrganizationRequest" was null or undefined when calling updateOrganization().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateOrganizationRequestToJSON(requestParameters['updateOrganizationRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganizationFromJSON(jsonValue));
    }

    /**
     * Update organization information
     * Update organization
     */
    async updateOrganization(requestParameters: UpdateOrganizationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Organization> {
        const response = await this.updateOrganizationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update organization configuration and settings
     * Update organization settings
     */
    async updateOrganizationSettingsRaw(requestParameters: UpdateOrganizationSettingsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganizationSettings>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateOrganizationSettings().'
            );
        }

        if (requestParameters['updateOrganizationSettingsRequest'] == null) {
            throw new runtime.RequiredError(
                'updateOrganizationSettingsRequest',
                'Required parameter "updateOrganizationSettingsRequest" was null or undefined when calling updateOrganizationSettings().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{id}/settings`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateOrganizationSettingsRequestToJSON(requestParameters['updateOrganizationSettingsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganizationSettingsFromJSON(jsonValue));
    }

    /**
     * Update organization configuration and settings
     * Update organization settings
     */
    async updateOrganizationSettings(requestParameters: UpdateOrganizationSettingsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganizationSettings> {
        const response = await this.updateOrganizationSettingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Verify domain ownership via DNS records
     * Verify organization domain
     */
    async verifyOrganizationDomainRaw(requestParameters: VerifyOrganizationDomainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DomainVerificationResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling verifyOrganizationDomain().'
            );
        }

        if (requestParameters['domain'] == null) {
            throw new runtime.RequiredError(
                'domain',
                'Required parameter "domain" was null or undefined when calling verifyOrganizationDomain().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{id}/domains/{domain}/verify`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"domain"}}`, encodeURIComponent(String(requestParameters['domain']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainVerificationResponseFromJSON(jsonValue));
    }

    /**
     * Verify domain ownership via DNS records
     * Verify organization domain
     */
    async verifyOrganizationDomain(requestParameters: VerifyOrganizationDomainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainVerificationResponse> {
        const response = await this.verifyOrganizationDomainRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetOrganizationInvoicesStatusEnum = {
    Draft: 'draft',
    Open: 'open',
    Paid: 'paid',
    Void: 'void',
    Uncollectible: 'uncollectible'
} as const;
export type GetOrganizationInvoicesStatusEnum = typeof GetOrganizationInvoicesStatusEnum[keyof typeof GetOrganizationInvoicesStatusEnum];
