/* tslint:disable */
/* eslint-disable */
/**
 * My Project
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    InlineResponse400,
    InlineResponse400FromJSON,
    InlineResponse400ToJSON,
    OrganizationUsage,
    OrganizationUsageFromJSON,
    OrganizationUsageToJSON,
} from '../models';

export interface GetOrganizationUsageRequest {
    id: string;
}

/**
 * UsageApi - interface
 * 
 * @export
 * @interface UsageApiInterface
 */
export interface UsageApiInterface {
    /**
     * Get current usage statistics and limits
     * @summary Get organization usage
     * @param {string} id Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsageApiInterface
     */
    getOrganizationUsageRaw(requestParameters: GetOrganizationUsageRequest): Promise<runtime.ApiResponse<OrganizationUsage>>;

    /**
     * Get current usage statistics and limits
     * Get organization usage
     */
    getOrganizationUsage(requestParameters: GetOrganizationUsageRequest): Promise<OrganizationUsage>;

}

/**
 * 
 */
export class UsageApi extends runtime.BaseAPI implements UsageApiInterface {

    /**
     * Get current usage statistics and limits
     * Get organization usage
     */
    async getOrganizationUsageRaw(requestParameters: GetOrganizationUsageRequest): Promise<runtime.ApiResponse<OrganizationUsage>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getOrganizationUsage.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{id}/usage`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganizationUsageFromJSON(jsonValue));
    }

    /**
     * Get current usage statistics and limits
     * Get organization usage
     */
    async getOrganizationUsage(requestParameters: GetOrganizationUsageRequest): Promise<OrganizationUsage> {
        const response = await this.getOrganizationUsageRaw(requestParameters);
        return await response.value();
    }

}
