/* tslint:disable */
/* eslint-disable */
/**
 * My Project
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    EmptyOutputBody,
    EmptyOutputBodyFromJSON,
    EmptyOutputBodyToJSON,
    InlineResponse400,
    InlineResponse400FromJSON,
    InlineResponse400ToJSON,
} from '../models';

export interface DeletePasskeyRequest {
    id: string;
}

/**
 * PasskeysApi - interface
 * 
 * @export
 * @interface PasskeysApiInterface
 */
export interface PasskeysApiInterface {
    /**
     * Begin WebAuthn passkey authentication process
     * @summary Begin passkey authentication
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PasskeysApiInterface
     */
    beginPasskeyAuthenticationRaw(): Promise<runtime.ApiResponse<EmptyOutputBody>>;

    /**
     * Begin WebAuthn passkey authentication process
     * Begin passkey authentication
     */
    beginPasskeyAuthentication(): Promise<EmptyOutputBody>;

    /**
     * Begin WebAuthn passkey registration process
     * @summary Begin passkey registration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PasskeysApiInterface
     */
    beginPasskeyRegistrationRaw(): Promise<runtime.ApiResponse<EmptyOutputBody>>;

    /**
     * Begin WebAuthn passkey registration process
     * Begin passkey registration
     */
    beginPasskeyRegistration(): Promise<EmptyOutputBody>;

    /**
     * Delete a specific passkey
     * @summary Delete passkey
     * @param {string} id Passkey ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PasskeysApiInterface
     */
    deletePasskeyRaw(requestParameters: DeletePasskeyRequest): Promise<runtime.ApiResponse<EmptyOutputBody>>;

    /**
     * Delete a specific passkey
     * Delete passkey
     */
    deletePasskey(requestParameters: DeletePasskeyRequest): Promise<EmptyOutputBody>;

    /**
     * Complete WebAuthn passkey authentication process
     * @summary Finish passkey authentication
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PasskeysApiInterface
     */
    finishPasskeyAuthenticationRaw(): Promise<runtime.ApiResponse<EmptyOutputBody>>;

    /**
     * Complete WebAuthn passkey authentication process
     * Finish passkey authentication
     */
    finishPasskeyAuthentication(): Promise<EmptyOutputBody>;

    /**
     * Complete WebAuthn passkey registration process
     * @summary Finish passkey registration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PasskeysApiInterface
     */
    finishPasskeyRegistrationRaw(): Promise<runtime.ApiResponse<EmptyOutputBody>>;

    /**
     * Complete WebAuthn passkey registration process
     * Finish passkey registration
     */
    finishPasskeyRegistration(): Promise<EmptyOutputBody>;

    /**
     * List all passkeys registered for the current user
     * @summary List user passkeys
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PasskeysApiInterface
     */
    listPasskeysRaw(): Promise<runtime.ApiResponse<EmptyOutputBody>>;

    /**
     * List all passkeys registered for the current user
     * List user passkeys
     */
    listPasskeys(): Promise<EmptyOutputBody>;

}

/**
 * 
 */
export class PasskeysApi extends runtime.BaseAPI implements PasskeysApiInterface {

    /**
     * Begin WebAuthn passkey authentication process
     * Begin passkey authentication
     */
    async beginPasskeyAuthenticationRaw(): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/public/auth/passkeys/authenticate/begin`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Begin WebAuthn passkey authentication process
     * Begin passkey authentication
     */
    async beginPasskeyAuthentication(): Promise<EmptyOutputBody> {
        const response = await this.beginPasskeyAuthenticationRaw();
        return await response.value();
    }

    /**
     * Begin WebAuthn passkey registration process
     * Begin passkey registration
     */
    async beginPasskeyRegistrationRaw(): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/auth/passkeys/register/begin`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Begin WebAuthn passkey registration process
     * Begin passkey registration
     */
    async beginPasskeyRegistration(): Promise<EmptyOutputBody> {
        const response = await this.beginPasskeyRegistrationRaw();
        return await response.value();
    }

    /**
     * Delete a specific passkey
     * Delete passkey
     */
    async deletePasskeyRaw(requestParameters: DeletePasskeyRequest): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deletePasskey.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/auth/passkeys/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Delete a specific passkey
     * Delete passkey
     */
    async deletePasskey(requestParameters: DeletePasskeyRequest): Promise<EmptyOutputBody> {
        const response = await this.deletePasskeyRaw(requestParameters);
        return await response.value();
    }

    /**
     * Complete WebAuthn passkey authentication process
     * Finish passkey authentication
     */
    async finishPasskeyAuthenticationRaw(): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/public/auth/passkeys/authenticate/finish`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Complete WebAuthn passkey authentication process
     * Finish passkey authentication
     */
    async finishPasskeyAuthentication(): Promise<EmptyOutputBody> {
        const response = await this.finishPasskeyAuthenticationRaw();
        return await response.value();
    }

    /**
     * Complete WebAuthn passkey registration process
     * Finish passkey registration
     */
    async finishPasskeyRegistrationRaw(): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/auth/passkeys/register/finish`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Complete WebAuthn passkey registration process
     * Finish passkey registration
     */
    async finishPasskeyRegistration(): Promise<EmptyOutputBody> {
        const response = await this.finishPasskeyRegistrationRaw();
        return await response.value();
    }

    /**
     * List all passkeys registered for the current user
     * List user passkeys
     */
    async listPasskeysRaw(): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/auth/passkeys`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * List all passkeys registered for the current user
     * List user passkeys
     */
    async listPasskeys(): Promise<EmptyOutputBody> {
        const response = await this.listPasskeysRaw();
        return await response.value();
    }

}
