/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BulkDeletePasskeysRequest,
  BulkDeletePasskeysResponse,
  CleanupUnusedPasskeysResponse,
  CreatePasskeyRequest,
  EmptyOutputBody,
  GetGlobalActivityStats400Response,
  PaginatedOutputPasskeyActivity,
  PaginatedOutputPasskeySummary,
  Passkey,
  PasskeyAuthenticationBeginRequest,
  PasskeyAuthenticationBeginResponse,
  PasskeyAuthenticationFinishRequest,
  PasskeyAuthenticationFinishResponse,
  PasskeyBackupRequest,
  PasskeyBackupResponse,
  PasskeyDiscoveryRequest,
  PasskeyDiscoveryResponse,
  PasskeyExportRequest,
  PasskeyExportResponse,
  PasskeyRegistrationBeginRequest,
  PasskeyRegistrationBeginResponse,
  PasskeyRegistrationFinishRequest,
  PasskeyRegistrationFinishResponse,
  PasskeyStats,
  PasskeySummary,
  PasskeyVerificationRequest,
  PasskeyVerificationResponse,
  UpdatePasskeyRequest,
  ValidateCredentialIDInputBody,
} from '../models/index';
import {
    BulkDeletePasskeysRequestFromJSON,
    BulkDeletePasskeysRequestToJSON,
    BulkDeletePasskeysResponseFromJSON,
    BulkDeletePasskeysResponseToJSON,
    CleanupUnusedPasskeysResponseFromJSON,
    CleanupUnusedPasskeysResponseToJSON,
    CreatePasskeyRequestFromJSON,
    CreatePasskeyRequestToJSON,
    EmptyOutputBodyFromJSON,
    EmptyOutputBodyToJSON,
    GetGlobalActivityStats400ResponseFromJSON,
    GetGlobalActivityStats400ResponseToJSON,
    PaginatedOutputPasskeyActivityFromJSON,
    PaginatedOutputPasskeyActivityToJSON,
    PaginatedOutputPasskeySummaryFromJSON,
    PaginatedOutputPasskeySummaryToJSON,
    PasskeyFromJSON,
    PasskeyToJSON,
    PasskeyAuthenticationBeginRequestFromJSON,
    PasskeyAuthenticationBeginRequestToJSON,
    PasskeyAuthenticationBeginResponseFromJSON,
    PasskeyAuthenticationBeginResponseToJSON,
    PasskeyAuthenticationFinishRequestFromJSON,
    PasskeyAuthenticationFinishRequestToJSON,
    PasskeyAuthenticationFinishResponseFromJSON,
    PasskeyAuthenticationFinishResponseToJSON,
    PasskeyBackupRequestFromJSON,
    PasskeyBackupRequestToJSON,
    PasskeyBackupResponseFromJSON,
    PasskeyBackupResponseToJSON,
    PasskeyDiscoveryRequestFromJSON,
    PasskeyDiscoveryRequestToJSON,
    PasskeyDiscoveryResponseFromJSON,
    PasskeyDiscoveryResponseToJSON,
    PasskeyExportRequestFromJSON,
    PasskeyExportRequestToJSON,
    PasskeyExportResponseFromJSON,
    PasskeyExportResponseToJSON,
    PasskeyRegistrationBeginRequestFromJSON,
    PasskeyRegistrationBeginRequestToJSON,
    PasskeyRegistrationBeginResponseFromJSON,
    PasskeyRegistrationBeginResponseToJSON,
    PasskeyRegistrationFinishRequestFromJSON,
    PasskeyRegistrationFinishRequestToJSON,
    PasskeyRegistrationFinishResponseFromJSON,
    PasskeyRegistrationFinishResponseToJSON,
    PasskeyStatsFromJSON,
    PasskeyStatsToJSON,
    PasskeySummaryFromJSON,
    PasskeySummaryToJSON,
    PasskeyVerificationRequestFromJSON,
    PasskeyVerificationRequestToJSON,
    PasskeyVerificationResponseFromJSON,
    PasskeyVerificationResponseToJSON,
    UpdatePasskeyRequestFromJSON,
    UpdatePasskeyRequestToJSON,
    ValidateCredentialIDInputBodyFromJSON,
    ValidateCredentialIDInputBodyToJSON,
} from '../models/index';

export interface BeginPasskeyAuthenticationRequest {
    passkeyAuthenticationBeginRequest: Omit<PasskeyAuthenticationBeginRequest, '$schema'>;
}

export interface BeginPasskeyRegistrationRequest {
    passkeyRegistrationBeginRequest: Omit<PasskeyRegistrationBeginRequest, '$schema'>;
}

export interface BulkDeletePasskeysOperationRequest {
    orgId: string;
    bulkDeletePasskeysRequest: Omit<BulkDeletePasskeysRequest, '$schema'>;
}

export interface CleanupUnusedPasskeysRequest {
    orgId: string;
    days?: number;
}

export interface CreateOrganizationPasskeyRequest {
    orgId: string;
    userId: string;
    createPasskeyRequest: Omit<CreatePasskeyRequest, '$schema'>;
}

export interface DeactivateUserPasskeysRequest {
    orgId: string;
    userId: string;
}

export interface DeleteOrganizationPasskeyRequest {
    orgId: string;
    id: string;
}

export interface DiscoverPasskeysRequest {
    passkeyDiscoveryRequest: Omit<PasskeyDiscoveryRequest, '$schema'>;
}

export interface ExportPasskeyDataRequest {
    orgId: string;
    passkeyExportRequest: Omit<PasskeyExportRequest, '$schema'>;
}

export interface FinishPasskeyAuthenticationRequest {
    passkeyAuthenticationFinishRequest: Omit<PasskeyAuthenticationFinishRequest, '$schema'>;
}

export interface FinishPasskeyRegistrationRequest {
    passkeyRegistrationFinishRequest: Omit<PasskeyRegistrationFinishRequest, '$schema'>;
}

export interface GetOrganizationPasskeyRequest {
    orgId: string;
    id: string;
}

export interface GetPasskeyActivityRequest {
    orgId: string;
    after?: string;
    before?: string;
    first?: number;
    last?: number;
    limit?: number;
    offset?: number;
    fields?: Array<string> | null;
    orderBy?: Array<string> | null;
    page?: number;
    passkeyId?: string;
    userId?: string;
    action?: string;
    success?: boolean;
    startDate?: Date;
    endDate?: Date;
}

export interface GetPasskeyStatsRequest {
    orgId: string;
    userId?: string;
}

export interface GetUnusedPasskeysRequest {
    orgId: string;
    userId: string;
    days?: number;
}

export interface GetUserPasskeysRequest {
    orgId: string;
    userId: string;
    activeOnly?: boolean;
}

export interface ListOrganizationPasskeysRequest {
    orgId: string;
    after?: string;
    before?: string;
    first?: number;
    last?: number;
    limit?: number;
    offset?: number;
    fields?: Array<string> | null;
    orderBy?: Array<string> | null;
    page?: number;
    userId?: string;
    active?: boolean;
    deviceType?: string;
    search?: string;
}

export interface UpdateBackupStateRequest {
    orgId: string;
    passkeyBackupRequest: Omit<PasskeyBackupRequest, '$schema'>;
}

export interface UpdateOrganizationPasskeyRequest {
    orgId: string;
    id: string;
    updatePasskeyRequest: Omit<UpdatePasskeyRequest, '$schema'>;
}

export interface ValidateCredentialIDRequest {
    orgId: string;
    validateCredentialIDInputBody: Omit<ValidateCredentialIDInputBody, '$schema'>;
}

export interface VerifyPasskeyRequest {
    orgId: string;
    passkeyVerificationRequest: Omit<PasskeyVerificationRequest, '$schema'>;
}

/**
 * 
 */
export class PasskeysApi extends runtime.BaseAPI {

    /**
     * Start the WebAuthn passkey authentication process
     * Begin passkey authentication
     */
    async beginPasskeyAuthenticationRaw(requestParameters: BeginPasskeyAuthenticationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PasskeyAuthenticationBeginResponse>> {
        if (requestParameters['passkeyAuthenticationBeginRequest'] == null) {
            throw new runtime.RequiredError(
                'passkeyAuthenticationBeginRequest',
                'Required parameter "passkeyAuthenticationBeginRequest" was null or undefined when calling beginPasskeyAuthentication().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/public/passkeys/authentication/begin`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PasskeyAuthenticationBeginRequestToJSON(requestParameters['passkeyAuthenticationBeginRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PasskeyAuthenticationBeginResponseFromJSON(jsonValue));
    }

    /**
     * Start the WebAuthn passkey authentication process
     * Begin passkey authentication
     */
    async beginPasskeyAuthentication(requestParameters: BeginPasskeyAuthenticationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PasskeyAuthenticationBeginResponse> {
        const response = await this.beginPasskeyAuthenticationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Start the WebAuthn passkey registration process
     * Begin passkey registration
     */
    async beginPasskeyRegistrationRaw(requestParameters: BeginPasskeyRegistrationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PasskeyRegistrationBeginResponse>> {
        if (requestParameters['passkeyRegistrationBeginRequest'] == null) {
            throw new runtime.RequiredError(
                'passkeyRegistrationBeginRequest',
                'Required parameter "passkeyRegistrationBeginRequest" was null or undefined when calling beginPasskeyRegistration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/public/passkeys/registration/begin`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PasskeyRegistrationBeginRequestToJSON(requestParameters['passkeyRegistrationBeginRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PasskeyRegistrationBeginResponseFromJSON(jsonValue));
    }

    /**
     * Start the WebAuthn passkey registration process
     * Begin passkey registration
     */
    async beginPasskeyRegistration(requestParameters: BeginPasskeyRegistrationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PasskeyRegistrationBeginResponse> {
        const response = await this.beginPasskeyRegistrationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete multiple passkeys at once
     * Bulk delete passkeys
     */
    async bulkDeletePasskeysRaw(requestParameters: BulkDeletePasskeysOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BulkDeletePasskeysResponse>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling bulkDeletePasskeys().'
            );
        }

        if (requestParameters['bulkDeletePasskeysRequest'] == null) {
            throw new runtime.RequiredError(
                'bulkDeletePasskeysRequest',
                'Required parameter "bulkDeletePasskeysRequest" was null or undefined when calling bulkDeletePasskeys().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/passkeys/bulk`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: BulkDeletePasskeysRequestToJSON(requestParameters['bulkDeletePasskeysRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BulkDeletePasskeysResponseFromJSON(jsonValue));
    }

    /**
     * Delete multiple passkeys at once
     * Bulk delete passkeys
     */
    async bulkDeletePasskeys(requestParameters: BulkDeletePasskeysOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BulkDeletePasskeysResponse> {
        const response = await this.bulkDeletePasskeysRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove passkeys that haven\'t been used for a specified period
     * Cleanup unused passkeys
     */
    async cleanupUnusedPasskeysRaw(requestParameters: CleanupUnusedPasskeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CleanupUnusedPasskeysResponse>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling cleanupUnusedPasskeys().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['days'] != null) {
            queryParameters['days'] = requestParameters['days'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/passkeys/cleanup`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CleanupUnusedPasskeysResponseFromJSON(jsonValue));
    }

    /**
     * Remove passkeys that haven\'t been used for a specified period
     * Cleanup unused passkeys
     */
    async cleanupUnusedPasskeys(requestParameters: CleanupUnusedPasskeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CleanupUnusedPasskeysResponse> {
        const response = await this.cleanupUnusedPasskeysRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new passkey for a user
     * Create passkey
     */
    async createOrganizationPasskeyRaw(requestParameters: CreateOrganizationPasskeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Passkey>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling createOrganizationPasskey().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling createOrganizationPasskey().'
            );
        }

        if (requestParameters['createPasskeyRequest'] == null) {
            throw new runtime.RequiredError(
                'createPasskeyRequest',
                'Required parameter "createPasskeyRequest" was null or undefined when calling createOrganizationPasskey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/users/{userId}/passkeys`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreatePasskeyRequestToJSON(requestParameters['createPasskeyRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PasskeyFromJSON(jsonValue));
    }

    /**
     * Create a new passkey for a user
     * Create passkey
     */
    async createOrganizationPasskey(requestParameters: CreateOrganizationPasskeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Passkey> {
        const response = await this.createOrganizationPasskeyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deactivate all passkeys for a specific user
     * Deactivate user passkeys
     */
    async deactivateUserPasskeysRaw(requestParameters: DeactivateUserPasskeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling deactivateUserPasskeys().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling deactivateUserPasskeys().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/users/{userId}/passkeys`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Deactivate all passkeys for a specific user
     * Deactivate user passkeys
     */
    async deactivateUserPasskeys(requestParameters: DeactivateUserPasskeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmptyOutputBody> {
        const response = await this.deactivateUserPasskeysRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a passkey by ID
     * Delete passkey
     */
    async deleteOrganizationPasskeyRaw(requestParameters: DeleteOrganizationPasskeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling deleteOrganizationPasskey().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteOrganizationPasskey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/passkeys/{id}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Delete a passkey by ID
     * Delete passkey
     */
    async deleteOrganizationPasskey(requestParameters: DeleteOrganizationPasskeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmptyOutputBody> {
        const response = await this.deleteOrganizationPasskeyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Discover available passkeys for a user
     * Discover passkeys
     */
    async discoverPasskeysRaw(requestParameters: DiscoverPasskeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PasskeyDiscoveryResponse>> {
        if (requestParameters['passkeyDiscoveryRequest'] == null) {
            throw new runtime.RequiredError(
                'passkeyDiscoveryRequest',
                'Required parameter "passkeyDiscoveryRequest" was null or undefined when calling discoverPasskeys().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/public/passkeys/discover`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PasskeyDiscoveryRequestToJSON(requestParameters['passkeyDiscoveryRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PasskeyDiscoveryResponseFromJSON(jsonValue));
    }

    /**
     * Discover available passkeys for a user
     * Discover passkeys
     */
    async discoverPasskeys(requestParameters: DiscoverPasskeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PasskeyDiscoveryResponse> {
        const response = await this.discoverPasskeysRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Export passkey data in various formats
     * Export passkey data
     */
    async exportPasskeyDataRaw(requestParameters: ExportPasskeyDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PasskeyExportResponse>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling exportPasskeyData().'
            );
        }

        if (requestParameters['passkeyExportRequest'] == null) {
            throw new runtime.RequiredError(
                'passkeyExportRequest',
                'Required parameter "passkeyExportRequest" was null or undefined when calling exportPasskeyData().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/passkeys/export`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PasskeyExportRequestToJSON(requestParameters['passkeyExportRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PasskeyExportResponseFromJSON(jsonValue));
    }

    /**
     * Export passkey data in various formats
     * Export passkey data
     */
    async exportPasskeyData(requestParameters: ExportPasskeyDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PasskeyExportResponse> {
        const response = await this.exportPasskeyDataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Complete the WebAuthn passkey authentication process
     * Finish passkey authentication
     */
    async finishPasskeyAuthenticationRaw(requestParameters: FinishPasskeyAuthenticationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PasskeyAuthenticationFinishResponse>> {
        if (requestParameters['passkeyAuthenticationFinishRequest'] == null) {
            throw new runtime.RequiredError(
                'passkeyAuthenticationFinishRequest',
                'Required parameter "passkeyAuthenticationFinishRequest" was null or undefined when calling finishPasskeyAuthentication().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/public/passkeys/authentication/finish`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PasskeyAuthenticationFinishRequestToJSON(requestParameters['passkeyAuthenticationFinishRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PasskeyAuthenticationFinishResponseFromJSON(jsonValue));
    }

    /**
     * Complete the WebAuthn passkey authentication process
     * Finish passkey authentication
     */
    async finishPasskeyAuthentication(requestParameters: FinishPasskeyAuthenticationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PasskeyAuthenticationFinishResponse> {
        const response = await this.finishPasskeyAuthenticationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Complete the WebAuthn passkey registration process
     * Finish passkey registration
     */
    async finishPasskeyRegistrationRaw(requestParameters: FinishPasskeyRegistrationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PasskeyRegistrationFinishResponse>> {
        if (requestParameters['passkeyRegistrationFinishRequest'] == null) {
            throw new runtime.RequiredError(
                'passkeyRegistrationFinishRequest',
                'Required parameter "passkeyRegistrationFinishRequest" was null or undefined when calling finishPasskeyRegistration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/public/passkeys/registration/finish`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PasskeyRegistrationFinishRequestToJSON(requestParameters['passkeyRegistrationFinishRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PasskeyRegistrationFinishResponseFromJSON(jsonValue));
    }

    /**
     * Complete the WebAuthn passkey registration process
     * Finish passkey registration
     */
    async finishPasskeyRegistration(requestParameters: FinishPasskeyRegistrationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PasskeyRegistrationFinishResponse> {
        const response = await this.finishPasskeyRegistrationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a specific passkey by ID
     * Get passkey
     */
    async getOrganizationPasskeyRaw(requestParameters: GetOrganizationPasskeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Passkey>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling getOrganizationPasskey().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getOrganizationPasskey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/passkeys/{id}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PasskeyFromJSON(jsonValue));
    }

    /**
     * Get a specific passkey by ID
     * Get passkey
     */
    async getOrganizationPasskey(requestParameters: GetOrganizationPasskeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Passkey> {
        const response = await this.getOrganizationPasskeyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get passkey activity logs with filtering
     * Get passkey activity
     */
    async getPasskeyActivityRaw(requestParameters: GetPasskeyActivityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedOutputPasskeyActivity>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling getPasskeyActivity().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['after'] != null) {
            queryParameters['after'] = requestParameters['after'];
        }

        if (requestParameters['before'] != null) {
            queryParameters['before'] = requestParameters['before'];
        }

        if (requestParameters['first'] != null) {
            queryParameters['first'] = requestParameters['first'];
        }

        if (requestParameters['last'] != null) {
            queryParameters['last'] = requestParameters['last'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['orderBy'] = requestParameters['orderBy']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['passkeyId'] != null) {
            queryParameters['passkeyId'] = requestParameters['passkeyId'];
        }

        if (requestParameters['userId'] != null) {
            queryParameters['userId'] = requestParameters['userId'];
        }

        if (requestParameters['action'] != null) {
            queryParameters['action'] = requestParameters['action'];
        }

        if (requestParameters['success'] != null) {
            queryParameters['success'] = requestParameters['success'];
        }

        if (requestParameters['startDate'] != null) {
            queryParameters['startDate'] = (requestParameters['startDate'] as any).toISOString();
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['endDate'] = (requestParameters['endDate'] as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/passkeys/activity`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedOutputPasskeyActivityFromJSON(jsonValue));
    }

    /**
     * Get passkey activity logs with filtering
     * Get passkey activity
     */
    async getPasskeyActivity(requestParameters: GetPasskeyActivityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedOutputPasskeyActivity> {
        const response = await this.getPasskeyActivityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get comprehensive passkey usage statistics
     * Get passkey statistics
     */
    async getPasskeyStatsRaw(requestParameters: GetPasskeyStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PasskeyStats>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling getPasskeyStats().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['userId'] != null) {
            queryParameters['userId'] = requestParameters['userId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/passkeys/stats`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PasskeyStatsFromJSON(jsonValue));
    }

    /**
     * Get comprehensive passkey usage statistics
     * Get passkey statistics
     */
    async getPasskeyStats(requestParameters: GetPasskeyStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PasskeyStats> {
        const response = await this.getPasskeyStatsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get passkeys that haven\'t been used for a specified period
     * Get unused passkeys
     */
    async getUnusedPasskeysRaw(requestParameters: GetUnusedPasskeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PasskeySummary>>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling getUnusedPasskeys().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getUnusedPasskeys().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['days'] != null) {
            queryParameters['days'] = requestParameters['days'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/users/{userId}/passkeys/unused`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PasskeySummaryFromJSON));
    }

    /**
     * Get passkeys that haven\'t been used for a specified period
     * Get unused passkeys
     */
    async getUnusedPasskeys(requestParameters: GetUnusedPasskeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PasskeySummary>> {
        const response = await this.getUnusedPasskeysRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all passkeys for a specific user
     * Get user passkeys
     */
    async getUserPasskeysRaw(requestParameters: GetUserPasskeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PasskeySummary>>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling getUserPasskeys().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getUserPasskeys().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['activeOnly'] != null) {
            queryParameters['activeOnly'] = requestParameters['activeOnly'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/users/{userId}/passkeys`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PasskeySummaryFromJSON));
    }

    /**
     * Get all passkeys for a specific user
     * Get user passkeys
     */
    async getUserPasskeys(requestParameters: GetUserPasskeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PasskeySummary>> {
        const response = await this.getUserPasskeysRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List passkeys with filtering and pagination
     * List passkeys
     */
    async listOrganizationPasskeysRaw(requestParameters: ListOrganizationPasskeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedOutputPasskeySummary>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling listOrganizationPasskeys().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['after'] != null) {
            queryParameters['after'] = requestParameters['after'];
        }

        if (requestParameters['before'] != null) {
            queryParameters['before'] = requestParameters['before'];
        }

        if (requestParameters['first'] != null) {
            queryParameters['first'] = requestParameters['first'];
        }

        if (requestParameters['last'] != null) {
            queryParameters['last'] = requestParameters['last'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['orderBy'] = requestParameters['orderBy']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['userId'] != null) {
            queryParameters['userId'] = requestParameters['userId'];
        }

        if (requestParameters['active'] != null) {
            queryParameters['active'] = requestParameters['active'];
        }

        if (requestParameters['deviceType'] != null) {
            queryParameters['deviceType'] = requestParameters['deviceType'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/passkeys`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedOutputPasskeySummaryFromJSON(jsonValue));
    }

    /**
     * List passkeys with filtering and pagination
     * List passkeys
     */
    async listOrganizationPasskeys(requestParameters: ListOrganizationPasskeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedOutputPasskeySummary> {
        const response = await this.listOrganizationPasskeysRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update backup state for multiple passkeys
     * Update backup state
     */
    async updateBackupStateRaw(requestParameters: UpdateBackupStateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PasskeyBackupResponse>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling updateBackupState().'
            );
        }

        if (requestParameters['passkeyBackupRequest'] == null) {
            throw new runtime.RequiredError(
                'passkeyBackupRequest',
                'Required parameter "passkeyBackupRequest" was null or undefined when calling updateBackupState().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/passkeys/backup`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PasskeyBackupRequestToJSON(requestParameters['passkeyBackupRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PasskeyBackupResponseFromJSON(jsonValue));
    }

    /**
     * Update backup state for multiple passkeys
     * Update backup state
     */
    async updateBackupState(requestParameters: UpdateBackupStateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PasskeyBackupResponse> {
        const response = await this.updateBackupStateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a passkey\'s properties
     * Update passkey
     */
    async updateOrganizationPasskeyRaw(requestParameters: UpdateOrganizationPasskeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Passkey>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling updateOrganizationPasskey().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateOrganizationPasskey().'
            );
        }

        if (requestParameters['updatePasskeyRequest'] == null) {
            throw new runtime.RequiredError(
                'updatePasskeyRequest',
                'Required parameter "updatePasskeyRequest" was null or undefined when calling updateOrganizationPasskey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/passkeys/{id}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdatePasskeyRequestToJSON(requestParameters['updatePasskeyRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PasskeyFromJSON(jsonValue));
    }

    /**
     * Update a passkey\'s properties
     * Update passkey
     */
    async updateOrganizationPasskey(requestParameters: UpdateOrganizationPasskeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Passkey> {
        const response = await this.updateOrganizationPasskeyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Validate a WebAuthn credential ID
     * Validate credential ID
     */
    async validateCredentialIDRaw(requestParameters: ValidateCredentialIDRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Passkey>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling validateCredentialID().'
            );
        }

        if (requestParameters['validateCredentialIDInputBody'] == null) {
            throw new runtime.RequiredError(
                'validateCredentialIDInputBody',
                'Required parameter "validateCredentialIDInputBody" was null or undefined when calling validateCredentialID().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/passkeys/validate`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ValidateCredentialIDInputBodyToJSON(requestParameters['validateCredentialIDInputBody']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PasskeyFromJSON(jsonValue));
    }

    /**
     * Validate a WebAuthn credential ID
     * Validate credential ID
     */
    async validateCredentialID(requestParameters: ValidateCredentialIDRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Passkey> {
        const response = await this.validateCredentialIDRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Verify a passkey credential
     * Verify passkey
     */
    async verifyPasskeyRaw(requestParameters: VerifyPasskeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PasskeyVerificationResponse>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling verifyPasskey().'
            );
        }

        if (requestParameters['passkeyVerificationRequest'] == null) {
            throw new runtime.RequiredError(
                'passkeyVerificationRequest',
                'Required parameter "passkeyVerificationRequest" was null or undefined when calling verifyPasskey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/passkeys/verify`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PasskeyVerificationRequestToJSON(requestParameters['passkeyVerificationRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PasskeyVerificationResponseFromJSON(jsonValue));
    }

    /**
     * Verify a passkey credential
     * Verify passkey
     */
    async verifyPasskey(requestParameters: VerifyPasskeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PasskeyVerificationResponse> {
        const response = await this.verifyPasskeyRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
