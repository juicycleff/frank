/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HealthStatus,
} from '../models/index';
import {
    HealthStatusFromJSON,
    HealthStatusToJSON,
} from '../models/index';

/**
 * 
 */
export class HealthApi extends runtime.BaseAPI {

    /**
     * Comprehensive health check with detailed component status
     * Detailed health check
     */
    async detailedHealthCheckRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HealthStatus>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/health/detailed`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HealthStatusFromJSON(jsonValue));
    }

    /**
     * Comprehensive health check with detailed component status
     * Detailed health check
     */
    async detailedHealthCheck(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HealthStatus> {
        const response = await this.detailedHealthCheckRaw(initOverrides);
        return await response.value();
    }

    /**
     * Basic health check endpoint to verify the service is running
     * Health check
     */
    async healthCheckRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HealthStatus>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/health`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HealthStatusFromJSON(jsonValue));
    }

    /**
     * Basic health check endpoint to verify the service is running
     * Health check
     */
    async healthCheck(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HealthStatus> {
        const response = await this.healthCheckRaw(initOverrides);
        return await response.value();
    }

    /**
     * Liveness probe to check if the service is alive
     * Liveness check
     */
    async livenessCheckRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HealthStatus>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/live`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HealthStatusFromJSON(jsonValue));
    }

    /**
     * Liveness probe to check if the service is alive
     * Liveness check
     */
    async livenessCheck(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HealthStatus> {
        const response = await this.livenessCheckRaw(initOverrides);
        return await response.value();
    }

    /**
     * Readiness probe to check if the service is ready to serve traffic
     * Readiness check
     */
    async readinessCheckRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HealthStatus>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/ready`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HealthStatusFromJSON(jsonValue));
    }

    /**
     * Readiness probe to check if the service is ready to serve traffic
     * Readiness check
     */
    async readinessCheck(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HealthStatus> {
        const response = await this.readinessCheckRaw(initOverrides);
        return await response.value();
    }

}
