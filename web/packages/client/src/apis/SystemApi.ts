/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  OrganizationManagement,
  PlatformOverview,
  PlatformStatistics,
  SystemPlatformMetrics,
} from '../models/index';
import {
    OrganizationManagementFromJSON,
    OrganizationManagementToJSON,
    PlatformOverviewFromJSON,
    PlatformOverviewToJSON,
    PlatformStatisticsFromJSON,
    PlatformStatisticsToJSON,
    SystemPlatformMetricsFromJSON,
    SystemPlatformMetricsToJSON,
} from '../models/index';

export interface GetOrganizationManagementRequest {
    after?: string;
    before?: string;
    first?: number;
    last?: number;
    limit?: number;
    offset?: number;
    fields?: Array<string> | null;
    orderBy?: Array<string> | null;
    page?: number;
    status?: Array<string> | null;
    plan?: Array<string> | null;
    riskLevel?: Array<string> | null;
    search?: string;
    startDate?: Date;
    endDate?: Date;
}

export interface GetPlatformStatisticsRequest {
    period?: string;
    startDate?: Date;
    endDate?: Date;
}

export interface GetSystemPlatformMetricsRequest {
    interval?: string;
    metrics?: Array<string> | null;
    startDate?: Date;
    endDate?: Date;
}

/**
 * 
 */
export class SystemApi extends runtime.BaseAPI {

    /**
     * Get comprehensive organization management and monitoring data
     * Get organization management data
     */
    async getOrganizationManagementRaw(requestParameters: GetOrganizationManagementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganizationManagement>> {
        const queryParameters: any = {};

        if (requestParameters['after'] != null) {
            queryParameters['after'] = requestParameters['after'];
        }

        if (requestParameters['before'] != null) {
            queryParameters['before'] = requestParameters['before'];
        }

        if (requestParameters['first'] != null) {
            queryParameters['first'] = requestParameters['first'];
        }

        if (requestParameters['last'] != null) {
            queryParameters['last'] = requestParameters['last'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['orderBy'] = requestParameters['orderBy']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['plan'] != null) {
            queryParameters['plan'] = requestParameters['plan']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['riskLevel'] != null) {
            queryParameters['riskLevel'] = requestParameters['riskLevel']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['startDate'] != null) {
            queryParameters['startDate'] = (requestParameters['startDate'] as any).toISOString();
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['endDate'] = (requestParameters['endDate'] as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["view:all_organizations"]);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/internal/organizations/manage`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganizationManagementFromJSON(jsonValue));
    }

    /**
     * Get comprehensive organization management and monitoring data
     * Get organization management data
     */
    async getOrganizationManagement(requestParameters: GetOrganizationManagementRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganizationManagement> {
        const response = await this.getOrganizationManagementRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get comprehensive platform overview with key metrics and status
     * Get platform overview
     */
    async getPlatformOverviewRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlatformOverview>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["view:platform_metrics"]);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/internal/platform/overview`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlatformOverviewFromJSON(jsonValue));
    }

    /**
     * Get comprehensive platform overview with key metrics and status
     * Get platform overview
     */
    async getPlatformOverview(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlatformOverview> {
        const response = await this.getPlatformOverviewRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get detailed platform statistics and analytics
     * Get platform statistics
     */
    async getPlatformStatisticsRaw(requestParameters: GetPlatformStatisticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlatformStatistics>> {
        const queryParameters: any = {};

        if (requestParameters['period'] != null) {
            queryParameters['period'] = requestParameters['period'];
        }

        if (requestParameters['startDate'] != null) {
            queryParameters['startDate'] = (requestParameters['startDate'] as any).toISOString();
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['endDate'] = (requestParameters['endDate'] as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["view:platform_analytics"]);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/internal/platform/statistics`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlatformStatisticsFromJSON(jsonValue));
    }

    /**
     * Get detailed platform statistics and analytics
     * Get platform statistics
     */
    async getPlatformStatistics(requestParameters: GetPlatformStatisticsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlatformStatistics> {
        const response = await this.getPlatformStatisticsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get real-time platform performance metrics
     * Get platform metrics
     */
    async getSystemPlatformMetricsRaw(requestParameters: GetSystemPlatformMetricsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SystemPlatformMetrics>> {
        const queryParameters: any = {};

        if (requestParameters['interval'] != null) {
            queryParameters['interval'] = requestParameters['interval'];
        }

        if (requestParameters['metrics'] != null) {
            queryParameters['metrics'] = requestParameters['metrics']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['startDate'] != null) {
            queryParameters['startDate'] = (requestParameters['startDate'] as any).toISOString();
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['endDate'] = (requestParameters['endDate'] as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["view:platform_metrics"]);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/internal/platform/metrics`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SystemPlatformMetricsFromJSON(jsonValue));
    }

    /**
     * Get real-time platform performance metrics
     * Get platform metrics
     */
    async getSystemPlatformMetrics(requestParameters: GetSystemPlatformMetricsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SystemPlatformMetrics> {
        const response = await this.getSystemPlatformMetricsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
