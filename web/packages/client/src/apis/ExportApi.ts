/* tslint:disable */
/* eslint-disable */
/**
 * My Project
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    EmptyOutputBody,
    EmptyOutputBodyFromJSON,
    EmptyOutputBodyToJSON,
    InlineResponse400,
    InlineResponse400FromJSON,
    InlineResponse400ToJSON,
} from '../models';

export interface ExportMembershipsRequest {
    orgId: string;
}

export interface ExportOrganizationDataRequest {
    id: string;
}

export interface ExportUsersRequest {
    orgId: string;
}

/**
 * ExportApi - interface
 * 
 * @export
 * @interface ExportApiInterface
 */
export interface ExportApiInterface {
    /**
     * Export membership data to CSV or JSON format
     * @summary Export memberships
     * @param {string} orgId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExportApiInterface
     */
    exportMembershipsRaw(requestParameters: ExportMembershipsRequest): Promise<runtime.ApiResponse<EmptyOutputBody>>;

    /**
     * Export membership data to CSV or JSON format
     * Export memberships
     */
    exportMemberships(requestParameters: ExportMembershipsRequest): Promise<EmptyOutputBody>;

    /**
     * Export organization data for backup or compliance
     * @summary Export organization data
     * @param {string} id Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExportApiInterface
     */
    exportOrganizationDataRaw(requestParameters: ExportOrganizationDataRequest): Promise<runtime.ApiResponse<EmptyOutputBody>>;

    /**
     * Export organization data for backup or compliance
     * Export organization data
     */
    exportOrganizationData(requestParameters: ExportOrganizationDataRequest): Promise<EmptyOutputBody>;

    /**
     * Export user data to CSV or JSON format
     * @summary Export users
     * @param {string} orgId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExportApiInterface
     */
    exportUsersRaw(requestParameters: ExportUsersRequest): Promise<runtime.ApiResponse<EmptyOutputBody>>;

    /**
     * Export user data to CSV or JSON format
     * Export users
     */
    exportUsers(requestParameters: ExportUsersRequest): Promise<EmptyOutputBody>;

}

/**
 * 
 */
export class ExportApi extends runtime.BaseAPI implements ExportApiInterface {

    /**
     * Export membership data to CSV or JSON format
     * Export memberships
     */
    async exportMembershipsRaw(requestParameters: ExportMembershipsRequest): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling exportMemberships.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/memberships/export`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Export membership data to CSV or JSON format
     * Export memberships
     */
    async exportMemberships(requestParameters: ExportMembershipsRequest): Promise<EmptyOutputBody> {
        const response = await this.exportMembershipsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Export organization data for backup or compliance
     * Export organization data
     */
    async exportOrganizationDataRaw(requestParameters: ExportOrganizationDataRequest): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling exportOrganizationData.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{id}/export`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Export organization data for backup or compliance
     * Export organization data
     */
    async exportOrganizationData(requestParameters: ExportOrganizationDataRequest): Promise<EmptyOutputBody> {
        const response = await this.exportOrganizationDataRaw(requestParameters);
        return await response.value();
    }

    /**
     * Export user data to CSV or JSON format
     * Export users
     */
    async exportUsersRaw(requestParameters: ExportUsersRequest): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling exportUsers.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/users/export`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Export user data to CSV or JSON format
     * Export users
     */
    async exportUsers(requestParameters: ExportUsersRequest): Promise<EmptyOutputBody> {
        const response = await this.exportUsersRaw(requestParameters);
        return await response.value();
    }

}
