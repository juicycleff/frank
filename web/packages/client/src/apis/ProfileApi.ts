/* tslint:disable */
/* eslint-disable */
/**
 * My Project
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ChangePasswordRequest,
    ChangePasswordRequestFromJSON,
    ChangePasswordRequestToJSON,
    EmptyOutputBody,
    EmptyOutputBodyFromJSON,
    EmptyOutputBodyToJSON,
    InlineResponse400,
    InlineResponse400FromJSON,
    InlineResponse400ToJSON,
    User,
    UserFromJSON,
    UserToJSON,
    UserProfileUpdateRequest,
    UserProfileUpdateRequestFromJSON,
    UserProfileUpdateRequestToJSON,
} from '../models';

export interface ChangePasswordOperationRequest {
    changePasswordRequest?: ChangePasswordRequest;
}

export interface UpdateUserProfileRequest {
    userProfileUpdateRequest?: UserProfileUpdateRequest;
}

/**
 * ProfileApi - interface
 * 
 * @export
 * @interface ProfileApiInterface
 */
export interface ProfileApiInterface {
    /**
     * Change the current user\'s password
     * @summary Change password
     * @param {ChangePasswordRequest} [changePasswordRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApiInterface
     */
    changePasswordRaw(requestParameters: ChangePasswordOperationRequest): Promise<runtime.ApiResponse<EmptyOutputBody>>;

    /**
     * Change the current user\'s password
     * Change password
     */
    changePassword(requestParameters: ChangePasswordOperationRequest): Promise<EmptyOutputBody>;

    /**
     * Get the current authenticated user\'s profile
     * @summary Get current user profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApiInterface
     */
    getUserProfileRaw(): Promise<runtime.ApiResponse<User>>;

    /**
     * Get the current authenticated user\'s profile
     * Get current user profile
     */
    getUserProfile(): Promise<User>;

    /**
     * Update the current authenticated user\'s profile
     * @summary Update current user profile
     * @param {UserProfileUpdateRequest} [userProfileUpdateRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApiInterface
     */
    updateUserProfileRaw(requestParameters: UpdateUserProfileRequest): Promise<runtime.ApiResponse<User>>;

    /**
     * Update the current authenticated user\'s profile
     * Update current user profile
     */
    updateUserProfile(requestParameters: UpdateUserProfileRequest): Promise<User>;

}

/**
 * 
 */
export class ProfileApi extends runtime.BaseAPI implements ProfileApiInterface {

    /**
     * Change the current user\'s password
     * Change password
     */
    async changePasswordRaw(requestParameters: ChangePasswordOperationRequest): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/user/change-password`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChangePasswordRequestToJSON(requestParameters.changePasswordRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Change the current user\'s password
     * Change password
     */
    async changePassword(requestParameters: ChangePasswordOperationRequest): Promise<EmptyOutputBody> {
        const response = await this.changePasswordRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get the current authenticated user\'s profile
     * Get current user profile
     */
    async getUserProfileRaw(): Promise<runtime.ApiResponse<User>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/user/profile`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * Get the current authenticated user\'s profile
     * Get current user profile
     */
    async getUserProfile(): Promise<User> {
        const response = await this.getUserProfileRaw();
        return await response.value();
    }

    /**
     * Update the current authenticated user\'s profile
     * Update current user profile
     */
    async updateUserProfileRaw(requestParameters: UpdateUserProfileRequest): Promise<runtime.ApiResponse<User>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/user/profile`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UserProfileUpdateRequestToJSON(requestParameters.userProfileUpdateRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * Update the current authenticated user\'s profile
     * Update current user profile
     */
    async updateUserProfile(requestParameters: UpdateUserProfileRequest): Promise<User> {
        const response = await this.updateUserProfileRaw(requestParameters);
        return await response.value();
    }

}
