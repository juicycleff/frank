/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetGlobalActivityStats400Response,
  OrganizationBilling,
  UpdateBillingRequest,
} from '../models/index';
import {
    GetGlobalActivityStats400ResponseFromJSON,
    GetGlobalActivityStats400ResponseToJSON,
    OrganizationBillingFromJSON,
    OrganizationBillingToJSON,
    UpdateBillingRequestFromJSON,
    UpdateBillingRequestToJSON,
} from '../models/index';

export interface UpdateOrganizationBillingRequest {
    id: string;
    updateBillingRequest: Omit<UpdateBillingRequest, '$schema'>;
}

/**
 * 
 */
export class OrganizationsBillingApi extends runtime.BaseAPI {

    /**
     * Update billing information and subscription plan
     * Update organization billing
     */
    async updateOrganizationBillingRaw(requestParameters: UpdateOrganizationBillingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganizationBilling>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateOrganizationBilling().'
            );
        }

        if (requestParameters['updateBillingRequest'] == null) {
            throw new runtime.RequiredError(
                'updateBillingRequest',
                'Required parameter "updateBillingRequest" was null or undefined when calling updateOrganizationBilling().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{id}/billing`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateBillingRequestToJSON(requestParameters['updateBillingRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganizationBillingFromJSON(jsonValue));
    }

    /**
     * Update billing information and subscription plan
     * Update organization billing
     */
    async updateOrganizationBilling(requestParameters: UpdateOrganizationBillingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganizationBilling> {
        const response = await this.updateOrganizationBillingRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
