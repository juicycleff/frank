/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Attestation,
  AttestationRequest,
  ComplianceMessageResponse,
  ComplianceMetrics,
  ComplianceOverview,
  ComplianceStatus,
  ComplianceViolation,
  ConductRiskAssessmentRequest,
  DataAccessEvent,
  DataAccessLog,
  DataDeletionRequest,
  DataDeletionResult,
  DataRetentionResult,
  DetectViolationsInputBody,
  GDPRReport,
  GenerateGDPRReportInputBody,
  GenerateHIPAAReportInputBody,
  GeneratePCIDSSReportInputBody,
  GenerateSOC2ReportRequest,
  GetGlobalActivityStats400Response,
  HIPAAReport,
  PCIDSSReport,
  ResolveViolationRequest,
  RiskAssessment,
  RiskMitigation,
  SOC2Report,
  UserDataExport,
} from '../models/index';
import {
    AttestationFromJSON,
    AttestationToJSON,
    AttestationRequestFromJSON,
    AttestationRequestToJSON,
    ComplianceMessageResponseFromJSON,
    ComplianceMessageResponseToJSON,
    ComplianceMetricsFromJSON,
    ComplianceMetricsToJSON,
    ComplianceOverviewFromJSON,
    ComplianceOverviewToJSON,
    ComplianceStatusFromJSON,
    ComplianceStatusToJSON,
    ComplianceViolationFromJSON,
    ComplianceViolationToJSON,
    ConductRiskAssessmentRequestFromJSON,
    ConductRiskAssessmentRequestToJSON,
    DataAccessEventFromJSON,
    DataAccessEventToJSON,
    DataAccessLogFromJSON,
    DataAccessLogToJSON,
    DataDeletionRequestFromJSON,
    DataDeletionRequestToJSON,
    DataDeletionResultFromJSON,
    DataDeletionResultToJSON,
    DataRetentionResultFromJSON,
    DataRetentionResultToJSON,
    DetectViolationsInputBodyFromJSON,
    DetectViolationsInputBodyToJSON,
    GDPRReportFromJSON,
    GDPRReportToJSON,
    GenerateGDPRReportInputBodyFromJSON,
    GenerateGDPRReportInputBodyToJSON,
    GenerateHIPAAReportInputBodyFromJSON,
    GenerateHIPAAReportInputBodyToJSON,
    GeneratePCIDSSReportInputBodyFromJSON,
    GeneratePCIDSSReportInputBodyToJSON,
    GenerateSOC2ReportRequestFromJSON,
    GenerateSOC2ReportRequestToJSON,
    GetGlobalActivityStats400ResponseFromJSON,
    GetGlobalActivityStats400ResponseToJSON,
    HIPAAReportFromJSON,
    HIPAAReportToJSON,
    PCIDSSReportFromJSON,
    PCIDSSReportToJSON,
    ResolveViolationRequestFromJSON,
    ResolveViolationRequestToJSON,
    RiskAssessmentFromJSON,
    RiskAssessmentToJSON,
    RiskMitigationFromJSON,
    RiskMitigationToJSON,
    SOC2ReportFromJSON,
    SOC2ReportToJSON,
    UserDataExportFromJSON,
    UserDataExportToJSON,
} from '../models/index';

export interface ApplyDataRetentionPoliciesRequest {
    orgId: string;
}

export interface CheckGDPRComplianceRequest {
    orgId: string;
}

export interface CheckHIPAAComplianceRequest {
    orgId: string;
}

export interface CheckPCIDSSComplianceRequest {
    orgId: string;
}

export interface CheckSOC2ComplianceRequest {
    orgId: string;
}

export interface ConductRiskAssessmentOperationRequest {
    orgId: string;
    conductRiskAssessmentRequest: Omit<ConductRiskAssessmentRequest, '$schema'>;
}

export interface CreateAttestationRequest {
    orgId: string;
    attestationRequest: Omit<AttestationRequest, '$schema'>;
}

export interface DetectViolationsRequest {
    orgId: string;
    detectViolationsInputBody: Omit<DetectViolationsInputBody, '$schema'>;
}

export interface ExportUserDataRequest {
    orgId: string;
    userId: string;
}

export interface GenerateGDPRReportRequest {
    orgId: string;
    generateGDPRReportInputBody: Omit<GenerateGDPRReportInputBody, '$schema'>;
}

export interface GenerateHIPAAReportRequest {
    orgId: string;
    generateHIPAAReportInputBody: Omit<GenerateHIPAAReportInputBody, '$schema'>;
}

export interface GeneratePCIDSSReportRequest {
    orgId: string;
    generatePCIDSSReportInputBody: Omit<GeneratePCIDSSReportInputBody, '$schema'>;
}

export interface GenerateSOC2ReportOperationRequest {
    orgId: string;
    generateSOC2ReportRequest: Omit<GenerateSOC2ReportRequest, '$schema'>;
}

export interface GetActiveViolationsRequest {
    orgId: string;
}

export interface GetAttestationsRequest {
    orgId: string;
    complianceType?: string;
}

export interface GetComplianceMetricsRequest {
    orgId: string;
    period?: string;
}

export interface GetComplianceOverviewRequest {
    orgId: string;
}

export interface GetDataAccessLogsRequest {
    orgId: string;
}

export interface LogDataAccessRequest {
    dataAccessEvent: Omit<DataAccessEvent, '$schema'>;
}

export interface ProcessDataDeletionRequestRequest {
    orgId: string;
    dataDeletionRequest: Omit<DataDeletionRequest, '$schema'>;
}

export interface ResolveViolationOperationRequest {
    violationId: string;
    resolveViolationRequest: Omit<ResolveViolationRequest, '$schema'>;
}

export interface UpdateRiskMitigationRequest {
    riskId: string;
    riskMitigation: Omit<RiskMitigation, '$schema'>;
}

/**
 * 
 */
export class ComplianceApi extends runtime.BaseAPI {

    /**
     * Apply data retention policies and archive/delete old data
     * Apply data retention policies
     */
    async applyDataRetentionPoliciesRaw(requestParameters: ApplyDataRetentionPoliciesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DataRetentionResult>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling applyDataRetentionPolicies().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/internal/organizations/{orgId}/compliance/data-retention/apply`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DataRetentionResultFromJSON(jsonValue));
    }

    /**
     * Apply data retention policies and archive/delete old data
     * Apply data retention policies
     */
    async applyDataRetentionPolicies(requestParameters: ApplyDataRetentionPoliciesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DataRetentionResult> {
        const response = await this.applyDataRetentionPoliciesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get current GDPR compliance status and data protection assessment
     * Check GDPR compliance status
     */
    async checkGDPRComplianceRaw(requestParameters: CheckGDPRComplianceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComplianceStatus>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling checkGDPRCompliance().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/internal/organizations/{orgId}/compliance/gdpr/status`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComplianceStatusFromJSON(jsonValue));
    }

    /**
     * Get current GDPR compliance status and data protection assessment
     * Check GDPR compliance status
     */
    async checkGDPRCompliance(requestParameters: CheckGDPRComplianceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComplianceStatus> {
        const response = await this.checkGDPRComplianceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get current HIPAA compliance status and safeguards assessment
     * Check HIPAA compliance status
     */
    async checkHIPAAComplianceRaw(requestParameters: CheckHIPAAComplianceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComplianceStatus>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling checkHIPAACompliance().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/internal/organizations/{orgId}/compliance/hipaa/status`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComplianceStatusFromJSON(jsonValue));
    }

    /**
     * Get current HIPAA compliance status and safeguards assessment
     * Check HIPAA compliance status
     */
    async checkHIPAACompliance(requestParameters: CheckHIPAAComplianceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComplianceStatus> {
        const response = await this.checkHIPAAComplianceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get current PCI DSS compliance status and security requirements assessment
     * Check PCI DSS compliance status
     */
    async checkPCIDSSComplianceRaw(requestParameters: CheckPCIDSSComplianceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComplianceStatus>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling checkPCIDSSCompliance().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/internal/organizations/{orgId}/compliance/pci-dss/status`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComplianceStatusFromJSON(jsonValue));
    }

    /**
     * Get current PCI DSS compliance status and security requirements assessment
     * Check PCI DSS compliance status
     */
    async checkPCIDSSCompliance(requestParameters: CheckPCIDSSComplianceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComplianceStatus> {
        const response = await this.checkPCIDSSComplianceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get current SOC 2 compliance status and assessment results
     * Check SOC 2 compliance status
     */
    async checkSOC2ComplianceRaw(requestParameters: CheckSOC2ComplianceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComplianceStatus>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling checkSOC2Compliance().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/internal/organizations/{orgId}/compliance/soc2/status`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComplianceStatusFromJSON(jsonValue));
    }

    /**
     * Get current SOC 2 compliance status and assessment results
     * Check SOC 2 compliance status
     */
    async checkSOC2Compliance(requestParameters: CheckSOC2ComplianceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComplianceStatus> {
        const response = await this.checkSOC2ComplianceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Conduct a comprehensive risk assessment for compliance
     * Conduct risk assessment
     */
    async conductRiskAssessmentRaw(requestParameters: ConductRiskAssessmentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RiskAssessment>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling conductRiskAssessment().'
            );
        }

        if (requestParameters['conductRiskAssessmentRequest'] == null) {
            throw new runtime.RequiredError(
                'conductRiskAssessmentRequest',
                'Required parameter "conductRiskAssessmentRequest" was null or undefined when calling conductRiskAssessment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/internal/organizations/{orgId}/compliance/risk-assessment`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ConductRiskAssessmentRequestToJSON(requestParameters['conductRiskAssessmentRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RiskAssessmentFromJSON(jsonValue));
    }

    /**
     * Conduct a comprehensive risk assessment for compliance
     * Conduct risk assessment
     */
    async conductRiskAssessment(requestParameters: ConductRiskAssessmentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RiskAssessment> {
        const response = await this.conductRiskAssessmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new compliance attestation statement
     * Create compliance attestation
     */
    async createAttestationRaw(requestParameters: CreateAttestationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Attestation>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling createAttestation().'
            );
        }

        if (requestParameters['attestationRequest'] == null) {
            throw new runtime.RequiredError(
                'attestationRequest',
                'Required parameter "attestationRequest" was null or undefined when calling createAttestation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/internal/organizations/{orgId}/compliance/attestations`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AttestationRequestToJSON(requestParameters['attestationRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AttestationFromJSON(jsonValue));
    }

    /**
     * Create a new compliance attestation statement
     * Create compliance attestation
     */
    async createAttestation(requestParameters: CreateAttestationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Attestation> {
        const response = await this.createAttestationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Run compliance violation detection for specified compliance type
     * Detect compliance violations
     */
    async detectViolationsRaw(requestParameters: DetectViolationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ComplianceViolation>>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling detectViolations().'
            );
        }

        if (requestParameters['detectViolationsInputBody'] == null) {
            throw new runtime.RequiredError(
                'detectViolationsInputBody',
                'Required parameter "detectViolationsInputBody" was null or undefined when calling detectViolations().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/internal/organizations/{orgId}/compliance/violations/detect`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DetectViolationsInputBodyToJSON(requestParameters['detectViolationsInputBody']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ComplianceViolationFromJSON));
    }

    /**
     * Run compliance violation detection for specified compliance type
     * Detect compliance violations
     */
    async detectViolations(requestParameters: DetectViolationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ComplianceViolation>> {
        const response = await this.detectViolationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Export all user data for GDPR data portability or other compliance requirements
     * Export user data
     */
    async exportUserDataRaw(requestParameters: ExportUserDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserDataExport>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling exportUserData().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling exportUserData().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/internal/organizations/{orgId}/users/{userId}/export`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserDataExportFromJSON(jsonValue));
    }

    /**
     * Export all user data for GDPR data portability or other compliance requirements
     * Export user data
     */
    async exportUserData(requestParameters: ExportUserDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserDataExport> {
        const response = await this.exportUserDataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Generate a comprehensive GDPR compliance report with data processing records
     * Generate GDPR compliance report
     */
    async generateGDPRReportRaw(requestParameters: GenerateGDPRReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GDPRReport>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling generateGDPRReport().'
            );
        }

        if (requestParameters['generateGDPRReportInputBody'] == null) {
            throw new runtime.RequiredError(
                'generateGDPRReportInputBody',
                'Required parameter "generateGDPRReportInputBody" was null or undefined when calling generateGDPRReport().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/internal/organizations/{orgId}/compliance/gdpr/reports`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GenerateGDPRReportInputBodyToJSON(requestParameters['generateGDPRReportInputBody']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GDPRReportFromJSON(jsonValue));
    }

    /**
     * Generate a comprehensive GDPR compliance report with data processing records
     * Generate GDPR compliance report
     */
    async generateGDPRReport(requestParameters: GenerateGDPRReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GDPRReport> {
        const response = await this.generateGDPRReportRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Generate a comprehensive HIPAA compliance report with safeguards assessment
     * Generate HIPAA compliance report
     */
    async generateHIPAAReportRaw(requestParameters: GenerateHIPAAReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HIPAAReport>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling generateHIPAAReport().'
            );
        }

        if (requestParameters['generateHIPAAReportInputBody'] == null) {
            throw new runtime.RequiredError(
                'generateHIPAAReportInputBody',
                'Required parameter "generateHIPAAReportInputBody" was null or undefined when calling generateHIPAAReport().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/internal/organizations/{orgId}/compliance/hipaa/reports`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GenerateHIPAAReportInputBodyToJSON(requestParameters['generateHIPAAReportInputBody']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HIPAAReportFromJSON(jsonValue));
    }

    /**
     * Generate a comprehensive HIPAA compliance report with safeguards assessment
     * Generate HIPAA compliance report
     */
    async generateHIPAAReport(requestParameters: GenerateHIPAAReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HIPAAReport> {
        const response = await this.generateHIPAAReportRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Generate a comprehensive PCI DSS compliance report with security requirements assessment
     * Generate PCI DSS compliance report
     */
    async generatePCIDSSReportRaw(requestParameters: GeneratePCIDSSReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PCIDSSReport>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling generatePCIDSSReport().'
            );
        }

        if (requestParameters['generatePCIDSSReportInputBody'] == null) {
            throw new runtime.RequiredError(
                'generatePCIDSSReportInputBody',
                'Required parameter "generatePCIDSSReportInputBody" was null or undefined when calling generatePCIDSSReport().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/internal/organizations/{orgId}/compliance/pci-dss/reports`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GeneratePCIDSSReportInputBodyToJSON(requestParameters['generatePCIDSSReportInputBody']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PCIDSSReportFromJSON(jsonValue));
    }

    /**
     * Generate a comprehensive PCI DSS compliance report with security requirements assessment
     * Generate PCI DSS compliance report
     */
    async generatePCIDSSReport(requestParameters: GeneratePCIDSSReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PCIDSSReport> {
        const response = await this.generatePCIDSSReportRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Generate a comprehensive SOC 2 Type II compliance report for the organization
     * Generate SOC 2 compliance report
     */
    async generateSOC2ReportRaw(requestParameters: GenerateSOC2ReportOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SOC2Report>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling generateSOC2Report().'
            );
        }

        if (requestParameters['generateSOC2ReportRequest'] == null) {
            throw new runtime.RequiredError(
                'generateSOC2ReportRequest',
                'Required parameter "generateSOC2ReportRequest" was null or undefined when calling generateSOC2Report().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/internal/organizations/{orgId}/compliance/soc2/reports`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GenerateSOC2ReportRequestToJSON(requestParameters['generateSOC2ReportRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SOC2ReportFromJSON(jsonValue));
    }

    /**
     * Generate a comprehensive SOC 2 Type II compliance report for the organization
     * Generate SOC 2 compliance report
     */
    async generateSOC2Report(requestParameters: GenerateSOC2ReportOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SOC2Report> {
        const response = await this.generateSOC2ReportRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get list of active compliance violations for the organization
     * Get active compliance violations
     */
    async getActiveViolationsRaw(requestParameters: GetActiveViolationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ComplianceViolation>>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling getActiveViolations().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/internal/organizations/{orgId}/compliance/violations`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ComplianceViolationFromJSON));
    }

    /**
     * Get list of active compliance violations for the organization
     * Get active compliance violations
     */
    async getActiveViolations(requestParameters: GetActiveViolationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ComplianceViolation>> {
        const response = await this.getActiveViolationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get compliance attestations for the organization
     * Get compliance attestations
     */
    async getAttestationsRaw(requestParameters: GetAttestationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Attestation>>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling getAttestations().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['complianceType'] != null) {
            queryParameters['complianceType'] = requestParameters['complianceType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/internal/organizations/{orgId}/compliance/attestations`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AttestationFromJSON));
    }

    /**
     * Get compliance attestations for the organization
     * Get compliance attestations
     */
    async getAttestations(requestParameters: GetAttestationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Attestation>> {
        const response = await this.getAttestationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get detailed compliance metrics and trends
     * Get compliance metrics
     */
    async getComplianceMetricsRaw(requestParameters: GetComplianceMetricsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComplianceMetrics>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling getComplianceMetrics().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['period'] != null) {
            queryParameters['period'] = requestParameters['period'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/internal/organizations/{orgId}/compliance/metrics`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComplianceMetricsFromJSON(jsonValue));
    }

    /**
     * Get detailed compliance metrics and trends
     * Get compliance metrics
     */
    async getComplianceMetrics(requestParameters: GetComplianceMetricsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComplianceMetrics> {
        const response = await this.getComplianceMetricsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get overall compliance status across all frameworks
     * Get compliance overview
     */
    async getComplianceOverviewRaw(requestParameters: GetComplianceOverviewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComplianceOverview>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling getComplianceOverview().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/internal/organizations/{orgId}/compliance/overview`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComplianceOverviewFromJSON(jsonValue));
    }

    /**
     * Get overall compliance status across all frameworks
     * Get compliance overview
     */
    async getComplianceOverview(requestParameters: GetComplianceOverviewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComplianceOverview> {
        const response = await this.getComplianceOverviewRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get data access logs for compliance auditing
     * Get data access logs
     */
    async getDataAccessLogsRaw(requestParameters: GetDataAccessLogsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<DataAccessLog>>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling getDataAccessLogs().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/internal/organizations/{orgId}/compliance/data-access/logs`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DataAccessLogFromJSON));
    }

    /**
     * Get data access logs for compliance auditing
     * Get data access logs
     */
    async getDataAccessLogs(requestParameters: GetDataAccessLogsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<DataAccessLog>> {
        const response = await this.getDataAccessLogsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Log a data access event for compliance tracking
     * Log data access event
     */
    async logDataAccessRaw(requestParameters: LogDataAccessRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComplianceMessageResponse>> {
        if (requestParameters['dataAccessEvent'] == null) {
            throw new runtime.RequiredError(
                'dataAccessEvent',
                'Required parameter "dataAccessEvent" was null or undefined when calling logDataAccess().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/internal/compliance/data-access/log`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DataAccessEventToJSON(requestParameters['dataAccessEvent']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComplianceMessageResponseFromJSON(jsonValue));
    }

    /**
     * Log a data access event for compliance tracking
     * Log data access event
     */
    async logDataAccess(requestParameters: LogDataAccessRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComplianceMessageResponse> {
        const response = await this.logDataAccessRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Process GDPR right to erasure or other data deletion requests
     * Process data deletion request
     */
    async processDataDeletionRequestRaw(requestParameters: ProcessDataDeletionRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DataDeletionResult>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling processDataDeletionRequest().'
            );
        }

        if (requestParameters['dataDeletionRequest'] == null) {
            throw new runtime.RequiredError(
                'dataDeletionRequest',
                'Required parameter "dataDeletionRequest" was null or undefined when calling processDataDeletionRequest().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/internal/organizations/{orgId}/compliance/data-deletion`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DataDeletionRequestToJSON(requestParameters['dataDeletionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DataDeletionResultFromJSON(jsonValue));
    }

    /**
     * Process GDPR right to erasure or other data deletion requests
     * Process data deletion request
     */
    async processDataDeletionRequest(requestParameters: ProcessDataDeletionRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DataDeletionResult> {
        const response = await this.processDataDeletionRequestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Mark a compliance violation as resolved with resolution details
     * Resolve compliance violation
     */
    async resolveViolationRaw(requestParameters: ResolveViolationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComplianceMessageResponse>> {
        if (requestParameters['violationId'] == null) {
            throw new runtime.RequiredError(
                'violationId',
                'Required parameter "violationId" was null or undefined when calling resolveViolation().'
            );
        }

        if (requestParameters['resolveViolationRequest'] == null) {
            throw new runtime.RequiredError(
                'resolveViolationRequest',
                'Required parameter "resolveViolationRequest" was null or undefined when calling resolveViolation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/internal/compliance/violations/{violationId}/resolve`.replace(`{${"violationId"}}`, encodeURIComponent(String(requestParameters['violationId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ResolveViolationRequestToJSON(requestParameters['resolveViolationRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComplianceMessageResponseFromJSON(jsonValue));
    }

    /**
     * Mark a compliance violation as resolved with resolution details
     * Resolve compliance violation
     */
    async resolveViolation(requestParameters: ResolveViolationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComplianceMessageResponse> {
        const response = await this.resolveViolationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update risk mitigation measures for identified risks
     * Update risk mitigation
     */
    async updateRiskMitigationRaw(requestParameters: UpdateRiskMitigationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComplianceMessageResponse>> {
        if (requestParameters['riskId'] == null) {
            throw new runtime.RequiredError(
                'riskId',
                'Required parameter "riskId" was null or undefined when calling updateRiskMitigation().'
            );
        }

        if (requestParameters['riskMitigation'] == null) {
            throw new runtime.RequiredError(
                'riskMitigation',
                'Required parameter "riskMitigation" was null or undefined when calling updateRiskMitigation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/internal/compliance/risks/{riskId}/mitigation`.replace(`{${"riskId"}}`, encodeURIComponent(String(requestParameters['riskId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RiskMitigationToJSON(requestParameters['riskMitigation']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComplianceMessageResponseFromJSON(jsonValue));
    }

    /**
     * Update risk mitigation measures for identified risks
     * Update risk mitigation
     */
    async updateRiskMitigation(requestParameters: UpdateRiskMitigationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComplianceMessageResponse> {
        const response = await this.updateRiskMitigationRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
