/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  APIUsageReport,
  ActivateOrganizationRequest,
  AuditSummary,
  AuditTrailResponse,
  BillingOverview,
  BlockUserRequest,
  CancelSubscriptionRequest,
  ComplianceReport,
  CreateFeatureFlagRequest,
  CreateOrganizationPlatformRequest,
  DeleteOrganizationRequest,
  ErrorRateMetrics,
  FeatureFlag,
  FeatureFlagListResponse,
  FeatureUsageReport,
  GetGlobalActivityStats400Response,
  ImpersonateUserRequest,
  ImpersonationResponse,
  MaintenanceWindow,
  MaintenanceWindowListResponse,
  Organization,
  OrganizationUsage,
  PaginatedOutputAPIKeySummary,
  PerformanceMetrics,
  PlatformGrowthMetrics,
  PlatformNotificationRequest,
  PlatformNotificationResponse,
  PlatformOrganizationDetails,
  PlatformOrganizationListResponse,
  PlatformOrganizationStats,
  PlatformStats,
  PlatformUserDetails,
  PlatformUserListResponse,
  RateLimitStats,
  ResetUserPasswordRequest,
  ResetUserPasswordResponse,
  RevenueMetrics,
  RevenueReport,
  RevokeAPIKeyRequest,
  RevokeUserSessionsRequest,
  RevokeUserSessionsResponse,
  ScheduleMaintenanceRequest,
  SecurityDashboard,
  SecurityIncidentListResponse,
  SecurityScanRequest,
  SecurityScanResponse,
  SubscriptionDetails,
  SubscriptionListResponse,
  SupportTicketListResponse,
  SuspendOrganizationRequest,
  SystemHealth,
  SystemMetrics,
  UnblockUserRequest,
  UpdateFeatureFlagRequest,
  UpdateSubscriptionRequest,
  UsageAnalytics,
  UserSessionListResponse,
  UserType,
} from '../models/index';
import {
    APIUsageReportFromJSON,
    APIUsageReportToJSON,
    ActivateOrganizationRequestFromJSON,
    ActivateOrganizationRequestToJSON,
    AuditSummaryFromJSON,
    AuditSummaryToJSON,
    AuditTrailResponseFromJSON,
    AuditTrailResponseToJSON,
    BillingOverviewFromJSON,
    BillingOverviewToJSON,
    BlockUserRequestFromJSON,
    BlockUserRequestToJSON,
    CancelSubscriptionRequestFromJSON,
    CancelSubscriptionRequestToJSON,
    ComplianceReportFromJSON,
    ComplianceReportToJSON,
    CreateFeatureFlagRequestFromJSON,
    CreateFeatureFlagRequestToJSON,
    CreateOrganizationPlatformRequestFromJSON,
    CreateOrganizationPlatformRequestToJSON,
    DeleteOrganizationRequestFromJSON,
    DeleteOrganizationRequestToJSON,
    ErrorRateMetricsFromJSON,
    ErrorRateMetricsToJSON,
    FeatureFlagFromJSON,
    FeatureFlagToJSON,
    FeatureFlagListResponseFromJSON,
    FeatureFlagListResponseToJSON,
    FeatureUsageReportFromJSON,
    FeatureUsageReportToJSON,
    GetGlobalActivityStats400ResponseFromJSON,
    GetGlobalActivityStats400ResponseToJSON,
    ImpersonateUserRequestFromJSON,
    ImpersonateUserRequestToJSON,
    ImpersonationResponseFromJSON,
    ImpersonationResponseToJSON,
    MaintenanceWindowFromJSON,
    MaintenanceWindowToJSON,
    MaintenanceWindowListResponseFromJSON,
    MaintenanceWindowListResponseToJSON,
    OrganizationFromJSON,
    OrganizationToJSON,
    OrganizationUsageFromJSON,
    OrganizationUsageToJSON,
    PaginatedOutputAPIKeySummaryFromJSON,
    PaginatedOutputAPIKeySummaryToJSON,
    PerformanceMetricsFromJSON,
    PerformanceMetricsToJSON,
    PlatformGrowthMetricsFromJSON,
    PlatformGrowthMetricsToJSON,
    PlatformNotificationRequestFromJSON,
    PlatformNotificationRequestToJSON,
    PlatformNotificationResponseFromJSON,
    PlatformNotificationResponseToJSON,
    PlatformOrganizationDetailsFromJSON,
    PlatformOrganizationDetailsToJSON,
    PlatformOrganizationListResponseFromJSON,
    PlatformOrganizationListResponseToJSON,
    PlatformOrganizationStatsFromJSON,
    PlatformOrganizationStatsToJSON,
    PlatformStatsFromJSON,
    PlatformStatsToJSON,
    PlatformUserDetailsFromJSON,
    PlatformUserDetailsToJSON,
    PlatformUserListResponseFromJSON,
    PlatformUserListResponseToJSON,
    RateLimitStatsFromJSON,
    RateLimitStatsToJSON,
    ResetUserPasswordRequestFromJSON,
    ResetUserPasswordRequestToJSON,
    ResetUserPasswordResponseFromJSON,
    ResetUserPasswordResponseToJSON,
    RevenueMetricsFromJSON,
    RevenueMetricsToJSON,
    RevenueReportFromJSON,
    RevenueReportToJSON,
    RevokeAPIKeyRequestFromJSON,
    RevokeAPIKeyRequestToJSON,
    RevokeUserSessionsRequestFromJSON,
    RevokeUserSessionsRequestToJSON,
    RevokeUserSessionsResponseFromJSON,
    RevokeUserSessionsResponseToJSON,
    ScheduleMaintenanceRequestFromJSON,
    ScheduleMaintenanceRequestToJSON,
    SecurityDashboardFromJSON,
    SecurityDashboardToJSON,
    SecurityIncidentListResponseFromJSON,
    SecurityIncidentListResponseToJSON,
    SecurityScanRequestFromJSON,
    SecurityScanRequestToJSON,
    SecurityScanResponseFromJSON,
    SecurityScanResponseToJSON,
    SubscriptionDetailsFromJSON,
    SubscriptionDetailsToJSON,
    SubscriptionListResponseFromJSON,
    SubscriptionListResponseToJSON,
    SupportTicketListResponseFromJSON,
    SupportTicketListResponseToJSON,
    SuspendOrganizationRequestFromJSON,
    SuspendOrganizationRequestToJSON,
    SystemHealthFromJSON,
    SystemHealthToJSON,
    SystemMetricsFromJSON,
    SystemMetricsToJSON,
    UnblockUserRequestFromJSON,
    UnblockUserRequestToJSON,
    UpdateFeatureFlagRequestFromJSON,
    UpdateFeatureFlagRequestToJSON,
    UpdateSubscriptionRequestFromJSON,
    UpdateSubscriptionRequestToJSON,
    UsageAnalyticsFromJSON,
    UsageAnalyticsToJSON,
    UserSessionListResponseFromJSON,
    UserSessionListResponseToJSON,
    UserTypeFromJSON,
    UserTypeToJSON,
} from '../models/index';

export interface ActivateOrganizationPlatformRequest {
    id: string;
    activateOrganizationRequest: Omit<ActivateOrganizationRequest, '$schema'>;
}

export interface BlockUserPlatformRequest {
    id: string;
    blockUserRequest: Omit<BlockUserRequest, '$schema'>;
}

export interface CancelSubscriptionPlatformRequest {
    id: string;
    cancelSubscriptionRequest: Omit<CancelSubscriptionRequest, '$schema'>;
}

export interface CreateFeatureFlagPlatformRequest {
    createFeatureFlagRequest: Omit<CreateFeatureFlagRequest, '$schema'>;
}

export interface CreatePlatformOrganizationRequest {
    createOrganizationPlatformRequest: Omit<CreateOrganizationPlatformRequest, '$schema'>;
}

export interface DeleteFeatureFlagPlatformRequest {
    id: string;
}

export interface DeleteOrganizationPlatformRequest {
    id: string;
    deleteOrganizationRequest: Omit<DeleteOrganizationRequest, '$schema'>;
}

export interface GetAPIUsagePlatformRequest {
    period?: string;
    organizationId?: string;
    breakdown?: string;
}

export interface GetAuditSummaryPlatformRequest {
    period?: string;
}

export interface GetAuditTrailPlatformRequest {
    after?: string;
    before?: string;
    first?: number;
    last?: number;
    limit?: number;
    offset?: number;
    fields?: Array<string> | null;
    orderBy?: Array<string> | null;
    page?: number;
    organizationId?: string;
    userId?: string;
    action?: string;
    resource?: string;
    status?: string;
    riskLevel?: string;
    startDate?: Date;
    endDate?: Date;
    search?: string;
}

export interface GetBillingOverviewPlatformRequest {
    period?: string;
}

export interface GetComplianceReportPlatformRequest {
    type?: string;
    period?: string;
}

export interface GetErrorRatesPlatformRequest {
    period?: string;
    level?: string;
}

export interface GetFeatureUsagePlatformRequest {
    period?: string;
}

export interface GetGrowthMetricsPlatformRequest {
    period?: string;
    compare?: string;
    breakdown?: string;
}

export interface GetMaintenanceWindowsPlatformRequest {
    status?: string;
    period?: string;
}

export interface GetOrganizationDetailsPlatformRequest {
    id: string;
}

export interface GetOrganizationStatsPlatformRequest {
    id: string;
    period?: string;
}

export interface GetOrganizationUsagePlatformRequest {
    id: string;
    period?: string;
}

export interface GetPerformanceMetricsPlatformRequest {
    period?: string;
    component?: string;
}

export interface GetPlatformStatsPlatformRequest {
    period?: string;
}

export interface GetRateLimitStatsPlatformRequest {
    period?: string;
    organizationId?: string;
}

export interface GetRevenueMetricsPlatformRequest {
    period?: string;
    currency?: string;
    breakdown?: string;
}

export interface GetRevenueReportPlatformRequest {
    period?: string;
    format?: string;
    breakdown?: string;
}

export interface GetSubscriptionDetailsPlatformRequest {
    id: string;
}

export interface GetSystemMetricsPlatformRequest {
    period?: string;
}

export interface GetUsageAnalyticsPlatformRequest {
    period?: string;
    features?: string;
    compare?: boolean;
}

export interface GetUserDetailsPlatformRequest {
    id: string;
}

export interface GetUserSessionsPlatformRequest {
    id: string;
}

export interface ImpersonateUserPlatformRequest {
    id: string;
    impersonateUserRequest: Omit<ImpersonateUserRequest, '$schema'>;
}

export interface ListAPIKeysPlatformRequest {
    after?: string;
    before?: string;
    first?: number;
    last?: number;
    limit?: number;
    offset?: number;
    fields?: Array<string> | null;
    orderBy?: Array<string> | null;
    page?: number;
    organizationId?: string;
    status?: string;
    search?: string;
}

export interface ListAllOrganizationsPlatformRequest {
    after?: string;
    before?: string;
    first?: number;
    last?: number;
    limit?: number;
    offset?: number;
    fields?: Array<string> | null;
    orderBy?: Array<string> | null;
    page?: number;
    status?: string;
    plan?: string;
    search?: string;
}

export interface ListAllUsersPlatformRequest {
    after?: string;
    before?: string;
    first?: number;
    last?: number;
    limit?: number;
    offset?: number;
    fields?: Array<string> | null;
    orderBy?: Array<string> | null;
    page?: number;
    organizationId?: string;
    userType?: UserType;
    status?: string;
    search?: string;
}

export interface ListFeatureFlagsPlatformRequest {
    after?: string;
    before?: string;
    first?: number;
    last?: number;
    limit?: number;
    offset?: number;
    fields?: Array<string> | null;
    orderBy?: Array<string> | null;
    page?: number;
    status?: string;
    search?: string;
}

export interface ListSecurityIncidentsPlatformRequest {
    after?: string;
    before?: string;
    first?: number;
    last?: number;
    limit?: number;
    offset?: number;
    fields?: Array<string> | null;
    orderBy?: Array<string> | null;
    page?: number;
    severity?: string;
    status?: string;
    period?: string;
}

export interface ListSubscriptionsPlatformRequest {
    after?: string;
    before?: string;
    first?: number;
    last?: number;
    limit?: number;
    offset?: number;
    fields?: Array<string> | null;
    orderBy?: Array<string> | null;
    page?: number;
    status?: string;
    plan?: string;
    search?: string;
}

export interface ListSupportTicketsPlatformRequest {
    after?: string;
    before?: string;
    first?: number;
    last?: number;
    limit?: number;
    offset?: number;
    fields?: Array<string> | null;
    orderBy?: Array<string> | null;
    page?: number;
    status?: string;
    priority?: string;
    assignee?: string;
    search?: string;
}

export interface ResetUserPasswordPlatformRequest {
    id: string;
    resetUserPasswordRequest: Omit<ResetUserPasswordRequest, '$schema'>;
}

export interface RevokeAPIKeyPlatformRequest {
    id: string;
    revokeAPIKeyRequest: Omit<RevokeAPIKeyRequest, '$schema'>;
}

export interface RevokeUserSessionsPlatformRequest {
    id: string;
    revokeUserSessionsRequest: Omit<RevokeUserSessionsRequest, '$schema'>;
}

export interface RunSecurityScanPlatformRequest {
    securityScanRequest: Omit<SecurityScanRequest, '$schema'>;
}

export interface ScheduleMaintenancePlatformRequest {
    scheduleMaintenanceRequest: Omit<ScheduleMaintenanceRequest, '$schema'>;
}

export interface SendPlatformNotificationPlatformRequest {
    platformNotificationRequest: Omit<PlatformNotificationRequest, '$schema'>;
}

export interface SuspendOrganizationPlatformRequest {
    id: string;
    suspendOrganizationRequest: Omit<SuspendOrganizationRequest, '$schema'>;
}

export interface UnblockUserPlatformRequest {
    id: string;
    unblockUserRequest: Omit<UnblockUserRequest, '$schema'>;
}

export interface UpdateFeatureFlagPlatformRequest {
    id: string;
    updateFeatureFlagRequest: Omit<UpdateFeatureFlagRequest, '$schema'>;
}

export interface UpdateSubscriptionPlatformRequest {
    id: string;
    updateSubscriptionRequest: Omit<UpdateSubscriptionRequest, '$schema'>;
}

/**
 * 
 */
export class PlatformAdminApi extends runtime.BaseAPI {

    /**
     * Activate a suspended organization
     * Activate organization
     */
    async activateOrganizationPlatformRaw(requestParameters: ActivateOrganizationPlatformRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling activateOrganizationPlatform().'
            );
        }

        if (requestParameters['activateOrganizationRequest'] == null) {
            throw new runtime.RequiredError(
                'activateOrganizationRequest',
                'Required parameter "activateOrganizationRequest" was null or undefined when calling activateOrganizationPlatform().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/internal/platform/organizations/{id}/activate`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ActivateOrganizationRequestToJSON(requestParameters['activateOrganizationRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Activate a suspended organization
     * Activate organization
     */
    async activateOrganizationPlatform(requestParameters: ActivateOrganizationPlatformRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.activateOrganizationPlatformRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Block a user account for security or compliance reasons
     * Block user
     */
    async blockUserPlatformRaw(requestParameters: BlockUserPlatformRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling blockUserPlatform().'
            );
        }

        if (requestParameters['blockUserRequest'] == null) {
            throw new runtime.RequiredError(
                'blockUserRequest',
                'Required parameter "blockUserRequest" was null or undefined when calling blockUserPlatform().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/internal/platform/users/{id}/block`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BlockUserRequestToJSON(requestParameters['blockUserRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Block a user account for security or compliance reasons
     * Block user
     */
    async blockUserPlatform(requestParameters: BlockUserPlatformRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.blockUserPlatformRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Cancel a subscription
     * Cancel subscription
     */
    async cancelSubscriptionPlatformRaw(requestParameters: CancelSubscriptionPlatformRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling cancelSubscriptionPlatform().'
            );
        }

        if (requestParameters['cancelSubscriptionRequest'] == null) {
            throw new runtime.RequiredError(
                'cancelSubscriptionRequest',
                'Required parameter "cancelSubscriptionRequest" was null or undefined when calling cancelSubscriptionPlatform().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/internal/platform/subscriptions/{id}/cancel`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CancelSubscriptionRequestToJSON(requestParameters['cancelSubscriptionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Cancel a subscription
     * Cancel subscription
     */
    async cancelSubscriptionPlatform(requestParameters: CancelSubscriptionPlatformRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.cancelSubscriptionPlatformRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new platform feature flag
     * Create feature flag
     */
    async createFeatureFlagPlatformRaw(requestParameters: CreateFeatureFlagPlatformRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FeatureFlag>> {
        if (requestParameters['createFeatureFlagRequest'] == null) {
            throw new runtime.RequiredError(
                'createFeatureFlagRequest',
                'Required parameter "createFeatureFlagRequest" was null or undefined when calling createFeatureFlagPlatform().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/internal/platform/features`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateFeatureFlagRequestToJSON(requestParameters['createFeatureFlagRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FeatureFlagFromJSON(jsonValue));
    }

    /**
     * Create a new platform feature flag
     * Create feature flag
     */
    async createFeatureFlagPlatform(requestParameters: CreateFeatureFlagPlatformRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FeatureFlag> {
        const response = await this.createFeatureFlagPlatformRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create an organization
     * Create organization
     */
    async createPlatformOrganizationRaw(requestParameters: CreatePlatformOrganizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Organization>> {
        if (requestParameters['createOrganizationPlatformRequest'] == null) {
            throw new runtime.RequiredError(
                'createOrganizationPlatformRequest',
                'Required parameter "createOrganizationPlatformRequest" was null or undefined when calling createPlatformOrganization().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/internal/platform/organizations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateOrganizationPlatformRequestToJSON(requestParameters['createOrganizationPlatformRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganizationFromJSON(jsonValue));
    }

    /**
     * Create an organization
     * Create organization
     */
    async createPlatformOrganization(requestParameters: CreatePlatformOrganizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Organization> {
        const response = await this.createPlatformOrganizationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a feature flag
     * Delete feature flag
     */
    async deleteFeatureFlagPlatformRaw(requestParameters: DeleteFeatureFlagPlatformRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteFeatureFlagPlatform().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/internal/platform/features/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Delete a feature flag
     * Delete feature flag
     */
    async deleteFeatureFlagPlatform(requestParameters: DeleteFeatureFlagPlatformRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.deleteFeatureFlagPlatformRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Permanently delete an organization and all associated data
     * Delete organization
     */
    async deleteOrganizationPlatformRaw(requestParameters: DeleteOrganizationPlatformRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteOrganizationPlatform().'
            );
        }

        if (requestParameters['deleteOrganizationRequest'] == null) {
            throw new runtime.RequiredError(
                'deleteOrganizationRequest',
                'Required parameter "deleteOrganizationRequest" was null or undefined when calling deleteOrganizationPlatform().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/internal/platform/organizations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteOrganizationRequestToJSON(requestParameters['deleteOrganizationRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Permanently delete an organization and all associated data
     * Delete organization
     */
    async deleteOrganizationPlatform(requestParameters: DeleteOrganizationPlatformRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.deleteOrganizationPlatformRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get platform-wide API usage statistics
     * Get API usage
     */
    async getAPIUsagePlatformRaw(requestParameters: GetAPIUsagePlatformRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIUsageReport>> {
        const queryParameters: any = {};

        if (requestParameters['period'] != null) {
            queryParameters['period'] = requestParameters['period'];
        }

        if (requestParameters['organizationId'] != null) {
            queryParameters['organization_id'] = requestParameters['organizationId'];
        }

        if (requestParameters['breakdown'] != null) {
            queryParameters['breakdown'] = requestParameters['breakdown'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/internal/platform/api/usage`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIUsageReportFromJSON(jsonValue));
    }

    /**
     * Get platform-wide API usage statistics
     * Get API usage
     */
    async getAPIUsagePlatform(requestParameters: GetAPIUsagePlatformRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIUsageReport> {
        const response = await this.getAPIUsagePlatformRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get high-level audit activity summary
     * Get audit summary
     */
    async getAuditSummaryPlatformRaw(requestParameters: GetAuditSummaryPlatformRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuditSummary>> {
        const queryParameters: any = {};

        if (requestParameters['period'] != null) {
            queryParameters['period'] = requestParameters['period'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/internal/platform/audit/summary`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuditSummaryFromJSON(jsonValue));
    }

    /**
     * Get high-level audit activity summary
     * Get audit summary
     */
    async getAuditSummaryPlatform(requestParameters: GetAuditSummaryPlatformRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuditSummary> {
        const response = await this.getAuditSummaryPlatformRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get comprehensive audit trail with advanced filtering
     * Get audit trail
     */
    async getAuditTrailPlatformRaw(requestParameters: GetAuditTrailPlatformRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuditTrailResponse>> {
        const queryParameters: any = {};

        if (requestParameters['after'] != null) {
            queryParameters['after'] = requestParameters['after'];
        }

        if (requestParameters['before'] != null) {
            queryParameters['before'] = requestParameters['before'];
        }

        if (requestParameters['first'] != null) {
            queryParameters['first'] = requestParameters['first'];
        }

        if (requestParameters['last'] != null) {
            queryParameters['last'] = requestParameters['last'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['orderBy'] = requestParameters['orderBy']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['organizationId'] != null) {
            queryParameters['organizationId'] = requestParameters['organizationId'];
        }

        if (requestParameters['userId'] != null) {
            queryParameters['userId'] = requestParameters['userId'];
        }

        if (requestParameters['action'] != null) {
            queryParameters['action'] = requestParameters['action'];
        }

        if (requestParameters['resource'] != null) {
            queryParameters['resource'] = requestParameters['resource'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['riskLevel'] != null) {
            queryParameters['riskLevel'] = requestParameters['riskLevel'];
        }

        if (requestParameters['startDate'] != null) {
            queryParameters['startDate'] = (requestParameters['startDate'] as any).toISOString();
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['endDate'] = (requestParameters['endDate'] as any).toISOString();
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/internal/platform/audit/trail`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuditTrailResponseFromJSON(jsonValue));
    }

    /**
     * Get comprehensive audit trail with advanced filtering
     * Get audit trail
     */
    async getAuditTrailPlatform(requestParameters: GetAuditTrailPlatformRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuditTrailResponse> {
        const response = await this.getAuditTrailPlatformRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get platform-wide billing overview and metrics
     * Get billing overview
     */
    async getBillingOverviewPlatformRaw(requestParameters: GetBillingOverviewPlatformRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BillingOverview>> {
        const queryParameters: any = {};

        if (requestParameters['period'] != null) {
            queryParameters['period'] = requestParameters['period'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/internal/platform/billing/overview`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BillingOverviewFromJSON(jsonValue));
    }

    /**
     * Get platform-wide billing overview and metrics
     * Get billing overview
     */
    async getBillingOverviewPlatform(requestParameters: GetBillingOverviewPlatformRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BillingOverview> {
        const response = await this.getBillingOverviewPlatformRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get comprehensive compliance status report
     * Get compliance report
     */
    async getComplianceReportPlatformRaw(requestParameters: GetComplianceReportPlatformRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComplianceReport>> {
        const queryParameters: any = {};

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        if (requestParameters['period'] != null) {
            queryParameters['period'] = requestParameters['period'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/internal/platform/compliance/report`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComplianceReportFromJSON(jsonValue));
    }

    /**
     * Get comprehensive compliance status report
     * Get compliance report
     */
    async getComplianceReportPlatform(requestParameters: GetComplianceReportPlatformRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComplianceReport> {
        const response = await this.getComplianceReportPlatformRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get system error rates and error analysis
     * Get error rates
     */
    async getErrorRatesPlatformRaw(requestParameters: GetErrorRatesPlatformRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ErrorRateMetrics>> {
        const queryParameters: any = {};

        if (requestParameters['period'] != null) {
            queryParameters['period'] = requestParameters['period'];
        }

        if (requestParameters['level'] != null) {
            queryParameters['level'] = requestParameters['level'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/internal/platform/system/errors`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ErrorRateMetricsFromJSON(jsonValue));
    }

    /**
     * Get system error rates and error analysis
     * Get error rates
     */
    async getErrorRatesPlatform(requestParameters: GetErrorRatesPlatformRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ErrorRateMetrics> {
        const response = await this.getErrorRatesPlatformRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get usage statistics for all platform features
     * Get feature usage
     */
    async getFeatureUsagePlatformRaw(requestParameters: GetFeatureUsagePlatformRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FeatureUsageReport>> {
        const queryParameters: any = {};

        if (requestParameters['period'] != null) {
            queryParameters['period'] = requestParameters['period'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/internal/platform/features/usage`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FeatureUsageReportFromJSON(jsonValue));
    }

    /**
     * Get usage statistics for all platform features
     * Get feature usage
     */
    async getFeatureUsagePlatform(requestParameters: GetFeatureUsagePlatformRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FeatureUsageReport> {
        const response = await this.getFeatureUsagePlatformRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get platform growth and adoption metrics
     * Get growth metrics
     */
    async getGrowthMetricsPlatformRaw(requestParameters: GetGrowthMetricsPlatformRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlatformGrowthMetrics>> {
        const queryParameters: any = {};

        if (requestParameters['period'] != null) {
            queryParameters['period'] = requestParameters['period'];
        }

        if (requestParameters['compare'] != null) {
            queryParameters['compare'] = requestParameters['compare'];
        }

        if (requestParameters['breakdown'] != null) {
            queryParameters['breakdown'] = requestParameters['breakdown'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/internal/platform/metrics/growth`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlatformGrowthMetricsFromJSON(jsonValue));
    }

    /**
     * Get platform growth and adoption metrics
     * Get growth metrics
     */
    async getGrowthMetricsPlatform(requestParameters: GetGrowthMetricsPlatformRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlatformGrowthMetrics> {
        const response = await this.getGrowthMetricsPlatformRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get scheduled and completed maintenance windows
     * Get maintenance windows
     */
    async getMaintenanceWindowsPlatformRaw(requestParameters: GetMaintenanceWindowsPlatformRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MaintenanceWindowListResponse>> {
        const queryParameters: any = {};

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['period'] != null) {
            queryParameters['period'] = requestParameters['period'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/internal/platform/maintenance`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MaintenanceWindowListResponseFromJSON(jsonValue));
    }

    /**
     * Get scheduled and completed maintenance windows
     * Get maintenance windows
     */
    async getMaintenanceWindowsPlatform(requestParameters: GetMaintenanceWindowsPlatformRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MaintenanceWindowListResponse> {
        const response = await this.getMaintenanceWindowsPlatformRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get detailed information about a specific organization
     * Get organization details
     */
    async getOrganizationDetailsPlatformRaw(requestParameters: GetOrganizationDetailsPlatformRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlatformOrganizationDetails>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getOrganizationDetailsPlatform().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/internal/platform/organizations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlatformOrganizationDetailsFromJSON(jsonValue));
    }

    /**
     * Get detailed information about a specific organization
     * Get organization details
     */
    async getOrganizationDetailsPlatform(requestParameters: GetOrganizationDetailsPlatformRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlatformOrganizationDetails> {
        const response = await this.getOrganizationDetailsPlatformRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get usage and performance statistics for an organization
     * Get organization statistics
     */
    async getOrganizationStatsPlatformRaw(requestParameters: GetOrganizationStatsPlatformRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlatformOrganizationStats>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getOrganizationStatsPlatform().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['period'] != null) {
            queryParameters['period'] = requestParameters['period'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/internal/platform/organizations/{id}/stats`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlatformOrganizationStatsFromJSON(jsonValue));
    }

    /**
     * Get usage and performance statistics for an organization
     * Get organization statistics
     */
    async getOrganizationStatsPlatform(requestParameters: GetOrganizationStatsPlatformRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlatformOrganizationStats> {
        const response = await this.getOrganizationStatsPlatformRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get detailed usage metrics for billing and monitoring
     * Get organization usage
     */
    async getOrganizationUsagePlatformRaw(requestParameters: GetOrganizationUsagePlatformRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganizationUsage>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getOrganizationUsagePlatform().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['period'] != null) {
            queryParameters['period'] = requestParameters['period'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/internal/platform/organizations/{id}/usage`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganizationUsageFromJSON(jsonValue));
    }

    /**
     * Get detailed usage metrics for billing and monitoring
     * Get organization usage
     */
    async getOrganizationUsagePlatform(requestParameters: GetOrganizationUsagePlatformRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganizationUsage> {
        const response = await this.getOrganizationUsagePlatformRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get detailed system performance metrics
     * Get performance metrics
     */
    async getPerformanceMetricsPlatformRaw(requestParameters: GetPerformanceMetricsPlatformRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PerformanceMetrics>> {
        const queryParameters: any = {};

        if (requestParameters['period'] != null) {
            queryParameters['period'] = requestParameters['period'];
        }

        if (requestParameters['component'] != null) {
            queryParameters['component'] = requestParameters['component'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/internal/platform/system/performance`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PerformanceMetricsFromJSON(jsonValue));
    }

    /**
     * Get detailed system performance metrics
     * Get performance metrics
     */
    async getPerformanceMetricsPlatform(requestParameters: GetPerformanceMetricsPlatformRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PerformanceMetrics> {
        const response = await this.getPerformanceMetricsPlatformRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get overall platform statistics and KPIs
     * Get platform statistics
     */
    async getPlatformStatsPlatformRaw(requestParameters: GetPlatformStatsPlatformRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlatformStats>> {
        const queryParameters: any = {};

        if (requestParameters['period'] != null) {
            queryParameters['period'] = requestParameters['period'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/internal/platform/stats`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlatformStatsFromJSON(jsonValue));
    }

    /**
     * Get overall platform statistics and KPIs
     * Get platform statistics
     */
    async getPlatformStatsPlatform(requestParameters: GetPlatformStatsPlatformRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlatformStats> {
        const response = await this.getPlatformStatsPlatformRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get API rate limiting statistics and violations
     * Get rate limit statistics
     */
    async getRateLimitStatsPlatformRaw(requestParameters: GetRateLimitStatsPlatformRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RateLimitStats>> {
        const queryParameters: any = {};

        if (requestParameters['period'] != null) {
            queryParameters['period'] = requestParameters['period'];
        }

        if (requestParameters['organizationId'] != null) {
            queryParameters['organization_id'] = requestParameters['organizationId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/internal/platform/api/rate-limits`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RateLimitStatsFromJSON(jsonValue));
    }

    /**
     * Get API rate limiting statistics and violations
     * Get rate limit statistics
     */
    async getRateLimitStatsPlatform(requestParameters: GetRateLimitStatsPlatformRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RateLimitStats> {
        const response = await this.getRateLimitStatsPlatformRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get platform revenue and financial metrics
     * Get revenue metrics
     */
    async getRevenueMetricsPlatformRaw(requestParameters: GetRevenueMetricsPlatformRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RevenueMetrics>> {
        const queryParameters: any = {};

        if (requestParameters['period'] != null) {
            queryParameters['period'] = requestParameters['period'];
        }

        if (requestParameters['currency'] != null) {
            queryParameters['currency'] = requestParameters['currency'];
        }

        if (requestParameters['breakdown'] != null) {
            queryParameters['breakdown'] = requestParameters['breakdown'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/internal/platform/metrics/revenue`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RevenueMetricsFromJSON(jsonValue));
    }

    /**
     * Get platform revenue and financial metrics
     * Get revenue metrics
     */
    async getRevenueMetricsPlatform(requestParameters: GetRevenueMetricsPlatformRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RevenueMetrics> {
        const response = await this.getRevenueMetricsPlatformRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get detailed revenue report and projections
     * Get revenue report
     */
    async getRevenueReportPlatformRaw(requestParameters: GetRevenueReportPlatformRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RevenueReport>> {
        const queryParameters: any = {};

        if (requestParameters['period'] != null) {
            queryParameters['period'] = requestParameters['period'];
        }

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        if (requestParameters['breakdown'] != null) {
            queryParameters['breakdown'] = requestParameters['breakdown'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/internal/platform/billing/revenue`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RevenueReportFromJSON(jsonValue));
    }

    /**
     * Get detailed revenue report and projections
     * Get revenue report
     */
    async getRevenueReportPlatform(requestParameters: GetRevenueReportPlatformRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RevenueReport> {
        const response = await this.getRevenueReportPlatformRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get security overview and threat analysis
     * Get security dashboard
     */
    async getSecurityDashboardPlatformRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SecurityDashboard>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/internal/platform/security/dashboard`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SecurityDashboardFromJSON(jsonValue));
    }

    /**
     * Get security overview and threat analysis
     * Get security dashboard
     */
    async getSecurityDashboardPlatform(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SecurityDashboard> {
        const response = await this.getSecurityDashboardPlatformRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get detailed information about a specific subscription
     * Get subscription details
     */
    async getSubscriptionDetailsPlatformRaw(requestParameters: GetSubscriptionDetailsPlatformRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionDetails>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getSubscriptionDetailsPlatform().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/internal/platform/subscriptions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionDetailsFromJSON(jsonValue));
    }

    /**
     * Get detailed information about a specific subscription
     * Get subscription details
     */
    async getSubscriptionDetailsPlatform(requestParameters: GetSubscriptionDetailsPlatformRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionDetails> {
        const response = await this.getSubscriptionDetailsPlatformRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get overall system health status and checks
     * Get system health
     */
    async getSystemHealthPlatformRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SystemHealth>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/internal/platform/system/health`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SystemHealthFromJSON(jsonValue));
    }

    /**
     * Get overall system health status and checks
     * Get system health
     */
    async getSystemHealthPlatform(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SystemHealth> {
        const response = await this.getSystemHealthPlatformRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get system performance metrics and resource usage
     * Get system metrics
     */
    async getSystemMetricsPlatformRaw(requestParameters: GetSystemMetricsPlatformRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SystemMetrics>> {
        const queryParameters: any = {};

        if (requestParameters['period'] != null) {
            queryParameters['period'] = requestParameters['period'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/internal/platform/system/metrics`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SystemMetricsFromJSON(jsonValue));
    }

    /**
     * Get system performance metrics and resource usage
     * Get system metrics
     */
    async getSystemMetricsPlatform(requestParameters: GetSystemMetricsPlatformRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SystemMetrics> {
        const response = await this.getSystemMetricsPlatformRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get detailed usage analytics across all features
     * Get usage analytics
     */
    async getUsageAnalyticsPlatformRaw(requestParameters: GetUsageAnalyticsPlatformRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UsageAnalytics>> {
        const queryParameters: any = {};

        if (requestParameters['period'] != null) {
            queryParameters['period'] = requestParameters['period'];
        }

        if (requestParameters['features'] != null) {
            queryParameters['features'] = requestParameters['features'];
        }

        if (requestParameters['compare'] != null) {
            queryParameters['compare'] = requestParameters['compare'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/internal/platform/analytics/usage`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UsageAnalyticsFromJSON(jsonValue));
    }

    /**
     * Get detailed usage analytics across all features
     * Get usage analytics
     */
    async getUsageAnalyticsPlatform(requestParameters: GetUsageAnalyticsPlatformRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UsageAnalytics> {
        const response = await this.getUsageAnalyticsPlatformRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get detailed information about a specific user
     * Get user details
     */
    async getUserDetailsPlatformRaw(requestParameters: GetUserDetailsPlatformRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlatformUserDetails>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getUserDetailsPlatform().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/internal/platform/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlatformUserDetailsFromJSON(jsonValue));
    }

    /**
     * Get detailed information about a specific user
     * Get user details
     */
    async getUserDetailsPlatform(requestParameters: GetUserDetailsPlatformRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlatformUserDetails> {
        const response = await this.getUserDetailsPlatformRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all active sessions for a user
     * Get user sessions
     */
    async getUserSessionsPlatformRaw(requestParameters: GetUserSessionsPlatformRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserSessionListResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getUserSessionsPlatform().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/internal/platform/users/{id}/sessions`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserSessionListResponseFromJSON(jsonValue));
    }

    /**
     * Get all active sessions for a user
     * Get user sessions
     */
    async getUserSessionsPlatform(requestParameters: GetUserSessionsPlatformRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserSessionListResponse> {
        const response = await this.getUserSessionsPlatformRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create an impersonation session for troubleshooting
     * Impersonate user
     */
    async impersonateUserPlatformRaw(requestParameters: ImpersonateUserPlatformRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ImpersonationResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling impersonateUserPlatform().'
            );
        }

        if (requestParameters['impersonateUserRequest'] == null) {
            throw new runtime.RequiredError(
                'impersonateUserRequest',
                'Required parameter "impersonateUserRequest" was null or undefined when calling impersonateUserPlatform().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/internal/platform/users/{id}/impersonate`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ImpersonateUserRequestToJSON(requestParameters['impersonateUserRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ImpersonationResponseFromJSON(jsonValue));
    }

    /**
     * Create an impersonation session for troubleshooting
     * Impersonate user
     */
    async impersonateUserPlatform(requestParameters: ImpersonateUserPlatformRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ImpersonationResponse> {
        const response = await this.impersonateUserPlatformRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all API keys across all organizations
     * List API keys
     */
    async listAPIKeysPlatformRaw(requestParameters: ListAPIKeysPlatformRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedOutputAPIKeySummary>> {
        const queryParameters: any = {};

        if (requestParameters['after'] != null) {
            queryParameters['after'] = requestParameters['after'];
        }

        if (requestParameters['before'] != null) {
            queryParameters['before'] = requestParameters['before'];
        }

        if (requestParameters['first'] != null) {
            queryParameters['first'] = requestParameters['first'];
        }

        if (requestParameters['last'] != null) {
            queryParameters['last'] = requestParameters['last'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['orderBy'] = requestParameters['orderBy']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['organizationId'] != null) {
            queryParameters['organization_id'] = requestParameters['organizationId'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/internal/platform/api/keys`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedOutputAPIKeySummaryFromJSON(jsonValue));
    }

    /**
     * Get all API keys across all organizations
     * List API keys
     */
    async listAPIKeysPlatform(requestParameters: ListAPIKeysPlatformRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedOutputAPIKeySummary> {
        const response = await this.listAPIKeysPlatformRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a paginated list of all organizations on the platform
     * List all organizations
     */
    async listAllOrganizationsPlatformRaw(requestParameters: ListAllOrganizationsPlatformRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlatformOrganizationListResponse>> {
        const queryParameters: any = {};

        if (requestParameters['after'] != null) {
            queryParameters['after'] = requestParameters['after'];
        }

        if (requestParameters['before'] != null) {
            queryParameters['before'] = requestParameters['before'];
        }

        if (requestParameters['first'] != null) {
            queryParameters['first'] = requestParameters['first'];
        }

        if (requestParameters['last'] != null) {
            queryParameters['last'] = requestParameters['last'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['orderBy'] = requestParameters['orderBy']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['plan'] != null) {
            queryParameters['plan'] = requestParameters['plan'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/internal/platform/organizations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlatformOrganizationListResponseFromJSON(jsonValue));
    }

    /**
     * Get a paginated list of all organizations on the platform
     * List all organizations
     */
    async listAllOrganizationsPlatform(requestParameters: ListAllOrganizationsPlatformRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlatformOrganizationListResponse> {
        const response = await this.listAllOrganizationsPlatformRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a paginated list of all users across all organizations
     * List all users
     */
    async listAllUsersPlatformRaw(requestParameters: ListAllUsersPlatformRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlatformUserListResponse>> {
        const queryParameters: any = {};

        if (requestParameters['after'] != null) {
            queryParameters['after'] = requestParameters['after'];
        }

        if (requestParameters['before'] != null) {
            queryParameters['before'] = requestParameters['before'];
        }

        if (requestParameters['first'] != null) {
            queryParameters['first'] = requestParameters['first'];
        }

        if (requestParameters['last'] != null) {
            queryParameters['last'] = requestParameters['last'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['orderBy'] = requestParameters['orderBy']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['organizationId'] != null) {
            queryParameters['organizationId'] = requestParameters['organizationId'];
        }

        if (requestParameters['userType'] != null) {
            queryParameters['user_type'] = requestParameters['userType'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/internal/platform/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlatformUserListResponseFromJSON(jsonValue));
    }

    /**
     * Get a paginated list of all users across all organizations
     * List all users
     */
    async listAllUsersPlatform(requestParameters: ListAllUsersPlatformRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlatformUserListResponse> {
        const response = await this.listAllUsersPlatformRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all platform feature flags and their status
     * List feature flags
     */
    async listFeatureFlagsPlatformRaw(requestParameters: ListFeatureFlagsPlatformRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FeatureFlagListResponse>> {
        const queryParameters: any = {};

        if (requestParameters['after'] != null) {
            queryParameters['after'] = requestParameters['after'];
        }

        if (requestParameters['before'] != null) {
            queryParameters['before'] = requestParameters['before'];
        }

        if (requestParameters['first'] != null) {
            queryParameters['first'] = requestParameters['first'];
        }

        if (requestParameters['last'] != null) {
            queryParameters['last'] = requestParameters['last'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['orderBy'] = requestParameters['orderBy']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/internal/platform/features`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FeatureFlagListResponseFromJSON(jsonValue));
    }

    /**
     * Get all platform feature flags and their status
     * List feature flags
     */
    async listFeatureFlagsPlatform(requestParameters: ListFeatureFlagsPlatformRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FeatureFlagListResponse> {
        const response = await this.listFeatureFlagsPlatformRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all security incidents and alerts
     * List security incidents
     */
    async listSecurityIncidentsPlatformRaw(requestParameters: ListSecurityIncidentsPlatformRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SecurityIncidentListResponse>> {
        const queryParameters: any = {};

        if (requestParameters['after'] != null) {
            queryParameters['after'] = requestParameters['after'];
        }

        if (requestParameters['before'] != null) {
            queryParameters['before'] = requestParameters['before'];
        }

        if (requestParameters['first'] != null) {
            queryParameters['first'] = requestParameters['first'];
        }

        if (requestParameters['last'] != null) {
            queryParameters['last'] = requestParameters['last'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['orderBy'] = requestParameters['orderBy']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['severity'] != null) {
            queryParameters['severity'] = requestParameters['severity'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['period'] != null) {
            queryParameters['period'] = requestParameters['period'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/internal/platform/security/incidents`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SecurityIncidentListResponseFromJSON(jsonValue));
    }

    /**
     * Get all security incidents and alerts
     * List security incidents
     */
    async listSecurityIncidentsPlatform(requestParameters: ListSecurityIncidentsPlatformRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SecurityIncidentListResponse> {
        const response = await this.listSecurityIncidentsPlatformRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all active subscriptions across the platform
     * List subscriptions
     */
    async listSubscriptionsPlatformRaw(requestParameters: ListSubscriptionsPlatformRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionListResponse>> {
        const queryParameters: any = {};

        if (requestParameters['after'] != null) {
            queryParameters['after'] = requestParameters['after'];
        }

        if (requestParameters['before'] != null) {
            queryParameters['before'] = requestParameters['before'];
        }

        if (requestParameters['first'] != null) {
            queryParameters['first'] = requestParameters['first'];
        }

        if (requestParameters['last'] != null) {
            queryParameters['last'] = requestParameters['last'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['orderBy'] = requestParameters['orderBy']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['plan'] != null) {
            queryParameters['plan'] = requestParameters['plan'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/internal/platform/subscriptions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionListResponseFromJSON(jsonValue));
    }

    /**
     * Get all active subscriptions across the platform
     * List subscriptions
     */
    async listSubscriptionsPlatform(requestParameters: ListSubscriptionsPlatformRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionListResponse> {
        const response = await this.listSubscriptionsPlatformRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all support tickets across the platform
     * List support tickets
     */
    async listSupportTicketsPlatformRaw(requestParameters: ListSupportTicketsPlatformRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SupportTicketListResponse>> {
        const queryParameters: any = {};

        if (requestParameters['after'] != null) {
            queryParameters['after'] = requestParameters['after'];
        }

        if (requestParameters['before'] != null) {
            queryParameters['before'] = requestParameters['before'];
        }

        if (requestParameters['first'] != null) {
            queryParameters['first'] = requestParameters['first'];
        }

        if (requestParameters['last'] != null) {
            queryParameters['last'] = requestParameters['last'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['orderBy'] = requestParameters['orderBy']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['priority'] != null) {
            queryParameters['priority'] = requestParameters['priority'];
        }

        if (requestParameters['assignee'] != null) {
            queryParameters['assignee'] = requestParameters['assignee'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/internal/platform/support/tickets`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SupportTicketListResponseFromJSON(jsonValue));
    }

    /**
     * Get all support tickets across the platform
     * List support tickets
     */
    async listSupportTicketsPlatform(requestParameters: ListSupportTicketsPlatformRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SupportTicketListResponse> {
        const response = await this.listSupportTicketsPlatformRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Force a password reset for a user account
     * Reset user password
     */
    async resetUserPasswordPlatformRaw(requestParameters: ResetUserPasswordPlatformRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResetUserPasswordResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling resetUserPasswordPlatform().'
            );
        }

        if (requestParameters['resetUserPasswordRequest'] == null) {
            throw new runtime.RequiredError(
                'resetUserPasswordRequest',
                'Required parameter "resetUserPasswordRequest" was null or undefined when calling resetUserPasswordPlatform().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/internal/platform/users/{id}/reset-password`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ResetUserPasswordRequestToJSON(requestParameters['resetUserPasswordRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResetUserPasswordResponseFromJSON(jsonValue));
    }

    /**
     * Force a password reset for a user account
     * Reset user password
     */
    async resetUserPasswordPlatform(requestParameters: ResetUserPasswordPlatformRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResetUserPasswordResponse> {
        const response = await this.resetUserPasswordPlatformRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Revoke an API key for security reasons
     * Revoke API key
     */
    async revokeAPIKeyPlatformRaw(requestParameters: RevokeAPIKeyPlatformRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling revokeAPIKeyPlatform().'
            );
        }

        if (requestParameters['revokeAPIKeyRequest'] == null) {
            throw new runtime.RequiredError(
                'revokeAPIKeyRequest',
                'Required parameter "revokeAPIKeyRequest" was null or undefined when calling revokeAPIKeyPlatform().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/internal/platform/api/keys/{id}/revoke`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RevokeAPIKeyRequestToJSON(requestParameters['revokeAPIKeyRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Revoke an API key for security reasons
     * Revoke API key
     */
    async revokeAPIKeyPlatform(requestParameters: RevokeAPIKeyPlatformRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.revokeAPIKeyPlatformRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Revoke all active sessions for a user
     * Revoke user sessions
     */
    async revokeUserSessionsPlatformRaw(requestParameters: RevokeUserSessionsPlatformRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RevokeUserSessionsResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling revokeUserSessionsPlatform().'
            );
        }

        if (requestParameters['revokeUserSessionsRequest'] == null) {
            throw new runtime.RequiredError(
                'revokeUserSessionsRequest',
                'Required parameter "revokeUserSessionsRequest" was null or undefined when calling revokeUserSessionsPlatform().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/internal/platform/users/{id}/revoke-sessions`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RevokeUserSessionsRequestToJSON(requestParameters['revokeUserSessionsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RevokeUserSessionsResponseFromJSON(jsonValue));
    }

    /**
     * Revoke all active sessions for a user
     * Revoke user sessions
     */
    async revokeUserSessionsPlatform(requestParameters: RevokeUserSessionsPlatformRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RevokeUserSessionsResponse> {
        const response = await this.revokeUserSessionsPlatformRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Initiate a comprehensive security scan
     * Run security scan
     */
    async runSecurityScanPlatformRaw(requestParameters: RunSecurityScanPlatformRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SecurityScanResponse>> {
        if (requestParameters['securityScanRequest'] == null) {
            throw new runtime.RequiredError(
                'securityScanRequest',
                'Required parameter "securityScanRequest" was null or undefined when calling runSecurityScanPlatform().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/internal/platform/security/scan`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SecurityScanRequestToJSON(requestParameters['securityScanRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SecurityScanResponseFromJSON(jsonValue));
    }

    /**
     * Initiate a comprehensive security scan
     * Run security scan
     */
    async runSecurityScanPlatform(requestParameters: RunSecurityScanPlatformRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SecurityScanResponse> {
        const response = await this.runSecurityScanPlatformRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Schedule a maintenance window
     * Schedule maintenance
     */
    async scheduleMaintenancePlatformRaw(requestParameters: ScheduleMaintenancePlatformRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MaintenanceWindow>> {
        if (requestParameters['scheduleMaintenanceRequest'] == null) {
            throw new runtime.RequiredError(
                'scheduleMaintenanceRequest',
                'Required parameter "scheduleMaintenanceRequest" was null or undefined when calling scheduleMaintenancePlatform().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/internal/platform/maintenance`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ScheduleMaintenanceRequestToJSON(requestParameters['scheduleMaintenanceRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MaintenanceWindowFromJSON(jsonValue));
    }

    /**
     * Schedule a maintenance window
     * Schedule maintenance
     */
    async scheduleMaintenancePlatform(requestParameters: ScheduleMaintenancePlatformRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MaintenanceWindow> {
        const response = await this.scheduleMaintenancePlatformRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Send a notification to all or specific organizations
     * Send platform notification
     */
    async sendPlatformNotificationPlatformRaw(requestParameters: SendPlatformNotificationPlatformRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlatformNotificationResponse>> {
        if (requestParameters['platformNotificationRequest'] == null) {
            throw new runtime.RequiredError(
                'platformNotificationRequest',
                'Required parameter "platformNotificationRequest" was null or undefined when calling sendPlatformNotificationPlatform().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/internal/platform/notifications`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PlatformNotificationRequestToJSON(requestParameters['platformNotificationRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlatformNotificationResponseFromJSON(jsonValue));
    }

    /**
     * Send a notification to all or specific organizations
     * Send platform notification
     */
    async sendPlatformNotificationPlatform(requestParameters: SendPlatformNotificationPlatformRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlatformNotificationResponse> {
        const response = await this.sendPlatformNotificationPlatformRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Suspend an organization and disable all access
     * Suspend organization
     */
    async suspendOrganizationPlatformRaw(requestParameters: SuspendOrganizationPlatformRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling suspendOrganizationPlatform().'
            );
        }

        if (requestParameters['suspendOrganizationRequest'] == null) {
            throw new runtime.RequiredError(
                'suspendOrganizationRequest',
                'Required parameter "suspendOrganizationRequest" was null or undefined when calling suspendOrganizationPlatform().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/internal/platform/organizations/{id}/suspend`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SuspendOrganizationRequestToJSON(requestParameters['suspendOrganizationRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Suspend an organization and disable all access
     * Suspend organization
     */
    async suspendOrganizationPlatform(requestParameters: SuspendOrganizationPlatformRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.suspendOrganizationPlatformRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Unblock a previously blocked user account
     * Unblock user
     */
    async unblockUserPlatformRaw(requestParameters: UnblockUserPlatformRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling unblockUserPlatform().'
            );
        }

        if (requestParameters['unblockUserRequest'] == null) {
            throw new runtime.RequiredError(
                'unblockUserRequest',
                'Required parameter "unblockUserRequest" was null or undefined when calling unblockUserPlatform().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/internal/platform/users/{id}/unblock`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UnblockUserRequestToJSON(requestParameters['unblockUserRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Unblock a previously blocked user account
     * Unblock user
     */
    async unblockUserPlatform(requestParameters: UnblockUserPlatformRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.unblockUserPlatformRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing feature flag
     * Update feature flag
     */
    async updateFeatureFlagPlatformRaw(requestParameters: UpdateFeatureFlagPlatformRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FeatureFlag>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateFeatureFlagPlatform().'
            );
        }

        if (requestParameters['updateFeatureFlagRequest'] == null) {
            throw new runtime.RequiredError(
                'updateFeatureFlagRequest',
                'Required parameter "updateFeatureFlagRequest" was null or undefined when calling updateFeatureFlagPlatform().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/internal/platform/features/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateFeatureFlagRequestToJSON(requestParameters['updateFeatureFlagRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FeatureFlagFromJSON(jsonValue));
    }

    /**
     * Update an existing feature flag
     * Update feature flag
     */
    async updateFeatureFlagPlatform(requestParameters: UpdateFeatureFlagPlatformRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FeatureFlag> {
        const response = await this.updateFeatureFlagPlatformRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update subscription details or status
     * Update subscription
     */
    async updateSubscriptionPlatformRaw(requestParameters: UpdateSubscriptionPlatformRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionDetails>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateSubscriptionPlatform().'
            );
        }

        if (requestParameters['updateSubscriptionRequest'] == null) {
            throw new runtime.RequiredError(
                'updateSubscriptionRequest',
                'Required parameter "updateSubscriptionRequest" was null or undefined when calling updateSubscriptionPlatform().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/internal/platform/subscriptions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateSubscriptionRequestToJSON(requestParameters['updateSubscriptionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionDetailsFromJSON(jsonValue));
    }

    /**
     * Update subscription details or status
     * Update subscription
     */
    async updateSubscriptionPlatform(requestParameters: UpdateSubscriptionPlatformRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionDetails> {
        const response = await this.updateSubscriptionPlatformRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
