/* tslint:disable */
/* eslint-disable */
/**
 * My Project
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AuthStatus,
    AuthStatusFromJSON,
    AuthStatusToJSON,
    EmptyOutputBody,
    EmptyOutputBodyFromJSON,
    EmptyOutputBodyToJSON,
    GenerateBackupCodesRequest,
    GenerateBackupCodesRequestFromJSON,
    GenerateBackupCodesRequestToJSON,
    InlineResponse400,
    InlineResponse400FromJSON,
    InlineResponse400ToJSON,
    LoginRequest,
    LoginRequestFromJSON,
    LoginRequestToJSON,
    LoginResponse,
    LoginResponseFromJSON,
    LoginResponseToJSON,
    LogoutRequest,
    LogoutRequestFromJSON,
    LogoutRequestToJSON,
    LogoutResponse,
    LogoutResponseFromJSON,
    LogoutResponseToJSON,
    MagicLinkRequest,
    MagicLinkRequestFromJSON,
    MagicLinkRequestToJSON,
    MagicLinkResponse,
    MagicLinkResponseFromJSON,
    MagicLinkResponseToJSON,
    MfaBackCodes,
    MfaBackCodesFromJSON,
    MfaBackCodesToJSON,
    MfaVerifyRequest,
    MfaVerifyRequestFromJSON,
    MfaVerifyRequestToJSON,
    MfaVerifyResponse,
    MfaVerifyResponseFromJSON,
    MfaVerifyResponseToJSON,
    PasswordResetConfirmRequest,
    PasswordResetConfirmRequestFromJSON,
    PasswordResetConfirmRequestToJSON,
    PasswordResetConfirmResponse,
    PasswordResetConfirmResponseFromJSON,
    PasswordResetConfirmResponseToJSON,
    PasswordResetRequest,
    PasswordResetRequestFromJSON,
    PasswordResetRequestToJSON,
    PasswordResetResponse,
    PasswordResetResponseFromJSON,
    PasswordResetResponseToJSON,
    RefreshTokenRequest,
    RefreshTokenRequestFromJSON,
    RefreshTokenRequestToJSON,
    RefreshTokenResponse,
    RefreshTokenResponseFromJSON,
    RefreshTokenResponseToJSON,
    RegisterRequest,
    RegisterRequestFromJSON,
    RegisterRequestToJSON,
    RegisterResponse,
    RegisterResponseFromJSON,
    RegisterResponseToJSON,
    ResendVerificationRequest,
    ResendVerificationRequestFromJSON,
    ResendVerificationRequestToJSON,
    ResendVerificationResponse,
    ResendVerificationResponseFromJSON,
    ResendVerificationResponseToJSON,
    SetupTotpRequest,
    SetupTotpRequestFromJSON,
    SetupTotpRequestToJSON,
    TotpSetupResponse,
    TotpSetupResponseFromJSON,
    TotpSetupResponseToJSON,
    VerificationRequest,
    VerificationRequestFromJSON,
    VerificationRequestToJSON,
    VerificationResponse,
    VerificationResponseFromJSON,
    VerificationResponseToJSON,
} from '../models';

export interface DeletePasskeyRequest {
    id: string;
}

export interface ForgotPasswordRequest {
    passwordResetRequest?: PasswordResetRequest;
}

export interface GetMFABackupCodesRequest {
    generateBackupCodesRequest?: GenerateBackupCodesRequest;
}

export interface LoginOperationRequest {
    loginRequest?: LoginRequest;
}

export interface LogoutOperationRequest {
    logoutRequest?: LogoutRequest;
}

export interface MagicLinkOperationRequest {
    magicLinkRequest?: MagicLinkRequest;
}

export interface OauthAuthorizeRequest {
    provider: string;
    state?: string;
    code?: string;
}

export interface OauthCallbackRequest {
    provider: string;
    state?: string;
    code?: string;
}

export interface RefreshTokenOperationRequest {
    refreshTokenRequest?: RefreshTokenRequest;
}

export interface RegisterOperationRequest {
    registerRequest?: RegisterRequest;
}

export interface ResendVerificationOperationRequest {
    resendVerificationRequest?: ResendVerificationRequest;
}

export interface ResetPasswordRequest {
    passwordResetConfirmRequest?: PasswordResetConfirmRequest;
}

export interface RevokeSessionRequest {
    id: string;
}

export interface SetupMFARequest {
    setupTotpRequest?: SetupTotpRequest;
}

export interface VerifyEmailRequest {
    verificationRequest?: VerificationRequest;
}

export interface VerifyMFARequest {
    mfaVerifyRequest?: MfaVerifyRequest;
}

export interface VerifyPhoneRequest {
    verificationRequest?: VerificationRequest;
}

/**
 * AuthenticationApi - interface
 * 
 * @export
 * @interface AuthenticationApiInterface
 */
export interface AuthenticationApiInterface {
    /**
     * Get current user authentication status and context
     * @summary Get authentication status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    authStatusRaw(): Promise<runtime.ApiResponse<AuthStatus>>;

    /**
     * Get current user authentication status and context
     * Get authentication status
     */
    authStatus(): Promise<AuthStatus>;

    /**
     * Begin WebAuthn passkey authentication process
     * @summary Begin passkey authentication
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    beginPasskeyAuthenticationRaw(): Promise<runtime.ApiResponse<EmptyOutputBody>>;

    /**
     * Begin WebAuthn passkey authentication process
     * Begin passkey authentication
     */
    beginPasskeyAuthentication(): Promise<EmptyOutputBody>;

    /**
     * Begin WebAuthn passkey registration process
     * @summary Begin passkey registration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    beginPasskeyRegistrationRaw(): Promise<runtime.ApiResponse<EmptyOutputBody>>;

    /**
     * Begin WebAuthn passkey registration process
     * Begin passkey registration
     */
    beginPasskeyRegistration(): Promise<EmptyOutputBody>;

    /**
     * Delete a specific passkey
     * @summary Delete passkey
     * @param {string} id Passkey ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    deletePasskeyRaw(requestParameters: DeletePasskeyRequest): Promise<runtime.ApiResponse<EmptyOutputBody>>;

    /**
     * Delete a specific passkey
     * Delete passkey
     */
    deletePasskey(requestParameters: DeletePasskeyRequest): Promise<EmptyOutputBody>;

    /**
     * Disable multi-factor authentication
     * @summary Disable MFA
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    disableMFARaw(): Promise<runtime.ApiResponse<EmptyOutputBody>>;

    /**
     * Disable multi-factor authentication
     * Disable MFA
     */
    disableMFA(): Promise<EmptyOutputBody>;

    /**
     * Complete WebAuthn passkey authentication process
     * @summary Finish passkey authentication
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    finishPasskeyAuthenticationRaw(): Promise<runtime.ApiResponse<EmptyOutputBody>>;

    /**
     * Complete WebAuthn passkey authentication process
     * Finish passkey authentication
     */
    finishPasskeyAuthentication(): Promise<EmptyOutputBody>;

    /**
     * Complete WebAuthn passkey registration process
     * @summary Finish passkey registration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    finishPasskeyRegistrationRaw(): Promise<runtime.ApiResponse<EmptyOutputBody>>;

    /**
     * Complete WebAuthn passkey registration process
     * Finish passkey registration
     */
    finishPasskeyRegistration(): Promise<EmptyOutputBody>;

    /**
     * Request password reset email
     * @summary Forgot password
     * @param {PasswordResetRequest} [passwordResetRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    forgotPasswordRaw(requestParameters: ForgotPasswordRequest): Promise<runtime.ApiResponse<PasswordResetResponse>>;

    /**
     * Request password reset email
     * Forgot password
     */
    forgotPassword(requestParameters: ForgotPasswordRequest): Promise<PasswordResetResponse>;

    /**
     * Get or regenerate MFA backup codes
     * @summary Get MFA backup codes
     * @param {GenerateBackupCodesRequest} [generateBackupCodesRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    getMFABackupCodesRaw(requestParameters: GetMFABackupCodesRequest): Promise<runtime.ApiResponse<MfaBackCodes>>;

    /**
     * Get or regenerate MFA backup codes
     * Get MFA backup codes
     */
    getMFABackupCodes(requestParameters: GetMFABackupCodesRequest): Promise<MfaBackCodes>;

    /**
     * List available OAuth providers
     * @summary List OAuth providers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    listOAuthProvidersRaw(): Promise<runtime.ApiResponse<EmptyOutputBody>>;

    /**
     * List available OAuth providers
     * List OAuth providers
     */
    listOAuthProviders(): Promise<EmptyOutputBody>;

    /**
     * List all passkeys registered for the current user
     * @summary List user passkeys
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    listPasskeysRaw(): Promise<runtime.ApiResponse<EmptyOutputBody>>;

    /**
     * List all passkeys registered for the current user
     * List user passkeys
     */
    listPasskeys(): Promise<EmptyOutputBody>;

    /**
     * List all active sessions for the current user
     * @summary List user sessions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    listSessionsRaw(): Promise<runtime.ApiResponse<EmptyOutputBody>>;

    /**
     * List all active sessions for the current user
     * List user sessions
     */
    listSessions(): Promise<EmptyOutputBody>;

    /**
     * Authenticate user with email/password, OAuth, or passwordless
     * @summary User login
     * @param {LoginRequest} [loginRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    loginRaw(requestParameters: LoginOperationRequest): Promise<runtime.ApiResponse<LoginResponse>>;

    /**
     * Authenticate user with email/password, OAuth, or passwordless
     * User login
     */
    login(requestParameters: LoginOperationRequest): Promise<LoginResponse>;

    /**
     * Log out user and invalidate session/tokens
     * @summary User logout
     * @param {LogoutRequest} [logoutRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    logoutRaw(requestParameters: LogoutOperationRequest): Promise<runtime.ApiResponse<LogoutResponse>>;

    /**
     * Log out user and invalidate session/tokens
     * User logout
     */
    logout(requestParameters: LogoutOperationRequest): Promise<LogoutResponse>;

    /**
     * Send passwordless magic link for authentication
     * @summary Send magic link
     * @param {MagicLinkRequest} [magicLinkRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    magicLinkRaw(requestParameters: MagicLinkOperationRequest): Promise<runtime.ApiResponse<MagicLinkResponse>>;

    /**
     * Send passwordless magic link for authentication
     * Send magic link
     */
    magicLink(requestParameters: MagicLinkOperationRequest): Promise<MagicLinkResponse>;

    /**
     * Use backup code for MFA recovery
     * @summary MFA recovery
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    mfaRecoveryRaw(): Promise<runtime.ApiResponse<EmptyOutputBody>>;

    /**
     * Use backup code for MFA recovery
     * MFA recovery
     */
    mfaRecovery(): Promise<EmptyOutputBody>;

    /**
     * Redirect to OAuth provider for authorization
     * @summary OAuth authorization
     * @param {string} provider OAuth provider name
     * @param {string} [state] OAuth provider state
     * @param {string} [code] OAuth provider code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    oauthAuthorizeRaw(requestParameters: OauthAuthorizeRequest): Promise<runtime.ApiResponse<void>>;

    /**
     * Redirect to OAuth provider for authorization
     * OAuth authorization
     */
    oauthAuthorize(requestParameters: OauthAuthorizeRequest): Promise<void>;

    /**
     * Handle OAuth provider callback
     * @summary OAuth callback
     * @param {string} provider OAuth provider name
     * @param {string} [state] OAuth provider state
     * @param {string} [code] OAuth provider code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    oauthCallbackRaw(requestParameters: OauthCallbackRequest): Promise<runtime.ApiResponse<LoginResponse>>;

    /**
     * Handle OAuth provider callback
     * OAuth callback
     */
    oauthCallback(requestParameters: OauthCallbackRequest): Promise<LoginResponse>;

    /**
     * Exchange OAuth authorization code for tokens
     * @summary OAuth token exchange
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    oauthTokenRaw(): Promise<runtime.ApiResponse<EmptyOutputBody>>;

    /**
     * Exchange OAuth authorization code for tokens
     * OAuth token exchange
     */
    oauthToken(): Promise<EmptyOutputBody>;

    /**
     * Get user information from OAuth token
     * @summary OAuth user info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    oauthUserInfoRaw(): Promise<runtime.ApiResponse<EmptyOutputBody>>;

    /**
     * Get user information from OAuth token
     * OAuth user info
     */
    oauthUserInfo(): Promise<EmptyOutputBody>;

    /**
     * Refresh access token using refresh token
     * @summary Refresh access token
     * @param {RefreshTokenRequest} [refreshTokenRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    refreshTokenRaw(requestParameters: RefreshTokenOperationRequest): Promise<runtime.ApiResponse<RefreshTokenResponse>>;

    /**
     * Refresh access token using refresh token
     * Refresh access token
     */
    refreshToken(requestParameters: RefreshTokenOperationRequest): Promise<RefreshTokenResponse>;

    /**
     * Register a new user account
     * @summary User registration
     * @param {RegisterRequest} [registerRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    registerRaw(requestParameters: RegisterOperationRequest): Promise<runtime.ApiResponse<RegisterResponse>>;

    /**
     * Register a new user account
     * User registration
     */
    register(requestParameters: RegisterOperationRequest): Promise<RegisterResponse>;

    /**
     * Resend email or SMS verification
     * @summary Resend verification
     * @param {ResendVerificationRequest} [resendVerificationRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    resendVerificationRaw(requestParameters: ResendVerificationOperationRequest): Promise<runtime.ApiResponse<ResendVerificationResponse>>;

    /**
     * Resend email or SMS verification
     * Resend verification
     */
    resendVerification(requestParameters: ResendVerificationOperationRequest): Promise<ResendVerificationResponse>;

    /**
     * Reset password with token from email
     * @summary Reset password
     * @param {PasswordResetConfirmRequest} [passwordResetConfirmRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    resetPasswordRaw(requestParameters: ResetPasswordRequest): Promise<runtime.ApiResponse<PasswordResetConfirmResponse>>;

    /**
     * Reset password with token from email
     * Reset password
     */
    resetPassword(requestParameters: ResetPasswordRequest): Promise<PasswordResetConfirmResponse>;

    /**
     * Revoke all sessions for the current user
     * @summary Revoke all sessions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    revokeAllSessionsRaw(): Promise<runtime.ApiResponse<EmptyOutputBody>>;

    /**
     * Revoke all sessions for the current user
     * Revoke all sessions
     */
    revokeAllSessions(): Promise<EmptyOutputBody>;

    /**
     * Revoke a specific session
     * @summary Revoke session
     * @param {string} id Session ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    revokeSessionRaw(requestParameters: RevokeSessionRequest): Promise<runtime.ApiResponse<EmptyOutputBody>>;

    /**
     * Revoke a specific session
     * Revoke session
     */
    revokeSession(requestParameters: RevokeSessionRequest): Promise<EmptyOutputBody>;

    /**
     * Setup multi-factor authentication
     * @summary Setup MFA
     * @param {SetupTotpRequest} [setupTotpRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    setupMFARaw(requestParameters: SetupMFARequest): Promise<runtime.ApiResponse<TotpSetupResponse>>;

    /**
     * Setup multi-factor authentication
     * Setup MFA
     */
    setupMFA(requestParameters: SetupMFARequest): Promise<TotpSetupResponse>;

    /**
     * Verify email address with token from email
     * @summary Verify email address
     * @param {VerificationRequest} [verificationRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    verifyEmailRaw(requestParameters: VerifyEmailRequest): Promise<runtime.ApiResponse<VerificationResponse>>;

    /**
     * Verify email address with token from email
     * Verify email address
     */
    verifyEmail(requestParameters: VerifyEmailRequest): Promise<VerificationResponse>;

    /**
     * Verify multi-factor authentication code
     * @summary Verify MFA
     * @param {MfaVerifyRequest} [mfaVerifyRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    verifyMFARaw(requestParameters: VerifyMFARequest): Promise<runtime.ApiResponse<MfaVerifyResponse>>;

    /**
     * Verify multi-factor authentication code
     * Verify MFA
     */
    verifyMFA(requestParameters: VerifyMFARequest): Promise<MfaVerifyResponse>;

    /**
     * Verify phone number with SMS code
     * @summary Verify phone number
     * @param {VerificationRequest} [verificationRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    verifyPhoneRaw(requestParameters: VerifyPhoneRequest): Promise<runtime.ApiResponse<VerificationResponse>>;

    /**
     * Verify phone number with SMS code
     * Verify phone number
     */
    verifyPhone(requestParameters: VerifyPhoneRequest): Promise<VerificationResponse>;

}

/**
 * 
 */
export class AuthenticationApi extends runtime.BaseAPI implements AuthenticationApiInterface {

    /**
     * Get current user authentication status and context
     * Get authentication status
     */
    async authStatusRaw(): Promise<runtime.ApiResponse<AuthStatus>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/public/auth/status`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthStatusFromJSON(jsonValue));
    }

    /**
     * Get current user authentication status and context
     * Get authentication status
     */
    async authStatus(): Promise<AuthStatus> {
        const response = await this.authStatusRaw();
        return await response.value();
    }

    /**
     * Begin WebAuthn passkey authentication process
     * Begin passkey authentication
     */
    async beginPasskeyAuthenticationRaw(): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/public/auth/passkeys/authenticate/begin`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Begin WebAuthn passkey authentication process
     * Begin passkey authentication
     */
    async beginPasskeyAuthentication(): Promise<EmptyOutputBody> {
        const response = await this.beginPasskeyAuthenticationRaw();
        return await response.value();
    }

    /**
     * Begin WebAuthn passkey registration process
     * Begin passkey registration
     */
    async beginPasskeyRegistrationRaw(): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/auth/passkeys/register/begin`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Begin WebAuthn passkey registration process
     * Begin passkey registration
     */
    async beginPasskeyRegistration(): Promise<EmptyOutputBody> {
        const response = await this.beginPasskeyRegistrationRaw();
        return await response.value();
    }

    /**
     * Delete a specific passkey
     * Delete passkey
     */
    async deletePasskeyRaw(requestParameters: DeletePasskeyRequest): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deletePasskey.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/auth/passkeys/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Delete a specific passkey
     * Delete passkey
     */
    async deletePasskey(requestParameters: DeletePasskeyRequest): Promise<EmptyOutputBody> {
        const response = await this.deletePasskeyRaw(requestParameters);
        return await response.value();
    }

    /**
     * Disable multi-factor authentication
     * Disable MFA
     */
    async disableMFARaw(): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/auth/mfa`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Disable multi-factor authentication
     * Disable MFA
     */
    async disableMFA(): Promise<EmptyOutputBody> {
        const response = await this.disableMFARaw();
        return await response.value();
    }

    /**
     * Complete WebAuthn passkey authentication process
     * Finish passkey authentication
     */
    async finishPasskeyAuthenticationRaw(): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/public/auth/passkeys/authenticate/finish`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Complete WebAuthn passkey authentication process
     * Finish passkey authentication
     */
    async finishPasskeyAuthentication(): Promise<EmptyOutputBody> {
        const response = await this.finishPasskeyAuthenticationRaw();
        return await response.value();
    }

    /**
     * Complete WebAuthn passkey registration process
     * Finish passkey registration
     */
    async finishPasskeyRegistrationRaw(): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/auth/passkeys/register/finish`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Complete WebAuthn passkey registration process
     * Finish passkey registration
     */
    async finishPasskeyRegistration(): Promise<EmptyOutputBody> {
        const response = await this.finishPasskeyRegistrationRaw();
        return await response.value();
    }

    /**
     * Request password reset email
     * Forgot password
     */
    async forgotPasswordRaw(requestParameters: ForgotPasswordRequest): Promise<runtime.ApiResponse<PasswordResetResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/public/auth/forgot-password`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PasswordResetRequestToJSON(requestParameters.passwordResetRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PasswordResetResponseFromJSON(jsonValue));
    }

    /**
     * Request password reset email
     * Forgot password
     */
    async forgotPassword(requestParameters: ForgotPasswordRequest): Promise<PasswordResetResponse> {
        const response = await this.forgotPasswordRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get or regenerate MFA backup codes
     * Get MFA backup codes
     */
    async getMFABackupCodesRaw(requestParameters: GetMFABackupCodesRequest): Promise<runtime.ApiResponse<MfaBackCodes>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/auth/mfa/backup-codes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            body: GenerateBackupCodesRequestToJSON(requestParameters.generateBackupCodesRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MfaBackCodesFromJSON(jsonValue));
    }

    /**
     * Get or regenerate MFA backup codes
     * Get MFA backup codes
     */
    async getMFABackupCodes(requestParameters: GetMFABackupCodesRequest): Promise<MfaBackCodes> {
        const response = await this.getMFABackupCodesRaw(requestParameters);
        return await response.value();
    }

    /**
     * List available OAuth providers
     * List OAuth providers
     */
    async listOAuthProvidersRaw(): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/public/auth/oauth/providers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * List available OAuth providers
     * List OAuth providers
     */
    async listOAuthProviders(): Promise<EmptyOutputBody> {
        const response = await this.listOAuthProvidersRaw();
        return await response.value();
    }

    /**
     * List all passkeys registered for the current user
     * List user passkeys
     */
    async listPasskeysRaw(): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/auth/passkeys`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * List all passkeys registered for the current user
     * List user passkeys
     */
    async listPasskeys(): Promise<EmptyOutputBody> {
        const response = await this.listPasskeysRaw();
        return await response.value();
    }

    /**
     * List all active sessions for the current user
     * List user sessions
     */
    async listSessionsRaw(): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/auth/sessions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * List all active sessions for the current user
     * List user sessions
     */
    async listSessions(): Promise<EmptyOutputBody> {
        const response = await this.listSessionsRaw();
        return await response.value();
    }

    /**
     * Authenticate user with email/password, OAuth, or passwordless
     * User login
     */
    async loginRaw(requestParameters: LoginOperationRequest): Promise<runtime.ApiResponse<LoginResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/public/auth/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginRequestToJSON(requestParameters.loginRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => LoginResponseFromJSON(jsonValue));
    }

    /**
     * Authenticate user with email/password, OAuth, or passwordless
     * User login
     */
    async login(requestParameters: LoginOperationRequest): Promise<LoginResponse> {
        const response = await this.loginRaw(requestParameters);
        return await response.value();
    }

    /**
     * Log out user and invalidate session/tokens
     * User logout
     */
    async logoutRaw(requestParameters: LogoutOperationRequest): Promise<runtime.ApiResponse<LogoutResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/public/auth/logout`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LogoutRequestToJSON(requestParameters.logoutRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => LogoutResponseFromJSON(jsonValue));
    }

    /**
     * Log out user and invalidate session/tokens
     * User logout
     */
    async logout(requestParameters: LogoutOperationRequest): Promise<LogoutResponse> {
        const response = await this.logoutRaw(requestParameters);
        return await response.value();
    }

    /**
     * Send passwordless magic link for authentication
     * Send magic link
     */
    async magicLinkRaw(requestParameters: MagicLinkOperationRequest): Promise<runtime.ApiResponse<MagicLinkResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/public/auth/magic-link`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MagicLinkRequestToJSON(requestParameters.magicLinkRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MagicLinkResponseFromJSON(jsonValue));
    }

    /**
     * Send passwordless magic link for authentication
     * Send magic link
     */
    async magicLink(requestParameters: MagicLinkOperationRequest): Promise<MagicLinkResponse> {
        const response = await this.magicLinkRaw(requestParameters);
        return await response.value();
    }

    /**
     * Use backup code for MFA recovery
     * MFA recovery
     */
    async mfaRecoveryRaw(): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/public/auth/mfa/recovery`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Use backup code for MFA recovery
     * MFA recovery
     */
    async mfaRecovery(): Promise<EmptyOutputBody> {
        const response = await this.mfaRecoveryRaw();
        return await response.value();
    }

    /**
     * Redirect to OAuth provider for authorization
     * OAuth authorization
     */
    async oauthAuthorizeRaw(requestParameters: OauthAuthorizeRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.provider === null || requestParameters.provider === undefined) {
            throw new runtime.RequiredError('provider','Required parameter requestParameters.provider was null or undefined when calling oauthAuthorize.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.state !== undefined) {
            queryParameters['state'] = requestParameters.state;
        }

        if (requestParameters.code !== undefined) {
            queryParameters['code'] = requestParameters.code;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/public/auth/oauth/{provider}/authorize`.replace(`{${"provider"}}`, encodeURIComponent(String(requestParameters.provider))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Redirect to OAuth provider for authorization
     * OAuth authorization
     */
    async oauthAuthorize(requestParameters: OauthAuthorizeRequest): Promise<void> {
        await this.oauthAuthorizeRaw(requestParameters);
    }

    /**
     * Handle OAuth provider callback
     * OAuth callback
     */
    async oauthCallbackRaw(requestParameters: OauthCallbackRequest): Promise<runtime.ApiResponse<LoginResponse>> {
        if (requestParameters.provider === null || requestParameters.provider === undefined) {
            throw new runtime.RequiredError('provider','Required parameter requestParameters.provider was null or undefined when calling oauthCallback.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.state !== undefined) {
            queryParameters['state'] = requestParameters.state;
        }

        if (requestParameters.code !== undefined) {
            queryParameters['code'] = requestParameters.code;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/public/auth/oauth/{provider}/callback`.replace(`{${"provider"}}`, encodeURIComponent(String(requestParameters.provider))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => LoginResponseFromJSON(jsonValue));
    }

    /**
     * Handle OAuth provider callback
     * OAuth callback
     */
    async oauthCallback(requestParameters: OauthCallbackRequest): Promise<LoginResponse> {
        const response = await this.oauthCallbackRaw(requestParameters);
        return await response.value();
    }

    /**
     * Exchange OAuth authorization code for tokens
     * OAuth token exchange
     */
    async oauthTokenRaw(): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/public/auth/oauth/token`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Exchange OAuth authorization code for tokens
     * OAuth token exchange
     */
    async oauthToken(): Promise<EmptyOutputBody> {
        const response = await this.oauthTokenRaw();
        return await response.value();
    }

    /**
     * Get user information from OAuth token
     * OAuth user info
     */
    async oauthUserInfoRaw(): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/public/auth/oauth/userinfo`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Get user information from OAuth token
     * OAuth user info
     */
    async oauthUserInfo(): Promise<EmptyOutputBody> {
        const response = await this.oauthUserInfoRaw();
        return await response.value();
    }

    /**
     * Refresh access token using refresh token
     * Refresh access token
     */
    async refreshTokenRaw(requestParameters: RefreshTokenOperationRequest): Promise<runtime.ApiResponse<RefreshTokenResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/public/auth/refresh`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RefreshTokenRequestToJSON(requestParameters.refreshTokenRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RefreshTokenResponseFromJSON(jsonValue));
    }

    /**
     * Refresh access token using refresh token
     * Refresh access token
     */
    async refreshToken(requestParameters: RefreshTokenOperationRequest): Promise<RefreshTokenResponse> {
        const response = await this.refreshTokenRaw(requestParameters);
        return await response.value();
    }

    /**
     * Register a new user account
     * User registration
     */
    async registerRaw(requestParameters: RegisterOperationRequest): Promise<runtime.ApiResponse<RegisterResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/public/auth/register`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegisterRequestToJSON(requestParameters.registerRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RegisterResponseFromJSON(jsonValue));
    }

    /**
     * Register a new user account
     * User registration
     */
    async register(requestParameters: RegisterOperationRequest): Promise<RegisterResponse> {
        const response = await this.registerRaw(requestParameters);
        return await response.value();
    }

    /**
     * Resend email or SMS verification
     * Resend verification
     */
    async resendVerificationRaw(requestParameters: ResendVerificationOperationRequest): Promise<runtime.ApiResponse<ResendVerificationResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/public/auth/resend-verification`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ResendVerificationRequestToJSON(requestParameters.resendVerificationRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ResendVerificationResponseFromJSON(jsonValue));
    }

    /**
     * Resend email or SMS verification
     * Resend verification
     */
    async resendVerification(requestParameters: ResendVerificationOperationRequest): Promise<ResendVerificationResponse> {
        const response = await this.resendVerificationRaw(requestParameters);
        return await response.value();
    }

    /**
     * Reset password with token from email
     * Reset password
     */
    async resetPasswordRaw(requestParameters: ResetPasswordRequest): Promise<runtime.ApiResponse<PasswordResetConfirmResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/public/auth/reset-password`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PasswordResetConfirmRequestToJSON(requestParameters.passwordResetConfirmRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PasswordResetConfirmResponseFromJSON(jsonValue));
    }

    /**
     * Reset password with token from email
     * Reset password
     */
    async resetPassword(requestParameters: ResetPasswordRequest): Promise<PasswordResetConfirmResponse> {
        const response = await this.resetPasswordRaw(requestParameters);
        return await response.value();
    }

    /**
     * Revoke all sessions for the current user
     * Revoke all sessions
     */
    async revokeAllSessionsRaw(): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/auth/sessions`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Revoke all sessions for the current user
     * Revoke all sessions
     */
    async revokeAllSessions(): Promise<EmptyOutputBody> {
        const response = await this.revokeAllSessionsRaw();
        return await response.value();
    }

    /**
     * Revoke a specific session
     * Revoke session
     */
    async revokeSessionRaw(requestParameters: RevokeSessionRequest): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling revokeSession.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/auth/sessions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Revoke a specific session
     * Revoke session
     */
    async revokeSession(requestParameters: RevokeSessionRequest): Promise<EmptyOutputBody> {
        const response = await this.revokeSessionRaw(requestParameters);
        return await response.value();
    }

    /**
     * Setup multi-factor authentication
     * Setup MFA
     */
    async setupMFARaw(requestParameters: SetupMFARequest): Promise<runtime.ApiResponse<TotpSetupResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/auth/mfa/setup`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SetupTotpRequestToJSON(requestParameters.setupTotpRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TotpSetupResponseFromJSON(jsonValue));
    }

    /**
     * Setup multi-factor authentication
     * Setup MFA
     */
    async setupMFA(requestParameters: SetupMFARequest): Promise<TotpSetupResponse> {
        const response = await this.setupMFARaw(requestParameters);
        return await response.value();
    }

    /**
     * Verify email address with token from email
     * Verify email address
     */
    async verifyEmailRaw(requestParameters: VerifyEmailRequest): Promise<runtime.ApiResponse<VerificationResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/public/auth/verify-email`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VerificationRequestToJSON(requestParameters.verificationRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => VerificationResponseFromJSON(jsonValue));
    }

    /**
     * Verify email address with token from email
     * Verify email address
     */
    async verifyEmail(requestParameters: VerifyEmailRequest): Promise<VerificationResponse> {
        const response = await this.verifyEmailRaw(requestParameters);
        return await response.value();
    }

    /**
     * Verify multi-factor authentication code
     * Verify MFA
     */
    async verifyMFARaw(requestParameters: VerifyMFARequest): Promise<runtime.ApiResponse<MfaVerifyResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/auth/mfa/verify`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MfaVerifyRequestToJSON(requestParameters.mfaVerifyRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MfaVerifyResponseFromJSON(jsonValue));
    }

    /**
     * Verify multi-factor authentication code
     * Verify MFA
     */
    async verifyMFA(requestParameters: VerifyMFARequest): Promise<MfaVerifyResponse> {
        const response = await this.verifyMFARaw(requestParameters);
        return await response.value();
    }

    /**
     * Verify phone number with SMS code
     * Verify phone number
     */
    async verifyPhoneRaw(requestParameters: VerifyPhoneRequest): Promise<runtime.ApiResponse<VerificationResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/public/auth/verify-phone`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VerificationRequestToJSON(requestParameters.verificationRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => VerificationResponseFromJSON(jsonValue));
    }

    /**
     * Verify phone number with SMS code
     * Verify phone number
     */
    async verifyPhone(requestParameters: VerifyPhoneRequest): Promise<VerificationResponse> {
        const response = await this.verifyPhoneRaw(requestParameters);
        return await response.value();
    }

}
