/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AuthProvider,
  AuthStatus,
  EmptyOutputBody,
  GenerateBackupCodesRequest,
  GetGlobalActivityStats400Response,
  LoginRequest,
  LoginResponse,
  LogoutRequest,
  LogoutResponse,
  MFABackCodes,
  MFASetupResponse,
  MFASetupVerifyResponse,
  MFAVerifyRequest,
  MFAVerifyResponse,
  MagicLinkRequest,
  MagicLinkResponse,
  PaginatedOutputPasskeySummary,
  PaginatedOutputSessionInfo,
  PasskeyAuthenticationBeginRequest,
  PasskeyAuthenticationBeginResponse,
  PasskeyAuthenticationFinishRequest,
  PasskeyAuthenticationFinishResponse,
  PasskeyRegistrationBeginRequest,
  PasskeyRegistrationBeginResponse,
  PasskeyRegistrationFinishRequest,
  PasskeyRegistrationFinishResponse,
  PasswordResetConfirmRequest,
  PasswordResetConfirmResponse,
  PasswordResetRequest,
  PasswordResetResponse,
  RefreshTokenRequest,
  RefreshTokenResponse,
  RegisterRequest,
  RegisterResponse,
  ResendVerificationRequest,
  ResendVerificationResponse,
  Session,
  SetupMFARequest,
  TokenRequest,
  TokenResponse,
  ValidateTokenInputBody,
  ValidateTokenResponse,
  VerificationRequest,
  VerificationResponse,
  VerifyMFASetupRequest,
} from '../models/index';
import {
    AuthProviderFromJSON,
    AuthProviderToJSON,
    AuthStatusFromJSON,
    AuthStatusToJSON,
    EmptyOutputBodyFromJSON,
    EmptyOutputBodyToJSON,
    GenerateBackupCodesRequestFromJSON,
    GenerateBackupCodesRequestToJSON,
    GetGlobalActivityStats400ResponseFromJSON,
    GetGlobalActivityStats400ResponseToJSON,
    LoginRequestFromJSON,
    LoginRequestToJSON,
    LoginResponseFromJSON,
    LoginResponseToJSON,
    LogoutRequestFromJSON,
    LogoutRequestToJSON,
    LogoutResponseFromJSON,
    LogoutResponseToJSON,
    MFABackCodesFromJSON,
    MFABackCodesToJSON,
    MFASetupResponseFromJSON,
    MFASetupResponseToJSON,
    MFASetupVerifyResponseFromJSON,
    MFASetupVerifyResponseToJSON,
    MFAVerifyRequestFromJSON,
    MFAVerifyRequestToJSON,
    MFAVerifyResponseFromJSON,
    MFAVerifyResponseToJSON,
    MagicLinkRequestFromJSON,
    MagicLinkRequestToJSON,
    MagicLinkResponseFromJSON,
    MagicLinkResponseToJSON,
    PaginatedOutputPasskeySummaryFromJSON,
    PaginatedOutputPasskeySummaryToJSON,
    PaginatedOutputSessionInfoFromJSON,
    PaginatedOutputSessionInfoToJSON,
    PasskeyAuthenticationBeginRequestFromJSON,
    PasskeyAuthenticationBeginRequestToJSON,
    PasskeyAuthenticationBeginResponseFromJSON,
    PasskeyAuthenticationBeginResponseToJSON,
    PasskeyAuthenticationFinishRequestFromJSON,
    PasskeyAuthenticationFinishRequestToJSON,
    PasskeyAuthenticationFinishResponseFromJSON,
    PasskeyAuthenticationFinishResponseToJSON,
    PasskeyRegistrationBeginRequestFromJSON,
    PasskeyRegistrationBeginRequestToJSON,
    PasskeyRegistrationBeginResponseFromJSON,
    PasskeyRegistrationBeginResponseToJSON,
    PasskeyRegistrationFinishRequestFromJSON,
    PasskeyRegistrationFinishRequestToJSON,
    PasskeyRegistrationFinishResponseFromJSON,
    PasskeyRegistrationFinishResponseToJSON,
    PasswordResetConfirmRequestFromJSON,
    PasswordResetConfirmRequestToJSON,
    PasswordResetConfirmResponseFromJSON,
    PasswordResetConfirmResponseToJSON,
    PasswordResetRequestFromJSON,
    PasswordResetRequestToJSON,
    PasswordResetResponseFromJSON,
    PasswordResetResponseToJSON,
    RefreshTokenRequestFromJSON,
    RefreshTokenRequestToJSON,
    RefreshTokenResponseFromJSON,
    RefreshTokenResponseToJSON,
    RegisterRequestFromJSON,
    RegisterRequestToJSON,
    RegisterResponseFromJSON,
    RegisterResponseToJSON,
    ResendVerificationRequestFromJSON,
    ResendVerificationRequestToJSON,
    ResendVerificationResponseFromJSON,
    ResendVerificationResponseToJSON,
    SessionFromJSON,
    SessionToJSON,
    SetupMFARequestFromJSON,
    SetupMFARequestToJSON,
    TokenRequestFromJSON,
    TokenRequestToJSON,
    TokenResponseFromJSON,
    TokenResponseToJSON,
    ValidateTokenInputBodyFromJSON,
    ValidateTokenInputBodyToJSON,
    ValidateTokenResponseFromJSON,
    ValidateTokenResponseToJSON,
    VerificationRequestFromJSON,
    VerificationRequestToJSON,
    VerificationResponseFromJSON,
    VerificationResponseToJSON,
    VerifyMFASetupRequestFromJSON,
    VerifyMFASetupRequestToJSON,
} from '../models/index';

export interface BeginPasskeyAuthenticationAuthRequest {
    passkeyAuthenticationBeginRequest: Omit<PasskeyAuthenticationBeginRequest, '$schema'>;
}

export interface BeginPasskeyRegistrationAuthRequest {
    passkeyRegistrationBeginRequest: Omit<PasskeyRegistrationBeginRequest, '$schema'>;
}

export interface DeletePasskeyRequest {
    id: string;
}

export interface FinishPasskeyAuthenticationAuthRequest {
    passkeyAuthenticationFinishRequest: Omit<PasskeyAuthenticationFinishRequest, '$schema'>;
}

export interface FinishPasskeyRegistrationAuthRequest {
    passkeyRegistrationFinishRequest: Omit<PasskeyRegistrationFinishRequest, '$schema'>;
}

export interface ForgotPasswordRequest {
    passwordResetRequest: Omit<PasswordResetRequest, '$schema'>;
}

export interface GetMFABackupCodesRequest {
    generateBackupCodesRequest: Omit<GenerateBackupCodesRequest, '$schema'>;
}

export interface ListPasskeysRequest {
    after?: string;
    before?: string;
    first?: number;
    last?: number;
    limit?: number;
    offset?: number;
    fields?: Array<string> | null;
    orderBy?: Array<string> | null;
    page?: number;
    userId?: string;
    active?: boolean;
    deviceType?: string;
    search?: string;
}

export interface ListSessionsRequest {
    after?: string;
    before?: string;
    first?: number;
    last?: number;
    limit?: number;
    offset?: number;
    fields?: Array<string> | null;
    orderBy?: Array<string> | null;
    page?: number;
    userId?: string;
}

export interface LoginOperationRequest {
    loginRequest: Omit<LoginRequest, '$schema'>;
}

export interface LogoutOperationRequest {
    logoutRequest: Omit<LogoutRequest, '$schema'>;
}

export interface MagicLinkOperationRequest {
    magicLinkRequest: Omit<MagicLinkRequest, '$schema'>;
}

export interface OauthAuthorizeByAuthRequest {
    provider: string;
    state?: string;
    code?: string;
}

export interface OauthCallbackRequest {
    provider: string;
    state?: string;
    code?: string;
}

export interface OauthTokenByAuthRequest {
    tokenRequest: Omit<TokenRequest, '$schema'>;
}

export interface OauthUserInfoByAuthRequest {
    authorization?: string;
}

export interface RefreshTokenOperationRequest {
    refreshTokenRequest: Omit<RefreshTokenRequest, '$schema'>;
}

export interface RegisterOperationRequest {
    registerRequest: Omit<RegisterRequest, '$schema'>;
}

export interface ResendVerificationOperationRequest {
    resendVerificationRequest: Omit<ResendVerificationRequest, '$schema'>;
}

export interface ResetPasswordRequest {
    passwordResetConfirmRequest: Omit<PasswordResetConfirmRequest, '$schema'>;
}

export interface RevokeAllSessionsRequest {
    exceptCurrent?: boolean;
}

export interface RevokeSessionRequest {
    id: string;
}

export interface SetupMFAOperationRequest {
    setupMFARequest: Omit<SetupMFARequest, '$schema'>;
}

export interface ValidateTokenRequest {
    validateTokenInputBody: Omit<ValidateTokenInputBody, '$schema'>;
}

export interface VerifyEmailRequest {
    verificationRequest: Omit<VerificationRequest, '$schema'>;
}

export interface VerifyMFAAuthRequest {
    mFAVerifyRequest: Omit<MFAVerifyRequest, '$schema'>;
}

export interface VerifyMFASetupOperationRequest {
    verifyMFASetupRequest: Omit<VerifyMFASetupRequest, '$schema'>;
}

export interface VerifyMagicLinkRequest {
    token: string;
}

export interface VerifyPhoneRequest {
    verificationRequest: Omit<VerificationRequest, '$schema'>;
}

/**
 * 
 */
export class AuthenticationApi extends runtime.BaseAPI {

    /**
     * Get current user authentication status and context
     * Get authentication status
     */
    async authStatusRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthStatus>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/me/auth/status`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthStatusFromJSON(jsonValue));
    }

    /**
     * Get current user authentication status and context
     * Get authentication status
     */
    async authStatus(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthStatus> {
        const response = await this.authStatusRaw(initOverrides);
        return await response.value();
    }

    /**
     * Begin WebAuthn passkey authentication process
     * Begin passkey authentication
     */
    async beginPasskeyAuthenticationAuthRaw(requestParameters: BeginPasskeyAuthenticationAuthRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PasskeyAuthenticationBeginResponse>> {
        if (requestParameters['passkeyAuthenticationBeginRequest'] == null) {
            throw new runtime.RequiredError(
                'passkeyAuthenticationBeginRequest',
                'Required parameter "passkeyAuthenticationBeginRequest" was null or undefined when calling beginPasskeyAuthenticationAuth().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/public/auth/passkeys/authenticate/begin`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PasskeyAuthenticationBeginRequestToJSON(requestParameters['passkeyAuthenticationBeginRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PasskeyAuthenticationBeginResponseFromJSON(jsonValue));
    }

    /**
     * Begin WebAuthn passkey authentication process
     * Begin passkey authentication
     */
    async beginPasskeyAuthenticationAuth(requestParameters: BeginPasskeyAuthenticationAuthRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PasskeyAuthenticationBeginResponse> {
        const response = await this.beginPasskeyAuthenticationAuthRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Begin WebAuthn passkey registration process
     * Begin passkey registration
     */
    async beginPasskeyRegistrationAuthRaw(requestParameters: BeginPasskeyRegistrationAuthRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PasskeyRegistrationBeginResponse>> {
        if (requestParameters['passkeyRegistrationBeginRequest'] == null) {
            throw new runtime.RequiredError(
                'passkeyRegistrationBeginRequest',
                'Required parameter "passkeyRegistrationBeginRequest" was null or undefined when calling beginPasskeyRegistrationAuth().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/me/auth/passkeys/register/begin`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PasskeyRegistrationBeginRequestToJSON(requestParameters['passkeyRegistrationBeginRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PasskeyRegistrationBeginResponseFromJSON(jsonValue));
    }

    /**
     * Begin WebAuthn passkey registration process
     * Begin passkey registration
     */
    async beginPasskeyRegistrationAuth(requestParameters: BeginPasskeyRegistrationAuthRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PasskeyRegistrationBeginResponse> {
        const response = await this.beginPasskeyRegistrationAuthRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a specific passkey
     * Delete passkey
     */
    async deletePasskeyRaw(requestParameters: DeletePasskeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deletePasskey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/me/auth/passkeys/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Delete a specific passkey
     * Delete passkey
     */
    async deletePasskey(requestParameters: DeletePasskeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmptyOutputBody> {
        const response = await this.deletePasskeyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Disable multi-factor authentication
     * Disable MFA
     */
    async disableMFARaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/me/auth/mfa`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Disable multi-factor authentication
     * Disable MFA
     */
    async disableMFA(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmptyOutputBody> {
        const response = await this.disableMFARaw(initOverrides);
        return await response.value();
    }

    /**
     * Complete WebAuthn passkey authentication process
     * Finish passkey authentication
     */
    async finishPasskeyAuthenticationAuthRaw(requestParameters: FinishPasskeyAuthenticationAuthRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PasskeyAuthenticationFinishResponse>> {
        if (requestParameters['passkeyAuthenticationFinishRequest'] == null) {
            throw new runtime.RequiredError(
                'passkeyAuthenticationFinishRequest',
                'Required parameter "passkeyAuthenticationFinishRequest" was null or undefined when calling finishPasskeyAuthenticationAuth().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/public/auth/passkeys/authenticate/finish`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PasskeyAuthenticationFinishRequestToJSON(requestParameters['passkeyAuthenticationFinishRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PasskeyAuthenticationFinishResponseFromJSON(jsonValue));
    }

    /**
     * Complete WebAuthn passkey authentication process
     * Finish passkey authentication
     */
    async finishPasskeyAuthenticationAuth(requestParameters: FinishPasskeyAuthenticationAuthRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PasskeyAuthenticationFinishResponse> {
        const response = await this.finishPasskeyAuthenticationAuthRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Complete WebAuthn passkey registration process
     * Finish passkey registration
     */
    async finishPasskeyRegistrationAuthRaw(requestParameters: FinishPasskeyRegistrationAuthRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PasskeyRegistrationFinishResponse>> {
        if (requestParameters['passkeyRegistrationFinishRequest'] == null) {
            throw new runtime.RequiredError(
                'passkeyRegistrationFinishRequest',
                'Required parameter "passkeyRegistrationFinishRequest" was null or undefined when calling finishPasskeyRegistrationAuth().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/me/auth/passkeys/register/finish`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PasskeyRegistrationFinishRequestToJSON(requestParameters['passkeyRegistrationFinishRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PasskeyRegistrationFinishResponseFromJSON(jsonValue));
    }

    /**
     * Complete WebAuthn passkey registration process
     * Finish passkey registration
     */
    async finishPasskeyRegistrationAuth(requestParameters: FinishPasskeyRegistrationAuthRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PasskeyRegistrationFinishResponse> {
        const response = await this.finishPasskeyRegistrationAuthRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Request password reset email
     * Forgot password
     */
    async forgotPasswordRaw(requestParameters: ForgotPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PasswordResetResponse>> {
        if (requestParameters['passwordResetRequest'] == null) {
            throw new runtime.RequiredError(
                'passwordResetRequest',
                'Required parameter "passwordResetRequest" was null or undefined when calling forgotPassword().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/public/auth/forgot-password`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PasswordResetRequestToJSON(requestParameters['passwordResetRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PasswordResetResponseFromJSON(jsonValue));
    }

    /**
     * Request password reset email
     * Forgot password
     */
    async forgotPassword(requestParameters: ForgotPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PasswordResetResponse> {
        const response = await this.forgotPasswordRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get or regenerate MFA backup codes
     * Get MFA backup codes
     */
    async getMFABackupCodesRaw(requestParameters: GetMFABackupCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MFABackCodes>> {
        if (requestParameters['generateBackupCodesRequest'] == null) {
            throw new runtime.RequiredError(
                'generateBackupCodesRequest',
                'Required parameter "generateBackupCodesRequest" was null or undefined when calling getMFABackupCodes().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/me/auth/mfa/backup-codes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            body: GenerateBackupCodesRequestToJSON(requestParameters['generateBackupCodesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MFABackCodesFromJSON(jsonValue));
    }

    /**
     * Get or regenerate MFA backup codes
     * Get MFA backup codes
     */
    async getMFABackupCodes(requestParameters: GetMFABackupCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MFABackCodes> {
        const response = await this.getMFABackupCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List available OAuth providers
     * List OAuth providers
     */
    async listOAuthProvidersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AuthProvider>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/public/auth/oauth/providers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AuthProviderFromJSON));
    }

    /**
     * List available OAuth providers
     * List OAuth providers
     */
    async listOAuthProviders(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AuthProvider>> {
        const response = await this.listOAuthProvidersRaw(initOverrides);
        return await response.value();
    }

    /**
     * List all passkeys registered for the current user
     * List user passkeys
     */
    async listPasskeysRaw(requestParameters: ListPasskeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedOutputPasskeySummary>> {
        const queryParameters: any = {};

        if (requestParameters['after'] != null) {
            queryParameters['after'] = requestParameters['after'];
        }

        if (requestParameters['before'] != null) {
            queryParameters['before'] = requestParameters['before'];
        }

        if (requestParameters['first'] != null) {
            queryParameters['first'] = requestParameters['first'];
        }

        if (requestParameters['last'] != null) {
            queryParameters['last'] = requestParameters['last'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['orderBy'] = requestParameters['orderBy']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['userId'] != null) {
            queryParameters['userId'] = requestParameters['userId'];
        }

        if (requestParameters['active'] != null) {
            queryParameters['active'] = requestParameters['active'];
        }

        if (requestParameters['deviceType'] != null) {
            queryParameters['deviceType'] = requestParameters['deviceType'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/me/auth/passkeys`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedOutputPasskeySummaryFromJSON(jsonValue));
    }

    /**
     * List all passkeys registered for the current user
     * List user passkeys
     */
    async listPasskeys(requestParameters: ListPasskeysRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedOutputPasskeySummary> {
        const response = await this.listPasskeysRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all active sessions for the current user
     * List user sessions
     */
    async listSessionsRaw(requestParameters: ListSessionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedOutputSessionInfo>> {
        const queryParameters: any = {};

        if (requestParameters['after'] != null) {
            queryParameters['after'] = requestParameters['after'];
        }

        if (requestParameters['before'] != null) {
            queryParameters['before'] = requestParameters['before'];
        }

        if (requestParameters['first'] != null) {
            queryParameters['first'] = requestParameters['first'];
        }

        if (requestParameters['last'] != null) {
            queryParameters['last'] = requestParameters['last'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['orderBy'] = requestParameters['orderBy']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['userId'] != null) {
            queryParameters['userId'] = requestParameters['userId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/me/auth/sessions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedOutputSessionInfoFromJSON(jsonValue));
    }

    /**
     * List all active sessions for the current user
     * List user sessions
     */
    async listSessions(requestParameters: ListSessionsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedOutputSessionInfo> {
        const response = await this.listSessionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Authenticate user with email/password, OAuth, or passwordless
     * User login
     */
    async loginRaw(requestParameters: LoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LoginResponse>> {
        if (requestParameters['loginRequest'] == null) {
            throw new runtime.RequiredError(
                'loginRequest',
                'Required parameter "loginRequest" was null or undefined when calling login().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/public/auth/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginRequestToJSON(requestParameters['loginRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LoginResponseFromJSON(jsonValue));
    }

    /**
     * Authenticate user with email/password, OAuth, or passwordless
     * User login
     */
    async login(requestParameters: LoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LoginResponse> {
        const response = await this.loginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Log out user and invalidate session/tokens
     * User logout
     */
    async logoutRaw(requestParameters: LogoutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LogoutResponse>> {
        if (requestParameters['logoutRequest'] == null) {
            throw new runtime.RequiredError(
                'logoutRequest',
                'Required parameter "logoutRequest" was null or undefined when calling logout().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/me/auth/logout`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LogoutRequestToJSON(requestParameters['logoutRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LogoutResponseFromJSON(jsonValue));
    }

    /**
     * Log out user and invalidate session/tokens
     * User logout
     */
    async logout(requestParameters: LogoutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LogoutResponse> {
        const response = await this.logoutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Send passwordless magic link for authentication
     * Send magic link
     */
    async magicLinkRaw(requestParameters: MagicLinkOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MagicLinkResponse>> {
        if (requestParameters['magicLinkRequest'] == null) {
            throw new runtime.RequiredError(
                'magicLinkRequest',
                'Required parameter "magicLinkRequest" was null or undefined when calling magicLink().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/public/auth/magic-link`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MagicLinkRequestToJSON(requestParameters['magicLinkRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MagicLinkResponseFromJSON(jsonValue));
    }

    /**
     * Send passwordless magic link for authentication
     * Send magic link
     */
    async magicLink(requestParameters: MagicLinkOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MagicLinkResponse> {
        const response = await this.magicLinkRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use backup code for MFA recovery
     * MFA recovery
     */
    async mfaRecoveryRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/public/auth/mfa/recovery`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Use backup code for MFA recovery
     * MFA recovery
     */
    async mfaRecovery(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmptyOutputBody> {
        const response = await this.mfaRecoveryRaw(initOverrides);
        return await response.value();
    }

    /**
     * Redirect to OAuth provider for authorization
     * OAuth authorization
     */
    async oauthAuthorizeByAuthRaw(requestParameters: OauthAuthorizeByAuthRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['provider'] == null) {
            throw new runtime.RequiredError(
                'provider',
                'Required parameter "provider" was null or undefined when calling oauthAuthorizeByAuth().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['state'] != null) {
            queryParameters['state'] = requestParameters['state'];
        }

        if (requestParameters['code'] != null) {
            queryParameters['code'] = requestParameters['code'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/public/auth/oauth/{provider}/authorize`.replace(`{${"provider"}}`, encodeURIComponent(String(requestParameters['provider']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Redirect to OAuth provider for authorization
     * OAuth authorization
     */
    async oauthAuthorizeByAuth(requestParameters: OauthAuthorizeByAuthRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.oauthAuthorizeByAuthRaw(requestParameters, initOverrides);
    }

    /**
     * Handle OAuth provider callback
     * OAuth callback
     */
    async oauthCallbackRaw(requestParameters: OauthCallbackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LoginResponse>> {
        if (requestParameters['provider'] == null) {
            throw new runtime.RequiredError(
                'provider',
                'Required parameter "provider" was null or undefined when calling oauthCallback().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['state'] != null) {
            queryParameters['state'] = requestParameters['state'];
        }

        if (requestParameters['code'] != null) {
            queryParameters['code'] = requestParameters['code'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/public/auth/oauth/{provider}/callback`.replace(`{${"provider"}}`, encodeURIComponent(String(requestParameters['provider']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LoginResponseFromJSON(jsonValue));
    }

    /**
     * Handle OAuth provider callback
     * OAuth callback
     */
    async oauthCallback(requestParameters: OauthCallbackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LoginResponse> {
        const response = await this.oauthCallbackRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Exchange OAuth authorization code for tokens
     * OAuth token exchange
     */
    async oauthTokenByAuthRaw(requestParameters: OauthTokenByAuthRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenResponse>> {
        if (requestParameters['tokenRequest'] == null) {
            throw new runtime.RequiredError(
                'tokenRequest',
                'Required parameter "tokenRequest" was null or undefined when calling oauthTokenByAuth().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/public/auth/oauth/token`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TokenRequestToJSON(requestParameters['tokenRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenResponseFromJSON(jsonValue));
    }

    /**
     * Exchange OAuth authorization code for tokens
     * OAuth token exchange
     */
    async oauthTokenByAuth(requestParameters: OauthTokenByAuthRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenResponse> {
        const response = await this.oauthTokenByAuthRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get user information from OAuth token
     * OAuth user info
     */
    async oauthUserInfoByAuthRaw(requestParameters: OauthUserInfoByAuthRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/v1/public/auth/oauth/userinfo`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get user information from OAuth token
     * OAuth user info
     */
    async oauthUserInfoByAuth(requestParameters: OauthUserInfoByAuthRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.oauthUserInfoByAuthRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Extend a session\'s expiration time
     * Refresh session
     */
    async refreshSessionRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Session>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/me/auth/sessions/{id}/refresh`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SessionFromJSON(jsonValue));
    }

    /**
     * Extend a session\'s expiration time
     * Refresh session
     */
    async refreshSession(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Session> {
        const response = await this.refreshSessionRaw(initOverrides);
        return await response.value();
    }

    /**
     * Refresh access token using refresh token
     * Refresh access token
     */
    async refreshTokenRaw(requestParameters: RefreshTokenOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RefreshTokenResponse>> {
        if (requestParameters['refreshTokenRequest'] == null) {
            throw new runtime.RequiredError(
                'refreshTokenRequest',
                'Required parameter "refreshTokenRequest" was null or undefined when calling refreshToken().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/me/auth/refresh`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RefreshTokenRequestToJSON(requestParameters['refreshTokenRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RefreshTokenResponseFromJSON(jsonValue));
    }

    /**
     * Refresh access token using refresh token
     * Refresh access token
     */
    async refreshToken(requestParameters: RefreshTokenOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RefreshTokenResponse> {
        const response = await this.refreshTokenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Register a new user account
     * User registration
     */
    async registerRaw(requestParameters: RegisterOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RegisterResponse>> {
        if (requestParameters['registerRequest'] == null) {
            throw new runtime.RequiredError(
                'registerRequest',
                'Required parameter "registerRequest" was null or undefined when calling register().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/public/auth/register`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegisterRequestToJSON(requestParameters['registerRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RegisterResponseFromJSON(jsonValue));
    }

    /**
     * Register a new user account
     * User registration
     */
    async register(requestParameters: RegisterOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RegisterResponse> {
        const response = await this.registerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Resend email or SMS verification
     * Resend verification
     */
    async resendVerificationRaw(requestParameters: ResendVerificationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResendVerificationResponse>> {
        if (requestParameters['resendVerificationRequest'] == null) {
            throw new runtime.RequiredError(
                'resendVerificationRequest',
                'Required parameter "resendVerificationRequest" was null or undefined when calling resendVerification().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/public/auth/resend-verification`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ResendVerificationRequestToJSON(requestParameters['resendVerificationRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResendVerificationResponseFromJSON(jsonValue));
    }

    /**
     * Resend email or SMS verification
     * Resend verification
     */
    async resendVerification(requestParameters: ResendVerificationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResendVerificationResponse> {
        const response = await this.resendVerificationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Reset password with token from email
     * Reset password
     */
    async resetPasswordRaw(requestParameters: ResetPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PasswordResetConfirmResponse>> {
        if (requestParameters['passwordResetConfirmRequest'] == null) {
            throw new runtime.RequiredError(
                'passwordResetConfirmRequest',
                'Required parameter "passwordResetConfirmRequest" was null or undefined when calling resetPassword().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/public/auth/reset-password`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PasswordResetConfirmRequestToJSON(requestParameters['passwordResetConfirmRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PasswordResetConfirmResponseFromJSON(jsonValue));
    }

    /**
     * Reset password with token from email
     * Reset password
     */
    async resetPassword(requestParameters: ResetPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PasswordResetConfirmResponse> {
        const response = await this.resetPasswordRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Revoke all sessions for the current user
     * Revoke all sessions
     */
    async revokeAllSessionsRaw(requestParameters: RevokeAllSessionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        const queryParameters: any = {};

        if (requestParameters['exceptCurrent'] != null) {
            queryParameters['exceptCurrent'] = requestParameters['exceptCurrent'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/me/auth/sessions`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Revoke all sessions for the current user
     * Revoke all sessions
     */
    async revokeAllSessions(requestParameters: RevokeAllSessionsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmptyOutputBody> {
        const response = await this.revokeAllSessionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Revoke a specific session
     * Revoke session
     */
    async revokeSessionRaw(requestParameters: RevokeSessionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling revokeSession().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/me/auth/sessions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Revoke a specific session
     * Revoke session
     */
    async revokeSession(requestParameters: RevokeSessionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmptyOutputBody> {
        const response = await this.revokeSessionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Setup multi-factor authentication
     * Setup MFA
     */
    async setupMFARaw(requestParameters: SetupMFAOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MFASetupResponse>> {
        if (requestParameters['setupMFARequest'] == null) {
            throw new runtime.RequiredError(
                'setupMFARequest',
                'Required parameter "setupMFARequest" was null or undefined when calling setupMFA().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/me/auth/mfa/setup`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SetupMFARequestToJSON(requestParameters['setupMFARequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MFASetupResponseFromJSON(jsonValue));
    }

    /**
     * Setup multi-factor authentication
     * Setup MFA
     */
    async setupMFA(requestParameters: SetupMFAOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MFASetupResponse> {
        const response = await this.setupMFARaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Validate token token from email
     * Validate token
     */
    async validateTokenRaw(requestParameters: ValidateTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ValidateTokenResponse>> {
        if (requestParameters['validateTokenInputBody'] == null) {
            throw new runtime.RequiredError(
                'validateTokenInputBody',
                'Required parameter "validateTokenInputBody" was null or undefined when calling validateToken().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/public/auth/validate-token`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ValidateTokenInputBodyToJSON(requestParameters['validateTokenInputBody']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ValidateTokenResponseFromJSON(jsonValue));
    }

    /**
     * Validate token token from email
     * Validate token
     */
    async validateToken(requestParameters: ValidateTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ValidateTokenResponse> {
        const response = await this.validateTokenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Verify email address with token from email
     * Verify email address
     */
    async verifyEmailRaw(requestParameters: VerifyEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VerificationResponse>> {
        if (requestParameters['verificationRequest'] == null) {
            throw new runtime.RequiredError(
                'verificationRequest',
                'Required parameter "verificationRequest" was null or undefined when calling verifyEmail().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/public/auth/verify-email`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VerificationRequestToJSON(requestParameters['verificationRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VerificationResponseFromJSON(jsonValue));
    }

    /**
     * Verify email address with token from email
     * Verify email address
     */
    async verifyEmail(requestParameters: VerifyEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VerificationResponse> {
        const response = await this.verifyEmailRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Verify multi-factor authentication code
     * Verify MFA
     */
    async verifyMFAAuthRaw(requestParameters: VerifyMFAAuthRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MFAVerifyResponse>> {
        if (requestParameters['mFAVerifyRequest'] == null) {
            throw new runtime.RequiredError(
                'mFAVerifyRequest',
                'Required parameter "mFAVerifyRequest" was null or undefined when calling verifyMFAAuth().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/public/auth/mfa/verify`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MFAVerifyRequestToJSON(requestParameters['mFAVerifyRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MFAVerifyResponseFromJSON(jsonValue));
    }

    /**
     * Verify multi-factor authentication code
     * Verify MFA
     */
    async verifyMFAAuth(requestParameters: VerifyMFAAuthRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MFAVerifyResponse> {
        const response = await this.verifyMFAAuthRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Verify MFA method setup with code to complete configuration
     * Verify MFA setup
     */
    async verifyMFASetupRaw(requestParameters: VerifyMFASetupOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MFASetupVerifyResponse>> {
        if (requestParameters['verifyMFASetupRequest'] == null) {
            throw new runtime.RequiredError(
                'verifyMFASetupRequest',
                'Required parameter "verifyMFASetupRequest" was null or undefined when calling verifyMFASetup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/me/auth/mfa/setup/verify`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VerifyMFASetupRequestToJSON(requestParameters['verifyMFASetupRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MFASetupVerifyResponseFromJSON(jsonValue));
    }

    /**
     * Verify MFA method setup with code to complete configuration
     * Verify MFA setup
     */
    async verifyMFASetup(requestParameters: VerifyMFASetupOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MFASetupVerifyResponse> {
        const response = await this.verifyMFASetupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Verify magic link token and authenticate user (typically called from email link)
     * Verify magic link token via GET
     */
    async verifyMagicLinkRaw(requestParameters: VerifyMagicLinkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LoginResponse>> {
        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError(
                'token',
                'Required parameter "token" was null or undefined when calling verifyMagicLink().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/public/auth/magic-link/verify/{token}`.replace(`{${"token"}}`, encodeURIComponent(String(requestParameters['token']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LoginResponseFromJSON(jsonValue));
    }

    /**
     * Verify magic link token and authenticate user (typically called from email link)
     * Verify magic link token via GET
     */
    async verifyMagicLink(requestParameters: VerifyMagicLinkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LoginResponse> {
        const response = await this.verifyMagicLinkRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Verify phone number with SMS code
     * Verify phone number
     */
    async verifyPhoneRaw(requestParameters: VerifyPhoneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VerificationResponse>> {
        if (requestParameters['verificationRequest'] == null) {
            throw new runtime.RequiredError(
                'verificationRequest',
                'Required parameter "verificationRequest" was null or undefined when calling verifyPhone().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/public/auth/verify-phone`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VerificationRequestToJSON(requestParameters['verificationRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VerificationResponseFromJSON(jsonValue));
    }

    /**
     * Verify phone number with SMS code
     * Verify phone number
     */
    async verifyPhone(requestParameters: VerifyPhoneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VerificationResponse> {
        const response = await this.verifyPhoneRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
