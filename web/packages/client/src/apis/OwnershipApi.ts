/* tslint:disable */
/* eslint-disable */
/**
 * My Project
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    EmptyOutputBody,
    EmptyOutputBodyFromJSON,
    EmptyOutputBodyToJSON,
    InlineResponse400,
    InlineResponse400FromJSON,
    InlineResponse400ToJSON,
    TransferUserOwnershipRequest,
    TransferUserOwnershipRequestFromJSON,
    TransferUserOwnershipRequestToJSON,
} from '../models';

export interface GetOrganizationOwnershipRequest {
    id: string;
}

export interface TransferOrganizationOwnershipRequest {
    id: string;
    transferUserOwnershipRequest?: TransferUserOwnershipRequest;
}

/**
 * OwnershipApi - interface
 * 
 * @export
 * @interface OwnershipApiInterface
 */
export interface OwnershipApiInterface {
    /**
     * Get current ownership information for the organization
     * @summary Get organization ownership
     * @param {string} id Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OwnershipApiInterface
     */
    getOrganizationOwnershipRaw(requestParameters: GetOrganizationOwnershipRequest): Promise<runtime.ApiResponse<EmptyOutputBody>>;

    /**
     * Get current ownership information for the organization
     * Get organization ownership
     */
    getOrganizationOwnership(requestParameters: GetOrganizationOwnershipRequest): Promise<EmptyOutputBody>;

    /**
     * Transfer ownership of the organization to another user
     * @summary Transfer organization ownership
     * @param {string} id Organization ID
     * @param {TransferUserOwnershipRequest} [transferUserOwnershipRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OwnershipApiInterface
     */
    transferOrganizationOwnershipRaw(requestParameters: TransferOrganizationOwnershipRequest): Promise<runtime.ApiResponse<EmptyOutputBody>>;

    /**
     * Transfer ownership of the organization to another user
     * Transfer organization ownership
     */
    transferOrganizationOwnership(requestParameters: TransferOrganizationOwnershipRequest): Promise<EmptyOutputBody>;

}

/**
 * 
 */
export class OwnershipApi extends runtime.BaseAPI implements OwnershipApiInterface {

    /**
     * Get current ownership information for the organization
     * Get organization ownership
     */
    async getOrganizationOwnershipRaw(requestParameters: GetOrganizationOwnershipRequest): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getOrganizationOwnership.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{id}/ownership`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Get current ownership information for the organization
     * Get organization ownership
     */
    async getOrganizationOwnership(requestParameters: GetOrganizationOwnershipRequest): Promise<EmptyOutputBody> {
        const response = await this.getOrganizationOwnershipRaw(requestParameters);
        return await response.value();
    }

    /**
     * Transfer ownership of the organization to another user
     * Transfer organization ownership
     */
    async transferOrganizationOwnershipRaw(requestParameters: TransferOrganizationOwnershipRequest): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling transferOrganizationOwnership.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{id}/transfer-ownership`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransferUserOwnershipRequestToJSON(requestParameters.transferUserOwnershipRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Transfer ownership of the organization to another user
     * Transfer organization ownership
     */
    async transferOrganizationOwnership(requestParameters: TransferOrganizationOwnershipRequest): Promise<EmptyOutputBody> {
        const response = await this.transferOrganizationOwnershipRaw(requestParameters);
        return await response.value();
    }

}
