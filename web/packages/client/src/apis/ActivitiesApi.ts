/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ActivityRecord,
  ActivityStats,
  GetGlobalActivityStats400Response,
  PaginatedOutputActivityRecord,
  TrendAnalysis,
  UsageMetrics,
} from '../models/index';
import {
    ActivityRecordFromJSON,
    ActivityRecordToJSON,
    ActivityStatsFromJSON,
    ActivityStatsToJSON,
    GetGlobalActivityStats400ResponseFromJSON,
    GetGlobalActivityStats400ResponseToJSON,
    PaginatedOutputActivityRecordFromJSON,
    PaginatedOutputActivityRecordToJSON,
    TrendAnalysisFromJSON,
    TrendAnalysisToJSON,
    UsageMetricsFromJSON,
    UsageMetricsToJSON,
} from '../models/index';

export interface GetActivityRequest {
    orgId: string;
    id: string;
}

export interface GetActivityStatsRequest {
    orgId: string;
}

export interface GetOrganizationActivitiesRequest {
    orgId: string;
}

export interface GetResourceActivitiesRequest {
    orgId: string;
    resourceType: string;
    resourceId: string;
}

export interface GetTrendAnalysisRequest {
    orgId: string;
}

export interface GetUsageMetricsRequest {
    orgId: string;
}

export interface GetUserActivitiesRequest {
    orgId: string;
    userId: string;
}

export interface ListActivitiesRequest {
    orgId: string;
    after?: string;
    before?: string;
    first?: number;
    last?: number;
    limit?: number;
    offset?: number;
    fields?: Array<string> | null;
    orderBy?: Array<string> | null;
    page?: number;
}

/**
 * 
 */
export class ActivitiesApi extends runtime.BaseAPI {

    /**
     * Retrieve a specific activity by its ID
     * Get activity by ID
     */
    async getActivityRaw(requestParameters: GetActivityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ActivityRecord>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling getActivity().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getActivity().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/activities/{id}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ActivityRecordFromJSON(jsonValue));
    }

    /**
     * Retrieve a specific activity by its ID
     * Get activity by ID
     */
    async getActivity(requestParameters: GetActivityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ActivityRecord> {
        const response = await this.getActivityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get comprehensive activity statistics and analytics for the organization
     * Get activity statistics
     */
    async getActivityStatsRaw(requestParameters: GetActivityStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ActivityStats>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling getActivityStats().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/activities/stats`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ActivityStatsFromJSON(jsonValue));
    }

    /**
     * Get comprehensive activity statistics and analytics for the organization
     * Get activity statistics
     */
    async getActivityStats(requestParameters: GetActivityStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ActivityStats> {
        const response = await this.getActivityStatsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all activities for the organization
     * Get organization activities
     */
    async getOrganizationActivitiesRaw(requestParameters: GetOrganizationActivitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ActivityRecord>>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling getOrganizationActivities().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/activities/organization`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ActivityRecordFromJSON));
    }

    /**
     * Get all activities for the organization
     * Get organization activities
     */
    async getOrganizationActivities(requestParameters: GetOrganizationActivitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ActivityRecord>> {
        const response = await this.getOrganizationActivitiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all activities for a specific resource (API key, user, etc.)
     * Get resource activities
     */
    async getResourceActivitiesRaw(requestParameters: GetResourceActivitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ActivityRecord>>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling getResourceActivities().'
            );
        }

        if (requestParameters['resourceType'] == null) {
            throw new runtime.RequiredError(
                'resourceType',
                'Required parameter "resourceType" was null or undefined when calling getResourceActivities().'
            );
        }

        if (requestParameters['resourceId'] == null) {
            throw new runtime.RequiredError(
                'resourceId',
                'Required parameter "resourceId" was null or undefined when calling getResourceActivities().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/activities/resources/{resourceType}/{resourceId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"resourceType"}}`, encodeURIComponent(String(requestParameters['resourceType']))).replace(`{${"resourceId"}}`, encodeURIComponent(String(requestParameters['resourceId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ActivityRecordFromJSON));
    }

    /**
     * Get all activities for a specific resource (API key, user, etc.)
     * Get resource activities
     */
    async getResourceActivities(requestParameters: GetResourceActivitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ActivityRecord>> {
        const response = await this.getResourceActivitiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get trend analysis and predictions for activity patterns
     * Get trend analysis
     */
    async getTrendAnalysisRaw(requestParameters: GetTrendAnalysisRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TrendAnalysis>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling getTrendAnalysis().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/activities/trends`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TrendAnalysisFromJSON(jsonValue));
    }

    /**
     * Get trend analysis and predictions for activity patterns
     * Get trend analysis
     */
    async getTrendAnalysis(requestParameters: GetTrendAnalysisRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TrendAnalysis> {
        const response = await this.getTrendAnalysisRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get usage metrics and analytics for billing and monitoring purposes
     * Get usage metrics
     */
    async getUsageMetricsRaw(requestParameters: GetUsageMetricsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UsageMetrics>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling getUsageMetrics().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/activities/usage`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UsageMetricsFromJSON(jsonValue));
    }

    /**
     * Get usage metrics and analytics for billing and monitoring purposes
     * Get usage metrics
     */
    async getUsageMetrics(requestParameters: GetUsageMetricsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UsageMetrics> {
        const response = await this.getUsageMetricsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all activities for a specific user within the organization
     * Get user activities
     */
    async getUserActivitiesRaw(requestParameters: GetUserActivitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ActivityRecord>>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling getUserActivities().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getUserActivities().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/activities/users/{userId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ActivityRecordFromJSON));
    }

    /**
     * Get all activities for a specific user within the organization
     * Get user activities
     */
    async getUserActivities(requestParameters: GetUserActivitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ActivityRecord>> {
        const response = await this.getUserActivitiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a paginated list of activities for the organization with comprehensive filtering options
     * List activities
     */
    async listActivitiesRaw(requestParameters: ListActivitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedOutputActivityRecord>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling listActivities().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['after'] != null) {
            queryParameters['after'] = requestParameters['after'];
        }

        if (requestParameters['before'] != null) {
            queryParameters['before'] = requestParameters['before'];
        }

        if (requestParameters['first'] != null) {
            queryParameters['first'] = requestParameters['first'];
        }

        if (requestParameters['last'] != null) {
            queryParameters['last'] = requestParameters['last'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['orderBy'] = requestParameters['orderBy']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/activities`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedOutputActivityRecordFromJSON(jsonValue));
    }

    /**
     * Get a paginated list of activities for the organization with comprehensive filtering options
     * List activities
     */
    async listActivities(requestParameters: ListActivitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedOutputActivityRecord> {
        const response = await this.listActivitiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
