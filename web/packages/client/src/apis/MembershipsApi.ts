/* tslint:disable */
/* eslint-disable */
/**
 * My Project
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    BulkMembershipOperation,
    BulkMembershipOperationFromJSON,
    BulkMembershipOperationToJSON,
    BulkMembershipOperationResponse,
    BulkMembershipOperationResponseFromJSON,
    BulkMembershipOperationResponseToJSON,
    EmptyOutputBody,
    EmptyOutputBodyFromJSON,
    EmptyOutputBodyToJSON,
    InlineResponse400,
    InlineResponse400FromJSON,
    InlineResponse400ToJSON,
    MemberMetrics,
    MemberMetricsFromJSON,
    MemberMetricsToJSON,
    Membership,
    MembershipFromJSON,
    MembershipToJSON,
    MembershipStats,
    MembershipStatsFromJSON,
    MembershipStatsToJSON,
    PaginatedOutputMembershipActivity,
    PaginatedOutputMembershipActivityFromJSON,
    PaginatedOutputMembershipActivityToJSON,
    PaginatedOutputMembershipChangeLog,
    PaginatedOutputMembershipChangeLogFromJSON,
    PaginatedOutputMembershipChangeLogToJSON,
    PaginatedOutputMembershipSummary,
    PaginatedOutputMembershipSummaryFromJSON,
    PaginatedOutputMembershipSummaryToJSON,
    RemoveMemberRequest,
    RemoveMemberRequestFromJSON,
    RemoveMemberRequestToJSON,
    TransferUserOwnershipRequest,
    TransferUserOwnershipRequestFromJSON,
    TransferUserOwnershipRequestToJSON,
    UpdateMembershipRequest,
    UpdateMembershipRequestFromJSON,
    UpdateMembershipRequestToJSON,
} from '../models';

export interface BulkMembershipOperationsRequest {
    orgId: string;
    bulkMembershipOperation?: BulkMembershipOperation;
}

export interface DeleteMembershipRequest {
    orgId: string;
    id: string;
    removeMemberRequest?: RemoveMemberRequest;
}

export interface ExportMembershipsRequest {
    orgId: string;
}

export interface GetMembershipRequest {
    orgId: string;
    id: string;
}

export interface GetMembershipActivityRequest {
    orgId: string;
    after?: string;
    before?: string;
    first?: number;
    last?: number;
    limit?: number;
    offset?: number;
    fields?: Array<string> | null;
    orderBy?: Array<string> | null;
    page?: number;
    membershipId?: string;
    userId?: string;
    actions?: Array<string> | null;
    startDate?: Date;
    endDate?: Date;
}

export interface GetMembershipHistoryRequest {
    orgId: string;
    id: string;
    after?: string;
    before?: string;
    first?: number;
    last?: number;
    limit?: number;
    offset?: number;
    fields?: Array<string> | null;
    orderBy?: Array<string> | null;
    page?: number;
    membershipId?: string;
    userId?: string;
    organizationId?: string;
    changeType?: string;
    changedBy?: string;
    startDate?: Date;
    endDate?: Date;
}

export interface GetMembershipMetricsRequest {
    orgId: string;
}

export interface GetMembershipStatsRequest {
    orgId: string;
}

export interface ListMembershipsRequest {
    orgId: string;
    after?: string;
    before?: string;
    first?: number;
    last?: number;
    limit?: number;
    offset?: number;
    fields?: Array<string> | null;
    orderBy?: Array<string> | null;
    page?: number;
}

export interface TransferMembershipRequest {
    orgId: string;
    id: string;
    transferUserOwnershipRequest?: TransferUserOwnershipRequest;
}

export interface UpdateMembershipOperationRequest {
    orgId: string;
    id: string;
    updateMembershipRequest?: UpdateMembershipRequest;
}

/**
 * MembershipsApi - interface
 * 
 * @export
 * @interface MembershipsApiInterface
 */
export interface MembershipsApiInterface {
    /**
     * Perform bulk operations on multiple memberships
     * @summary Bulk membership operations
     * @param {string} orgId 
     * @param {BulkMembershipOperation} [bulkMembershipOperation] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembershipsApiInterface
     */
    bulkMembershipOperationsRaw(requestParameters: BulkMembershipOperationsRequest): Promise<runtime.ApiResponse<BulkMembershipOperationResponse>>;

    /**
     * Perform bulk operations on multiple memberships
     * Bulk membership operations
     */
    bulkMembershipOperations(requestParameters: BulkMembershipOperationsRequest): Promise<BulkMembershipOperationResponse>;

    /**
     * Remove a membership from the organization
     * @summary Delete membership
     * @param {string} orgId 
     * @param {string} id Membership ID
     * @param {RemoveMemberRequest} [removeMemberRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembershipsApiInterface
     */
    deleteMembershipRaw(requestParameters: DeleteMembershipRequest): Promise<runtime.ApiResponse<EmptyOutputBody>>;

    /**
     * Remove a membership from the organization
     * Delete membership
     */
    deleteMembership(requestParameters: DeleteMembershipRequest): Promise<EmptyOutputBody>;

    /**
     * Export membership data to CSV or JSON format
     * @summary Export memberships
     * @param {string} orgId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembershipsApiInterface
     */
    exportMembershipsRaw(requestParameters: ExportMembershipsRequest): Promise<runtime.ApiResponse<EmptyOutputBody>>;

    /**
     * Export membership data to CSV or JSON format
     * Export memberships
     */
    exportMemberships(requestParameters: ExportMembershipsRequest): Promise<EmptyOutputBody>;

    /**
     * Get membership details by ID
     * @summary Get membership
     * @param {string} orgId 
     * @param {string} id Membership ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembershipsApiInterface
     */
    getMembershipRaw(requestParameters: GetMembershipRequest): Promise<runtime.ApiResponse<Membership>>;

    /**
     * Get membership details by ID
     * Get membership
     */
    getMembership(requestParameters: GetMembershipRequest): Promise<Membership>;

    /**
     * Get membership activity log with pagination and filtering
     * @summary Get membership activity
     * @param {string} orgId 
     * @param {string} [after] 
     * @param {string} [before] 
     * @param {number} [first] 
     * @param {number} [last] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {Array<string>} [fields] 
     * @param {Array<string>} [orderBy] 
     * @param {number} [page] 
     * @param {string} [membershipId] Filter by membership
     * @param {string} [userId] Filter by user
     * @param {Array<string>} [actions] Filter by actions
     * @param {Date} [startDate] Start date
     * @param {Date} [endDate] End date
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembershipsApiInterface
     */
    getMembershipActivityRaw(requestParameters: GetMembershipActivityRequest): Promise<runtime.ApiResponse<PaginatedOutputMembershipActivity>>;

    /**
     * Get membership activity log with pagination and filtering
     * Get membership activity
     */
    getMembershipActivity(requestParameters: GetMembershipActivityRequest): Promise<PaginatedOutputMembershipActivity>;

    /**
     * Get change history for a membership
     * @summary Get membership history
     * @param {string} orgId 
     * @param {string} id Membership ID
     * @param {string} [after] 
     * @param {string} [before] 
     * @param {number} [first] 
     * @param {number} [last] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {Array<string>} [fields] 
     * @param {Array<string>} [orderBy] 
     * @param {number} [page] 
     * @param {string} [membershipId] 
     * @param {string} [userId] 
     * @param {string} [organizationId] 
     * @param {string} [changeType] 
     * @param {string} [changedBy] 
     * @param {Date} [startDate] 
     * @param {Date} [endDate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembershipsApiInterface
     */
    getMembershipHistoryRaw(requestParameters: GetMembershipHistoryRequest): Promise<runtime.ApiResponse<PaginatedOutputMembershipChangeLog>>;

    /**
     * Get change history for a membership
     * Get membership history
     */
    getMembershipHistory(requestParameters: GetMembershipHistoryRequest): Promise<PaginatedOutputMembershipChangeLog>;

    /**
     * Get detailed membership metrics and analytics
     * @summary Get membership metrics
     * @param {string} orgId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembershipsApiInterface
     */
    getMembershipMetricsRaw(requestParameters: GetMembershipMetricsRequest): Promise<runtime.ApiResponse<MemberMetrics>>;

    /**
     * Get detailed membership metrics and analytics
     * Get membership metrics
     */
    getMembershipMetrics(requestParameters: GetMembershipMetricsRequest): Promise<MemberMetrics>;

    /**
     * Get comprehensive membership statistics for the organization
     * @summary Get membership statistics
     * @param {string} orgId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembershipsApiInterface
     */
    getMembershipStatsRaw(requestParameters: GetMembershipStatsRequest): Promise<runtime.ApiResponse<MembershipStats>>;

    /**
     * Get comprehensive membership statistics for the organization
     * Get membership statistics
     */
    getMembershipStats(requestParameters: GetMembershipStatsRequest): Promise<MembershipStats>;

    /**
     * List all memberships in an organization with pagination and filtering
     * @summary List memberships
     * @param {string} orgId 
     * @param {string} [after] 
     * @param {string} [before] 
     * @param {number} [first] 
     * @param {number} [last] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {Array<string>} [fields] 
     * @param {Array<string>} [orderBy] 
     * @param {number} [page] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembershipsApiInterface
     */
    listMembershipsRaw(requestParameters: ListMembershipsRequest): Promise<runtime.ApiResponse<PaginatedOutputMembershipSummary>>;

    /**
     * List all memberships in an organization with pagination and filtering
     * List memberships
     */
    listMemberships(requestParameters: ListMembershipsRequest): Promise<PaginatedOutputMembershipSummary>;

    /**
     * Transfer membership to another organization
     * @summary Transfer membership
     * @param {string} orgId 
     * @param {string} id Membership ID
     * @param {TransferUserOwnershipRequest} [transferUserOwnershipRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembershipsApiInterface
     */
    transferMembershipRaw(requestParameters: TransferMembershipRequest): Promise<runtime.ApiResponse<EmptyOutputBody>>;

    /**
     * Transfer membership to another organization
     * Transfer membership
     */
    transferMembership(requestParameters: TransferMembershipRequest): Promise<EmptyOutputBody>;

    /**
     * Update membership information and settings
     * @summary Update membership
     * @param {string} orgId 
     * @param {string} id Membership ID
     * @param {UpdateMembershipRequest} [updateMembershipRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembershipsApiInterface
     */
    updateMembershipRaw(requestParameters: UpdateMembershipOperationRequest): Promise<runtime.ApiResponse<Membership>>;

    /**
     * Update membership information and settings
     * Update membership
     */
    updateMembership(requestParameters: UpdateMembershipOperationRequest): Promise<Membership>;

}

/**
 * 
 */
export class MembershipsApi extends runtime.BaseAPI implements MembershipsApiInterface {

    /**
     * Perform bulk operations on multiple memberships
     * Bulk membership operations
     */
    async bulkMembershipOperationsRaw(requestParameters: BulkMembershipOperationsRequest): Promise<runtime.ApiResponse<BulkMembershipOperationResponse>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling bulkMembershipOperations.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/memberships/bulk`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BulkMembershipOperationToJSON(requestParameters.bulkMembershipOperation),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => BulkMembershipOperationResponseFromJSON(jsonValue));
    }

    /**
     * Perform bulk operations on multiple memberships
     * Bulk membership operations
     */
    async bulkMembershipOperations(requestParameters: BulkMembershipOperationsRequest): Promise<BulkMembershipOperationResponse> {
        const response = await this.bulkMembershipOperationsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Remove a membership from the organization
     * Delete membership
     */
    async deleteMembershipRaw(requestParameters: DeleteMembershipRequest): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling deleteMembership.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteMembership.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/memberships/{id}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: RemoveMemberRequestToJSON(requestParameters.removeMemberRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Remove a membership from the organization
     * Delete membership
     */
    async deleteMembership(requestParameters: DeleteMembershipRequest): Promise<EmptyOutputBody> {
        const response = await this.deleteMembershipRaw(requestParameters);
        return await response.value();
    }

    /**
     * Export membership data to CSV or JSON format
     * Export memberships
     */
    async exportMembershipsRaw(requestParameters: ExportMembershipsRequest): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling exportMemberships.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/memberships/export`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Export membership data to CSV or JSON format
     * Export memberships
     */
    async exportMemberships(requestParameters: ExportMembershipsRequest): Promise<EmptyOutputBody> {
        const response = await this.exportMembershipsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get membership details by ID
     * Get membership
     */
    async getMembershipRaw(requestParameters: GetMembershipRequest): Promise<runtime.ApiResponse<Membership>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getMembership.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getMembership.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/memberships/{id}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MembershipFromJSON(jsonValue));
    }

    /**
     * Get membership details by ID
     * Get membership
     */
    async getMembership(requestParameters: GetMembershipRequest): Promise<Membership> {
        const response = await this.getMembershipRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get membership activity log with pagination and filtering
     * Get membership activity
     */
    async getMembershipActivityRaw(requestParameters: GetMembershipActivityRequest): Promise<runtime.ApiResponse<PaginatedOutputMembershipActivity>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getMembershipActivity.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.after !== undefined) {
            queryParameters['after'] = requestParameters.after;
        }

        if (requestParameters.before !== undefined) {
            queryParameters['before'] = requestParameters.before;
        }

        if (requestParameters.first !== undefined) {
            queryParameters['first'] = requestParameters.first;
        }

        if (requestParameters.last !== undefined) {
            queryParameters['last'] = requestParameters.last;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.fields) {
            queryParameters['fields'] = requestParameters.fields;
        }

        if (requestParameters.orderBy) {
            queryParameters['orderBy'] = requestParameters.orderBy;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.membershipId !== undefined) {
            queryParameters['membershipId'] = requestParameters.membershipId;
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        if (requestParameters.actions) {
            queryParameters['actions'] = requestParameters.actions;
        }

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = (requestParameters.startDate as any).toISOString();
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = (requestParameters.endDate as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/memberships/activity`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedOutputMembershipActivityFromJSON(jsonValue));
    }

    /**
     * Get membership activity log with pagination and filtering
     * Get membership activity
     */
    async getMembershipActivity(requestParameters: GetMembershipActivityRequest): Promise<PaginatedOutputMembershipActivity> {
        const response = await this.getMembershipActivityRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get change history for a membership
     * Get membership history
     */
    async getMembershipHistoryRaw(requestParameters: GetMembershipHistoryRequest): Promise<runtime.ApiResponse<PaginatedOutputMembershipChangeLog>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getMembershipHistory.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getMembershipHistory.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.after !== undefined) {
            queryParameters['after'] = requestParameters.after;
        }

        if (requestParameters.before !== undefined) {
            queryParameters['before'] = requestParameters.before;
        }

        if (requestParameters.first !== undefined) {
            queryParameters['first'] = requestParameters.first;
        }

        if (requestParameters.last !== undefined) {
            queryParameters['last'] = requestParameters.last;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.fields) {
            queryParameters['fields'] = requestParameters.fields;
        }

        if (requestParameters.orderBy) {
            queryParameters['orderBy'] = requestParameters.orderBy;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.membershipId !== undefined) {
            queryParameters['membershipId'] = requestParameters.membershipId;
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        if (requestParameters.organizationId !== undefined) {
            queryParameters['organizationId'] = requestParameters.organizationId;
        }

        if (requestParameters.changeType !== undefined) {
            queryParameters['changeType'] = requestParameters.changeType;
        }

        if (requestParameters.changedBy !== undefined) {
            queryParameters['changedBy'] = requestParameters.changedBy;
        }

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = (requestParameters.startDate as any).toISOString();
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = (requestParameters.endDate as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/memberships/{id}/history`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedOutputMembershipChangeLogFromJSON(jsonValue));
    }

    /**
     * Get change history for a membership
     * Get membership history
     */
    async getMembershipHistory(requestParameters: GetMembershipHistoryRequest): Promise<PaginatedOutputMembershipChangeLog> {
        const response = await this.getMembershipHistoryRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get detailed membership metrics and analytics
     * Get membership metrics
     */
    async getMembershipMetricsRaw(requestParameters: GetMembershipMetricsRequest): Promise<runtime.ApiResponse<MemberMetrics>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getMembershipMetrics.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/memberships/metrics`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MemberMetricsFromJSON(jsonValue));
    }

    /**
     * Get detailed membership metrics and analytics
     * Get membership metrics
     */
    async getMembershipMetrics(requestParameters: GetMembershipMetricsRequest): Promise<MemberMetrics> {
        const response = await this.getMembershipMetricsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get comprehensive membership statistics for the organization
     * Get membership statistics
     */
    async getMembershipStatsRaw(requestParameters: GetMembershipStatsRequest): Promise<runtime.ApiResponse<MembershipStats>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getMembershipStats.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/memberships/stats`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MembershipStatsFromJSON(jsonValue));
    }

    /**
     * Get comprehensive membership statistics for the organization
     * Get membership statistics
     */
    async getMembershipStats(requestParameters: GetMembershipStatsRequest): Promise<MembershipStats> {
        const response = await this.getMembershipStatsRaw(requestParameters);
        return await response.value();
    }

    /**
     * List all memberships in an organization with pagination and filtering
     * List memberships
     */
    async listMembershipsRaw(requestParameters: ListMembershipsRequest): Promise<runtime.ApiResponse<PaginatedOutputMembershipSummary>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling listMemberships.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.after !== undefined) {
            queryParameters['after'] = requestParameters.after;
        }

        if (requestParameters.before !== undefined) {
            queryParameters['before'] = requestParameters.before;
        }

        if (requestParameters.first !== undefined) {
            queryParameters['first'] = requestParameters.first;
        }

        if (requestParameters.last !== undefined) {
            queryParameters['last'] = requestParameters.last;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.fields) {
            queryParameters['fields'] = requestParameters.fields;
        }

        if (requestParameters.orderBy) {
            queryParameters['orderBy'] = requestParameters.orderBy;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/memberships`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedOutputMembershipSummaryFromJSON(jsonValue));
    }

    /**
     * List all memberships in an organization with pagination and filtering
     * List memberships
     */
    async listMemberships(requestParameters: ListMembershipsRequest): Promise<PaginatedOutputMembershipSummary> {
        const response = await this.listMembershipsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Transfer membership to another organization
     * Transfer membership
     */
    async transferMembershipRaw(requestParameters: TransferMembershipRequest): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling transferMembership.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling transferMembership.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/memberships/{id}/transfer`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransferUserOwnershipRequestToJSON(requestParameters.transferUserOwnershipRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Transfer membership to another organization
     * Transfer membership
     */
    async transferMembership(requestParameters: TransferMembershipRequest): Promise<EmptyOutputBody> {
        const response = await this.transferMembershipRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update membership information and settings
     * Update membership
     */
    async updateMembershipRaw(requestParameters: UpdateMembershipOperationRequest): Promise<runtime.ApiResponse<Membership>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling updateMembership.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateMembership.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/memberships/{id}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateMembershipRequestToJSON(requestParameters.updateMembershipRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MembershipFromJSON(jsonValue));
    }

    /**
     * Update membership information and settings
     * Update membership
     */
    async updateMembership(requestParameters: UpdateMembershipOperationRequest): Promise<Membership> {
        const response = await this.updateMembershipRaw(requestParameters);
        return await response.value();
    }

}
