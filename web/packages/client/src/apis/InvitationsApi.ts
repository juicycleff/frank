/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AcceptInvitationRequest,
  AcceptInvitationResponse,
  BulkCreateInvitationsRequest,
  BulkInvitationResponse,
  CancelInvitationRequest,
  CreateInvitationRequest,
  DeclineInvitationRequest,
  GetGlobalActivityStats400Response,
  Invitation,
  InvitationValidationRequest,
  InvitationValidationResponse,
  PaginatedOutputInvitationSummary,
  ResendInvitationRequest,
  SimpleMessage,
} from '../models/index';
import {
    AcceptInvitationRequestFromJSON,
    AcceptInvitationRequestToJSON,
    AcceptInvitationResponseFromJSON,
    AcceptInvitationResponseToJSON,
    BulkCreateInvitationsRequestFromJSON,
    BulkCreateInvitationsRequestToJSON,
    BulkInvitationResponseFromJSON,
    BulkInvitationResponseToJSON,
    CancelInvitationRequestFromJSON,
    CancelInvitationRequestToJSON,
    CreateInvitationRequestFromJSON,
    CreateInvitationRequestToJSON,
    DeclineInvitationRequestFromJSON,
    DeclineInvitationRequestToJSON,
    GetGlobalActivityStats400ResponseFromJSON,
    GetGlobalActivityStats400ResponseToJSON,
    InvitationFromJSON,
    InvitationToJSON,
    InvitationValidationRequestFromJSON,
    InvitationValidationRequestToJSON,
    InvitationValidationResponseFromJSON,
    InvitationValidationResponseToJSON,
    PaginatedOutputInvitationSummaryFromJSON,
    PaginatedOutputInvitationSummaryToJSON,
    ResendInvitationRequestFromJSON,
    ResendInvitationRequestToJSON,
    SimpleMessageFromJSON,
    SimpleMessageToJSON,
} from '../models/index';

export interface AcceptInvitationOperationRequest {
    acceptInvitationRequest: Omit<AcceptInvitationRequest, '$schema'>;
}

export interface BulkInvitationsRequest {
    orgId: string;
    bulkCreateInvitationsRequest: Omit<BulkCreateInvitationsRequest, '$schema'>;
}

export interface CancelInvitationOperationRequest {
    orgId: string;
    invitationId: string;
    cancelInvitationRequest: Omit<CancelInvitationRequest, '$schema'>;
}

export interface CreateInvitationOperationRequest {
    orgId: string;
    createInvitationRequest: Omit<CreateInvitationRequest, '$schema'>;
}

export interface DeclineInvitationOperationRequest {
    declineInvitationRequest: Omit<DeclineInvitationRequest, '$schema'>;
}

export interface GetInvitationRequest {
    orgId: string;
    invitationId: string;
}

export interface ListInvitationsRequest {
    orgId: string;
    after?: string;
    before?: string;
    first?: number;
    last?: number;
    limit?: number;
    offset?: number;
    fields?: Array<string> | null;
    orderBy?: Array<string> | null;
    page?: number;
    status?: ListInvitationsStatusEnum;
    email?: string;
    roleId?: string;
    invitedBy?: string;
    search?: string;
    includeExpired?: boolean;
    startDate?: Date;
    endDate?: Date;
}

export interface ResendInvitationOperationRequest {
    orgId: string;
    invitationId: string;
    resendInvitationRequest: Omit<ResendInvitationRequest, '$schema'>;
}

export interface ValidateInvitationRequest {
    invitationValidationRequest: Omit<InvitationValidationRequest, '$schema'>;
}

/**
 * 
 */
export class InvitationsApi extends runtime.BaseAPI {

    /**
     * Accept an organization invitation using the invitation token
     * Accept invitation
     */
    async acceptInvitationRaw(requestParameters: AcceptInvitationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AcceptInvitationResponse>> {
        if (requestParameters['acceptInvitationRequest'] == null) {
            throw new runtime.RequiredError(
                'acceptInvitationRequest',
                'Required parameter "acceptInvitationRequest" was null or undefined when calling acceptInvitation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/invitations/accept`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AcceptInvitationRequestToJSON(requestParameters['acceptInvitationRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AcceptInvitationResponseFromJSON(jsonValue));
    }

    /**
     * Accept an organization invitation using the invitation token
     * Accept invitation
     */
    async acceptInvitation(requestParameters: AcceptInvitationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AcceptInvitationResponse> {
        const response = await this.acceptInvitationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create multiple invitations at once
     * Bulk create invitations
     */
    async bulkInvitationsRaw(requestParameters: BulkInvitationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BulkInvitationResponse>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling bulkInvitations().'
            );
        }

        if (requestParameters['bulkCreateInvitationsRequest'] == null) {
            throw new runtime.RequiredError(
                'bulkCreateInvitationsRequest',
                'Required parameter "bulkCreateInvitationsRequest" was null or undefined when calling bulkInvitations().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/invitations/bulk`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BulkCreateInvitationsRequestToJSON(requestParameters['bulkCreateInvitationsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BulkInvitationResponseFromJSON(jsonValue));
    }

    /**
     * Create multiple invitations at once
     * Bulk create invitations
     */
    async bulkInvitations(requestParameters: BulkInvitationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BulkInvitationResponse> {
        const response = await this.bulkInvitationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Cancel a pending invitation
     * Cancel invitation
     */
    async cancelInvitationRaw(requestParameters: CancelInvitationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SimpleMessage>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling cancelInvitation().'
            );
        }

        if (requestParameters['invitationId'] == null) {
            throw new runtime.RequiredError(
                'invitationId',
                'Required parameter "invitationId" was null or undefined when calling cancelInvitation().'
            );
        }

        if (requestParameters['cancelInvitationRequest'] == null) {
            throw new runtime.RequiredError(
                'cancelInvitationRequest',
                'Required parameter "cancelInvitationRequest" was null or undefined when calling cancelInvitation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/invitations/{invitationId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"invitationId"}}`, encodeURIComponent(String(requestParameters['invitationId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: CancelInvitationRequestToJSON(requestParameters['cancelInvitationRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SimpleMessageFromJSON(jsonValue));
    }

    /**
     * Cancel a pending invitation
     * Cancel invitation
     */
    async cancelInvitation(requestParameters: CancelInvitationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SimpleMessage> {
        const response = await this.cancelInvitationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create and send an invitation to join the organization
     * Create invitation
     */
    async createInvitationRaw(requestParameters: CreateInvitationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Invitation>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling createInvitation().'
            );
        }

        if (requestParameters['createInvitationRequest'] == null) {
            throw new runtime.RequiredError(
                'createInvitationRequest',
                'Required parameter "createInvitationRequest" was null or undefined when calling createInvitation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/invitations`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateInvitationRequestToJSON(requestParameters['createInvitationRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InvitationFromJSON(jsonValue));
    }

    /**
     * Create and send an invitation to join the organization
     * Create invitation
     */
    async createInvitation(requestParameters: CreateInvitationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Invitation> {
        const response = await this.createInvitationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Decline an organization invitation using the invitation token
     * Decline invitation
     */
    async declineInvitationRaw(requestParameters: DeclineInvitationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SimpleMessage>> {
        if (requestParameters['declineInvitationRequest'] == null) {
            throw new runtime.RequiredError(
                'declineInvitationRequest',
                'Required parameter "declineInvitationRequest" was null or undefined when calling declineInvitation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/invitations/decline`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DeclineInvitationRequestToJSON(requestParameters['declineInvitationRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SimpleMessageFromJSON(jsonValue));
    }

    /**
     * Decline an organization invitation using the invitation token
     * Decline invitation
     */
    async declineInvitation(requestParameters: DeclineInvitationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SimpleMessage> {
        const response = await this.declineInvitationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get invitation details by ID
     * Get invitation
     */
    async getInvitationRaw(requestParameters: GetInvitationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Invitation>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling getInvitation().'
            );
        }

        if (requestParameters['invitationId'] == null) {
            throw new runtime.RequiredError(
                'invitationId',
                'Required parameter "invitationId" was null or undefined when calling getInvitation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/invitations/{invitationId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"invitationId"}}`, encodeURIComponent(String(requestParameters['invitationId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InvitationFromJSON(jsonValue));
    }

    /**
     * Get invitation details by ID
     * Get invitation
     */
    async getInvitation(requestParameters: GetInvitationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Invitation> {
        const response = await this.getInvitationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all invitations for the organization
     * List invitations
     */
    async listInvitationsRaw(requestParameters: ListInvitationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedOutputInvitationSummary>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling listInvitations().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['after'] != null) {
            queryParameters['after'] = requestParameters['after'];
        }

        if (requestParameters['before'] != null) {
            queryParameters['before'] = requestParameters['before'];
        }

        if (requestParameters['first'] != null) {
            queryParameters['first'] = requestParameters['first'];
        }

        if (requestParameters['last'] != null) {
            queryParameters['last'] = requestParameters['last'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['orderBy'] = requestParameters['orderBy']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['email'] != null) {
            queryParameters['email'] = requestParameters['email'];
        }

        if (requestParameters['roleId'] != null) {
            queryParameters['roleId'] = requestParameters['roleId'];
        }

        if (requestParameters['invitedBy'] != null) {
            queryParameters['invitedBy'] = requestParameters['invitedBy'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['includeExpired'] != null) {
            queryParameters['includeExpired'] = requestParameters['includeExpired'];
        }

        if (requestParameters['startDate'] != null) {
            queryParameters['startDate'] = (requestParameters['startDate'] as any).toISOString();
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['endDate'] = (requestParameters['endDate'] as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/invitations`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedOutputInvitationSummaryFromJSON(jsonValue));
    }

    /**
     * List all invitations for the organization
     * List invitations
     */
    async listInvitations(requestParameters: ListInvitationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedOutputInvitationSummary> {
        const response = await this.listInvitationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Resend an invitation email to the invitee
     * Resend invitation
     */
    async resendInvitationRaw(requestParameters: ResendInvitationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SimpleMessage>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling resendInvitation().'
            );
        }

        if (requestParameters['invitationId'] == null) {
            throw new runtime.RequiredError(
                'invitationId',
                'Required parameter "invitationId" was null or undefined when calling resendInvitation().'
            );
        }

        if (requestParameters['resendInvitationRequest'] == null) {
            throw new runtime.RequiredError(
                'resendInvitationRequest',
                'Required parameter "resendInvitationRequest" was null or undefined when calling resendInvitation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/invitations/{invitationId}/resend`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"invitationId"}}`, encodeURIComponent(String(requestParameters['invitationId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ResendInvitationRequestToJSON(requestParameters['resendInvitationRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SimpleMessageFromJSON(jsonValue));
    }

    /**
     * Resend an invitation email to the invitee
     * Resend invitation
     */
    async resendInvitation(requestParameters: ResendInvitationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SimpleMessage> {
        const response = await this.resendInvitationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Validate an invitation token without accepting it
     * Validate invitation
     */
    async validateInvitationRaw(requestParameters: ValidateInvitationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InvitationValidationResponse>> {
        if (requestParameters['invitationValidationRequest'] == null) {
            throw new runtime.RequiredError(
                'invitationValidationRequest',
                'Required parameter "invitationValidationRequest" was null or undefined when calling validateInvitation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/invitations/validate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InvitationValidationRequestToJSON(requestParameters['invitationValidationRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InvitationValidationResponseFromJSON(jsonValue));
    }

    /**
     * Validate an invitation token without accepting it
     * Validate invitation
     */
    async validateInvitation(requestParameters: ValidateInvitationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InvitationValidationResponse> {
        const response = await this.validateInvitationRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ListInvitationsStatusEnum = {
    Pending: 'pending',
    Accepted: 'accepted',
    Declined: 'declined',
    Expired: 'expired',
    Cancelled: 'cancelled'
} as const;
export type ListInvitationsStatusEnum = typeof ListInvitationsStatusEnum[keyof typeof ListInvitationsStatusEnum];
