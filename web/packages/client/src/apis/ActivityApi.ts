/* tslint:disable */
/* eslint-disable */
/**
 * My Project
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    EmptyOutputBody,
    EmptyOutputBodyFromJSON,
    EmptyOutputBodyToJSON,
    InlineResponse400,
    InlineResponse400FromJSON,
    InlineResponse400ToJSON,
    PaginatedOutputMembershipActivity,
    PaginatedOutputMembershipActivityFromJSON,
    PaginatedOutputMembershipActivityToJSON,
    PaginatedOutputUserActivity,
    PaginatedOutputUserActivityFromJSON,
    PaginatedOutputUserActivityToJSON,
} from '../models';

export interface GetMembershipActivityRequest {
    orgId: string;
    after?: string;
    before?: string;
    first?: number;
    last?: number;
    limit?: number;
    offset?: number;
    fields?: Array<string> | null;
    orderBy?: Array<string> | null;
    page?: number;
    membershipId?: string;
    userId?: string;
    actions?: Array<string> | null;
    startDate?: Date;
    endDate?: Date;
}

export interface GetOrganizationActivityRequest {
    id: string;
}

export interface GetUserActivityRequest {
    orgId: string;
    id: string;
}

/**
 * ActivityApi - interface
 * 
 * @export
 * @interface ActivityApiInterface
 */
export interface ActivityApiInterface {
    /**
     * Get membership activity log with pagination and filtering
     * @summary Get membership activity
     * @param {string} orgId 
     * @param {string} [after] 
     * @param {string} [before] 
     * @param {number} [first] 
     * @param {number} [last] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {Array<string>} [fields] 
     * @param {Array<string>} [orderBy] 
     * @param {number} [page] 
     * @param {string} [membershipId] Filter by membership
     * @param {string} [userId] Filter by user
     * @param {Array<string>} [actions] Filter by actions
     * @param {Date} [startDate] Start date
     * @param {Date} [endDate] End date
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivityApiInterface
     */
    getMembershipActivityRaw(requestParameters: GetMembershipActivityRequest): Promise<runtime.ApiResponse<PaginatedOutputMembershipActivity>>;

    /**
     * Get membership activity log with pagination and filtering
     * Get membership activity
     */
    getMembershipActivity(requestParameters: GetMembershipActivityRequest): Promise<PaginatedOutputMembershipActivity>;

    /**
     * Get organization activity log and audit trail
     * @summary Get organization activity
     * @param {string} id Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivityApiInterface
     */
    getOrganizationActivityRaw(requestParameters: GetOrganizationActivityRequest): Promise<runtime.ApiResponse<EmptyOutputBody>>;

    /**
     * Get organization activity log and audit trail
     * Get organization activity
     */
    getOrganizationActivity(requestParameters: GetOrganizationActivityRequest): Promise<EmptyOutputBody>;

    /**
     * Get user activity log with pagination
     * @summary Get user activity
     * @param {string} orgId 
     * @param {string} id User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivityApiInterface
     */
    getUserActivityRaw(requestParameters: GetUserActivityRequest): Promise<runtime.ApiResponse<PaginatedOutputUserActivity>>;

    /**
     * Get user activity log with pagination
     * Get user activity
     */
    getUserActivity(requestParameters: GetUserActivityRequest): Promise<PaginatedOutputUserActivity>;

}

/**
 * 
 */
export class ActivityApi extends runtime.BaseAPI implements ActivityApiInterface {

    /**
     * Get membership activity log with pagination and filtering
     * Get membership activity
     */
    async getMembershipActivityRaw(requestParameters: GetMembershipActivityRequest): Promise<runtime.ApiResponse<PaginatedOutputMembershipActivity>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getMembershipActivity.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.after !== undefined) {
            queryParameters['after'] = requestParameters.after;
        }

        if (requestParameters.before !== undefined) {
            queryParameters['before'] = requestParameters.before;
        }

        if (requestParameters.first !== undefined) {
            queryParameters['first'] = requestParameters.first;
        }

        if (requestParameters.last !== undefined) {
            queryParameters['last'] = requestParameters.last;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.fields) {
            queryParameters['fields'] = requestParameters.fields;
        }

        if (requestParameters.orderBy) {
            queryParameters['orderBy'] = requestParameters.orderBy;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.membershipId !== undefined) {
            queryParameters['membershipId'] = requestParameters.membershipId;
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        if (requestParameters.actions) {
            queryParameters['actions'] = requestParameters.actions;
        }

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = (requestParameters.startDate as any).toISOString();
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = (requestParameters.endDate as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/memberships/activity`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedOutputMembershipActivityFromJSON(jsonValue));
    }

    /**
     * Get membership activity log with pagination and filtering
     * Get membership activity
     */
    async getMembershipActivity(requestParameters: GetMembershipActivityRequest): Promise<PaginatedOutputMembershipActivity> {
        const response = await this.getMembershipActivityRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get organization activity log and audit trail
     * Get organization activity
     */
    async getOrganizationActivityRaw(requestParameters: GetOrganizationActivityRequest): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getOrganizationActivity.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{id}/activity`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Get organization activity log and audit trail
     * Get organization activity
     */
    async getOrganizationActivity(requestParameters: GetOrganizationActivityRequest): Promise<EmptyOutputBody> {
        const response = await this.getOrganizationActivityRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get user activity log with pagination
     * Get user activity
     */
    async getUserActivityRaw(requestParameters: GetUserActivityRequest): Promise<runtime.ApiResponse<PaginatedOutputUserActivity>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getUserActivity.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getUserActivity.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/users/{id}/activity`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedOutputUserActivityFromJSON(jsonValue));
    }

    /**
     * Get user activity log with pagination
     * Get user activity
     */
    async getUserActivity(requestParameters: GetUserActivityRequest): Promise<PaginatedOutputUserActivity> {
        const response = await this.getUserActivityRaw(requestParameters);
        return await response.value();
    }

}
