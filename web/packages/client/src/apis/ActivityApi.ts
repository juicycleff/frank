/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetGlobalActivityStats400Response,
  OrganizationActivity,
} from '../models/index';
import {
    GetGlobalActivityStats400ResponseFromJSON,
    GetGlobalActivityStats400ResponseToJSON,
    OrganizationActivityFromJSON,
    OrganizationActivityToJSON,
} from '../models/index';

export interface GetOrganizationActivityRequest {
    id: string;
}

/**
 * 
 */
export class ActivityApi extends runtime.BaseAPI {

    /**
     * Get organization activity log and audit trail
     * Get organization activity
     */
    async getOrganizationActivityRaw(requestParameters: GetOrganizationActivityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganizationActivity>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getOrganizationActivity().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{id}/activity`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganizationActivityFromJSON(jsonValue));
    }

    /**
     * Get organization activity log and audit trail
     * Get organization activity
     */
    async getOrganizationActivity(requestParameters: GetOrganizationActivityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganizationActivity> {
        const response = await this.getOrganizationActivityRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
