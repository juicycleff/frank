/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AssignRoleRequest,
  BulkUserOperation,
  BulkUserOperationResponse,
  ChangePasswordRequest,
  CreateUserRequest,
  DeleteUserRequest,
  EmptyOutputBody,
  GetGlobalActivityStats400Response,
  PaginatedOutputUserActivity,
  PaginatedOutputUserSummary,
  Permission,
  Role,
  Session,
  SetPasswordRequest,
  UpdateUserRequest,
  User,
  UserProfileUpdateRequest,
  UserStats,
} from '../models/index';
import {
    AssignRoleRequestFromJSON,
    AssignRoleRequestToJSON,
    BulkUserOperationFromJSON,
    BulkUserOperationToJSON,
    BulkUserOperationResponseFromJSON,
    BulkUserOperationResponseToJSON,
    ChangePasswordRequestFromJSON,
    ChangePasswordRequestToJSON,
    CreateUserRequestFromJSON,
    CreateUserRequestToJSON,
    DeleteUserRequestFromJSON,
    DeleteUserRequestToJSON,
    EmptyOutputBodyFromJSON,
    EmptyOutputBodyToJSON,
    GetGlobalActivityStats400ResponseFromJSON,
    GetGlobalActivityStats400ResponseToJSON,
    PaginatedOutputUserActivityFromJSON,
    PaginatedOutputUserActivityToJSON,
    PaginatedOutputUserSummaryFromJSON,
    PaginatedOutputUserSummaryToJSON,
    PermissionFromJSON,
    PermissionToJSON,
    RoleFromJSON,
    RoleToJSON,
    SessionFromJSON,
    SessionToJSON,
    SetPasswordRequestFromJSON,
    SetPasswordRequestToJSON,
    UpdateUserRequestFromJSON,
    UpdateUserRequestToJSON,
    UserFromJSON,
    UserToJSON,
    UserProfileUpdateRequestFromJSON,
    UserProfileUpdateRequestToJSON,
    UserStatsFromJSON,
    UserStatsToJSON,
} from '../models/index';

export interface AssignUserRoleRequest {
    orgId: string;
    id: string;
    assignRoleRequest: Omit<AssignRoleRequest, '$schema'>;
}

export interface BulkUserOperationsRequest {
    orgId: string;
    bulkUserOperation: Omit<BulkUserOperation, '$schema'>;
}

export interface ChangePasswordOperationRequest {
    changePasswordRequest: Omit<ChangePasswordRequest, '$schema'>;
}

export interface CreateUserOperationRequest {
    orgId: string;
    createUserRequest: Omit<CreateUserRequest, '$schema'>;
}

export interface DeleteUserOperationRequest {
    orgId: string;
    id: string;
    deleteUserRequest: Omit<DeleteUserRequest, '$schema'>;
}

export interface DisableUserMFARequest {
    orgId: string;
    id: string;
}

export interface EnableUserMFARequest {
    orgId: string;
    id: string;
}

export interface ExportUsersRequest {
    orgId: string;
}

export interface GetUserRequest {
    orgId: string;
    id: string;
}

export interface GetUserActivityRequest {
    orgId: string;
    id: string;
}

export interface GetUserMFARequest {
    orgId: string;
    id: string;
}

export interface GetUserSessionsRequest {
    orgId: string;
    id: string;
}

export interface GetUserStatsRequest {
    orgId: string;
}

export interface ListUserPermissionsRequest {
    orgId: string;
    id: string;
}

export interface ListUserRolesRequest {
    orgId: string;
    id: string;
}

export interface ListUsersRequest {
    orgId: string;
    after?: string;
    before?: string;
    first?: number;
    last?: number;
    limit?: number;
    offset?: number;
    fields?: Array<string> | null;
    orderBy?: Array<string> | null;
    page?: number;
}

export interface RemoveUserRoleRequest {
    orgId: string;
    id: string;
    roleId: string;
}

export interface ResetUserMFARequest {
    orgId: string;
    id: string;
}

export interface RevokeAllUserSessionsRequest {
    orgId: string;
    id: string;
}

export interface RevokeUserSessionRequest {
    orgId: string;
    id: string;
    sessionId: string;
}

export interface SetUserPasswordRequest {
    orgId: string;
    id: string;
    setPasswordRequest: Omit<SetPasswordRequest, '$schema'>;
}

export interface UpdateUserOperationRequest {
    orgId: string;
    id: string;
    updateUserRequest: Omit<UpdateUserRequest, '$schema'>;
}

export interface UpdateUserProfileRequest {
    userProfileUpdateRequest: Omit<UserProfileUpdateRequest, '$schema'>;
}

/**
 * 
 */
export class UsersApi extends runtime.BaseAPI {

    /**
     * Assign a role to a user
     * Assign role to user
     */
    async assignUserRoleRaw(requestParameters: AssignUserRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling assignUserRole().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling assignUserRole().'
            );
        }

        if (requestParameters['assignRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'assignRoleRequest',
                'Required parameter "assignRoleRequest" was null or undefined when calling assignUserRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/users/{id}/roles`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AssignRoleRequestToJSON(requestParameters['assignRoleRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Assign a role to a user
     * Assign role to user
     */
    async assignUserRole(requestParameters: AssignUserRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmptyOutputBody> {
        const response = await this.assignUserRoleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Perform bulk operations on multiple users
     * Bulk user operations
     */
    async bulkUserOperationsRaw(requestParameters: BulkUserOperationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BulkUserOperationResponse>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling bulkUserOperations().'
            );
        }

        if (requestParameters['bulkUserOperation'] == null) {
            throw new runtime.RequiredError(
                'bulkUserOperation',
                'Required parameter "bulkUserOperation" was null or undefined when calling bulkUserOperations().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/users/bulk`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BulkUserOperationToJSON(requestParameters['bulkUserOperation']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BulkUserOperationResponseFromJSON(jsonValue));
    }

    /**
     * Perform bulk operations on multiple users
     * Bulk user operations
     */
    async bulkUserOperations(requestParameters: BulkUserOperationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BulkUserOperationResponse> {
        const response = await this.bulkUserOperationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Change the current user\'s password
     * Change password
     */
    async changePasswordRaw(requestParameters: ChangePasswordOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        if (requestParameters['changePasswordRequest'] == null) {
            throw new runtime.RequiredError(
                'changePasswordRequest',
                'Required parameter "changePasswordRequest" was null or undefined when calling changePassword().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/user/change-password`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChangePasswordRequestToJSON(requestParameters['changePasswordRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Change the current user\'s password
     * Change password
     */
    async changePassword(requestParameters: ChangePasswordOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmptyOutputBody> {
        const response = await this.changePasswordRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new user in the organization
     * Create user
     */
    async createUserRaw(requestParameters: CreateUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling createUser().'
            );
        }

        if (requestParameters['createUserRequest'] == null) {
            throw new runtime.RequiredError(
                'createUserRequest',
                'Required parameter "createUserRequest" was null or undefined when calling createUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/users`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateUserRequestToJSON(requestParameters['createUserRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * Create a new user in the organization
     * Create user
     */
    async createUser(requestParameters: CreateUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.createUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete user account
     * Delete user
     */
    async deleteUserRaw(requestParameters: DeleteUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling deleteUser().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteUser().'
            );
        }

        if (requestParameters['deleteUserRequest'] == null) {
            throw new runtime.RequiredError(
                'deleteUserRequest',
                'Required parameter "deleteUserRequest" was null or undefined when calling deleteUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/users/{id}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteUserRequestToJSON(requestParameters['deleteUserRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Delete user account
     * Delete user
     */
    async deleteUser(requestParameters: DeleteUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmptyOutputBody> {
        const response = await this.deleteUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Disable MFA for a user (admin action)
     * Disable MFA for user
     */
    async disableUserMFARaw(requestParameters: DisableUserMFARequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling disableUserMFA().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling disableUserMFA().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/users/{id}/mfa`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Disable MFA for a user (admin action)
     * Disable MFA for user
     */
    async disableUserMFA(requestParameters: DisableUserMFARequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmptyOutputBody> {
        const response = await this.disableUserMFARaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Enable MFA for a user (admin action)
     * Enable MFA for user
     */
    async enableUserMFARaw(requestParameters: EnableUserMFARequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling enableUserMFA().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling enableUserMFA().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/users/{id}/mfa/enable`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Enable MFA for a user (admin action)
     * Enable MFA for user
     */
    async enableUserMFA(requestParameters: EnableUserMFARequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmptyOutputBody> {
        const response = await this.enableUserMFARaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Export user data to CSV or JSON format
     * Export users
     */
    async exportUsersRaw(requestParameters: ExportUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling exportUsers().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/users/export`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Export user data to CSV or JSON format
     * Export users
     */
    async exportUsers(requestParameters: ExportUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmptyOutputBody> {
        const response = await this.exportUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get user by ID
     * Get user
     */
    async getUserRaw(requestParameters: GetUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling getUser().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/users/{id}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * Get user by ID
     * Get user
     */
    async getUser(requestParameters: GetUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.getUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get user activity log with pagination
     * Get user activity
     */
    async getUserActivityRaw(requestParameters: GetUserActivityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedOutputUserActivity>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling getUserActivity().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getUserActivity().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/users/{id}/activity`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedOutputUserActivityFromJSON(jsonValue));
    }

    /**
     * Get user activity log with pagination
     * Get user activity
     */
    async getUserActivity(requestParameters: GetUserActivityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedOutputUserActivity> {
        const response = await this.getUserActivityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get MFA configuration and status for a user
     * Get user MFA status
     */
    async getUserMFARaw(requestParameters: GetUserMFARequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling getUserMFA().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getUserMFA().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/users/{id}/mfa`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Get MFA configuration and status for a user
     * Get user MFA status
     */
    async getUserMFA(requestParameters: GetUserMFARequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmptyOutputBody> {
        const response = await this.getUserMFARaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the current authenticated user\'s profile
     * Get current user profile
     */
    async getUserProfileRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/user/profile`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * Get the current authenticated user\'s profile
     * Get current user profile
     */
    async getUserProfile(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.getUserProfileRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get active sessions for a user
     * Get user sessions
     */
    async getUserSessionsRaw(requestParameters: GetUserSessionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Session>>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling getUserSessions().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getUserSessions().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/users/{id}/sessions`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SessionFromJSON));
    }

    /**
     * Get active sessions for a user
     * Get user sessions
     */
    async getUserSessions(requestParameters: GetUserSessionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Session>> {
        const response = await this.getUserSessionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get user statistics for the organization
     * Get user statistics
     */
    async getUserStatsRaw(requestParameters: GetUserStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserStats>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling getUserStats().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/users/stats`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserStatsFromJSON(jsonValue));
    }

    /**
     * Get user statistics for the organization
     * Get user statistics
     */
    async getUserStats(requestParameters: GetUserStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserStats> {
        const response = await this.getUserStatsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all permissions for a user (direct and inherited from roles)
     * List user permissions
     */
    async listUserPermissionsRaw(requestParameters: ListUserPermissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Permission>>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling listUserPermissions().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling listUserPermissions().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/users/{id}/permissions`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PermissionFromJSON));
    }

    /**
     * List all permissions for a user (direct and inherited from roles)
     * List user permissions
     */
    async listUserPermissions(requestParameters: ListUserPermissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Permission>> {
        const response = await this.listUserPermissionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all roles assigned to a user
     * List user roles
     */
    async listUserRolesRaw(requestParameters: ListUserRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Role>>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling listUserRoles().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling listUserRoles().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/users/{id}/roles`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RoleFromJSON));
    }

    /**
     * List all roles assigned to a user
     * List user roles
     */
    async listUserRoles(requestParameters: ListUserRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Role>> {
        const response = await this.listUserRolesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List users in an organization with pagination and filtering
     * List users
     */
    async listUsersRaw(requestParameters: ListUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedOutputUserSummary>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling listUsers().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['after'] != null) {
            queryParameters['after'] = requestParameters['after'];
        }

        if (requestParameters['before'] != null) {
            queryParameters['before'] = requestParameters['before'];
        }

        if (requestParameters['first'] != null) {
            queryParameters['first'] = requestParameters['first'];
        }

        if (requestParameters['last'] != null) {
            queryParameters['last'] = requestParameters['last'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['orderBy'] = requestParameters['orderBy']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/users`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedOutputUserSummaryFromJSON(jsonValue));
    }

    /**
     * List users in an organization with pagination and filtering
     * List users
     */
    async listUsers(requestParameters: ListUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedOutputUserSummary> {
        const response = await this.listUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove a role assignment from a user
     * Remove role from user
     */
    async removeUserRoleRaw(requestParameters: RemoveUserRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling removeUserRole().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling removeUserRole().'
            );
        }

        if (requestParameters['roleId'] == null) {
            throw new runtime.RequiredError(
                'roleId',
                'Required parameter "roleId" was null or undefined when calling removeUserRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/users/{id}/roles/{roleId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"roleId"}}`, encodeURIComponent(String(requestParameters['roleId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Remove a role assignment from a user
     * Remove role from user
     */
    async removeUserRole(requestParameters: RemoveUserRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmptyOutputBody> {
        const response = await this.removeUserRoleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Reset MFA configuration for a user (admin action)
     * Reset user MFA
     */
    async resetUserMFARaw(requestParameters: ResetUserMFARequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling resetUserMFA().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling resetUserMFA().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/users/{id}/mfa/reset`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Reset MFA configuration for a user (admin action)
     * Reset user MFA
     */
    async resetUserMFA(requestParameters: ResetUserMFARequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmptyOutputBody> {
        const response = await this.resetUserMFARaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Revoke all sessions for a user
     * Revoke all user sessions
     */
    async revokeAllUserSessionsRaw(requestParameters: RevokeAllUserSessionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling revokeAllUserSessions().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling revokeAllUserSessions().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/users/{id}/sessions`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Revoke all sessions for a user
     * Revoke all user sessions
     */
    async revokeAllUserSessions(requestParameters: RevokeAllUserSessionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmptyOutputBody> {
        const response = await this.revokeAllUserSessionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Revoke a specific session for a user
     * Revoke user session
     */
    async revokeUserSessionRaw(requestParameters: RevokeUserSessionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling revokeUserSession().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling revokeUserSession().'
            );
        }

        if (requestParameters['sessionId'] == null) {
            throw new runtime.RequiredError(
                'sessionId',
                'Required parameter "sessionId" was null or undefined when calling revokeUserSession().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/users/{id}/sessions/{sessionId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"sessionId"}}`, encodeURIComponent(String(requestParameters['sessionId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Revoke a specific session for a user
     * Revoke user session
     */
    async revokeUserSession(requestParameters: RevokeUserSessionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmptyOutputBody> {
        const response = await this.revokeUserSessionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Set password for a user (admin only)
     * Set user password
     */
    async setUserPasswordRaw(requestParameters: SetUserPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling setUserPassword().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling setUserPassword().'
            );
        }

        if (requestParameters['setPasswordRequest'] == null) {
            throw new runtime.RequiredError(
                'setPasswordRequest',
                'Required parameter "setPasswordRequest" was null or undefined when calling setUserPassword().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/users/{id}/set-password`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SetPasswordRequestToJSON(requestParameters['setPasswordRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Set password for a user (admin only)
     * Set user password
     */
    async setUserPassword(requestParameters: SetUserPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmptyOutputBody> {
        const response = await this.setUserPasswordRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update user information
     * Update user
     */
    async updateUserRaw(requestParameters: UpdateUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling updateUser().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateUser().'
            );
        }

        if (requestParameters['updateUserRequest'] == null) {
            throw new runtime.RequiredError(
                'updateUserRequest',
                'Required parameter "updateUserRequest" was null or undefined when calling updateUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/users/{id}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateUserRequestToJSON(requestParameters['updateUserRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * Update user information
     * Update user
     */
    async updateUser(requestParameters: UpdateUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.updateUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update the current authenticated user\'s profile
     * Update current user profile
     */
    async updateUserProfileRaw(requestParameters: UpdateUserProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        if (requestParameters['userProfileUpdateRequest'] == null) {
            throw new runtime.RequiredError(
                'userProfileUpdateRequest',
                'Required parameter "userProfileUpdateRequest" was null or undefined when calling updateUserProfile().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/user/profile`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UserProfileUpdateRequestToJSON(requestParameters['userProfileUpdateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * Update the current authenticated user\'s profile
     * Update current user profile
     */
    async updateUserProfile(requestParameters: UpdateUserProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.updateUserProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
