/* tslint:disable */
/* eslint-disable */
/**
 * My Project
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AssignPermissionRequest,
    AssignPermissionRequestFromJSON,
    AssignPermissionRequestToJSON,
    AssignRoleRequest,
    AssignRoleRequestFromJSON,
    AssignRoleRequestToJSON,
    BulkUserOperation,
    BulkUserOperationFromJSON,
    BulkUserOperationToJSON,
    BulkUserOperationResponse,
    BulkUserOperationResponseFromJSON,
    BulkUserOperationResponseToJSON,
    ChangePasswordRequest,
    ChangePasswordRequestFromJSON,
    ChangePasswordRequestToJSON,
    CreateUserRequest,
    CreateUserRequestFromJSON,
    CreateUserRequestToJSON,
    DeleteUserRequest,
    DeleteUserRequestFromJSON,
    DeleteUserRequestToJSON,
    EmptyOutputBody,
    EmptyOutputBodyFromJSON,
    EmptyOutputBodyToJSON,
    InlineResponse400,
    InlineResponse400FromJSON,
    InlineResponse400ToJSON,
    PaginatedOutputUserActivity,
    PaginatedOutputUserActivityFromJSON,
    PaginatedOutputUserActivityToJSON,
    PaginatedOutputUserSummary,
    PaginatedOutputUserSummaryFromJSON,
    PaginatedOutputUserSummaryToJSON,
    SetPasswordRequest,
    SetPasswordRequestFromJSON,
    SetPasswordRequestToJSON,
    UpdateUserRequest,
    UpdateUserRequestFromJSON,
    UpdateUserRequestToJSON,
    User,
    UserFromJSON,
    UserToJSON,
    UserPermissionAssignment,
    UserPermissionAssignmentFromJSON,
    UserPermissionAssignmentToJSON,
    UserProfileUpdateRequest,
    UserProfileUpdateRequestFromJSON,
    UserProfileUpdateRequestToJSON,
    UserRoleAssignment,
    UserRoleAssignmentFromJSON,
    UserRoleAssignmentToJSON,
    UserStats,
    UserStatsFromJSON,
    UserStatsToJSON,
} from '../models';

export interface AssignUserPermissionRequest {
    orgId: string;
    id: string;
    assignPermissionRequest?: AssignPermissionRequest;
}

export interface AssignUserRoleRequest {
    orgId: string;
    id: string;
    assignRoleRequest?: AssignRoleRequest;
}

export interface BulkUserOperationsRequest {
    orgId: string;
    bulkUserOperation?: BulkUserOperation;
}

export interface ChangePasswordOperationRequest {
    changePasswordRequest?: ChangePasswordRequest;
}

export interface CreateUserOperationRequest {
    orgId: string;
    createUserRequest?: CreateUserRequest;
}

export interface DeleteUserOperationRequest {
    orgId: string;
    id: string;
    deleteUserRequest?: DeleteUserRequest;
}

export interface DisableUserMFARequest {
    orgId: string;
    id: string;
}

export interface EnableUserMFARequest {
    orgId: string;
    id: string;
}

export interface ExportUsersRequest {
    orgId: string;
}

export interface GetUserRequest {
    orgId: string;
    id: string;
}

export interface GetUserActivityRequest {
    orgId: string;
    id: string;
}

export interface GetUserMFARequest {
    orgId: string;
    id: string;
}

export interface GetUserSessionsRequest {
    orgId: string;
    id: string;
}

export interface GetUserStatsRequest {
    orgId: string;
}

export interface ListUserPermissionsRequest {
    orgId: string;
    id: string;
}

export interface ListUserRolesRequest {
    orgId: string;
    id: string;
}

export interface ListUsersRequest {
    orgId: string;
    after?: string;
    before?: string;
    first?: number;
    last?: number;
    limit?: number;
    offset?: number;
    fields?: Array<string> | null;
    orderBy?: Array<string> | null;
    page?: number;
}

export interface RemoveUserPermissionRequest {
    orgId: string;
    id: string;
    permissionId: string;
}

export interface RemoveUserRoleRequest {
    orgId: string;
    id: string;
    roleId: string;
}

export interface ResetUserMFARequest {
    orgId: string;
    id: string;
}

export interface RevokeAllUserSessionsRequest {
    orgId: string;
    id: string;
}

export interface RevokeUserSessionRequest {
    orgId: string;
    id: string;
    sessionId: string;
}

export interface SetUserPasswordRequest {
    orgId: string;
    id: string;
    setPasswordRequest?: SetPasswordRequest;
}

export interface UpdateUserOperationRequest {
    orgId: string;
    id: string;
    updateUserRequest?: UpdateUserRequest;
}

export interface UpdateUserProfileRequest {
    userProfileUpdateRequest?: UserProfileUpdateRequest;
}

/**
 * UsersApi - interface
 * 
 * @export
 * @interface UsersApiInterface
 */
export interface UsersApiInterface {
    /**
     * Assign a direct permission to a user
     * @summary Assign permission to user
     * @param {string} orgId 
     * @param {string} id User ID
     * @param {AssignPermissionRequest} [assignPermissionRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    assignUserPermissionRaw(requestParameters: AssignUserPermissionRequest): Promise<runtime.ApiResponse<EmptyOutputBody>>;

    /**
     * Assign a direct permission to a user
     * Assign permission to user
     */
    assignUserPermission(requestParameters: AssignUserPermissionRequest): Promise<EmptyOutputBody>;

    /**
     * Assign a role to a user
     * @summary Assign role to user
     * @param {string} orgId 
     * @param {string} id User ID
     * @param {AssignRoleRequest} [assignRoleRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    assignUserRoleRaw(requestParameters: AssignUserRoleRequest): Promise<runtime.ApiResponse<EmptyOutputBody>>;

    /**
     * Assign a role to a user
     * Assign role to user
     */
    assignUserRole(requestParameters: AssignUserRoleRequest): Promise<EmptyOutputBody>;

    /**
     * Perform bulk operations on multiple users
     * @summary Bulk user operations
     * @param {string} orgId 
     * @param {BulkUserOperation} [bulkUserOperation] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    bulkUserOperationsRaw(requestParameters: BulkUserOperationsRequest): Promise<runtime.ApiResponse<BulkUserOperationResponse>>;

    /**
     * Perform bulk operations on multiple users
     * Bulk user operations
     */
    bulkUserOperations(requestParameters: BulkUserOperationsRequest): Promise<BulkUserOperationResponse>;

    /**
     * Change the current user\'s password
     * @summary Change password
     * @param {ChangePasswordRequest} [changePasswordRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    changePasswordRaw(requestParameters: ChangePasswordOperationRequest): Promise<runtime.ApiResponse<EmptyOutputBody>>;

    /**
     * Change the current user\'s password
     * Change password
     */
    changePassword(requestParameters: ChangePasswordOperationRequest): Promise<EmptyOutputBody>;

    /**
     * Create a new user in the organization
     * @summary Create user
     * @param {string} orgId 
     * @param {CreateUserRequest} [createUserRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    createUserRaw(requestParameters: CreateUserOperationRequest): Promise<runtime.ApiResponse<User>>;

    /**
     * Create a new user in the organization
     * Create user
     */
    createUser(requestParameters: CreateUserOperationRequest): Promise<User>;

    /**
     * Delete user account
     * @summary Delete user
     * @param {string} orgId 
     * @param {string} id User ID
     * @param {DeleteUserRequest} [deleteUserRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    deleteUserRaw(requestParameters: DeleteUserOperationRequest): Promise<runtime.ApiResponse<EmptyOutputBody>>;

    /**
     * Delete user account
     * Delete user
     */
    deleteUser(requestParameters: DeleteUserOperationRequest): Promise<EmptyOutputBody>;

    /**
     * Disable MFA for a user (admin action)
     * @summary Disable MFA for user
     * @param {string} orgId 
     * @param {string} id User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    disableUserMFARaw(requestParameters: DisableUserMFARequest): Promise<runtime.ApiResponse<EmptyOutputBody>>;

    /**
     * Disable MFA for a user (admin action)
     * Disable MFA for user
     */
    disableUserMFA(requestParameters: DisableUserMFARequest): Promise<EmptyOutputBody>;

    /**
     * Enable MFA for a user (admin action)
     * @summary Enable MFA for user
     * @param {string} orgId 
     * @param {string} id User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    enableUserMFARaw(requestParameters: EnableUserMFARequest): Promise<runtime.ApiResponse<EmptyOutputBody>>;

    /**
     * Enable MFA for a user (admin action)
     * Enable MFA for user
     */
    enableUserMFA(requestParameters: EnableUserMFARequest): Promise<EmptyOutputBody>;

    /**
     * Export user data to CSV or JSON format
     * @summary Export users
     * @param {string} orgId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    exportUsersRaw(requestParameters: ExportUsersRequest): Promise<runtime.ApiResponse<EmptyOutputBody>>;

    /**
     * Export user data to CSV or JSON format
     * Export users
     */
    exportUsers(requestParameters: ExportUsersRequest): Promise<EmptyOutputBody>;

    /**
     * Get user by ID
     * @summary Get user
     * @param {string} orgId 
     * @param {string} id User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    getUserRaw(requestParameters: GetUserRequest): Promise<runtime.ApiResponse<User>>;

    /**
     * Get user by ID
     * Get user
     */
    getUser(requestParameters: GetUserRequest): Promise<User>;

    /**
     * Get user activity log with pagination
     * @summary Get user activity
     * @param {string} orgId 
     * @param {string} id User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    getUserActivityRaw(requestParameters: GetUserActivityRequest): Promise<runtime.ApiResponse<PaginatedOutputUserActivity>>;

    /**
     * Get user activity log with pagination
     * Get user activity
     */
    getUserActivity(requestParameters: GetUserActivityRequest): Promise<PaginatedOutputUserActivity>;

    /**
     * Get MFA configuration and status for a user
     * @summary Get user MFA status
     * @param {string} orgId 
     * @param {string} id User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    getUserMFARaw(requestParameters: GetUserMFARequest): Promise<runtime.ApiResponse<EmptyOutputBody>>;

    /**
     * Get MFA configuration and status for a user
     * Get user MFA status
     */
    getUserMFA(requestParameters: GetUserMFARequest): Promise<EmptyOutputBody>;

    /**
     * Get the current authenticated user\'s profile
     * @summary Get current user profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    getUserProfileRaw(): Promise<runtime.ApiResponse<User>>;

    /**
     * Get the current authenticated user\'s profile
     * Get current user profile
     */
    getUserProfile(): Promise<User>;

    /**
     * Get active sessions for a user
     * @summary Get user sessions
     * @param {string} orgId 
     * @param {string} id User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    getUserSessionsRaw(requestParameters: GetUserSessionsRequest): Promise<runtime.ApiResponse<EmptyOutputBody>>;

    /**
     * Get active sessions for a user
     * Get user sessions
     */
    getUserSessions(requestParameters: GetUserSessionsRequest): Promise<EmptyOutputBody>;

    /**
     * Get user statistics for the organization
     * @summary Get user statistics
     * @param {string} orgId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    getUserStatsRaw(requestParameters: GetUserStatsRequest): Promise<runtime.ApiResponse<UserStats>>;

    /**
     * Get user statistics for the organization
     * Get user statistics
     */
    getUserStats(requestParameters: GetUserStatsRequest): Promise<UserStats>;

    /**
     * List all permissions for a user (direct and inherited from roles)
     * @summary List user permissions
     * @param {string} orgId 
     * @param {string} id User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    listUserPermissionsRaw(requestParameters: ListUserPermissionsRequest): Promise<runtime.ApiResponse<Array<UserPermissionAssignment>>>;

    /**
     * List all permissions for a user (direct and inherited from roles)
     * List user permissions
     */
    listUserPermissions(requestParameters: ListUserPermissionsRequest): Promise<Array<UserPermissionAssignment>>;

    /**
     * List all roles assigned to a user
     * @summary List user roles
     * @param {string} orgId 
     * @param {string} id User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    listUserRolesRaw(requestParameters: ListUserRolesRequest): Promise<runtime.ApiResponse<Array<UserRoleAssignment>>>;

    /**
     * List all roles assigned to a user
     * List user roles
     */
    listUserRoles(requestParameters: ListUserRolesRequest): Promise<Array<UserRoleAssignment>>;

    /**
     * List users in an organization with pagination and filtering
     * @summary List users
     * @param {string} orgId 
     * @param {string} [after] 
     * @param {string} [before] 
     * @param {number} [first] 
     * @param {number} [last] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {Array<string>} [fields] 
     * @param {Array<string>} [orderBy] 
     * @param {number} [page] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    listUsersRaw(requestParameters: ListUsersRequest): Promise<runtime.ApiResponse<PaginatedOutputUserSummary>>;

    /**
     * List users in an organization with pagination and filtering
     * List users
     */
    listUsers(requestParameters: ListUsersRequest): Promise<PaginatedOutputUserSummary>;

    /**
     * Remove a direct permission assignment from a user
     * @summary Remove permission from user
     * @param {string} orgId 
     * @param {string} id User ID
     * @param {string} permissionId Permission ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    removeUserPermissionRaw(requestParameters: RemoveUserPermissionRequest): Promise<runtime.ApiResponse<EmptyOutputBody>>;

    /**
     * Remove a direct permission assignment from a user
     * Remove permission from user
     */
    removeUserPermission(requestParameters: RemoveUserPermissionRequest): Promise<EmptyOutputBody>;

    /**
     * Remove a role assignment from a user
     * @summary Remove role from user
     * @param {string} orgId 
     * @param {string} id User ID
     * @param {string} roleId Role ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    removeUserRoleRaw(requestParameters: RemoveUserRoleRequest): Promise<runtime.ApiResponse<EmptyOutputBody>>;

    /**
     * Remove a role assignment from a user
     * Remove role from user
     */
    removeUserRole(requestParameters: RemoveUserRoleRequest): Promise<EmptyOutputBody>;

    /**
     * Reset MFA configuration for a user (admin action)
     * @summary Reset user MFA
     * @param {string} orgId 
     * @param {string} id User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    resetUserMFARaw(requestParameters: ResetUserMFARequest): Promise<runtime.ApiResponse<EmptyOutputBody>>;

    /**
     * Reset MFA configuration for a user (admin action)
     * Reset user MFA
     */
    resetUserMFA(requestParameters: ResetUserMFARequest): Promise<EmptyOutputBody>;

    /**
     * Revoke all sessions for a user
     * @summary Revoke all user sessions
     * @param {string} orgId 
     * @param {string} id User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    revokeAllUserSessionsRaw(requestParameters: RevokeAllUserSessionsRequest): Promise<runtime.ApiResponse<EmptyOutputBody>>;

    /**
     * Revoke all sessions for a user
     * Revoke all user sessions
     */
    revokeAllUserSessions(requestParameters: RevokeAllUserSessionsRequest): Promise<EmptyOutputBody>;

    /**
     * Revoke a specific session for a user
     * @summary Revoke user session
     * @param {string} orgId 
     * @param {string} id User ID
     * @param {string} sessionId Session ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    revokeUserSessionRaw(requestParameters: RevokeUserSessionRequest): Promise<runtime.ApiResponse<EmptyOutputBody>>;

    /**
     * Revoke a specific session for a user
     * Revoke user session
     */
    revokeUserSession(requestParameters: RevokeUserSessionRequest): Promise<EmptyOutputBody>;

    /**
     * Set password for a user (admin only)
     * @summary Set user password
     * @param {string} orgId 
     * @param {string} id User ID
     * @param {SetPasswordRequest} [setPasswordRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    setUserPasswordRaw(requestParameters: SetUserPasswordRequest): Promise<runtime.ApiResponse<EmptyOutputBody>>;

    /**
     * Set password for a user (admin only)
     * Set user password
     */
    setUserPassword(requestParameters: SetUserPasswordRequest): Promise<EmptyOutputBody>;

    /**
     * Update user information
     * @summary Update user
     * @param {string} orgId 
     * @param {string} id User ID
     * @param {UpdateUserRequest} [updateUserRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    updateUserRaw(requestParameters: UpdateUserOperationRequest): Promise<runtime.ApiResponse<User>>;

    /**
     * Update user information
     * Update user
     */
    updateUser(requestParameters: UpdateUserOperationRequest): Promise<User>;

    /**
     * Update the current authenticated user\'s profile
     * @summary Update current user profile
     * @param {UserProfileUpdateRequest} [userProfileUpdateRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    updateUserProfileRaw(requestParameters: UpdateUserProfileRequest): Promise<runtime.ApiResponse<User>>;

    /**
     * Update the current authenticated user\'s profile
     * Update current user profile
     */
    updateUserProfile(requestParameters: UpdateUserProfileRequest): Promise<User>;

}

/**
 * 
 */
export class UsersApi extends runtime.BaseAPI implements UsersApiInterface {

    /**
     * Assign a direct permission to a user
     * Assign permission to user
     */
    async assignUserPermissionRaw(requestParameters: AssignUserPermissionRequest): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling assignUserPermission.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling assignUserPermission.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/users/{id}/permissions`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AssignPermissionRequestToJSON(requestParameters.assignPermissionRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Assign a direct permission to a user
     * Assign permission to user
     */
    async assignUserPermission(requestParameters: AssignUserPermissionRequest): Promise<EmptyOutputBody> {
        const response = await this.assignUserPermissionRaw(requestParameters);
        return await response.value();
    }

    /**
     * Assign a role to a user
     * Assign role to user
     */
    async assignUserRoleRaw(requestParameters: AssignUserRoleRequest): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling assignUserRole.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling assignUserRole.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/users/{id}/roles`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AssignRoleRequestToJSON(requestParameters.assignRoleRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Assign a role to a user
     * Assign role to user
     */
    async assignUserRole(requestParameters: AssignUserRoleRequest): Promise<EmptyOutputBody> {
        const response = await this.assignUserRoleRaw(requestParameters);
        return await response.value();
    }

    /**
     * Perform bulk operations on multiple users
     * Bulk user operations
     */
    async bulkUserOperationsRaw(requestParameters: BulkUserOperationsRequest): Promise<runtime.ApiResponse<BulkUserOperationResponse>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling bulkUserOperations.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/users/bulk`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BulkUserOperationToJSON(requestParameters.bulkUserOperation),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => BulkUserOperationResponseFromJSON(jsonValue));
    }

    /**
     * Perform bulk operations on multiple users
     * Bulk user operations
     */
    async bulkUserOperations(requestParameters: BulkUserOperationsRequest): Promise<BulkUserOperationResponse> {
        const response = await this.bulkUserOperationsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Change the current user\'s password
     * Change password
     */
    async changePasswordRaw(requestParameters: ChangePasswordOperationRequest): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/user/change-password`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChangePasswordRequestToJSON(requestParameters.changePasswordRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Change the current user\'s password
     * Change password
     */
    async changePassword(requestParameters: ChangePasswordOperationRequest): Promise<EmptyOutputBody> {
        const response = await this.changePasswordRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create a new user in the organization
     * Create user
     */
    async createUserRaw(requestParameters: CreateUserOperationRequest): Promise<runtime.ApiResponse<User>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling createUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/users`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateUserRequestToJSON(requestParameters.createUserRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * Create a new user in the organization
     * Create user
     */
    async createUser(requestParameters: CreateUserOperationRequest): Promise<User> {
        const response = await this.createUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * Delete user account
     * Delete user
     */
    async deleteUserRaw(requestParameters: DeleteUserOperationRequest): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling deleteUser.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/users/{id}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteUserRequestToJSON(requestParameters.deleteUserRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Delete user account
     * Delete user
     */
    async deleteUser(requestParameters: DeleteUserOperationRequest): Promise<EmptyOutputBody> {
        const response = await this.deleteUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * Disable MFA for a user (admin action)
     * Disable MFA for user
     */
    async disableUserMFARaw(requestParameters: DisableUserMFARequest): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling disableUserMFA.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling disableUserMFA.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/users/{id}/mfa`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Disable MFA for a user (admin action)
     * Disable MFA for user
     */
    async disableUserMFA(requestParameters: DisableUserMFARequest): Promise<EmptyOutputBody> {
        const response = await this.disableUserMFARaw(requestParameters);
        return await response.value();
    }

    /**
     * Enable MFA for a user (admin action)
     * Enable MFA for user
     */
    async enableUserMFARaw(requestParameters: EnableUserMFARequest): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling enableUserMFA.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling enableUserMFA.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/users/{id}/mfa/enable`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Enable MFA for a user (admin action)
     * Enable MFA for user
     */
    async enableUserMFA(requestParameters: EnableUserMFARequest): Promise<EmptyOutputBody> {
        const response = await this.enableUserMFARaw(requestParameters);
        return await response.value();
    }

    /**
     * Export user data to CSV or JSON format
     * Export users
     */
    async exportUsersRaw(requestParameters: ExportUsersRequest): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling exportUsers.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/users/export`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Export user data to CSV or JSON format
     * Export users
     */
    async exportUsers(requestParameters: ExportUsersRequest): Promise<EmptyOutputBody> {
        const response = await this.exportUsersRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get user by ID
     * Get user
     */
    async getUserRaw(requestParameters: GetUserRequest): Promise<runtime.ApiResponse<User>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getUser.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/users/{id}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * Get user by ID
     * Get user
     */
    async getUser(requestParameters: GetUserRequest): Promise<User> {
        const response = await this.getUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get user activity log with pagination
     * Get user activity
     */
    async getUserActivityRaw(requestParameters: GetUserActivityRequest): Promise<runtime.ApiResponse<PaginatedOutputUserActivity>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getUserActivity.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getUserActivity.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/users/{id}/activity`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedOutputUserActivityFromJSON(jsonValue));
    }

    /**
     * Get user activity log with pagination
     * Get user activity
     */
    async getUserActivity(requestParameters: GetUserActivityRequest): Promise<PaginatedOutputUserActivity> {
        const response = await this.getUserActivityRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get MFA configuration and status for a user
     * Get user MFA status
     */
    async getUserMFARaw(requestParameters: GetUserMFARequest): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getUserMFA.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getUserMFA.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/users/{id}/mfa`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Get MFA configuration and status for a user
     * Get user MFA status
     */
    async getUserMFA(requestParameters: GetUserMFARequest): Promise<EmptyOutputBody> {
        const response = await this.getUserMFARaw(requestParameters);
        return await response.value();
    }

    /**
     * Get the current authenticated user\'s profile
     * Get current user profile
     */
    async getUserProfileRaw(): Promise<runtime.ApiResponse<User>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/user/profile`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * Get the current authenticated user\'s profile
     * Get current user profile
     */
    async getUserProfile(): Promise<User> {
        const response = await this.getUserProfileRaw();
        return await response.value();
    }

    /**
     * Get active sessions for a user
     * Get user sessions
     */
    async getUserSessionsRaw(requestParameters: GetUserSessionsRequest): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getUserSessions.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getUserSessions.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/users/{id}/sessions`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Get active sessions for a user
     * Get user sessions
     */
    async getUserSessions(requestParameters: GetUserSessionsRequest): Promise<EmptyOutputBody> {
        const response = await this.getUserSessionsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get user statistics for the organization
     * Get user statistics
     */
    async getUserStatsRaw(requestParameters: GetUserStatsRequest): Promise<runtime.ApiResponse<UserStats>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getUserStats.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/users/stats`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserStatsFromJSON(jsonValue));
    }

    /**
     * Get user statistics for the organization
     * Get user statistics
     */
    async getUserStats(requestParameters: GetUserStatsRequest): Promise<UserStats> {
        const response = await this.getUserStatsRaw(requestParameters);
        return await response.value();
    }

    /**
     * List all permissions for a user (direct and inherited from roles)
     * List user permissions
     */
    async listUserPermissionsRaw(requestParameters: ListUserPermissionsRequest): Promise<runtime.ApiResponse<Array<UserPermissionAssignment>>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling listUserPermissions.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling listUserPermissions.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/users/{id}/permissions`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserPermissionAssignmentFromJSON));
    }

    /**
     * List all permissions for a user (direct and inherited from roles)
     * List user permissions
     */
    async listUserPermissions(requestParameters: ListUserPermissionsRequest): Promise<Array<UserPermissionAssignment>> {
        const response = await this.listUserPermissionsRaw(requestParameters);
        return await response.value();
    }

    /**
     * List all roles assigned to a user
     * List user roles
     */
    async listUserRolesRaw(requestParameters: ListUserRolesRequest): Promise<runtime.ApiResponse<Array<UserRoleAssignment>>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling listUserRoles.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling listUserRoles.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/users/{id}/roles`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserRoleAssignmentFromJSON));
    }

    /**
     * List all roles assigned to a user
     * List user roles
     */
    async listUserRoles(requestParameters: ListUserRolesRequest): Promise<Array<UserRoleAssignment>> {
        const response = await this.listUserRolesRaw(requestParameters);
        return await response.value();
    }

    /**
     * List users in an organization with pagination and filtering
     * List users
     */
    async listUsersRaw(requestParameters: ListUsersRequest): Promise<runtime.ApiResponse<PaginatedOutputUserSummary>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling listUsers.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.after !== undefined) {
            queryParameters['after'] = requestParameters.after;
        }

        if (requestParameters.before !== undefined) {
            queryParameters['before'] = requestParameters.before;
        }

        if (requestParameters.first !== undefined) {
            queryParameters['first'] = requestParameters.first;
        }

        if (requestParameters.last !== undefined) {
            queryParameters['last'] = requestParameters.last;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.fields) {
            queryParameters['fields'] = requestParameters.fields;
        }

        if (requestParameters.orderBy) {
            queryParameters['orderBy'] = requestParameters.orderBy;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/users`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedOutputUserSummaryFromJSON(jsonValue));
    }

    /**
     * List users in an organization with pagination and filtering
     * List users
     */
    async listUsers(requestParameters: ListUsersRequest): Promise<PaginatedOutputUserSummary> {
        const response = await this.listUsersRaw(requestParameters);
        return await response.value();
    }

    /**
     * Remove a direct permission assignment from a user
     * Remove permission from user
     */
    async removeUserPermissionRaw(requestParameters: RemoveUserPermissionRequest): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling removeUserPermission.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling removeUserPermission.');
        }

        if (requestParameters.permissionId === null || requestParameters.permissionId === undefined) {
            throw new runtime.RequiredError('permissionId','Required parameter requestParameters.permissionId was null or undefined when calling removeUserPermission.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/users/{id}/permissions/{permissionId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"permissionId"}}`, encodeURIComponent(String(requestParameters.permissionId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Remove a direct permission assignment from a user
     * Remove permission from user
     */
    async removeUserPermission(requestParameters: RemoveUserPermissionRequest): Promise<EmptyOutputBody> {
        const response = await this.removeUserPermissionRaw(requestParameters);
        return await response.value();
    }

    /**
     * Remove a role assignment from a user
     * Remove role from user
     */
    async removeUserRoleRaw(requestParameters: RemoveUserRoleRequest): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling removeUserRole.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling removeUserRole.');
        }

        if (requestParameters.roleId === null || requestParameters.roleId === undefined) {
            throw new runtime.RequiredError('roleId','Required parameter requestParameters.roleId was null or undefined when calling removeUserRole.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/users/{id}/roles/{roleId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"roleId"}}`, encodeURIComponent(String(requestParameters.roleId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Remove a role assignment from a user
     * Remove role from user
     */
    async removeUserRole(requestParameters: RemoveUserRoleRequest): Promise<EmptyOutputBody> {
        const response = await this.removeUserRoleRaw(requestParameters);
        return await response.value();
    }

    /**
     * Reset MFA configuration for a user (admin action)
     * Reset user MFA
     */
    async resetUserMFARaw(requestParameters: ResetUserMFARequest): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling resetUserMFA.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling resetUserMFA.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/users/{id}/mfa/reset`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Reset MFA configuration for a user (admin action)
     * Reset user MFA
     */
    async resetUserMFA(requestParameters: ResetUserMFARequest): Promise<EmptyOutputBody> {
        const response = await this.resetUserMFARaw(requestParameters);
        return await response.value();
    }

    /**
     * Revoke all sessions for a user
     * Revoke all user sessions
     */
    async revokeAllUserSessionsRaw(requestParameters: RevokeAllUserSessionsRequest): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling revokeAllUserSessions.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling revokeAllUserSessions.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/users/{id}/sessions`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Revoke all sessions for a user
     * Revoke all user sessions
     */
    async revokeAllUserSessions(requestParameters: RevokeAllUserSessionsRequest): Promise<EmptyOutputBody> {
        const response = await this.revokeAllUserSessionsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Revoke a specific session for a user
     * Revoke user session
     */
    async revokeUserSessionRaw(requestParameters: RevokeUserSessionRequest): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling revokeUserSession.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling revokeUserSession.');
        }

        if (requestParameters.sessionId === null || requestParameters.sessionId === undefined) {
            throw new runtime.RequiredError('sessionId','Required parameter requestParameters.sessionId was null or undefined when calling revokeUserSession.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/users/{id}/sessions/{sessionId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"sessionId"}}`, encodeURIComponent(String(requestParameters.sessionId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Revoke a specific session for a user
     * Revoke user session
     */
    async revokeUserSession(requestParameters: RevokeUserSessionRequest): Promise<EmptyOutputBody> {
        const response = await this.revokeUserSessionRaw(requestParameters);
        return await response.value();
    }

    /**
     * Set password for a user (admin only)
     * Set user password
     */
    async setUserPasswordRaw(requestParameters: SetUserPasswordRequest): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling setUserPassword.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling setUserPassword.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/users/{id}/set-password`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SetPasswordRequestToJSON(requestParameters.setPasswordRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Set password for a user (admin only)
     * Set user password
     */
    async setUserPassword(requestParameters: SetUserPasswordRequest): Promise<EmptyOutputBody> {
        const response = await this.setUserPasswordRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update user information
     * Update user
     */
    async updateUserRaw(requestParameters: UpdateUserOperationRequest): Promise<runtime.ApiResponse<User>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling updateUser.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/users/{id}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateUserRequestToJSON(requestParameters.updateUserRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * Update user information
     * Update user
     */
    async updateUser(requestParameters: UpdateUserOperationRequest): Promise<User> {
        const response = await this.updateUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update the current authenticated user\'s profile
     * Update current user profile
     */
    async updateUserProfileRaw(requestParameters: UpdateUserProfileRequest): Promise<runtime.ApiResponse<User>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/user/profile`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UserProfileUpdateRequestToJSON(requestParameters.userProfileUpdateRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * Update the current authenticated user\'s profile
     * Update current user profile
     */
    async updateUserProfile(requestParameters: UpdateUserProfileRequest): Promise<User> {
        const response = await this.updateUserProfileRaw(requestParameters);
        return await response.value();
    }

}
