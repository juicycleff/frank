/* tslint:disable */
/* eslint-disable */
/**
 * My Project
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AssignRoleRequest,
    AssignRoleRequestFromJSON,
    AssignRoleRequestToJSON,
    EmptyOutputBody,
    EmptyOutputBodyFromJSON,
    EmptyOutputBodyToJSON,
    InlineResponse400,
    InlineResponse400FromJSON,
    InlineResponse400ToJSON,
    UserRoleAssignment,
    UserRoleAssignmentFromJSON,
    UserRoleAssignmentToJSON,
} from '../models';

export interface AssignUserRoleRequest {
    orgId: string;
    id: string;
    assignRoleRequest?: AssignRoleRequest;
}

export interface ListUserRolesRequest {
    orgId: string;
    id: string;
}

export interface RemoveUserRoleRequest {
    orgId: string;
    id: string;
    roleId: string;
}

/**
 * RolesApi - interface
 * 
 * @export
 * @interface RolesApiInterface
 */
export interface RolesApiInterface {
    /**
     * Assign a role to a user
     * @summary Assign role to user
     * @param {string} orgId 
     * @param {string} id User ID
     * @param {AssignRoleRequest} [assignRoleRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApiInterface
     */
    assignUserRoleRaw(requestParameters: AssignUserRoleRequest): Promise<runtime.ApiResponse<EmptyOutputBody>>;

    /**
     * Assign a role to a user
     * Assign role to user
     */
    assignUserRole(requestParameters: AssignUserRoleRequest): Promise<EmptyOutputBody>;

    /**
     * List all roles assigned to a user
     * @summary List user roles
     * @param {string} orgId 
     * @param {string} id User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApiInterface
     */
    listUserRolesRaw(requestParameters: ListUserRolesRequest): Promise<runtime.ApiResponse<Array<UserRoleAssignment>>>;

    /**
     * List all roles assigned to a user
     * List user roles
     */
    listUserRoles(requestParameters: ListUserRolesRequest): Promise<Array<UserRoleAssignment>>;

    /**
     * Remove a role assignment from a user
     * @summary Remove role from user
     * @param {string} orgId 
     * @param {string} id User ID
     * @param {string} roleId Role ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApiInterface
     */
    removeUserRoleRaw(requestParameters: RemoveUserRoleRequest): Promise<runtime.ApiResponse<EmptyOutputBody>>;

    /**
     * Remove a role assignment from a user
     * Remove role from user
     */
    removeUserRole(requestParameters: RemoveUserRoleRequest): Promise<EmptyOutputBody>;

}

/**
 * 
 */
export class RolesApi extends runtime.BaseAPI implements RolesApiInterface {

    /**
     * Assign a role to a user
     * Assign role to user
     */
    async assignUserRoleRaw(requestParameters: AssignUserRoleRequest): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling assignUserRole.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling assignUserRole.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/users/{id}/roles`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AssignRoleRequestToJSON(requestParameters.assignRoleRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Assign a role to a user
     * Assign role to user
     */
    async assignUserRole(requestParameters: AssignUserRoleRequest): Promise<EmptyOutputBody> {
        const response = await this.assignUserRoleRaw(requestParameters);
        return await response.value();
    }

    /**
     * List all roles assigned to a user
     * List user roles
     */
    async listUserRolesRaw(requestParameters: ListUserRolesRequest): Promise<runtime.ApiResponse<Array<UserRoleAssignment>>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling listUserRoles.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling listUserRoles.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/users/{id}/roles`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserRoleAssignmentFromJSON));
    }

    /**
     * List all roles assigned to a user
     * List user roles
     */
    async listUserRoles(requestParameters: ListUserRolesRequest): Promise<Array<UserRoleAssignment>> {
        const response = await this.listUserRolesRaw(requestParameters);
        return await response.value();
    }

    /**
     * Remove a role assignment from a user
     * Remove role from user
     */
    async removeUserRoleRaw(requestParameters: RemoveUserRoleRequest): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling removeUserRole.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling removeUserRole.');
        }

        if (requestParameters.roleId === null || requestParameters.roleId === undefined) {
            throw new runtime.RequiredError('roleId','Required parameter requestParameters.roleId was null or undefined when calling removeUserRole.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/users/{id}/roles/{roleId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"roleId"}}`, encodeURIComponent(String(requestParameters.roleId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Remove a role assignment from a user
     * Remove role from user
     */
    async removeUserRole(requestParameters: RemoveUserRoleRequest): Promise<EmptyOutputBody> {
        const response = await this.removeUserRoleRaw(requestParameters);
        return await response.value();
    }

}
