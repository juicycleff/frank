/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateIdentityProviderRequest,
  EnableProviderBody,
  GetGlobalActivityStats400Response,
  IdentityProvider,
  PaginatedOutputIdentityProviderSummary,
  PaginatedOutputOrganizationProvider,
  PaginatedOutputProviderTemplate,
  PaginatedOutputSSOActivity,
  ProviderConfiguration,
  ProviderTemplate,
  SSOBulkProvisionRequest,
  SSOBulkProvisionResponse,
  SSOCallbackRequest,
  SSOCallbackResponse,
  SSODomainVerificationRequest,
  SSODomainVerificationResponse,
  SSOExportRequest,
  SSOExportResponse,
  SSOHealthCheck,
  SSOLoginRequest,
  SSOLoginResponse,
  SSOMetadataResponse,
  SSOProviderMetrics,
  SSOStats,
  SSSProviderStats,
  TestSSOConnectionRequest,
  TestSSOConnectionResponse,
  UpdateIdentityProviderRequest,
} from '../models/index';
import {
    CreateIdentityProviderRequestFromJSON,
    CreateIdentityProviderRequestToJSON,
    EnableProviderBodyFromJSON,
    EnableProviderBodyToJSON,
    GetGlobalActivityStats400ResponseFromJSON,
    GetGlobalActivityStats400ResponseToJSON,
    IdentityProviderFromJSON,
    IdentityProviderToJSON,
    PaginatedOutputIdentityProviderSummaryFromJSON,
    PaginatedOutputIdentityProviderSummaryToJSON,
    PaginatedOutputOrganizationProviderFromJSON,
    PaginatedOutputOrganizationProviderToJSON,
    PaginatedOutputProviderTemplateFromJSON,
    PaginatedOutputProviderTemplateToJSON,
    PaginatedOutputSSOActivityFromJSON,
    PaginatedOutputSSOActivityToJSON,
    ProviderConfigurationFromJSON,
    ProviderConfigurationToJSON,
    ProviderTemplateFromJSON,
    ProviderTemplateToJSON,
    SSOBulkProvisionRequestFromJSON,
    SSOBulkProvisionRequestToJSON,
    SSOBulkProvisionResponseFromJSON,
    SSOBulkProvisionResponseToJSON,
    SSOCallbackRequestFromJSON,
    SSOCallbackRequestToJSON,
    SSOCallbackResponseFromJSON,
    SSOCallbackResponseToJSON,
    SSODomainVerificationRequestFromJSON,
    SSODomainVerificationRequestToJSON,
    SSODomainVerificationResponseFromJSON,
    SSODomainVerificationResponseToJSON,
    SSOExportRequestFromJSON,
    SSOExportRequestToJSON,
    SSOExportResponseFromJSON,
    SSOExportResponseToJSON,
    SSOHealthCheckFromJSON,
    SSOHealthCheckToJSON,
    SSOLoginRequestFromJSON,
    SSOLoginRequestToJSON,
    SSOLoginResponseFromJSON,
    SSOLoginResponseToJSON,
    SSOMetadataResponseFromJSON,
    SSOMetadataResponseToJSON,
    SSOProviderMetricsFromJSON,
    SSOProviderMetricsToJSON,
    SSOStatsFromJSON,
    SSOStatsToJSON,
    SSSProviderStatsFromJSON,
    SSSProviderStatsToJSON,
    TestSSOConnectionRequestFromJSON,
    TestSSOConnectionRequestToJSON,
    TestSSOConnectionResponseFromJSON,
    TestSSOConnectionResponseToJSON,
    UpdateIdentityProviderRequestFromJSON,
    UpdateIdentityProviderRequestToJSON,
} from '../models/index';

export interface BulkProvisionUsersRequest {
    orgId: string;
    sSOBulkProvisionRequest: Omit<SSOBulkProvisionRequest, '$schema'>;
}

export interface CheckProviderHealthRequest {
    orgId: string;
    id: string;
}

export interface ConfigureProviderRequest {
    orgId: string;
    id: string;
    providerConfiguration: Omit<ProviderConfiguration, '$schema'>;
}

export interface CreateProviderRequest {
    orgId: string;
    createIdentityProviderRequest: Omit<CreateIdentityProviderRequest, '$schema'>;
}

export interface DeleteProviderRequest {
    orgId: string;
    id: string;
}

export interface DisableProviderRequest {
    orgId: string;
    id: string;
}

export interface EnableProviderRequest {
    orgId: string;
    id: string;
}

export interface EnableProviderFromTemplateRequest {
    orgId: string;
    enableProviderBody: Omit<EnableProviderBody, '$schema'>;
}

export interface ExportSSODataRequest {
    orgId: string;
    sSOExportRequest: Omit<SSOExportRequest, '$schema'>;
}

export interface GetOrganizationProvidersRequest {
    organizationId: string;
    after?: string;
    before?: string;
    first?: number;
    last?: number;
    limit?: number;
    offset?: number;
    fields?: Array<string> | null;
    orderBy?: Array<string> | null;
    page?: number;
    enabled?: boolean;
    templateKey?: string;
    type?: string;
}

export interface GetProviderRequest {
    orgId: string;
    id: string;
}

export interface GetProviderByDomainRequest {
    domain?: string;
}

export interface GetProviderCatalogRequest {
    after?: string;
    before?: string;
    first?: number;
    last?: number;
    limit?: number;
    offset?: number;
    fields?: Array<string> | null;
    orderBy?: Array<string> | null;
    page?: number;
    category?: string;
    type?: string;
    popular?: boolean;
    search?: string;
    includeInactive?: boolean;
}

export interface GetProviderHealthStatusRequest {
    orgId: string;
}

export interface GetProviderMetadataRequest {
    orgId: string;
    id: string;
    format?: string;
}

export interface GetProviderMetricsRequest {
    orgId: string;
    id: string;
    period?: string;
}

export interface GetProviderStatsRequest {
    orgId: string;
    id: string;
}

export interface GetProviderTemplateRequest {
    templateKey: string;
}

export interface GetPublicProviderMetadataRequest {
    providerId: string;
    format?: string;
}

export interface GetSSOActivityRequest {
    orgId: string;
    after?: string;
    before?: string;
    first?: number;
    last?: number;
    limit?: number;
    offset?: number;
    fields?: Array<string> | null;
    orderBy?: Array<string> | null;
    page?: number;
    providerId?: string;
    userId?: string;
    action?: string;
    success?: boolean;
    startDate?: Date;
    endDate?: Date;
    email?: string;
}

export interface GetSSOStatsRequest {
    orgId: string;
}

export interface HandleSAMLCallbackRequest {
    providerId: string;
}

export interface HandleSSOCallbackRequest {
    sSOCallbackRequest: Omit<SSOCallbackRequest, '$schema'>;
}

export interface InitiateSSOLoginRequest {
    sSOLoginRequest: Omit<SSOLoginRequest, '$schema'>;
}

export interface ListProvidersRequest {
    orgId: string;
    after?: string;
    before?: string;
    first?: number;
    last?: number;
    limit?: number;
    offset?: number;
    fields?: Array<string> | null;
    orderBy?: Array<string> | null;
    page?: number;
    organizationId?: string;
    type?: string;
    protocol?: string;
    enabled?: boolean;
    active?: boolean;
    domain?: string;
    search?: string;
}

export interface TestProviderConnectionRequest {
    orgId: string;
    id: string;
    testSSOConnectionRequest: Omit<TestSSOConnectionRequest, '$schema'>;
}

export interface UpdateProviderRequest {
    orgId: string;
    id: string;
    updateIdentityProviderRequest: Omit<UpdateIdentityProviderRequest, '$schema'>;
}

export interface VerifyDomainRequest {
    orgId: string;
    sSODomainVerificationRequest: Omit<SSODomainVerificationRequest, '$schema'>;
}

/**
 * 
 */
export class SSOApi extends runtime.BaseAPI {

    /**
     * Provision multiple users through SSO
     * Bulk provision users
     */
    async bulkProvisionUsersRaw(requestParameters: BulkProvisionUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SSOBulkProvisionResponse>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling bulkProvisionUsers().'
            );
        }

        if (requestParameters['sSOBulkProvisionRequest'] == null) {
            throw new runtime.RequiredError(
                'sSOBulkProvisionRequest',
                'Required parameter "sSOBulkProvisionRequest" was null or undefined when calling bulkProvisionUsers().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/sso/bulk-provision`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SSOBulkProvisionRequestToJSON(requestParameters['sSOBulkProvisionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SSOBulkProvisionResponseFromJSON(jsonValue));
    }

    /**
     * Provision multiple users through SSO
     * Bulk provision users
     */
    async bulkProvisionUsers(requestParameters: BulkProvisionUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SSOBulkProvisionResponse> {
        const response = await this.bulkProvisionUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Check the health status of an SSO provider
     * Check provider health
     */
    async checkProviderHealthRaw(requestParameters: CheckProviderHealthRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SSOHealthCheck>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling checkProviderHealth().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling checkProviderHealth().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/sso/providers/{id}/health`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SSOHealthCheckFromJSON(jsonValue));
    }

    /**
     * Check the health status of an SSO provider
     * Check provider health
     */
    async checkProviderHealth(requestParameters: CheckProviderHealthRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SSOHealthCheck> {
        const response = await this.checkProviderHealthRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update provider configuration with advanced settings
     * Configure provider
     */
    async configureProviderRaw(requestParameters: ConfigureProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IdentityProvider>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling configureProvider().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling configureProvider().'
            );
        }

        if (requestParameters['providerConfiguration'] == null) {
            throw new runtime.RequiredError(
                'providerConfiguration',
                'Required parameter "providerConfiguration" was null or undefined when calling configureProvider().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/sso/providers/{id}/configure`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProviderConfigurationToJSON(requestParameters['providerConfiguration']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IdentityProviderFromJSON(jsonValue));
    }

    /**
     * Update provider configuration with advanced settings
     * Configure provider
     */
    async configureProvider(requestParameters: ConfigureProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IdentityProvider> {
        const response = await this.configureProviderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new SSO provider for the organization
     * Create SSO provider
     */
    async createProviderRaw(requestParameters: CreateProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IdentityProvider>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling createProvider().'
            );
        }

        if (requestParameters['createIdentityProviderRequest'] == null) {
            throw new runtime.RequiredError(
                'createIdentityProviderRequest',
                'Required parameter "createIdentityProviderRequest" was null or undefined when calling createProvider().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/sso/providers`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateIdentityProviderRequestToJSON(requestParameters['createIdentityProviderRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IdentityProviderFromJSON(jsonValue));
    }

    /**
     * Create a new SSO provider for the organization
     * Create SSO provider
     */
    async createProvider(requestParameters: CreateProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IdentityProvider> {
        const response = await this.createProviderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an SSO provider
     * Delete SSO provider
     */
    async deleteProviderRaw(requestParameters: DeleteProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling deleteProvider().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteProvider().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/sso/providers/{id}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Delete an SSO provider
     * Delete SSO provider
     */
    async deleteProvider(requestParameters: DeleteProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.deleteProviderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Disable an SSO provider from authentication
     * Disable SSO provider
     */
    async disableProviderRaw(requestParameters: DisableProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling disableProvider().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling disableProvider().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/sso/providers/{id}/disable`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Disable an SSO provider from authentication
     * Disable SSO provider
     */
    async disableProvider(requestParameters: DisableProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.disableProviderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Enable an SSO provider for authentication
     * Enable SSO provider
     */
    async enableProviderRaw(requestParameters: EnableProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling enableProvider().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling enableProvider().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/sso/providers/{id}/enable`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Enable an SSO provider for authentication
     * Enable SSO provider
     */
    async enableProvider(requestParameters: EnableProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.enableProviderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Enable an SSO provider for the organization using a catalog template
     * Enable provider from template
     */
    async enableProviderFromTemplateRaw(requestParameters: EnableProviderFromTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IdentityProvider>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling enableProviderFromTemplate().'
            );
        }

        if (requestParameters['enableProviderBody'] == null) {
            throw new runtime.RequiredError(
                'enableProviderBody',
                'Required parameter "enableProviderBody" was null or undefined when calling enableProviderFromTemplate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/sso/catalog/enable`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EnableProviderBodyToJSON(requestParameters['enableProviderBody']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IdentityProviderFromJSON(jsonValue));
    }

    /**
     * Enable an SSO provider for the organization using a catalog template
     * Enable provider from template
     */
    async enableProviderFromTemplate(requestParameters: EnableProviderFromTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IdentityProvider> {
        const response = await this.enableProviderFromTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Export SSO configuration and activity data
     * Export SSO data
     */
    async exportSSODataRaw(requestParameters: ExportSSODataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SSOExportResponse>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling exportSSOData().'
            );
        }

        if (requestParameters['sSOExportRequest'] == null) {
            throw new runtime.RequiredError(
                'sSOExportRequest',
                'Required parameter "sSOExportRequest" was null or undefined when calling exportSSOData().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/sso/export`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SSOExportRequestToJSON(requestParameters['sSOExportRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SSOExportResponseFromJSON(jsonValue));
    }

    /**
     * Export SSO configuration and activity data
     * Export SSO data
     */
    async exportSSOData(requestParameters: ExportSSODataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SSOExportResponse> {
        const response = await this.exportSSODataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get SSO providers configured for the organization with template details
     * Get organization providers
     */
    async getOrganizationProvidersRaw(requestParameters: GetOrganizationProvidersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedOutputOrganizationProvider>> {
        if (requestParameters['organizationId'] == null) {
            throw new runtime.RequiredError(
                'organizationId',
                'Required parameter "organizationId" was null or undefined when calling getOrganizationProviders().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['after'] != null) {
            queryParameters['after'] = requestParameters['after'];
        }

        if (requestParameters['before'] != null) {
            queryParameters['before'] = requestParameters['before'];
        }

        if (requestParameters['first'] != null) {
            queryParameters['first'] = requestParameters['first'];
        }

        if (requestParameters['last'] != null) {
            queryParameters['last'] = requestParameters['last'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['orderBy'] = requestParameters['orderBy']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['enabled'] != null) {
            queryParameters['enabled'] = requestParameters['enabled'];
        }

        if (requestParameters['templateKey'] != null) {
            queryParameters['templateKey'] = requestParameters['templateKey'];
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/sso/organization-providers`.replace(`{${"organizationId"}}`, encodeURIComponent(String(requestParameters['organizationId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedOutputOrganizationProviderFromJSON(jsonValue));
    }

    /**
     * Get SSO providers configured for the organization with template details
     * Get organization providers
     */
    async getOrganizationProviders(requestParameters: GetOrganizationProvidersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedOutputOrganizationProvider> {
        const response = await this.getOrganizationProvidersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get details of a specific SSO provider
     * Get SSO provider
     */
    async getProviderRaw(requestParameters: GetProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IdentityProvider>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling getProvider().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getProvider().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/sso/providers/{id}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IdentityProviderFromJSON(jsonValue));
    }

    /**
     * Get details of a specific SSO provider
     * Get SSO provider
     */
    async getProvider(requestParameters: GetProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IdentityProvider> {
        const response = await this.getProviderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Find SSO provider configuration for a given domain
     * Discover SSO provider by domain
     */
    async getProviderByDomainRaw(requestParameters: GetProviderByDomainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IdentityProvider>> {
        const queryParameters: any = {};

        if (requestParameters['domain'] != null) {
            queryParameters['domain'] = requestParameters['domain'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/auth/sso/discover`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IdentityProviderFromJSON(jsonValue));
    }

    /**
     * Find SSO provider configuration for a given domain
     * Discover SSO provider by domain
     */
    async getProviderByDomain(requestParameters: GetProviderByDomainRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IdentityProvider> {
        const response = await this.getProviderByDomainRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get available SSO provider templates from the catalog
     * Get provider catalog
     */
    async getProviderCatalogRaw(requestParameters: GetProviderCatalogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedOutputProviderTemplate>> {
        const queryParameters: any = {};

        if (requestParameters['after'] != null) {
            queryParameters['after'] = requestParameters['after'];
        }

        if (requestParameters['before'] != null) {
            queryParameters['before'] = requestParameters['before'];
        }

        if (requestParameters['first'] != null) {
            queryParameters['first'] = requestParameters['first'];
        }

        if (requestParameters['last'] != null) {
            queryParameters['last'] = requestParameters['last'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['orderBy'] = requestParameters['orderBy']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['category'] != null) {
            queryParameters['category'] = requestParameters['category'];
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        if (requestParameters['popular'] != null) {
            queryParameters['popular'] = requestParameters['popular'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['includeInactive'] != null) {
            queryParameters['includeInactive'] = requestParameters['includeInactive'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/sso/catalog`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedOutputProviderTemplateFromJSON(jsonValue));
    }

    /**
     * Get available SSO provider templates from the catalog
     * Get provider catalog
     */
    async getProviderCatalog(requestParameters: GetProviderCatalogRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedOutputProviderTemplate> {
        const response = await this.getProviderCatalogRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get health status for all SSO providers in the organization
     * Get provider health status
     */
    async getProviderHealthStatusRaw(requestParameters: GetProviderHealthStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SSOHealthCheck>>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling getProviderHealthStatus().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/sso/health`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SSOHealthCheckFromJSON));
    }

    /**
     * Get health status for all SSO providers in the organization
     * Get provider health status
     */
    async getProviderHealthStatus(requestParameters: GetProviderHealthStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SSOHealthCheck>> {
        const response = await this.getProviderHealthStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get SAML metadata or OIDC configuration for an SSO provider
     * Get SSO provider metadata
     */
    async getProviderMetadataRaw(requestParameters: GetProviderMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SSOMetadataResponse>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling getProviderMetadata().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getProviderMetadata().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/sso/providers/{id}/metadata`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SSOMetadataResponseFromJSON(jsonValue));
    }

    /**
     * Get SAML metadata or OIDC configuration for an SSO provider
     * Get SSO provider metadata
     */
    async getProviderMetadata(requestParameters: GetProviderMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SSOMetadataResponse> {
        const response = await this.getProviderMetadataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get detailed metrics for a specific SSO provider
     * Get provider metrics
     */
    async getProviderMetricsRaw(requestParameters: GetProviderMetricsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SSOProviderMetrics>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling getProviderMetrics().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getProviderMetrics().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['period'] != null) {
            queryParameters['period'] = requestParameters['period'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/sso/providers/{id}/metrics`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SSOProviderMetricsFromJSON(jsonValue));
    }

    /**
     * Get detailed metrics for a specific SSO provider
     * Get provider metrics
     */
    async getProviderMetrics(requestParameters: GetProviderMetricsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SSOProviderMetrics> {
        const response = await this.getProviderMetricsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get detailed statistics for a specific SSO provider
     * Get provider statistics
     */
    async getProviderStatsRaw(requestParameters: GetProviderStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SSSProviderStats>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling getProviderStats().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getProviderStats().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/sso/providers/{id}/stats`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SSSProviderStatsFromJSON(jsonValue));
    }

    /**
     * Get detailed statistics for a specific SSO provider
     * Get provider statistics
     */
    async getProviderStats(requestParameters: GetProviderStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SSSProviderStats> {
        const response = await this.getProviderStatsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get details of a specific provider template
     * Get provider template
     */
    async getProviderTemplateRaw(requestParameters: GetProviderTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProviderTemplate>> {
        if (requestParameters['templateKey'] == null) {
            throw new runtime.RequiredError(
                'templateKey',
                'Required parameter "templateKey" was null or undefined when calling getProviderTemplate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/sso/catalog/{templateKey}`.replace(`{${"templateKey"}}`, encodeURIComponent(String(requestParameters['templateKey']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProviderTemplateFromJSON(jsonValue));
    }

    /**
     * Get details of a specific provider template
     * Get provider template
     */
    async getProviderTemplate(requestParameters: GetProviderTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProviderTemplate> {
        const response = await this.getProviderTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get publicly accessible SAML metadata or OIDC configuration
     * Get public SSO provider metadata
     */
    async getPublicProviderMetadataRaw(requestParameters: GetPublicProviderMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SSOMetadataResponse>> {
        if (requestParameters['providerId'] == null) {
            throw new runtime.RequiredError(
                'providerId',
                'Required parameter "providerId" was null or undefined when calling getPublicProviderMetadata().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/public/auth/sso/metadata/{providerId}`.replace(`{${"providerId"}}`, encodeURIComponent(String(requestParameters['providerId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SSOMetadataResponseFromJSON(jsonValue));
    }

    /**
     * Get publicly accessible SAML metadata or OIDC configuration
     * Get public SSO provider metadata
     */
    async getPublicProviderMetadata(requestParameters: GetPublicProviderMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SSOMetadataResponse> {
        const response = await this.getPublicProviderMetadataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get SSO activity logs and events
     * Get SSO activity
     */
    async getSSOActivityRaw(requestParameters: GetSSOActivityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedOutputSSOActivity>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling getSSOActivity().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['after'] != null) {
            queryParameters['after'] = requestParameters['after'];
        }

        if (requestParameters['before'] != null) {
            queryParameters['before'] = requestParameters['before'];
        }

        if (requestParameters['first'] != null) {
            queryParameters['first'] = requestParameters['first'];
        }

        if (requestParameters['last'] != null) {
            queryParameters['last'] = requestParameters['last'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['orderBy'] = requestParameters['orderBy']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['providerId'] != null) {
            queryParameters['providerId'] = requestParameters['providerId'];
        }

        if (requestParameters['userId'] != null) {
            queryParameters['userId'] = requestParameters['userId'];
        }

        if (requestParameters['action'] != null) {
            queryParameters['action'] = requestParameters['action'];
        }

        if (requestParameters['success'] != null) {
            queryParameters['success'] = requestParameters['success'];
        }

        if (requestParameters['startDate'] != null) {
            queryParameters['startDate'] = (requestParameters['startDate'] as any).toISOString();
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['endDate'] = (requestParameters['endDate'] as any).toISOString();
        }

        if (requestParameters['email'] != null) {
            queryParameters['email'] = requestParameters['email'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/sso/activity`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedOutputSSOActivityFromJSON(jsonValue));
    }

    /**
     * Get SSO activity logs and events
     * Get SSO activity
     */
    async getSSOActivity(requestParameters: GetSSOActivityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedOutputSSOActivity> {
        const response = await this.getSSOActivityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get SSO usage statistics for the organization
     * Get SSO statistics
     */
    async getSSOStatsRaw(requestParameters: GetSSOStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SSOStats>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling getSSOStats().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/sso/stats`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SSOStatsFromJSON(jsonValue));
    }

    /**
     * Get SSO usage statistics for the organization
     * Get SSO statistics
     */
    async getSSOStats(requestParameters: GetSSOStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SSOStats> {
        const response = await this.getSSOStatsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Process SAML authentication callback
     * Handle SAML callback
     */
    async handleSAMLCallbackRaw(requestParameters: HandleSAMLCallbackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SSOCallbackResponse>> {
        if (requestParameters['providerId'] == null) {
            throw new runtime.RequiredError(
                'providerId',
                'Required parameter "providerId" was null or undefined when calling handleSAMLCallback().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/public/auth/saml/callback/{providerId}`.replace(`{${"providerId"}}`, encodeURIComponent(String(requestParameters['providerId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SSOCallbackResponseFromJSON(jsonValue));
    }

    /**
     * Process SAML authentication callback
     * Handle SAML callback
     */
    async handleSAMLCallback(requestParameters: HandleSAMLCallbackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SSOCallbackResponse> {
        const response = await this.handleSAMLCallbackRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Process SSO authentication callback
     * Handle SSO callback
     */
    async handleSSOCallbackRaw(requestParameters: HandleSSOCallbackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SSOCallbackResponse>> {
        if (requestParameters['sSOCallbackRequest'] == null) {
            throw new runtime.RequiredError(
                'sSOCallbackRequest',
                'Required parameter "sSOCallbackRequest" was null or undefined when calling handleSSOCallback().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/public/auth/sso/callback`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SSOCallbackRequestToJSON(requestParameters['sSOCallbackRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SSOCallbackResponseFromJSON(jsonValue));
    }

    /**
     * Process SSO authentication callback
     * Handle SSO callback
     */
    async handleSSOCallback(requestParameters: HandleSSOCallbackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SSOCallbackResponse> {
        const response = await this.handleSSOCallbackRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Start the SSO authentication flow
     * Initiate SSO login
     */
    async initiateSSOLoginRaw(requestParameters: InitiateSSOLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SSOLoginResponse>> {
        if (requestParameters['sSOLoginRequest'] == null) {
            throw new runtime.RequiredError(
                'sSOLoginRequest',
                'Required parameter "sSOLoginRequest" was null or undefined when calling initiateSSOLogin().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/public/auth/sso/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SSOLoginRequestToJSON(requestParameters['sSOLoginRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SSOLoginResponseFromJSON(jsonValue));
    }

    /**
     * Start the SSO authentication flow
     * Initiate SSO login
     */
    async initiateSSOLogin(requestParameters: InitiateSSOLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SSOLoginResponse> {
        const response = await this.initiateSSOLoginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a paginated list of SSO providers for the organization
     * List SSO providers
     */
    async listProvidersRaw(requestParameters: ListProvidersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedOutputIdentityProviderSummary>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling listProviders().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['after'] != null) {
            queryParameters['after'] = requestParameters['after'];
        }

        if (requestParameters['before'] != null) {
            queryParameters['before'] = requestParameters['before'];
        }

        if (requestParameters['first'] != null) {
            queryParameters['first'] = requestParameters['first'];
        }

        if (requestParameters['last'] != null) {
            queryParameters['last'] = requestParameters['last'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['orderBy'] = requestParameters['orderBy']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['organizationId'] != null) {
            queryParameters['organizationId'] = requestParameters['organizationId'];
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        if (requestParameters['protocol'] != null) {
            queryParameters['protocol'] = requestParameters['protocol'];
        }

        if (requestParameters['enabled'] != null) {
            queryParameters['enabled'] = requestParameters['enabled'];
        }

        if (requestParameters['active'] != null) {
            queryParameters['active'] = requestParameters['active'];
        }

        if (requestParameters['domain'] != null) {
            queryParameters['domain'] = requestParameters['domain'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/sso/providers`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedOutputIdentityProviderSummaryFromJSON(jsonValue));
    }

    /**
     * Get a paginated list of SSO providers for the organization
     * List SSO providers
     */
    async listProviders(requestParameters: ListProvidersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedOutputIdentityProviderSummary> {
        const response = await this.listProvidersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Test connectivity and configuration of an SSO provider
     * Test SSO provider connection
     */
    async testProviderConnectionRaw(requestParameters: TestProviderConnectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TestSSOConnectionResponse>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling testProviderConnection().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling testProviderConnection().'
            );
        }

        if (requestParameters['testSSOConnectionRequest'] == null) {
            throw new runtime.RequiredError(
                'testSSOConnectionRequest',
                'Required parameter "testSSOConnectionRequest" was null or undefined when calling testProviderConnection().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/sso/providers/{id}/test`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TestSSOConnectionRequestToJSON(requestParameters['testSSOConnectionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TestSSOConnectionResponseFromJSON(jsonValue));
    }

    /**
     * Test connectivity and configuration of an SSO provider
     * Test SSO provider connection
     */
    async testProviderConnection(requestParameters: TestProviderConnectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TestSSOConnectionResponse> {
        const response = await this.testProviderConnectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing SSO provider configuration
     * Update SSO provider
     */
    async updateProviderRaw(requestParameters: UpdateProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IdentityProvider>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling updateProvider().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateProvider().'
            );
        }

        if (requestParameters['updateIdentityProviderRequest'] == null) {
            throw new runtime.RequiredError(
                'updateIdentityProviderRequest',
                'Required parameter "updateIdentityProviderRequest" was null or undefined when calling updateProvider().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/sso/providers/{id}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateIdentityProviderRequestToJSON(requestParameters['updateIdentityProviderRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IdentityProviderFromJSON(jsonValue));
    }

    /**
     * Update an existing SSO provider configuration
     * Update SSO provider
     */
    async updateProvider(requestParameters: UpdateProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IdentityProvider> {
        const response = await this.updateProviderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Verify domain ownership for SSO configuration
     * Verify domain ownership
     */
    async verifyDomainRaw(requestParameters: VerifyDomainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SSODomainVerificationResponse>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling verifyDomain().'
            );
        }

        if (requestParameters['sSODomainVerificationRequest'] == null) {
            throw new runtime.RequiredError(
                'sSODomainVerificationRequest',
                'Required parameter "sSODomainVerificationRequest" was null or undefined when calling verifyDomain().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/sso/domains/verify`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SSODomainVerificationRequestToJSON(requestParameters['sSODomainVerificationRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SSODomainVerificationResponseFromJSON(jsonValue));
    }

    /**
     * Verify domain ownership for SSO configuration
     * Verify domain ownership
     */
    async verifyDomain(requestParameters: VerifyDomainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SSODomainVerificationResponse> {
        const response = await this.verifyDomainRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
