/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ActivityStats,
  GetGlobalActivityStats400Response,
  UsageMetrics,
} from '../models/index';
import {
    ActivityStatsFromJSON,
    ActivityStatsToJSON,
    GetGlobalActivityStats400ResponseFromJSON,
    GetGlobalActivityStats400ResponseToJSON,
    UsageMetricsFromJSON,
    UsageMetricsToJSON,
} from '../models/index';

export interface CleanupExpiredActivitiesRequest {
    orgId: string;
    before?: Date;
}

/**
 * 
 */
export class AdminApi extends runtime.BaseAPI {

    /**
     * Delete expired activities for the organization (admin only)
     * Cleanup expired activities
     */
    async cleanupExpiredActivitiesRaw(requestParameters: CleanupExpiredActivitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: number; }>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling cleanupExpiredActivities().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['before'] != null) {
            queryParameters['before'] = (requestParameters['before'] as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/activities/cleanup`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Delete expired activities for the organization (admin only)
     * Cleanup expired activities
     */
    async cleanupExpiredActivities(requestParameters: CleanupExpiredActivitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: number; }> {
        const response = await this.cleanupExpiredActivitiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get platform-wide activity statistics (internal users only)
     * Get global activity statistics
     */
    async getGlobalActivityStatsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ActivityStats>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/admin/activities/stats`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ActivityStatsFromJSON(jsonValue));
    }

    /**
     * Get platform-wide activity statistics (internal users only)
     * Get global activity statistics
     */
    async getGlobalActivityStats(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ActivityStats> {
        const response = await this.getGlobalActivityStatsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get platform-wide usage metrics (internal users only)
     * Get system usage metrics
     */
    async getSystemUsageMetricsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UsageMetrics>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/admin/activities/usage`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UsageMetricsFromJSON(jsonValue));
    }

    /**
     * Get platform-wide usage metrics (internal users only)
     * Get system usage metrics
     */
    async getSystemUsageMetrics(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UsageMetrics> {
        const response = await this.getSystemUsageMetricsRaw(initOverrides);
        return await response.value();
    }

}
