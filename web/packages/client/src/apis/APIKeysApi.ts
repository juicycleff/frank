/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  APIKey,
  APIKeyExportRequest,
  APIKeyExportResponse,
  APIKeyStats,
  APIKeyUsage,
  BulkAPIKeyOperationRequest,
  BulkAPIKeyOperationResponse,
  CheckPermissionsRequest,
  CheckPermissionsResponse,
  CreateAPIKeyRequest,
  CreateAPIKeyResponse,
  EmptyOutputBody,
  GetGlobalActivityStats400Response,
  PaginatedOutputAPIKeyActivity,
  PaginatedOutputAPIKeySummary,
  RotateAPIKeyRequest,
  RotateAPIKeyResponse,
  UpdateAPIKeyRequest,
  ValidateAPIKeyRequest,
  ValidateAPIKeyResponse,
} from '../models/index';
import {
    APIKeyFromJSON,
    APIKeyToJSON,
    APIKeyExportRequestFromJSON,
    APIKeyExportRequestToJSON,
    APIKeyExportResponseFromJSON,
    APIKeyExportResponseToJSON,
    APIKeyStatsFromJSON,
    APIKeyStatsToJSON,
    APIKeyUsageFromJSON,
    APIKeyUsageToJSON,
    BulkAPIKeyOperationRequestFromJSON,
    BulkAPIKeyOperationRequestToJSON,
    BulkAPIKeyOperationResponseFromJSON,
    BulkAPIKeyOperationResponseToJSON,
    CheckPermissionsRequestFromJSON,
    CheckPermissionsRequestToJSON,
    CheckPermissionsResponseFromJSON,
    CheckPermissionsResponseToJSON,
    CreateAPIKeyRequestFromJSON,
    CreateAPIKeyRequestToJSON,
    CreateAPIKeyResponseFromJSON,
    CreateAPIKeyResponseToJSON,
    EmptyOutputBodyFromJSON,
    EmptyOutputBodyToJSON,
    GetGlobalActivityStats400ResponseFromJSON,
    GetGlobalActivityStats400ResponseToJSON,
    PaginatedOutputAPIKeyActivityFromJSON,
    PaginatedOutputAPIKeyActivityToJSON,
    PaginatedOutputAPIKeySummaryFromJSON,
    PaginatedOutputAPIKeySummaryToJSON,
    RotateAPIKeyRequestFromJSON,
    RotateAPIKeyRequestToJSON,
    RotateAPIKeyResponseFromJSON,
    RotateAPIKeyResponseToJSON,
    UpdateAPIKeyRequestFromJSON,
    UpdateAPIKeyRequestToJSON,
    ValidateAPIKeyRequestFromJSON,
    ValidateAPIKeyRequestToJSON,
    ValidateAPIKeyResponseFromJSON,
    ValidateAPIKeyResponseToJSON,
} from '../models/index';

export interface ActivateAPIKeyRequest {
    orgId: string;
    id: string;
}

export interface BulkAPIKeyOperationOperationRequest {
    orgId: string;
    bulkAPIKeyOperationRequest: Omit<BulkAPIKeyOperationRequest, '$schema'>;
}

export interface CheckAPIKeyPermissionsRequest {
    orgId: string;
    id: string;
    checkPermissionsRequest: Omit<CheckPermissionsRequest, '$schema'>;
}

export interface CreateAPIKeyOperationRequest {
    orgId: string;
    createAPIKeyRequest: Omit<CreateAPIKeyRequest, '$schema'>;
}

export interface DeactivateAPIKeyRequest {
    orgId: string;
    id: string;
    reason?: string;
}

export interface DeleteAPIKeyRequest {
    orgId: string;
    id: string;
    reason?: string;
}

export interface ExportAPIKeyDataRequest {
    orgId: string;
    aPIKeyExportRequest: Omit<APIKeyExportRequest, '$schema'>;
}

export interface GetAPIKeyRequest {
    orgId: string;
    id: string;
    includeUsage?: boolean;
    includeUser?: boolean;
    includeOrg?: boolean;
}

export interface GetAPIKeyActivityRequest {
    orgId: string;
    after?: string;
    before?: string;
    first?: number;
    last?: number;
    limit?: number;
    offset?: number;
    fields?: Array<string> | null;
    orderBy?: Array<string> | null;
    page?: number;
    keyId?: string;
    action?: string;
    endpoint?: string;
    method?: string;
    success?: boolean;
    startDate?: Date;
    endDate?: Date;
    ipAddress?: string;
    statusCode?: number;
}

export interface GetAPIKeyStatsRequest {
    orgId: string;
}

export interface GetAPIKeyUsageRequest {
    orgId: string;
    id: string;
}

export interface ListAPIKeysRequest {
    orgId: string;
    after?: string;
    before?: string;
    first?: number;
    last?: number;
    limit?: number;
    offset?: number;
    fields?: Array<string> | null;
    orderBy?: Array<string> | null;
    page?: number;
    organizationId?: string;
    userId?: string;
    type?: string;
    active?: boolean;
    expired?: boolean;
    used?: boolean;
    search?: string;
    permission?: string;
    scope?: Array<string> | null;
}

export interface RotateAPIKeyOperationRequest {
    orgId: string;
    id: string;
    rotateAPIKeyRequest: Omit<RotateAPIKeyRequest, '$schema'>;
}

export interface UpdateAPIKeyOperationRequest {
    orgId: string;
    id: string;
    updateAPIKeyRequest: Omit<UpdateAPIKeyRequest, '$schema'>;
}

export interface ValidateAPIKeyOperationRequest {
    validateAPIKeyRequest: Omit<ValidateAPIKeyRequest, '$schema'>;
}

/**
 * 
 */
export class APIKeysApi extends runtime.BaseAPI {

    /**
     * Activate a deactivated API key
     * Activate API key
     */
    async activateAPIKeyRaw(requestParameters: ActivateAPIKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling activateAPIKey().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling activateAPIKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/api-keys/{id}/activate`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Activate a deactivated API key
     * Activate API key
     */
    async activateAPIKey(requestParameters: ActivateAPIKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmptyOutputBody> {
        const response = await this.activateAPIKeyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Perform bulk operations on multiple API keys
     * Bulk API key operations
     */
    async bulkAPIKeyOperationRaw(requestParameters: BulkAPIKeyOperationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BulkAPIKeyOperationResponse>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling bulkAPIKeyOperation().'
            );
        }

        if (requestParameters['bulkAPIKeyOperationRequest'] == null) {
            throw new runtime.RequiredError(
                'bulkAPIKeyOperationRequest',
                'Required parameter "bulkAPIKeyOperationRequest" was null or undefined when calling bulkAPIKeyOperation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/api-keys/bulk`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BulkAPIKeyOperationRequestToJSON(requestParameters['bulkAPIKeyOperationRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BulkAPIKeyOperationResponseFromJSON(jsonValue));
    }

    /**
     * Perform bulk operations on multiple API keys
     * Bulk API key operations
     */
    async bulkAPIKeyOperation(requestParameters: BulkAPIKeyOperationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BulkAPIKeyOperationResponse> {
        const response = await this.bulkAPIKeyOperationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Check if an API key has specific permissions
     * Check API key permissions
     */
    async checkAPIKeyPermissionsRaw(requestParameters: CheckAPIKeyPermissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CheckPermissionsResponse>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling checkAPIKeyPermissions().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling checkAPIKeyPermissions().'
            );
        }

        if (requestParameters['checkPermissionsRequest'] == null) {
            throw new runtime.RequiredError(
                'checkPermissionsRequest',
                'Required parameter "checkPermissionsRequest" was null or undefined when calling checkAPIKeyPermissions().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/api-keys/{id}/check-permissions`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CheckPermissionsRequestToJSON(requestParameters['checkPermissionsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckPermissionsResponseFromJSON(jsonValue));
    }

    /**
     * Check if an API key has specific permissions
     * Check API key permissions
     */
    async checkAPIKeyPermissions(requestParameters: CheckAPIKeyPermissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CheckPermissionsResponse> {
        const response = await this.checkAPIKeyPermissionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new API key for an organization
     * Create API key
     */
    async createAPIKeyRaw(requestParameters: CreateAPIKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateAPIKeyResponse>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling createAPIKey().'
            );
        }

        if (requestParameters['createAPIKeyRequest'] == null) {
            throw new runtime.RequiredError(
                'createAPIKeyRequest',
                'Required parameter "createAPIKeyRequest" was null or undefined when calling createAPIKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/api-keys`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateAPIKeyRequestToJSON(requestParameters['createAPIKeyRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateAPIKeyResponseFromJSON(jsonValue));
    }

    /**
     * Create a new API key for an organization
     * Create API key
     */
    async createAPIKey(requestParameters: CreateAPIKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateAPIKeyResponse> {
        const response = await this.createAPIKeyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deactivate an active API key
     * Deactivate API key
     */
    async deactivateAPIKeyRaw(requestParameters: DeactivateAPIKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling deactivateAPIKey().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deactivateAPIKey().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['reason'] != null) {
            queryParameters['reason'] = requestParameters['reason'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/api-keys/{id}/deactivate`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Deactivate an active API key
     * Deactivate API key
     */
    async deactivateAPIKey(requestParameters: DeactivateAPIKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmptyOutputBody> {
        const response = await this.deactivateAPIKeyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an API key
     * Delete API key
     */
    async deleteAPIKeyRaw(requestParameters: DeleteAPIKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling deleteAPIKey().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteAPIKey().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['reason'] != null) {
            queryParameters['reason'] = requestParameters['reason'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/api-keys/{id}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Delete an API key
     * Delete API key
     */
    async deleteAPIKey(requestParameters: DeleteAPIKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.deleteAPIKeyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Export API key data and activity logs
     * Export API key data
     */
    async exportAPIKeyDataRaw(requestParameters: ExportAPIKeyDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIKeyExportResponse>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling exportAPIKeyData().'
            );
        }

        if (requestParameters['aPIKeyExportRequest'] == null) {
            throw new runtime.RequiredError(
                'aPIKeyExportRequest',
                'Required parameter "aPIKeyExportRequest" was null or undefined when calling exportAPIKeyData().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/api-keys/export`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIKeyExportRequestToJSON(requestParameters['aPIKeyExportRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIKeyExportResponseFromJSON(jsonValue));
    }

    /**
     * Export API key data and activity logs
     * Export API key data
     */
    async exportAPIKeyData(requestParameters: ExportAPIKeyDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIKeyExportResponse> {
        const response = await this.exportAPIKeyDataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a specific API key by ID
     * Get API key
     */
    async getAPIKeyRaw(requestParameters: GetAPIKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIKey>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling getAPIKey().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getAPIKey().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['includeUsage'] != null) {
            queryParameters['includeUsage'] = requestParameters['includeUsage'];
        }

        if (requestParameters['includeUser'] != null) {
            queryParameters['includeUser'] = requestParameters['includeUser'];
        }

        if (requestParameters['includeOrg'] != null) {
            queryParameters['includeOrg'] = requestParameters['includeOrg'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/api-keys/{id}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIKeyFromJSON(jsonValue));
    }

    /**
     * Get a specific API key by ID
     * Get API key
     */
    async getAPIKey(requestParameters: GetAPIKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIKey> {
        const response = await this.getAPIKeyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get activity logs for API keys
     * Get API key activity
     */
    async getAPIKeyActivityRaw(requestParameters: GetAPIKeyActivityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedOutputAPIKeyActivity>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling getAPIKeyActivity().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['after'] != null) {
            queryParameters['after'] = requestParameters['after'];
        }

        if (requestParameters['before'] != null) {
            queryParameters['before'] = requestParameters['before'];
        }

        if (requestParameters['first'] != null) {
            queryParameters['first'] = requestParameters['first'];
        }

        if (requestParameters['last'] != null) {
            queryParameters['last'] = requestParameters['last'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['orderBy'] = requestParameters['orderBy']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['keyId'] != null) {
            queryParameters['keyId'] = requestParameters['keyId'];
        }

        if (requestParameters['action'] != null) {
            queryParameters['action'] = requestParameters['action'];
        }

        if (requestParameters['endpoint'] != null) {
            queryParameters['endpoint'] = requestParameters['endpoint'];
        }

        if (requestParameters['method'] != null) {
            queryParameters['method'] = requestParameters['method'];
        }

        if (requestParameters['success'] != null) {
            queryParameters['success'] = requestParameters['success'];
        }

        if (requestParameters['startDate'] != null) {
            queryParameters['startDate'] = (requestParameters['startDate'] as any).toISOString();
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['endDate'] = (requestParameters['endDate'] as any).toISOString();
        }

        if (requestParameters['ipAddress'] != null) {
            queryParameters['ipAddress'] = requestParameters['ipAddress'];
        }

        if (requestParameters['statusCode'] != null) {
            queryParameters['statusCode'] = requestParameters['statusCode'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/api-keys/activity`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedOutputAPIKeyActivityFromJSON(jsonValue));
    }

    /**
     * Get activity logs for API keys
     * Get API key activity
     */
    async getAPIKeyActivity(requestParameters: GetAPIKeyActivityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedOutputAPIKeyActivity> {
        const response = await this.getAPIKeyActivityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get statistical information about API keys for an organization
     * Get API key statistics
     */
    async getAPIKeyStatsRaw(requestParameters: GetAPIKeyStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIKeyStats>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling getAPIKeyStats().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/api-keys/stats`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIKeyStatsFromJSON(jsonValue));
    }

    /**
     * Get statistical information about API keys for an organization
     * Get API key statistics
     */
    async getAPIKeyStats(requestParameters: GetAPIKeyStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIKeyStats> {
        const response = await this.getAPIKeyStatsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get usage statistics for a specific API key
     * Get API key usage
     */
    async getAPIKeyUsageRaw(requestParameters: GetAPIKeyUsageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIKeyUsage>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling getAPIKeyUsage().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getAPIKeyUsage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/api-keys/{id}/usage`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIKeyUsageFromJSON(jsonValue));
    }

    /**
     * Get usage statistics for a specific API key
     * Get API key usage
     */
    async getAPIKeyUsage(requestParameters: GetAPIKeyUsageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIKeyUsage> {
        const response = await this.getAPIKeyUsageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List API keys for an organization with filtering and pagination
     * List API keys
     */
    async listAPIKeysRaw(requestParameters: ListAPIKeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedOutputAPIKeySummary>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling listAPIKeys().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['after'] != null) {
            queryParameters['after'] = requestParameters['after'];
        }

        if (requestParameters['before'] != null) {
            queryParameters['before'] = requestParameters['before'];
        }

        if (requestParameters['first'] != null) {
            queryParameters['first'] = requestParameters['first'];
        }

        if (requestParameters['last'] != null) {
            queryParameters['last'] = requestParameters['last'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['orderBy'] = requestParameters['orderBy']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['organizationId'] != null) {
            queryParameters['organizationId'] = requestParameters['organizationId'];
        }

        if (requestParameters['userId'] != null) {
            queryParameters['userId'] = requestParameters['userId'];
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        if (requestParameters['active'] != null) {
            queryParameters['active'] = requestParameters['active'];
        }

        if (requestParameters['expired'] != null) {
            queryParameters['expired'] = requestParameters['expired'];
        }

        if (requestParameters['used'] != null) {
            queryParameters['used'] = requestParameters['used'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['permission'] != null) {
            queryParameters['permission'] = requestParameters['permission'];
        }

        if (requestParameters['scope'] != null) {
            queryParameters['scope'] = requestParameters['scope']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/api-keys`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedOutputAPIKeySummaryFromJSON(jsonValue));
    }

    /**
     * List API keys for an organization with filtering and pagination
     * List API keys
     */
    async listAPIKeys(requestParameters: ListAPIKeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedOutputAPIKeySummary> {
        const response = await this.listAPIKeysRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Rotate an API key to generate a new key value
     * Rotate API key
     */
    async rotateAPIKeyRaw(requestParameters: RotateAPIKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RotateAPIKeyResponse>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling rotateAPIKey().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling rotateAPIKey().'
            );
        }

        if (requestParameters['rotateAPIKeyRequest'] == null) {
            throw new runtime.RequiredError(
                'rotateAPIKeyRequest',
                'Required parameter "rotateAPIKeyRequest" was null or undefined when calling rotateAPIKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/api-keys/{id}/rotate`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RotateAPIKeyRequestToJSON(requestParameters['rotateAPIKeyRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RotateAPIKeyResponseFromJSON(jsonValue));
    }

    /**
     * Rotate an API key to generate a new key value
     * Rotate API key
     */
    async rotateAPIKey(requestParameters: RotateAPIKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RotateAPIKeyResponse> {
        const response = await this.rotateAPIKeyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing API key
     * Update API key
     */
    async updateAPIKeyRaw(requestParameters: UpdateAPIKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIKey>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling updateAPIKey().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateAPIKey().'
            );
        }

        if (requestParameters['updateAPIKeyRequest'] == null) {
            throw new runtime.RequiredError(
                'updateAPIKeyRequest',
                'Required parameter "updateAPIKeyRequest" was null or undefined when calling updateAPIKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/api-keys/{id}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters['orgId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateAPIKeyRequestToJSON(requestParameters['updateAPIKeyRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIKeyFromJSON(jsonValue));
    }

    /**
     * Update an existing API key
     * Update API key
     */
    async updateAPIKey(requestParameters: UpdateAPIKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIKey> {
        const response = await this.updateAPIKeyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Validate an API key and return its details
     * Validate API key
     */
    async validateAPIKeyRaw(requestParameters: ValidateAPIKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ValidateAPIKeyResponse>> {
        if (requestParameters['validateAPIKeyRequest'] == null) {
            throw new runtime.RequiredError(
                'validateAPIKeyRequest',
                'Required parameter "validateAPIKeyRequest" was null or undefined when calling validateAPIKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/api-keys/validate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ValidateAPIKeyRequestToJSON(requestParameters['validateAPIKeyRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ValidateAPIKeyResponseFromJSON(jsonValue));
    }

    /**
     * Validate an API key and return its details
     * Validate API key
     */
    async validateAPIKey(requestParameters: ValidateAPIKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ValidateAPIKeyResponse> {
        const response = await this.validateAPIKeyRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
