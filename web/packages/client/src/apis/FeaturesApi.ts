/* tslint:disable */
/* eslint-disable */
/**
 * My Project
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    EmptyOutputBody,
    EmptyOutputBodyFromJSON,
    EmptyOutputBodyToJSON,
    InlineResponse400,
    InlineResponse400FromJSON,
    InlineResponse400ToJSON,
} from '../models';

export interface DisableOrganizationFeatureRequest {
    id: string;
    feature: string;
}

export interface EnableOrganizationFeatureRequest {
    id: string;
    feature: string;
}

export interface ListOrganizationFeaturesRequest {
    id: string;
}

/**
 * FeaturesApi - interface
 * 
 * @export
 * @interface FeaturesApiInterface
 */
export interface FeaturesApiInterface {
    /**
     * Disable a specific feature for the organization
     * @summary Disable organization feature
     * @param {string} id Organization ID
     * @param {string} feature Feature name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApiInterface
     */
    disableOrganizationFeatureRaw(requestParameters: DisableOrganizationFeatureRequest): Promise<runtime.ApiResponse<EmptyOutputBody>>;

    /**
     * Disable a specific feature for the organization
     * Disable organization feature
     */
    disableOrganizationFeature(requestParameters: DisableOrganizationFeatureRequest): Promise<EmptyOutputBody>;

    /**
     * Enable a specific feature for the organization
     * @summary Enable organization feature
     * @param {string} id Organization ID
     * @param {string} feature Feature name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApiInterface
     */
    enableOrganizationFeatureRaw(requestParameters: EnableOrganizationFeatureRequest): Promise<runtime.ApiResponse<EmptyOutputBody>>;

    /**
     * Enable a specific feature for the organization
     * Enable organization feature
     */
    enableOrganizationFeature(requestParameters: EnableOrganizationFeatureRequest): Promise<EmptyOutputBody>;

    /**
     * List enabled and available features for the organization
     * @summary List organization features
     * @param {string} id Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApiInterface
     */
    listOrganizationFeaturesRaw(requestParameters: ListOrganizationFeaturesRequest): Promise<runtime.ApiResponse<EmptyOutputBody>>;

    /**
     * List enabled and available features for the organization
     * List organization features
     */
    listOrganizationFeatures(requestParameters: ListOrganizationFeaturesRequest): Promise<EmptyOutputBody>;

}

/**
 * 
 */
export class FeaturesApi extends runtime.BaseAPI implements FeaturesApiInterface {

    /**
     * Disable a specific feature for the organization
     * Disable organization feature
     */
    async disableOrganizationFeatureRaw(requestParameters: DisableOrganizationFeatureRequest): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling disableOrganizationFeature.');
        }

        if (requestParameters.feature === null || requestParameters.feature === undefined) {
            throw new runtime.RequiredError('feature','Required parameter requestParameters.feature was null or undefined when calling disableOrganizationFeature.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{id}/features/{feature}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"feature"}}`, encodeURIComponent(String(requestParameters.feature))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Disable a specific feature for the organization
     * Disable organization feature
     */
    async disableOrganizationFeature(requestParameters: DisableOrganizationFeatureRequest): Promise<EmptyOutputBody> {
        const response = await this.disableOrganizationFeatureRaw(requestParameters);
        return await response.value();
    }

    /**
     * Enable a specific feature for the organization
     * Enable organization feature
     */
    async enableOrganizationFeatureRaw(requestParameters: EnableOrganizationFeatureRequest): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling enableOrganizationFeature.');
        }

        if (requestParameters.feature === null || requestParameters.feature === undefined) {
            throw new runtime.RequiredError('feature','Required parameter requestParameters.feature was null or undefined when calling enableOrganizationFeature.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{id}/features/{feature}/enable`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"feature"}}`, encodeURIComponent(String(requestParameters.feature))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Enable a specific feature for the organization
     * Enable organization feature
     */
    async enableOrganizationFeature(requestParameters: EnableOrganizationFeatureRequest): Promise<EmptyOutputBody> {
        const response = await this.enableOrganizationFeatureRaw(requestParameters);
        return await response.value();
    }

    /**
     * List enabled and available features for the organization
     * List organization features
     */
    async listOrganizationFeaturesRaw(requestParameters: ListOrganizationFeaturesRequest): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling listOrganizationFeatures.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{id}/features`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * List enabled and available features for the organization
     * List organization features
     */
    async listOrganizationFeatures(requestParameters: ListOrganizationFeaturesRequest): Promise<EmptyOutputBody> {
        const response = await this.listOrganizationFeaturesRaw(requestParameters);
        return await response.value();
    }

}
