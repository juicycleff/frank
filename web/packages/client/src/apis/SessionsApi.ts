/* tslint:disable */
/* eslint-disable */
/**
 * My Project
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    EmptyOutputBody,
    EmptyOutputBodyFromJSON,
    EmptyOutputBodyToJSON,
    InlineResponse400,
    InlineResponse400FromJSON,
    InlineResponse400ToJSON,
} from '../models';

export interface GetUserSessionsRequest {
    orgId: string;
    id: string;
}

export interface RevokeAllUserSessionsRequest {
    orgId: string;
    id: string;
}

export interface RevokeSessionRequest {
    id: string;
}

export interface RevokeUserSessionRequest {
    orgId: string;
    id: string;
    sessionId: string;
}

/**
 * SessionsApi - interface
 * 
 * @export
 * @interface SessionsApiInterface
 */
export interface SessionsApiInterface {
    /**
     * Get active sessions for a user
     * @summary Get user sessions
     * @param {string} orgId 
     * @param {string} id User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionsApiInterface
     */
    getUserSessionsRaw(requestParameters: GetUserSessionsRequest): Promise<runtime.ApiResponse<EmptyOutputBody>>;

    /**
     * Get active sessions for a user
     * Get user sessions
     */
    getUserSessions(requestParameters: GetUserSessionsRequest): Promise<EmptyOutputBody>;

    /**
     * List all active sessions for the current user
     * @summary List user sessions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionsApiInterface
     */
    listSessionsRaw(): Promise<runtime.ApiResponse<EmptyOutputBody>>;

    /**
     * List all active sessions for the current user
     * List user sessions
     */
    listSessions(): Promise<EmptyOutputBody>;

    /**
     * Revoke all sessions for the current user
     * @summary Revoke all sessions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionsApiInterface
     */
    revokeAllSessionsRaw(): Promise<runtime.ApiResponse<EmptyOutputBody>>;

    /**
     * Revoke all sessions for the current user
     * Revoke all sessions
     */
    revokeAllSessions(): Promise<EmptyOutputBody>;

    /**
     * Revoke all sessions for a user
     * @summary Revoke all user sessions
     * @param {string} orgId 
     * @param {string} id User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionsApiInterface
     */
    revokeAllUserSessionsRaw(requestParameters: RevokeAllUserSessionsRequest): Promise<runtime.ApiResponse<EmptyOutputBody>>;

    /**
     * Revoke all sessions for a user
     * Revoke all user sessions
     */
    revokeAllUserSessions(requestParameters: RevokeAllUserSessionsRequest): Promise<EmptyOutputBody>;

    /**
     * Revoke a specific session
     * @summary Revoke session
     * @param {string} id Session ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionsApiInterface
     */
    revokeSessionRaw(requestParameters: RevokeSessionRequest): Promise<runtime.ApiResponse<EmptyOutputBody>>;

    /**
     * Revoke a specific session
     * Revoke session
     */
    revokeSession(requestParameters: RevokeSessionRequest): Promise<EmptyOutputBody>;

    /**
     * Revoke a specific session for a user
     * @summary Revoke user session
     * @param {string} orgId 
     * @param {string} id User ID
     * @param {string} sessionId Session ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionsApiInterface
     */
    revokeUserSessionRaw(requestParameters: RevokeUserSessionRequest): Promise<runtime.ApiResponse<EmptyOutputBody>>;

    /**
     * Revoke a specific session for a user
     * Revoke user session
     */
    revokeUserSession(requestParameters: RevokeUserSessionRequest): Promise<EmptyOutputBody>;

}

/**
 * 
 */
export class SessionsApi extends runtime.BaseAPI implements SessionsApiInterface {

    /**
     * Get active sessions for a user
     * Get user sessions
     */
    async getUserSessionsRaw(requestParameters: GetUserSessionsRequest): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getUserSessions.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getUserSessions.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/users/{id}/sessions`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Get active sessions for a user
     * Get user sessions
     */
    async getUserSessions(requestParameters: GetUserSessionsRequest): Promise<EmptyOutputBody> {
        const response = await this.getUserSessionsRaw(requestParameters);
        return await response.value();
    }

    /**
     * List all active sessions for the current user
     * List user sessions
     */
    async listSessionsRaw(): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/auth/sessions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * List all active sessions for the current user
     * List user sessions
     */
    async listSessions(): Promise<EmptyOutputBody> {
        const response = await this.listSessionsRaw();
        return await response.value();
    }

    /**
     * Revoke all sessions for the current user
     * Revoke all sessions
     */
    async revokeAllSessionsRaw(): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/auth/sessions`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Revoke all sessions for the current user
     * Revoke all sessions
     */
    async revokeAllSessions(): Promise<EmptyOutputBody> {
        const response = await this.revokeAllSessionsRaw();
        return await response.value();
    }

    /**
     * Revoke all sessions for a user
     * Revoke all user sessions
     */
    async revokeAllUserSessionsRaw(requestParameters: RevokeAllUserSessionsRequest): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling revokeAllUserSessions.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling revokeAllUserSessions.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/users/{id}/sessions`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Revoke all sessions for a user
     * Revoke all user sessions
     */
    async revokeAllUserSessions(requestParameters: RevokeAllUserSessionsRequest): Promise<EmptyOutputBody> {
        const response = await this.revokeAllUserSessionsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Revoke a specific session
     * Revoke session
     */
    async revokeSessionRaw(requestParameters: RevokeSessionRequest): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling revokeSession.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/auth/sessions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Revoke a specific session
     * Revoke session
     */
    async revokeSession(requestParameters: RevokeSessionRequest): Promise<EmptyOutputBody> {
        const response = await this.revokeSessionRaw(requestParameters);
        return await response.value();
    }

    /**
     * Revoke a specific session for a user
     * Revoke user session
     */
    async revokeUserSessionRaw(requestParameters: RevokeUserSessionRequest): Promise<runtime.ApiResponse<EmptyOutputBody>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling revokeUserSession.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling revokeUserSession.');
        }

        if (requestParameters.sessionId === null || requestParameters.sessionId === undefined) {
            throw new runtime.RequiredError('sessionId','Required parameter requestParameters.sessionId was null or undefined when calling revokeUserSession.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{orgId}/users/{id}/sessions/{sessionId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"sessionId"}}`, encodeURIComponent(String(requestParameters.sessionId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyOutputBodyFromJSON(jsonValue));
    }

    /**
     * Revoke a specific session for a user
     * Revoke user session
     */
    async revokeUserSession(requestParameters: RevokeUserSessionRequest): Promise<EmptyOutputBody> {
        const response = await this.revokeUserSessionRaw(requestParameters);
        return await response.value();
    }

}
