/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { RoleType } from './RoleType';
import {
    RoleTypeFromJSON,
    RoleTypeFromJSONTyped,
    RoleTypeToJSON,
    RoleTypeToJSONTyped,
} from './RoleType';
import type { UserType } from './UserType';
import {
    UserTypeFromJSON,
    UserTypeFromJSONTyped,
    UserTypeToJSON,
    UserTypeToJSONTyped,
} from './UserType';

/**
 * 
 * @export
 * @interface CreateRoleRequest
 */
export interface CreateRoleRequest {
    [key: string]: any | any;
    /**
     * A URL to the JSON Schema for this object.
     * @type {string}
     * @memberof CreateRoleRequest
     */
    readonly $schema?: string;
    /**
     * Applicable user types
     * @type {Array<UserType>}
     * @memberof CreateRoleRequest
     */
    applicableUserTypes: Array<UserType>;
    /**
     * Application ID
     * @type {string}
     * @memberof CreateRoleRequest
     */
    applicationId?: string;
    /**
     * Role color
     * @type {string}
     * @memberof CreateRoleRequest
     */
    color?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateRoleRequest
     */
    createdBy?: string;
    /**
     * Role description
     * @type {string}
     * @memberof CreateRoleRequest
     */
    description?: string;
    /**
     * Display name
     * @type {string}
     * @memberof CreateRoleRequest
     */
    displayName?: string;
    /**
     * Set as default role
     * @type {boolean}
     * @memberof CreateRoleRequest
     */
    isDefault: boolean;
    /**
     * Role name
     * @type {string}
     * @memberof CreateRoleRequest
     */
    name: string;
    /**
     * Organization ID
     * @type {string}
     * @memberof CreateRoleRequest
     */
    organizationId?: string;
    /**
     * Parent role ID
     * @type {string}
     * @memberof CreateRoleRequest
     */
    parentId?: string;
    /**
     * Initial permissions
     * @type {Array<string>}
     * @memberof CreateRoleRequest
     */
    permissionIds?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateRoleRequest
     */
    permissions?: Array<string> | null;
    /**
     * Role priority
     * @type {number}
     * @memberof CreateRoleRequest
     */
    priority: number;
    /**
     * Role type
     * @type {RoleType}
     * @memberof CreateRoleRequest
     */
    roleType: RoleType;
}



/**
 * Check if a given object implements the CreateRoleRequest interface.
 */
export function instanceOfCreateRoleRequest(value: object): value is CreateRoleRequest {
    if (!('applicableUserTypes' in value) || value['applicableUserTypes'] === undefined) return false;
    if (!('isDefault' in value) || value['isDefault'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('priority' in value) || value['priority'] === undefined) return false;
    if (!('roleType' in value) || value['roleType'] === undefined) return false;
    return true;
}

export function CreateRoleRequestFromJSON(json: any): CreateRoleRequest {
    return CreateRoleRequestFromJSONTyped(json, false);
}

export function CreateRoleRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateRoleRequest {
    if (json == null) {
        return json;
    }
    return {
        
            ...json,
        '$schema': json['$schema'] == null ? undefined : json['$schema'],
        'applicableUserTypes': ((json['applicableUserTypes'] as Array<any>).map(UserTypeFromJSON)),
        'applicationId': json['applicationId'] == null ? undefined : json['applicationId'],
        'color': json['color'] == null ? undefined : json['color'],
        'createdBy': json['createdBy'] == null ? undefined : json['createdBy'],
        'description': json['description'] == null ? undefined : json['description'],
        'displayName': json['displayName'] == null ? undefined : json['displayName'],
        'isDefault': json['isDefault'],
        'name': json['name'],
        'organizationId': json['organizationId'] == null ? undefined : json['organizationId'],
        'parentId': json['parentId'] == null ? undefined : json['parentId'],
        'permissionIds': json['permissionIds'] == null ? undefined : json['permissionIds'],
        'permissions': json['permissions'] == null ? undefined : json['permissions'],
        'priority': json['priority'],
        'roleType': RoleTypeFromJSON(json['roleType']),
    };
}

export function CreateRoleRequestToJSON(json: any): CreateRoleRequest {
    return CreateRoleRequestToJSONTyped(json, false);
}

export function CreateRoleRequestToJSONTyped(value?: Omit<CreateRoleRequest, '$schema'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
            ...value,
        'applicableUserTypes': ((value['applicableUserTypes'] as Array<any>).map(UserTypeToJSON)),
        'applicationId': value['applicationId'],
        'color': value['color'],
        'createdBy': value['createdBy'],
        'description': value['description'],
        'displayName': value['displayName'],
        'isDefault': value['isDefault'],
        'name': value['name'],
        'organizationId': value['organizationId'],
        'parentId': value['parentId'],
        'permissionIds': value['permissionIds'],
        'permissions': value['permissions'],
        'priority': value['priority'],
        'roleType': RoleTypeToJSON(value['roleType']),
    };
}

