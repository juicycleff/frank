/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { SecuritySummary } from './SecuritySummary';
import {
    SecuritySummaryFromJSON,
    SecuritySummaryFromJSONTyped,
    SecuritySummaryToJSON,
    SecuritySummaryToJSONTyped,
} from './SecuritySummary';
import type { Organization } from './Organization';
import {
    OrganizationFromJSON,
    OrganizationFromJSONTyped,
    OrganizationToJSON,
    OrganizationToJSONTyped,
} from './Organization';
import type { OrgStats } from './OrgStats';
import {
    OrgStatsFromJSON,
    OrgStatsFromJSONTyped,
    OrgStatsToJSON,
    OrgStatsToJSONTyped,
} from './OrgStats';
import type { FeatureSummary } from './FeatureSummary';
import {
    FeatureSummaryFromJSON,
    FeatureSummaryFromJSONTyped,
    FeatureSummaryToJSON,
    FeatureSummaryToJSONTyped,
} from './FeatureSummary';
import type { OrganizationUsage } from './OrganizationUsage';
import {
    OrganizationUsageFromJSON,
    OrganizationUsageFromJSONTyped,
    OrganizationUsageToJSON,
    OrganizationUsageToJSONTyped,
} from './OrganizationUsage';
import type { ActivityRecord } from './ActivityRecord';
import {
    ActivityRecordFromJSON,
    ActivityRecordFromJSONTyped,
    ActivityRecordToJSON,
    ActivityRecordToJSONTyped,
} from './ActivityRecord';
import type { UserSummary } from './UserSummary';
import {
    UserSummaryFromJSON,
    UserSummaryFromJSONTyped,
    UserSummaryToJSON,
    UserSummaryToJSONTyped,
} from './UserSummary';
import type { OrganizationBilling } from './OrganizationBilling';
import {
    OrganizationBillingFromJSON,
    OrganizationBillingFromJSONTyped,
    OrganizationBillingToJSON,
    OrganizationBillingToJSONTyped,
} from './OrganizationBilling';

/**
 * 
 * @export
 * @interface PlatformOrganizationDetails
 */
export interface PlatformOrganizationDetails {
    /**
     * A URL to the JSON Schema for this object.
     * @type {string}
     * @memberof PlatformOrganizationDetails
     */
    readonly $schema?: string;
    /**
     * 
     * @type {OrganizationBilling}
     * @memberof PlatformOrganizationDetails
     */
    billing?: OrganizationBilling;
    /**
     * 
     * @type {Array<FeatureSummary>}
     * @memberof PlatformOrganizationDetails
     */
    enabledFeatures?: Array<FeatureSummary> | null;
    /**
     * 
     * @type {Array<UserSummary>}
     * @memberof PlatformOrganizationDetails
     */
    members?: Array<UserSummary> | null;
    /**
     * 
     * @type {Organization}
     * @memberof PlatformOrganizationDetails
     */
    organization: Organization;
    /**
     * 
     * @type {Array<ActivityRecord>}
     * @memberof PlatformOrganizationDetails
     */
    recentActivity?: Array<ActivityRecord> | null;
    /**
     * 
     * @type {SecuritySummary}
     * @memberof PlatformOrganizationDetails
     */
    security?: SecuritySummary;
    /**
     * 
     * @type {OrgStats}
     * @memberof PlatformOrganizationDetails
     */
    stats?: OrgStats;
    /**
     * 
     * @type {OrganizationUsage}
     * @memberof PlatformOrganizationDetails
     */
    usage?: OrganizationUsage;
}

/**
 * Check if a given object implements the PlatformOrganizationDetails interface.
 */
export function instanceOfPlatformOrganizationDetails(value: object): value is PlatformOrganizationDetails {
    if (!('organization' in value) || value['organization'] === undefined) return false;
    return true;
}

export function PlatformOrganizationDetailsFromJSON(json: any): PlatformOrganizationDetails {
    return PlatformOrganizationDetailsFromJSONTyped(json, false);
}

export function PlatformOrganizationDetailsFromJSONTyped(json: any, ignoreDiscriminator: boolean): PlatformOrganizationDetails {
    if (json == null) {
        return json;
    }
    return {
        
        '$schema': json['$schema'] == null ? undefined : json['$schema'],
        'billing': json['billing'] == null ? undefined : OrganizationBillingFromJSON(json['billing']),
        'enabledFeatures': json['enabledFeatures'] == null ? undefined : ((json['enabledFeatures'] as Array<any>).map(FeatureSummaryFromJSON)),
        'members': json['members'] == null ? undefined : ((json['members'] as Array<any>).map(UserSummaryFromJSON)),
        'organization': OrganizationFromJSON(json['organization']),
        'recentActivity': json['recentActivity'] == null ? undefined : ((json['recentActivity'] as Array<any>).map(ActivityRecordFromJSON)),
        'security': json['security'] == null ? undefined : SecuritySummaryFromJSON(json['security']),
        'stats': json['stats'] == null ? undefined : OrgStatsFromJSON(json['stats']),
        'usage': json['usage'] == null ? undefined : OrganizationUsageFromJSON(json['usage']),
    };
}

export function PlatformOrganizationDetailsToJSON(json: any): PlatformOrganizationDetails {
    return PlatformOrganizationDetailsToJSONTyped(json, false);
}

export function PlatformOrganizationDetailsToJSONTyped(value?: Omit<PlatformOrganizationDetails, '$schema'> | null, ignoreDiscriminator = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'billing': OrganizationBillingToJSON(value['billing']),
        'enabledFeatures': value['enabledFeatures'] == null ? undefined : ((value['enabledFeatures'] as Array<any>).map(FeatureSummaryToJSON)),
        'members': value['members'] == null ? undefined : ((value['members'] as Array<any>).map(UserSummaryToJSON)),
        'organization': OrganizationToJSON(value['organization']),
        'recentActivity': value['recentActivity'] == null ? undefined : ((value['recentActivity'] as Array<any>).map(ActivityRecordToJSON)),
        'security': SecuritySummaryToJSON(value['security']),
        'stats': OrgStatsToJSON(value['stats']),
        'usage': OrganizationUsageToJSON(value['usage']),
    };
}

