/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface PaymentRecord
 */
export interface PaymentRecord {
    /**
     * 
     * @type {number}
     * @memberof PaymentRecord
     */
    amount: number;
    /**
     * 
     * @type {string}
     * @memberof PaymentRecord
     */
    currency: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentRecord
     */
    failureReason?: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentRecord
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentRecord
     */
    method: string;
    /**
     * 
     * @type {Date}
     * @memberof PaymentRecord
     */
    processedAt: Date;
    /**
     * 
     * @type {number}
     * @memberof PaymentRecord
     */
    refundAmount?: number;
    /**
     * 
     * @type {Date}
     * @memberof PaymentRecord
     */
    refundedAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof PaymentRecord
     */
    status: string;
}

/**
 * Check if a given object implements the PaymentRecord interface.
 */
export function instanceOfPaymentRecord(value: object): value is PaymentRecord {
    if (!('amount' in value) || value['amount'] === undefined) return false;
    if (!('currency' in value) || value['currency'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('method' in value) || value['method'] === undefined) return false;
    if (!('processedAt' in value) || value['processedAt'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    return true;
}

export function PaymentRecordFromJSON(json: any): PaymentRecord {
    return PaymentRecordFromJSONTyped(json, false);
}

export function PaymentRecordFromJSONTyped(json: any, ignoreDiscriminator: boolean): PaymentRecord {
    if (json == null) {
        return json;
    }
    return {
        
        'amount': json['amount'],
        'currency': json['currency'],
        'failureReason': json['failure_reason'] == null ? undefined : json['failure_reason'],
        'id': json['id'],
        'method': json['method'],
        'processedAt': (new Date(json['processed_at'])),
        'refundAmount': json['refund_amount'] == null ? undefined : json['refund_amount'],
        'refundedAt': json['refunded_at'] == null ? undefined : (new Date(json['refunded_at'])),
        'status': json['status'],
    };
}

export function PaymentRecordToJSON(json: any): PaymentRecord {
    return PaymentRecordToJSONTyped(json, false);
}

export function PaymentRecordToJSONTyped(value?: PaymentRecord | null, ignoreDiscriminator = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'amount': value['amount'],
        'currency': value['currency'],
        'failure_reason': value['failureReason'],
        'id': value['id'],
        'method': value['method'],
        'processed_at': ((value['processedAt']).toISOString()),
        'refund_amount': value['refundAmount'],
        'refunded_at': value['refundedAt'] == null ? undefined : ((value['refundedAt']).toISOString()),
        'status': value['status'],
    };
}

