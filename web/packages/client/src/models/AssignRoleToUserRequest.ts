/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ContextType } from './ContextType';
import {
    ContextTypeFromJSON,
    ContextTypeFromJSONTyped,
    ContextTypeToJSON,
    ContextTypeToJSONTyped,
} from './ContextType';

/**
 * 
 * @export
 * @interface AssignRoleToUserRequest
 */
export interface AssignRoleToUserRequest {
    [key: string]: any | any;
    /**
     * A URL to the JSON Schema for this object.
     * @type {string}
     * @memberof AssignRoleToUserRequest
     */
    readonly $schema?: string;
    /**
     * Assignment conditions
     * @type {object}
     * @memberof AssignRoleToUserRequest
     */
    conditions?: object;
    /**
     * Context ID
     * @type {string}
     * @memberof AssignRoleToUserRequest
     */
    contextId?: string;
    /**
     * Assignment context
     * @type {ContextType}
     * @memberof AssignRoleToUserRequest
     */
    contextType: ContextType;
    /**
     * Assignment expiration
     * @type {Date}
     * @memberof AssignRoleToUserRequest
     */
    expiresAt?: Date;
    /**
     * Role ID
     * @type {string}
     * @memberof AssignRoleToUserRequest
     */
    roleId: string;
    /**
     * User ID
     * @type {string}
     * @memberof AssignRoleToUserRequest
     */
    userId: string;
}



/**
 * Check if a given object implements the AssignRoleToUserRequest interface.
 */
export function instanceOfAssignRoleToUserRequest(value: object): value is AssignRoleToUserRequest {
    if (!('contextType' in value) || value['contextType'] === undefined) return false;
    if (!('roleId' in value) || value['roleId'] === undefined) return false;
    if (!('userId' in value) || value['userId'] === undefined) return false;
    return true;
}

export function AssignRoleToUserRequestFromJSON(json: any): AssignRoleToUserRequest {
    return AssignRoleToUserRequestFromJSONTyped(json, false);
}

export function AssignRoleToUserRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): AssignRoleToUserRequest {
    if (json == null) {
        return json;
    }
    return {
        
            ...json,
        '$schema': json['$schema'] == null ? undefined : json['$schema'],
        'conditions': json['conditions'] == null ? undefined : json['conditions'],
        'contextId': json['contextId'] == null ? undefined : json['contextId'],
        'contextType': ContextTypeFromJSON(json['contextType']),
        'expiresAt': json['expiresAt'] == null ? undefined : (new Date(json['expiresAt'])),
        'roleId': json['roleId'],
        'userId': json['userId'],
    };
}

export function AssignRoleToUserRequestToJSON(json: any): AssignRoleToUserRequest {
    return AssignRoleToUserRequestToJSONTyped(json, false);
}

export function AssignRoleToUserRequestToJSONTyped(value?: Omit<AssignRoleToUserRequest, '$schema'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
            ...value,
        'conditions': value['conditions'],
        'contextId': value['contextId'],
        'contextType': ContextTypeToJSON(value['contextType']),
        'expiresAt': value['expiresAt'] == null ? undefined : ((value['expiresAt']).toISOString()),
        'roleId': value['roleId'],
        'userId': value['userId'],
    };
}

