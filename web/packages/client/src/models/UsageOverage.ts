/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface UsageOverage
 */
export interface UsageOverage {
    /**
     * 
     * @type {number}
     * @memberof UsageOverage
     */
    charge: number;
    /**
     * 
     * @type {number}
     * @memberof UsageOverage
     */
    limit: number;
    /**
     * 
     * @type {number}
     * @memberof UsageOverage
     */
    overage: number;
    /**
     * 
     * @type {string}
     * @memberof UsageOverage
     */
    resource: string;
    /**
     * 
     * @type {number}
     * @memberof UsageOverage
     */
    used: number;
}

/**
 * Check if a given object implements the UsageOverage interface.
 */
export function instanceOfUsageOverage(value: object): value is UsageOverage {
    if (!('charge' in value) || value['charge'] === undefined) return false;
    if (!('limit' in value) || value['limit'] === undefined) return false;
    if (!('overage' in value) || value['overage'] === undefined) return false;
    if (!('resource' in value) || value['resource'] === undefined) return false;
    if (!('used' in value) || value['used'] === undefined) return false;
    return true;
}

export function UsageOverageFromJSON(json: any): UsageOverage {
    return UsageOverageFromJSONTyped(json, false);
}

export function UsageOverageFromJSONTyped(json: any, ignoreDiscriminator: boolean): UsageOverage {
    if (json == null) {
        return json;
    }
    return {
        
        'charge': json['charge'],
        'limit': json['limit'],
        'overage': json['overage'],
        'resource': json['resource'],
        'used': json['used'],
    };
}

export function UsageOverageToJSON(json: any): UsageOverage {
    return UsageOverageToJSONTyped(json, false);
}

export function UsageOverageToJSONTyped(value?: UsageOverage | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'charge': value['charge'],
        'limit': value['limit'],
        'overage': value['overage'],
        'resource': value['resource'],
        'used': value['used'],
    };
}

