/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Permission } from './Permission';
import {
    PermissionFromJSON,
    PermissionFromJSONTyped,
    PermissionToJSON,
    PermissionToJSONTyped,
} from './Permission';
import type { UserSummary } from './UserSummary';
import {
    UserSummaryFromJSON,
    UserSummaryFromJSONTyped,
    UserSummaryToJSON,
    UserSummaryToJSONTyped,
} from './UserSummary';

/**
 * 
 * @export
 * @interface PermissionAssignment
 */
export interface PermissionAssignment {
    [key: string]: any | any;
    /**
     * Whether assignment is active
     * @type {boolean}
     * @memberof PermissionAssignment
     */
    active: boolean;
    /**
     * Assignment timestamp
     * @type {Date}
     * @memberof PermissionAssignment
     */
    assignedAt: Date;
    /**
     * Who assigned permission
     * @type {string}
     * @memberof PermissionAssignment
     */
    assignedBy?: string;
    /**
     * User who made assignment
     * @type {UserSummary}
     * @memberof PermissionAssignment
     */
    assigner?: UserSummary;
    /**
     * Assignment conditions
     * @type {object}
     * @memberof PermissionAssignment
     */
    conditions?: object;
    /**
     * Context ID
     * @type {string}
     * @memberof PermissionAssignment
     */
    contextId?: string;
    /**
     * Assignment context
     * @type {string}
     * @memberof PermissionAssignment
     */
    contextType: string;
    /**
     * 
     * @type {Date}
     * @memberof PermissionAssignment
     */
    createdAt: Date;
    /**
     * Assignment expiration
     * @type {Date}
     * @memberof PermissionAssignment
     */
    expiresAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof PermissionAssignment
     */
    id: string;
    /**
     * Permission information
     * @type {Permission}
     * @memberof PermissionAssignment
     */
    permission?: Permission;
    /**
     * Permission ID
     * @type {string}
     * @memberof PermissionAssignment
     */
    permissionId: string;
    /**
     * Permission type (grant, deny)
     * @type {string}
     * @memberof PermissionAssignment
     */
    permissionType: string;
    /**
     * Reason for assignment
     * @type {string}
     * @memberof PermissionAssignment
     */
    reason?: string;
    /**
     * Specific resource ID
     * @type {string}
     * @memberof PermissionAssignment
     */
    resourceId?: string;
    /**
     * Specific resource type
     * @type {string}
     * @memberof PermissionAssignment
     */
    resourceType?: string;
    /**
     * 
     * @type {Date}
     * @memberof PermissionAssignment
     */
    updatedAt: Date;
    /**
     * User information
     * @type {UserSummary}
     * @memberof PermissionAssignment
     */
    user?: UserSummary;
    /**
     * User ID
     * @type {string}
     * @memberof PermissionAssignment
     */
    userId: string;
}

/**
 * Check if a given object implements the PermissionAssignment interface.
 */
export function instanceOfPermissionAssignment(value: object): value is PermissionAssignment {
    if (!('active' in value) || value['active'] === undefined) return false;
    if (!('assignedAt' in value) || value['assignedAt'] === undefined) return false;
    if (!('contextType' in value) || value['contextType'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('permissionId' in value) || value['permissionId'] === undefined) return false;
    if (!('permissionType' in value) || value['permissionType'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    if (!('userId' in value) || value['userId'] === undefined) return false;
    return true;
}

export function PermissionAssignmentFromJSON(json: any): PermissionAssignment {
    return PermissionAssignmentFromJSONTyped(json, false);
}

export function PermissionAssignmentFromJSONTyped(json: any, ignoreDiscriminator: boolean): PermissionAssignment {
    if (json == null) {
        return json;
    }
    return {
        
            ...json,
        'active': json['active'],
        'assignedAt': (new Date(json['assignedAt'])),
        'assignedBy': json['assignedBy'] == null ? undefined : json['assignedBy'],
        'assigner': json['assigner'] == null ? undefined : UserSummaryFromJSON(json['assigner']),
        'conditions': json['conditions'] == null ? undefined : json['conditions'],
        'contextId': json['contextId'] == null ? undefined : json['contextId'],
        'contextType': json['contextType'],
        'createdAt': (new Date(json['createdAt'])),
        'expiresAt': json['expiresAt'] == null ? undefined : (new Date(json['expiresAt'])),
        'id': json['id'],
        'permission': json['permission'] == null ? undefined : PermissionFromJSON(json['permission']),
        'permissionId': json['permissionId'],
        'permissionType': json['permissionType'],
        'reason': json['reason'] == null ? undefined : json['reason'],
        'resourceId': json['resourceId'] == null ? undefined : json['resourceId'],
        'resourceType': json['resourceType'] == null ? undefined : json['resourceType'],
        'updatedAt': (new Date(json['updatedAt'])),
        'user': json['user'] == null ? undefined : UserSummaryFromJSON(json['user']),
        'userId': json['userId'],
    };
}

export function PermissionAssignmentToJSON(json: any): PermissionAssignment {
    return PermissionAssignmentToJSONTyped(json, false);
}

export function PermissionAssignmentToJSONTyped(value?: PermissionAssignment | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
            ...value,
        'active': value['active'],
        'assignedAt': ((value['assignedAt']).toISOString()),
        'assignedBy': value['assignedBy'],
        'assigner': UserSummaryToJSON(value['assigner']),
        'conditions': value['conditions'],
        'contextId': value['contextId'],
        'contextType': value['contextType'],
        'createdAt': ((value['createdAt']).toISOString()),
        'expiresAt': value['expiresAt'] == null ? undefined : ((value['expiresAt']).toISOString()),
        'id': value['id'],
        'permission': PermissionToJSON(value['permission']),
        'permissionId': value['permissionId'],
        'permissionType': value['permissionType'],
        'reason': value['reason'],
        'resourceId': value['resourceId'],
        'resourceType': value['resourceType'],
        'updatedAt': ((value['updatedAt']).toISOString()),
        'user': UserSummaryToJSON(value['user']),
        'userId': value['userId'],
    };
}

