/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { UserSummary } from './UserSummary';
import {
    UserSummaryFromJSON,
    UserSummaryFromJSONTyped,
    UserSummaryToJSON,
    UserSummaryToJSONTyped,
} from './UserSummary';

/**
 * 
 * @export
 * @interface MFAMethod
 */
export interface MFAMethod {
    [key: string]: any | any;
    /**
     * A URL to the JSON Schema for this object.
     * @type {string}
     * @memberof MFAMethod
     */
    readonly $schema?: string;
    /**
     * Whether method is active
     * @type {boolean}
     * @memberof MFAMethod
     */
    active: boolean;
    /**
     * Backup recovery codes (write-only)
     * @type {Array<string>}
     * @memberof MFAMethod
     */
    backupCodes?: Array<string>;
    /**
     * 
     * @type {Date}
     * @memberof MFAMethod
     */
    createdAt: Date;
    /**
     * Email for email-based MFA
     * @type {string}
     * @memberof MFAMethod
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof MFAMethod
     */
    id: string;
    /**
     * Last usage timestamp
     * @type {Date}
     * @memberof MFAMethod
     */
    lastUsed?: Date;
    /**
     * Additional MFA metadata
     * @type {object}
     * @memberof MFAMethod
     */
    metadata?: object;
    /**
     * MFA method type (totp, sms, email, backup_codes)
     * @type {string}
     * @memberof MFAMethod
     */
    method: string;
    /**
     * User-friendly name
     * @type {string}
     * @memberof MFAMethod
     */
    name?: string;
    /**
     * Phone number for SMS
     * @type {string}
     * @memberof MFAMethod
     */
    phoneNumber?: string;
    /**
     * MFA secret (write-only)
     * @type {string}
     * @memberof MFAMethod
     */
    secret?: string;
    /**
     * 
     * @type {Date}
     * @memberof MFAMethod
     */
    updatedAt: Date;
    /**
     * User information
     * @type {UserSummary}
     * @memberof MFAMethod
     */
    user?: UserSummary;
    /**
     * User ID
     * @type {string}
     * @memberof MFAMethod
     */
    userId: string;
    /**
     * Whether method is verified
     * @type {boolean}
     * @memberof MFAMethod
     */
    verified: boolean;
}

/**
 * Check if a given object implements the MFAMethod interface.
 */
export function instanceOfMFAMethod(value: object): value is MFAMethod {
    if (!('active' in value) || value['active'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('method' in value) || value['method'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    if (!('userId' in value) || value['userId'] === undefined) return false;
    if (!('verified' in value) || value['verified'] === undefined) return false;
    return true;
}

export function MFAMethodFromJSON(json: any): MFAMethod {
    return MFAMethodFromJSONTyped(json, false);
}

export function MFAMethodFromJSONTyped(json: any, ignoreDiscriminator: boolean): MFAMethod {
    if (json == null) {
        return json;
    }
    return {
        
            ...json,
        '$schema': json['$schema'] == null ? undefined : json['$schema'],
        'active': json['active'],
        'backupCodes': json['backupCodes'] == null ? undefined : json['backupCodes'],
        'createdAt': (new Date(json['createdAt'])),
        'email': json['email'] == null ? undefined : json['email'],
        'id': json['id'],
        'lastUsed': json['lastUsed'] == null ? undefined : (new Date(json['lastUsed'])),
        'metadata': json['metadata'] == null ? undefined : json['metadata'],
        'method': json['method'],
        'name': json['name'] == null ? undefined : json['name'],
        'phoneNumber': json['phoneNumber'] == null ? undefined : json['phoneNumber'],
        'secret': json['secret'] == null ? undefined : json['secret'],
        'updatedAt': (new Date(json['updatedAt'])),
        'user': json['user'] == null ? undefined : UserSummaryFromJSON(json['user']),
        'userId': json['userId'],
        'verified': json['verified'],
    };
}

export function MFAMethodToJSON(json: any): MFAMethod {
    return MFAMethodToJSONTyped(json, false);
}

export function MFAMethodToJSONTyped(value?: Omit<MFAMethod, '$schema'> | null, ignoreDiscriminator = false): any {
    if (value == null) {
        return value;
    }

    return {
        
            ...value,
        'active': value['active'],
        'backupCodes': value['backupCodes'],
        'createdAt': ((value['createdAt']).toISOString()),
        'email': value['email'],
        'id': value['id'],
        'lastUsed': value['lastUsed'] == null ? undefined : ((value['lastUsed']).toISOString()),
        'metadata': value['metadata'],
        'method': value['method'],
        'name': value['name'],
        'phoneNumber': value['phoneNumber'],
        'secret': value['secret'],
        'updatedAt': ((value['updatedAt']).toISOString()),
        'user': UserSummaryToJSON(value['user']),
        'userId': value['userId'],
        'verified': value['verified'],
    };
}

