/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ComplianceFinding
 */
export interface ComplianceFinding {
    /**
     * 
     * @type {string}
     * @memberof ComplianceFinding
     */
    assignee?: string;
    /**
     * 
     * @type {string}
     * @memberof ComplianceFinding
     */
    controlId: string;
    /**
     * 
     * @type {string}
     * @memberof ComplianceFinding
     */
    description: string;
    /**
     * 
     * @type {Date}
     * @memberof ComplianceFinding
     */
    dueDate: Date;
    /**
     * 
     * @type {Date}
     * @memberof ComplianceFinding
     */
    foundAt: Date;
    /**
     * 
     * @type {string}
     * @memberof ComplianceFinding
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof ComplianceFinding
     */
    impact: string;
    /**
     * 
     * @type {Date}
     * @memberof ComplianceFinding
     */
    resolvedAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof ComplianceFinding
     */
    severity: string;
    /**
     * 
     * @type {string}
     * @memberof ComplianceFinding
     */
    status: string;
    /**
     * 
     * @type {string}
     * @memberof ComplianceFinding
     */
    title: string;
}

/**
 * Check if a given object implements the ComplianceFinding interface.
 */
export function instanceOfComplianceFinding(value: object): value is ComplianceFinding {
    if (!('controlId' in value) || value['controlId'] === undefined) return false;
    if (!('description' in value) || value['description'] === undefined) return false;
    if (!('dueDate' in value) || value['dueDate'] === undefined) return false;
    if (!('foundAt' in value) || value['foundAt'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('impact' in value) || value['impact'] === undefined) return false;
    if (!('severity' in value) || value['severity'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('title' in value) || value['title'] === undefined) return false;
    return true;
}

export function ComplianceFindingFromJSON(json: any): ComplianceFinding {
    return ComplianceFindingFromJSONTyped(json, false);
}

export function ComplianceFindingFromJSONTyped(json: any, ignoreDiscriminator: boolean): ComplianceFinding {
    if (json == null) {
        return json;
    }
    return {
        
        'assignee': json['assignee'] == null ? undefined : json['assignee'],
        'controlId': json['control_id'],
        'description': json['description'],
        'dueDate': (new Date(json['due_date'])),
        'foundAt': (new Date(json['found_at'])),
        'id': json['id'],
        'impact': json['impact'],
        'resolvedAt': json['resolved_at'] == null ? undefined : (new Date(json['resolved_at'])),
        'severity': json['severity'],
        'status': json['status'],
        'title': json['title'],
    };
}

export function ComplianceFindingToJSON(json: any): ComplianceFinding {
    return ComplianceFindingToJSONTyped(json, false);
}

export function ComplianceFindingToJSONTyped(value?: ComplianceFinding | null, ignoreDiscriminator = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'assignee': value['assignee'],
        'control_id': value['controlId'],
        'description': value['description'],
        'due_date': ((value['dueDate']).toISOString()),
        'found_at': ((value['foundAt']).toISOString()),
        'id': value['id'],
        'impact': value['impact'],
        'resolved_at': value['resolvedAt'] == null ? undefined : ((value['resolvedAt']).toISOString()),
        'severity': value['severity'],
        'status': value['status'],
        'title': value['title'],
    };
}

