/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { AuthFailureReason } from './AuthFailureReason';
import {
    AuthFailureReasonFromJSON,
    AuthFailureReasonFromJSONTyped,
    AuthFailureReasonToJSON,
    AuthFailureReasonToJSONTyped,
} from './AuthFailureReason';

/**
 * 
 * @export
 * @interface AuthenticationStatistics
 */
export interface AuthenticationStatistics {
    /**
     * Average session time in seconds
     * @type {number}
     * @memberof AuthenticationStatistics
     */
    averageSessionTime: number;
    /**
     * Login distribution by hour
     * @type {{ [key: string]: number; }}
     * @memberof AuthenticationStatistics
     */
    byHour: { [key: string]: number; };
    /**
     * Logins by provider
     * @type {{ [key: string]: number; }}
     * @memberof AuthenticationStatistics
     */
    byProvider: { [key: string]: number; };
    /**
     * Failed login attempts
     * @type {number}
     * @memberof AuthenticationStatistics
     */
    failedLogins: number;
    /**
     * MFA-protected logins
     * @type {number}
     * @memberof AuthenticationStatistics
     */
    mfaLogins: number;
    /**
     * Passkey logins
     * @type {number}
     * @memberof AuthenticationStatistics
     */
    passkeyLogins: number;
    /**
     * Passwordless logins
     * @type {number}
     * @memberof AuthenticationStatistics
     */
    passwordlessLogins: number;
    /**
     * SSO logins
     * @type {number}
     * @memberof AuthenticationStatistics
     */
    ssoLogins: number;
    /**
     * Successful logins
     * @type {number}
     * @memberof AuthenticationStatistics
     */
    successfulLogins: number;
    /**
     * Top authentication failure reasons
     * @type {Array<AuthFailureReason>}
     * @memberof AuthenticationStatistics
     */
    topFailureReasons: Array<AuthFailureReason> | null;
    /**
     * Total login attempts
     * @type {number}
     * @memberof AuthenticationStatistics
     */
    totalLogins: number;
}

/**
 * Check if a given object implements the AuthenticationStatistics interface.
 */
export function instanceOfAuthenticationStatistics(value: object): value is AuthenticationStatistics {
    if (!('averageSessionTime' in value) || value['averageSessionTime'] === undefined) return false;
    if (!('byHour' in value) || value['byHour'] === undefined) return false;
    if (!('byProvider' in value) || value['byProvider'] === undefined) return false;
    if (!('failedLogins' in value) || value['failedLogins'] === undefined) return false;
    if (!('mfaLogins' in value) || value['mfaLogins'] === undefined) return false;
    if (!('passkeyLogins' in value) || value['passkeyLogins'] === undefined) return false;
    if (!('passwordlessLogins' in value) || value['passwordlessLogins'] === undefined) return false;
    if (!('ssoLogins' in value) || value['ssoLogins'] === undefined) return false;
    if (!('successfulLogins' in value) || value['successfulLogins'] === undefined) return false;
    if (!('topFailureReasons' in value) || value['topFailureReasons'] === undefined) return false;
    if (!('totalLogins' in value) || value['totalLogins'] === undefined) return false;
    return true;
}

export function AuthenticationStatisticsFromJSON(json: any): AuthenticationStatistics {
    return AuthenticationStatisticsFromJSONTyped(json, false);
}

export function AuthenticationStatisticsFromJSONTyped(json: any, ignoreDiscriminator: boolean): AuthenticationStatistics {
    if (json == null) {
        return json;
    }
    return {
        
        'averageSessionTime': json['averageSessionTime'],
        'byHour': json['byHour'],
        'byProvider': json['byProvider'],
        'failedLogins': json['failedLogins'],
        'mfaLogins': json['mfaLogins'],
        'passkeyLogins': json['passkeyLogins'],
        'passwordlessLogins': json['passwordlessLogins'],
        'ssoLogins': json['ssoLogins'],
        'successfulLogins': json['successfulLogins'],
        'topFailureReasons': (json['topFailureReasons'] == null ? null : (json['topFailureReasons'] as Array<any>).map(AuthFailureReasonFromJSON)),
        'totalLogins': json['totalLogins'],
    };
}

export function AuthenticationStatisticsToJSON(json: any): AuthenticationStatistics {
    return AuthenticationStatisticsToJSONTyped(json, false);
}

export function AuthenticationStatisticsToJSONTyped(value?: AuthenticationStatistics | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'averageSessionTime': value['averageSessionTime'],
        'byHour': value['byHour'],
        'byProvider': value['byProvider'],
        'failedLogins': value['failedLogins'],
        'mfaLogins': value['mfaLogins'],
        'passkeyLogins': value['passkeyLogins'],
        'passwordlessLogins': value['passwordlessLogins'],
        'ssoLogins': value['ssoLogins'],
        'successfulLogins': value['successfulLogins'],
        'topFailureReasons': (value['topFailureReasons'] == null ? null : (value['topFailureReasons'] as Array<any>).map(AuthFailureReasonToJSON)),
        'totalLogins': value['totalLogins'],
    };
}

