/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { WebhookFormat } from './WebhookFormat';
import {
    WebhookFormatFromJSON,
    WebhookFormatFromJSONTyped,
    WebhookFormatToJSON,
    WebhookFormatToJSONTyped,
} from './WebhookFormat';

/**
 * 
 * @export
 * @interface CreateWebhookRequest
 */
export interface CreateWebhookRequest {
    [key: string]: any | any;
    /**
     * A URL to the JSON Schema for this object.
     * @type {string}
     * @memberof CreateWebhookRequest
     */
    readonly $schema?: string;
    /**
     * Event types to subscribe to
     * @type {Array<string>}
     * @memberof CreateWebhookRequest
     */
    eventTypes: Array<string>;
    /**
     * Payload format
     * @type {WebhookFormat}
     * @memberof CreateWebhookRequest
     */
    format?: WebhookFormat;
    /**
     * Custom headers
     * @type {{ [key: string]: string; }}
     * @memberof CreateWebhookRequest
     */
    headers?: { [key: string]: string; };
    /**
     * Additional metadata
     * @type {object}
     * @memberof CreateWebhookRequest
     */
    metadata?: object;
    /**
     * Webhook name
     * @type {string}
     * @memberof CreateWebhookRequest
     */
    name: string;
    /**
     * Retry attempts
     * @type {number}
     * @memberof CreateWebhookRequest
     */
    retryCount?: number;
    /**
     * Webhook secret for signature verification
     * @type {string}
     * @memberof CreateWebhookRequest
     */
    secret?: string;
    /**
     * Timeout in milliseconds
     * @type {number}
     * @memberof CreateWebhookRequest
     */
    timeoutMs?: number;
    /**
     * Webhook endpoint URL
     * @type {string}
     * @memberof CreateWebhookRequest
     */
    url: string;
    /**
     * Webhook API version
     * @type {string}
     * @memberof CreateWebhookRequest
     */
    version?: string;
}



/**
 * Check if a given object implements the CreateWebhookRequest interface.
 */
export function instanceOfCreateWebhookRequest(value: object): value is CreateWebhookRequest {
    if (!('eventTypes' in value) || value['eventTypes'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('url' in value) || value['url'] === undefined) return false;
    return true;
}

export function CreateWebhookRequestFromJSON(json: any): CreateWebhookRequest {
    return CreateWebhookRequestFromJSONTyped(json, false);
}

export function CreateWebhookRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateWebhookRequest {
    if (json == null) {
        return json;
    }
    return {
        
            ...json,
        '$schema': json['$schema'] == null ? undefined : json['$schema'],
        'eventTypes': json['eventTypes'],
        'format': json['format'] == null ? undefined : WebhookFormatFromJSON(json['format']),
        'headers': json['headers'] == null ? undefined : json['headers'],
        'metadata': json['metadata'] == null ? undefined : json['metadata'],
        'name': json['name'],
        'retryCount': json['retryCount'] == null ? undefined : json['retryCount'],
        'secret': json['secret'] == null ? undefined : json['secret'],
        'timeoutMs': json['timeoutMs'] == null ? undefined : json['timeoutMs'],
        'url': json['url'],
        'version': json['version'] == null ? undefined : json['version'],
    };
}

export function CreateWebhookRequestToJSON(json: any): CreateWebhookRequest {
    return CreateWebhookRequestToJSONTyped(json, false);
}

export function CreateWebhookRequestToJSONTyped(value?: Omit<CreateWebhookRequest, '$schema'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
            ...value,
        'eventTypes': value['eventTypes'],
        'format': WebhookFormatToJSON(value['format']),
        'headers': value['headers'],
        'metadata': value['metadata'],
        'name': value['name'],
        'retryCount': value['retryCount'],
        'secret': value['secret'],
        'timeoutMs': value['timeoutMs'],
        'url': value['url'],
        'version': value['version'],
    };
}

