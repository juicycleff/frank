/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Evidence } from './Evidence';
import {
    EvidenceFromJSON,
    EvidenceFromJSONTyped,
    EvidenceToJSON,
    EvidenceToJSONTyped,
} from './Evidence';

/**
 * 
 * @export
 * @interface ControlTest
 */
export interface ControlTest {
    /**
     * 
     * @type {string}
     * @memberof ControlTest
     */
    controlId: string;
    /**
     * 
     * @type {Array<Evidence>}
     * @memberof ControlTest
     */
    evidence: Array<Evidence> | null;
    /**
     * 
     * @type {number}
     * @memberof ControlTest
     */
    exceptionsFound: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof ControlTest
     */
    recommendations: Array<string> | null;
    /**
     * 
     * @type {string}
     * @memberof ControlTest
     */
    result: string;
    /**
     * 
     * @type {number}
     * @memberof ControlTest
     */
    sampleSize: number;
    /**
     * 
     * @type {Date}
     * @memberof ControlTest
     */
    testDate: Date;
    /**
     * 
     * @type {string}
     * @memberof ControlTest
     */
    testProcedure: string;
    /**
     * 
     * @type {string}
     * @memberof ControlTest
     */
    tester: string;
}

/**
 * Check if a given object implements the ControlTest interface.
 */
export function instanceOfControlTest(value: object): value is ControlTest {
    if (!('controlId' in value) || value['controlId'] === undefined) return false;
    if (!('evidence' in value) || value['evidence'] === undefined) return false;
    if (!('exceptionsFound' in value) || value['exceptionsFound'] === undefined) return false;
    if (!('recommendations' in value) || value['recommendations'] === undefined) return false;
    if (!('result' in value) || value['result'] === undefined) return false;
    if (!('sampleSize' in value) || value['sampleSize'] === undefined) return false;
    if (!('testDate' in value) || value['testDate'] === undefined) return false;
    if (!('testProcedure' in value) || value['testProcedure'] === undefined) return false;
    if (!('tester' in value) || value['tester'] === undefined) return false;
    return true;
}

export function ControlTestFromJSON(json: any): ControlTest {
    return ControlTestFromJSONTyped(json, false);
}

export function ControlTestFromJSONTyped(json: any, ignoreDiscriminator: boolean): ControlTest {
    if (json == null) {
        return json;
    }
    return {
        
        'controlId': json['control_id'],
        'evidence': (json['evidence'] == null ? null : (json['evidence'] as Array<any>).map(EvidenceFromJSON)),
        'exceptionsFound': json['exceptions_found'],
        'recommendations': json['recommendations'] == null ? null : json['recommendations'],
        'result': json['result'],
        'sampleSize': json['sample_size'],
        'testDate': (new Date(json['test_date'])),
        'testProcedure': json['test_procedure'],
        'tester': json['tester'],
    };
}

export function ControlTestToJSON(json: any): ControlTest {
    return ControlTestToJSONTyped(json, false);
}

export function ControlTestToJSONTyped(value?: ControlTest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'control_id': value['controlId'],
        'evidence': (value['evidence'] == null ? null : (value['evidence'] as Array<any>).map(EvidenceToJSON)),
        'exceptions_found': value['exceptionsFound'],
        'recommendations': value['recommendations'],
        'result': value['result'],
        'sample_size': value['sampleSize'],
        'test_date': ((value['testDate']).toISOString()),
        'test_procedure': value['testProcedure'],
        'tester': value['tester'],
    };
}

