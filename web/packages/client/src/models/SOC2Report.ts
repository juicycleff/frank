/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ControlTest } from './ControlTest';
import {
    ControlTestFromJSON,
    ControlTestFromJSONTyped,
    ControlTestToJSON,
    ControlTestToJSONTyped,
} from './ControlTest';
import type { TrustPrinciple } from './TrustPrinciple';
import {
    TrustPrincipleFromJSON,
    TrustPrincipleFromJSONTyped,
    TrustPrincipleToJSON,
    TrustPrincipleToJSONTyped,
} from './TrustPrinciple';
import type { ComplianceException } from './ComplianceException';
import {
    ComplianceExceptionFromJSON,
    ComplianceExceptionFromJSONTyped,
    ComplianceExceptionToJSON,
    ComplianceExceptionToJSONTyped,
} from './ComplianceException';

/**
 * 
 * @export
 * @interface SOC2Report
 */
export interface SOC2Report {
    /**
     * A URL to the JSON Schema for this object.
     * @type {string}
     * @memberof SOC2Report
     */
    readonly $schema?: string;
    /**
     * 
     * @type {boolean}
     * @memberof SOC2Report
     */
    attestationRequired: boolean;
    /**
     * 
     * @type {string}
     * @memberof SOC2Report
     */
    complianceStatus: string;
    /**
     * 
     * @type {Array<ControlTest>}
     * @memberof SOC2Report
     */
    controlTesting: Array<ControlTest> | null;
    /**
     * 
     * @type {Array<ComplianceException>}
     * @memberof SOC2Report
     */
    exceptions: Array<ComplianceException> | null;
    /**
     * 
     * @type {Date}
     * @memberof SOC2Report
     */
    generatedAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof SOC2Report
     */
    nextAssessmentDate: Date;
    /**
     * 
     * @type {string}
     * @memberof SOC2Report
     */
    organizationId: string;
    /**
     * 
     * @type {number}
     * @memberof SOC2Report
     */
    overallScore: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof SOC2Report
     */
    recommendations: Array<string> | null;
    /**
     * 
     * @type {string}
     * @memberof SOC2Report
     */
    reportPeriod: string;
    /**
     * 
     * @type {string}
     * @memberof SOC2Report
     */
    reportType: string;
    /**
     * 
     * @type {{ [key: string]: TrustPrinciple; }}
     * @memberof SOC2Report
     */
    trustPrinciples: { [key: string]: TrustPrinciple; };
    /**
     * 
     * @type {Date}
     * @memberof SOC2Report
     */
    validFromDate: Date;
    /**
     * 
     * @type {Date}
     * @memberof SOC2Report
     */
    validToDate: Date;
}

/**
 * Check if a given object implements the SOC2Report interface.
 */
export function instanceOfSOC2Report(value: object): value is SOC2Report {
    if (!('attestationRequired' in value) || value['attestationRequired'] === undefined) return false;
    if (!('complianceStatus' in value) || value['complianceStatus'] === undefined) return false;
    if (!('controlTesting' in value) || value['controlTesting'] === undefined) return false;
    if (!('exceptions' in value) || value['exceptions'] === undefined) return false;
    if (!('generatedAt' in value) || value['generatedAt'] === undefined) return false;
    if (!('nextAssessmentDate' in value) || value['nextAssessmentDate'] === undefined) return false;
    if (!('organizationId' in value) || value['organizationId'] === undefined) return false;
    if (!('overallScore' in value) || value['overallScore'] === undefined) return false;
    if (!('recommendations' in value) || value['recommendations'] === undefined) return false;
    if (!('reportPeriod' in value) || value['reportPeriod'] === undefined) return false;
    if (!('reportType' in value) || value['reportType'] === undefined) return false;
    if (!('trustPrinciples' in value) || value['trustPrinciples'] === undefined) return false;
    if (!('validFromDate' in value) || value['validFromDate'] === undefined) return false;
    if (!('validToDate' in value) || value['validToDate'] === undefined) return false;
    return true;
}

export function SOC2ReportFromJSON(json: any): SOC2Report {
    return SOC2ReportFromJSONTyped(json, false);
}

export function SOC2ReportFromJSONTyped(json: any, ignoreDiscriminator: boolean): SOC2Report {
    if (json == null) {
        return json;
    }
    return {
        
        '$schema': json['$schema'] == null ? undefined : json['$schema'],
        'attestationRequired': json['attestation_required'],
        'complianceStatus': json['compliance_status'],
        'controlTesting': (json['control_testing'] == null ? null : (json['control_testing'] as Array<any>).map(ControlTestFromJSON)),
        'exceptions': (json['exceptions'] == null ? null : (json['exceptions'] as Array<any>).map(ComplianceExceptionFromJSON)),
        'generatedAt': (new Date(json['generated_at'])),
        'nextAssessmentDate': (new Date(json['next_assessment_date'])),
        'organizationId': json['organization_id'],
        'overallScore': json['overall_score'],
        'recommendations': json['recommendations'] == null ? null : json['recommendations'],
        'reportPeriod': json['report_period'],
        'reportType': json['report_type'],
        'trustPrinciples': (mapValues(json['trust_principles'], TrustPrincipleFromJSON)),
        'validFromDate': (new Date(json['valid_from_date'])),
        'validToDate': (new Date(json['valid_to_date'])),
    };
}

export function SOC2ReportToJSON(json: any): SOC2Report {
    return SOC2ReportToJSONTyped(json, false);
}

export function SOC2ReportToJSONTyped(value?: Omit<SOC2Report, '$schema'> | null, ignoreDiscriminator = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'attestation_required': value['attestationRequired'],
        'compliance_status': value['complianceStatus'],
        'control_testing': (value['controlTesting'] == null ? null : (value['controlTesting'] as Array<any>).map(ControlTestToJSON)),
        'exceptions': (value['exceptions'] == null ? null : (value['exceptions'] as Array<any>).map(ComplianceExceptionToJSON)),
        'generated_at': ((value['generatedAt']).toISOString()),
        'next_assessment_date': ((value['nextAssessmentDate']).toISOString()),
        'organization_id': value['organizationId'],
        'overall_score': value['overallScore'],
        'recommendations': value['recommendations'],
        'report_period': value['reportPeriod'],
        'report_type': value['reportType'],
        'trust_principles': (mapValues(value['trustPrinciples'], TrustPrincipleToJSON)),
        'valid_from_date': ((value['validFromDate']).toISOString()),
        'valid_to_date': ((value['validToDate']).toISOString()),
    };
}

