/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Invitation } from './Invitation';
import {
    InvitationFromJSON,
    InvitationFromJSONTyped,
    InvitationToJSON,
    InvitationToJSONTyped,
} from './Invitation';

/**
 * 
 * @export
 * @interface InvitationValidationResponse
 */
export interface InvitationValidationResponse {
    [key: string]: any | any;
    /**
     * A URL to the JSON Schema for this object.
     * @type {string}
     * @memberof InvitationValidationResponse
     */
    readonly $schema?: string;
    /**
     * Whether the invitation was already used
     * @type {boolean}
     * @memberof InvitationValidationResponse
     */
    alreadyUsed: boolean;
    /**
     * Error message if invalid
     * @type {string}
     * @memberof InvitationValidationResponse
     */
    error?: string;
    /**
     * Whether the invitation has expired
     * @type {boolean}
     * @memberof InvitationValidationResponse
     */
    expired: boolean;
    /**
     * Expiration time
     * @type {Date}
     * @memberof InvitationValidationResponse
     */
    expiresAt?: Date;
    /**
     * Invitation details if valid
     * @type {Invitation}
     * @memberof InvitationValidationResponse
     */
    invitation?: Invitation;
    /**
     * Time remaining until expiration
     * @type {string}
     * @memberof InvitationValidationResponse
     */
    timeRemaining?: string;
    /**
     * Whether the invitation is valid
     * @type {boolean}
     * @memberof InvitationValidationResponse
     */
    valid: boolean;
}

/**
 * Check if a given object implements the InvitationValidationResponse interface.
 */
export function instanceOfInvitationValidationResponse(value: object): value is InvitationValidationResponse {
    if (!('alreadyUsed' in value) || value['alreadyUsed'] === undefined) return false;
    if (!('expired' in value) || value['expired'] === undefined) return false;
    if (!('valid' in value) || value['valid'] === undefined) return false;
    return true;
}

export function InvitationValidationResponseFromJSON(json: any): InvitationValidationResponse {
    return InvitationValidationResponseFromJSONTyped(json, false);
}

export function InvitationValidationResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): InvitationValidationResponse {
    if (json == null) {
        return json;
    }
    return {
        
            ...json,
        '$schema': json['$schema'] == null ? undefined : json['$schema'],
        'alreadyUsed': json['alreadyUsed'],
        'error': json['error'] == null ? undefined : json['error'],
        'expired': json['expired'],
        'expiresAt': json['expiresAt'] == null ? undefined : (new Date(json['expiresAt'])),
        'invitation': json['invitation'] == null ? undefined : InvitationFromJSON(json['invitation']),
        'timeRemaining': json['timeRemaining'] == null ? undefined : json['timeRemaining'],
        'valid': json['valid'],
    };
}

export function InvitationValidationResponseToJSON(json: any): InvitationValidationResponse {
    return InvitationValidationResponseToJSONTyped(json, false);
}

export function InvitationValidationResponseToJSONTyped(value?: Omit<InvitationValidationResponse, '$schema'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
            ...value,
        'alreadyUsed': value['alreadyUsed'],
        'error': value['error'],
        'expired': value['expired'],
        'expiresAt': value['expiresAt'] == null ? undefined : ((value['expiresAt']).toISOString()),
        'invitation': InvitationToJSON(value['invitation']),
        'timeRemaining': value['timeRemaining'],
        'valid': value['valid'],
    };
}

