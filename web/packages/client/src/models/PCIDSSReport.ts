/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { VulnerabilityScan } from './VulnerabilityScan';
import {
    VulnerabilityScanFromJSON,
    VulnerabilityScanFromJSONTyped,
    VulnerabilityScanToJSON,
    VulnerabilityScanToJSONTyped,
} from './VulnerabilityScan';
import type { PenetrationTest } from './PenetrationTest';
import {
    PenetrationTestFromJSON,
    PenetrationTestFromJSONTyped,
    PenetrationTestToJSON,
    PenetrationTestToJSONTyped,
} from './PenetrationTest';
import type { PCIDSSRequirement } from './PCIDSSRequirement';
import {
    PCIDSSRequirementFromJSON,
    PCIDSSRequirementFromJSONTyped,
    PCIDSSRequirementToJSON,
    PCIDSSRequirementToJSONTyped,
} from './PCIDSSRequirement';
import type { CompensatingControl } from './CompensatingControl';
import {
    CompensatingControlFromJSON,
    CompensatingControlFromJSONTyped,
    CompensatingControlToJSON,
    CompensatingControlToJSONTyped,
} from './CompensatingControl';

/**
 * 
 * @export
 * @interface PCIDSSReport
 */
export interface PCIDSSReport {
    /**
     * A URL to the JSON Schema for this object.
     * @type {string}
     * @memberof PCIDSSReport
     */
    readonly $schema?: string;
    /**
     * 
     * @type {Array<CompensatingControl>}
     * @memberof PCIDSSReport
     */
    compensatingControls: Array<CompensatingControl> | null;
    /**
     * 
     * @type {string}
     * @memberof PCIDSSReport
     */
    complianceLevel: string;
    /**
     * 
     * @type {Date}
     * @memberof PCIDSSReport
     */
    generatedAt: Date;
    /**
     * 
     * @type {string}
     * @memberof PCIDSSReport
     */
    organizationId: string;
    /**
     * 
     * @type {number}
     * @memberof PCIDSSReport
     */
    overallScore: number;
    /**
     * 
     * @type {Array<PenetrationTest>}
     * @memberof PCIDSSReport
     */
    penetrationTests: Array<PenetrationTest> | null;
    /**
     * 
     * @type {string}
     * @memberof PCIDSSReport
     */
    reportPeriod: string;
    /**
     * 
     * @type {Array<PCIDSSRequirement>}
     * @memberof PCIDSSReport
     */
    requirements: Array<PCIDSSRequirement> | null;
    /**
     * 
     * @type {boolean}
     * @memberof PCIDSSReport
     */
    selfAssessment: boolean;
    /**
     * 
     * @type {Array<VulnerabilityScan>}
     * @memberof PCIDSSReport
     */
    vulnerabilityScans: Array<VulnerabilityScan> | null;
}

/**
 * Check if a given object implements the PCIDSSReport interface.
 */
export function instanceOfPCIDSSReport(value: object): value is PCIDSSReport {
    if (!('compensatingControls' in value) || value['compensatingControls'] === undefined) return false;
    if (!('complianceLevel' in value) || value['complianceLevel'] === undefined) return false;
    if (!('generatedAt' in value) || value['generatedAt'] === undefined) return false;
    if (!('organizationId' in value) || value['organizationId'] === undefined) return false;
    if (!('overallScore' in value) || value['overallScore'] === undefined) return false;
    if (!('penetrationTests' in value) || value['penetrationTests'] === undefined) return false;
    if (!('reportPeriod' in value) || value['reportPeriod'] === undefined) return false;
    if (!('requirements' in value) || value['requirements'] === undefined) return false;
    if (!('selfAssessment' in value) || value['selfAssessment'] === undefined) return false;
    if (!('vulnerabilityScans' in value) || value['vulnerabilityScans'] === undefined) return false;
    return true;
}

export function PCIDSSReportFromJSON(json: any): PCIDSSReport {
    return PCIDSSReportFromJSONTyped(json, false);
}

export function PCIDSSReportFromJSONTyped(json: any, ignoreDiscriminator: boolean): PCIDSSReport {
    if (json == null) {
        return json;
    }
    return {
        
        '$schema': json['$schema'] == null ? undefined : json['$schema'],
        'compensatingControls': (json['compensating_controls'] == null ? null : (json['compensating_controls'] as Array<any>).map(CompensatingControlFromJSON)),
        'complianceLevel': json['compliance_level'],
        'generatedAt': (new Date(json['generated_at'])),
        'organizationId': json['organization_id'],
        'overallScore': json['overall_score'],
        'penetrationTests': (json['penetration_tests'] == null ? null : (json['penetration_tests'] as Array<any>).map(PenetrationTestFromJSON)),
        'reportPeriod': json['report_period'],
        'requirements': (json['requirements'] == null ? null : (json['requirements'] as Array<any>).map(PCIDSSRequirementFromJSON)),
        'selfAssessment': json['self_assessment'],
        'vulnerabilityScans': (json['vulnerability_scans'] == null ? null : (json['vulnerability_scans'] as Array<any>).map(VulnerabilityScanFromJSON)),
    };
}

export function PCIDSSReportToJSON(json: any): PCIDSSReport {
    return PCIDSSReportToJSONTyped(json, false);
}

export function PCIDSSReportToJSONTyped(value?: Omit<PCIDSSReport, '$schema'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'compensating_controls': (value['compensatingControls'] == null ? null : (value['compensatingControls'] as Array<any>).map(CompensatingControlToJSON)),
        'compliance_level': value['complianceLevel'],
        'generated_at': ((value['generatedAt']).toISOString()),
        'organization_id': value['organizationId'],
        'overall_score': value['overallScore'],
        'penetration_tests': (value['penetrationTests'] == null ? null : (value['penetrationTests'] as Array<any>).map(PenetrationTestToJSON)),
        'report_period': value['reportPeriod'],
        'requirements': (value['requirements'] == null ? null : (value['requirements'] as Array<any>).map(PCIDSSRequirementToJSON)),
        'self_assessment': value['selfAssessment'],
        'vulnerability_scans': (value['vulnerabilityScans'] == null ? null : (value['vulnerabilityScans'] as Array<any>).map(VulnerabilityScanToJSON)),
    };
}

