/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { BrandingSettings } from './BrandingSettings';
import {
    BrandingSettingsFromJSON,
    BrandingSettingsFromJSONTyped,
    BrandingSettingsToJSON,
    BrandingSettingsToJSONTyped,
} from './BrandingSettings';
import type { WebhookSettings } from './WebhookSettings';
import {
    WebhookSettingsFromJSON,
    WebhookSettingsFromJSONTyped,
    WebhookSettingsToJSON,
    WebhookSettingsToJSONTyped,
} from './WebhookSettings';
import type { AuditSettings } from './AuditSettings';
import {
    AuditSettingsFromJSON,
    AuditSettingsFromJSONTyped,
    AuditSettingsToJSON,
    AuditSettingsToJSONTyped,
} from './AuditSettings';
import type { MFASettings } from './MFASettings';
import {
    MFASettingsFromJSON,
    MFASettingsFromJSONTyped,
    MFASettingsToJSON,
    MFASettingsToJSONTyped,
} from './MFASettings';
import type { CustomField } from './CustomField';
import {
    CustomFieldFromJSON,
    CustomFieldFromJSONTyped,
    CustomFieldToJSON,
    CustomFieldToJSONTyped,
} from './CustomField';
import type { PasswordPolicy } from './PasswordPolicy';
import {
    PasswordPolicyFromJSON,
    PasswordPolicyFromJSONTyped,
    PasswordPolicyToJSON,
    PasswordPolicyToJSONTyped,
} from './PasswordPolicy';
import type { SessionSettings } from './SessionSettings';
import {
    SessionSettingsFromJSON,
    SessionSettingsFromJSONTyped,
    SessionSettingsToJSON,
    SessionSettingsToJSONTyped,
} from './SessionSettings';

/**
 * 
 * @export
 * @interface UpdateOrganizationSettingsRequest
 */
export interface UpdateOrganizationSettingsRequest {
    /**
     * A URL to the JSON Schema for this object.
     * @type {string}
     * @memberof UpdateOrganizationSettingsRequest
     */
    readonly $schema?: string;
    /**
     * Updated allowed domains
     * @type {Array<string>}
     * @memberof UpdateOrganizationSettingsRequest
     */
    allowedDomains?: Array<string> | null;
    /**
     * Updated audit settings
     * @type {AuditSettings}
     * @memberof UpdateOrganizationSettingsRequest
     */
    auditSettings?: AuditSettings;
    /**
     * Updated branding settings
     * @type {BrandingSettings}
     * @memberof UpdateOrganizationSettingsRequest
     */
    branding?: BrandingSettings;
    /**
     * Updated custom fields
     * @type {Array<CustomField>}
     * @memberof UpdateOrganizationSettingsRequest
     */
    customFields?: Array<CustomField> | null;
    /**
     * Updated MFA settings
     * @type {MFASettings}
     * @memberof UpdateOrganizationSettingsRequest
     */
    mfaSettings?: MFASettings;
    /**
     * Updated password policy
     * @type {PasswordPolicy}
     * @memberof UpdateOrganizationSettingsRequest
     */
    passwordPolicy?: PasswordPolicy;
    /**
     * Updated email verification requirement
     * @type {boolean}
     * @memberof UpdateOrganizationSettingsRequest
     */
    requireEmailVerification?: boolean;
    /**
     * Updated phone verification requirement
     * @type {boolean}
     * @memberof UpdateOrganizationSettingsRequest
     */
    requirePhoneVerification?: boolean;
    /**
     * Updated session settings
     * @type {SessionSettings}
     * @memberof UpdateOrganizationSettingsRequest
     */
    sessionSettings?: SessionSettings;
    /**
     * Updated webhook settings
     * @type {WebhookSettings}
     * @memberof UpdateOrganizationSettingsRequest
     */
    webhookSettings?: WebhookSettings;
}

/**
 * Check if a given object implements the UpdateOrganizationSettingsRequest interface.
 */
export function instanceOfUpdateOrganizationSettingsRequest(value: object): value is UpdateOrganizationSettingsRequest {
    return true;
}

export function UpdateOrganizationSettingsRequestFromJSON(json: any): UpdateOrganizationSettingsRequest {
    return UpdateOrganizationSettingsRequestFromJSONTyped(json, false);
}

export function UpdateOrganizationSettingsRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): UpdateOrganizationSettingsRequest {
    if (json == null) {
        return json;
    }
    return {
        
        '$schema': json['$schema'] == null ? undefined : json['$schema'],
        'allowedDomains': json['allowedDomains'] == null ? undefined : json['allowedDomains'],
        'auditSettings': json['auditSettings'] == null ? undefined : AuditSettingsFromJSON(json['auditSettings']),
        'branding': json['branding'] == null ? undefined : BrandingSettingsFromJSON(json['branding']),
        'customFields': json['customFields'] == null ? undefined : ((json['customFields'] as Array<any>).map(CustomFieldFromJSON)),
        'mfaSettings': json['mfaSettings'] == null ? undefined : MFASettingsFromJSON(json['mfaSettings']),
        'passwordPolicy': json['passwordPolicy'] == null ? undefined : PasswordPolicyFromJSON(json['passwordPolicy']),
        'requireEmailVerification': json['requireEmailVerification'] == null ? undefined : json['requireEmailVerification'],
        'requirePhoneVerification': json['requirePhoneVerification'] == null ? undefined : json['requirePhoneVerification'],
        'sessionSettings': json['sessionSettings'] == null ? undefined : SessionSettingsFromJSON(json['sessionSettings']),
        'webhookSettings': json['webhookSettings'] == null ? undefined : WebhookSettingsFromJSON(json['webhookSettings']),
    };
}

export function UpdateOrganizationSettingsRequestToJSON(json: any): UpdateOrganizationSettingsRequest {
    return UpdateOrganizationSettingsRequestToJSONTyped(json, false);
}

export function UpdateOrganizationSettingsRequestToJSONTyped(value?: Omit<UpdateOrganizationSettingsRequest, '$schema'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'allowedDomains': value['allowedDomains'],
        'auditSettings': AuditSettingsToJSON(value['auditSettings']),
        'branding': BrandingSettingsToJSON(value['branding']),
        'customFields': value['customFields'] == null ? undefined : ((value['customFields'] as Array<any>).map(CustomFieldToJSON)),
        'mfaSettings': MFASettingsToJSON(value['mfaSettings']),
        'passwordPolicy': PasswordPolicyToJSON(value['passwordPolicy']),
        'requireEmailVerification': value['requireEmailVerification'],
        'requirePhoneVerification': value['requirePhoneVerification'],
        'sessionSettings': SessionSettingsToJSON(value['sessionSettings']),
        'webhookSettings': WebhookSettingsToJSON(value['webhookSettings']),
    };
}

