/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface DataBreach
 */
export interface DataBreach {
    /**
     * 
     * @type {string}
     * @memberof DataBreach
     */
    cause: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof DataBreach
     */
    dataCategories: Array<string> | null;
    /**
     * 
     * @type {Date}
     * @memberof DataBreach
     */
    date: Date;
    /**
     * 
     * @type {Date}
     * @memberof DataBreach
     */
    detectedDate: Date;
    /**
     * 
     * @type {string}
     * @memberof DataBreach
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof DataBreach
     */
    impact: string;
    /**
     * 
     * @type {string}
     * @memberof DataBreach
     */
    mitigation: string;
    /**
     * 
     * @type {Date}
     * @memberof DataBreach
     */
    reportedDate?: Date;
    /**
     * 
     * @type {boolean}
     * @memberof DataBreach
     */
    reportedToAuthority: boolean;
    /**
     * 
     * @type {string}
     * @memberof DataBreach
     */
    severity: string;
    /**
     * 
     * @type {string}
     * @memberof DataBreach
     */
    status: string;
    /**
     * 
     * @type {number}
     * @memberof DataBreach
     */
    subjectsAffected: number;
    /**
     * 
     * @type {boolean}
     * @memberof DataBreach
     */
    subjectsNotified: boolean;
}

/**
 * Check if a given object implements the DataBreach interface.
 */
export function instanceOfDataBreach(value: object): value is DataBreach {
    if (!('cause' in value) || value['cause'] === undefined) return false;
    if (!('dataCategories' in value) || value['dataCategories'] === undefined) return false;
    if (!('date' in value) || value['date'] === undefined) return false;
    if (!('detectedDate' in value) || value['detectedDate'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('impact' in value) || value['impact'] === undefined) return false;
    if (!('mitigation' in value) || value['mitigation'] === undefined) return false;
    if (!('reportedToAuthority' in value) || value['reportedToAuthority'] === undefined) return false;
    if (!('severity' in value) || value['severity'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('subjectsAffected' in value) || value['subjectsAffected'] === undefined) return false;
    if (!('subjectsNotified' in value) || value['subjectsNotified'] === undefined) return false;
    return true;
}

export function DataBreachFromJSON(json: any): DataBreach {
    return DataBreachFromJSONTyped(json, false);
}

export function DataBreachFromJSONTyped(json: any, ignoreDiscriminator: boolean): DataBreach {
    if (json == null) {
        return json;
    }
    return {
        
        'cause': json['cause'],
        'dataCategories': json['data_categories'] == null ? null : json['data_categories'],
        'date': (new Date(json['date'])),
        'detectedDate': (new Date(json['detected_date'])),
        'id': json['id'],
        'impact': json['impact'],
        'mitigation': json['mitigation'],
        'reportedDate': json['reported_date'] == null ? undefined : (new Date(json['reported_date'])),
        'reportedToAuthority': json['reported_to_authority'],
        'severity': json['severity'],
        'status': json['status'],
        'subjectsAffected': json['subjects_affected'],
        'subjectsNotified': json['subjects_notified'],
    };
}

export function DataBreachToJSON(json: any): DataBreach {
    return DataBreachToJSONTyped(json, false);
}

export function DataBreachToJSONTyped(value?: DataBreach | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'cause': value['cause'],
        'data_categories': value['dataCategories'],
        'date': ((value['date']).toISOString()),
        'detected_date': ((value['detectedDate']).toISOString()),
        'id': value['id'],
        'impact': value['impact'],
        'mitigation': value['mitigation'],
        'reported_date': value['reportedDate'] == null ? undefined : ((value['reportedDate']).toISOString()),
        'reported_to_authority': value['reportedToAuthority'],
        'severity': value['severity'],
        'status': value['status'],
        'subjects_affected': value['subjectsAffected'],
        'subjects_notified': value['subjectsNotified'],
    };
}

