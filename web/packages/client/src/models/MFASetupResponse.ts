/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface MFASetupResponse
 */
export interface MFASetupResponse {
    [key: string]: any | any;
    /**
     * A URL to the JSON Schema for this object.
     * @type {string}
     * @memberof MFASetupResponse
     */
    readonly $schema?: string;
    /**
     * Manual entry URL (for TOTP only)
     * @type {string}
     * @memberof MFASetupResponse
     */
    backupUrl?: string;
    /**
     * Email address (for email MFA only)
     * @type {string}
     * @memberof MFASetupResponse
     */
    email?: string;
    /**
     * Additional message
     * @type {string}
     * @memberof MFASetupResponse
     */
    message?: string;
    /**
     * MFA method type
     * @type {string}
     * @memberof MFASetupResponse
     */
    method: string;
    /**
     * MFA method ID
     * @type {string}
     * @memberof MFASetupResponse
     */
    methodId: string;
    /**
     * Phone number (for SMS only)
     * @type {string}
     * @memberof MFASetupResponse
     */
    phoneNumber?: string;
    /**
     * QR code data URL (for TOTP only)
     * @type {string}
     * @memberof MFASetupResponse
     */
    qrCode?: string;
    /**
     * Whether verification is required to complete setup
     * @type {boolean}
     * @memberof MFASetupResponse
     */
    requiresVerification: boolean;
    /**
     * TOTP secret (for TOTP only)
     * @type {string}
     * @memberof MFASetupResponse
     */
    secret?: string;
    /**
     * Instructions for verification
     * @type {string}
     * @memberof MFASetupResponse
     */
    verificationInstructions: string;
}

/**
 * Check if a given object implements the MFASetupResponse interface.
 */
export function instanceOfMFASetupResponse(value: object): value is MFASetupResponse {
    if (!('method' in value) || value['method'] === undefined) return false;
    if (!('methodId' in value) || value['methodId'] === undefined) return false;
    if (!('requiresVerification' in value) || value['requiresVerification'] === undefined) return false;
    if (!('verificationInstructions' in value) || value['verificationInstructions'] === undefined) return false;
    return true;
}

export function MFASetupResponseFromJSON(json: any): MFASetupResponse {
    return MFASetupResponseFromJSONTyped(json, false);
}

export function MFASetupResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): MFASetupResponse {
    if (json == null) {
        return json;
    }
    return {
        
            ...json,
        '$schema': json['$schema'] == null ? undefined : json['$schema'],
        'backupUrl': json['backupUrl'] == null ? undefined : json['backupUrl'],
        'email': json['email'] == null ? undefined : json['email'],
        'message': json['message'] == null ? undefined : json['message'],
        'method': json['method'],
        'methodId': json['methodId'],
        'phoneNumber': json['phoneNumber'] == null ? undefined : json['phoneNumber'],
        'qrCode': json['qrCode'] == null ? undefined : json['qrCode'],
        'requiresVerification': json['requiresVerification'],
        'secret': json['secret'] == null ? undefined : json['secret'],
        'verificationInstructions': json['verificationInstructions'],
    };
}

export function MFASetupResponseToJSON(json: any): MFASetupResponse {
    return MFASetupResponseToJSONTyped(json, false);
}

export function MFASetupResponseToJSONTyped(value?: Omit<MFASetupResponse, '$schema'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
            ...value,
        'backupUrl': value['backupUrl'],
        'email': value['email'],
        'message': value['message'],
        'method': value['method'],
        'methodId': value['methodId'],
        'phoneNumber': value['phoneNumber'],
        'qrCode': value['qrCode'],
        'requiresVerification': value['requiresVerification'],
        'secret': value['secret'],
        'verificationInstructions': value['verificationInstructions'],
    };
}

