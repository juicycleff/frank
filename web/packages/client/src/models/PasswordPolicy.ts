/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface PasswordPolicy
 */
export interface PasswordPolicy {
    /**
     * Expiry days
     * @type {number}
     * @memberof PasswordPolicy
     */
    expiryDays: number;
    /**
     * Password max age in days (0 = no expiry)
     * @type {number}
     * @memberof PasswordPolicy
     */
    maxAge: number;
    /**
     * Maximum password length
     * @type {number}
     * @memberof PasswordPolicy
     */
    maxLength: number;
    /**
     * Minimum password length
     * @type {number}
     * @memberof PasswordPolicy
     */
    minLength: number;
    /**
     * Prevent reusing last N passwords
     * @type {boolean}
     * @memberof PasswordPolicy
     */
    preventReuse: boolean;
    /**
     * RequireDigit
     * @type {boolean}
     * @memberof PasswordPolicy
     */
    requireDigit: boolean;
    /**
     * Require lowercase letters
     * @type {boolean}
     * @memberof PasswordPolicy
     */
    requireLowercase: boolean;
    /**
     * RequireSpecial
     * @type {boolean}
     * @memberof PasswordPolicy
     */
    requireSpecial: boolean;
    /**
     * Require uppercase letters
     * @type {boolean}
     * @memberof PasswordPolicy
     */
    requireUppercase: boolean;
}

/**
 * Check if a given object implements the PasswordPolicy interface.
 */
export function instanceOfPasswordPolicy(value: object): value is PasswordPolicy {
    if (!('expiryDays' in value) || value['expiryDays'] === undefined) return false;
    if (!('maxAge' in value) || value['maxAge'] === undefined) return false;
    if (!('maxLength' in value) || value['maxLength'] === undefined) return false;
    if (!('minLength' in value) || value['minLength'] === undefined) return false;
    if (!('preventReuse' in value) || value['preventReuse'] === undefined) return false;
    if (!('requireDigit' in value) || value['requireDigit'] === undefined) return false;
    if (!('requireLowercase' in value) || value['requireLowercase'] === undefined) return false;
    if (!('requireSpecial' in value) || value['requireSpecial'] === undefined) return false;
    if (!('requireUppercase' in value) || value['requireUppercase'] === undefined) return false;
    return true;
}

export function PasswordPolicyFromJSON(json: any): PasswordPolicy {
    return PasswordPolicyFromJSONTyped(json, false);
}

export function PasswordPolicyFromJSONTyped(json: any, ignoreDiscriminator: boolean): PasswordPolicy {
    if (json == null) {
        return json;
    }
    return {
        
        'expiryDays': json['expiryDays'],
        'maxAge': json['maxAge'],
        'maxLength': json['maxLength'],
        'minLength': json['minLength'],
        'preventReuse': json['preventReuse'],
        'requireDigit': json['requireDigit'],
        'requireLowercase': json['requireLowercase'],
        'requireSpecial': json['requireSpecial'],
        'requireUppercase': json['requireUppercase'],
    };
}

export function PasswordPolicyToJSON(json: any): PasswordPolicy {
    return PasswordPolicyToJSONTyped(json, false);
}

export function PasswordPolicyToJSONTyped(value?: PasswordPolicy | null, ignoreDiscriminator = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'expiryDays': value['expiryDays'],
        'maxAge': value['maxAge'],
        'maxLength': value['maxLength'],
        'minLength': value['minLength'],
        'preventReuse': value['preventReuse'],
        'requireDigit': value['requireDigit'],
        'requireLowercase': value['requireLowercase'],
        'requireSpecial': value['requireSpecial'],
        'requireUppercase': value['requireUppercase'],
    };
}

