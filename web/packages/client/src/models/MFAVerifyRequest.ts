/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface MFAVerifyRequest
 */
export interface MFAVerifyRequest {
    /**
     * A URL to the JSON Schema for this object.
     * @type {string}
     * @memberof MFAVerifyRequest
     */
    readonly $schema?: string;
    /**
     * MFA code
     * @type {string}
     * @memberof MFAVerifyRequest
     */
    code: string;
    /**
     * Verification context (setup, login, management)
     * @type {string}
     * @memberof MFAVerifyRequest
     */
    context?: string;
    /**
     * MFA method type
     * @type {string}
     * @memberof MFAVerifyRequest
     */
    method: string;
    /**
     * Specific method ID
     * @type {string}
     * @memberof MFAVerifyRequest
     */
    methodId?: string;
    /**
     * MFA session token for login completion
     * @type {string}
     * @memberof MFAVerifyRequest
     */
    mfaToken?: string;
}

/**
 * Check if a given object implements the MFAVerifyRequest interface.
 */
export function instanceOfMFAVerifyRequest(value: object): value is MFAVerifyRequest {
    if (!('code' in value) || value['code'] === undefined) return false;
    if (!('method' in value) || value['method'] === undefined) return false;
    return true;
}

export function MFAVerifyRequestFromJSON(json: any): MFAVerifyRequest {
    return MFAVerifyRequestFromJSONTyped(json, false);
}

export function MFAVerifyRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): MFAVerifyRequest {
    if (json == null) {
        return json;
    }
    return {
        
        '$schema': json['$schema'] == null ? undefined : json['$schema'],
        'code': json['code'],
        'context': json['context'] == null ? undefined : json['context'],
        'method': json['method'],
        'methodId': json['methodId'] == null ? undefined : json['methodId'],
        'mfaToken': json['mfaToken'] == null ? undefined : json['mfaToken'],
    };
}

export function MFAVerifyRequestToJSON(json: any): MFAVerifyRequest {
    return MFAVerifyRequestToJSONTyped(json, false);
}

export function MFAVerifyRequestToJSONTyped(value?: Omit<MFAVerifyRequest, '$schema'> | null, ignoreDiscriminator = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'code': value['code'],
        'context': value['context'],
        'method': value['method'],
        'methodId': value['methodId'],
        'mfaToken': value['mfaToken'],
    };
}

