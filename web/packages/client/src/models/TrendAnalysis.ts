/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { GrowthMetrics } from './GrowthMetrics';
import {
    GrowthMetricsFromJSON,
    GrowthMetricsFromJSONTyped,
    GrowthMetricsToJSON,
    GrowthMetricsToJSONTyped,
} from './GrowthMetrics';
import type { PredictionMetrics } from './PredictionMetrics';
import {
    PredictionMetricsFromJSON,
    PredictionMetricsFromJSONTyped,
    PredictionMetricsToJSON,
    PredictionMetricsToJSONTyped,
} from './PredictionMetrics';
import type { Anomaly } from './Anomaly';
import {
    AnomalyFromJSON,
    AnomalyFromJSONTyped,
    AnomalyToJSON,
    AnomalyToJSONTyped,
} from './Anomaly';
import type { SeasonalPattern } from './SeasonalPattern';
import {
    SeasonalPatternFromJSON,
    SeasonalPatternFromJSONTyped,
    SeasonalPatternToJSON,
    SeasonalPatternToJSONTyped,
} from './SeasonalPattern';

/**
 * 
 * @export
 * @interface TrendAnalysis
 */
export interface TrendAnalysis {
    /**
     * A URL to the JSON Schema for this object.
     * @type {string}
     * @memberof TrendAnalysis
     */
    readonly $schema?: string;
    /**
     * 
     * @type {Array<Anomaly>}
     * @memberof TrendAnalysis
     */
    anomalies: Array<Anomaly> | null;
    /**
     * 
     * @type {string}
     * @memberof TrendAnalysis
     */
    errorTrend: string;
    /**
     * 
     * @type {Date}
     * @memberof TrendAnalysis
     */
    generatedAt: Date;
    /**
     * 
     * @type {GrowthMetrics}
     * @memberof TrendAnalysis
     */
    growth: GrowthMetrics;
    /**
     * 
     * @type {string}
     * @memberof TrendAnalysis
     */
    period: string;
    /**
     * 
     * @type {PredictionMetrics}
     * @memberof TrendAnalysis
     */
    predictions: PredictionMetrics;
    /**
     * 
     * @type {string}
     * @memberof TrendAnalysis
     */
    requestTrend: string;
    /**
     * 
     * @type {string}
     * @memberof TrendAnalysis
     */
    responseTimeTrend: string;
    /**
     * 
     * @type {Array<SeasonalPattern>}
     * @memberof TrendAnalysis
     */
    seasonality: Array<SeasonalPattern> | null;
    /**
     * 
     * @type {string}
     * @memberof TrendAnalysis
     */
    userTrend: string;
}

/**
 * Check if a given object implements the TrendAnalysis interface.
 */
export function instanceOfTrendAnalysis(value: object): value is TrendAnalysis {
    if (!('anomalies' in value) || value['anomalies'] === undefined) return false;
    if (!('errorTrend' in value) || value['errorTrend'] === undefined) return false;
    if (!('generatedAt' in value) || value['generatedAt'] === undefined) return false;
    if (!('growth' in value) || value['growth'] === undefined) return false;
    if (!('period' in value) || value['period'] === undefined) return false;
    if (!('predictions' in value) || value['predictions'] === undefined) return false;
    if (!('requestTrend' in value) || value['requestTrend'] === undefined) return false;
    if (!('responseTimeTrend' in value) || value['responseTimeTrend'] === undefined) return false;
    if (!('seasonality' in value) || value['seasonality'] === undefined) return false;
    if (!('userTrend' in value) || value['userTrend'] === undefined) return false;
    return true;
}

export function TrendAnalysisFromJSON(json: any): TrendAnalysis {
    return TrendAnalysisFromJSONTyped(json, false);
}

export function TrendAnalysisFromJSONTyped(json: any, ignoreDiscriminator: boolean): TrendAnalysis {
    if (json == null) {
        return json;
    }
    return {
        
        '$schema': json['$schema'] == null ? undefined : json['$schema'],
        'anomalies': (json['anomalies'] == null ? null : (json['anomalies'] as Array<any>).map(AnomalyFromJSON)),
        'errorTrend': json['errorTrend'],
        'generatedAt': (new Date(json['generatedAt'])),
        'growth': GrowthMetricsFromJSON(json['growth']),
        'period': json['period'],
        'predictions': PredictionMetricsFromJSON(json['predictions']),
        'requestTrend': json['requestTrend'],
        'responseTimeTrend': json['responseTimeTrend'],
        'seasonality': (json['seasonality'] == null ? null : (json['seasonality'] as Array<any>).map(SeasonalPatternFromJSON)),
        'userTrend': json['userTrend'],
    };
}

export function TrendAnalysisToJSON(json: any): TrendAnalysis {
    return TrendAnalysisToJSONTyped(json, false);
}

export function TrendAnalysisToJSONTyped(value?: Omit<TrendAnalysis, '$schema'> | null, ignoreDiscriminator = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'anomalies': (value['anomalies'] == null ? null : (value['anomalies'] as Array<any>).map(AnomalyToJSON)),
        'errorTrend': value['errorTrend'],
        'generatedAt': ((value['generatedAt']).toISOString()),
        'growth': GrowthMetricsToJSON(value['growth']),
        'period': value['period'],
        'predictions': PredictionMetricsToJSON(value['predictions']),
        'requestTrend': value['requestTrend'],
        'responseTimeTrend': value['responseTimeTrend'],
        'seasonality': (value['seasonality'] == null ? null : (value['seasonality'] as Array<any>).map(SeasonalPatternToJSON)),
        'userTrend': value['userTrend'],
    };
}

