/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CacheMetrics } from './CacheMetrics';
import {
    CacheMetricsFromJSON,
    CacheMetricsFromJSONTyped,
    CacheMetricsToJSON,
    CacheMetricsToJSONTyped,
} from './CacheMetrics';
import type { QueueMetrics } from './QueueMetrics';
import {
    QueueMetricsFromJSON,
    QueueMetricsFromJSONTyped,
    QueueMetricsToJSON,
    QueueMetricsToJSONTyped,
} from './QueueMetrics';
import type { NetworkMetrics } from './NetworkMetrics';
import {
    NetworkMetricsFromJSON,
    NetworkMetricsFromJSONTyped,
    NetworkMetricsToJSON,
    NetworkMetricsToJSONTyped,
} from './NetworkMetrics';
import type { SystemResourceMetrics } from './SystemResourceMetrics';
import {
    SystemResourceMetricsFromJSON,
    SystemResourceMetricsFromJSONTyped,
    SystemResourceMetricsToJSON,
    SystemResourceMetricsToJSONTyped,
} from './SystemResourceMetrics';
import type { ApplicationMetrics } from './ApplicationMetrics';
import {
    ApplicationMetricsFromJSON,
    ApplicationMetricsFromJSONTyped,
    ApplicationMetricsToJSON,
    ApplicationMetricsToJSONTyped,
} from './ApplicationMetrics';
import type { DatabaseMetrics } from './DatabaseMetrics';
import {
    DatabaseMetricsFromJSON,
    DatabaseMetricsFromJSONTyped,
    DatabaseMetricsToJSON,
    DatabaseMetricsToJSONTyped,
} from './DatabaseMetrics';

/**
 * 
 * @export
 * @interface SystemMetrics
 */
export interface SystemMetrics {
    /**
     * A URL to the JSON Schema for this object.
     * @type {string}
     * @memberof SystemMetrics
     */
    readonly $schema?: string;
    /**
     * 
     * @type {ApplicationMetrics}
     * @memberof SystemMetrics
     */
    application: ApplicationMetrics;
    /**
     * 
     * @type {CacheMetrics}
     * @memberof SystemMetrics
     */
    cache: CacheMetrics;
    /**
     * 
     * @type {DatabaseMetrics}
     * @memberof SystemMetrics
     */
    database: DatabaseMetrics;
    /**
     * 
     * @type {NetworkMetrics}
     * @memberof SystemMetrics
     */
    network: NetworkMetrics;
    /**
     * 
     * @type {QueueMetrics}
     * @memberof SystemMetrics
     */
    queue: QueueMetrics;
    /**
     * 
     * @type {SystemResourceMetrics}
     * @memberof SystemMetrics
     */
    system: SystemResourceMetrics;
    /**
     * 
     * @type {Date}
     * @memberof SystemMetrics
     */
    timestamp: Date;
}

/**
 * Check if a given object implements the SystemMetrics interface.
 */
export function instanceOfSystemMetrics(value: object): value is SystemMetrics {
    if (!('application' in value) || value['application'] === undefined) return false;
    if (!('cache' in value) || value['cache'] === undefined) return false;
    if (!('database' in value) || value['database'] === undefined) return false;
    if (!('network' in value) || value['network'] === undefined) return false;
    if (!('queue' in value) || value['queue'] === undefined) return false;
    if (!('system' in value) || value['system'] === undefined) return false;
    if (!('timestamp' in value) || value['timestamp'] === undefined) return false;
    return true;
}

export function SystemMetricsFromJSON(json: any): SystemMetrics {
    return SystemMetricsFromJSONTyped(json, false);
}

export function SystemMetricsFromJSONTyped(json: any, ignoreDiscriminator: boolean): SystemMetrics {
    if (json == null) {
        return json;
    }
    return {
        
        '$schema': json['$schema'] == null ? undefined : json['$schema'],
        'application': ApplicationMetricsFromJSON(json['application']),
        'cache': CacheMetricsFromJSON(json['cache']),
        'database': DatabaseMetricsFromJSON(json['database']),
        'network': NetworkMetricsFromJSON(json['network']),
        'queue': QueueMetricsFromJSON(json['queue']),
        'system': SystemResourceMetricsFromJSON(json['system']),
        'timestamp': (new Date(json['timestamp'])),
    };
}

export function SystemMetricsToJSON(json: any): SystemMetrics {
    return SystemMetricsToJSONTyped(json, false);
}

export function SystemMetricsToJSONTyped(value?: Omit<SystemMetrics, '$schema'> | null, ignoreDiscriminator = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'application': ApplicationMetricsToJSON(value['application']),
        'cache': CacheMetricsToJSON(value['cache']),
        'database': DatabaseMetricsToJSON(value['database']),
        'network': NetworkMetricsToJSON(value['network']),
        'queue': QueueMetricsToJSON(value['queue']),
        'system': SystemResourceMetricsToJSON(value['system']),
        'timestamp': ((value['timestamp']).toISOString()),
    };
}

