/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { SecurityIncidentEvent } from './SecurityIncidentEvent';
import {
    SecurityIncidentEventFromJSON,
    SecurityIncidentEventFromJSONTyped,
    SecurityIncidentEventToJSON,
    SecurityIncidentEventToJSONTyped,
} from './SecurityIncidentEvent';
import type { SecurityRemediation } from './SecurityRemediation';
import {
    SecurityRemediationFromJSON,
    SecurityRemediationFromJSONTyped,
    SecurityRemediationToJSON,
    SecurityRemediationToJSONTyped,
} from './SecurityRemediation';
import type { SecurityEvidence } from './SecurityEvidence';
import {
    SecurityEvidenceFromJSON,
    SecurityEvidenceFromJSONTyped,
    SecurityEvidenceToJSON,
    SecurityEvidenceToJSONTyped,
} from './SecurityEvidence';

/**
 * 
 * @export
 * @interface SecurityIncident
 */
export interface SecurityIncident {
    /**
     * 
     * @type {Array<string>}
     * @memberof SecurityIncident
     */
    affectedOrgs?: Array<string> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof SecurityIncident
     */
    affectedUsers?: Array<string> | null;
    /**
     * 
     * @type {string}
     * @memberof SecurityIncident
     */
    assignee?: string;
    /**
     * 
     * @type {Date}
     * @memberof SecurityIncident
     */
    createdAt: Date;
    /**
     * 
     * @type {string}
     * @memberof SecurityIncident
     */
    description: string;
    /**
     * 
     * @type {number}
     * @memberof SecurityIncident
     */
    durationMinutes?: number;
    /**
     * 
     * @type {Array<SecurityEvidence>}
     * @memberof SecurityIncident
     */
    evidence?: Array<SecurityEvidence> | null;
    /**
     * 
     * @type {string}
     * @memberof SecurityIncident
     */
    id: string;
    /**
     * 
     * @type {SecurityRemediation}
     * @memberof SecurityIncident
     */
    remediation?: SecurityRemediation;
    /**
     * 
     * @type {string}
     * @memberof SecurityIncident
     */
    reporter: string;
    /**
     * 
     * @type {Date}
     * @memberof SecurityIncident
     */
    resolvedAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof SecurityIncident
     */
    severity: string;
    /**
     * 
     * @type {string}
     * @memberof SecurityIncident
     */
    source: string;
    /**
     * 
     * @type {string}
     * @memberof SecurityIncident
     */
    status: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof SecurityIncident
     */
    tags?: Array<string> | null;
    /**
     * 
     * @type {Array<SecurityIncidentEvent>}
     * @memberof SecurityIncident
     */
    timeline: Array<SecurityIncidentEvent> | null;
    /**
     * 
     * @type {string}
     * @memberof SecurityIncident
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof SecurityIncident
     */
    type: string;
    /**
     * 
     * @type {Date}
     * @memberof SecurityIncident
     */
    updatedAt: Date;
}

/**
 * Check if a given object implements the SecurityIncident interface.
 */
export function instanceOfSecurityIncident(value: object): value is SecurityIncident {
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('description' in value) || value['description'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('reporter' in value) || value['reporter'] === undefined) return false;
    if (!('severity' in value) || value['severity'] === undefined) return false;
    if (!('source' in value) || value['source'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('timeline' in value) || value['timeline'] === undefined) return false;
    if (!('title' in value) || value['title'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    return true;
}

export function SecurityIncidentFromJSON(json: any): SecurityIncident {
    return SecurityIncidentFromJSONTyped(json, false);
}

export function SecurityIncidentFromJSONTyped(json: any, ignoreDiscriminator: boolean): SecurityIncident {
    if (json == null) {
        return json;
    }
    return {
        
        'affectedOrgs': json['affected_orgs'] == null ? undefined : json['affected_orgs'],
        'affectedUsers': json['affected_users'] == null ? undefined : json['affected_users'],
        'assignee': json['assignee'] == null ? undefined : json['assignee'],
        'createdAt': (new Date(json['createdAt'])),
        'description': json['description'],
        'durationMinutes': json['duration_minutes'] == null ? undefined : json['duration_minutes'],
        'evidence': json['evidence'] == null ? undefined : ((json['evidence'] as Array<any>).map(SecurityEvidenceFromJSON)),
        'id': json['id'],
        'remediation': json['remediation'] == null ? undefined : SecurityRemediationFromJSON(json['remediation']),
        'reporter': json['reporter'],
        'resolvedAt': json['resolved_at'] == null ? undefined : (new Date(json['resolved_at'])),
        'severity': json['severity'],
        'source': json['source'],
        'status': json['status'],
        'tags': json['tags'] == null ? undefined : json['tags'],
        'timeline': (json['timeline'] == null ? null : (json['timeline'] as Array<any>).map(SecurityIncidentEventFromJSON)),
        'title': json['title'],
        'type': json['type'],
        'updatedAt': (new Date(json['updatedAt'])),
    };
}

export function SecurityIncidentToJSON(json: any): SecurityIncident {
    return SecurityIncidentToJSONTyped(json, false);
}

export function SecurityIncidentToJSONTyped(value?: SecurityIncident | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'affected_orgs': value['affectedOrgs'],
        'affected_users': value['affectedUsers'],
        'assignee': value['assignee'],
        'createdAt': ((value['createdAt']).toISOString()),
        'description': value['description'],
        'duration_minutes': value['durationMinutes'],
        'evidence': value['evidence'] == null ? undefined : ((value['evidence'] as Array<any>).map(SecurityEvidenceToJSON)),
        'id': value['id'],
        'remediation': SecurityRemediationToJSON(value['remediation']),
        'reporter': value['reporter'],
        'resolved_at': value['resolvedAt'] == null ? undefined : ((value['resolvedAt']).toISOString()),
        'severity': value['severity'],
        'source': value['source'],
        'status': value['status'],
        'tags': value['tags'],
        'timeline': (value['timeline'] == null ? null : (value['timeline'] as Array<any>).map(SecurityIncidentEventToJSON)),
        'title': value['title'],
        'type': value['type'],
        'updatedAt': ((value['updatedAt']).toISOString()),
    };
}

