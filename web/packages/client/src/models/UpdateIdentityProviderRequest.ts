/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface UpdateIdentityProviderRequest
 */
export interface UpdateIdentityProviderRequest {
    [key: string]: any | any;
    /**
     * A URL to the JSON Schema for this object.
     * @type {string}
     * @memberof UpdateIdentityProviderRequest
     */
    readonly $schema?: string;
    /**
     * Updated active status
     * @type {boolean}
     * @memberof UpdateIdentityProviderRequest
     */
    active?: boolean;
    /**
     * Updated attribute mappings
     * @type {{ [key: string]: string; }}
     * @memberof UpdateIdentityProviderRequest
     */
    attributeMapping?: { [key: string]: string; };
    /**
     * Updated auto-provision
     * @type {boolean}
     * @memberof UpdateIdentityProviderRequest
     */
    autoProvision?: boolean;
    /**
     * Updated button text
     * @type {string}
     * @memberof UpdateIdentityProviderRequest
     */
    buttonText?: string;
    /**
     * Updated configuration
     * @type {object}
     * @memberof UpdateIdentityProviderRequest
     */
    config?: object;
    /**
     * Updated default role
     * @type {string}
     * @memberof UpdateIdentityProviderRequest
     */
    defaultRole?: string;
    /**
     * Updated domain
     * @type {string}
     * @memberof UpdateIdentityProviderRequest
     */
    domain?: string;
    /**
     * Updated enabled status
     * @type {boolean}
     * @memberof UpdateIdentityProviderRequest
     */
    enabled?: boolean;
    /**
     * Updated icon URL
     * @type {string}
     * @memberof UpdateIdentityProviderRequest
     */
    iconUrl?: string;
    /**
     * Updated name
     * @type {string}
     * @memberof UpdateIdentityProviderRequest
     */
    name?: string;
}

/**
 * Check if a given object implements the UpdateIdentityProviderRequest interface.
 */
export function instanceOfUpdateIdentityProviderRequest(value: object): value is UpdateIdentityProviderRequest {
    return true;
}

export function UpdateIdentityProviderRequestFromJSON(json: any): UpdateIdentityProviderRequest {
    return UpdateIdentityProviderRequestFromJSONTyped(json, false);
}

export function UpdateIdentityProviderRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): UpdateIdentityProviderRequest {
    if (json == null) {
        return json;
    }
    return {
        
            ...json,
        '$schema': json['$schema'] == null ? undefined : json['$schema'],
        'active': json['active'] == null ? undefined : json['active'],
        'attributeMapping': json['attributeMapping'] == null ? undefined : json['attributeMapping'],
        'autoProvision': json['autoProvision'] == null ? undefined : json['autoProvision'],
        'buttonText': json['buttonText'] == null ? undefined : json['buttonText'],
        'config': json['config'] == null ? undefined : json['config'],
        'defaultRole': json['defaultRole'] == null ? undefined : json['defaultRole'],
        'domain': json['domain'] == null ? undefined : json['domain'],
        'enabled': json['enabled'] == null ? undefined : json['enabled'],
        'iconUrl': json['iconUrl'] == null ? undefined : json['iconUrl'],
        'name': json['name'] == null ? undefined : json['name'],
    };
}

export function UpdateIdentityProviderRequestToJSON(json: any): UpdateIdentityProviderRequest {
    return UpdateIdentityProviderRequestToJSONTyped(json, false);
}

export function UpdateIdentityProviderRequestToJSONTyped(value?: Omit<UpdateIdentityProviderRequest, '$schema'> | null, ignoreDiscriminator = false): any {
    if (value == null) {
        return value;
    }

    return {
        
            ...value,
        'active': value['active'],
        'attributeMapping': value['attributeMapping'],
        'autoProvision': value['autoProvision'],
        'buttonText': value['buttonText'],
        'config': value['config'],
        'defaultRole': value['defaultRole'],
        'domain': value['domain'],
        'enabled': value['enabled'],
        'iconUrl': value['iconUrl'],
        'name': value['name'],
    };
}

