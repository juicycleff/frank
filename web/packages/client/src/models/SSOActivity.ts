/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface SSOActivity
 */
export interface SSOActivity {
    [key: string]: any | any;
    /**
     * Action type (login, logout, provisioning)
     * @type {string}
     * @memberof SSOActivity
     */
    action: string;
    /**
     * User attributes from provider
     * @type {object}
     * @memberof SSOActivity
     */
    attributes?: object;
    /**
     * Action duration in milliseconds
     * @type {number}
     * @memberof SSOActivity
     */
    duration?: number;
    /**
     * User email
     * @type {string}
     * @memberof SSOActivity
     */
    email?: string;
    /**
     * Error message if failed
     * @type {string}
     * @memberof SSOActivity
     */
    error?: string;
    /**
     * Activity ID
     * @type {string}
     * @memberof SSOActivity
     */
    id: string;
    /**
     * IP address
     * @type {string}
     * @memberof SSOActivity
     */
    ipAddress?: string;
    /**
     * Location
     * @type {string}
     * @memberof SSOActivity
     */
    location?: string;
    /**
     * Provider ID
     * @type {string}
     * @memberof SSOActivity
     */
    providerId: string;
    /**
     * Whether action was successful
     * @type {boolean}
     * @memberof SSOActivity
     */
    success: boolean;
    /**
     * Activity timestamp
     * @type {Date}
     * @memberof SSOActivity
     */
    timestamp: Date;
    /**
     * User agent
     * @type {string}
     * @memberof SSOActivity
     */
    userAgent?: string;
    /**
     * Whether user was auto-provisioned
     * @type {boolean}
     * @memberof SSOActivity
     */
    userCreated: boolean;
    /**
     * User ID
     * @type {string}
     * @memberof SSOActivity
     */
    userId?: string;
}

/**
 * Check if a given object implements the SSOActivity interface.
 */
export function instanceOfSSOActivity(value: object): value is SSOActivity {
    if (!('action' in value) || value['action'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('providerId' in value) || value['providerId'] === undefined) return false;
    if (!('success' in value) || value['success'] === undefined) return false;
    if (!('timestamp' in value) || value['timestamp'] === undefined) return false;
    if (!('userCreated' in value) || value['userCreated'] === undefined) return false;
    return true;
}

export function SSOActivityFromJSON(json: any): SSOActivity {
    return SSOActivityFromJSONTyped(json, false);
}

export function SSOActivityFromJSONTyped(json: any, ignoreDiscriminator: boolean): SSOActivity {
    if (json == null) {
        return json;
    }
    return {
        
            ...json,
        'action': json['action'],
        'attributes': json['attributes'] == null ? undefined : json['attributes'],
        'duration': json['duration'] == null ? undefined : json['duration'],
        'email': json['email'] == null ? undefined : json['email'],
        'error': json['error'] == null ? undefined : json['error'],
        'id': json['id'],
        'ipAddress': json['ipAddress'] == null ? undefined : json['ipAddress'],
        'location': json['location'] == null ? undefined : json['location'],
        'providerId': json['providerId'],
        'success': json['success'],
        'timestamp': (new Date(json['timestamp'])),
        'userAgent': json['userAgent'] == null ? undefined : json['userAgent'],
        'userCreated': json['userCreated'],
        'userId': json['userId'] == null ? undefined : json['userId'],
    };
}

export function SSOActivityToJSON(json: any): SSOActivity {
    return SSOActivityToJSONTyped(json, false);
}

export function SSOActivityToJSONTyped(value?: SSOActivity | null, ignoreDiscriminator = false): any {
    if (value == null) {
        return value;
    }

    return {
        
            ...value,
        'action': value['action'],
        'attributes': value['attributes'],
        'duration': value['duration'],
        'email': value['email'],
        'error': value['error'],
        'id': value['id'],
        'ipAddress': value['ipAddress'],
        'location': value['location'],
        'providerId': value['providerId'],
        'success': value['success'],
        'timestamp': ((value['timestamp']).toISOString()),
        'userAgent': value['userAgent'],
        'userCreated': value['userCreated'],
        'userId': value['userId'],
    };
}

