/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface CheckPermissionRequest
 */
export interface CheckPermissionRequest {
    /**
     * A URL to the JSON Schema for this object.
     * @type {string}
     * @memberof CheckPermissionRequest
     */
    readonly $schema?: string;
    /**
     * Context ID
     * @type {string}
     * @memberof CheckPermissionRequest
     */
    contextId?: string;
    /**
     * Context type
     * @type {string}
     * @memberof CheckPermissionRequest
     */
    contextType?: string;
    /**
     * Permission to check
     * @type {string}
     * @memberof CheckPermissionRequest
     */
    permission: string;
    /**
     * Resource ID
     * @type {string}
     * @memberof CheckPermissionRequest
     */
    resourceId?: string;
    /**
     * Resource type
     * @type {string}
     * @memberof CheckPermissionRequest
     */
    resourceType?: string;
    /**
     * User ID
     * @type {string}
     * @memberof CheckPermissionRequest
     */
    userId: string;
}

/**
 * Check if a given object implements the CheckPermissionRequest interface.
 */
export function instanceOfCheckPermissionRequest(value: object): value is CheckPermissionRequest {
    if (!('permission' in value) || value['permission'] === undefined) return false;
    if (!('userId' in value) || value['userId'] === undefined) return false;
    return true;
}

export function CheckPermissionRequestFromJSON(json: any): CheckPermissionRequest {
    return CheckPermissionRequestFromJSONTyped(json, false);
}

export function CheckPermissionRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CheckPermissionRequest {
    if (json == null) {
        return json;
    }
    return {
        
        '$schema': json['$schema'] == null ? undefined : json['$schema'],
        'contextId': json['contextId'] == null ? undefined : json['contextId'],
        'contextType': json['contextType'] == null ? undefined : json['contextType'],
        'permission': json['permission'],
        'resourceId': json['resourceId'] == null ? undefined : json['resourceId'],
        'resourceType': json['resourceType'] == null ? undefined : json['resourceType'],
        'userId': json['userId'],
    };
}

export function CheckPermissionRequestToJSON(json: any): CheckPermissionRequest {
    return CheckPermissionRequestToJSONTyped(json, false);
}

export function CheckPermissionRequestToJSONTyped(value?: Omit<CheckPermissionRequest, '$schema'> | null, ignoreDiscriminator = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'contextId': value['contextId'],
        'contextType': value['contextType'],
        'permission': value['permission'],
        'resourceId': value['resourceId'],
        'resourceType': value['resourceType'],
        'userId': value['userId'],
    };
}

