/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface CreateMembershipRequest
 */
export interface CreateMembershipRequest {
    [key: string]: any | any;
    /**
     * A URL to the JSON Schema for this object.
     * @type {string}
     * @memberof CreateMembershipRequest
     */
    readonly $schema?: string;
    /**
     * Email address (for new users)
     * @type {string}
     * @memberof CreateMembershipRequest
     */
    email?: string;
    /**
     * Invitation expiration
     * @type {Date}
     * @memberof CreateMembershipRequest
     */
    expiresAt?: Date;
    /**
     * First name (for new users)
     * @type {string}
     * @memberof CreateMembershipRequest
     */
    firstName?: string;
    /**
     * Custom invitation message
     * @type {string}
     * @memberof CreateMembershipRequest
     */
    invitationMessage?: string;
    /**
     * Set as billing contact
     * @type {boolean}
     * @memberof CreateMembershipRequest
     */
    isBillingContact: boolean;
    /**
     * Set as primary contact
     * @type {boolean}
     * @memberof CreateMembershipRequest
     */
    isPrimaryContact: boolean;
    /**
     * Last name (for new users)
     * @type {string}
     * @memberof CreateMembershipRequest
     */
    lastName?: string;
    /**
     * Additional metadata
     * @type {object}
     * @memberof CreateMembershipRequest
     */
    metadata?: object;
    /**
     * Role ID to assign
     * @type {string}
     * @memberof CreateMembershipRequest
     */
    roleId: string;
    /**
     * Whether to send invitation email
     * @type {boolean}
     * @memberof CreateMembershipRequest
     */
    sendInvitationEmail: boolean;
    /**
     * Existing user ID
     * @type {string}
     * @memberof CreateMembershipRequest
     */
    userId?: string;
}

/**
 * Check if a given object implements the CreateMembershipRequest interface.
 */
export function instanceOfCreateMembershipRequest(value: object): value is CreateMembershipRequest {
    if (!('isBillingContact' in value) || value['isBillingContact'] === undefined) return false;
    if (!('isPrimaryContact' in value) || value['isPrimaryContact'] === undefined) return false;
    if (!('roleId' in value) || value['roleId'] === undefined) return false;
    if (!('sendInvitationEmail' in value) || value['sendInvitationEmail'] === undefined) return false;
    return true;
}

export function CreateMembershipRequestFromJSON(json: any): CreateMembershipRequest {
    return CreateMembershipRequestFromJSONTyped(json, false);
}

export function CreateMembershipRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateMembershipRequest {
    if (json == null) {
        return json;
    }
    return {
        
            ...json,
        '$schema': json['$schema'] == null ? undefined : json['$schema'],
        'email': json['email'] == null ? undefined : json['email'],
        'expiresAt': json['expiresAt'] == null ? undefined : (new Date(json['expiresAt'])),
        'firstName': json['firstName'] == null ? undefined : json['firstName'],
        'invitationMessage': json['invitationMessage'] == null ? undefined : json['invitationMessage'],
        'isBillingContact': json['isBillingContact'],
        'isPrimaryContact': json['isPrimaryContact'],
        'lastName': json['lastName'] == null ? undefined : json['lastName'],
        'metadata': json['metadata'] == null ? undefined : json['metadata'],
        'roleId': json['roleId'],
        'sendInvitationEmail': json['sendInvitationEmail'],
        'userId': json['userId'] == null ? undefined : json['userId'],
    };
}

export function CreateMembershipRequestToJSON(json: any): CreateMembershipRequest {
    return CreateMembershipRequestToJSONTyped(json, false);
}

export function CreateMembershipRequestToJSONTyped(value?: Omit<CreateMembershipRequest, '$schema'> | null, ignoreDiscriminator = false): any {
    if (value == null) {
        return value;
    }

    return {
        
            ...value,
        'email': value['email'],
        'expiresAt': value['expiresAt'] == null ? undefined : ((value['expiresAt']).toISOString()),
        'firstName': value['firstName'],
        'invitationMessage': value['invitationMessage'],
        'isBillingContact': value['isBillingContact'],
        'isPrimaryContact': value['isPrimaryContact'],
        'lastName': value['lastName'],
        'metadata': value['metadata'],
        'roleId': value['roleId'],
        'sendInvitationEmail': value['sendInvitationEmail'],
        'userId': value['userId'],
    };
}

