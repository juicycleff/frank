/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface CustomField
 */
export interface CustomField {
    [key: string]: any | any;
    /**
     * Default value
     * @type {any}
     * @memberof CustomField
     */
    defaultValue?: any | null;
    /**
     * Display name
     * @type {string}
     * @memberof CustomField
     */
    displayName: string;
    /**
     * Field name
     * @type {string}
     * @memberof CustomField
     */
    name: string;
    /**
     * Options for select type
     * @type {Array<string>}
     * @memberof CustomField
     */
    options?: Array<string>;
    /**
     * Whether field is required
     * @type {boolean}
     * @memberof CustomField
     */
    required: boolean;
    /**
     * Field type (string, number, boolean, select)
     * @type {string}
     * @memberof CustomField
     */
    type: string;
}

/**
 * Check if a given object implements the CustomField interface.
 */
export function instanceOfCustomField(value: object): value is CustomField {
    if (!('displayName' in value) || value['displayName'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('required' in value) || value['required'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    return true;
}

export function CustomFieldFromJSON(json: any): CustomField {
    return CustomFieldFromJSONTyped(json, false);
}

export function CustomFieldFromJSONTyped(json: any, ignoreDiscriminator: boolean): CustomField {
    if (json == null) {
        return json;
    }
    return {
        
            ...json,
        'defaultValue': json['defaultValue'] == null ? undefined : json['defaultValue'],
        'displayName': json['displayName'],
        'name': json['name'],
        'options': json['options'] == null ? undefined : json['options'],
        'required': json['required'],
        'type': json['type'],
    };
}

export function CustomFieldToJSON(json: any): CustomField {
    return CustomFieldToJSONTyped(json, false);
}

export function CustomFieldToJSONTyped(value?: CustomField | null, ignoreDiscriminator = false): any {
    if (value == null) {
        return value;
    }

    return {
        
            ...value,
        'defaultValue': value['defaultValue'],
        'displayName': value['displayName'],
        'name': value['name'],
        'options': value['options'],
        'required': value['required'],
        'type': value['type'],
    };
}

