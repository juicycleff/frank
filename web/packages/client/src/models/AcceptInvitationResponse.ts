/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { User } from './User';
import {
    UserFromJSON,
    UserFromJSONTyped,
    UserToJSON,
    UserToJSONTyped,
} from './User';
import type { OrganizationSummary } from './OrganizationSummary';
import {
    OrganizationSummaryFromJSON,
    OrganizationSummaryFromJSONTyped,
    OrganizationSummaryToJSON,
    OrganizationSummaryToJSONTyped,
} from './OrganizationSummary';
import type { Membership } from './Membership';
import {
    MembershipFromJSON,
    MembershipFromJSONTyped,
    MembershipToJSON,
    MembershipToJSONTyped,
} from './Membership';

/**
 * 
 * @export
 * @interface AcceptInvitationResponse
 */
export interface AcceptInvitationResponse {
    [key: string]: any | any;
    /**
     * A URL to the JSON Schema for this object.
     * @type {string}
     * @memberof AcceptInvitationResponse
     */
    readonly $schema?: string;
    /**
     * Access token for auto-login
     * @type {string}
     * @memberof AcceptInvitationResponse
     */
    accessToken?: string;
    /**
     * Created membership
     * @type {Membership}
     * @memberof AcceptInvitationResponse
     */
    membership: Membership;
    /**
     * Organization information
     * @type {OrganizationSummary}
     * @memberof AcceptInvitationResponse
     */
    organization: OrganizationSummary;
    /**
     * Refresh token
     * @type {string}
     * @memberof AcceptInvitationResponse
     */
    refreshToken?: string;
    /**
     * Whether invitation was accepted
     * @type {boolean}
     * @memberof AcceptInvitationResponse
     */
    success: boolean;
    /**
     * User information
     * @type {User}
     * @memberof AcceptInvitationResponse
     */
    user: User;
}

/**
 * Check if a given object implements the AcceptInvitationResponse interface.
 */
export function instanceOfAcceptInvitationResponse(value: object): value is AcceptInvitationResponse {
    if (!('membership' in value) || value['membership'] === undefined) return false;
    if (!('organization' in value) || value['organization'] === undefined) return false;
    if (!('success' in value) || value['success'] === undefined) return false;
    if (!('user' in value) || value['user'] === undefined) return false;
    return true;
}

export function AcceptInvitationResponseFromJSON(json: any): AcceptInvitationResponse {
    return AcceptInvitationResponseFromJSONTyped(json, false);
}

export function AcceptInvitationResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): AcceptInvitationResponse {
    if (json == null) {
        return json;
    }
    return {
        
            ...json,
        '$schema': json['$schema'] == null ? undefined : json['$schema'],
        'accessToken': json['accessToken'] == null ? undefined : json['accessToken'],
        'membership': MembershipFromJSON(json['membership']),
        'organization': OrganizationSummaryFromJSON(json['organization']),
        'refreshToken': json['refreshToken'] == null ? undefined : json['refreshToken'],
        'success': json['success'],
        'user': UserFromJSON(json['user']),
    };
}

export function AcceptInvitationResponseToJSON(json: any): AcceptInvitationResponse {
    return AcceptInvitationResponseToJSONTyped(json, false);
}

export function AcceptInvitationResponseToJSONTyped(value?: Omit<AcceptInvitationResponse, '$schema'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
            ...value,
        'accessToken': value['accessToken'],
        'membership': MembershipToJSON(value['membership']),
        'organization': OrganizationSummaryToJSON(value['organization']),
        'refreshToken': value['refreshToken'],
        'success': value['success'],
        'user': UserToJSON(value['user']),
    };
}

