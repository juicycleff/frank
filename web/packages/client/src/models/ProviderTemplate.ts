/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ProviderTemplate
 */
export interface ProviderTemplate {
    [key: string]: any | any;
    /**
     * A URL to the JSON Schema for this object.
     * @type {string}
     * @memberof ProviderTemplate
     */
    readonly $schema?: string;
    /**
     * Whether template is active
     * @type {boolean}
     * @memberof ProviderTemplate
     */
    active: boolean;
    /**
     * Average setup time in minutes
     * @type {number}
     * @memberof ProviderTemplate
     */
    averageSetupTime?: number;
    /**
     * Provider category
     * @type {string}
     * @memberof ProviderTemplate
     */
    category: string;
    /**
     * Default configuration template
     * @type {object}
     * @memberof ProviderTemplate
     */
    configTemplate: object;
    /**
     * 
     * @type {Date}
     * @memberof ProviderTemplate
     */
    createdAt: Date;
    /**
     * Provider description
     * @type {string}
     * @memberof ProviderTemplate
     */
    description?: string;
    /**
     * Display name for UI
     * @type {string}
     * @memberof ProviderTemplate
     */
    displayName: string;
    /**
     * Setup documentation
     * @type {string}
     * @memberof ProviderTemplate
     */
    documentation?: string;
    /**
     * Documentation URL
     * @type {string}
     * @memberof ProviderTemplate
     */
    documentationUrl?: string;
    /**
     * Provider icon URL
     * @type {string}
     * @memberof ProviderTemplate
     */
    iconUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof ProviderTemplate
     */
    id: string;
    /**
     * Unique template key
     * @type {string}
     * @memberof ProviderTemplate
     */
    key: string;
    /**
     * Last usage timestamp
     * @type {Date}
     * @memberof ProviderTemplate
     */
    lastUsed: Date;
    /**
     * Additional template metadata
     * @type {object}
     * @memberof ProviderTemplate
     */
    metadata?: object;
    /**
     * Provider name
     * @type {string}
     * @memberof ProviderTemplate
     */
    name: string;
    /**
     * Whether this is a popular provider
     * @type {boolean}
     * @memberof ProviderTemplate
     */
    popular: boolean;
    /**
     * Popularity ranking
     * @type {number}
     * @memberof ProviderTemplate
     */
    popularityRank: number;
    /**
     * Authentication protocol
     * @type {string}
     * @memberof ProviderTemplate
     */
    protocol: string;
    /**
     * Required configuration fields
     * @type {Array<string>}
     * @memberof ProviderTemplate
     */
    requiredFields?: Array<string>;
    /**
     * Setup guide URL
     * @type {string}
     * @memberof ProviderTemplate
     */
    setupGuideUrl?: string;
    /**
     * Setup success rate percentage
     * @type {number}
     * @memberof ProviderTemplate
     */
    successRate: number;
    /**
     * Supported features
     * @type {Array<string>}
     * @memberof ProviderTemplate
     */
    supportedFeatures?: Array<string>;
    /**
     * Provider type (oidc, oauth2, saml)
     * @type {string}
     * @memberof ProviderTemplate
     */
    type: string;
    /**
     * 
     * @type {Date}
     * @memberof ProviderTemplate
     */
    updatedAt: Date;
    /**
     * Number of organizations using this template
     * @type {number}
     * @memberof ProviderTemplate
     */
    usageCount: number;
}

/**
 * Check if a given object implements the ProviderTemplate interface.
 */
export function instanceOfProviderTemplate(value: object): value is ProviderTemplate {
    if (!('active' in value) || value['active'] === undefined) return false;
    if (!('category' in value) || value['category'] === undefined) return false;
    if (!('configTemplate' in value) || value['configTemplate'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('displayName' in value) || value['displayName'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('key' in value) || value['key'] === undefined) return false;
    if (!('lastUsed' in value) || value['lastUsed'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('popular' in value) || value['popular'] === undefined) return false;
    if (!('popularityRank' in value) || value['popularityRank'] === undefined) return false;
    if (!('protocol' in value) || value['protocol'] === undefined) return false;
    if (!('successRate' in value) || value['successRate'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    if (!('usageCount' in value) || value['usageCount'] === undefined) return false;
    return true;
}

export function ProviderTemplateFromJSON(json: any): ProviderTemplate {
    return ProviderTemplateFromJSONTyped(json, false);
}

export function ProviderTemplateFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProviderTemplate {
    if (json == null) {
        return json;
    }
    return {
        
            ...json,
        '$schema': json['$schema'] == null ? undefined : json['$schema'],
        'active': json['active'],
        'averageSetupTime': json['averageSetupTime'] == null ? undefined : json['averageSetupTime'],
        'category': json['category'],
        'configTemplate': json['configTemplate'],
        'createdAt': (new Date(json['createdAt'])),
        'description': json['description'] == null ? undefined : json['description'],
        'displayName': json['displayName'],
        'documentation': json['documentation'] == null ? undefined : json['documentation'],
        'documentationUrl': json['documentationUrl'] == null ? undefined : json['documentationUrl'],
        'iconUrl': json['iconUrl'] == null ? undefined : json['iconUrl'],
        'id': json['id'],
        'key': json['key'],
        'lastUsed': (new Date(json['lastUsed'])),
        'metadata': json['metadata'] == null ? undefined : json['metadata'],
        'name': json['name'],
        'popular': json['popular'],
        'popularityRank': json['popularityRank'],
        'protocol': json['protocol'],
        'requiredFields': json['requiredFields'] == null ? undefined : json['requiredFields'],
        'setupGuideUrl': json['setupGuideUrl'] == null ? undefined : json['setupGuideUrl'],
        'successRate': json['successRate'],
        'supportedFeatures': json['supportedFeatures'] == null ? undefined : json['supportedFeatures'],
        'type': json['type'],
        'updatedAt': (new Date(json['updatedAt'])),
        'usageCount': json['usageCount'],
    };
}

export function ProviderTemplateToJSON(json: any): ProviderTemplate {
    return ProviderTemplateToJSONTyped(json, false);
}

export function ProviderTemplateToJSONTyped(value?: Omit<ProviderTemplate, '$schema'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
            ...value,
        'active': value['active'],
        'averageSetupTime': value['averageSetupTime'],
        'category': value['category'],
        'configTemplate': value['configTemplate'],
        'createdAt': ((value['createdAt']).toISOString()),
        'description': value['description'],
        'displayName': value['displayName'],
        'documentation': value['documentation'],
        'documentationUrl': value['documentationUrl'],
        'iconUrl': value['iconUrl'],
        'id': value['id'],
        'key': value['key'],
        'lastUsed': ((value['lastUsed']).toISOString()),
        'metadata': value['metadata'],
        'name': value['name'],
        'popular': value['popular'],
        'popularityRank': value['popularityRank'],
        'protocol': value['protocol'],
        'requiredFields': value['requiredFields'],
        'setupGuideUrl': value['setupGuideUrl'],
        'successRate': value['successRate'],
        'supportedFeatures': value['supportedFeatures'],
        'type': value['type'],
        'updatedAt': ((value['updatedAt']).toISOString()),
        'usageCount': value['usageCount'],
    };
}

