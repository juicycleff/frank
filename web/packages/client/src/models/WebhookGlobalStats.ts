/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { WebhookSummary } from './WebhookSummary';
import {
    WebhookSummaryFromJSON,
    WebhookSummaryFromJSONTyped,
    WebhookSummaryToJSON,
    WebhookSummaryToJSONTyped,
} from './WebhookSummary';
import type { WebhookEventSummary } from './WebhookEventSummary';
import {
    WebhookEventSummaryFromJSON,
    WebhookEventSummaryFromJSONTyped,
    WebhookEventSummaryToJSON,
    WebhookEventSummaryToJSONTyped,
} from './WebhookEventSummary';

/**
 * 
 * @export
 * @interface WebhookGlobalStats
 */
export interface WebhookGlobalStats {
    /**
     * A URL to the JSON Schema for this object.
     * @type {string}
     * @memberof WebhookGlobalStats
     */
    readonly $schema?: string;
    /**
     * Active webhooks
     * @type {number}
     * @memberof WebhookGlobalStats
     */
    activeWebhooks: number;
    /**
     * Average response time
     * @type {number}
     * @memberof WebhookGlobalStats
     */
    averageResponseTime: number;
    /**
     * Events by type
     * @type {{ [key: string]: number; }}
     * @memberof WebhookGlobalStats
     */
    eventsByType: { [key: string]: number; };
    /**
     * Events sent this month
     * @type {number}
     * @memberof WebhookGlobalStats
     */
    eventsMonth: number;
    /**
     * Events sent today
     * @type {number}
     * @memberof WebhookGlobalStats
     */
    eventsToday: number;
    /**
     * Events sent this week
     * @type {number}
     * @memberof WebhookGlobalStats
     */
    eventsWeek: number;
    /**
     * Failed events
     * @type {number}
     * @memberof WebhookGlobalStats
     */
    failedEvents: number;
    /**
     * Overall success rate
     * @type {number}
     * @memberof WebhookGlobalStats
     */
    overallSuccessRate: number;
    /**
     * Recent failed events
     * @type {Array<WebhookEventSummary>}
     * @memberof WebhookGlobalStats
     */
    recentFailures: Array<WebhookEventSummary> | null;
    /**
     * Successful events
     * @type {number}
     * @memberof WebhookGlobalStats
     */
    successfulEvents: number;
    /**
     * Most active webhooks
     * @type {Array<WebhookSummary>}
     * @memberof WebhookGlobalStats
     */
    topWebhooks: Array<WebhookSummary> | null;
    /**
     * Total events sent
     * @type {number}
     * @memberof WebhookGlobalStats
     */
    totalEvents: number;
    /**
     * Total webhooks
     * @type {number}
     * @memberof WebhookGlobalStats
     */
    totalWebhooks: number;
}

/**
 * Check if a given object implements the WebhookGlobalStats interface.
 */
export function instanceOfWebhookGlobalStats(value: object): value is WebhookGlobalStats {
    if (!('activeWebhooks' in value) || value['activeWebhooks'] === undefined) return false;
    if (!('averageResponseTime' in value) || value['averageResponseTime'] === undefined) return false;
    if (!('eventsByType' in value) || value['eventsByType'] === undefined) return false;
    if (!('eventsMonth' in value) || value['eventsMonth'] === undefined) return false;
    if (!('eventsToday' in value) || value['eventsToday'] === undefined) return false;
    if (!('eventsWeek' in value) || value['eventsWeek'] === undefined) return false;
    if (!('failedEvents' in value) || value['failedEvents'] === undefined) return false;
    if (!('overallSuccessRate' in value) || value['overallSuccessRate'] === undefined) return false;
    if (!('recentFailures' in value) || value['recentFailures'] === undefined) return false;
    if (!('successfulEvents' in value) || value['successfulEvents'] === undefined) return false;
    if (!('topWebhooks' in value) || value['topWebhooks'] === undefined) return false;
    if (!('totalEvents' in value) || value['totalEvents'] === undefined) return false;
    if (!('totalWebhooks' in value) || value['totalWebhooks'] === undefined) return false;
    return true;
}

export function WebhookGlobalStatsFromJSON(json: any): WebhookGlobalStats {
    return WebhookGlobalStatsFromJSONTyped(json, false);
}

export function WebhookGlobalStatsFromJSONTyped(json: any, ignoreDiscriminator: boolean): WebhookGlobalStats {
    if (json == null) {
        return json;
    }
    return {
        
        '$schema': json['$schema'] == null ? undefined : json['$schema'],
        'activeWebhooks': json['activeWebhooks'],
        'averageResponseTime': json['averageResponseTime'],
        'eventsByType': json['eventsByType'],
        'eventsMonth': json['eventsMonth'],
        'eventsToday': json['eventsToday'],
        'eventsWeek': json['eventsWeek'],
        'failedEvents': json['failedEvents'],
        'overallSuccessRate': json['overallSuccessRate'],
        'recentFailures': (json['recentFailures'] == null ? null : (json['recentFailures'] as Array<any>).map(WebhookEventSummaryFromJSON)),
        'successfulEvents': json['successfulEvents'],
        'topWebhooks': (json['topWebhooks'] == null ? null : (json['topWebhooks'] as Array<any>).map(WebhookSummaryFromJSON)),
        'totalEvents': json['totalEvents'],
        'totalWebhooks': json['totalWebhooks'],
    };
}

export function WebhookGlobalStatsToJSON(json: any): WebhookGlobalStats {
    return WebhookGlobalStatsToJSONTyped(json, false);
}

export function WebhookGlobalStatsToJSONTyped(value?: Omit<WebhookGlobalStats, '$schema'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'activeWebhooks': value['activeWebhooks'],
        'averageResponseTime': value['averageResponseTime'],
        'eventsByType': value['eventsByType'],
        'eventsMonth': value['eventsMonth'],
        'eventsToday': value['eventsToday'],
        'eventsWeek': value['eventsWeek'],
        'failedEvents': value['failedEvents'],
        'overallSuccessRate': value['overallSuccessRate'],
        'recentFailures': (value['recentFailures'] == null ? null : (value['recentFailures'] as Array<any>).map(WebhookEventSummaryToJSON)),
        'successfulEvents': value['successfulEvents'],
        'topWebhooks': (value['topWebhooks'] == null ? null : (value['topWebhooks'] as Array<any>).map(WebhookSummaryToJSON)),
        'totalEvents': value['totalEvents'],
        'totalWebhooks': value['totalWebhooks'],
    };
}

