/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface MFASetupVerifyResponse
 */
export interface MFASetupVerifyResponse {
    [key: string]: any | any;
    /**
     * A URL to the JSON Schema for this object.
     * @type {string}
     * @memberof MFASetupVerifyResponse
     */
    readonly $schema?: string;
    /**
     * Generated backup codes (if requested)
     * @type {Array<string>}
     * @memberof MFASetupVerifyResponse
     */
    backupCodes?: Array<string>;
    /**
     * Whether the method is now verified and active
     * @type {boolean}
     * @memberof MFASetupVerifyResponse
     */
    isVerified: boolean;
    /**
     * Response message
     * @type {string}
     * @memberof MFASetupVerifyResponse
     */
    message: string;
    /**
     * MFA method type
     * @type {string}
     * @memberof MFASetupVerifyResponse
     */
    method: string;
    /**
     * MFA method ID
     * @type {string}
     * @memberof MFASetupVerifyResponse
     */
    methodId: string;
    /**
     * Whether verification was successful
     * @type {boolean}
     * @memberof MFASetupVerifyResponse
     */
    success: boolean;
}

/**
 * Check if a given object implements the MFASetupVerifyResponse interface.
 */
export function instanceOfMFASetupVerifyResponse(value: object): value is MFASetupVerifyResponse {
    if (!('isVerified' in value) || value['isVerified'] === undefined) return false;
    if (!('message' in value) || value['message'] === undefined) return false;
    if (!('method' in value) || value['method'] === undefined) return false;
    if (!('methodId' in value) || value['methodId'] === undefined) return false;
    if (!('success' in value) || value['success'] === undefined) return false;
    return true;
}

export function MFASetupVerifyResponseFromJSON(json: any): MFASetupVerifyResponse {
    return MFASetupVerifyResponseFromJSONTyped(json, false);
}

export function MFASetupVerifyResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): MFASetupVerifyResponse {
    if (json == null) {
        return json;
    }
    return {
        
            ...json,
        '$schema': json['$schema'] == null ? undefined : json['$schema'],
        'backupCodes': json['backupCodes'] == null ? undefined : json['backupCodes'],
        'isVerified': json['isVerified'],
        'message': json['message'],
        'method': json['method'],
        'methodId': json['methodId'],
        'success': json['success'],
    };
}

export function MFASetupVerifyResponseToJSON(json: any): MFASetupVerifyResponse {
    return MFASetupVerifyResponseToJSONTyped(json, false);
}

export function MFASetupVerifyResponseToJSONTyped(value?: Omit<MFASetupVerifyResponse, '$schema'> | null, ignoreDiscriminator = false): any {
    if (value == null) {
        return value;
    }

    return {
        
            ...value,
        'backupCodes': value['backupCodes'],
        'isVerified': value['isVerified'],
        'message': value['message'],
        'method': value['method'],
        'methodId': value['methodId'],
        'success': value['success'],
    };
}

