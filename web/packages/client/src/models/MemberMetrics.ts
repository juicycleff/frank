/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { MemberCohort } from './MemberCohort';
import {
    MemberCohortFromJSON,
    MemberCohortFromJSONTyped,
    MemberCohortToJSON,
    MemberCohortToJSONTyped,
} from './MemberCohort';
import type { MemberTrendPoint } from './MemberTrendPoint';
import {
    MemberTrendPointFromJSON,
    MemberTrendPointFromJSONTyped,
    MemberTrendPointToJSON,
    MemberTrendPointToJSONTyped,
} from './MemberTrendPoint';
import type { MemberActivitySummary } from './MemberActivitySummary';
import {
    MemberActivitySummaryFromJSON,
    MemberActivitySummaryFromJSONTyped,
    MemberActivitySummaryToJSON,
    MemberActivitySummaryToJSONTyped,
} from './MemberActivitySummary';
import type { MemberInviterSummary } from './MemberInviterSummary';
import {
    MemberInviterSummaryFromJSON,
    MemberInviterSummaryFromJSONTyped,
    MemberInviterSummaryToJSON,
    MemberInviterSummaryToJSONTyped,
} from './MemberInviterSummary';
import type { MemberRoleMetrics } from './MemberRoleMetrics';
import {
    MemberRoleMetricsFromJSON,
    MemberRoleMetricsFromJSONTyped,
    MemberRoleMetricsToJSON,
    MemberRoleMetricsToJSONTyped,
} from './MemberRoleMetrics';
import type { MemberAnniversary } from './MemberAnniversary';
import {
    MemberAnniversaryFromJSON,
    MemberAnniversaryFromJSONTyped,
    MemberAnniversaryToJSON,
    MemberAnniversaryToJSONTyped,
} from './MemberAnniversary';
import type { MemberSummary } from './MemberSummary';
import {
    MemberSummaryFromJSON,
    MemberSummaryFromJSONTyped,
    MemberSummaryToJSON,
    MemberSummaryToJSONTyped,
} from './MemberSummary';

/**
 * 
 * @export
 * @interface MemberMetrics
 */
export interface MemberMetrics {
    /**
     * A URL to the JSON Schema for this object.
     * @type {string}
     * @memberof MemberMetrics
     */
    readonly $schema?: string;
    /**
     * Active members at end of period
     * @type {number}
     * @memberof MemberMetrics
     */
    activeMembers: number;
    /**
     * Average member engagement score
     * @type {number}
     * @memberof MemberMetrics
     */
    averageEngagement: number;
    /**
     * Churn rate percentage
     * @type {number}
     * @memberof MemberMetrics
     */
    churnRate: number;
    /**
     * Member cohort analysis
     * @type {Array<MemberCohort>}
     * @memberof MemberMetrics
     */
    cohortData?: Array<MemberCohort> | null;
    /**
     * Average daily active users
     * @type {number}
     * @memberof MemberMetrics
     */
    dailyActiveUsers: number;
    /**
     * Members by department
     * @type {{ [key: string]: number; }}
     * @memberof MemberMetrics
     */
    departmentBreakdown?: { [key: string]: number; };
    /**
     * Period end date
     * @type {Date}
     * @memberof MemberMetrics
     */
    endDate: Date;
    /**
     * Members by region
     * @type {{ [key: string]: number; }}
     * @memberof MemberMetrics
     */
    geographicBreakdown?: { [key: string]: number; };
    /**
     * Growth rate percentage
     * @type {number}
     * @memberof MemberMetrics
     */
    growthRate: number;
    /**
     * Members who left in period
     * @type {number}
     * @memberof MemberMetrics
     */
    leftMembers: number;
    /**
     * Percentage of members who logged in
     * @type {number}
     * @memberof MemberMetrics
     */
    loginRate: number;
    /**
     * Average monthly active users
     * @type {number}
     * @memberof MemberMetrics
     */
    monthlyActiveUsers: number;
    /**
     * Net member growth in period
     * @type {number}
     * @memberof MemberMetrics
     */
    netGrowth: number;
    /**
     * New members added in period
     * @type {number}
     * @memberof MemberMetrics
     */
    newMembers: number;
    /**
     * Metrics period
     * @type {string}
     * @memberof MemberMetrics
     */
    period: string;
    /**
     * Recently joined members
     * @type {Array<MemberSummary>}
     * @memberof MemberMetrics
     */
    recentJoins?: Array<MemberSummary> | null;
    /**
     * Retention rate percentage
     * @type {number}
     * @memberof MemberMetrics
     */
    retentionRate: number;
    /**
     * Members by role
     * @type {{ [key: string]: MemberRoleMetrics; }}
     * @memberof MemberMetrics
     */
    roleBreakdown: { [key: string]: MemberRoleMetrics; };
    /**
     * Period start date
     * @type {Date}
     * @memberof MemberMetrics
     */
    startDate: Date;
    /**
     * Members by status
     * @type {{ [key: string]: number; }}
     * @memberof MemberMetrics
     */
    statusBreakdown: { [key: string]: number; };
    /**
     * Most active members
     * @type {Array<MemberActivitySummary>}
     * @memberof MemberMetrics
     */
    topActiveMembers?: Array<MemberActivitySummary> | null;
    /**
     * Top member inviters
     * @type {Array<MemberInviterSummary>}
     * @memberof MemberMetrics
     */
    topInviters?: Array<MemberInviterSummary> | null;
    /**
     * Total members at end of period
     * @type {number}
     * @memberof MemberMetrics
     */
    totalMembers: number;
    /**
     * Historical trend data points
     * @type {Array<MemberTrendPoint>}
     * @memberof MemberMetrics
     */
    trendData?: Array<MemberTrendPoint> | null;
    /**
     * Upcoming member anniversaries
     * @type {Array<MemberAnniversary>}
     * @memberof MemberMetrics
     */
    upcomingAnniversaries?: Array<MemberAnniversary> | null;
    /**
     * Average weekly active users
     * @type {number}
     * @memberof MemberMetrics
     */
    weeklyActiveUsers: number;
}

/**
 * Check if a given object implements the MemberMetrics interface.
 */
export function instanceOfMemberMetrics(value: object): value is MemberMetrics {
    if (!('activeMembers' in value) || value['activeMembers'] === undefined) return false;
    if (!('averageEngagement' in value) || value['averageEngagement'] === undefined) return false;
    if (!('churnRate' in value) || value['churnRate'] === undefined) return false;
    if (!('dailyActiveUsers' in value) || value['dailyActiveUsers'] === undefined) return false;
    if (!('endDate' in value) || value['endDate'] === undefined) return false;
    if (!('growthRate' in value) || value['growthRate'] === undefined) return false;
    if (!('leftMembers' in value) || value['leftMembers'] === undefined) return false;
    if (!('loginRate' in value) || value['loginRate'] === undefined) return false;
    if (!('monthlyActiveUsers' in value) || value['monthlyActiveUsers'] === undefined) return false;
    if (!('netGrowth' in value) || value['netGrowth'] === undefined) return false;
    if (!('newMembers' in value) || value['newMembers'] === undefined) return false;
    if (!('period' in value) || value['period'] === undefined) return false;
    if (!('retentionRate' in value) || value['retentionRate'] === undefined) return false;
    if (!('roleBreakdown' in value) || value['roleBreakdown'] === undefined) return false;
    if (!('startDate' in value) || value['startDate'] === undefined) return false;
    if (!('statusBreakdown' in value) || value['statusBreakdown'] === undefined) return false;
    if (!('totalMembers' in value) || value['totalMembers'] === undefined) return false;
    if (!('weeklyActiveUsers' in value) || value['weeklyActiveUsers'] === undefined) return false;
    return true;
}

export function MemberMetricsFromJSON(json: any): MemberMetrics {
    return MemberMetricsFromJSONTyped(json, false);
}

export function MemberMetricsFromJSONTyped(json: any, ignoreDiscriminator: boolean): MemberMetrics {
    if (json == null) {
        return json;
    }
    return {
        
        '$schema': json['$schema'] == null ? undefined : json['$schema'],
        'activeMembers': json['activeMembers'],
        'averageEngagement': json['averageEngagement'],
        'churnRate': json['churnRate'],
        'cohortData': json['cohortData'] == null ? undefined : ((json['cohortData'] as Array<any>).map(MemberCohortFromJSON)),
        'dailyActiveUsers': json['dailyActiveUsers'],
        'departmentBreakdown': json['departmentBreakdown'] == null ? undefined : json['departmentBreakdown'],
        'endDate': (new Date(json['endDate'])),
        'geographicBreakdown': json['geographicBreakdown'] == null ? undefined : json['geographicBreakdown'],
        'growthRate': json['growthRate'],
        'leftMembers': json['leftMembers'],
        'loginRate': json['loginRate'],
        'monthlyActiveUsers': json['monthlyActiveUsers'],
        'netGrowth': json['netGrowth'],
        'newMembers': json['newMembers'],
        'period': json['period'],
        'recentJoins': json['recentJoins'] == null ? undefined : ((json['recentJoins'] as Array<any>).map(MemberSummaryFromJSON)),
        'retentionRate': json['retentionRate'],
        'roleBreakdown': (mapValues(json['roleBreakdown'], MemberRoleMetricsFromJSON)),
        'startDate': (new Date(json['startDate'])),
        'statusBreakdown': json['statusBreakdown'],
        'topActiveMembers': json['topActiveMembers'] == null ? undefined : ((json['topActiveMembers'] as Array<any>).map(MemberActivitySummaryFromJSON)),
        'topInviters': json['topInviters'] == null ? undefined : ((json['topInviters'] as Array<any>).map(MemberInviterSummaryFromJSON)),
        'totalMembers': json['totalMembers'],
        'trendData': json['trendData'] == null ? undefined : ((json['trendData'] as Array<any>).map(MemberTrendPointFromJSON)),
        'upcomingAnniversaries': json['upcomingAnniversaries'] == null ? undefined : ((json['upcomingAnniversaries'] as Array<any>).map(MemberAnniversaryFromJSON)),
        'weeklyActiveUsers': json['weeklyActiveUsers'],
    };
}

export function MemberMetricsToJSON(json: any): MemberMetrics {
    return MemberMetricsToJSONTyped(json, false);
}

export function MemberMetricsToJSONTyped(value?: Omit<MemberMetrics, '$schema'> | null, ignoreDiscriminator = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'activeMembers': value['activeMembers'],
        'averageEngagement': value['averageEngagement'],
        'churnRate': value['churnRate'],
        'cohortData': value['cohortData'] == null ? undefined : ((value['cohortData'] as Array<any>).map(MemberCohortToJSON)),
        'dailyActiveUsers': value['dailyActiveUsers'],
        'departmentBreakdown': value['departmentBreakdown'],
        'endDate': ((value['endDate']).toISOString()),
        'geographicBreakdown': value['geographicBreakdown'],
        'growthRate': value['growthRate'],
        'leftMembers': value['leftMembers'],
        'loginRate': value['loginRate'],
        'monthlyActiveUsers': value['monthlyActiveUsers'],
        'netGrowth': value['netGrowth'],
        'newMembers': value['newMembers'],
        'period': value['period'],
        'recentJoins': value['recentJoins'] == null ? undefined : ((value['recentJoins'] as Array<any>).map(MemberSummaryToJSON)),
        'retentionRate': value['retentionRate'],
        'roleBreakdown': (mapValues(value['roleBreakdown'], MemberRoleMetricsToJSON)),
        'startDate': ((value['startDate']).toISOString()),
        'statusBreakdown': value['statusBreakdown'],
        'topActiveMembers': value['topActiveMembers'] == null ? undefined : ((value['topActiveMembers'] as Array<any>).map(MemberActivitySummaryToJSON)),
        'topInviters': value['topInviters'] == null ? undefined : ((value['topInviters'] as Array<any>).map(MemberInviterSummaryToJSON)),
        'totalMembers': value['totalMembers'],
        'trendData': value['trendData'] == null ? undefined : ((value['trendData'] as Array<any>).map(MemberTrendPointToJSON)),
        'upcomingAnniversaries': value['upcomingAnniversaries'] == null ? undefined : ((value['upcomingAnniversaries'] as Array<any>).map(MemberAnniversaryToJSON)),
        'weeklyActiveUsers': value['weeklyActiveUsers'],
    };
}

