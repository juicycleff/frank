/* tslint:disable */
/* eslint-disable */
/**
 * My Project
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    MemberActivitySummary,
    MemberActivitySummaryFromJSON,
    MemberActivitySummaryFromJSONTyped,
    MemberActivitySummaryToJSON,
    MemberAnniversary,
    MemberAnniversaryFromJSON,
    MemberAnniversaryFromJSONTyped,
    MemberAnniversaryToJSON,
    MemberCohort,
    MemberCohortFromJSON,
    MemberCohortFromJSONTyped,
    MemberCohortToJSON,
    MemberInviterSummary,
    MemberInviterSummaryFromJSON,
    MemberInviterSummaryFromJSONTyped,
    MemberInviterSummaryToJSON,
    MemberRoleMetrics,
    MemberRoleMetricsFromJSON,
    MemberRoleMetricsFromJSONTyped,
    MemberRoleMetricsToJSON,
    MemberTrendPoint,
    MemberTrendPointFromJSON,
    MemberTrendPointFromJSONTyped,
    MemberTrendPointToJSON,
} from './';

/**
 * 
 * @export
 * @interface MemberMetrics
 */
export interface MemberMetrics {
    /**
     * A URL to the JSON Schema for this object.
     * @type {string}
     * @memberof MemberMetrics
     */
    readonly $schema?: string;
    /**
     * Active members at end of period
     * @type {number}
     * @memberof MemberMetrics
     */
    activeMembers: number;
    /**
     * Average member engagement score
     * @type {number}
     * @memberof MemberMetrics
     */
    averageEngagement: number;
    /**
     * Churn rate percentage
     * @type {number}
     * @memberof MemberMetrics
     */
    churnRate: number;
    /**
     * Member cohort analysis
     * @type {Array<MemberCohort>}
     * @memberof MemberMetrics
     */
    cohortData?: Array<MemberCohort> | null;
    /**
     * Average daily active users
     * @type {number}
     * @memberof MemberMetrics
     */
    dailyActiveUsers: number;
    /**
     * Members by department
     * @type {{ [key: string]: number; }}
     * @memberof MemberMetrics
     */
    departmentBreakdown?: { [key: string]: number; };
    /**
     * Period end date
     * @type {Date}
     * @memberof MemberMetrics
     */
    endDate: Date;
    /**
     * Members by region
     * @type {{ [key: string]: number; }}
     * @memberof MemberMetrics
     */
    geographicBreakdown?: { [key: string]: number; };
    /**
     * Growth rate percentage
     * @type {number}
     * @memberof MemberMetrics
     */
    growthRate: number;
    /**
     * Members who left in period
     * @type {number}
     * @memberof MemberMetrics
     */
    leftMembers: number;
    /**
     * Percentage of members who logged in
     * @type {number}
     * @memberof MemberMetrics
     */
    loginRate: number;
    /**
     * Average monthly active users
     * @type {number}
     * @memberof MemberMetrics
     */
    monthlyActiveUsers: number;
    /**
     * Net member growth in period
     * @type {number}
     * @memberof MemberMetrics
     */
    netGrowth: number;
    /**
     * New members added in period
     * @type {number}
     * @memberof MemberMetrics
     */
    newMembers: number;
    /**
     * Metrics period
     * @type {string}
     * @memberof MemberMetrics
     */
    period: string;
    /**
     * Recently joined members
     * @type {Array<object>}
     * @memberof MemberMetrics
     */
    recentJoins?: Array<object> | null;
    /**
     * Retention rate percentage
     * @type {number}
     * @memberof MemberMetrics
     */
    retentionRate: number;
    /**
     * Members by role
     * @type {{ [key: string]: MemberRoleMetrics; }}
     * @memberof MemberMetrics
     */
    roleBreakdown: { [key: string]: MemberRoleMetrics; };
    /**
     * Period start date
     * @type {Date}
     * @memberof MemberMetrics
     */
    startDate: Date;
    /**
     * Members by status
     * @type {{ [key: string]: number; }}
     * @memberof MemberMetrics
     */
    statusBreakdown: { [key: string]: number; };
    /**
     * Most active members
     * @type {Array<MemberActivitySummary>}
     * @memberof MemberMetrics
     */
    topActiveMembers?: Array<MemberActivitySummary> | null;
    /**
     * Top member inviters
     * @type {Array<MemberInviterSummary>}
     * @memberof MemberMetrics
     */
    topInviters?: Array<MemberInviterSummary> | null;
    /**
     * Total members at end of period
     * @type {number}
     * @memberof MemberMetrics
     */
    totalMembers: number;
    /**
     * Historical trend data points
     * @type {Array<MemberTrendPoint>}
     * @memberof MemberMetrics
     */
    trendData?: Array<MemberTrendPoint> | null;
    /**
     * Upcoming member anniversaries
     * @type {Array<MemberAnniversary>}
     * @memberof MemberMetrics
     */
    upcomingAnniversaries?: Array<MemberAnniversary> | null;
    /**
     * Average weekly active users
     * @type {number}
     * @memberof MemberMetrics
     */
    weeklyActiveUsers: number;
}

export function MemberMetricsFromJSON(json: any): MemberMetrics {
    return MemberMetricsFromJSONTyped(json, false);
}

export function MemberMetricsFromJSONTyped(json: any, ignoreDiscriminator: boolean): MemberMetrics {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        '$schema': !exists(json, '$schema') ? undefined : json['$schema'],
        'activeMembers': json['activeMembers'],
        'averageEngagement': json['averageEngagement'],
        'churnRate': json['churnRate'],
        'cohortData': !exists(json, 'cohortData') ? undefined : (json['cohortData'] === null ? null : (json['cohortData'] as Array<any>).map(MemberCohortFromJSON)),
        'dailyActiveUsers': json['dailyActiveUsers'],
        'departmentBreakdown': !exists(json, 'departmentBreakdown') ? undefined : json['departmentBreakdown'],
        'endDate': (new Date(json['endDate'])),
        'geographicBreakdown': !exists(json, 'geographicBreakdown') ? undefined : json['geographicBreakdown'],
        'growthRate': json['growthRate'],
        'leftMembers': json['leftMembers'],
        'loginRate': json['loginRate'],
        'monthlyActiveUsers': json['monthlyActiveUsers'],
        'netGrowth': json['netGrowth'],
        'newMembers': json['newMembers'],
        'period': json['period'],
        'recentJoins': !exists(json, 'recentJoins') ? undefined : json['recentJoins'],
        'retentionRate': json['retentionRate'],
        'roleBreakdown': (mapValues(json['roleBreakdown'], MemberRoleMetricsFromJSON)),
        'startDate': (new Date(json['startDate'])),
        'statusBreakdown': json['statusBreakdown'],
        'topActiveMembers': !exists(json, 'topActiveMembers') ? undefined : (json['topActiveMembers'] === null ? null : (json['topActiveMembers'] as Array<any>).map(MemberActivitySummaryFromJSON)),
        'topInviters': !exists(json, 'topInviters') ? undefined : (json['topInviters'] === null ? null : (json['topInviters'] as Array<any>).map(MemberInviterSummaryFromJSON)),
        'totalMembers': json['totalMembers'],
        'trendData': !exists(json, 'trendData') ? undefined : (json['trendData'] === null ? null : (json['trendData'] as Array<any>).map(MemberTrendPointFromJSON)),
        'upcomingAnniversaries': !exists(json, 'upcomingAnniversaries') ? undefined : (json['upcomingAnniversaries'] === null ? null : (json['upcomingAnniversaries'] as Array<any>).map(MemberAnniversaryFromJSON)),
        'weeklyActiveUsers': json['weeklyActiveUsers'],
    };
}

export function MemberMetricsToJSON(value?: MemberMetrics | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'activeMembers': value.activeMembers,
        'averageEngagement': value.averageEngagement,
        'churnRate': value.churnRate,
        'cohortData': value.cohortData === undefined ? undefined : (value.cohortData === null ? null : (value.cohortData as Array<any>).map(MemberCohortToJSON)),
        'dailyActiveUsers': value.dailyActiveUsers,
        'departmentBreakdown': value.departmentBreakdown,
        'endDate': (value.endDate.toISOString()),
        'geographicBreakdown': value.geographicBreakdown,
        'growthRate': value.growthRate,
        'leftMembers': value.leftMembers,
        'loginRate': value.loginRate,
        'monthlyActiveUsers': value.monthlyActiveUsers,
        'netGrowth': value.netGrowth,
        'newMembers': value.newMembers,
        'period': value.period,
        'recentJoins': value.recentJoins,
        'retentionRate': value.retentionRate,
        'roleBreakdown': (mapValues(value.roleBreakdown, MemberRoleMetricsToJSON)),
        'startDate': (value.startDate.toISOString()),
        'statusBreakdown': value.statusBreakdown,
        'topActiveMembers': value.topActiveMembers === undefined ? undefined : (value.topActiveMembers === null ? null : (value.topActiveMembers as Array<any>).map(MemberActivitySummaryToJSON)),
        'topInviters': value.topInviters === undefined ? undefined : (value.topInviters === null ? null : (value.topInviters as Array<any>).map(MemberInviterSummaryToJSON)),
        'totalMembers': value.totalMembers,
        'trendData': value.trendData === undefined ? undefined : (value.trendData === null ? null : (value.trendData as Array<any>).map(MemberTrendPointToJSON)),
        'upcomingAnniversaries': value.upcomingAnniversaries === undefined ? undefined : (value.upcomingAnniversaries === null ? null : (value.upcomingAnniversaries as Array<any>).map(MemberAnniversaryToJSON)),
        'weeklyActiveUsers': value.weeklyActiveUsers,
    };
}


