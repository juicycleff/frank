/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface UpdateOrganizationRequest
 */
export interface UpdateOrganizationRequest {
    [key: string]: any | any;
    /**
     * A URL to the JSON Schema for this object.
     * @type {string}
     * @memberof UpdateOrganizationRequest
     */
    readonly $schema?: string;
    /**
     * Updated active status
     * @type {boolean}
     * @memberof UpdateOrganizationRequest
     */
    active?: boolean;
    /**
     * Updated API request limit
     * @type {number}
     * @memberof UpdateOrganizationRequest
     */
    apiRequestLimit?: number;
    /**
     * Updated auth config
     * @type {object}
     * @memberof UpdateOrganizationRequest
     */
    authConfig?: object;
    /**
     * Updated auth domain
     * @type {string}
     * @memberof UpdateOrganizationRequest
     */
    authDomain?: string;
    /**
     * Enable/disable auth service
     * @type {boolean}
     * @memberof UpdateOrganizationRequest
     */
    authServiceEnabled?: boolean;
    /**
     * Updated domain
     * @type {string}
     * @memberof UpdateOrganizationRequest
     */
    domain?: string;
    /**
     * Updated end user limit
     * @type {number}
     * @memberof UpdateOrganizationRequest
     */
    endUserLimit?: number;
    /**
     * Updated external user limit
     * @type {number}
     * @memberof UpdateOrganizationRequest
     */
    externalUserLimit?: number;
    /**
     * Updated logo URL
     * @type {string}
     * @memberof UpdateOrganizationRequest
     */
    logoUrl?: string;
    /**
     * Updated metadata
     * @type {object}
     * @memberof UpdateOrganizationRequest
     */
    metadata?: object;
    /**
     * Updated name
     * @type {string}
     * @memberof UpdateOrganizationRequest
     */
    name?: string;
    /**
     * Updated plan
     * @type {string}
     * @memberof UpdateOrganizationRequest
     */
    plan?: string;
    /**
     * Updated slug
     * @type {string}
     * @memberof UpdateOrganizationRequest
     */
    slug?: string;
    /**
     * Updated SSO domain
     * @type {string}
     * @memberof UpdateOrganizationRequest
     */
    ssoDomain?: string;
    /**
     * Enable/disable SSO
     * @type {boolean}
     * @memberof UpdateOrganizationRequest
     */
    ssoEnabled?: boolean;
}

/**
 * Check if a given object implements the UpdateOrganizationRequest interface.
 */
export function instanceOfUpdateOrganizationRequest(value: object): value is UpdateOrganizationRequest {
    return true;
}

export function UpdateOrganizationRequestFromJSON(json: any): UpdateOrganizationRequest {
    return UpdateOrganizationRequestFromJSONTyped(json, false);
}

export function UpdateOrganizationRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): UpdateOrganizationRequest {
    if (json == null) {
        return json;
    }
    return {
        
            ...json,
        '$schema': json['$schema'] == null ? undefined : json['$schema'],
        'active': json['active'] == null ? undefined : json['active'],
        'apiRequestLimit': json['apiRequestLimit'] == null ? undefined : json['apiRequestLimit'],
        'authConfig': json['authConfig'] == null ? undefined : json['authConfig'],
        'authDomain': json['authDomain'] == null ? undefined : json['authDomain'],
        'authServiceEnabled': json['authServiceEnabled'] == null ? undefined : json['authServiceEnabled'],
        'domain': json['domain'] == null ? undefined : json['domain'],
        'endUserLimit': json['endUserLimit'] == null ? undefined : json['endUserLimit'],
        'externalUserLimit': json['externalUserLimit'] == null ? undefined : json['externalUserLimit'],
        'logoUrl': json['logoUrl'] == null ? undefined : json['logoUrl'],
        'metadata': json['metadata'] == null ? undefined : json['metadata'],
        'name': json['name'] == null ? undefined : json['name'],
        'plan': json['plan'] == null ? undefined : json['plan'],
        'slug': json['slug'] == null ? undefined : json['slug'],
        'ssoDomain': json['ssoDomain'] == null ? undefined : json['ssoDomain'],
        'ssoEnabled': json['ssoEnabled'] == null ? undefined : json['ssoEnabled'],
    };
}

export function UpdateOrganizationRequestToJSON(json: any): UpdateOrganizationRequest {
    return UpdateOrganizationRequestToJSONTyped(json, false);
}

export function UpdateOrganizationRequestToJSONTyped(value?: Omit<UpdateOrganizationRequest, '$schema'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
            ...value,
        'active': value['active'],
        'apiRequestLimit': value['apiRequestLimit'],
        'authConfig': value['authConfig'],
        'authDomain': value['authDomain'],
        'authServiceEnabled': value['authServiceEnabled'],
        'domain': value['domain'],
        'endUserLimit': value['endUserLimit'],
        'externalUserLimit': value['externalUserLimit'],
        'logoUrl': value['logoUrl'],
        'metadata': value['metadata'],
        'name': value['name'],
        'plan': value['plan'],
        'slug': value['slug'],
        'ssoDomain': value['ssoDomain'],
        'ssoEnabled': value['ssoEnabled'],
    };
}

