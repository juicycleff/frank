/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Evidence } from './Evidence';
import {
    EvidenceFromJSON,
    EvidenceFromJSONTyped,
    EvidenceToJSON,
    EvidenceToJSONTyped,
} from './Evidence';

/**
 * 
 * @export
 * @interface TestResult
 */
export interface TestResult {
    /**
     * 
     * @type {Date}
     * @memberof TestResult
     */
    date: Date;
    /**
     * 
     * @type {string}
     * @memberof TestResult
     */
    details: string;
    /**
     * 
     * @type {Array<Evidence>}
     * @memberof TestResult
     */
    evidence: Array<Evidence> | null;
    /**
     * 
     * @type {string}
     * @memberof TestResult
     */
    result: string;
    /**
     * 
     * @type {string}
     * @memberof TestResult
     */
    tester: string;
}

/**
 * Check if a given object implements the TestResult interface.
 */
export function instanceOfTestResult(value: object): value is TestResult {
    if (!('date' in value) || value['date'] === undefined) return false;
    if (!('details' in value) || value['details'] === undefined) return false;
    if (!('evidence' in value) || value['evidence'] === undefined) return false;
    if (!('result' in value) || value['result'] === undefined) return false;
    if (!('tester' in value) || value['tester'] === undefined) return false;
    return true;
}

export function TestResultFromJSON(json: any): TestResult {
    return TestResultFromJSONTyped(json, false);
}

export function TestResultFromJSONTyped(json: any, ignoreDiscriminator: boolean): TestResult {
    if (json == null) {
        return json;
    }
    return {
        
        'date': (new Date(json['date'])),
        'details': json['details'],
        'evidence': (json['evidence'] == null ? null : (json['evidence'] as Array<any>).map(EvidenceFromJSON)),
        'result': json['result'],
        'tester': json['tester'],
    };
}

export function TestResultToJSON(json: any): TestResult {
    return TestResultToJSONTyped(json, false);
}

export function TestResultToJSONTyped(value?: TestResult | null, ignoreDiscriminator = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'date': ((value['date']).toISOString()),
        'details': value['details'],
        'evidence': (value['evidence'] == null ? null : (value['evidence'] as Array<any>).map(EvidenceToJSON)),
        'result': value['result'],
        'tester': value['tester'],
    };
}

