/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface SetupMFARequest
 */
export interface SetupMFARequest {
    /**
     * A URL to the JSON Schema for this object.
     * @type {string}
     * @memberof SetupMFARequest
     */
    readonly $schema?: string;
    /**
     * Email for email MFA (optional, uses user's primary email if not provided)
     * @type {string}
     * @memberof SetupMFARequest
     */
    email?: string;
    /**
     * MFA method type (totp, sms, email)
     * @type {string}
     * @memberof SetupMFARequest
     */
    method: string;
    /**
     * User-friendly name for the method
     * @type {string}
     * @memberof SetupMFARequest
     */
    name?: string;
    /**
     * Phone number for SMS MFA
     * @type {string}
     * @memberof SetupMFARequest
     */
    phoneNumber?: string;
}

/**
 * Check if a given object implements the SetupMFARequest interface.
 */
export function instanceOfSetupMFARequest(value: object): value is SetupMFARequest {
    if (!('method' in value) || value['method'] === undefined) return false;
    return true;
}

export function SetupMFARequestFromJSON(json: any): SetupMFARequest {
    return SetupMFARequestFromJSONTyped(json, false);
}

export function SetupMFARequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): SetupMFARequest {
    if (json == null) {
        return json;
    }
    return {
        
        '$schema': json['$schema'] == null ? undefined : json['$schema'],
        'email': json['email'] == null ? undefined : json['email'],
        'method': json['method'],
        'name': json['name'] == null ? undefined : json['name'],
        'phoneNumber': json['phoneNumber'] == null ? undefined : json['phoneNumber'],
    };
}

export function SetupMFARequestToJSON(json: any): SetupMFARequest {
    return SetupMFARequestToJSONTyped(json, false);
}

export function SetupMFARequestToJSONTyped(value?: Omit<SetupMFARequest, '$schema'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'email': value['email'],
        'method': value['method'],
        'name': value['name'],
        'phoneNumber': value['phoneNumber'],
    };
}

