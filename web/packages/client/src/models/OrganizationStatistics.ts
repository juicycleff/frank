/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { PlatformOrganizationActivity } from './PlatformOrganizationActivity';
import {
    PlatformOrganizationActivityFromJSON,
    PlatformOrganizationActivityFromJSONTyped,
    PlatformOrganizationActivityToJSON,
    PlatformOrganizationActivityToJSONTyped,
} from './PlatformOrganizationActivity';

/**
 * 
 * @export
 * @interface OrganizationStatistics
 */
export interface OrganizationStatistics {
    /**
     * Active organizations
     * @type {number}
     * @memberof OrganizationStatistics
     */
    active: number;
    /**
     * Average users per organization
     * @type {number}
     * @memberof OrganizationStatistics
     */
    averageUsers: number;
    /**
     * Organizations by industry
     * @type {{ [key: string]: number; }}
     * @memberof OrganizationStatistics
     */
    byIndustry: { [key: string]: number; };
    /**
     * Organizations by plan
     * @type {{ [key: string]: number; }}
     * @memberof OrganizationStatistics
     */
    byPlan: { [key: string]: number; };
    /**
     * Organizations by size
     * @type {{ [key: string]: number; }}
     * @memberof OrganizationStatistics
     */
    bySize: { [key: string]: number; };
    /**
     * Churned organizations this period
     * @type {number}
     * @memberof OrganizationStatistics
     */
    churned: number;
    /**
     * Most active organizations
     * @type {Array<PlatformOrganizationActivity>}
     * @memberof OrganizationStatistics
     */
    mostActive: Array<PlatformOrganizationActivity> | null;
    /**
     * New organizations this period
     * @type {number}
     * @memberof OrganizationStatistics
     */
    _new: number;
    /**
     * Total organizations
     * @type {number}
     * @memberof OrganizationStatistics
     */
    total: number;
}

/**
 * Check if a given object implements the OrganizationStatistics interface.
 */
export function instanceOfOrganizationStatistics(value: object): value is OrganizationStatistics {
    if (!('active' in value) || value['active'] === undefined) return false;
    if (!('averageUsers' in value) || value['averageUsers'] === undefined) return false;
    if (!('byIndustry' in value) || value['byIndustry'] === undefined) return false;
    if (!('byPlan' in value) || value['byPlan'] === undefined) return false;
    if (!('bySize' in value) || value['bySize'] === undefined) return false;
    if (!('churned' in value) || value['churned'] === undefined) return false;
    if (!('mostActive' in value) || value['mostActive'] === undefined) return false;
    if (!('_new' in value) || value['_new'] === undefined) return false;
    if (!('total' in value) || value['total'] === undefined) return false;
    return true;
}

export function OrganizationStatisticsFromJSON(json: any): OrganizationStatistics {
    return OrganizationStatisticsFromJSONTyped(json, false);
}

export function OrganizationStatisticsFromJSONTyped(json: any, ignoreDiscriminator: boolean): OrganizationStatistics {
    if (json == null) {
        return json;
    }
    return {
        
        'active': json['active'],
        'averageUsers': json['averageUsers'],
        'byIndustry': json['byIndustry'],
        'byPlan': json['byPlan'],
        'bySize': json['bySize'],
        'churned': json['churned'],
        'mostActive': (json['mostActive'] == null ? null : (json['mostActive'] as Array<any>).map(PlatformOrganizationActivityFromJSON)),
        '_new': json['new'],
        'total': json['total'],
    };
}

export function OrganizationStatisticsToJSON(json: any): OrganizationStatistics {
    return OrganizationStatisticsToJSONTyped(json, false);
}

export function OrganizationStatisticsToJSONTyped(value?: OrganizationStatistics | null, ignoreDiscriminator = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'active': value['active'],
        'averageUsers': value['averageUsers'],
        'byIndustry': value['byIndustry'],
        'byPlan': value['byPlan'],
        'bySize': value['bySize'],
        'churned': value['churned'],
        'mostActive': (value['mostActive'] == null ? null : (value['mostActive'] as Array<any>).map(PlatformOrganizationActivityToJSON)),
        'new': value['_new'],
        'total': value['total'],
    };
}

