/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Evidence } from './Evidence';
import {
    EvidenceFromJSON,
    EvidenceFromJSONTyped,
    EvidenceToJSON,
    EvidenceToJSONTyped,
} from './Evidence';
import type { ComplianceGap } from './ComplianceGap';
import {
    ComplianceGapFromJSON,
    ComplianceGapFromJSONTyped,
    ComplianceGapToJSON,
    ComplianceGapToJSONTyped,
} from './ComplianceGap';

/**
 * 
 * @export
 * @interface ControlStatus
 */
export interface ControlStatus {
    [key: string]: any | any;
    /**
     * 
     * @type {Array<Evidence>}
     * @memberof ControlStatus
     */
    evidence: Array<Evidence>;
    /**
     * 
     * @type {Array<ComplianceGap>}
     * @memberof ControlStatus
     */
    gaps: Array<ComplianceGap>;
    /**
     * 
     * @type {object}
     * @memberof ControlStatus
     */
    implementation: object;
    /**
     * 
     * @type {Date}
     * @memberof ControlStatus
     */
    lastAssessed: Date;
    /**
     * 
     * @type {number}
     * @memberof ControlStatus
     */
    score: number;
    /**
     * 
     * @type {string}
     * @memberof ControlStatus
     */
    status: string;
}

/**
 * Check if a given object implements the ControlStatus interface.
 */
export function instanceOfControlStatus(value: object): value is ControlStatus {
    if (!('evidence' in value) || value['evidence'] === undefined) return false;
    if (!('gaps' in value) || value['gaps'] === undefined) return false;
    if (!('implementation' in value) || value['implementation'] === undefined) return false;
    if (!('lastAssessed' in value) || value['lastAssessed'] === undefined) return false;
    if (!('score' in value) || value['score'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    return true;
}

export function ControlStatusFromJSON(json: any): ControlStatus {
    return ControlStatusFromJSONTyped(json, false);
}

export function ControlStatusFromJSONTyped(json: any, ignoreDiscriminator: boolean): ControlStatus {
    if (json == null) {
        return json;
    }
    return {
        
            ...json,
        'evidence': ((json['evidence'] as Array<any>).map(EvidenceFromJSON)),
        'gaps': ((json['gaps'] as Array<any>).map(ComplianceGapFromJSON)),
        'implementation': json['implementation'],
        'lastAssessed': (new Date(json['last_assessed'])),
        'score': json['score'],
        'status': json['status'],
    };
}

export function ControlStatusToJSON(json: any): ControlStatus {
    return ControlStatusToJSONTyped(json, false);
}

export function ControlStatusToJSONTyped(value?: ControlStatus | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
            ...value,
        'evidence': ((value['evidence'] as Array<any>).map(EvidenceToJSON)),
        'gaps': ((value['gaps'] as Array<any>).map(ComplianceGapToJSON)),
        'implementation': value['implementation'],
        'last_assessed': ((value['lastAssessed']).toISOString()),
        'score': value['score'],
        'status': value['status'],
    };
}

