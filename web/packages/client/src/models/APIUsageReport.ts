/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { APIErrorAnalysis } from './APIErrorAnalysis';
import {
    APIErrorAnalysisFromJSON,
    APIErrorAnalysisFromJSONTyped,
    APIErrorAnalysisToJSON,
    APIErrorAnalysisToJSONTyped,
} from './APIErrorAnalysis';
import type { APIUsageTrend } from './APIUsageTrend';
import {
    APIUsageTrendFromJSON,
    APIUsageTrendFromJSONTyped,
    APIUsageTrendToJSON,
    APIUsageTrendToJSONTyped,
} from './APIUsageTrend';
import type { EndpointUsage } from './EndpointUsage';
import {
    EndpointUsageFromJSON,
    EndpointUsageFromJSONTyped,
    EndpointUsageToJSON,
    EndpointUsageToJSONTyped,
} from './EndpointUsage';
import type { APIUsageOverview } from './APIUsageOverview';
import {
    APIUsageOverviewFromJSON,
    APIUsageOverviewFromJSONTyped,
    APIUsageOverviewToJSON,
    APIUsageOverviewToJSONTyped,
} from './APIUsageOverview';
import type { OrgAPIUsage } from './OrgAPIUsage';
import {
    OrgAPIUsageFromJSON,
    OrgAPIUsageFromJSONTyped,
    OrgAPIUsageToJSON,
    OrgAPIUsageToJSONTyped,
} from './OrgAPIUsage';

/**
 * 
 * @export
 * @interface APIUsageReport
 */
export interface APIUsageReport {
    /**
     * A URL to the JSON Schema for this object.
     * @type {string}
     * @memberof APIUsageReport
     */
    readonly $schema?: string;
    /**
     * 
     * @type {Array<EndpointUsage>}
     * @memberof APIUsageReport
     */
    byEndpoint: Array<EndpointUsage> | null;
    /**
     * 
     * @type {Array<OrgAPIUsage>}
     * @memberof APIUsageReport
     */
    byOrganization: Array<OrgAPIUsage> | null;
    /**
     * 
     * @type {APIErrorAnalysis}
     * @memberof APIUsageReport
     */
    errors: APIErrorAnalysis;
    /**
     * 
     * @type {Date}
     * @memberof APIUsageReport
     */
    generatedAt: Date;
    /**
     * 
     * @type {APIUsageOverview}
     * @memberof APIUsageReport
     */
    overview: APIUsageOverview;
    /**
     * 
     * @type {string}
     * @memberof APIUsageReport
     */
    period: string;
    /**
     * 
     * @type {Array<APIUsageTrend>}
     * @memberof APIUsageReport
     */
    trends: Array<APIUsageTrend> | null;
}

/**
 * Check if a given object implements the APIUsageReport interface.
 */
export function instanceOfAPIUsageReport(value: object): value is APIUsageReport {
    if (!('byEndpoint' in value) || value['byEndpoint'] === undefined) return false;
    if (!('byOrganization' in value) || value['byOrganization'] === undefined) return false;
    if (!('errors' in value) || value['errors'] === undefined) return false;
    if (!('generatedAt' in value) || value['generatedAt'] === undefined) return false;
    if (!('overview' in value) || value['overview'] === undefined) return false;
    if (!('period' in value) || value['period'] === undefined) return false;
    if (!('trends' in value) || value['trends'] === undefined) return false;
    return true;
}

export function APIUsageReportFromJSON(json: any): APIUsageReport {
    return APIUsageReportFromJSONTyped(json, false);
}

export function APIUsageReportFromJSONTyped(json: any, ignoreDiscriminator: boolean): APIUsageReport {
    if (json == null) {
        return json;
    }
    return {
        
        '$schema': json['$schema'] == null ? undefined : json['$schema'],
        'byEndpoint': (json['by_endpoint'] == null ? null : (json['by_endpoint'] as Array<any>).map(EndpointUsageFromJSON)),
        'byOrganization': (json['by_organization'] == null ? null : (json['by_organization'] as Array<any>).map(OrgAPIUsageFromJSON)),
        'errors': APIErrorAnalysisFromJSON(json['errors']),
        'generatedAt': (new Date(json['generated_at'])),
        'overview': APIUsageOverviewFromJSON(json['overview']),
        'period': json['period'],
        'trends': (json['trends'] == null ? null : (json['trends'] as Array<any>).map(APIUsageTrendFromJSON)),
    };
}

export function APIUsageReportToJSON(json: any): APIUsageReport {
    return APIUsageReportToJSONTyped(json, false);
}

export function APIUsageReportToJSONTyped(value?: Omit<APIUsageReport, '$schema'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'by_endpoint': (value['byEndpoint'] == null ? null : (value['byEndpoint'] as Array<any>).map(EndpointUsageToJSON)),
        'by_organization': (value['byOrganization'] == null ? null : (value['byOrganization'] as Array<any>).map(OrgAPIUsageToJSON)),
        'errors': APIErrorAnalysisToJSON(value['errors']),
        'generated_at': ((value['generatedAt']).toISOString()),
        'overview': APIUsageOverviewToJSON(value['overview']),
        'period': value['period'],
        'trends': (value['trends'] == null ? null : (value['trends'] as Array<any>).map(APIUsageTrendToJSON)),
    };
}

