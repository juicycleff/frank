/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { OrganizationSummary } from './OrganizationSummary';
import {
    OrganizationSummaryFromJSON,
    OrganizationSummaryFromJSONTyped,
    OrganizationSummaryToJSON,
    OrganizationSummaryToJSONTyped,
} from './OrganizationSummary';
import type { RoleType } from './RoleType';
import {
    RoleTypeFromJSON,
    RoleTypeFromJSONTyped,
    RoleTypeToJSON,
    RoleTypeToJSONTyped,
} from './RoleType';
import type { RoleAssignment } from './RoleAssignment';
import {
    RoleAssignmentFromJSON,
    RoleAssignmentFromJSONTyped,
    RoleAssignmentToJSON,
    RoleAssignmentToJSONTyped,
} from './RoleAssignment';
import type { Permission } from './Permission';
import {
    PermissionFromJSON,
    PermissionFromJSONTyped,
    PermissionToJSON,
    PermissionToJSONTyped,
} from './Permission';
import type { UserType } from './UserType';
import {
    UserTypeFromJSON,
    UserTypeFromJSONTyped,
    UserTypeToJSON,
    UserTypeToJSONTyped,
} from './UserType';
import type { RoleSummary } from './RoleSummary';
import {
    RoleSummaryFromJSON,
    RoleSummaryFromJSONTyped,
    RoleSummaryToJSON,
    RoleSummaryToJSONTyped,
} from './RoleSummary';

/**
 * 
 * @export
 * @interface Role
 */
export interface Role {
    [key: string]: any | any;
    /**
     * A URL to the JSON Schema for this object.
     * @type {string}
     * @memberof Role
     */
    readonly $schema?: string;
    /**
     * Whether role is active
     * @type {boolean}
     * @memberof Role
     */
    active: boolean;
    /**
     * User types this role applies to
     * @type {Array<UserType>}
     * @memberof Role
     */
    applicableUserTypes: Array<UserType>;
    /**
     * Application ID (if app-scoped)
     * @type {string}
     * @memberof Role
     */
    applicationId?: string;
    /**
     * Child roles
     * @type {Array<RoleSummary>}
     * @memberof Role
     */
    children?: Array<RoleSummary>;
    /**
     * Color for UI display
     * @type {string}
     * @memberof Role
     */
    color?: string;
    /**
     * 
     * @type {Date}
     * @memberof Role
     */
    createdAt: Date;
    /**
     * 
     * @type {string}
     * @memberof Role
     */
    createdBy: string;
    /**
     * Role description
     * @type {string}
     * @memberof Role
     */
    description?: string;
    /**
     * Human-readable role name
     * @type {string}
     * @memberof Role
     */
    displayName?: string;
    /**
     * 
     * @type {string}
     * @memberof Role
     */
    id: string;
    /**
     * Whether role is default for new users
     * @type {boolean}
     * @memberof Role
     */
    isDefault: boolean;
    /**
     * Metadata for role display
     * @type {object}
     * @memberof Role
     */
    metadata?: object;
    /**
     * Role name
     * @type {string}
     * @memberof Role
     */
    name: string;
    /**
     * Organization (if org-scoped)
     * @type {OrganizationSummary}
     * @memberof Role
     */
    organization?: OrganizationSummary;
    /**
     * Organization ID (if org-scoped)
     * @type {string}
     * @memberof Role
     */
    organizationId?: string;
    /**
     * Parent role
     * @type {RoleSummary}
     * @memberof Role
     */
    parent?: RoleSummary;
    /**
     * Parent role ID for hierarchy
     * @type {string}
     * @memberof Role
     */
    parentId?: string;
    /**
     * Permissions assigned to this role
     * @type {Array<Permission>}
     * @memberof Role
     */
    permissions?: Array<Permission>;
    /**
     * Role priority for hierarchy
     * @type {number}
     * @memberof Role
     */
    priority: number;
    /**
     * Role type (system, organization, application)
     * @type {RoleType}
     * @memberof Role
     */
    roleType: RoleType;
    /**
     * Whether role is system-managed
     * @type {boolean}
     * @memberof Role
     */
    system: boolean;
    /**
     * 
     * @type {Date}
     * @memberof Role
     */
    updatedAt: Date;
    /**
     * 
     * @type {string}
     * @memberof Role
     */
    updatedBy: string;
    /**
     * User assignments
     * @type {Array<RoleAssignment>}
     * @memberof Role
     */
    userAssignments?: Array<RoleAssignment>;
}



/**
 * Check if a given object implements the Role interface.
 */
export function instanceOfRole(value: object): value is Role {
    if (!('active' in value) || value['active'] === undefined) return false;
    if (!('applicableUserTypes' in value) || value['applicableUserTypes'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('createdBy' in value) || value['createdBy'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('isDefault' in value) || value['isDefault'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('priority' in value) || value['priority'] === undefined) return false;
    if (!('roleType' in value) || value['roleType'] === undefined) return false;
    if (!('system' in value) || value['system'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    if (!('updatedBy' in value) || value['updatedBy'] === undefined) return false;
    return true;
}

export function RoleFromJSON(json: any): Role {
    return RoleFromJSONTyped(json, false);
}

export function RoleFromJSONTyped(json: any, ignoreDiscriminator: boolean): Role {
    if (json == null) {
        return json;
    }
    return {
        
            ...json,
        '$schema': json['$schema'] == null ? undefined : json['$schema'],
        'active': json['active'],
        'applicableUserTypes': ((json['applicableUserTypes'] as Array<any>).map(UserTypeFromJSON)),
        'applicationId': json['applicationId'] == null ? undefined : json['applicationId'],
        'children': json['children'] == null ? undefined : ((json['children'] as Array<any>).map(RoleSummaryFromJSON)),
        'color': json['color'] == null ? undefined : json['color'],
        'createdAt': (new Date(json['createdAt'])),
        'createdBy': json['createdBy'],
        'description': json['description'] == null ? undefined : json['description'],
        'displayName': json['displayName'] == null ? undefined : json['displayName'],
        'id': json['id'],
        'isDefault': json['isDefault'],
        'metadata': json['metadata'] == null ? undefined : json['metadata'],
        'name': json['name'],
        'organization': json['organization'] == null ? undefined : OrganizationSummaryFromJSON(json['organization']),
        'organizationId': json['organizationId'] == null ? undefined : json['organizationId'],
        'parent': json['parent'] == null ? undefined : RoleSummaryFromJSON(json['parent']),
        'parentId': json['parentId'] == null ? undefined : json['parentId'],
        'permissions': json['permissions'] == null ? undefined : ((json['permissions'] as Array<any>).map(PermissionFromJSON)),
        'priority': json['priority'],
        'roleType': RoleTypeFromJSON(json['roleType']),
        'system': json['system'],
        'updatedAt': (new Date(json['updatedAt'])),
        'updatedBy': json['updatedBy'],
        'userAssignments': json['userAssignments'] == null ? undefined : ((json['userAssignments'] as Array<any>).map(RoleAssignmentFromJSON)),
    };
}

export function RoleToJSON(json: any): Role {
    return RoleToJSONTyped(json, false);
}

export function RoleToJSONTyped(value?: Omit<Role, '$schema'> | null, ignoreDiscriminator = false): any {
    if (value == null) {
        return value;
    }

    return {
        
            ...value,
        'active': value['active'],
        'applicableUserTypes': ((value['applicableUserTypes'] as Array<any>).map(UserTypeToJSON)),
        'applicationId': value['applicationId'],
        'children': value['children'] == null ? undefined : ((value['children'] as Array<any>).map(RoleSummaryToJSON)),
        'color': value['color'],
        'createdAt': ((value['createdAt']).toISOString()),
        'createdBy': value['createdBy'],
        'description': value['description'],
        'displayName': value['displayName'],
        'id': value['id'],
        'isDefault': value['isDefault'],
        'metadata': value['metadata'],
        'name': value['name'],
        'organization': OrganizationSummaryToJSON(value['organization']),
        'organizationId': value['organizationId'],
        'parent': RoleSummaryToJSON(value['parent']),
        'parentId': value['parentId'],
        'permissions': value['permissions'] == null ? undefined : ((value['permissions'] as Array<any>).map(PermissionToJSON)),
        'priority': value['priority'],
        'roleType': RoleTypeToJSON(value['roleType']),
        'system': value['system'],
        'updatedAt': ((value['updatedAt']).toISOString()),
        'updatedBy': value['updatedBy'],
        'userAssignments': value['userAssignments'] == null ? undefined : ((value['userAssignments'] as Array<any>).map(RoleAssignmentToJSON)),
    };
}

