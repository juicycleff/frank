/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ImpersonationResponse
 */
export interface ImpersonationResponse {
    /**
     * A URL to the JSON Schema for this object.
     * @type {string}
     * @memberof ImpersonationResponse
     */
    readonly $schema?: string;
    /**
     * 
     * @type {Date}
     * @memberof ImpersonationResponse
     */
    expiresAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof ImpersonationResponse
     */
    impersonatedUserId: string;
    /**
     * 
     * @type {string}
     * @memberof ImpersonationResponse
     */
    impersonationId: string;
    /**
     * 
     * @type {string}
     * @memberof ImpersonationResponse
     */
    impersonationUrl: string;
    /**
     * 
     * @type {string}
     * @memberof ImpersonationResponse
     */
    originalUserId: string;
    /**
     * 
     * @type {boolean}
     * @memberof ImpersonationResponse
     */
    success: boolean;
}

/**
 * Check if a given object implements the ImpersonationResponse interface.
 */
export function instanceOfImpersonationResponse(value: object): value is ImpersonationResponse {
    if (!('impersonatedUserId' in value) || value['impersonatedUserId'] === undefined) return false;
    if (!('impersonationId' in value) || value['impersonationId'] === undefined) return false;
    if (!('impersonationUrl' in value) || value['impersonationUrl'] === undefined) return false;
    if (!('originalUserId' in value) || value['originalUserId'] === undefined) return false;
    if (!('success' in value) || value['success'] === undefined) return false;
    return true;
}

export function ImpersonationResponseFromJSON(json: any): ImpersonationResponse {
    return ImpersonationResponseFromJSONTyped(json, false);
}

export function ImpersonationResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): ImpersonationResponse {
    if (json == null) {
        return json;
    }
    return {
        
        '$schema': json['$schema'] == null ? undefined : json['$schema'],
        'expiresAt': json['expiresAt'] == null ? undefined : (new Date(json['expiresAt'])),
        'impersonatedUserId': json['impersonatedUserId'],
        'impersonationId': json['impersonationId'],
        'impersonationUrl': json['impersonationUrl'],
        'originalUserId': json['originalUserId'],
        'success': json['success'],
    };
}

export function ImpersonationResponseToJSON(json: any): ImpersonationResponse {
    return ImpersonationResponseToJSONTyped(json, false);
}

export function ImpersonationResponseToJSONTyped(value?: Omit<ImpersonationResponse, '$schema'> | null, ignoreDiscriminator = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'expiresAt': value['expiresAt'] == null ? undefined : ((value['expiresAt']).toISOString()),
        'impersonatedUserId': value['impersonatedUserId'],
        'impersonationId': value['impersonationId'],
        'impersonationUrl': value['impersonationUrl'],
        'originalUserId': value['originalUserId'],
        'success': value['success'],
    };
}

