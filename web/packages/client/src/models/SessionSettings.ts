/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface SessionSettings
 */
export interface SessionSettings {
    /**
     * Maximum concurrent sessions per user
     * @type {number}
     * @memberof SessionSettings
     */
    maxConcurrentSessions: number;
    /**
     * Remember me duration in seconds
     * @type {number}
     * @memberof SessionSettings
     */
    rememberMeDuration: number;
    /**
     * Actions requiring re-authentication
     * @type {Array<string>}
     * @memberof SessionSettings
     */
    requireReauth?: Array<string> | null;
    /**
     * Session timeout in seconds
     * @type {number}
     * @memberof SessionSettings
     */
    sessionTimeout: number;
}

/**
 * Check if a given object implements the SessionSettings interface.
 */
export function instanceOfSessionSettings(value: object): value is SessionSettings {
    if (!('maxConcurrentSessions' in value) || value['maxConcurrentSessions'] === undefined) return false;
    if (!('rememberMeDuration' in value) || value['rememberMeDuration'] === undefined) return false;
    if (!('sessionTimeout' in value) || value['sessionTimeout'] === undefined) return false;
    return true;
}

export function SessionSettingsFromJSON(json: any): SessionSettings {
    return SessionSettingsFromJSONTyped(json, false);
}

export function SessionSettingsFromJSONTyped(json: any, ignoreDiscriminator: boolean): SessionSettings {
    if (json == null) {
        return json;
    }
    return {
        
        'maxConcurrentSessions': json['maxConcurrentSessions'],
        'rememberMeDuration': json['rememberMeDuration'],
        'requireReauth': json['requireReauth'] == null ? undefined : json['requireReauth'],
        'sessionTimeout': json['sessionTimeout'],
    };
}

export function SessionSettingsToJSON(json: any): SessionSettings {
    return SessionSettingsToJSONTyped(json, false);
}

export function SessionSettingsToJSONTyped(value?: SessionSettings | null, ignoreDiscriminator = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'maxConcurrentSessions': value['maxConcurrentSessions'],
        'rememberMeDuration': value['rememberMeDuration'],
        'requireReauth': value['requireReauth'],
        'sessionTimeout': value['sessionTimeout'],
    };
}

