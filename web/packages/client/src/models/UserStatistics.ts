/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CountryUserStats } from './CountryUserStats';
import {
    CountryUserStatsFromJSON,
    CountryUserStatsFromJSONTyped,
    CountryUserStatsToJSON,
    CountryUserStatsToJSONTyped,
} from './CountryUserStats';

/**
 * 
 * @export
 * @interface UserStatistics
 */
export interface UserStatistics {
    /**
     * Active users
     * @type {number}
     * @memberof UserStatistics
     */
    active: number;
    /**
     * Users by MFA status
     * @type {{ [key: string]: number; }}
     * @memberof UserStatistics
     */
    byMFA: { [key: string]: number; };
    /**
     * Users by SSO usage
     * @type {{ [key: string]: number; }}
     * @memberof UserStatistics
     */
    bySSO: { [key: string]: number; };
    /**
     * Users by type
     * @type {{ [key: string]: number; }}
     * @memberof UserStatistics
     */
    byType: { [key: string]: number; };
    /**
     * Churned users this period
     * @type {number}
     * @memberof UserStatistics
     */
    churned: number;
    /**
     * Login distribution by device
     * @type {{ [key: string]: number; }}
     * @memberof UserStatistics
     */
    deviceTypes: { [key: string]: number; };
    /**
     * New users this period
     * @type {number}
     * @memberof UserStatistics
     */
    _new: number;
    /**
     * User distribution by country
     * @type {Array<CountryUserStats>}
     * @memberof UserStatistics
     */
    topCountries: Array<CountryUserStats> | null;
    /**
     * Total users
     * @type {number}
     * @memberof UserStatistics
     */
    total: number;
}

/**
 * Check if a given object implements the UserStatistics interface.
 */
export function instanceOfUserStatistics(value: object): value is UserStatistics {
    if (!('active' in value) || value['active'] === undefined) return false;
    if (!('byMFA' in value) || value['byMFA'] === undefined) return false;
    if (!('bySSO' in value) || value['bySSO'] === undefined) return false;
    if (!('byType' in value) || value['byType'] === undefined) return false;
    if (!('churned' in value) || value['churned'] === undefined) return false;
    if (!('deviceTypes' in value) || value['deviceTypes'] === undefined) return false;
    if (!('_new' in value) || value['_new'] === undefined) return false;
    if (!('topCountries' in value) || value['topCountries'] === undefined) return false;
    if (!('total' in value) || value['total'] === undefined) return false;
    return true;
}

export function UserStatisticsFromJSON(json: any): UserStatistics {
    return UserStatisticsFromJSONTyped(json, false);
}

export function UserStatisticsFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserStatistics {
    if (json == null) {
        return json;
    }
    return {
        
        'active': json['active'],
        'byMFA': json['byMFA'],
        'bySSO': json['bySSO'],
        'byType': json['byType'],
        'churned': json['churned'],
        'deviceTypes': json['deviceTypes'],
        '_new': json['new'],
        'topCountries': (json['topCountries'] == null ? null : (json['topCountries'] as Array<any>).map(CountryUserStatsFromJSON)),
        'total': json['total'],
    };
}

export function UserStatisticsToJSON(json: any): UserStatistics {
    return UserStatisticsToJSONTyped(json, false);
}

export function UserStatisticsToJSONTyped(value?: UserStatistics | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'active': value['active'],
        'byMFA': value['byMFA'],
        'bySSO': value['bySSO'],
        'byType': value['byType'],
        'churned': value['churned'],
        'deviceTypes': value['deviceTypes'],
        'new': value['_new'],
        'topCountries': (value['topCountries'] == null ? null : (value['topCountries'] as Array<any>).map(CountryUserStatsToJSON)),
        'total': value['total'],
    };
}

