/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { OrganizationSummary } from './OrganizationSummary';
import {
    OrganizationSummaryFromJSON,
    OrganizationSummaryFromJSONTyped,
    OrganizationSummaryToJSON,
    OrganizationSummaryToJSONTyped,
} from './OrganizationSummary';
import type { IdentityProvider } from './IdentityProvider';
import {
    IdentityProviderFromJSON,
    IdentityProviderFromJSONTyped,
    IdentityProviderToJSON,
    IdentityProviderToJSONTyped,
} from './IdentityProvider';
import type { ProviderTemplate } from './ProviderTemplate';
import {
    ProviderTemplateFromJSON,
    ProviderTemplateFromJSONTyped,
    ProviderTemplateToJSON,
    ProviderTemplateToJSONTyped,
} from './ProviderTemplate';

/**
 * 
 * @export
 * @interface OrganizationProvider
 */
export interface OrganizationProvider {
    [key: string]: any | any;
    /**
     * Additional analytics data
     * @type {object}
     * @memberof OrganizationProvider
     */
    analyticsData?: object;
    /**
     * Average response time in milliseconds
     * @type {number}
     * @memberof OrganizationProvider
     */
    averageResponseTime: number;
    /**
     * Number of configuration errors
     * @type {number}
     * @memberof OrganizationProvider
     */
    configErrors: number;
    /**
     * 
     * @type {Date}
     * @memberof OrganizationProvider
     */
    createdAt: Date;
    /**
     * Custom configuration overrides
     * @type {object}
     * @memberof OrganizationProvider
     */
    customConfig?: object;
    /**
     * Whether provider is enabled
     * @type {boolean}
     * @memberof OrganizationProvider
     */
    enabled: boolean;
    /**
     * When provider was enabled
     * @type {Date}
     * @memberof OrganizationProvider
     */
    enabledAt: Date;
    /**
     * Failed logins
     * @type {number}
     * @memberof OrganizationProvider
     */
    failedLogins: number;
    /**
     * 
     * @type {string}
     * @memberof OrganizationProvider
     */
    id: string;
    /**
     * Last failed authentication
     * @type {Date}
     * @memberof OrganizationProvider
     */
    lastFailure?: Date;
    /**
     * Last successful authentication
     * @type {Date}
     * @memberof OrganizationProvider
     */
    lastSuccess?: Date;
    /**
     * Last authentication time
     * @type {Date}
     * @memberof OrganizationProvider
     */
    lastUsed?: Date;
    /**
     * Additional metadata
     * @type {object}
     * @memberof OrganizationProvider
     */
    metadata?: object;
    /**
     * Organization information
     * @type {OrganizationSummary}
     * @memberof OrganizationProvider
     */
    organization?: OrganizationSummary;
    /**
     * Organization ID
     * @type {string}
     * @memberof OrganizationProvider
     */
    organizationId: string;
    /**
     * Identity provider information
     * @type {IdentityProvider}
     * @memberof OrganizationProvider
     */
    provider?: IdentityProvider;
    /**
     * Identity Provider ID
     * @type {string}
     * @memberof OrganizationProvider
     */
    providerId: string;
    /**
     * Authentication success rate
     * @type {number}
     * @memberof OrganizationProvider
     */
    successRate: number;
    /**
     * Successful logins
     * @type {number}
     * @memberof OrganizationProvider
     */
    successfulLogins: number;
    /**
     * Provider template information
     * @type {ProviderTemplate}
     * @memberof OrganizationProvider
     */
    template?: ProviderTemplate;
    /**
     * Template key used
     * @type {string}
     * @memberof OrganizationProvider
     */
    templateKey: string;
    /**
     * Total login attempts
     * @type {number}
     * @memberof OrganizationProvider
     */
    totalLogins: number;
    /**
     * 
     * @type {Date}
     * @memberof OrganizationProvider
     */
    updatedAt: Date;
    /**
     * Number of times used
     * @type {number}
     * @memberof OrganizationProvider
     */
    usageCount: number;
}

/**
 * Check if a given object implements the OrganizationProvider interface.
 */
export function instanceOfOrganizationProvider(value: object): value is OrganizationProvider {
    if (!('averageResponseTime' in value) || value['averageResponseTime'] === undefined) return false;
    if (!('configErrors' in value) || value['configErrors'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('enabled' in value) || value['enabled'] === undefined) return false;
    if (!('enabledAt' in value) || value['enabledAt'] === undefined) return false;
    if (!('failedLogins' in value) || value['failedLogins'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('organizationId' in value) || value['organizationId'] === undefined) return false;
    if (!('providerId' in value) || value['providerId'] === undefined) return false;
    if (!('successRate' in value) || value['successRate'] === undefined) return false;
    if (!('successfulLogins' in value) || value['successfulLogins'] === undefined) return false;
    if (!('templateKey' in value) || value['templateKey'] === undefined) return false;
    if (!('totalLogins' in value) || value['totalLogins'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    if (!('usageCount' in value) || value['usageCount'] === undefined) return false;
    return true;
}

export function OrganizationProviderFromJSON(json: any): OrganizationProvider {
    return OrganizationProviderFromJSONTyped(json, false);
}

export function OrganizationProviderFromJSONTyped(json: any, ignoreDiscriminator: boolean): OrganizationProvider {
    if (json == null) {
        return json;
    }
    return {
        
            ...json,
        'analyticsData': json['analyticsData'] == null ? undefined : json['analyticsData'],
        'averageResponseTime': json['averageResponseTime'],
        'configErrors': json['configErrors'],
        'createdAt': (new Date(json['createdAt'])),
        'customConfig': json['customConfig'] == null ? undefined : json['customConfig'],
        'enabled': json['enabled'],
        'enabledAt': (new Date(json['enabledAt'])),
        'failedLogins': json['failedLogins'],
        'id': json['id'],
        'lastFailure': json['lastFailure'] == null ? undefined : (new Date(json['lastFailure'])),
        'lastSuccess': json['lastSuccess'] == null ? undefined : (new Date(json['lastSuccess'])),
        'lastUsed': json['lastUsed'] == null ? undefined : (new Date(json['lastUsed'])),
        'metadata': json['metadata'] == null ? undefined : json['metadata'],
        'organization': json['organization'] == null ? undefined : OrganizationSummaryFromJSON(json['organization']),
        'organizationId': json['organizationId'],
        'provider': json['provider'] == null ? undefined : IdentityProviderFromJSON(json['provider']),
        'providerId': json['providerId'],
        'successRate': json['successRate'],
        'successfulLogins': json['successfulLogins'],
        'template': json['template'] == null ? undefined : ProviderTemplateFromJSON(json['template']),
        'templateKey': json['templateKey'],
        'totalLogins': json['totalLogins'],
        'updatedAt': (new Date(json['updatedAt'])),
        'usageCount': json['usageCount'],
    };
}

export function OrganizationProviderToJSON(json: any): OrganizationProvider {
    return OrganizationProviderToJSONTyped(json, false);
}

export function OrganizationProviderToJSONTyped(value?: OrganizationProvider | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
            ...value,
        'analyticsData': value['analyticsData'],
        'averageResponseTime': value['averageResponseTime'],
        'configErrors': value['configErrors'],
        'createdAt': ((value['createdAt']).toISOString()),
        'customConfig': value['customConfig'],
        'enabled': value['enabled'],
        'enabledAt': ((value['enabledAt']).toISOString()),
        'failedLogins': value['failedLogins'],
        'id': value['id'],
        'lastFailure': value['lastFailure'] == null ? undefined : ((value['lastFailure']).toISOString()),
        'lastSuccess': value['lastSuccess'] == null ? undefined : ((value['lastSuccess']).toISOString()),
        'lastUsed': value['lastUsed'] == null ? undefined : ((value['lastUsed']).toISOString()),
        'metadata': value['metadata'],
        'organization': OrganizationSummaryToJSON(value['organization']),
        'organizationId': value['organizationId'],
        'provider': IdentityProviderToJSON(value['provider']),
        'providerId': value['providerId'],
        'successRate': value['successRate'],
        'successfulLogins': value['successfulLogins'],
        'template': ProviderTemplateToJSON(value['template']),
        'templateKey': value['templateKey'],
        'totalLogins': value['totalLogins'],
        'updatedAt': ((value['updatedAt']).toISOString()),
        'usageCount': value['usageCount'],
    };
}

