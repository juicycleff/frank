/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { AuthMethodUsage } from './AuthMethodUsage';
import {
    AuthMethodUsageFromJSON,
    AuthMethodUsageFromJSONTyped,
    AuthMethodUsageToJSON,
    AuthMethodUsageToJSONTyped,
} from './AuthMethodUsage';
import type { SSOUsageStats } from './SSOUsageStats';
import {
    SSOUsageStatsFromJSON,
    SSOUsageStatsFromJSONTyped,
    SSOUsageStatsToJSON,
    SSOUsageStatsToJSONTyped,
} from './SSOUsageStats';
import type { MFAUsageStats } from './MFAUsageStats';
import {
    MFAUsageStatsFromJSON,
    MFAUsageStatsFromJSONTyped,
    MFAUsageStatsToJSON,
    MFAUsageStatsToJSONTyped,
} from './MFAUsageStats';
import type { SessionAnalytics } from './SessionAnalytics';
import {
    SessionAnalyticsFromJSON,
    SessionAnalyticsFromJSONTyped,
    SessionAnalyticsToJSON,
    SessionAnalyticsToJSONTyped,
} from './SessionAnalytics';
import type { PasskeyUsageStats } from './PasskeyUsageStats';
import {
    PasskeyUsageStatsFromJSON,
    PasskeyUsageStatsFromJSONTyped,
    PasskeyUsageStatsToJSON,
    PasskeyUsageStatsToJSONTyped,
} from './PasskeyUsageStats';

/**
 * 
 * @export
 * @interface AuthUsageAnalytics
 */
export interface AuthUsageAnalytics {
    /**
     * 
     * @type {Array<AuthMethodUsage>}
     * @memberof AuthUsageAnalytics
     */
    loginMethods: Array<AuthMethodUsage> | null;
    /**
     * 
     * @type {MFAUsageStats}
     * @memberof AuthUsageAnalytics
     */
    mfaUsage: MFAUsageStats;
    /**
     * 
     * @type {PasskeyUsageStats}
     * @memberof AuthUsageAnalytics
     */
    passkeyUsage: PasskeyUsageStats;
    /**
     * 
     * @type {SessionAnalytics}
     * @memberof AuthUsageAnalytics
     */
    sessionAnalytics: SessionAnalytics;
    /**
     * 
     * @type {SSOUsageStats}
     * @memberof AuthUsageAnalytics
     */
    ssoUsage: SSOUsageStats;
}

/**
 * Check if a given object implements the AuthUsageAnalytics interface.
 */
export function instanceOfAuthUsageAnalytics(value: object): value is AuthUsageAnalytics {
    if (!('loginMethods' in value) || value['loginMethods'] === undefined) return false;
    if (!('mfaUsage' in value) || value['mfaUsage'] === undefined) return false;
    if (!('passkeyUsage' in value) || value['passkeyUsage'] === undefined) return false;
    if (!('sessionAnalytics' in value) || value['sessionAnalytics'] === undefined) return false;
    if (!('ssoUsage' in value) || value['ssoUsage'] === undefined) return false;
    return true;
}

export function AuthUsageAnalyticsFromJSON(json: any): AuthUsageAnalytics {
    return AuthUsageAnalyticsFromJSONTyped(json, false);
}

export function AuthUsageAnalyticsFromJSONTyped(json: any, ignoreDiscriminator: boolean): AuthUsageAnalytics {
    if (json == null) {
        return json;
    }
    return {
        
        'loginMethods': (json['login_methods'] == null ? null : (json['login_methods'] as Array<any>).map(AuthMethodUsageFromJSON)),
        'mfaUsage': MFAUsageStatsFromJSON(json['mfa_usage']),
        'passkeyUsage': PasskeyUsageStatsFromJSON(json['passkey_usage']),
        'sessionAnalytics': SessionAnalyticsFromJSON(json['session_analytics']),
        'ssoUsage': SSOUsageStatsFromJSON(json['sso_usage']),
    };
}

export function AuthUsageAnalyticsToJSON(json: any): AuthUsageAnalytics {
    return AuthUsageAnalyticsToJSONTyped(json, false);
}

export function AuthUsageAnalyticsToJSONTyped(value?: AuthUsageAnalytics | null, ignoreDiscriminator = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'login_methods': (value['loginMethods'] == null ? null : (value['loginMethods'] as Array<any>).map(AuthMethodUsageToJSON)),
        'mfa_usage': MFAUsageStatsToJSON(value['mfaUsage']),
        'passkey_usage': PasskeyUsageStatsToJSON(value['passkeyUsage']),
        'session_analytics': SessionAnalyticsToJSON(value['sessionAnalytics']),
        'sso_usage': SSOUsageStatsToJSON(value['ssoUsage']),
    };
}

