/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { WebhookSummary } from './WebhookSummary';
import {
    WebhookSummaryFromJSON,
    WebhookSummaryFromJSONTyped,
    WebhookSummaryToJSON,
    WebhookSummaryToJSONTyped,
} from './WebhookSummary';

/**
 * 
 * @export
 * @interface WebhookEvent
 */
export interface WebhookEvent {
    [key: string]: any | any;
    /**
     * A URL to the JSON Schema for this object.
     * @type {string}
     * @memberof WebhookEvent
     */
    readonly $schema?: string;
    /**
     * Number of delivery attempts
     * @type {number}
     * @memberof WebhookEvent
     */
    attempts: number;
    /**
     * 
     * @type {Date}
     * @memberof WebhookEvent
     */
    createdAt: Date;
    /**
     * Whether event was delivered successfully
     * @type {boolean}
     * @memberof WebhookEvent
     */
    delivered: boolean;
    /**
     * Delivery timestamp
     * @type {Date}
     * @memberof WebhookEvent
     */
    deliveredAt?: Date;
    /**
     * Request duration in milliseconds
     * @type {number}
     * @memberof WebhookEvent
     */
    duration?: number;
    /**
     * Error message if delivery failed
     * @type {string}
     * @memberof WebhookEvent
     */
    error?: string;
    /**
     * Event type
     * @type {string}
     * @memberof WebhookEvent
     */
    eventType: string;
    /**
     * Request headers sent
     * @type {{ [key: string]: string; }}
     * @memberof WebhookEvent
     */
    headers?: { [key: string]: string; };
    /**
     * 
     * @type {string}
     * @memberof WebhookEvent
     */
    id: string;
    /**
     * Next retry timestamp
     * @type {Date}
     * @memberof WebhookEvent
     */
    nextRetry?: Date;
    /**
     * Event payload
     * @type {object}
     * @memberof WebhookEvent
     */
    payload?: object;
    /**
     * Response body from webhook endpoint
     * @type {string}
     * @memberof WebhookEvent
     */
    responseBody?: string;
    /**
     * HTTP response status code
     * @type {number}
     * @memberof WebhookEvent
     */
    statusCode?: number;
    /**
     * 
     * @type {Date}
     * @memberof WebhookEvent
     */
    updatedAt: Date;
    /**
     * Webhook information
     * @type {WebhookSummary}
     * @memberof WebhookEvent
     */
    webhook?: WebhookSummary;
    /**
     * Webhook ID
     * @type {string}
     * @memberof WebhookEvent
     */
    webhookId: string;
}

/**
 * Check if a given object implements the WebhookEvent interface.
 */
export function instanceOfWebhookEvent(value: object): value is WebhookEvent {
    if (!('attempts' in value) || value['attempts'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('delivered' in value) || value['delivered'] === undefined) return false;
    if (!('eventType' in value) || value['eventType'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    if (!('webhookId' in value) || value['webhookId'] === undefined) return false;
    return true;
}

export function WebhookEventFromJSON(json: any): WebhookEvent {
    return WebhookEventFromJSONTyped(json, false);
}

export function WebhookEventFromJSONTyped(json: any, ignoreDiscriminator: boolean): WebhookEvent {
    if (json == null) {
        return json;
    }
    return {
        
            ...json,
        '$schema': json['$schema'] == null ? undefined : json['$schema'],
        'attempts': json['attempts'],
        'createdAt': (new Date(json['createdAt'])),
        'delivered': json['delivered'],
        'deliveredAt': json['deliveredAt'] == null ? undefined : (new Date(json['deliveredAt'])),
        'duration': json['duration'] == null ? undefined : json['duration'],
        'error': json['error'] == null ? undefined : json['error'],
        'eventType': json['eventType'],
        'headers': json['headers'] == null ? undefined : json['headers'],
        'id': json['id'],
        'nextRetry': json['nextRetry'] == null ? undefined : (new Date(json['nextRetry'])),
        'payload': json['payload'] == null ? undefined : json['payload'],
        'responseBody': json['responseBody'] == null ? undefined : json['responseBody'],
        'statusCode': json['statusCode'] == null ? undefined : json['statusCode'],
        'updatedAt': (new Date(json['updatedAt'])),
        'webhook': json['webhook'] == null ? undefined : WebhookSummaryFromJSON(json['webhook']),
        'webhookId': json['webhookId'],
    };
}

export function WebhookEventToJSON(json: any): WebhookEvent {
    return WebhookEventToJSONTyped(json, false);
}

export function WebhookEventToJSONTyped(value?: Omit<WebhookEvent, '$schema'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
            ...value,
        'attempts': value['attempts'],
        'createdAt': ((value['createdAt']).toISOString()),
        'delivered': value['delivered'],
        'deliveredAt': value['deliveredAt'] == null ? undefined : ((value['deliveredAt']).toISOString()),
        'duration': value['duration'],
        'error': value['error'],
        'eventType': value['eventType'],
        'headers': value['headers'],
        'id': value['id'],
        'nextRetry': value['nextRetry'] == null ? undefined : ((value['nextRetry']).toISOString()),
        'payload': value['payload'],
        'responseBody': value['responseBody'],
        'statusCode': value['statusCode'],
        'updatedAt': ((value['updatedAt']).toISOString()),
        'webhook': WebhookSummaryToJSON(value['webhook']),
        'webhookId': value['webhookId'],
    };
}

