/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { FeatureUsageDetail } from './FeatureUsageDetail';
import {
    FeatureUsageDetailFromJSON,
    FeatureUsageDetailFromJSONTyped,
    FeatureUsageDetailToJSON,
    FeatureUsageDetailToJSONTyped,
} from './FeatureUsageDetail';
import type { FeatureUsageRanking } from './FeatureUsageRanking';
import {
    FeatureUsageRankingFromJSON,
    FeatureUsageRankingFromJSONTyped,
    FeatureUsageRankingToJSON,
    FeatureUsageRankingToJSONTyped,
} from './FeatureUsageRanking';
import type { FeatureUsageSummary } from './FeatureUsageSummary';
import {
    FeatureUsageSummaryFromJSON,
    FeatureUsageSummaryFromJSONTyped,
    FeatureUsageSummaryToJSON,
    FeatureUsageSummaryToJSONTyped,
} from './FeatureUsageSummary';
import type { FeatureUsageTrend } from './FeatureUsageTrend';
import {
    FeatureUsageTrendFromJSON,
    FeatureUsageTrendFromJSONTyped,
    FeatureUsageTrendToJSON,
    FeatureUsageTrendToJSONTyped,
} from './FeatureUsageTrend';

/**
 * 
 * @export
 * @interface FeatureUsageReport
 */
export interface FeatureUsageReport {
    /**
     * A URL to the JSON Schema for this object.
     * @type {string}
     * @memberof FeatureUsageReport
     */
    readonly $schema?: string;
    /**
     * 
     * @type {Array<FeatureUsageDetail>}
     * @memberof FeatureUsageReport
     */
    features: Array<FeatureUsageDetail> | null;
    /**
     * 
     * @type {Date}
     * @memberof FeatureUsageReport
     */
    generatedAt: Date;
    /**
     * 
     * @type {string}
     * @memberof FeatureUsageReport
     */
    period: string;
    /**
     * 
     * @type {FeatureUsageSummary}
     * @memberof FeatureUsageReport
     */
    summary: FeatureUsageSummary;
    /**
     * 
     * @type {Array<FeatureUsageRanking>}
     * @memberof FeatureUsageReport
     */
    topFeatures: Array<FeatureUsageRanking> | null;
    /**
     * 
     * @type {Array<FeatureUsageTrend>}
     * @memberof FeatureUsageReport
     */
    trends: Array<FeatureUsageTrend> | null;
}

/**
 * Check if a given object implements the FeatureUsageReport interface.
 */
export function instanceOfFeatureUsageReport(value: object): value is FeatureUsageReport {
    if (!('features' in value) || value['features'] === undefined) return false;
    if (!('generatedAt' in value) || value['generatedAt'] === undefined) return false;
    if (!('period' in value) || value['period'] === undefined) return false;
    if (!('summary' in value) || value['summary'] === undefined) return false;
    if (!('topFeatures' in value) || value['topFeatures'] === undefined) return false;
    if (!('trends' in value) || value['trends'] === undefined) return false;
    return true;
}

export function FeatureUsageReportFromJSON(json: any): FeatureUsageReport {
    return FeatureUsageReportFromJSONTyped(json, false);
}

export function FeatureUsageReportFromJSONTyped(json: any, ignoreDiscriminator: boolean): FeatureUsageReport {
    if (json == null) {
        return json;
    }
    return {
        
        '$schema': json['$schema'] == null ? undefined : json['$schema'],
        'features': (json['features'] == null ? null : (json['features'] as Array<any>).map(FeatureUsageDetailFromJSON)),
        'generatedAt': (new Date(json['generated_at'])),
        'period': json['period'],
        'summary': FeatureUsageSummaryFromJSON(json['summary']),
        'topFeatures': (json['top_features'] == null ? null : (json['top_features'] as Array<any>).map(FeatureUsageRankingFromJSON)),
        'trends': (json['trends'] == null ? null : (json['trends'] as Array<any>).map(FeatureUsageTrendFromJSON)),
    };
}

export function FeatureUsageReportToJSON(json: any): FeatureUsageReport {
    return FeatureUsageReportToJSONTyped(json, false);
}

export function FeatureUsageReportToJSONTyped(value?: Omit<FeatureUsageReport, '$schema'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'features': (value['features'] == null ? null : (value['features'] as Array<any>).map(FeatureUsageDetailToJSON)),
        'generated_at': ((value['generatedAt']).toISOString()),
        'period': value['period'],
        'summary': FeatureUsageSummaryToJSON(value['summary']),
        'top_features': (value['topFeatures'] == null ? null : (value['topFeatures'] as Array<any>).map(FeatureUsageRankingToJSON)),
        'trends': (value['trends'] == null ? null : (value['trends'] as Array<any>).map(FeatureUsageTrendToJSON)),
    };
}

