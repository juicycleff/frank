/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface WebhookHealthCheck
 */
export interface WebhookHealthCheck {
    [key: string]: any | any;
    /**
     * A URL to the JSON Schema for this object.
     * @type {string}
     * @memberof WebhookHealthCheck
     */
    readonly $schema?: string;
    /**
     * Consecutive failed checks
     * @type {number}
     * @memberof WebhookHealthCheck
     */
    consecutiveFails: number;
    /**
     * Whether webhook is healthy
     * @type {boolean}
     * @memberof WebhookHealthCheck
     */
    healthy: boolean;
    /**
     * Health issues
     * @type {Array<string>}
     * @memberof WebhookHealthCheck
     */
    issues?: Array<string>;
    /**
     * Last health check
     * @type {Date}
     * @memberof WebhookHealthCheck
     */
    lastCheck: Date;
    /**
     * Next check time
     * @type {Date}
     * @memberof WebhookHealthCheck
     */
    nextCheck: Date;
    /**
     * Response time in milliseconds
     * @type {number}
     * @memberof WebhookHealthCheck
     */
    responseTime: number;
    /**
     * Health status
     * @type {string}
     * @memberof WebhookHealthCheck
     */
    status: string;
    /**
     * Webhook ID
     * @type {string}
     * @memberof WebhookHealthCheck
     */
    webhookId: string;
}

/**
 * Check if a given object implements the WebhookHealthCheck interface.
 */
export function instanceOfWebhookHealthCheck(value: object): value is WebhookHealthCheck {
    if (!('consecutiveFails' in value) || value['consecutiveFails'] === undefined) return false;
    if (!('healthy' in value) || value['healthy'] === undefined) return false;
    if (!('lastCheck' in value) || value['lastCheck'] === undefined) return false;
    if (!('nextCheck' in value) || value['nextCheck'] === undefined) return false;
    if (!('responseTime' in value) || value['responseTime'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('webhookId' in value) || value['webhookId'] === undefined) return false;
    return true;
}

export function WebhookHealthCheckFromJSON(json: any): WebhookHealthCheck {
    return WebhookHealthCheckFromJSONTyped(json, false);
}

export function WebhookHealthCheckFromJSONTyped(json: any, ignoreDiscriminator: boolean): WebhookHealthCheck {
    if (json == null) {
        return json;
    }
    return {
        
            ...json,
        '$schema': json['$schema'] == null ? undefined : json['$schema'],
        'consecutiveFails': json['consecutiveFails'],
        'healthy': json['healthy'],
        'issues': json['issues'] == null ? undefined : json['issues'],
        'lastCheck': (new Date(json['lastCheck'])),
        'nextCheck': (new Date(json['nextCheck'])),
        'responseTime': json['responseTime'],
        'status': json['status'],
        'webhookId': json['webhookId'],
    };
}

export function WebhookHealthCheckToJSON(json: any): WebhookHealthCheck {
    return WebhookHealthCheckToJSONTyped(json, false);
}

export function WebhookHealthCheckToJSONTyped(value?: Omit<WebhookHealthCheck, '$schema'> | null, ignoreDiscriminator = false): any {
    if (value == null) {
        return value;
    }

    return {
        
            ...value,
        'consecutiveFails': value['consecutiveFails'],
        'healthy': value['healthy'],
        'issues': value['issues'],
        'lastCheck': ((value['lastCheck']).toISOString()),
        'nextCheck': ((value['nextCheck']).toISOString()),
        'responseTime': value['responseTime'],
        'status': value['status'],
        'webhookId': value['webhookId'],
    };
}

