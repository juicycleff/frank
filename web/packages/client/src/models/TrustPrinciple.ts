/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Control } from './Control';
import {
    ControlFromJSON,
    ControlFromJSONTyped,
    ControlToJSON,
    ControlToJSONTyped,
} from './Control';
import type { Evidence } from './Evidence';
import {
    EvidenceFromJSON,
    EvidenceFromJSONTyped,
    EvidenceToJSON,
    EvidenceToJSONTyped,
} from './Evidence';
import type { ComplianceGap } from './ComplianceGap';
import {
    ComplianceGapFromJSON,
    ComplianceGapFromJSONTyped,
    ComplianceGapToJSON,
    ComplianceGapToJSONTyped,
} from './ComplianceGap';

/**
 * 
 * @export
 * @interface TrustPrinciple
 */
export interface TrustPrinciple {
    /**
     * 
     * @type {number}
     * @memberof TrustPrinciple
     */
    complianceScore: number;
    /**
     * 
     * @type {Array<Control>}
     * @memberof TrustPrinciple
     */
    controls: Array<Control> | null;
    /**
     * 
     * @type {string}
     * @memberof TrustPrinciple
     */
    description: string;
    /**
     * 
     * @type {Array<Evidence>}
     * @memberof TrustPrinciple
     */
    evidence: Array<Evidence> | null;
    /**
     * 
     * @type {Array<ComplianceGap>}
     * @memberof TrustPrinciple
     */
    gaps: Array<ComplianceGap> | null;
    /**
     * 
     * @type {string}
     * @memberof TrustPrinciple
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof TrustPrinciple
     */
    status: string;
}

/**
 * Check if a given object implements the TrustPrinciple interface.
 */
export function instanceOfTrustPrinciple(value: object): value is TrustPrinciple {
    if (!('complianceScore' in value) || value['complianceScore'] === undefined) return false;
    if (!('controls' in value) || value['controls'] === undefined) return false;
    if (!('description' in value) || value['description'] === undefined) return false;
    if (!('evidence' in value) || value['evidence'] === undefined) return false;
    if (!('gaps' in value) || value['gaps'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    return true;
}

export function TrustPrincipleFromJSON(json: any): TrustPrinciple {
    return TrustPrincipleFromJSONTyped(json, false);
}

export function TrustPrincipleFromJSONTyped(json: any, ignoreDiscriminator: boolean): TrustPrinciple {
    if (json == null) {
        return json;
    }
    return {
        
        'complianceScore': json['compliance_score'],
        'controls': (json['controls'] == null ? null : (json['controls'] as Array<any>).map(ControlFromJSON)),
        'description': json['description'],
        'evidence': (json['evidence'] == null ? null : (json['evidence'] as Array<any>).map(EvidenceFromJSON)),
        'gaps': (json['gaps'] == null ? null : (json['gaps'] as Array<any>).map(ComplianceGapFromJSON)),
        'name': json['name'],
        'status': json['status'],
    };
}

export function TrustPrincipleToJSON(json: any): TrustPrinciple {
    return TrustPrincipleToJSONTyped(json, false);
}

export function TrustPrincipleToJSONTyped(value?: TrustPrinciple | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'compliance_score': value['complianceScore'],
        'controls': (value['controls'] == null ? null : (value['controls'] as Array<any>).map(ControlToJSON)),
        'description': value['description'],
        'evidence': (value['evidence'] == null ? null : (value['evidence'] as Array<any>).map(EvidenceToJSON)),
        'gaps': (value['gaps'] == null ? null : (value['gaps'] as Array<any>).map(ComplianceGapToJSON)),
        'name': value['name'],
        'status': value['status'],
    };
}

