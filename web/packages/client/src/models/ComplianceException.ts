/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ComplianceException
 */
export interface ComplianceException {
    /**
     * 
     * @type {string}
     * @memberof ComplianceException
     */
    controlId: string;
    /**
     * 
     * @type {string}
     * @memberof ComplianceException
     */
    description: string;
    /**
     * 
     * @type {Date}
     * @memberof ComplianceException
     */
    discoveredAt: Date;
    /**
     * 
     * @type {string}
     * @memberof ComplianceException
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof ComplianceException
     */
    impactLevel: string;
    /**
     * 
     * @type {string}
     * @memberof ComplianceException
     */
    owner: string;
    /**
     * 
     * @type {string}
     * @memberof ComplianceException
     */
    remediationPlan: string;
    /**
     * 
     * @type {string}
     * @memberof ComplianceException
     */
    resolution?: string;
    /**
     * 
     * @type {Date}
     * @memberof ComplianceException
     */
    resolvedAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof ComplianceException
     */
    rootCause: string;
    /**
     * 
     * @type {string}
     * @memberof ComplianceException
     */
    severity: string;
    /**
     * 
     * @type {string}
     * @memberof ComplianceException
     */
    status: string;
}

/**
 * Check if a given object implements the ComplianceException interface.
 */
export function instanceOfComplianceException(value: object): value is ComplianceException {
    if (!('controlId' in value) || value['controlId'] === undefined) return false;
    if (!('description' in value) || value['description'] === undefined) return false;
    if (!('discoveredAt' in value) || value['discoveredAt'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('impactLevel' in value) || value['impactLevel'] === undefined) return false;
    if (!('owner' in value) || value['owner'] === undefined) return false;
    if (!('remediationPlan' in value) || value['remediationPlan'] === undefined) return false;
    if (!('rootCause' in value) || value['rootCause'] === undefined) return false;
    if (!('severity' in value) || value['severity'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    return true;
}

export function ComplianceExceptionFromJSON(json: any): ComplianceException {
    return ComplianceExceptionFromJSONTyped(json, false);
}

export function ComplianceExceptionFromJSONTyped(json: any, ignoreDiscriminator: boolean): ComplianceException {
    if (json == null) {
        return json;
    }
    return {
        
        'controlId': json['control_id'],
        'description': json['description'],
        'discoveredAt': (new Date(json['discovered_at'])),
        'id': json['id'],
        'impactLevel': json['impact_level'],
        'owner': json['owner'],
        'remediationPlan': json['remediation_plan'],
        'resolution': json['resolution'] == null ? undefined : json['resolution'],
        'resolvedAt': json['resolved_at'] == null ? undefined : (new Date(json['resolved_at'])),
        'rootCause': json['root_cause'],
        'severity': json['severity'],
        'status': json['status'],
    };
}

export function ComplianceExceptionToJSON(json: any): ComplianceException {
    return ComplianceExceptionToJSONTyped(json, false);
}

export function ComplianceExceptionToJSONTyped(value?: ComplianceException | null, ignoreDiscriminator = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'control_id': value['controlId'],
        'description': value['description'],
        'discovered_at': ((value['discoveredAt']).toISOString()),
        'id': value['id'],
        'impact_level': value['impactLevel'],
        'owner': value['owner'],
        'remediation_plan': value['remediationPlan'],
        'resolution': value['resolution'],
        'resolved_at': value['resolvedAt'] == null ? undefined : ((value['resolvedAt']).toISOString()),
        'root_cause': value['rootCause'],
        'severity': value['severity'],
        'status': value['status'],
    };
}

