/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { DailyUsage } from './DailyUsage';
import {
    DailyUsageFromJSON,
    DailyUsageFromJSONTyped,
    DailyUsageToJSON,
    DailyUsageToJSONTyped,
} from './DailyUsage';
import type { MonthlyUsage } from './MonthlyUsage';
import {
    MonthlyUsageFromJSON,
    MonthlyUsageFromJSONTyped,
    MonthlyUsageToJSON,
    MonthlyUsageToJSONTyped,
} from './MonthlyUsage';
import type { WeeklyUsage } from './WeeklyUsage';
import {
    WeeklyUsageFromJSON,
    WeeklyUsageFromJSONTyped,
    WeeklyUsageToJSON,
    WeeklyUsageToJSONTyped,
} from './WeeklyUsage';

/**
 * 
 * @export
 * @interface UsageTrends
 */
export interface UsageTrends {
    /**
     * 
     * @type {Array<DailyUsage>}
     * @memberof UsageTrends
     */
    daily: Array<DailyUsage> | null;
    /**
     * 
     * @type {Array<MonthlyUsage>}
     * @memberof UsageTrends
     */
    monthly: Array<MonthlyUsage> | null;
    /**
     * 
     * @type {Array<WeeklyUsage>}
     * @memberof UsageTrends
     */
    weekly: Array<WeeklyUsage> | null;
}

/**
 * Check if a given object implements the UsageTrends interface.
 */
export function instanceOfUsageTrends(value: object): value is UsageTrends {
    if (!('daily' in value) || value['daily'] === undefined) return false;
    if (!('monthly' in value) || value['monthly'] === undefined) return false;
    if (!('weekly' in value) || value['weekly'] === undefined) return false;
    return true;
}

export function UsageTrendsFromJSON(json: any): UsageTrends {
    return UsageTrendsFromJSONTyped(json, false);
}

export function UsageTrendsFromJSONTyped(json: any, ignoreDiscriminator: boolean): UsageTrends {
    if (json == null) {
        return json;
    }
    return {
        
        'daily': (json['daily'] == null ? null : (json['daily'] as Array<any>).map(DailyUsageFromJSON)),
        'monthly': (json['monthly'] == null ? null : (json['monthly'] as Array<any>).map(MonthlyUsageFromJSON)),
        'weekly': (json['weekly'] == null ? null : (json['weekly'] as Array<any>).map(WeeklyUsageFromJSON)),
    };
}

export function UsageTrendsToJSON(json: any): UsageTrends {
    return UsageTrendsToJSONTyped(json, false);
}

export function UsageTrendsToJSONTyped(value?: UsageTrends | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'daily': (value['daily'] == null ? null : (value['daily'] as Array<any>).map(DailyUsageToJSON)),
        'monthly': (value['monthly'] == null ? null : (value['monthly'] as Array<any>).map(MonthlyUsageToJSON)),
        'weekly': (value['weekly'] == null ? null : (value['weekly'] as Array<any>).map(WeeklyUsageToJSON)),
    };
}

