/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { NotificationRecipients } from './NotificationRecipients';
import {
    NotificationRecipientsFromJSON,
    NotificationRecipientsFromJSONTyped,
    NotificationRecipientsToJSON,
    NotificationRecipientsToJSONTyped,
} from './NotificationRecipients';

/**
 * 
 * @export
 * @interface PlatformNotificationRequest
 */
export interface PlatformNotificationRequest {
    /**
     * A URL to the JSON Schema for this object.
     * @type {string}
     * @memberof PlatformNotificationRequest
     */
    readonly $schema?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof PlatformNotificationRequest
     */
    channels: Array<string> | null;
    /**
     * 
     * @type {Date}
     * @memberof PlatformNotificationRequest
     */
    expiresAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof PlatformNotificationRequest
     */
    message: string;
    /**
     * 
     * @type {NotificationRecipients}
     * @memberof PlatformNotificationRequest
     */
    recipients: NotificationRecipients;
    /**
     * 
     * @type {Date}
     * @memberof PlatformNotificationRequest
     */
    scheduleFor?: Date;
    /**
     * 
     * @type {string}
     * @memberof PlatformNotificationRequest
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof PlatformNotificationRequest
     */
    type: string;
}

/**
 * Check if a given object implements the PlatformNotificationRequest interface.
 */
export function instanceOfPlatformNotificationRequest(value: object): value is PlatformNotificationRequest {
    if (!('channels' in value) || value['channels'] === undefined) return false;
    if (!('message' in value) || value['message'] === undefined) return false;
    if (!('recipients' in value) || value['recipients'] === undefined) return false;
    if (!('title' in value) || value['title'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    return true;
}

export function PlatformNotificationRequestFromJSON(json: any): PlatformNotificationRequest {
    return PlatformNotificationRequestFromJSONTyped(json, false);
}

export function PlatformNotificationRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): PlatformNotificationRequest {
    if (json == null) {
        return json;
    }
    return {
        
        '$schema': json['$schema'] == null ? undefined : json['$schema'],
        'channels': json['channels'] == null ? null : json['channels'],
        'expiresAt': json['expires_at'] == null ? undefined : (new Date(json['expires_at'])),
        'message': json['message'],
        'recipients': NotificationRecipientsFromJSON(json['recipients']),
        'scheduleFor': json['schedule_for'] == null ? undefined : (new Date(json['schedule_for'])),
        'title': json['title'],
        'type': json['type'],
    };
}

export function PlatformNotificationRequestToJSON(json: any): PlatformNotificationRequest {
    return PlatformNotificationRequestToJSONTyped(json, false);
}

export function PlatformNotificationRequestToJSONTyped(value?: Omit<PlatformNotificationRequest, '$schema'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'channels': value['channels'],
        'expires_at': value['expiresAt'] == null ? undefined : ((value['expiresAt']).toISOString()),
        'message': value['message'],
        'recipients': NotificationRecipientsToJSON(value['recipients']),
        'schedule_for': value['scheduleFor'] == null ? undefined : ((value['scheduleFor']).toISOString()),
        'title': value['title'],
        'type': value['type'],
    };
}

