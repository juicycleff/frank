/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { RoleSummary } from './RoleSummary';
import {
    RoleSummaryFromJSON,
    RoleSummaryFromJSONTyped,
    RoleSummaryToJSON,
    RoleSummaryToJSONTyped,
} from './RoleSummary';

/**
 * 
 * @export
 * @interface RoleHierarchy
 */
export interface RoleHierarchy {
    /**
     * A URL to the JSON Schema for this object.
     * @type {string}
     * @memberof RoleHierarchy
     */
    readonly $schema?: string;
    /**
     * Child roles
     * @type {Array<RoleHierarchy>}
     * @memberof RoleHierarchy
     */
    children?: Array<RoleHierarchy> | null;
    /**
     * Hierarchy level
     * @type {number}
     * @memberof RoleHierarchy
     */
    level: number;
    /**
     * Role name
     * @type {string}
     * @memberof RoleHierarchy
     */
    name: string;
    /**
     * Parent role
     * @type {RoleSummary}
     * @memberof RoleHierarchy
     */
    parent?: RoleSummary;
    /**
     * Hierarchy path
     * @type {Array<string>}
     * @memberof RoleHierarchy
     */
    path: Array<string> | null;
    /**
     * Role ID
     * @type {string}
     * @memberof RoleHierarchy
     */
    roleId: string;
}

/**
 * Check if a given object implements the RoleHierarchy interface.
 */
export function instanceOfRoleHierarchy(value: object): value is RoleHierarchy {
    if (!('level' in value) || value['level'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('path' in value) || value['path'] === undefined) return false;
    if (!('roleId' in value) || value['roleId'] === undefined) return false;
    return true;
}

export function RoleHierarchyFromJSON(json: any): RoleHierarchy {
    return RoleHierarchyFromJSONTyped(json, false);
}

export function RoleHierarchyFromJSONTyped(json: any, ignoreDiscriminator: boolean): RoleHierarchy {
    if (json == null) {
        return json;
    }
    return {
        
        '$schema': json['$schema'] == null ? undefined : json['$schema'],
        'children': json['children'] == null ? undefined : ((json['children'] as Array<any>).map(RoleHierarchyFromJSON)),
        'level': json['level'],
        'name': json['name'],
        'parent': json['parent'] == null ? undefined : RoleSummaryFromJSON(json['parent']),
        'path': json['path'] == null ? null : json['path'],
        'roleId': json['roleId'],
    };
}

export function RoleHierarchyToJSON(json: any): RoleHierarchy {
    return RoleHierarchyToJSONTyped(json, false);
}

export function RoleHierarchyToJSONTyped(value?: Omit<RoleHierarchy, '$schema'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'children': value['children'] == null ? undefined : ((value['children'] as Array<any>).map(RoleHierarchyToJSON)),
        'level': value['level'],
        'name': value['name'],
        'parent': RoleSummaryToJSON(value['parent']),
        'path': value['path'],
        'roleId': value['roleId'],
    };
}

