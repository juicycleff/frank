/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { UserType } from './UserType';
import {
    UserTypeFromJSON,
    UserTypeFromJSONTyped,
    UserTypeToJSON,
    UserTypeToJSONTyped,
} from './UserType';

/**
 * 
 * @export
 * @interface CreateUserRequest
 */
export interface CreateUserRequest {
    [key: string]: any | any;
    /**
     * A URL to the JSON Schema for this object.
     * @type {string}
     * @memberof CreateUserRequest
     */
    readonly $schema?: string;
    /**
     * Whether user is active
     * @type {boolean}
     * @memberof CreateUserRequest
     */
    active: boolean;
    /**
     * Authentication provider
     * @type {string}
     * @memberof CreateUserRequest
     */
    authProvider: string;
    /**
     * User created by IP
     * @type {string}
     * @memberof CreateUserRequest
     */
    createdByIp: string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserRequest
     */
    createdByUserAgent: string;
    /**
     * Custom user attributes
     * @type {object}
     * @memberof CreateUserRequest
     */
    customAttributes?: object;
    /**
     * User email address
     * @type {string}
     * @memberof CreateUserRequest
     */
    email: string;
    /**
     * Whether email is pre-verified
     * @type {boolean}
     * @memberof CreateUserRequest
     */
    emailVerified: boolean;
    /**
     * External provider ID
     * @type {string}
     * @memberof CreateUserRequest
     */
    externalId?: string;
    /**
     * User first name
     * @type {string}
     * @memberof CreateUserRequest
     */
    firstName?: string;
    /**
     * User last name
     * @type {string}
     * @memberof CreateUserRequest
     */
    lastName?: string;
    /**
     * User locale
     * @type {string}
     * @memberof CreateUserRequest
     */
    locale: string;
    /**
     * Organization ID
     * @type {string}
     * @memberof CreateUserRequest
     */
    organizationId?: string;
    /**
     * User password (optional for passwordless)
     * @type {string}
     * @memberof CreateUserRequest
     */
    password?: string;
    /**
     * Password hash (optional for passwordless)
     * @type {string}
     * @memberof CreateUserRequest
     */
    passwordHash: string;
    /**
     * User phone number
     * @type {string}
     * @memberof CreateUserRequest
     */
    phoneNumber?: string;
    /**
     * Whether phone is pre-verified
     * @type {boolean}
     * @memberof CreateUserRequest
     */
    phoneVerified: boolean;
    /**
     * Whether to send verification email
     * @type {boolean}
     * @memberof CreateUserRequest
     */
    sendVerificationEmail: boolean;
    /**
     * Skip password strength validation
     * @type {boolean}
     * @memberof CreateUserRequest
     */
    skipPasswordValidation: boolean;
    /**
     * User timezone
     * @type {string}
     * @memberof CreateUserRequest
     */
    timezone?: string;
    /**
     * User type (internal, external, end_user)
     * @type {UserType}
     * @memberof CreateUserRequest
     */
    userType: UserType;
    /**
     * Username
     * @type {string}
     * @memberof CreateUserRequest
     */
    username?: string;
}



/**
 * Check if a given object implements the CreateUserRequest interface.
 */
export function instanceOfCreateUserRequest(value: object): value is CreateUserRequest {
    if (!('active' in value) || value['active'] === undefined) return false;
    if (!('authProvider' in value) || value['authProvider'] === undefined) return false;
    if (!('createdByIp' in value) || value['createdByIp'] === undefined) return false;
    if (!('createdByUserAgent' in value) || value['createdByUserAgent'] === undefined) return false;
    if (!('email' in value) || value['email'] === undefined) return false;
    if (!('emailVerified' in value) || value['emailVerified'] === undefined) return false;
    if (!('locale' in value) || value['locale'] === undefined) return false;
    if (!('passwordHash' in value) || value['passwordHash'] === undefined) return false;
    if (!('phoneVerified' in value) || value['phoneVerified'] === undefined) return false;
    if (!('sendVerificationEmail' in value) || value['sendVerificationEmail'] === undefined) return false;
    if (!('skipPasswordValidation' in value) || value['skipPasswordValidation'] === undefined) return false;
    if (!('userType' in value) || value['userType'] === undefined) return false;
    return true;
}

export function CreateUserRequestFromJSON(json: any): CreateUserRequest {
    return CreateUserRequestFromJSONTyped(json, false);
}

export function CreateUserRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateUserRequest {
    if (json == null) {
        return json;
    }
    return {
        
            ...json,
        '$schema': json['$schema'] == null ? undefined : json['$schema'],
        'active': json['active'],
        'authProvider': json['authProvider'],
        'createdByIp': json['createdByIp'],
        'createdByUserAgent': json['createdByUserAgent'],
        'customAttributes': json['customAttributes'] == null ? undefined : json['customAttributes'],
        'email': json['email'],
        'emailVerified': json['emailVerified'],
        'externalId': json['externalId'] == null ? undefined : json['externalId'],
        'firstName': json['firstName'] == null ? undefined : json['firstName'],
        'lastName': json['lastName'] == null ? undefined : json['lastName'],
        'locale': json['locale'],
        'organizationId': json['organizationId'] == null ? undefined : json['organizationId'],
        'password': json['password'] == null ? undefined : json['password'],
        'passwordHash': json['password_hash'],
        'phoneNumber': json['phoneNumber'] == null ? undefined : json['phoneNumber'],
        'phoneVerified': json['phoneVerified'],
        'sendVerificationEmail': json['sendVerificationEmail'],
        'skipPasswordValidation': json['skipPasswordValidation'],
        'timezone': json['timezone'] == null ? undefined : json['timezone'],
        'userType': UserTypeFromJSON(json['userType']),
        'username': json['username'] == null ? undefined : json['username'],
    };
}

export function CreateUserRequestToJSON(json: any): CreateUserRequest {
    return CreateUserRequestToJSONTyped(json, false);
}

export function CreateUserRequestToJSONTyped(value?: Omit<CreateUserRequest, '$schema'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
            ...value,
        'active': value['active'],
        'authProvider': value['authProvider'],
        'createdByIp': value['createdByIp'],
        'createdByUserAgent': value['createdByUserAgent'],
        'customAttributes': value['customAttributes'],
        'email': value['email'],
        'emailVerified': value['emailVerified'],
        'externalId': value['externalId'],
        'firstName': value['firstName'],
        'lastName': value['lastName'],
        'locale': value['locale'],
        'organizationId': value['organizationId'],
        'password': value['password'],
        'password_hash': value['passwordHash'],
        'phoneNumber': value['phoneNumber'],
        'phoneVerified': value['phoneVerified'],
        'sendVerificationEmail': value['sendVerificationEmail'],
        'skipPasswordValidation': value['skipPasswordValidation'],
        'timezone': value['timezone'],
        'userType': UserTypeToJSON(value['userType']),
        'username': value['username'],
    };
}

