/* tslint:disable */
/* eslint-disable */
/**
 * My Project
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface CreateUserRequest
 */
export interface CreateUserRequest {
    /**
     * A URL to the JSON Schema for this object.
     * @type {string}
     * @memberof CreateUserRequest
     */
    readonly $schema?: string;
    /**
     * Whether user is active
     * @type {boolean}
     * @memberof CreateUserRequest
     */
    active: boolean;
    /**
     * Authentication provider
     * @type {string}
     * @memberof CreateUserRequest
     */
    authProvider: string;
    /**
     * User created by IP
     * @type {string}
     * @memberof CreateUserRequest
     */
    createdByIp: string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserRequest
     */
    createdByUserAgent: string;
    /**
     * Custom user attributes
     * @type {{ [key: string]: string; }}
     * @memberof CreateUserRequest
     */
    customAttributes?: { [key: string]: string; };
    /**
     * User email address
     * @type {string}
     * @memberof CreateUserRequest
     */
    email: string;
    /**
     * Whether email is pre-verified
     * @type {boolean}
     * @memberof CreateUserRequest
     */
    emailVerified: boolean;
    /**
     * External provider ID
     * @type {string}
     * @memberof CreateUserRequest
     */
    externalId?: string;
    /**
     * User first name
     * @type {string}
     * @memberof CreateUserRequest
     */
    firstName?: string;
    /**
     * User last name
     * @type {string}
     * @memberof CreateUserRequest
     */
    lastName?: string;
    /**
     * User locale
     * @type {string}
     * @memberof CreateUserRequest
     */
    locale: string;
    /**
     * Organization ID
     * @type {string}
     * @memberof CreateUserRequest
     */
    organizationId?: string;
    /**
     * User password (optional for passwordless)
     * @type {string}
     * @memberof CreateUserRequest
     */
    password?: string;
    /**
     * User phone number
     * @type {string}
     * @memberof CreateUserRequest
     */
    phoneNumber?: string;
    /**
     * Whether phone is pre-verified
     * @type {boolean}
     * @memberof CreateUserRequest
     */
    phoneVerified: boolean;
    /**
     * Whether to send verification email
     * @type {boolean}
     * @memberof CreateUserRequest
     */
    sendVerificationEmail: boolean;
    /**
     * Skip password strength validation
     * @type {boolean}
     * @memberof CreateUserRequest
     */
    skipPasswordValidation: boolean;
    /**
     * User timezone
     * @type {string}
     * @memberof CreateUserRequest
     */
    timezone?: string;
    /**
     * User type (internal, external, end_user)
     * @type {string}
     * @memberof CreateUserRequest
     */
    userType: string;
    /**
     * Username
     * @type {string}
     * @memberof CreateUserRequest
     */
    username?: string;
}

export function CreateUserRequestFromJSON(json: any): CreateUserRequest {
    return CreateUserRequestFromJSONTyped(json, false);
}

export function CreateUserRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateUserRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        '$schema': !exists(json, '$schema') ? undefined : json['$schema'],
        'active': json['active'],
        'authProvider': json['authProvider'],
        'createdByIp': json['createdByIp'],
        'createdByUserAgent': json['createdByUserAgent'],
        'customAttributes': !exists(json, 'customAttributes') ? undefined : json['customAttributes'],
        'email': json['email'],
        'emailVerified': json['emailVerified'],
        'externalId': !exists(json, 'externalId') ? undefined : json['externalId'],
        'firstName': !exists(json, 'firstName') ? undefined : json['firstName'],
        'lastName': !exists(json, 'lastName') ? undefined : json['lastName'],
        'locale': json['locale'],
        'organizationId': !exists(json, 'organizationId') ? undefined : json['organizationId'],
        'password': !exists(json, 'password') ? undefined : json['password'],
        'phoneNumber': !exists(json, 'phoneNumber') ? undefined : json['phoneNumber'],
        'phoneVerified': json['phoneVerified'],
        'sendVerificationEmail': json['sendVerificationEmail'],
        'skipPasswordValidation': json['skipPasswordValidation'],
        'timezone': !exists(json, 'timezone') ? undefined : json['timezone'],
        'userType': json['userType'],
        'username': !exists(json, 'username') ? undefined : json['username'],
    };
}

export function CreateUserRequestToJSON(value?: CreateUserRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'active': value.active,
        'authProvider': value.authProvider,
        'createdByIp': value.createdByIp,
        'createdByUserAgent': value.createdByUserAgent,
        'customAttributes': value.customAttributes,
        'email': value.email,
        'emailVerified': value.emailVerified,
        'externalId': value.externalId,
        'firstName': value.firstName,
        'lastName': value.lastName,
        'locale': value.locale,
        'organizationId': value.organizationId,
        'password': value.password,
        'phoneNumber': value.phoneNumber,
        'phoneVerified': value.phoneVerified,
        'sendVerificationEmail': value.sendVerificationEmail,
        'skipPasswordValidation': value.skipPasswordValidation,
        'timezone': value.timezone,
        'userType': value.userType,
        'username': value.username,
    };
}


