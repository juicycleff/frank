/* tslint:disable */
/* eslint-disable */
/**
 * My Project
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface UserRoleAssignment
 */
export interface UserRoleAssignment {
    /**
     * Whether assignment is active
     * @type {boolean}
     * @memberof UserRoleAssignment
     */
    active: boolean;
    /**
     * When role was assigned
     * @type {Date}
     * @memberof UserRoleAssignment
     */
    assignedAt: Date;
    /**
     * Who assigned this role
     * @type {string}
     * @memberof UserRoleAssignment
     */
    assignedBy?: string;
    /**
     * Context ID
     * @type {string}
     * @memberof UserRoleAssignment
     */
    contextId?: string;
    /**
     * Assignment context type
     * @type {string}
     * @memberof UserRoleAssignment
     */
    contextType: string;
    /**
     * Role display name
     * @type {string}
     * @memberof UserRoleAssignment
     */
    displayName: string;
    /**
     * When assignment expires
     * @type {Date}
     * @memberof UserRoleAssignment
     */
    expiresAt?: Date;
    /**
     * Assignment ID
     * @type {string}
     * @memberof UserRoleAssignment
     */
    id: string;
    /**
     * Role ID
     * @type {string}
     * @memberof UserRoleAssignment
     */
    roleId: string;
    /**
     * Role name
     * @type {string}
     * @memberof UserRoleAssignment
     */
    roleName: string;
}

export function UserRoleAssignmentFromJSON(json: any): UserRoleAssignment {
    return UserRoleAssignmentFromJSONTyped(json, false);
}

export function UserRoleAssignmentFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserRoleAssignment {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'active': json['active'],
        'assignedAt': (new Date(json['assignedAt'])),
        'assignedBy': !exists(json, 'assignedBy') ? undefined : json['assignedBy'],
        'contextId': !exists(json, 'contextId') ? undefined : json['contextId'],
        'contextType': json['contextType'],
        'displayName': json['displayName'],
        'expiresAt': !exists(json, 'expiresAt') ? undefined : (new Date(json['expiresAt'])),
        'id': json['id'],
        'roleId': json['roleId'],
        'roleName': json['roleName'],
    };
}

export function UserRoleAssignmentToJSON(value?: UserRoleAssignment | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'active': value.active,
        'assignedAt': (value.assignedAt.toISOString()),
        'assignedBy': value.assignedBy,
        'contextId': value.contextId,
        'contextType': value.contextType,
        'displayName': value.displayName,
        'expiresAt': value.expiresAt === undefined ? undefined : (value.expiresAt.toISOString()),
        'id': value.id,
        'roleId': value.roleId,
        'roleName': value.roleName,
    };
}


