/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface TokenRequest
 */
export interface TokenRequest {
    /**
     * A URL to the JSON Schema for this object.
     * @type {string}
     * @memberof TokenRequest
     */
    readonly $schema?: string;
    /**
     * OAuth client ID
     * @type {string}
     * @memberof TokenRequest
     */
    clientId: string;
    /**
     * OAuth client secret
     * @type {string}
     * @memberof TokenRequest
     */
    clientSecret?: string;
    /**
     * Authorization code (for authorization_code grant)
     * @type {string}
     * @memberof TokenRequest
     */
    code?: string;
    /**
     * PKCE code verifier
     * @type {string}
     * @memberof TokenRequest
     */
    codeVerifier?: string;
    /**
     * OAuth grant type
     * @type {string}
     * @memberof TokenRequest
     */
    grantType: string;
    /**
     * Redirect URI
     * @type {string}
     * @memberof TokenRequest
     */
    redirectUri?: string;
    /**
     * Refresh token (for refresh_token grant)
     * @type {string}
     * @memberof TokenRequest
     */
    refreshToken?: string;
    /**
     * Requested scopes
     * @type {string}
     * @memberof TokenRequest
     */
    scope?: string;
}

/**
 * Check if a given object implements the TokenRequest interface.
 */
export function instanceOfTokenRequest(value: object): value is TokenRequest {
    if (!('clientId' in value) || value['clientId'] === undefined) return false;
    if (!('grantType' in value) || value['grantType'] === undefined) return false;
    return true;
}

export function TokenRequestFromJSON(json: any): TokenRequest {
    return TokenRequestFromJSONTyped(json, false);
}

export function TokenRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): TokenRequest {
    if (json == null) {
        return json;
    }
    return {
        
        '$schema': json['$schema'] == null ? undefined : json['$schema'],
        'clientId': json['clientId'],
        'clientSecret': json['clientSecret'] == null ? undefined : json['clientSecret'],
        'code': json['code'] == null ? undefined : json['code'],
        'codeVerifier': json['codeVerifier'] == null ? undefined : json['codeVerifier'],
        'grantType': json['grantType'],
        'redirectUri': json['redirectUri'] == null ? undefined : json['redirectUri'],
        'refreshToken': json['refreshToken'] == null ? undefined : json['refreshToken'],
        'scope': json['scope'] == null ? undefined : json['scope'],
    };
}

export function TokenRequestToJSON(json: any): TokenRequest {
    return TokenRequestToJSONTyped(json, false);
}

export function TokenRequestToJSONTyped(value?: Omit<TokenRequest, '$schema'> | null, ignoreDiscriminator = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'clientId': value['clientId'],
        'clientSecret': value['clientSecret'],
        'code': value['code'],
        'codeVerifier': value['codeVerifier'],
        'grantType': value['grantType'],
        'redirectUri': value['redirectUri'],
        'refreshToken': value['refreshToken'],
        'scope': value['scope'],
    };
}

