/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface TrainingEvent
 */
export interface TrainingEvent {
    /**
     * 
     * @type {number}
     * @memberof TrainingEvent
     */
    attendees: number;
    /**
     * 
     * @type {Date}
     * @memberof TrainingEvent
     */
    date: Date;
    /**
     * 
     * @type {boolean}
     * @memberof TrainingEvent
     */
    mandatory: boolean;
    /**
     * 
     * @type {string}
     * @memberof TrainingEvent
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof TrainingEvent
     */
    type: string;
}

/**
 * Check if a given object implements the TrainingEvent interface.
 */
export function instanceOfTrainingEvent(value: object): value is TrainingEvent {
    if (!('attendees' in value) || value['attendees'] === undefined) return false;
    if (!('date' in value) || value['date'] === undefined) return false;
    if (!('mandatory' in value) || value['mandatory'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    return true;
}

export function TrainingEventFromJSON(json: any): TrainingEvent {
    return TrainingEventFromJSONTyped(json, false);
}

export function TrainingEventFromJSONTyped(json: any, ignoreDiscriminator: boolean): TrainingEvent {
    if (json == null) {
        return json;
    }
    return {
        
        'attendees': json['attendees'],
        'date': (new Date(json['date'])),
        'mandatory': json['mandatory'],
        'name': json['name'],
        'type': json['type'],
    };
}

export function TrainingEventToJSON(json: any): TrainingEvent {
    return TrainingEventToJSONTyped(json, false);
}

export function TrainingEventToJSONTyped(value?: TrainingEvent | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'attendees': value['attendees'],
        'date': ((value['date']).toISOString()),
        'mandatory': value['mandatory'],
        'name': value['name'],
        'type': value['type'],
    };
}

