/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface OrganizationUsage
 */
export interface OrganizationUsage {
    /**
     * A URL to the JSON Schema for this object.
     * @type {string}
     * @memberof OrganizationUsage
     */
    readonly $schema?: string;
    /**
     * API request count
     * @type {number}
     * @memberof OrganizationUsage
     */
    apiRequests: number;
    /**
     * Bandwidth used in bytes
     * @type {number}
     * @memberof OrganizationUsage
     */
    bandwidth: number;
    /**
     * Emails sent count
     * @type {number}
     * @memberof OrganizationUsage
     */
    emailsSent: number;
    /**
     * End user count
     * @type {number}
     * @memberof OrganizationUsage
     */
    endUsers: number;
    /**
     * External user count
     * @type {number}
     * @memberof OrganizationUsage
     */
    externalUsers: number;
    /**
     * Last update time
     * @type {Date}
     * @memberof OrganizationUsage
     */
    lastUpdated: Date;
    /**
     * Login event count
     * @type {number}
     * @memberof OrganizationUsage
     */
    loginEvents: number;
    /**
     * Usage period
     * @type {string}
     * @memberof OrganizationUsage
     */
    period: string;
    /**
     * SMS sent count
     * @type {number}
     * @memberof OrganizationUsage
     */
    smsSent: number;
    /**
     * Storage used in bytes
     * @type {number}
     * @memberof OrganizationUsage
     */
    storage: number;
    /**
     * Webhook delivery count
     * @type {number}
     * @memberof OrganizationUsage
     */
    webhookDeliveries: number;
}

/**
 * Check if a given object implements the OrganizationUsage interface.
 */
export function instanceOfOrganizationUsage(value: object): value is OrganizationUsage {
    if (!('apiRequests' in value) || value['apiRequests'] === undefined) return false;
    if (!('bandwidth' in value) || value['bandwidth'] === undefined) return false;
    if (!('emailsSent' in value) || value['emailsSent'] === undefined) return false;
    if (!('endUsers' in value) || value['endUsers'] === undefined) return false;
    if (!('externalUsers' in value) || value['externalUsers'] === undefined) return false;
    if (!('lastUpdated' in value) || value['lastUpdated'] === undefined) return false;
    if (!('loginEvents' in value) || value['loginEvents'] === undefined) return false;
    if (!('period' in value) || value['period'] === undefined) return false;
    if (!('smsSent' in value) || value['smsSent'] === undefined) return false;
    if (!('storage' in value) || value['storage'] === undefined) return false;
    if (!('webhookDeliveries' in value) || value['webhookDeliveries'] === undefined) return false;
    return true;
}

export function OrganizationUsageFromJSON(json: any): OrganizationUsage {
    return OrganizationUsageFromJSONTyped(json, false);
}

export function OrganizationUsageFromJSONTyped(json: any, ignoreDiscriminator: boolean): OrganizationUsage {
    if (json == null) {
        return json;
    }
    return {
        
        '$schema': json['$schema'] == null ? undefined : json['$schema'],
        'apiRequests': json['apiRequests'],
        'bandwidth': json['bandwidth'],
        'emailsSent': json['emailsSent'],
        'endUsers': json['endUsers'],
        'externalUsers': json['externalUsers'],
        'lastUpdated': (new Date(json['lastUpdated'])),
        'loginEvents': json['loginEvents'],
        'period': json['period'],
        'smsSent': json['smsSent'],
        'storage': json['storage'],
        'webhookDeliveries': json['webhookDeliveries'],
    };
}

export function OrganizationUsageToJSON(json: any): OrganizationUsage {
    return OrganizationUsageToJSONTyped(json, false);
}

export function OrganizationUsageToJSONTyped(value?: Omit<OrganizationUsage, '$schema'> | null, ignoreDiscriminator = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'apiRequests': value['apiRequests'],
        'bandwidth': value['bandwidth'],
        'emailsSent': value['emailsSent'],
        'endUsers': value['endUsers'],
        'externalUsers': value['externalUsers'],
        'lastUpdated': ((value['lastUpdated']).toISOString()),
        'loginEvents': value['loginEvents'],
        'period': value['period'],
        'smsSent': value['smsSent'],
        'storage': value['storage'],
        'webhookDeliveries': value['webhookDeliveries'],
    };
}

