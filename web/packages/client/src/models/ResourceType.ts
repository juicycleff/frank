/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


/**
 * 
 * @export
 */
export const ResourceType = {
    Global: 'global',
    System: 'system',
    Organization: 'organization',
    User: 'user',
    Role: 'role',
    Permission: 'permission',
    ApiKey: 'api_key',
    Session: 'session',
    Mfa: 'mfa',
    Webhook: 'webhook',
    Audit: 'audit',
    Application: 'application',
    EndUser: 'end_user',
    Integration: 'integration',
    Billing: 'billing',
    Analytics: 'analytics',
    WebhookEvent: 'webhook_event',
    EmailTemplate: 'email_template',
    Verification: 'verification',
    AuditLog: 'audit_log',
    Common: 'common',
    Oauth: 'oauth',
    Membership: 'membership',
    Provider: 'provider',
    Passkey: 'passkey',
    Sso: 'sso',
    SelfUser: 'self_user',
    PersonalApiKey: 'personal_api_key',
    PersonalSession: 'personal_session',
    PersonalMfa: 'personal_mfa',
    InternalUser: 'internal_user',
    EndUserSession: 'end_user_session',
    CustomerOrganization: 'customer_organization',
    PlatformAnalytics: 'platform_analytics',
    EndUserAnalytics: 'end_user_analytics',
    AuthServiceAnalytics: 'auth_service_analytics',
    AuthService: 'auth_service',
    AuthServiceDomain: 'auth_service_domain'
} as const;
export type ResourceType = typeof ResourceType[keyof typeof ResourceType];


export function instanceOfResourceType(value: any): boolean {
    for (const key in ResourceType) {
        if (Object.prototype.hasOwnProperty.call(ResourceType, key)) {
            if (ResourceType[key as keyof typeof ResourceType] === value) {
                return true;
            }
        }
    }
    return false;
}

export function ResourceTypeFromJSON(json: any): ResourceType {
    return ResourceTypeFromJSONTyped(json, false);
}

export function ResourceTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ResourceType {
    return json as ResourceType;
}

export function ResourceTypeToJSON(value?: ResourceType | null): any {
    return value as any;
}

export function ResourceTypeToJSONTyped(value: any, ignoreDiscriminator: boolean): ResourceType {
    return value as ResourceType;
}

