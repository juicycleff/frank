/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { DataBreach } from './DataBreach';
import {
    DataBreachFromJSON,
    DataBreachFromJSONTyped,
    DataBreachToJSON,
    DataBreachToJSONTyped,
} from './DataBreach';
import type { ProcessingRecord } from './ProcessingRecord';
import {
    ProcessingRecordFromJSON,
    ProcessingRecordFromJSONTyped,
    ProcessingRecordToJSON,
    ProcessingRecordToJSONTyped,
} from './ProcessingRecord';
import type { TransferAssessment } from './TransferAssessment';
import {
    TransferAssessmentFromJSON,
    TransferAssessmentFromJSONTyped,
    TransferAssessmentToJSON,
    TransferAssessmentToJSONTyped,
} from './TransferAssessment';
import type { ConsentReport } from './ConsentReport';
import {
    ConsentReportFromJSON,
    ConsentReportFromJSONTyped,
    ConsentReportToJSON,
    ConsentReportToJSONTyped,
} from './ConsentReport';
import type { SubjectRightsReport } from './SubjectRightsReport';
import {
    SubjectRightsReportFromJSON,
    SubjectRightsReportFromJSONTyped,
    SubjectRightsReportToJSON,
    SubjectRightsReportToJSONTyped,
} from './SubjectRightsReport';

/**
 * 
 * @export
 * @interface GDPRReport
 */
export interface GDPRReport {
    /**
     * A URL to the JSON Schema for this object.
     * @type {string}
     * @memberof GDPRReport
     */
    readonly $schema?: string;
    /**
     * 
     * @type {number}
     * @memberof GDPRReport
     */
    complianceScore: number;
    /**
     * 
     * @type {ConsentReport}
     * @memberof GDPRReport
     */
    consentManagement: ConsentReport;
    /**
     * 
     * @type {Array<DataBreach>}
     * @memberof GDPRReport
     */
    dataBreaches: Array<DataBreach> | null;
    /**
     * 
     * @type {Array<ProcessingRecord>}
     * @memberof GDPRReport
     */
    dataProcessingRecords: Array<ProcessingRecord> | null;
    /**
     * 
     * @type {Date}
     * @memberof GDPRReport
     */
    generatedAt: Date;
    /**
     * 
     * @type {string}
     * @memberof GDPRReport
     */
    organizationId: string;
    /**
     * 
     * @type {string}
     * @memberof GDPRReport
     */
    reportPeriod: string;
    /**
     * 
     * @type {SubjectRightsReport}
     * @memberof GDPRReport
     */
    subjectRights: SubjectRightsReport;
    /**
     * 
     * @type {Array<TransferAssessment>}
     * @memberof GDPRReport
     */
    transferAssessments: Array<TransferAssessment> | null;
}

/**
 * Check if a given object implements the GDPRReport interface.
 */
export function instanceOfGDPRReport(value: object): value is GDPRReport {
    if (!('complianceScore' in value) || value['complianceScore'] === undefined) return false;
    if (!('consentManagement' in value) || value['consentManagement'] === undefined) return false;
    if (!('dataBreaches' in value) || value['dataBreaches'] === undefined) return false;
    if (!('dataProcessingRecords' in value) || value['dataProcessingRecords'] === undefined) return false;
    if (!('generatedAt' in value) || value['generatedAt'] === undefined) return false;
    if (!('organizationId' in value) || value['organizationId'] === undefined) return false;
    if (!('reportPeriod' in value) || value['reportPeriod'] === undefined) return false;
    if (!('subjectRights' in value) || value['subjectRights'] === undefined) return false;
    if (!('transferAssessments' in value) || value['transferAssessments'] === undefined) return false;
    return true;
}

export function GDPRReportFromJSON(json: any): GDPRReport {
    return GDPRReportFromJSONTyped(json, false);
}

export function GDPRReportFromJSONTyped(json: any, ignoreDiscriminator: boolean): GDPRReport {
    if (json == null) {
        return json;
    }
    return {
        
        '$schema': json['$schema'] == null ? undefined : json['$schema'],
        'complianceScore': json['compliance_score'],
        'consentManagement': ConsentReportFromJSON(json['consent_management']),
        'dataBreaches': (json['data_breaches'] == null ? null : (json['data_breaches'] as Array<any>).map(DataBreachFromJSON)),
        'dataProcessingRecords': (json['data_processing_records'] == null ? null : (json['data_processing_records'] as Array<any>).map(ProcessingRecordFromJSON)),
        'generatedAt': (new Date(json['generated_at'])),
        'organizationId': json['organization_id'],
        'reportPeriod': json['report_period'],
        'subjectRights': SubjectRightsReportFromJSON(json['subject_rights']),
        'transferAssessments': (json['transfer_assessments'] == null ? null : (json['transfer_assessments'] as Array<any>).map(TransferAssessmentFromJSON)),
    };
}

export function GDPRReportToJSON(json: any): GDPRReport {
    return GDPRReportToJSONTyped(json, false);
}

export function GDPRReportToJSONTyped(value?: Omit<GDPRReport, '$schema'> | null, ignoreDiscriminator = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'compliance_score': value['complianceScore'],
        'consent_management': ConsentReportToJSON(value['consentManagement']),
        'data_breaches': (value['dataBreaches'] == null ? null : (value['dataBreaches'] as Array<any>).map(DataBreachToJSON)),
        'data_processing_records': (value['dataProcessingRecords'] == null ? null : (value['dataProcessingRecords'] as Array<any>).map(ProcessingRecordToJSON)),
        'generated_at': ((value['generatedAt']).toISOString()),
        'organization_id': value['organizationId'],
        'report_period': value['reportPeriod'],
        'subject_rights': SubjectRightsReportToJSON(value['subjectRights']),
        'transfer_assessments': (value['transferAssessments'] == null ? null : (value['transferAssessments'] as Array<any>).map(TransferAssessmentToJSON)),
    };
}

