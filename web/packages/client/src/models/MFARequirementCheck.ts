/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface MFARequirementCheck
 */
export interface MFARequirementCheck {
    /**
     * A URL to the JSON Schema for this object.
     * @type {string}
     * @memberof MFARequirementCheck
     */
    readonly $schema?: string;
    /**
     * Whether user has MFA configured
     * @type {boolean}
     * @memberof MFARequirementCheck
     */
    configured: boolean;
    /**
     * Grace period expiration
     * @type {Date}
     * @memberof MFARequirementCheck
     */
    graceExpires?: Date;
    /**
     * Whether user is in grace period
     * @type {boolean}
     * @memberof MFARequirementCheck
     */
    gracePeriod: boolean;
    /**
     * Available MFA methods
     * @type {Array<string>}
     * @memberof MFARequirementCheck
     */
    methods: Array<string> | null;
    /**
     * Whether MFA is required
     * @type {boolean}
     * @memberof MFARequirementCheck
     */
    required: boolean;
    /**
     * User ID
     * @type {string}
     * @memberof MFARequirementCheck
     */
    userId: string;
}

/**
 * Check if a given object implements the MFARequirementCheck interface.
 */
export function instanceOfMFARequirementCheck(value: object): value is MFARequirementCheck {
    if (!('configured' in value) || value['configured'] === undefined) return false;
    if (!('gracePeriod' in value) || value['gracePeriod'] === undefined) return false;
    if (!('methods' in value) || value['methods'] === undefined) return false;
    if (!('required' in value) || value['required'] === undefined) return false;
    if (!('userId' in value) || value['userId'] === undefined) return false;
    return true;
}

export function MFARequirementCheckFromJSON(json: any): MFARequirementCheck {
    return MFARequirementCheckFromJSONTyped(json, false);
}

export function MFARequirementCheckFromJSONTyped(json: any, ignoreDiscriminator: boolean): MFARequirementCheck {
    if (json == null) {
        return json;
    }
    return {
        
        '$schema': json['$schema'] == null ? undefined : json['$schema'],
        'configured': json['configured'],
        'graceExpires': json['graceExpires'] == null ? undefined : (new Date(json['graceExpires'])),
        'gracePeriod': json['gracePeriod'],
        'methods': json['methods'] == null ? null : json['methods'],
        'required': json['required'],
        'userId': json['userId'],
    };
}

export function MFARequirementCheckToJSON(json: any): MFARequirementCheck {
    return MFARequirementCheckToJSONTyped(json, false);
}

export function MFARequirementCheckToJSONTyped(value?: Omit<MFARequirementCheck, '$schema'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'configured': value['configured'],
        'graceExpires': value['graceExpires'] == null ? undefined : ((value['graceExpires']).toISOString()),
        'gracePeriod': value['gracePeriod'],
        'methods': value['methods'],
        'required': value['required'],
        'userId': value['userId'],
    };
}

