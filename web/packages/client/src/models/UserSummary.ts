/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { UserType } from './UserType';
import {
    UserTypeFromJSON,
    UserTypeFromJSONTyped,
    UserTypeToJSON,
    UserTypeToJSONTyped,
} from './UserType';

/**
 * 
 * @export
 * @interface UserSummary
 */
export interface UserSummary {
    /**
     * A URL to the JSON Schema for this object.
     * @type {string}
     * @memberof UserSummary
     */
    readonly $schema?: string;
    /**
     * Whether user is active
     * @type {boolean}
     * @memberof UserSummary
     */
    active: boolean;
    /**
     * Creation timestamp
     * @type {Date}
     * @memberof UserSummary
     */
    createdAt: Date;
    /**
     * User email
     * @type {string}
     * @memberof UserSummary
     */
    email: string;
    /**
     * First name
     * @type {string}
     * @memberof UserSummary
     */
    firstName?: string;
    /**
     * User ID
     * @type {string}
     * @memberof UserSummary
     */
    id: string;
    /**
     * Last login
     * @type {Date}
     * @memberof UserSummary
     */
    lastLogin?: Date;
    /**
     * Last name
     * @type {string}
     * @memberof UserSummary
     */
    lastName?: string;
    /**
     * Phone number
     * @type {string}
     * @memberof UserSummary
     */
    phoneNumber: string;
    /**
     * Profile image URL
     * @type {string}
     * @memberof UserSummary
     */
    profileImageUrl?: string;
    /**
     * User type
     * @type {UserType}
     * @memberof UserSummary
     */
    userType: UserType;
    /**
     * Username
     * @type {string}
     * @memberof UserSummary
     */
    username?: string;
}



/**
 * Check if a given object implements the UserSummary interface.
 */
export function instanceOfUserSummary(value: object): value is UserSummary {
    if (!('active' in value) || value['active'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('email' in value) || value['email'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('phoneNumber' in value) || value['phoneNumber'] === undefined) return false;
    if (!('userType' in value) || value['userType'] === undefined) return false;
    return true;
}

export function UserSummaryFromJSON(json: any): UserSummary {
    return UserSummaryFromJSONTyped(json, false);
}

export function UserSummaryFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserSummary {
    if (json == null) {
        return json;
    }
    return {
        
        '$schema': json['$schema'] == null ? undefined : json['$schema'],
        'active': json['active'],
        'createdAt': (new Date(json['createdAt'])),
        'email': json['email'],
        'firstName': json['firstName'] == null ? undefined : json['firstName'],
        'id': json['id'],
        'lastLogin': json['lastLogin'] == null ? undefined : (new Date(json['lastLogin'])),
        'lastName': json['lastName'] == null ? undefined : json['lastName'],
        'phoneNumber': json['phoneNumber'],
        'profileImageUrl': json['profileImageUrl'] == null ? undefined : json['profileImageUrl'],
        'userType': UserTypeFromJSON(json['userType']),
        'username': json['username'] == null ? undefined : json['username'],
    };
}

export function UserSummaryToJSON(json: any): UserSummary {
    return UserSummaryToJSONTyped(json, false);
}

export function UserSummaryToJSONTyped(value?: Omit<UserSummary, '$schema'> | null, ignoreDiscriminator = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'active': value['active'],
        'createdAt': ((value['createdAt']).toISOString()),
        'email': value['email'],
        'firstName': value['firstName'],
        'id': value['id'],
        'lastLogin': value['lastLogin'] == null ? undefined : ((value['lastLogin']).toISOString()),
        'lastName': value['lastName'],
        'phoneNumber': value['phoneNumber'],
        'profileImageUrl': value['profileImageUrl'],
        'userType': UserTypeToJSON(value['userType']),
        'username': value['username'],
    };
}

