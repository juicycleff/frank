/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ControlStatus } from './ControlStatus';
import {
    ControlStatusFromJSON,
    ControlStatusFromJSONTyped,
    ControlStatusToJSON,
    ControlStatusToJSONTyped,
} from './ControlStatus';

/**
 * 
 * @export
 * @interface HIPAAAdministrative
 */
export interface HIPAAAdministrative {
    /**
     * 
     * @type {ControlStatus}
     * @memberof HIPAAAdministrative
     */
    accessManagement: ControlStatus;
    /**
     * 
     * @type {ControlStatus}
     * @memberof HIPAAAdministrative
     */
    contingencyPlan: ControlStatus;
    /**
     * 
     * @type {ControlStatus}
     * @memberof HIPAAAdministrative
     */
    securityEvaluation: ControlStatus;
    /**
     * 
     * @type {ControlStatus}
     * @memberof HIPAAAdministrative
     */
    securityIncident: ControlStatus;
    /**
     * 
     * @type {ControlStatus}
     * @memberof HIPAAAdministrative
     */
    securityOfficer: ControlStatus;
    /**
     * 
     * @type {ControlStatus}
     * @memberof HIPAAAdministrative
     */
    workforceTraining: ControlStatus;
}

/**
 * Check if a given object implements the HIPAAAdministrative interface.
 */
export function instanceOfHIPAAAdministrative(value: object): value is HIPAAAdministrative {
    if (!('accessManagement' in value) || value['accessManagement'] === undefined) return false;
    if (!('contingencyPlan' in value) || value['contingencyPlan'] === undefined) return false;
    if (!('securityEvaluation' in value) || value['securityEvaluation'] === undefined) return false;
    if (!('securityIncident' in value) || value['securityIncident'] === undefined) return false;
    if (!('securityOfficer' in value) || value['securityOfficer'] === undefined) return false;
    if (!('workforceTraining' in value) || value['workforceTraining'] === undefined) return false;
    return true;
}

export function HIPAAAdministrativeFromJSON(json: any): HIPAAAdministrative {
    return HIPAAAdministrativeFromJSONTyped(json, false);
}

export function HIPAAAdministrativeFromJSONTyped(json: any, ignoreDiscriminator: boolean): HIPAAAdministrative {
    if (json == null) {
        return json;
    }
    return {
        
        'accessManagement': ControlStatusFromJSON(json['access_management']),
        'contingencyPlan': ControlStatusFromJSON(json['contingency_plan']),
        'securityEvaluation': ControlStatusFromJSON(json['security_evaluation']),
        'securityIncident': ControlStatusFromJSON(json['security_incident']),
        'securityOfficer': ControlStatusFromJSON(json['security_officer']),
        'workforceTraining': ControlStatusFromJSON(json['workforce_training']),
    };
}

export function HIPAAAdministrativeToJSON(json: any): HIPAAAdministrative {
    return HIPAAAdministrativeToJSONTyped(json, false);
}

export function HIPAAAdministrativeToJSONTyped(value?: HIPAAAdministrative | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'access_management': ControlStatusToJSON(value['accessManagement']),
        'contingency_plan': ControlStatusToJSON(value['contingencyPlan']),
        'security_evaluation': ControlStatusToJSON(value['securityEvaluation']),
        'security_incident': ControlStatusToJSON(value['securityIncident']),
        'security_officer': ControlStatusToJSON(value['securityOfficer']),
        'workforce_training': ControlStatusToJSON(value['workforceTraining']),
    };
}

