/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface PermissionStats
 */
export interface PermissionStats {
    /**
     * A URL to the JSON Schema for this object.
     * @type {string}
     * @memberof PermissionStats
     */
    readonly $schema?: string;
    /**
     * Category breakdown
     * @type {{ [key: string]: number; }}
     * @memberof PermissionStats
     */
    categoryBreakdown: { [key: string]: number; };
    /**
     * Custom permissions
     * @type {number}
     * @memberof PermissionStats
     */
    customPermissions: number;
    /**
     * Dangerous permissions
     * @type {number}
     * @memberof PermissionStats
     */
    dangerousPermissions: number;
    /**
     * Resource breakdown
     * @type {{ [key: string]: number; }}
     * @memberof PermissionStats
     */
    resourceBreakdown: { [key: string]: number; };
    /**
     * Risk level breakdown
     * @type {{ [key: string]: number; }}
     * @memberof PermissionStats
     */
    riskLevelBreakdown: { [key: string]: number; };
    /**
     * System permissions
     * @type {number}
     * @memberof PermissionStats
     */
    systemPermissions: number;
    /**
     * Total permissions
     * @type {number}
     * @memberof PermissionStats
     */
    totalPermissions: number;
    /**
     * Unused permissions
     * @type {number}
     * @memberof PermissionStats
     */
    unusedPermissions: number;
}

/**
 * Check if a given object implements the PermissionStats interface.
 */
export function instanceOfPermissionStats(value: object): value is PermissionStats {
    if (!('categoryBreakdown' in value) || value['categoryBreakdown'] === undefined) return false;
    if (!('customPermissions' in value) || value['customPermissions'] === undefined) return false;
    if (!('dangerousPermissions' in value) || value['dangerousPermissions'] === undefined) return false;
    if (!('resourceBreakdown' in value) || value['resourceBreakdown'] === undefined) return false;
    if (!('riskLevelBreakdown' in value) || value['riskLevelBreakdown'] === undefined) return false;
    if (!('systemPermissions' in value) || value['systemPermissions'] === undefined) return false;
    if (!('totalPermissions' in value) || value['totalPermissions'] === undefined) return false;
    if (!('unusedPermissions' in value) || value['unusedPermissions'] === undefined) return false;
    return true;
}

export function PermissionStatsFromJSON(json: any): PermissionStats {
    return PermissionStatsFromJSONTyped(json, false);
}

export function PermissionStatsFromJSONTyped(json: any, ignoreDiscriminator: boolean): PermissionStats {
    if (json == null) {
        return json;
    }
    return {
        
        '$schema': json['$schema'] == null ? undefined : json['$schema'],
        'categoryBreakdown': json['categoryBreakdown'],
        'customPermissions': json['customPermissions'],
        'dangerousPermissions': json['dangerousPermissions'],
        'resourceBreakdown': json['resourceBreakdown'],
        'riskLevelBreakdown': json['riskLevelBreakdown'],
        'systemPermissions': json['systemPermissions'],
        'totalPermissions': json['totalPermissions'],
        'unusedPermissions': json['unusedPermissions'],
    };
}

export function PermissionStatsToJSON(json: any): PermissionStats {
    return PermissionStatsToJSONTyped(json, false);
}

export function PermissionStatsToJSONTyped(value?: Omit<PermissionStats, '$schema'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'categoryBreakdown': value['categoryBreakdown'],
        'customPermissions': value['customPermissions'],
        'dangerousPermissions': value['dangerousPermissions'],
        'resourceBreakdown': value['resourceBreakdown'],
        'riskLevelBreakdown': value['riskLevelBreakdown'],
        'systemPermissions': value['systemPermissions'],
        'totalPermissions': value['totalPermissions'],
        'unusedPermissions': value['unusedPermissions'],
    };
}

