/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface MembershipActivity
 */
export interface MembershipActivity {
    [key: string]: any | any;
    /**
     * Action performed
     * @type {string}
     * @memberof MembershipActivity
     */
    action: string;
    /**
     * Who performed the action
     * @type {string}
     * @memberof MembershipActivity
     */
    actorEmail: string;
    /**
     * Action description
     * @type {string}
     * @memberof MembershipActivity
     */
    description: string;
    /**
     * Activity ID
     * @type {string}
     * @memberof MembershipActivity
     */
    id: string;
    /**
     * Membership ID
     * @type {string}
     * @memberof MembershipActivity
     */
    membershipId: string;
    /**
     * Additional metadata
     * @type {object}
     * @memberof MembershipActivity
     */
    metadata?: object;
    /**
     * Activity timestamp
     * @type {Date}
     * @memberof MembershipActivity
     */
    timestamp: Date;
    /**
     * User email
     * @type {string}
     * @memberof MembershipActivity
     */
    userEmail: string;
    /**
     * Member ID
     * @type {string}
     * @memberof MembershipActivity
     */
    userId: string;
}

/**
 * Check if a given object implements the MembershipActivity interface.
 */
export function instanceOfMembershipActivity(value: object): value is MembershipActivity {
    if (!('action' in value) || value['action'] === undefined) return false;
    if (!('actorEmail' in value) || value['actorEmail'] === undefined) return false;
    if (!('description' in value) || value['description'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('membershipId' in value) || value['membershipId'] === undefined) return false;
    if (!('timestamp' in value) || value['timestamp'] === undefined) return false;
    if (!('userEmail' in value) || value['userEmail'] === undefined) return false;
    if (!('userId' in value) || value['userId'] === undefined) return false;
    return true;
}

export function MembershipActivityFromJSON(json: any): MembershipActivity {
    return MembershipActivityFromJSONTyped(json, false);
}

export function MembershipActivityFromJSONTyped(json: any, ignoreDiscriminator: boolean): MembershipActivity {
    if (json == null) {
        return json;
    }
    return {
        
            ...json,
        'action': json['action'],
        'actorEmail': json['actorEmail'],
        'description': json['description'],
        'id': json['id'],
        'membershipId': json['membershipId'],
        'metadata': json['metadata'] == null ? undefined : json['metadata'],
        'timestamp': (new Date(json['timestamp'])),
        'userEmail': json['userEmail'],
        'userId': json['userId'],
    };
}

export function MembershipActivityToJSON(json: any): MembershipActivity {
    return MembershipActivityToJSONTyped(json, false);
}

export function MembershipActivityToJSONTyped(value?: MembershipActivity | null, ignoreDiscriminator = false): any {
    if (value == null) {
        return value;
    }

    return {
        
            ...value,
        'action': value['action'],
        'actorEmail': value['actorEmail'],
        'description': value['description'],
        'id': value['id'],
        'membershipId': value['membershipId'],
        'metadata': value['metadata'],
        'timestamp': ((value['timestamp']).toISOString()),
        'userEmail': value['userEmail'],
        'userId': value['userId'],
    };
}

