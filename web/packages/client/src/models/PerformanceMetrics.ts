/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ResourceUtilizationMetrics } from './ResourceUtilizationMetrics';
import {
    ResourceUtilizationMetricsFromJSON,
    ResourceUtilizationMetricsFromJSONTyped,
    ResourceUtilizationMetricsToJSON,
    ResourceUtilizationMetricsToJSONTyped,
} from './ResourceUtilizationMetrics';
import type { PerformanceBottleneck } from './PerformanceBottleneck';
import {
    PerformanceBottleneckFromJSON,
    PerformanceBottleneckFromJSONTyped,
    PerformanceBottleneckToJSON,
    PerformanceBottleneckToJSONTyped,
} from './PerformanceBottleneck';
import type { ResponseTimeMetrics } from './ResponseTimeMetrics';
import {
    ResponseTimeMetricsFromJSON,
    ResponseTimeMetricsFromJSONTyped,
    ResponseTimeMetricsToJSON,
    ResponseTimeMetricsToJSONTyped,
} from './ResponseTimeMetrics';
import type { ThroughputMetrics } from './ThroughputMetrics';
import {
    ThroughputMetricsFromJSON,
    ThroughputMetricsFromJSONTyped,
    ThroughputMetricsToJSON,
    ThroughputMetricsToJSONTyped,
} from './ThroughputMetrics';

/**
 * 
 * @export
 * @interface PerformanceMetrics
 */
export interface PerformanceMetrics {
    /**
     * A URL to the JSON Schema for this object.
     * @type {string}
     * @memberof PerformanceMetrics
     */
    readonly $schema?: string;
    /**
     * 
     * @type {Array<PerformanceBottleneck>}
     * @memberof PerformanceMetrics
     */
    bottlenecks: Array<PerformanceBottleneck> | null;
    /**
     * 
     * @type {Date}
     * @memberof PerformanceMetrics
     */
    generatedAt: Date;
    /**
     * 
     * @type {string}
     * @memberof PerformanceMetrics
     */
    period: string;
    /**
     * 
     * @type {ResourceUtilizationMetrics}
     * @memberof PerformanceMetrics
     */
    resources: ResourceUtilizationMetrics;
    /**
     * 
     * @type {ResponseTimeMetrics}
     * @memberof PerformanceMetrics
     */
    responseTime: ResponseTimeMetrics;
    /**
     * 
     * @type {ThroughputMetrics}
     * @memberof PerformanceMetrics
     */
    throughput: ThroughputMetrics;
}

/**
 * Check if a given object implements the PerformanceMetrics interface.
 */
export function instanceOfPerformanceMetrics(value: object): value is PerformanceMetrics {
    if (!('bottlenecks' in value) || value['bottlenecks'] === undefined) return false;
    if (!('generatedAt' in value) || value['generatedAt'] === undefined) return false;
    if (!('period' in value) || value['period'] === undefined) return false;
    if (!('resources' in value) || value['resources'] === undefined) return false;
    if (!('responseTime' in value) || value['responseTime'] === undefined) return false;
    if (!('throughput' in value) || value['throughput'] === undefined) return false;
    return true;
}

export function PerformanceMetricsFromJSON(json: any): PerformanceMetrics {
    return PerformanceMetricsFromJSONTyped(json, false);
}

export function PerformanceMetricsFromJSONTyped(json: any, ignoreDiscriminator: boolean): PerformanceMetrics {
    if (json == null) {
        return json;
    }
    return {
        
        '$schema': json['$schema'] == null ? undefined : json['$schema'],
        'bottlenecks': (json['bottlenecks'] == null ? null : (json['bottlenecks'] as Array<any>).map(PerformanceBottleneckFromJSON)),
        'generatedAt': (new Date(json['generated_at'])),
        'period': json['period'],
        'resources': ResourceUtilizationMetricsFromJSON(json['resources']),
        'responseTime': ResponseTimeMetricsFromJSON(json['response_time']),
        'throughput': ThroughputMetricsFromJSON(json['throughput']),
    };
}

export function PerformanceMetricsToJSON(json: any): PerformanceMetrics {
    return PerformanceMetricsToJSONTyped(json, false);
}

export function PerformanceMetricsToJSONTyped(value?: Omit<PerformanceMetrics, '$schema'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'bottlenecks': (value['bottlenecks'] == null ? null : (value['bottlenecks'] as Array<any>).map(PerformanceBottleneckToJSON)),
        'generated_at': ((value['generatedAt']).toISOString()),
        'period': value['period'],
        'resources': ResourceUtilizationMetricsToJSON(value['resources']),
        'response_time': ResponseTimeMetricsToJSON(value['responseTime']),
        'throughput': ThroughputMetricsToJSON(value['throughput']),
    };
}

