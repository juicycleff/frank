/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface MagicLinkRequest
 */
export interface MagicLinkRequest {
    /**
     * A URL to the JSON Schema for this object.
     * @type {string}
     * @memberof MagicLinkRequest
     */
    readonly $schema?: string;
    /**
     * User email address
     * @type {string}
     * @memberof MagicLinkRequest
     */
    email: string;
    /**
     * URL to redirect to after authentication
     * @type {string}
     * @memberof MagicLinkRequest
     */
    redirectUrl?: string;
}

/**
 * Check if a given object implements the MagicLinkRequest interface.
 */
export function instanceOfMagicLinkRequest(value: object): value is MagicLinkRequest {
    if (!('email' in value) || value['email'] === undefined) return false;
    return true;
}

export function MagicLinkRequestFromJSON(json: any): MagicLinkRequest {
    return MagicLinkRequestFromJSONTyped(json, false);
}

export function MagicLinkRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): MagicLinkRequest {
    if (json == null) {
        return json;
    }
    return {
        
        '$schema': json['$schema'] == null ? undefined : json['$schema'],
        'email': json['email'],
        'redirectUrl': json['redirectUrl'] == null ? undefined : json['redirectUrl'],
    };
}

export function MagicLinkRequestToJSON(json: any): MagicLinkRequest {
    return MagicLinkRequestToJSONTyped(json, false);
}

export function MagicLinkRequestToJSONTyped(value?: Omit<MagicLinkRequest, '$schema'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'email': value['email'],
        'redirectUrl': value['redirectUrl'],
    };
}

