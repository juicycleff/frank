/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { UserSummary } from './UserSummary';
import {
    UserSummaryFromJSON,
    UserSummaryFromJSONTyped,
    UserSummaryToJSON,
    UserSummaryToJSONTyped,
} from './UserSummary';
import type { RoleSummary } from './RoleSummary';
import {
    RoleSummaryFromJSON,
    RoleSummaryFromJSONTyped,
    RoleSummaryToJSON,
    RoleSummaryToJSONTyped,
} from './RoleSummary';

/**
 * 
 * @export
 * @interface RoleAssignment
 */
export interface RoleAssignment {
    [key: string]: any | any;
    /**
     * Whether assignment is active
     * @type {boolean}
     * @memberof RoleAssignment
     */
    active: boolean;
    /**
     * Assignment timestamp
     * @type {Date}
     * @memberof RoleAssignment
     */
    assignedAt: Date;
    /**
     * Who assigned the role
     * @type {string}
     * @memberof RoleAssignment
     */
    assignedBy?: string;
    /**
     * User who made assignment
     * @type {UserSummary}
     * @memberof RoleAssignment
     */
    assigner?: UserSummary;
    /**
     * Assignment conditions
     * @type {object}
     * @memberof RoleAssignment
     */
    conditions?: object;
    /**
     * Context ID
     * @type {string}
     * @memberof RoleAssignment
     */
    contextId?: string;
    /**
     * Assignment context
     * @type {string}
     * @memberof RoleAssignment
     */
    contextType: string;
    /**
     * 
     * @type {Date}
     * @memberof RoleAssignment
     */
    createdAt: Date;
    /**
     * Assignment expiration
     * @type {Date}
     * @memberof RoleAssignment
     */
    expiresAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof RoleAssignment
     */
    id: string;
    /**
     * Role information
     * @type {RoleSummary}
     * @memberof RoleAssignment
     */
    role?: RoleSummary;
    /**
     * Role ID
     * @type {string}
     * @memberof RoleAssignment
     */
    roleId: string;
    /**
     * 
     * @type {Date}
     * @memberof RoleAssignment
     */
    updatedAt: Date;
    /**
     * User information
     * @type {UserSummary}
     * @memberof RoleAssignment
     */
    user?: UserSummary;
    /**
     * User ID
     * @type {string}
     * @memberof RoleAssignment
     */
    userId: string;
}

/**
 * Check if a given object implements the RoleAssignment interface.
 */
export function instanceOfRoleAssignment(value: object): value is RoleAssignment {
    if (!('active' in value) || value['active'] === undefined) return false;
    if (!('assignedAt' in value) || value['assignedAt'] === undefined) return false;
    if (!('contextType' in value) || value['contextType'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('roleId' in value) || value['roleId'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    if (!('userId' in value) || value['userId'] === undefined) return false;
    return true;
}

export function RoleAssignmentFromJSON(json: any): RoleAssignment {
    return RoleAssignmentFromJSONTyped(json, false);
}

export function RoleAssignmentFromJSONTyped(json: any, ignoreDiscriminator: boolean): RoleAssignment {
    if (json == null) {
        return json;
    }
    return {
        
            ...json,
        'active': json['active'],
        'assignedAt': (new Date(json['assignedAt'])),
        'assignedBy': json['assignedBy'] == null ? undefined : json['assignedBy'],
        'assigner': json['assigner'] == null ? undefined : UserSummaryFromJSON(json['assigner']),
        'conditions': json['conditions'] == null ? undefined : json['conditions'],
        'contextId': json['contextId'] == null ? undefined : json['contextId'],
        'contextType': json['contextType'],
        'createdAt': (new Date(json['createdAt'])),
        'expiresAt': json['expiresAt'] == null ? undefined : (new Date(json['expiresAt'])),
        'id': json['id'],
        'role': json['role'] == null ? undefined : RoleSummaryFromJSON(json['role']),
        'roleId': json['roleId'],
        'updatedAt': (new Date(json['updatedAt'])),
        'user': json['user'] == null ? undefined : UserSummaryFromJSON(json['user']),
        'userId': json['userId'],
    };
}

export function RoleAssignmentToJSON(json: any): RoleAssignment {
    return RoleAssignmentToJSONTyped(json, false);
}

export function RoleAssignmentToJSONTyped(value?: RoleAssignment | null, ignoreDiscriminator = false): any {
    if (value == null) {
        return value;
    }

    return {
        
            ...value,
        'active': value['active'],
        'assignedAt': ((value['assignedAt']).toISOString()),
        'assignedBy': value['assignedBy'],
        'assigner': UserSummaryToJSON(value['assigner']),
        'conditions': value['conditions'],
        'contextId': value['contextId'],
        'contextType': value['contextType'],
        'createdAt': ((value['createdAt']).toISOString()),
        'expiresAt': value['expiresAt'] == null ? undefined : ((value['expiresAt']).toISOString()),
        'id': value['id'],
        'role': RoleSummaryToJSON(value['role']),
        'roleId': value['roleId'],
        'updatedAt': ((value['updatedAt']).toISOString()),
        'user': UserSummaryToJSON(value['user']),
        'userId': value['userId'],
    };
}

