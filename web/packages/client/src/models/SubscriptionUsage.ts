/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { UsagePeriod } from './UsagePeriod';
import {
    UsagePeriodFromJSON,
    UsagePeriodFromJSONTyped,
    UsagePeriodToJSON,
    UsagePeriodToJSONTyped,
} from './UsagePeriod';
import type { UsageOverage } from './UsageOverage';
import {
    UsageOverageFromJSON,
    UsageOverageFromJSONTyped,
    UsageOverageToJSON,
    UsageOverageToJSONTyped,
} from './UsageOverage';
import type { UsageLimits } from './UsageLimits';
import {
    UsageLimitsFromJSON,
    UsageLimitsFromJSONTyped,
    UsageLimitsToJSON,
    UsageLimitsToJSONTyped,
} from './UsageLimits';

/**
 * 
 * @export
 * @interface SubscriptionUsage
 */
export interface SubscriptionUsage {
    /**
     * 
     * @type {UsagePeriod}
     * @memberof SubscriptionUsage
     */
    currentPeriod: UsagePeriod;
    /**
     * 
     * @type {UsageLimits}
     * @memberof SubscriptionUsage
     */
    limits: UsageLimits;
    /**
     * 
     * @type {Array<UsageOverage>}
     * @memberof SubscriptionUsage
     */
    overages: Array<UsageOverage> | null;
    /**
     * 
     * @type {UsagePeriod}
     * @memberof SubscriptionUsage
     */
    previousPeriod: UsagePeriod;
}

/**
 * Check if a given object implements the SubscriptionUsage interface.
 */
export function instanceOfSubscriptionUsage(value: object): value is SubscriptionUsage {
    if (!('currentPeriod' in value) || value['currentPeriod'] === undefined) return false;
    if (!('limits' in value) || value['limits'] === undefined) return false;
    if (!('overages' in value) || value['overages'] === undefined) return false;
    if (!('previousPeriod' in value) || value['previousPeriod'] === undefined) return false;
    return true;
}

export function SubscriptionUsageFromJSON(json: any): SubscriptionUsage {
    return SubscriptionUsageFromJSONTyped(json, false);
}

export function SubscriptionUsageFromJSONTyped(json: any, ignoreDiscriminator: boolean): SubscriptionUsage {
    if (json == null) {
        return json;
    }
    return {
        
        'currentPeriod': UsagePeriodFromJSON(json['current_period']),
        'limits': UsageLimitsFromJSON(json['limits']),
        'overages': (json['overages'] == null ? null : (json['overages'] as Array<any>).map(UsageOverageFromJSON)),
        'previousPeriod': UsagePeriodFromJSON(json['previous_period']),
    };
}

export function SubscriptionUsageToJSON(json: any): SubscriptionUsage {
    return SubscriptionUsageToJSONTyped(json, false);
}

export function SubscriptionUsageToJSONTyped(value?: SubscriptionUsage | null, ignoreDiscriminator = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'current_period': UsagePeriodToJSON(value['currentPeriod']),
        'limits': UsageLimitsToJSON(value['limits']),
        'overages': (value['overages'] == null ? null : (value['overages'] as Array<any>).map(UsageOverageToJSON)),
        'previous_period': UsagePeriodToJSON(value['previousPeriod']),
    };
}

