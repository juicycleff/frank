/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface MFAInfo
 */
export interface MFAInfo {
    [key: string]: any | any;
    /**
     * Whether method is enabled
     * @type {boolean}
     * @memberof MFAInfo
     */
    enabled: boolean;
    /**
     * Masked phone/email for display
     * @type {string}
     * @memberof MFAInfo
     */
    masked?: string;
    /**
     * MFA method (totp, sms, email)
     * @type {string}
     * @memberof MFAInfo
     */
    method: string;
    /**
     * User-friendly name
     * @type {string}
     * @memberof MFAInfo
     */
    name?: string;
    /**
     * Whether method is verified
     * @type {boolean}
     * @memberof MFAInfo
     */
    verified: boolean;
}

/**
 * Check if a given object implements the MFAInfo interface.
 */
export function instanceOfMFAInfo(value: object): value is MFAInfo {
    if (!('enabled' in value) || value['enabled'] === undefined) return false;
    if (!('method' in value) || value['method'] === undefined) return false;
    if (!('verified' in value) || value['verified'] === undefined) return false;
    return true;
}

export function MFAInfoFromJSON(json: any): MFAInfo {
    return MFAInfoFromJSONTyped(json, false);
}

export function MFAInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): MFAInfo {
    if (json == null) {
        return json;
    }
    return {
        
            ...json,
        'enabled': json['enabled'],
        'masked': json['masked'] == null ? undefined : json['masked'],
        'method': json['method'],
        'name': json['name'] == null ? undefined : json['name'],
        'verified': json['verified'],
    };
}

export function MFAInfoToJSON(json: any): MFAInfo {
    return MFAInfoToJSONTyped(json, false);
}

export function MFAInfoToJSONTyped(value?: MFAInfo | null, ignoreDiscriminator = false): any {
    if (value == null) {
        return value;
    }

    return {
        
            ...value,
        'enabled': value['enabled'],
        'masked': value['masked'],
        'method': value['method'],
        'name': value['name'],
        'verified': value['verified'],
    };
}

