/* tslint:disable */
/* eslint-disable */
/**
 * My Project
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Session
 */
export interface Session {
    /**
     * Whether session is active
     * @type {boolean}
     * @memberof Session
     */
    active: boolean;
    /**
     * 
     * @type {Date}
     * @memberof Session
     */
    createdAt: Date;
    /**
     * Device ID
     * @type {string}
     * @memberof Session
     */
    deviceId?: string;
    /**
     * Session expiration time
     * @type {Date}
     * @memberof Session
     */
    expiresAt: Date;
    /**
     * 
     * @type {string}
     * @memberof Session
     */
    id: string;
    /**
     * IP address
     * @type {string}
     * @memberof Session
     */
    ipAddress?: string;
    /**
     * Last activity time
     * @type {Date}
     * @memberof Session
     */
    lastActiveAt: Date;
    /**
     * Location
     * @type {string}
     * @memberof Session
     */
    location?: string;
    /**
     * Additional session metadata
     * @type {{ [key: string]: string; }}
     * @memberof Session
     */
    metadata?: { [key: string]: string; };
    /**
     * Organization ID
     * @type {string}
     * @memberof Session
     */
    organizationId?: string;
    /**
     * Session token
     * @type {string}
     * @memberof Session
     */
    token?: string;
    /**
     * 
     * @type {Date}
     * @memberof Session
     */
    updatedAt: Date;
    /**
     * User agent
     * @type {string}
     * @memberof Session
     */
    userAgent?: string;
    /**
     * User ID
     * @type {string}
     * @memberof Session
     */
    userId: string;
}

export function SessionFromJSON(json: any): Session {
    return SessionFromJSONTyped(json, false);
}

export function SessionFromJSONTyped(json: any, ignoreDiscriminator: boolean): Session {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'active': json['active'],
        'createdAt': (new Date(json['createdAt'])),
        'deviceId': !exists(json, 'deviceId') ? undefined : json['deviceId'],
        'expiresAt': (new Date(json['expiresAt'])),
        'id': json['id'],
        'ipAddress': !exists(json, 'ipAddress') ? undefined : json['ipAddress'],
        'lastActiveAt': (new Date(json['lastActiveAt'])),
        'location': !exists(json, 'location') ? undefined : json['location'],
        'metadata': !exists(json, 'metadata') ? undefined : json['metadata'],
        'organizationId': !exists(json, 'organizationId') ? undefined : json['organizationId'],
        'token': !exists(json, 'token') ? undefined : json['token'],
        'updatedAt': (new Date(json['updatedAt'])),
        'userAgent': !exists(json, 'userAgent') ? undefined : json['userAgent'],
        'userId': json['userId'],
    };
}

export function SessionToJSON(value?: Session | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'active': value.active,
        'createdAt': (value.createdAt.toISOString()),
        'deviceId': value.deviceId,
        'expiresAt': (value.expiresAt.toISOString()),
        'id': value.id,
        'ipAddress': value.ipAddress,
        'lastActiveAt': (value.lastActiveAt.toISOString()),
        'location': value.location,
        'metadata': value.metadata,
        'organizationId': value.organizationId,
        'token': value.token,
        'updatedAt': (value.updatedAt.toISOString()),
        'userAgent': value.userAgent,
        'userId': value.userId,
    };
}


