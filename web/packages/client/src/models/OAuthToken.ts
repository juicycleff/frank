/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { OAuthScope } from './OAuthScope';
import {
    OAuthScopeFromJSON,
    OAuthScopeFromJSONTyped,
    OAuthScopeToJSON,
    OAuthScopeToJSONTyped,
} from './OAuthScope';
import type { OrganizationSummary } from './OrganizationSummary';
import {
    OrganizationSummaryFromJSON,
    OrganizationSummaryFromJSONTyped,
    OrganizationSummaryToJSON,
    OrganizationSummaryToJSONTyped,
} from './OrganizationSummary';
import type { UserSummary } from './UserSummary';
import {
    UserSummaryFromJSON,
    UserSummaryFromJSONTyped,
    UserSummaryToJSON,
    UserSummaryToJSONTyped,
} from './UserSummary';
import type { OAuthClientSummary } from './OAuthClientSummary';
import {
    OAuthClientSummaryFromJSON,
    OAuthClientSummaryFromJSONTyped,
    OAuthClientSummaryToJSON,
    OAuthClientSummaryToJSONTyped,
} from './OAuthClientSummary';

/**
 * 
 * @export
 * @interface OAuthToken
 */
export interface OAuthToken {
    /**
     * A URL to the JSON Schema for this object.
     * @type {string}
     * @memberof OAuthToken
     */
    readonly $schema?: string;
    /**
     * Access token (write-only)
     * @type {string}
     * @memberof OAuthToken
     */
    accessToken?: string;
    /**
     * OAuth client information
     * @type {OAuthClientSummary}
     * @memberof OAuthToken
     */
    client?: OAuthClientSummary;
    /**
     * OAuth client ID
     * @type {string}
     * @memberof OAuthToken
     */
    clientId: string;
    /**
     * 
     * @type {Date}
     * @memberof OAuthToken
     */
    createdAt: Date;
    /**
     * Token expiration timestamp
     * @type {Date}
     * @memberof OAuthToken
     */
    expiresAt: Date;
    /**
     * Token expiry in seconds
     * @type {number}
     * @memberof OAuthToken
     */
    expiresIn: number;
    /**
     * 
     * @type {string}
     * @memberof OAuthToken
     */
    id: string;
    /**
     * IP address when token was issued
     * @type {string}
     * @memberof OAuthToken
     */
    ipAddress?: string;
    /**
     * Organization information
     * @type {OrganizationSummary}
     * @memberof OAuthToken
     */
    organization?: OrganizationSummary;
    /**
     * Organization ID
     * @type {string}
     * @memberof OAuthToken
     */
    organizationId?: string;
    /**
     * Refresh token (write-only)
     * @type {string}
     * @memberof OAuthToken
     */
    refreshToken?: string;
    /**
     * Refresh token expiration
     * @type {Date}
     * @memberof OAuthToken
     */
    refreshTokenExpiresAt?: Date;
    /**
     * Whether token is revoked
     * @type {boolean}
     * @memberof OAuthToken
     */
    revoked: boolean;
    /**
     * Token revocation timestamp
     * @type {Date}
     * @memberof OAuthToken
     */
    revokedAt?: Date;
    /**
     * Granted scopes
     * @type {Array<string>}
     * @memberof OAuthToken
     */
    scopeNames?: Array<string> | null;
    /**
     * Granted scopes
     * @type {Array<OAuthScope>}
     * @memberof OAuthToken
     */
    scopes?: Array<OAuthScope> | null;
    /**
     * Token type
     * @type {string}
     * @memberof OAuthToken
     */
    tokenType: string;
    /**
     * 
     * @type {Date}
     * @memberof OAuthToken
     */
    updatedAt: Date;
    /**
     * User information
     * @type {UserSummary}
     * @memberof OAuthToken
     */
    user?: UserSummary;
    /**
     * User agent when token was issued
     * @type {string}
     * @memberof OAuthToken
     */
    userAgent?: string;
    /**
     * User ID
     * @type {string}
     * @memberof OAuthToken
     */
    userId: string;
}

/**
 * Check if a given object implements the OAuthToken interface.
 */
export function instanceOfOAuthToken(value: object): value is OAuthToken {
    if (!('clientId' in value) || value['clientId'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('expiresAt' in value) || value['expiresAt'] === undefined) return false;
    if (!('expiresIn' in value) || value['expiresIn'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('revoked' in value) || value['revoked'] === undefined) return false;
    if (!('tokenType' in value) || value['tokenType'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    if (!('userId' in value) || value['userId'] === undefined) return false;
    return true;
}

export function OAuthTokenFromJSON(json: any): OAuthToken {
    return OAuthTokenFromJSONTyped(json, false);
}

export function OAuthTokenFromJSONTyped(json: any, ignoreDiscriminator: boolean): OAuthToken {
    if (json == null) {
        return json;
    }
    return {
        
        '$schema': json['$schema'] == null ? undefined : json['$schema'],
        'accessToken': json['accessToken'] == null ? undefined : json['accessToken'],
        'client': json['client'] == null ? undefined : OAuthClientSummaryFromJSON(json['client']),
        'clientId': json['clientId'],
        'createdAt': (new Date(json['createdAt'])),
        'expiresAt': (new Date(json['expiresAt'])),
        'expiresIn': json['expiresIn'],
        'id': json['id'],
        'ipAddress': json['ipAddress'] == null ? undefined : json['ipAddress'],
        'organization': json['organization'] == null ? undefined : OrganizationSummaryFromJSON(json['organization']),
        'organizationId': json['organizationId'] == null ? undefined : json['organizationId'],
        'refreshToken': json['refreshToken'] == null ? undefined : json['refreshToken'],
        'refreshTokenExpiresAt': json['refreshTokenExpiresAt'] == null ? undefined : (new Date(json['refreshTokenExpiresAt'])),
        'revoked': json['revoked'],
        'revokedAt': json['revokedAt'] == null ? undefined : (new Date(json['revokedAt'])),
        'scopeNames': json['scopeNames'] == null ? undefined : json['scopeNames'],
        'scopes': json['scopes'] == null ? undefined : ((json['scopes'] as Array<any>).map(OAuthScopeFromJSON)),
        'tokenType': json['tokenType'],
        'updatedAt': (new Date(json['updatedAt'])),
        'user': json['user'] == null ? undefined : UserSummaryFromJSON(json['user']),
        'userAgent': json['userAgent'] == null ? undefined : json['userAgent'],
        'userId': json['userId'],
    };
}

export function OAuthTokenToJSON(json: any): OAuthToken {
    return OAuthTokenToJSONTyped(json, false);
}

export function OAuthTokenToJSONTyped(value?: Omit<OAuthToken, '$schema'> | null, ignoreDiscriminator = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'accessToken': value['accessToken'],
        'client': OAuthClientSummaryToJSON(value['client']),
        'clientId': value['clientId'],
        'createdAt': ((value['createdAt']).toISOString()),
        'expiresAt': ((value['expiresAt']).toISOString()),
        'expiresIn': value['expiresIn'],
        'id': value['id'],
        'ipAddress': value['ipAddress'],
        'organization': OrganizationSummaryToJSON(value['organization']),
        'organizationId': value['organizationId'],
        'refreshToken': value['refreshToken'],
        'refreshTokenExpiresAt': value['refreshTokenExpiresAt'] == null ? undefined : ((value['refreshTokenExpiresAt']).toISOString()),
        'revoked': value['revoked'],
        'revokedAt': value['revokedAt'] == null ? undefined : ((value['revokedAt']).toISOString()),
        'scopeNames': value['scopeNames'],
        'scopes': value['scopes'] == null ? undefined : ((value['scopes'] as Array<any>).map(OAuthScopeToJSON)),
        'tokenType': value['tokenType'],
        'updatedAt': ((value['updatedAt']).toISOString()),
        'user': UserSummaryToJSON(value['user']),
        'userAgent': value['userAgent'],
        'userId': value['userId'],
    };
}

