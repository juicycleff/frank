/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface UserPermissionAssignment
 */
export interface UserPermissionAssignment {
    [key: string]: any | any;
    /**
     * Whether assignment is active
     * @type {boolean}
     * @memberof UserPermissionAssignment
     */
    active: boolean;
    /**
     * When permission was assigned
     * @type {Date}
     * @memberof UserPermissionAssignment
     */
    assignedAt: Date;
    /**
     * Who assigned this permission
     * @type {string}
     * @memberof UserPermissionAssignment
     */
    assignedBy?: string;
    /**
     * Optional conditions for permission
     * @type {object}
     * @memberof UserPermissionAssignment
     */
    conditions?: object;
    /**
     * Context ID
     * @type {string}
     * @memberof UserPermissionAssignment
     */
    contextId?: string;
    /**
     * Assignment context type
     * @type {string}
     * @memberof UserPermissionAssignment
     */
    contextType: string;
    /**
     * Permission display name
     * @type {string}
     * @memberof UserPermissionAssignment
     */
    displayName: string;
    /**
     * When assignment expires
     * @type {Date}
     * @memberof UserPermissionAssignment
     */
    expiresAt?: Date;
    /**
     * Assignment ID
     * @type {string}
     * @memberof UserPermissionAssignment
     */
    id: string;
    /**
     * Permission ID
     * @type {string}
     * @memberof UserPermissionAssignment
     */
    permissionId: string;
    /**
     * Permission name
     * @type {string}
     * @memberof UserPermissionAssignment
     */
    permissionName: string;
    /**
     * Permission type (grant, deny)
     * @type {string}
     * @memberof UserPermissionAssignment
     */
    permissionType: string;
    /**
     * Reason for assignment
     * @type {string}
     * @memberof UserPermissionAssignment
     */
    reason?: string;
    /**
     * Specific resource ID
     * @type {string}
     * @memberof UserPermissionAssignment
     */
    resourceId?: string;
    /**
     * Specific resource type
     * @type {string}
     * @memberof UserPermissionAssignment
     */
    resourceType?: string;
}

/**
 * Check if a given object implements the UserPermissionAssignment interface.
 */
export function instanceOfUserPermissionAssignment(value: object): value is UserPermissionAssignment {
    if (!('active' in value) || value['active'] === undefined) return false;
    if (!('assignedAt' in value) || value['assignedAt'] === undefined) return false;
    if (!('contextType' in value) || value['contextType'] === undefined) return false;
    if (!('displayName' in value) || value['displayName'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('permissionId' in value) || value['permissionId'] === undefined) return false;
    if (!('permissionName' in value) || value['permissionName'] === undefined) return false;
    if (!('permissionType' in value) || value['permissionType'] === undefined) return false;
    return true;
}

export function UserPermissionAssignmentFromJSON(json: any): UserPermissionAssignment {
    return UserPermissionAssignmentFromJSONTyped(json, false);
}

export function UserPermissionAssignmentFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserPermissionAssignment {
    if (json == null) {
        return json;
    }
    return {
        
            ...json,
        'active': json['active'],
        'assignedAt': (new Date(json['assignedAt'])),
        'assignedBy': json['assignedBy'] == null ? undefined : json['assignedBy'],
        'conditions': json['conditions'] == null ? undefined : json['conditions'],
        'contextId': json['contextId'] == null ? undefined : json['contextId'],
        'contextType': json['contextType'],
        'displayName': json['displayName'],
        'expiresAt': json['expiresAt'] == null ? undefined : (new Date(json['expiresAt'])),
        'id': json['id'],
        'permissionId': json['permissionId'],
        'permissionName': json['permissionName'],
        'permissionType': json['permissionType'],
        'reason': json['reason'] == null ? undefined : json['reason'],
        'resourceId': json['resourceId'] == null ? undefined : json['resourceId'],
        'resourceType': json['resourceType'] == null ? undefined : json['resourceType'],
    };
}

export function UserPermissionAssignmentToJSON(json: any): UserPermissionAssignment {
    return UserPermissionAssignmentToJSONTyped(json, false);
}

export function UserPermissionAssignmentToJSONTyped(value?: UserPermissionAssignment | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
            ...value,
        'active': value['active'],
        'assignedAt': ((value['assignedAt']).toISOString()),
        'assignedBy': value['assignedBy'],
        'conditions': value['conditions'],
        'contextId': value['contextId'],
        'contextType': value['contextType'],
        'displayName': value['displayName'],
        'expiresAt': value['expiresAt'] == null ? undefined : ((value['expiresAt']).toISOString()),
        'id': value['id'],
        'permissionId': value['permissionId'],
        'permissionName': value['permissionName'],
        'permissionType': value['permissionType'],
        'reason': value['reason'],
        'resourceId': value['resourceId'],
        'resourceType': value['resourceType'],
    };
}

