/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface RegisterRequest
 */
export interface RegisterRequest {
    [key: string]: any | any;
    /**
     * A URL to the JSON Schema for this object.
     * @type {string}
     * @memberof RegisterRequest
     */
    readonly $schema?: string;
    /**
     * Whether user accepts terms and conditions
     * @type {boolean}
     * @memberof RegisterRequest
     */
    acceptTerms: boolean;
    /**
     * Custom user attributes
     * @type {object}
     * @memberof RegisterRequest
     */
    customAttributes?: object;
    /**
     * User email address
     * @type {string}
     * @memberof RegisterRequest
     */
    email: string;
    /**
     * First name
     * @type {string}
     * @memberof RegisterRequest
     */
    firstName?: string;
    /**
     * Client IP address
     * @type {string}
     * @memberof RegisterRequest
     */
    ipAddress?: string;
    /**
     * Last name
     * @type {string}
     * @memberof RegisterRequest
     */
    lastName?: string;
    /**
     * User locale
     * @type {string}
     * @memberof RegisterRequest
     */
    locale: string;
    /**
     * Whether user consents to marketing communications
     * @type {boolean}
     * @memberof RegisterRequest
     */
    marketingConsent: boolean;
    /**
     * Organization ID (for end users)
     * @type {string}
     * @memberof RegisterRequest
     */
    organizationId?: string;
    /**
     * User password (optional for passwordless)
     * @type {string}
     * @memberof RegisterRequest
     */
    password?: string;
    /**
     * Phone number
     * @type {string}
     * @memberof RegisterRequest
     */
    phoneNumber?: string;
    /**
     * User timezone
     * @type {string}
     * @memberof RegisterRequest
     */
    timezone?: string;
    /**
     * Client user agent
     * @type {string}
     * @memberof RegisterRequest
     */
    userAgent?: string;
    /**
     * User type (internal, external, end_user)
     * @type {string}
     * @memberof RegisterRequest
     */
    userType: string;
    /**
     * Desired username
     * @type {string}
     * @memberof RegisterRequest
     */
    username?: string;
}

/**
 * Check if a given object implements the RegisterRequest interface.
 */
export function instanceOfRegisterRequest(value: object): value is RegisterRequest {
    if (!('acceptTerms' in value) || value['acceptTerms'] === undefined) return false;
    if (!('email' in value) || value['email'] === undefined) return false;
    if (!('locale' in value) || value['locale'] === undefined) return false;
    if (!('marketingConsent' in value) || value['marketingConsent'] === undefined) return false;
    if (!('userType' in value) || value['userType'] === undefined) return false;
    return true;
}

export function RegisterRequestFromJSON(json: any): RegisterRequest {
    return RegisterRequestFromJSONTyped(json, false);
}

export function RegisterRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): RegisterRequest {
    if (json == null) {
        return json;
    }
    return {
        
            ...json,
        '$schema': json['$schema'] == null ? undefined : json['$schema'],
        'acceptTerms': json['acceptTerms'],
        'customAttributes': json['customAttributes'] == null ? undefined : json['customAttributes'],
        'email': json['email'],
        'firstName': json['firstName'] == null ? undefined : json['firstName'],
        'ipAddress': json['ipAddress'] == null ? undefined : json['ipAddress'],
        'lastName': json['lastName'] == null ? undefined : json['lastName'],
        'locale': json['locale'],
        'marketingConsent': json['marketingConsent'],
        'organizationId': json['organizationId'] == null ? undefined : json['organizationId'],
        'password': json['password'] == null ? undefined : json['password'],
        'phoneNumber': json['phoneNumber'] == null ? undefined : json['phoneNumber'],
        'timezone': json['timezone'] == null ? undefined : json['timezone'],
        'userAgent': json['userAgent'] == null ? undefined : json['userAgent'],
        'userType': json['userType'],
        'username': json['username'] == null ? undefined : json['username'],
    };
}

export function RegisterRequestToJSON(json: any): RegisterRequest {
    return RegisterRequestToJSONTyped(json, false);
}

export function RegisterRequestToJSONTyped(value?: Omit<RegisterRequest, '$schema'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
            ...value,
        'acceptTerms': value['acceptTerms'],
        'customAttributes': value['customAttributes'],
        'email': value['email'],
        'firstName': value['firstName'],
        'ipAddress': value['ipAddress'],
        'lastName': value['lastName'],
        'locale': value['locale'],
        'marketingConsent': value['marketingConsent'],
        'organizationId': value['organizationId'],
        'password': value['password'],
        'phoneNumber': value['phoneNumber'],
        'timezone': value['timezone'],
        'userAgent': value['userAgent'],
        'userType': value['userType'],
        'username': value['username'],
    };
}

