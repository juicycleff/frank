/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Address } from './Address';
import {
    AddressFromJSON,
    AddressFromJSONTyped,
    AddressToJSON,
    AddressToJSONTyped,
} from './Address';

/**
 * 
 * @export
 * @interface PaymentMethod
 */
export interface PaymentMethod {
    [key: string]: any | any;
    /**
     * Billing address
     * @type {Address}
     * @memberof PaymentMethod
     */
    billingAddress?: Address;
    /**
     * Card brand
     * @type {string}
     * @memberof PaymentMethod
     */
    brand?: string;
    /**
     * Country code
     * @type {string}
     * @memberof PaymentMethod
     */
    country?: string;
    /**
     * Creation timestamp
     * @type {Date}
     * @memberof PaymentMethod
     */
    createdAt: Date;
    /**
     * Expiration month
     * @type {number}
     * @memberof PaymentMethod
     */
    expMonth?: number;
    /**
     * Expiration year
     * @type {number}
     * @memberof PaymentMethod
     */
    expYear?: number;
    /**
     * Payment method ID
     * @type {string}
     * @memberof PaymentMethod
     */
    id: string;
    /**
     * Whether this is the default payment method
     * @type {boolean}
     * @memberof PaymentMethod
     */
    isDefault: boolean;
    /**
     * Last 4 digits
     * @type {string}
     * @memberof PaymentMethod
     */
    last4?: string;
    /**
     * Additional metadata
     * @type {object}
     * @memberof PaymentMethod
     */
    metadata?: object;
    /**
     * Organization ID
     * @type {string}
     * @memberof PaymentMethod
     */
    organizationId: string;
    /**
     * Payment method status
     * @type {string}
     * @memberof PaymentMethod
     */
    status: PaymentMethodStatusEnum;
    /**
     * Payment method type
     * @type {string}
     * @memberof PaymentMethod
     */
    type: PaymentMethodTypeEnum;
    /**
     * Update timestamp
     * @type {Date}
     * @memberof PaymentMethod
     */
    updatedAt: Date;
}


/**
 * @export
 */
export const PaymentMethodStatusEnum = {
    Active: 'active',
    Inactive: 'inactive',
    Expired: 'expired',
    Failed: 'failed'
} as const;
export type PaymentMethodStatusEnum = typeof PaymentMethodStatusEnum[keyof typeof PaymentMethodStatusEnum];

/**
 * @export
 */
export const PaymentMethodTypeEnum = {
    Card: 'card',
    BankAccount: 'bank_account',
    Paypal: 'paypal'
} as const;
export type PaymentMethodTypeEnum = typeof PaymentMethodTypeEnum[keyof typeof PaymentMethodTypeEnum];


/**
 * Check if a given object implements the PaymentMethod interface.
 */
export function instanceOfPaymentMethod(value: object): value is PaymentMethod {
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('isDefault' in value) || value['isDefault'] === undefined) return false;
    if (!('organizationId' in value) || value['organizationId'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    return true;
}

export function PaymentMethodFromJSON(json: any): PaymentMethod {
    return PaymentMethodFromJSONTyped(json, false);
}

export function PaymentMethodFromJSONTyped(json: any, ignoreDiscriminator: boolean): PaymentMethod {
    if (json == null) {
        return json;
    }
    return {
        
            ...json,
        'billingAddress': json['billingAddress'] == null ? undefined : AddressFromJSON(json['billingAddress']),
        'brand': json['brand'] == null ? undefined : json['brand'],
        'country': json['country'] == null ? undefined : json['country'],
        'createdAt': (new Date(json['createdAt'])),
        'expMonth': json['expMonth'] == null ? undefined : json['expMonth'],
        'expYear': json['expYear'] == null ? undefined : json['expYear'],
        'id': json['id'],
        'isDefault': json['isDefault'],
        'last4': json['last4'] == null ? undefined : json['last4'],
        'metadata': json['metadata'] == null ? undefined : json['metadata'],
        'organizationId': json['organizationId'],
        'status': json['status'],
        'type': json['type'],
        'updatedAt': (new Date(json['updatedAt'])),
    };
}

export function PaymentMethodToJSON(json: any): PaymentMethod {
    return PaymentMethodToJSONTyped(json, false);
}

export function PaymentMethodToJSONTyped(value?: PaymentMethod | null, ignoreDiscriminator = false): any {
    if (value == null) {
        return value;
    }

    return {
        
            ...value,
        'billingAddress': AddressToJSON(value['billingAddress']),
        'brand': value['brand'],
        'country': value['country'],
        'createdAt': ((value['createdAt']).toISOString()),
        'expMonth': value['expMonth'],
        'expYear': value['expYear'],
        'id': value['id'],
        'isDefault': value['isDefault'],
        'last4': value['last4'],
        'metadata': value['metadata'],
        'organizationId': value['organizationId'],
        'status': value['status'],
        'type': value['type'],
        'updatedAt': ((value['updatedAt']).toISOString()),
    };
}

