/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { MonthlyRevenueTrend } from './MonthlyRevenueTrend';
import {
    MonthlyRevenueTrendFromJSON,
    MonthlyRevenueTrendFromJSONTyped,
    MonthlyRevenueTrendToJSON,
    MonthlyRevenueTrendToJSONTyped,
} from './MonthlyRevenueTrend';
import type { RevenueForecast } from './RevenueForecast';
import {
    RevenueForecastFromJSON,
    RevenueForecastFromJSONTyped,
    RevenueForecastToJSON,
    RevenueForecastToJSONTyped,
} from './RevenueForecast';

/**
 * 
 * @export
 * @interface RevenueTrends
 */
export interface RevenueTrends {
    /**
     * Trend direction
     * @type {string}
     * @memberof RevenueTrends
     */
    direction: RevenueTrendsDirectionEnum;
    /**
     * Revenue forecast
     * @type {RevenueForecast}
     * @memberof RevenueTrends
     */
    forecast?: RevenueForecast;
    /**
     * Growth rate percentage
     * @type {number}
     * @memberof RevenueTrends
     */
    growthRate: number;
    /**
     * Growth momentum
     * @type {string}
     * @memberof RevenueTrends
     */
    momentum: RevenueTrendsMomentumEnum;
    /**
     * Monthly trend data
     * @type {Array<MonthlyRevenueTrend>}
     * @memberof RevenueTrends
     */
    monthlyTrends?: Array<MonthlyRevenueTrend> | null;
    /**
     * Seasonal patterns
     * @type {string}
     * @memberof RevenueTrends
     */
    seasonality?: string;
}


/**
 * @export
 */
export const RevenueTrendsDirectionEnum = {
    Increasing: 'increasing',
    Decreasing: 'decreasing',
    Stable: 'stable'
} as const;
export type RevenueTrendsDirectionEnum = typeof RevenueTrendsDirectionEnum[keyof typeof RevenueTrendsDirectionEnum];

/**
 * @export
 */
export const RevenueTrendsMomentumEnum = {
    Accelerating: 'accelerating',
    Steady: 'steady',
    Decelerating: 'decelerating'
} as const;
export type RevenueTrendsMomentumEnum = typeof RevenueTrendsMomentumEnum[keyof typeof RevenueTrendsMomentumEnum];


/**
 * Check if a given object implements the RevenueTrends interface.
 */
export function instanceOfRevenueTrends(value: object): value is RevenueTrends {
    if (!('direction' in value) || value['direction'] === undefined) return false;
    if (!('growthRate' in value) || value['growthRate'] === undefined) return false;
    if (!('momentum' in value) || value['momentum'] === undefined) return false;
    return true;
}

export function RevenueTrendsFromJSON(json: any): RevenueTrends {
    return RevenueTrendsFromJSONTyped(json, false);
}

export function RevenueTrendsFromJSONTyped(json: any, ignoreDiscriminator: boolean): RevenueTrends {
    if (json == null) {
        return json;
    }
    return {
        
        'direction': json['direction'],
        'forecast': json['forecast'] == null ? undefined : RevenueForecastFromJSON(json['forecast']),
        'growthRate': json['growthRate'],
        'momentum': json['momentum'],
        'monthlyTrends': json['monthlyTrends'] == null ? undefined : ((json['monthlyTrends'] as Array<any>).map(MonthlyRevenueTrendFromJSON)),
        'seasonality': json['seasonality'] == null ? undefined : json['seasonality'],
    };
}

export function RevenueTrendsToJSON(json: any): RevenueTrends {
    return RevenueTrendsToJSONTyped(json, false);
}

export function RevenueTrendsToJSONTyped(value?: RevenueTrends | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'direction': value['direction'],
        'forecast': RevenueForecastToJSON(value['forecast']),
        'growthRate': value['growthRate'],
        'momentum': value['momentum'],
        'monthlyTrends': value['monthlyTrends'] == null ? undefined : ((value['monthlyTrends'] as Array<any>).map(MonthlyRevenueTrendToJSON)),
        'seasonality': value['seasonality'],
    };
}

