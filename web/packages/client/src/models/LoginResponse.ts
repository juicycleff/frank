/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { User } from './User';
import {
    UserFromJSON,
    UserFromJSONTyped,
    UserToJSON,
    UserToJSONTyped,
} from './User';
import type { MFAInfo } from './MFAInfo';
import {
    MFAInfoFromJSON,
    MFAInfoFromJSONTyped,
    MFAInfoToJSON,
    MFAInfoToJSONTyped,
} from './MFAInfo';
import type { Session } from './Session';
import {
    SessionFromJSON,
    SessionFromJSONTyped,
    SessionToJSON,
    SessionToJSONTyped,
} from './Session';

/**
 * 
 * @export
 * @interface LoginResponse
 */
export interface LoginResponse {
    /**
     * A URL to the JSON Schema for this object.
     * @type {string}
     * @memberof LoginResponse
     */
    readonly $schema?: string;
    /**
     * JWT access token
     * @type {string}
     * @memberof LoginResponse
     */
    accessToken?: string;
    /**
     * Token expiration timestamp
     * @type {Date}
     * @memberof LoginResponse
     */
    expiresAt?: Date;
    /**
     * Token expiration time in seconds
     * @type {number}
     * @memberof LoginResponse
     */
    expiresIn?: number;
    /**
     * Available MFA methods if MFA is required
     * @type {Array<MFAInfo>}
     * @memberof LoginResponse
     */
    mfaMethods?: Array<MFAInfo> | null;
    /**
     * Whether MFA is required for this user
     * @type {boolean}
     * @memberof LoginResponse
     */
    mfaRequired?: boolean;
    /**
     * MFA session token for completing authentication
     * @type {string}
     * @memberof LoginResponse
     */
    mfaToken?: string;
    /**
     * Refresh token for token renewal
     * @type {string}
     * @memberof LoginResponse
     */
    refreshToken?: string;
    /**
     * Session information
     * @type {Session}
     * @memberof LoginResponse
     */
    session?: Session;
    /**
     * Token type (usually Bearer)
     * @type {string}
     * @memberof LoginResponse
     */
    tokenType?: string;
    /**
     * User information
     * @type {User}
     * @memberof LoginResponse
     */
    user?: User;
    /**
     * Whether verification is required for this user
     * @type {boolean}
     * @memberof LoginResponse
     */
    verificationRequired?: boolean;
    /**
     * Verification target
     * @type {string}
     * @memberof LoginResponse
     */
    verificationTarget?: string;
}

/**
 * Check if a given object implements the LoginResponse interface.
 */
export function instanceOfLoginResponse(value: object): value is LoginResponse {
    return true;
}

export function LoginResponseFromJSON(json: any): LoginResponse {
    return LoginResponseFromJSONTyped(json, false);
}

export function LoginResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): LoginResponse {
    if (json == null) {
        return json;
    }
    return {
        
        '$schema': json['$schema'] == null ? undefined : json['$schema'],
        'accessToken': json['accessToken'] == null ? undefined : json['accessToken'],
        'expiresAt': json['expiresAt'] == null ? undefined : (new Date(json['expiresAt'])),
        'expiresIn': json['expiresIn'] == null ? undefined : json['expiresIn'],
        'mfaMethods': json['mfaMethods'] == null ? undefined : ((json['mfaMethods'] as Array<any>).map(MFAInfoFromJSON)),
        'mfaRequired': json['mfaRequired'] == null ? undefined : json['mfaRequired'],
        'mfaToken': json['mfaToken'] == null ? undefined : json['mfaToken'],
        'refreshToken': json['refreshToken'] == null ? undefined : json['refreshToken'],
        'session': json['session'] == null ? undefined : SessionFromJSON(json['session']),
        'tokenType': json['tokenType'] == null ? undefined : json['tokenType'],
        'user': json['user'] == null ? undefined : UserFromJSON(json['user']),
        'verificationRequired': json['verificationRequired'] == null ? undefined : json['verificationRequired'],
        'verificationTarget': json['verificationTarget'] == null ? undefined : json['verificationTarget'],
    };
}

export function LoginResponseToJSON(json: any): LoginResponse {
    return LoginResponseToJSONTyped(json, false);
}

export function LoginResponseToJSONTyped(value?: Omit<LoginResponse, '$schema'> | null, ignoreDiscriminator = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'accessToken': value['accessToken'],
        'expiresAt': value['expiresAt'] == null ? undefined : ((value['expiresAt']).toISOString()),
        'expiresIn': value['expiresIn'],
        'mfaMethods': value['mfaMethods'] == null ? undefined : ((value['mfaMethods'] as Array<any>).map(MFAInfoToJSON)),
        'mfaRequired': value['mfaRequired'],
        'mfaToken': value['mfaToken'],
        'refreshToken': value['refreshToken'],
        'session': SessionToJSON(value['session']),
        'tokenType': value['tokenType'],
        'user': UserToJSON(value['user']),
        'verificationRequired': value['verificationRequired'],
        'verificationTarget': value['verificationTarget'],
    };
}

