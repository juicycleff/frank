/* tslint:disable */
/* eslint-disable */
/**
 * My Project
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    MfaInfo,
    MfaInfoFromJSON,
    MfaInfoFromJSONTyped,
    MfaInfoToJSON,
    Session,
    SessionFromJSON,
    SessionFromJSONTyped,
    SessionToJSON,
    User,
    UserFromJSON,
    UserFromJSONTyped,
    UserToJSON,
} from './';

/**
 * 
 * @export
 * @interface LoginResponse
 */
export interface LoginResponse {
    /**
     * A URL to the JSON Schema for this object.
     * @type {string}
     * @memberof LoginResponse
     */
    readonly $schema?: string;
    /**
     * JWT access token
     * @type {string}
     * @memberof LoginResponse
     */
    accessToken: string;
    /**
     * Token expiration timestamp
     * @type {Date}
     * @memberof LoginResponse
     */
    expiresAt: Date;
    /**
     * Token expiration time in seconds
     * @type {number}
     * @memberof LoginResponse
     */
    expiresIn: number;
    /**
     * Available MFA methods if MFA is required
     * @type {Array<MfaInfo>}
     * @memberof LoginResponse
     */
    mfaMethods?: Array<MfaInfo> | null;
    /**
     * Whether MFA is required for this user
     * @type {boolean}
     * @memberof LoginResponse
     */
    mfaRequired: boolean;
    /**
     * Refresh token for token renewal
     * @type {string}
     * @memberof LoginResponse
     */
    refreshToken?: string;
    /**
     * 
     * @type {Session}
     * @memberof LoginResponse
     */
    session: Session;
    /**
     * Token type (usually Bearer)
     * @type {string}
     * @memberof LoginResponse
     */
    tokenType: string;
    /**
     * 
     * @type {User}
     * @memberof LoginResponse
     */
    user: User;
}

export function LoginResponseFromJSON(json: any): LoginResponse {
    return LoginResponseFromJSONTyped(json, false);
}

export function LoginResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): LoginResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        '$schema': !exists(json, '$schema') ? undefined : json['$schema'],
        'accessToken': json['accessToken'],
        'expiresAt': (new Date(json['expiresAt'])),
        'expiresIn': json['expiresIn'],
        'mfaMethods': !exists(json, 'mfaMethods') ? undefined : (json['mfaMethods'] === null ? null : (json['mfaMethods'] as Array<any>).map(MfaInfoFromJSON)),
        'mfaRequired': json['mfaRequired'],
        'refreshToken': !exists(json, 'refreshToken') ? undefined : json['refreshToken'],
        'session': SessionFromJSON(json['session']),
        'tokenType': json['tokenType'],
        'user': UserFromJSON(json['user']),
    };
}

export function LoginResponseToJSON(value?: LoginResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'accessToken': value.accessToken,
        'expiresAt': (value.expiresAt.toISOString()),
        'expiresIn': value.expiresIn,
        'mfaMethods': value.mfaMethods === undefined ? undefined : (value.mfaMethods === null ? null : (value.mfaMethods as Array<any>).map(MfaInfoToJSON)),
        'mfaRequired': value.mfaRequired,
        'refreshToken': value.refreshToken,
        'session': SessionToJSON(value.session),
        'tokenType': value.tokenType,
        'user': UserToJSON(value.user),
    };
}


