/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { RiskItem } from './RiskItem';
import {
    RiskItemFromJSON,
    RiskItemFromJSONTyped,
    RiskItemToJSON,
    RiskItemToJSONTyped,
} from './RiskItem';

/**
 * 
 * @export
 * @interface RiskAssessment
 */
export interface RiskAssessment {
    /**
     * A URL to the JSON Schema for this object.
     * @type {string}
     * @memberof RiskAssessment
     */
    readonly $schema?: string;
    /**
     * 
     * @type {string}
     * @memberof RiskAssessment
     */
    assessmentType: string;
    /**
     * 
     * @type {Date}
     * @memberof RiskAssessment
     */
    conductedAt: Date;
    /**
     * 
     * @type {string}
     * @memberof RiskAssessment
     */
    conductedBy: string;
    /**
     * 
     * @type {string}
     * @memberof RiskAssessment
     */
    id: string;
    /**
     * 
     * @type {Array<RiskItem>}
     * @memberof RiskAssessment
     */
    identifiedRisks: Array<RiskItem> | null;
    /**
     * 
     * @type {string}
     * @memberof RiskAssessment
     */
    methodology: string;
    /**
     * 
     * @type {Date}
     * @memberof RiskAssessment
     */
    nextAssessment: Date;
    /**
     * 
     * @type {string}
     * @memberof RiskAssessment
     */
    organizationId: string;
    /**
     * 
     * @type {string}
     * @memberof RiskAssessment
     */
    overallRisk: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof RiskAssessment
     */
    recommendations: Array<string> | null;
    /**
     * 
     * @type {number}
     * @memberof RiskAssessment
     */
    riskScore: number;
    /**
     * 
     * @type {string}
     * @memberof RiskAssessment
     */
    scope: string;
    /**
     * 
     * @type {string}
     * @memberof RiskAssessment
     */
    status: string;
}

/**
 * Check if a given object implements the RiskAssessment interface.
 */
export function instanceOfRiskAssessment(value: object): value is RiskAssessment {
    if (!('assessmentType' in value) || value['assessmentType'] === undefined) return false;
    if (!('conductedAt' in value) || value['conductedAt'] === undefined) return false;
    if (!('conductedBy' in value) || value['conductedBy'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('identifiedRisks' in value) || value['identifiedRisks'] === undefined) return false;
    if (!('methodology' in value) || value['methodology'] === undefined) return false;
    if (!('nextAssessment' in value) || value['nextAssessment'] === undefined) return false;
    if (!('organizationId' in value) || value['organizationId'] === undefined) return false;
    if (!('overallRisk' in value) || value['overallRisk'] === undefined) return false;
    if (!('recommendations' in value) || value['recommendations'] === undefined) return false;
    if (!('riskScore' in value) || value['riskScore'] === undefined) return false;
    if (!('scope' in value) || value['scope'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    return true;
}

export function RiskAssessmentFromJSON(json: any): RiskAssessment {
    return RiskAssessmentFromJSONTyped(json, false);
}

export function RiskAssessmentFromJSONTyped(json: any, ignoreDiscriminator: boolean): RiskAssessment {
    if (json == null) {
        return json;
    }
    return {
        
        '$schema': json['$schema'] == null ? undefined : json['$schema'],
        'assessmentType': json['assessment_type'],
        'conductedAt': (new Date(json['conducted_at'])),
        'conductedBy': json['conducted_by'],
        'id': json['id'],
        'identifiedRisks': (json['identified_risks'] == null ? null : (json['identified_risks'] as Array<any>).map(RiskItemFromJSON)),
        'methodology': json['methodology'],
        'nextAssessment': (new Date(json['next_assessment'])),
        'organizationId': json['organization_id'],
        'overallRisk': json['overall_risk'],
        'recommendations': json['recommendations'] == null ? null : json['recommendations'],
        'riskScore': json['risk_score'],
        'scope': json['scope'],
        'status': json['status'],
    };
}

export function RiskAssessmentToJSON(json: any): RiskAssessment {
    return RiskAssessmentToJSONTyped(json, false);
}

export function RiskAssessmentToJSONTyped(value?: Omit<RiskAssessment, '$schema'> | null, ignoreDiscriminator = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'assessment_type': value['assessmentType'],
        'conducted_at': ((value['conductedAt']).toISOString()),
        'conducted_by': value['conductedBy'],
        'id': value['id'],
        'identified_risks': (value['identifiedRisks'] == null ? null : (value['identifiedRisks'] as Array<any>).map(RiskItemToJSON)),
        'methodology': value['methodology'],
        'next_assessment': ((value['nextAssessment']).toISOString()),
        'organization_id': value['organizationId'],
        'overall_risk': value['overallRisk'],
        'recommendations': value['recommendations'],
        'risk_score': value['riskScore'],
        'scope': value['scope'],
        'status': value['status'],
    };
}

