/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { RiskItem } from './RiskItem';
import {
    RiskItemFromJSON,
    RiskItemFromJSONTyped,
    RiskItemToJSON,
    RiskItemToJSONTyped,
} from './RiskItem';
import type { RiskMitigation } from './RiskMitigation';
import {
    RiskMitigationFromJSON,
    RiskMitigationFromJSONTyped,
    RiskMitigationToJSON,
    RiskMitigationToJSONTyped,
} from './RiskMitigation';

/**
 * 
 * @export
 * @interface HIPAARiskAssessment
 */
export interface HIPAARiskAssessment {
    /**
     * 
     * @type {Array<RiskItem>}
     * @memberof HIPAARiskAssessment
     */
    identifiedRisks: Array<RiskItem> | null;
    /**
     * 
     * @type {Date}
     * @memberof HIPAARiskAssessment
     */
    lastConducted: Date;
    /**
     * 
     * @type {Array<RiskMitigation>}
     * @memberof HIPAARiskAssessment
     */
    mitigations: Array<RiskMitigation> | null;
    /**
     * 
     * @type {Date}
     * @memberof HIPAARiskAssessment
     */
    nextScheduled: Date;
    /**
     * 
     * @type {string}
     * @memberof HIPAARiskAssessment
     */
    overallRisk: string;
}

/**
 * Check if a given object implements the HIPAARiskAssessment interface.
 */
export function instanceOfHIPAARiskAssessment(value: object): value is HIPAARiskAssessment {
    if (!('identifiedRisks' in value) || value['identifiedRisks'] === undefined) return false;
    if (!('lastConducted' in value) || value['lastConducted'] === undefined) return false;
    if (!('mitigations' in value) || value['mitigations'] === undefined) return false;
    if (!('nextScheduled' in value) || value['nextScheduled'] === undefined) return false;
    if (!('overallRisk' in value) || value['overallRisk'] === undefined) return false;
    return true;
}

export function HIPAARiskAssessmentFromJSON(json: any): HIPAARiskAssessment {
    return HIPAARiskAssessmentFromJSONTyped(json, false);
}

export function HIPAARiskAssessmentFromJSONTyped(json: any, ignoreDiscriminator: boolean): HIPAARiskAssessment {
    if (json == null) {
        return json;
    }
    return {
        
        'identifiedRisks': (json['identified_risks'] == null ? null : (json['identified_risks'] as Array<any>).map(RiskItemFromJSON)),
        'lastConducted': (new Date(json['last_conducted'])),
        'mitigations': (json['mitigations'] == null ? null : (json['mitigations'] as Array<any>).map(RiskMitigationFromJSON)),
        'nextScheduled': (new Date(json['next_scheduled'])),
        'overallRisk': json['overall_risk'],
    };
}

export function HIPAARiskAssessmentToJSON(json: any): HIPAARiskAssessment {
    return HIPAARiskAssessmentToJSONTyped(json, false);
}

export function HIPAARiskAssessmentToJSONTyped(value?: HIPAARiskAssessment | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'identified_risks': (value['identifiedRisks'] == null ? null : (value['identifiedRisks'] as Array<any>).map(RiskItemToJSON)),
        'last_conducted': ((value['lastConducted']).toISOString()),
        'mitigations': (value['mitigations'] == null ? null : (value['mitigations'] as Array<any>).map(RiskMitigationToJSON)),
        'next_scheduled': ((value['nextScheduled']).toISOString()),
        'overall_risk': value['overallRisk'],
    };
}

