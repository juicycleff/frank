/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Evidence } from './Evidence';
import {
    EvidenceFromJSON,
    EvidenceFromJSONTyped,
    EvidenceToJSON,
    EvidenceToJSONTyped,
} from './Evidence';

/**
 * 
 * @export
 * @interface RequirementStatus
 */
export interface RequirementStatus {
    /**
     * 
     * @type {Array<Evidence>}
     * @memberof RequirementStatus
     */
    evidence: Array<Evidence> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof RequirementStatus
     */
    issues: Array<string> | null;
    /**
     * 
     * @type {Date}
     * @memberof RequirementStatus
     */
    lastTested: Date;
    /**
     * 
     * @type {number}
     * @memberof RequirementStatus
     */
    score: number;
    /**
     * 
     * @type {string}
     * @memberof RequirementStatus
     */
    status: string;
}

/**
 * Check if a given object implements the RequirementStatus interface.
 */
export function instanceOfRequirementStatus(value: object): value is RequirementStatus {
    if (!('evidence' in value) || value['evidence'] === undefined) return false;
    if (!('issues' in value) || value['issues'] === undefined) return false;
    if (!('lastTested' in value) || value['lastTested'] === undefined) return false;
    if (!('score' in value) || value['score'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    return true;
}

export function RequirementStatusFromJSON(json: any): RequirementStatus {
    return RequirementStatusFromJSONTyped(json, false);
}

export function RequirementStatusFromJSONTyped(json: any, ignoreDiscriminator: boolean): RequirementStatus {
    if (json == null) {
        return json;
    }
    return {
        
        'evidence': (json['evidence'] == null ? null : (json['evidence'] as Array<any>).map(EvidenceFromJSON)),
        'issues': json['issues'] == null ? null : json['issues'],
        'lastTested': (new Date(json['last_tested'])),
        'score': json['score'],
        'status': json['status'],
    };
}

export function RequirementStatusToJSON(json: any): RequirementStatus {
    return RequirementStatusToJSONTyped(json, false);
}

export function RequirementStatusToJSONTyped(value?: RequirementStatus | null, ignoreDiscriminator = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'evidence': (value['evidence'] == null ? null : (value['evidence'] as Array<any>).map(EvidenceToJSON)),
        'issues': value['issues'],
        'last_tested': ((value['lastTested']).toISOString()),
        'score': value['score'],
        'status': value['status'],
    };
}

