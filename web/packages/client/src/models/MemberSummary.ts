/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { MembershipStatus } from './MembershipStatus';
import {
    MembershipStatusFromJSON,
    MembershipStatusFromJSONTyped,
    MembershipStatusToJSON,
    MembershipStatusToJSONTyped,
} from './MembershipStatus';

/**
 * 
 * @export
 * @interface MemberSummary
 */
export interface MemberSummary {
    [key: string]: any | any;
    /**
     * User avatar URL
     * @type {string}
     * @memberof MemberSummary
     */
    avatar?: string;
    /**
     * Member department
     * @type {string}
     * @memberof MemberSummary
     */
    department?: string;
    /**
     * Member email
     * @type {string}
     * @memberof MemberSummary
     */
    email: string;
    /**
     * First name
     * @type {string}
     * @memberof MemberSummary
     */
    firstName?: string;
    /**
     * User full name
     * @type {string}
     * @memberof MemberSummary
     */
    fullName: string;
    /**
     * Who invited this member
     * @type {string}
     * @memberof MemberSummary
     */
    invitedBy?: string;
    /**
     * Inviter full name
     * @type {string}
     * @memberof MemberSummary
     */
    inviterName?: string;
    /**
     * Whether member handles billing
     * @type {boolean}
     * @memberof MemberSummary
     */
    isBilling: boolean;
    /**
     * Whether member is the owner
     * @type {boolean}
     * @memberof MemberSummary
     */
    isOwner: boolean;
    /**
     * Whether member is primary contact
     * @type {boolean}
     * @memberof MemberSummary
     */
    isPrimary: boolean;
    /**
     * Member job title
     * @type {string}
     * @memberof MemberSummary
     */
    jobTitle?: string;
    /**
     * When member joined
     * @type {Date}
     * @memberof MemberSummary
     */
    joinedAt?: Date;
    /**
     * Last activity
     * @type {Date}
     * @memberof MemberSummary
     */
    lastActive?: Date;
    /**
     * Last name
     * @type {string}
     * @memberof MemberSummary
     */
    lastName?: string;
    /**
     * Last activity timestamp
     * @type {Date}
     * @memberof MemberSummary
     */
    lastSeenAt?: Date;
    /**
     * Member location
     * @type {string}
     * @memberof MemberSummary
     */
    location?: string;
    /**
     * Role display name
     * @type {string}
     * @memberof MemberSummary
     */
    roleDisplay: string;
    /**
     * Role ID
     * @type {string}
     * @memberof MemberSummary
     */
    roleId: string;
    /**
     * Role name
     * @type {string}
     * @memberof MemberSummary
     */
    roleName: string;
    /**
     * Membership status
     * @type {MembershipStatus}
     * @memberof MemberSummary
     */
    status: MembershipStatus;
    /**
     * Member tags
     * @type {Array<string>}
     * @memberof MemberSummary
     */
    tags?: Array<string>;
    /**
     * Member timezone
     * @type {string}
     * @memberof MemberSummary
     */
    timezone?: string;
    /**
     * User ID
     * @type {string}
     * @memberof MemberSummary
     */
    userId: string;
}



/**
 * Check if a given object implements the MemberSummary interface.
 */
export function instanceOfMemberSummary(value: object): value is MemberSummary {
    if (!('email' in value) || value['email'] === undefined) return false;
    if (!('fullName' in value) || value['fullName'] === undefined) return false;
    if (!('isBilling' in value) || value['isBilling'] === undefined) return false;
    if (!('isOwner' in value) || value['isOwner'] === undefined) return false;
    if (!('isPrimary' in value) || value['isPrimary'] === undefined) return false;
    if (!('roleDisplay' in value) || value['roleDisplay'] === undefined) return false;
    if (!('roleId' in value) || value['roleId'] === undefined) return false;
    if (!('roleName' in value) || value['roleName'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('userId' in value) || value['userId'] === undefined) return false;
    return true;
}

export function MemberSummaryFromJSON(json: any): MemberSummary {
    return MemberSummaryFromJSONTyped(json, false);
}

export function MemberSummaryFromJSONTyped(json: any, ignoreDiscriminator: boolean): MemberSummary {
    if (json == null) {
        return json;
    }
    return {
        
            ...json,
        'avatar': json['avatar'] == null ? undefined : json['avatar'],
        'department': json['department'] == null ? undefined : json['department'],
        'email': json['email'],
        'firstName': json['firstName'] == null ? undefined : json['firstName'],
        'fullName': json['fullName'],
        'invitedBy': json['invitedBy'] == null ? undefined : json['invitedBy'],
        'inviterName': json['inviterName'] == null ? undefined : json['inviterName'],
        'isBilling': json['isBilling'],
        'isOwner': json['isOwner'],
        'isPrimary': json['isPrimary'],
        'jobTitle': json['jobTitle'] == null ? undefined : json['jobTitle'],
        'joinedAt': json['joinedAt'] == null ? undefined : (new Date(json['joinedAt'])),
        'lastActive': json['lastActive'] == null ? undefined : (new Date(json['lastActive'])),
        'lastName': json['lastName'] == null ? undefined : json['lastName'],
        'lastSeenAt': json['lastSeenAt'] == null ? undefined : (new Date(json['lastSeenAt'])),
        'location': json['location'] == null ? undefined : json['location'],
        'roleDisplay': json['roleDisplay'],
        'roleId': json['roleId'],
        'roleName': json['roleName'],
        'status': MembershipStatusFromJSON(json['status']),
        'tags': json['tags'] == null ? undefined : json['tags'],
        'timezone': json['timezone'] == null ? undefined : json['timezone'],
        'userId': json['userId'],
    };
}

export function MemberSummaryToJSON(json: any): MemberSummary {
    return MemberSummaryToJSONTyped(json, false);
}

export function MemberSummaryToJSONTyped(value?: MemberSummary | null, ignoreDiscriminator = false): any {
    if (value == null) {
        return value;
    }

    return {
        
            ...value,
        'avatar': value['avatar'],
        'department': value['department'],
        'email': value['email'],
        'firstName': value['firstName'],
        'fullName': value['fullName'],
        'invitedBy': value['invitedBy'],
        'inviterName': value['inviterName'],
        'isBilling': value['isBilling'],
        'isOwner': value['isOwner'],
        'isPrimary': value['isPrimary'],
        'jobTitle': value['jobTitle'],
        'joinedAt': value['joinedAt'] == null ? undefined : ((value['joinedAt']).toISOString()),
        'lastActive': value['lastActive'] == null ? undefined : ((value['lastActive']).toISOString()),
        'lastName': value['lastName'],
        'lastSeenAt': value['lastSeenAt'] == null ? undefined : ((value['lastSeenAt']).toISOString()),
        'location': value['location'],
        'roleDisplay': value['roleDisplay'],
        'roleId': value['roleId'],
        'roleName': value['roleName'],
        'status': MembershipStatusToJSON(value['status']),
        'tags': value['tags'],
        'timezone': value['timezone'],
        'userId': value['userId'],
    };
}

