/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { OrgType } from './OrgType';
import {
    OrgTypeFromJSON,
    OrgTypeFromJSONTyped,
    OrgTypeToJSON,
    OrgTypeToJSONTyped,
} from './OrgType';

/**
 * 
 * @export
 * @interface OrganizationSummary
 */
export interface OrganizationSummary {
    /**
     * Whether organization is active
     * @type {boolean}
     * @memberof OrganizationSummary
     */
    active: boolean;
    /**
     * Organization ID
     * @type {string}
     * @memberof OrganizationSummary
     */
    id: string;
    /**
     * Logo URL
     * @type {string}
     * @memberof OrganizationSummary
     */
    logoUrl?: string;
    /**
     * Number of members
     * @type {number}
     * @memberof OrganizationSummary
     */
    memberCount: number;
    /**
     * Organization name
     * @type {string}
     * @memberof OrganizationSummary
     */
    name: string;
    /**
     * Organization type
     * @type {OrgType}
     * @memberof OrganizationSummary
     */
    orgType: OrgType;
    /**
     * Subscription plan
     * @type {string}
     * @memberof OrganizationSummary
     */
    plan: string;
    /**
     * Organization role
     * @type {string}
     * @memberof OrganizationSummary
     */
    role: string;
    /**
     * Organization slug
     * @type {string}
     * @memberof OrganizationSummary
     */
    slug: string;
}



/**
 * Check if a given object implements the OrganizationSummary interface.
 */
export function instanceOfOrganizationSummary(value: object): value is OrganizationSummary {
    if (!('active' in value) || value['active'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('memberCount' in value) || value['memberCount'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('orgType' in value) || value['orgType'] === undefined) return false;
    if (!('plan' in value) || value['plan'] === undefined) return false;
    if (!('role' in value) || value['role'] === undefined) return false;
    if (!('slug' in value) || value['slug'] === undefined) return false;
    return true;
}

export function OrganizationSummaryFromJSON(json: any): OrganizationSummary {
    return OrganizationSummaryFromJSONTyped(json, false);
}

export function OrganizationSummaryFromJSONTyped(json: any, ignoreDiscriminator: boolean): OrganizationSummary {
    if (json == null) {
        return json;
    }
    return {
        
        'active': json['active'],
        'id': json['id'],
        'logoUrl': json['logoUrl'] == null ? undefined : json['logoUrl'],
        'memberCount': json['memberCount'],
        'name': json['name'],
        'orgType': OrgTypeFromJSON(json['orgType']),
        'plan': json['plan'],
        'role': json['role'],
        'slug': json['slug'],
    };
}

export function OrganizationSummaryToJSON(json: any): OrganizationSummary {
    return OrganizationSummaryToJSONTyped(json, false);
}

export function OrganizationSummaryToJSONTyped(value?: OrganizationSummary | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'active': value['active'],
        'id': value['id'],
        'logoUrl': value['logoUrl'],
        'memberCount': value['memberCount'],
        'name': value['name'],
        'orgType': OrgTypeToJSON(value['orgType']),
        'plan': value['plan'],
        'role': value['role'],
        'slug': value['slug'],
    };
}

