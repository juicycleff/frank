/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Permission } from './Permission';
import {
    PermissionFromJSON,
    PermissionFromJSONTyped,
    PermissionToJSON,
    PermissionToJSONTyped,
} from './Permission';

/**
 * 
 * @export
 * @interface PermissionDependency
 */
export interface PermissionDependency {
    [key: string]: any | any;
    /**
     * Whether dependency is active
     * @type {boolean}
     * @memberof PermissionDependency
     */
    active: boolean;
    /**
     * Optional condition
     * @type {string}
     * @memberof PermissionDependency
     */
    condition?: string;
    /**
     * 
     * @type {Date}
     * @memberof PermissionDependency
     */
    createdAt: Date;
    /**
     * Dependency type (required, implied, conditional)
     * @type {string}
     * @memberof PermissionDependency
     */
    dependencyType: string;
    /**
     * 
     * @type {string}
     * @memberof PermissionDependency
     */
    id: string;
    /**
     * Dependent permission
     * @type {Permission}
     * @memberof PermissionDependency
     */
    permission?: Permission;
    /**
     * Permission that depends on another
     * @type {string}
     * @memberof PermissionDependency
     */
    permissionId: string;
    /**
     * Required permission
     * @type {Permission}
     * @memberof PermissionDependency
     */
    requiredPermission?: Permission;
    /**
     * Required permission
     * @type {string}
     * @memberof PermissionDependency
     */
    requiredPermissionId: string;
    /**
     * 
     * @type {Date}
     * @memberof PermissionDependency
     */
    updatedAt: Date;
}

/**
 * Check if a given object implements the PermissionDependency interface.
 */
export function instanceOfPermissionDependency(value: object): value is PermissionDependency {
    if (!('active' in value) || value['active'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('dependencyType' in value) || value['dependencyType'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('permissionId' in value) || value['permissionId'] === undefined) return false;
    if (!('requiredPermissionId' in value) || value['requiredPermissionId'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    return true;
}

export function PermissionDependencyFromJSON(json: any): PermissionDependency {
    return PermissionDependencyFromJSONTyped(json, false);
}

export function PermissionDependencyFromJSONTyped(json: any, ignoreDiscriminator: boolean): PermissionDependency {
    if (json == null) {
        return json;
    }
    return {
        
            ...json,
        'active': json['active'],
        'condition': json['condition'] == null ? undefined : json['condition'],
        'createdAt': (new Date(json['createdAt'])),
        'dependencyType': json['dependencyType'],
        'id': json['id'],
        'permission': json['permission'] == null ? undefined : PermissionFromJSON(json['permission']),
        'permissionId': json['permissionId'],
        'requiredPermission': json['requiredPermission'] == null ? undefined : PermissionFromJSON(json['requiredPermission']),
        'requiredPermissionId': json['requiredPermissionId'],
        'updatedAt': (new Date(json['updatedAt'])),
    };
}

export function PermissionDependencyToJSON(json: any): PermissionDependency {
    return PermissionDependencyToJSONTyped(json, false);
}

export function PermissionDependencyToJSONTyped(value?: PermissionDependency | null, ignoreDiscriminator = false): any {
    if (value == null) {
        return value;
    }

    return {
        
            ...value,
        'active': value['active'],
        'condition': value['condition'],
        'createdAt': ((value['createdAt']).toISOString()),
        'dependencyType': value['dependencyType'],
        'id': value['id'],
        'permission': PermissionToJSON(value['permission']),
        'permissionId': value['permissionId'],
        'requiredPermission': PermissionToJSON(value['requiredPermission']),
        'requiredPermissionId': value['requiredPermissionId'],
        'updatedAt': ((value['updatedAt']).toISOString()),
    };
}

