/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface CreateIdentityProviderRequest
 */
export interface CreateIdentityProviderRequest {
    [key: string]: any | any;
    /**
     * A URL to the JSON Schema for this object.
     * @type {string}
     * @memberof CreateIdentityProviderRequest
     */
    readonly $schema?: string;
    /**
     * Attribute mappings
     * @type {{ [key: string]: string; }}
     * @memberof CreateIdentityProviderRequest
     */
    attributeMapping?: { [key: string]: string; };
    /**
     * Auto-provision users
     * @type {boolean}
     * @memberof CreateIdentityProviderRequest
     */
    autoProvision: boolean;
    /**
     * Button text
     * @type {string}
     * @memberof CreateIdentityProviderRequest
     */
    buttonText?: string;
    /**
     * Provider configuration
     * @type {object}
     * @memberof CreateIdentityProviderRequest
     */
    config: object;
    /**
     * Default role
     * @type {string}
     * @memberof CreateIdentityProviderRequest
     */
    defaultRole?: string;
    /**
     * Email domain
     * @type {string}
     * @memberof CreateIdentityProviderRequest
     */
    domain?: string;
    /**
     * Icon URL
     * @type {string}
     * @memberof CreateIdentityProviderRequest
     */
    iconUrl?: string;
    /**
     * Provider name
     * @type {string}
     * @memberof CreateIdentityProviderRequest
     */
    name: string;
    /**
     * Authentication protocol
     * @type {string}
     * @memberof CreateIdentityProviderRequest
     */
    protocol: string;
    /**
     * Provider type (oidc, saml, oauth2)
     * @type {string}
     * @memberof CreateIdentityProviderRequest
     */
    type: string;
}

/**
 * Check if a given object implements the CreateIdentityProviderRequest interface.
 */
export function instanceOfCreateIdentityProviderRequest(value: object): value is CreateIdentityProviderRequest {
    if (!('autoProvision' in value) || value['autoProvision'] === undefined) return false;
    if (!('config' in value) || value['config'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('protocol' in value) || value['protocol'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    return true;
}

export function CreateIdentityProviderRequestFromJSON(json: any): CreateIdentityProviderRequest {
    return CreateIdentityProviderRequestFromJSONTyped(json, false);
}

export function CreateIdentityProviderRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateIdentityProviderRequest {
    if (json == null) {
        return json;
    }
    return {
        
            ...json,
        '$schema': json['$schema'] == null ? undefined : json['$schema'],
        'attributeMapping': json['attributeMapping'] == null ? undefined : json['attributeMapping'],
        'autoProvision': json['autoProvision'],
        'buttonText': json['buttonText'] == null ? undefined : json['buttonText'],
        'config': json['config'],
        'defaultRole': json['defaultRole'] == null ? undefined : json['defaultRole'],
        'domain': json['domain'] == null ? undefined : json['domain'],
        'iconUrl': json['iconUrl'] == null ? undefined : json['iconUrl'],
        'name': json['name'],
        'protocol': json['protocol'],
        'type': json['type'],
    };
}

export function CreateIdentityProviderRequestToJSON(json: any): CreateIdentityProviderRequest {
    return CreateIdentityProviderRequestToJSONTyped(json, false);
}

export function CreateIdentityProviderRequestToJSONTyped(value?: Omit<CreateIdentityProviderRequest, '$schema'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
            ...value,
        'attributeMapping': value['attributeMapping'],
        'autoProvision': value['autoProvision'],
        'buttonText': value['buttonText'],
        'config': value['config'],
        'defaultRole': value['defaultRole'],
        'domain': value['domain'],
        'iconUrl': value['iconUrl'],
        'name': value['name'],
        'protocol': value['protocol'],
        'type': value['type'],
    };
}

