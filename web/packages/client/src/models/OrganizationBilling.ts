/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface OrganizationBilling
 */
export interface OrganizationBilling {
    /**
     * A URL to the JSON Schema for this object.
     * @type {string}
     * @memberof OrganizationBilling
     */
    readonly $schema?: string;
    /**
     * Amount in cents
     * @type {number}
     * @memberof OrganizationBilling
     */
    amount: number;
    /**
     * Currency
     * @type {string}
     * @memberof OrganizationBilling
     */
    currency: string;
    /**
     * Current billing period end
     * @type {Date}
     * @memberof OrganizationBilling
     */
    currentPeriodEnd: Date;
    /**
     * Current billing period start
     * @type {Date}
     * @memberof OrganizationBilling
     */
    currentPeriodStart: Date;
    /**
     * Billing customer ID
     * @type {string}
     * @memberof OrganizationBilling
     */
    customerId: string;
    /**
     * Next invoice date
     * @type {Date}
     * @memberof OrganizationBilling
     */
    nextInvoiceDate?: Date;
    /**
     * Payment method type
     * @type {string}
     * @memberof OrganizationBilling
     */
    paymentMethod?: string;
    /**
     * Current plan
     * @type {string}
     * @memberof OrganizationBilling
     */
    plan: string;
    /**
     * Billing status
     * @type {string}
     * @memberof OrganizationBilling
     */
    status: string;
    /**
     * Subscription ID
     * @type {string}
     * @memberof OrganizationBilling
     */
    subscriptionId: string;
    /**
     * Trial end date
     * @type {Date}
     * @memberof OrganizationBilling
     */
    trialEnd?: Date;
    /**
     * Trial start date
     * @type {Date}
     * @memberof OrganizationBilling
     */
    trialStart?: Date;
}

/**
 * Check if a given object implements the OrganizationBilling interface.
 */
export function instanceOfOrganizationBilling(value: object): value is OrganizationBilling {
    if (!('amount' in value) || value['amount'] === undefined) return false;
    if (!('currency' in value) || value['currency'] === undefined) return false;
    if (!('currentPeriodEnd' in value) || value['currentPeriodEnd'] === undefined) return false;
    if (!('currentPeriodStart' in value) || value['currentPeriodStart'] === undefined) return false;
    if (!('customerId' in value) || value['customerId'] === undefined) return false;
    if (!('plan' in value) || value['plan'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('subscriptionId' in value) || value['subscriptionId'] === undefined) return false;
    return true;
}

export function OrganizationBillingFromJSON(json: any): OrganizationBilling {
    return OrganizationBillingFromJSONTyped(json, false);
}

export function OrganizationBillingFromJSONTyped(json: any, ignoreDiscriminator: boolean): OrganizationBilling {
    if (json == null) {
        return json;
    }
    return {
        
        '$schema': json['$schema'] == null ? undefined : json['$schema'],
        'amount': json['amount'],
        'currency': json['currency'],
        'currentPeriodEnd': (new Date(json['currentPeriodEnd'])),
        'currentPeriodStart': (new Date(json['currentPeriodStart'])),
        'customerId': json['customerId'],
        'nextInvoiceDate': json['nextInvoiceDate'] == null ? undefined : (new Date(json['nextInvoiceDate'])),
        'paymentMethod': json['paymentMethod'] == null ? undefined : json['paymentMethod'],
        'plan': json['plan'],
        'status': json['status'],
        'subscriptionId': json['subscriptionId'],
        'trialEnd': json['trialEnd'] == null ? undefined : (new Date(json['trialEnd'])),
        'trialStart': json['trialStart'] == null ? undefined : (new Date(json['trialStart'])),
    };
}

export function OrganizationBillingToJSON(json: any): OrganizationBilling {
    return OrganizationBillingToJSONTyped(json, false);
}

export function OrganizationBillingToJSONTyped(value?: Omit<OrganizationBilling, '$schema'> | null, ignoreDiscriminator = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'amount': value['amount'],
        'currency': value['currency'],
        'currentPeriodEnd': ((value['currentPeriodEnd']).toISOString()),
        'currentPeriodStart': ((value['currentPeriodStart']).toISOString()),
        'customerId': value['customerId'],
        'nextInvoiceDate': value['nextInvoiceDate'] == null ? undefined : ((value['nextInvoiceDate']).toISOString()),
        'paymentMethod': value['paymentMethod'],
        'plan': value['plan'],
        'status': value['status'],
        'subscriptionId': value['subscriptionId'],
        'trialEnd': value['trialEnd'] == null ? undefined : ((value['trialEnd']).toISOString()),
        'trialStart': value['trialStart'] == null ? undefined : ((value['trialStart']).toISOString()),
    };
}

