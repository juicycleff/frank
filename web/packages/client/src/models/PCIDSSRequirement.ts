/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Evidence } from './Evidence';
import {
    EvidenceFromJSON,
    EvidenceFromJSONTyped,
    EvidenceToJSON,
    EvidenceToJSONTyped,
} from './Evidence';
import type { TestResult } from './TestResult';
import {
    TestResultFromJSON,
    TestResultFromJSONTyped,
    TestResultToJSON,
    TestResultToJSONTyped,
} from './TestResult';
import type { SubRequirement } from './SubRequirement';
import {
    SubRequirementFromJSON,
    SubRequirementFromJSONTyped,
    SubRequirementToJSON,
    SubRequirementToJSONTyped,
} from './SubRequirement';

/**
 * 
 * @export
 * @interface PCIDSSRequirement
 */
export interface PCIDSSRequirement {
    /**
     * 
     * @type {Array<Evidence>}
     * @memberof PCIDSSRequirement
     */
    evidence: Array<Evidence> | null;
    /**
     * 
     * @type {string}
     * @memberof PCIDSSRequirement
     */
    number: string;
    /**
     * 
     * @type {number}
     * @memberof PCIDSSRequirement
     */
    score: number;
    /**
     * 
     * @type {string}
     * @memberof PCIDSSRequirement
     */
    status: string;
    /**
     * 
     * @type {Array<SubRequirement>}
     * @memberof PCIDSSRequirement
     */
    subRequirements: Array<SubRequirement> | null;
    /**
     * 
     * @type {Array<TestResult>}
     * @memberof PCIDSSRequirement
     */
    testResults: Array<TestResult> | null;
    /**
     * 
     * @type {string}
     * @memberof PCIDSSRequirement
     */
    title: string;
}

/**
 * Check if a given object implements the PCIDSSRequirement interface.
 */
export function instanceOfPCIDSSRequirement(value: object): value is PCIDSSRequirement {
    if (!('evidence' in value) || value['evidence'] === undefined) return false;
    if (!('number' in value) || value['number'] === undefined) return false;
    if (!('score' in value) || value['score'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('subRequirements' in value) || value['subRequirements'] === undefined) return false;
    if (!('testResults' in value) || value['testResults'] === undefined) return false;
    if (!('title' in value) || value['title'] === undefined) return false;
    return true;
}

export function PCIDSSRequirementFromJSON(json: any): PCIDSSRequirement {
    return PCIDSSRequirementFromJSONTyped(json, false);
}

export function PCIDSSRequirementFromJSONTyped(json: any, ignoreDiscriminator: boolean): PCIDSSRequirement {
    if (json == null) {
        return json;
    }
    return {
        
        'evidence': (json['evidence'] == null ? null : (json['evidence'] as Array<any>).map(EvidenceFromJSON)),
        'number': json['number'],
        'score': json['score'],
        'status': json['status'],
        'subRequirements': (json['sub_requirements'] == null ? null : (json['sub_requirements'] as Array<any>).map(SubRequirementFromJSON)),
        'testResults': (json['test_results'] == null ? null : (json['test_results'] as Array<any>).map(TestResultFromJSON)),
        'title': json['title'],
    };
}

export function PCIDSSRequirementToJSON(json: any): PCIDSSRequirement {
    return PCIDSSRequirementToJSONTyped(json, false);
}

export function PCIDSSRequirementToJSONTyped(value?: PCIDSSRequirement | null, ignoreDiscriminator = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'evidence': (value['evidence'] == null ? null : (value['evidence'] as Array<any>).map(EvidenceToJSON)),
        'number': value['number'],
        'score': value['score'],
        'status': value['status'],
        'sub_requirements': (value['subRequirements'] == null ? null : (value['subRequirements'] as Array<any>).map(SubRequirementToJSON)),
        'test_results': (value['testResults'] == null ? null : (value['testResults'] as Array<any>).map(TestResultToJSON)),
        'title': value['title'],
    };
}

