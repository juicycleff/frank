/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { RetainedDataReason } from './RetainedDataReason';
import {
    RetainedDataReasonFromJSON,
    RetainedDataReasonFromJSONTyped,
    RetainedDataReasonToJSON,
    RetainedDataReasonToJSONTyped,
} from './RetainedDataReason';

/**
 * 
 * @export
 * @interface DataDeletionResult
 */
export interface DataDeletionResult {
    /**
     * A URL to the JSON Schema for this object.
     * @type {string}
     * @memberof DataDeletionResult
     */
    readonly $schema?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DataDeletionResult
     */
    backupsUpdated: boolean;
    /**
     * 
     * @type {Date}
     * @memberof DataDeletionResult
     */
    completionDate?: Date;
    /**
     * 
     * @type {Array<string>}
     * @memberof DataDeletionResult
     */
    errors: Array<string> | null;
    /**
     * 
     * @type {Date}
     * @memberof DataDeletionResult
     */
    processedAt: Date;
    /**
     * 
     * @type {number}
     * @memberof DataDeletionResult
     */
    recordsDeleted: number;
    /**
     * 
     * @type {string}
     * @memberof DataDeletionResult
     */
    requestId: string;
    /**
     * 
     * @type {Array<RetainedDataReason>}
     * @memberof DataDeletionResult
     */
    retainedData: Array<RetainedDataReason> | null;
    /**
     * 
     * @type {string}
     * @memberof DataDeletionResult
     */
    status: string;
    /**
     * 
     * @type {boolean}
     * @memberof DataDeletionResult
     */
    thirdPartyNotified: boolean;
}

/**
 * Check if a given object implements the DataDeletionResult interface.
 */
export function instanceOfDataDeletionResult(value: object): value is DataDeletionResult {
    if (!('backupsUpdated' in value) || value['backupsUpdated'] === undefined) return false;
    if (!('errors' in value) || value['errors'] === undefined) return false;
    if (!('processedAt' in value) || value['processedAt'] === undefined) return false;
    if (!('recordsDeleted' in value) || value['recordsDeleted'] === undefined) return false;
    if (!('requestId' in value) || value['requestId'] === undefined) return false;
    if (!('retainedData' in value) || value['retainedData'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('thirdPartyNotified' in value) || value['thirdPartyNotified'] === undefined) return false;
    return true;
}

export function DataDeletionResultFromJSON(json: any): DataDeletionResult {
    return DataDeletionResultFromJSONTyped(json, false);
}

export function DataDeletionResultFromJSONTyped(json: any, ignoreDiscriminator: boolean): DataDeletionResult {
    if (json == null) {
        return json;
    }
    return {
        
        '$schema': json['$schema'] == null ? undefined : json['$schema'],
        'backupsUpdated': json['backups_updated'],
        'completionDate': json['completion_date'] == null ? undefined : (new Date(json['completion_date'])),
        'errors': json['errors'] == null ? null : json['errors'],
        'processedAt': (new Date(json['processed_at'])),
        'recordsDeleted': json['records_deleted'],
        'requestId': json['request_id'],
        'retainedData': (json['retained_data'] == null ? null : (json['retained_data'] as Array<any>).map(RetainedDataReasonFromJSON)),
        'status': json['status'],
        'thirdPartyNotified': json['third_party_notified'],
    };
}

export function DataDeletionResultToJSON(json: any): DataDeletionResult {
    return DataDeletionResultToJSONTyped(json, false);
}

export function DataDeletionResultToJSONTyped(value?: Omit<DataDeletionResult, '$schema'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'backups_updated': value['backupsUpdated'],
        'completion_date': value['completionDate'] == null ? undefined : ((value['completionDate']).toISOString()),
        'errors': value['errors'],
        'processed_at': ((value['processedAt']).toISOString()),
        'records_deleted': value['recordsDeleted'],
        'request_id': value['requestId'],
        'retained_data': (value['retainedData'] == null ? null : (value['retainedData'] as Array<any>).map(RetainedDataReasonToJSON)),
        'status': value['status'],
        'third_party_notified': value['thirdPartyNotified'],
    };
}

