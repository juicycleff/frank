/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { OrganizationSummary } from './OrganizationSummary';
import {
    OrganizationSummaryFromJSON,
    OrganizationSummaryFromJSONTyped,
    OrganizationSummaryToJSON,
    OrganizationSummaryToJSONTyped,
} from './OrganizationSummary';
import type { SessionInfo } from './SessionInfo';
import {
    SessionInfoFromJSON,
    SessionInfoFromJSONTyped,
    SessionInfoToJSON,
    SessionInfoToJSONTyped,
} from './SessionInfo';
import type { UserPermissionAssignment } from './UserPermissionAssignment';
import {
    UserPermissionAssignmentFromJSON,
    UserPermissionAssignmentFromJSONTyped,
    UserPermissionAssignmentToJSON,
    UserPermissionAssignmentToJSONTyped,
} from './UserPermissionAssignment';
import type { UserRoleAssignment } from './UserRoleAssignment';
import {
    UserRoleAssignmentFromJSON,
    UserRoleAssignmentFromJSONTyped,
    UserRoleAssignmentToJSON,
    UserRoleAssignmentToJSONTyped,
} from './UserRoleAssignment';
import type { UserType } from './UserType';
import {
    UserTypeFromJSON,
    UserTypeFromJSONTyped,
    UserTypeToJSON,
    UserTypeToJSONTyped,
} from './UserType';
import type { MFAMethod } from './MFAMethod';
import {
    MFAMethodFromJSON,
    MFAMethodFromJSONTyped,
    MFAMethodToJSON,
    MFAMethodToJSONTyped,
} from './MFAMethod';

/**
 * 
 * @export
 * @interface User
 */
export interface User {
    [key: string]: any | any;
    /**
     * A URL to the JSON Schema for this object.
     * @type {string}
     * @memberof User
     */
    readonly $schema?: string;
    /**
     * Whether user is active
     * @type {boolean}
     * @memberof User
     */
    active: boolean;
    /**
     * Authentication provider
     * @type {string}
     * @memberof User
     */
    authProvider: string;
    /**
     * Whether user is blocked
     * @type {boolean}
     * @memberof User
     */
    blocked: boolean;
    /**
     * 
     * @type {Date}
     * @memberof User
     */
    createdAt: Date;
    /**
     * User who created this user
     * @type {string}
     * @memberof User
     */
    createdBy?: string;
    /**
     * Custom user attributes
     * @type {object}
     * @memberof User
     */
    customAttributes?: object;
    /**
     * Customer management system ID
     * @type {string}
     * @memberof User
     */
    customerId?: string;
    /**
     * User email address
     * @type {string}
     * @memberof User
     */
    email: string;
    /**
     * Whether email is verified
     * @type {boolean}
     * @memberof User
     */
    emailVerified: boolean;
    /**
     * External provider user ID
     * @type {string}
     * @memberof User
     */
    externalId?: string;
    /**
     * User first name
     * @type {string}
     * @memberof User
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    id: string;
    /**
     * Whether user is a platform administrator
     * @type {boolean}
     * @memberof User
     */
    isPlatformAdmin: boolean;
    /**
     * Last login timestamp
     * @type {Date}
     * @memberof User
     */
    lastLogin?: Date;
    /**
     * Last login IP address
     * @type {string}
     * @memberof User
     */
    lastLoginIp?: string;
    /**
     * User last name
     * @type {string}
     * @memberof User
     */
    lastName?: string;
    /**
     * Last password change timestamp
     * @type {Date}
     * @memberof User
     */
    lastPasswordChange?: Date;
    /**
     * User locale
     * @type {string}
     * @memberof User
     */
    locale: string;
    /**
     * Number of logins
     * @type {number}
     * @memberof User
     */
    loginCount: number;
    /**
     * Additional user metadata
     * @type {object}
     * @memberof User
     */
    metadata?: object;
    /**
     * Whether MFA is enabled for this user
     * @type {boolean}
     * @memberof User
     */
    mfaEnabled?: boolean;
    /**
     * MFA methods configured for this user
     * @type {Array<MFAMethod>}
     * @memberof User
     */
    mfaMethods?: Array<MFAMethod>;
    /**
     * Primary organization ID
     * @type {string}
     * @memberof User
     */
    organizationId?: string;
    /**
     * Organizations this user belongs to
     * @type {Array<OrganizationSummary>}
     * @memberof User
     */
    organizations?: Array<OrganizationSummary>;
    /**
     * Direct permission assignments
     * @type {Array<UserPermissionAssignment>}
     * @memberof User
     */
    permissions?: Array<UserPermissionAssignment>;
    /**
     * User phone number
     * @type {string}
     * @memberof User
     */
    phoneNumber?: string;
    /**
     * Whether phone is verified
     * @type {boolean}
     * @memberof User
     */
    phoneVerified: boolean;
    /**
     * Primary organization for multi-org users
     * @type {string}
     * @memberof User
     */
    primaryOrganizationId?: string;
    /**
     * Profile image URL
     * @type {string}
     * @memberof User
     */
    profileImageUrl?: string;
    /**
     * User role assignments
     * @type {Array<UserRoleAssignment>}
     * @memberof User
     */
    roles?: Array<UserRoleAssignment>;
    /**
     * Active sessions for this user
     * @type {Array<SessionInfo>}
     * @memberof User
     */
    sessions?: Array<SessionInfo>;
    /**
     * User timezone
     * @type {string}
     * @memberof User
     */
    timezone?: string;
    /**
     * 
     * @type {Date}
     * @memberof User
     */
    updatedAt: Date;
    /**
     * User type (internal, external, end_user)
     * @type {UserType}
     * @memberof User
     */
    userType: UserUserTypeEnum;
    /**
     * Username
     * @type {string}
     * @memberof User
     */
    username?: string;
}


/**
 * @export
 */
export const UserUserTypeEnum = {
    Internal: 'internal',
    External: 'external',
    EndUser: 'end_user'
} as const;
export type UserUserTypeEnum = typeof UserUserTypeEnum[keyof typeof UserUserTypeEnum];


/**
 * Check if a given object implements the User interface.
 */
export function instanceOfUser(value: object): value is User {
    if (!('active' in value) || value['active'] === undefined) return false;
    if (!('authProvider' in value) || value['authProvider'] === undefined) return false;
    if (!('blocked' in value) || value['blocked'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('email' in value) || value['email'] === undefined) return false;
    if (!('emailVerified' in value) || value['emailVerified'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('isPlatformAdmin' in value) || value['isPlatformAdmin'] === undefined) return false;
    if (!('locale' in value) || value['locale'] === undefined) return false;
    if (!('loginCount' in value) || value['loginCount'] === undefined) return false;
    if (!('phoneVerified' in value) || value['phoneVerified'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    if (!('userType' in value) || value['userType'] === undefined) return false;
    return true;
}

export function UserFromJSON(json: any): User {
    return UserFromJSONTyped(json, false);
}

export function UserFromJSONTyped(json: any, ignoreDiscriminator: boolean): User {
    if (json == null) {
        return json;
    }
    return {
        
            ...json,
        '$schema': json['$schema'] == null ? undefined : json['$schema'],
        'active': json['active'],
        'authProvider': json['authProvider'],
        'blocked': json['blocked'],
        'createdAt': (new Date(json['createdAt'])),
        'createdBy': json['createdBy'] == null ? undefined : json['createdBy'],
        'customAttributes': json['customAttributes'] == null ? undefined : json['customAttributes'],
        'customerId': json['customerId'] == null ? undefined : json['customerId'],
        'email': json['email'],
        'emailVerified': json['emailVerified'],
        'externalId': json['externalId'] == null ? undefined : json['externalId'],
        'firstName': json['firstName'] == null ? undefined : json['firstName'],
        'id': json['id'],
        'isPlatformAdmin': json['isPlatformAdmin'],
        'lastLogin': json['lastLogin'] == null ? undefined : (new Date(json['lastLogin'])),
        'lastLoginIp': json['lastLoginIp'] == null ? undefined : json['lastLoginIp'],
        'lastName': json['lastName'] == null ? undefined : json['lastName'],
        'lastPasswordChange': json['lastPasswordChange'] == null ? undefined : (new Date(json['lastPasswordChange'])),
        'locale': json['locale'],
        'loginCount': json['loginCount'],
        'metadata': json['metadata'] == null ? undefined : json['metadata'],
        'mfaEnabled': json['mfaEnabled'] == null ? undefined : json['mfaEnabled'],
        'mfaMethods': json['mfaMethods'] == null ? undefined : ((json['mfaMethods'] as Array<any>).map(MFAMethodFromJSON)),
        'organizationId': json['organizationId'] == null ? undefined : json['organizationId'],
        'organizations': json['organizations'] == null ? undefined : ((json['organizations'] as Array<any>).map(OrganizationSummaryFromJSON)),
        'permissions': json['permissions'] == null ? undefined : ((json['permissions'] as Array<any>).map(UserPermissionAssignmentFromJSON)),
        'phoneNumber': json['phoneNumber'] == null ? undefined : json['phoneNumber'],
        'phoneVerified': json['phoneVerified'],
        'primaryOrganizationId': json['primaryOrganizationId'] == null ? undefined : json['primaryOrganizationId'],
        'profileImageUrl': json['profileImageUrl'] == null ? undefined : json['profileImageUrl'],
        'roles': json['roles'] == null ? undefined : ((json['roles'] as Array<any>).map(UserRoleAssignmentFromJSON)),
        'sessions': json['sessions'] == null ? undefined : ((json['sessions'] as Array<any>).map(SessionInfoFromJSON)),
        'timezone': json['timezone'] == null ? undefined : json['timezone'],
        'updatedAt': (new Date(json['updatedAt'])),
        'userType': UserTypeFromJSON(json['userType']),
        'username': json['username'] == null ? undefined : json['username'],
    };
}

export function UserToJSON(json: any): User {
    return UserToJSONTyped(json, false);
}

export function UserToJSONTyped(value?: Omit<User, '$schema'> | null, ignoreDiscriminator = false): any {
    if (value == null) {
        return value;
    }

    return {
        
            ...value,
        'active': value['active'],
        'authProvider': value['authProvider'],
        'blocked': value['blocked'],
        'createdAt': ((value['createdAt']).toISOString()),
        'createdBy': value['createdBy'],
        'customAttributes': value['customAttributes'],
        'customerId': value['customerId'],
        'email': value['email'],
        'emailVerified': value['emailVerified'],
        'externalId': value['externalId'],
        'firstName': value['firstName'],
        'id': value['id'],
        'isPlatformAdmin': value['isPlatformAdmin'],
        'lastLogin': value['lastLogin'] == null ? undefined : ((value['lastLogin']).toISOString()),
        'lastLoginIp': value['lastLoginIp'],
        'lastName': value['lastName'],
        'lastPasswordChange': value['lastPasswordChange'] == null ? undefined : ((value['lastPasswordChange']).toISOString()),
        'locale': value['locale'],
        'loginCount': value['loginCount'],
        'metadata': value['metadata'],
        'mfaEnabled': value['mfaEnabled'],
        'mfaMethods': value['mfaMethods'] == null ? undefined : ((value['mfaMethods'] as Array<any>).map(MFAMethodToJSON)),
        'organizationId': value['organizationId'],
        'organizations': value['organizations'] == null ? undefined : ((value['organizations'] as Array<any>).map(OrganizationSummaryToJSON)),
        'permissions': value['permissions'] == null ? undefined : ((value['permissions'] as Array<any>).map(UserPermissionAssignmentToJSON)),
        'phoneNumber': value['phoneNumber'],
        'phoneVerified': value['phoneVerified'],
        'primaryOrganizationId': value['primaryOrganizationId'],
        'profileImageUrl': value['profileImageUrl'],
        'roles': value['roles'] == null ? undefined : ((value['roles'] as Array<any>).map(UserRoleAssignmentToJSON)),
        'sessions': value['sessions'] == null ? undefined : ((value['sessions'] as Array<any>).map(SessionInfoToJSON)),
        'timezone': value['timezone'],
        'updatedAt': ((value['updatedAt']).toISOString()),
        'userType': UserTypeToJSON(value['userType']),
        'username': value['username'],
    };
}

