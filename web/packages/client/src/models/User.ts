/* tslint:disable */
/* eslint-disable */
/**
 * My Project
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    MfaMethod,
    MfaMethodFromJSON,
    MfaMethodFromJSONTyped,
    MfaMethodToJSON,
    OrganizationSummary,
    OrganizationSummaryFromJSON,
    OrganizationSummaryFromJSONTyped,
    OrganizationSummaryToJSON,
    SessionInfo,
    SessionInfoFromJSON,
    SessionInfoFromJSONTyped,
    SessionInfoToJSON,
    UserPermissionAssignment,
    UserPermissionAssignmentFromJSON,
    UserPermissionAssignmentFromJSONTyped,
    UserPermissionAssignmentToJSON,
    UserRoleAssignment,
    UserRoleAssignmentFromJSON,
    UserRoleAssignmentFromJSONTyped,
    UserRoleAssignmentToJSON,
} from './';

/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * A URL to the JSON Schema for this object.
     * @type {string}
     * @memberof User
     */
    readonly $schema?: string;
    /**
     * Whether user is active
     * @type {boolean}
     * @memberof User
     */
    active: boolean;
    /**
     * Authentication provider
     * @type {string}
     * @memberof User
     */
    authProvider: string;
    /**
     * Whether user is blocked
     * @type {boolean}
     * @memberof User
     */
    blocked: boolean;
    /**
     * 
     * @type {Date}
     * @memberof User
     */
    createdAt: Date;
    /**
     * User who created this user
     * @type {string}
     * @memberof User
     */
    createdBy?: string;
    /**
     * Custom user attributes
     * @type {{ [key: string]: string; }}
     * @memberof User
     */
    customAttributes?: { [key: string]: string; };
    /**
     * Customer management system ID
     * @type {string}
     * @memberof User
     */
    customerId?: string;
    /**
     * User email address
     * @type {string}
     * @memberof User
     */
    email: string;
    /**
     * Whether email is verified
     * @type {boolean}
     * @memberof User
     */
    emailVerified: boolean;
    /**
     * External provider user ID
     * @type {string}
     * @memberof User
     */
    externalId?: string;
    /**
     * User first name
     * @type {string}
     * @memberof User
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    id: string;
    /**
     * Whether user is a platform administrator
     * @type {boolean}
     * @memberof User
     */
    isPlatformAdmin: boolean;
    /**
     * Last login timestamp
     * @type {Date}
     * @memberof User
     */
    lastLogin?: Date;
    /**
     * Last login IP address
     * @type {string}
     * @memberof User
     */
    lastLoginIp?: string;
    /**
     * User last name
     * @type {string}
     * @memberof User
     */
    lastName?: string;
    /**
     * Last password change timestamp
     * @type {Date}
     * @memberof User
     */
    lastPasswordChange?: Date;
    /**
     * User locale
     * @type {string}
     * @memberof User
     */
    locale: string;
    /**
     * Number of logins
     * @type {number}
     * @memberof User
     */
    loginCount: number;
    /**
     * Additional user metadata
     * @type {{ [key: string]: string; }}
     * @memberof User
     */
    metadata?: { [key: string]: string; };
    /**
     * MFA methods configured for this user
     * @type {Array<MfaMethod>}
     * @memberof User
     */
    mfaMethods?: Array<MfaMethod> | null;
    /**
     * Primary organization ID
     * @type {string}
     * @memberof User
     */
    organizationId?: string;
    /**
     * Organizations this user belongs to
     * @type {Array<OrganizationSummary>}
     * @memberof User
     */
    organizations?: Array<OrganizationSummary> | null;
    /**
     * Direct permission assignments
     * @type {Array<UserPermissionAssignment>}
     * @memberof User
     */
    permissions?: Array<UserPermissionAssignment> | null;
    /**
     * User phone number
     * @type {string}
     * @memberof User
     */
    phoneNumber?: string;
    /**
     * Whether phone is verified
     * @type {boolean}
     * @memberof User
     */
    phoneVerified: boolean;
    /**
     * Primary organization for multi-org users
     * @type {string}
     * @memberof User
     */
    primaryOrganizationId?: string;
    /**
     * Profile image URL
     * @type {string}
     * @memberof User
     */
    profileImageUrl?: string;
    /**
     * User role assignments
     * @type {Array<UserRoleAssignment>}
     * @memberof User
     */
    roles?: Array<UserRoleAssignment> | null;
    /**
     * Active sessions for this user
     * @type {Array<SessionInfo>}
     * @memberof User
     */
    sessions?: Array<SessionInfo> | null;
    /**
     * User timezone
     * @type {string}
     * @memberof User
     */
    timezone?: string;
    /**
     * 
     * @type {Date}
     * @memberof User
     */
    updatedAt: Date;
    /**
     * User type (internal, external, end_user)
     * @type {string}
     * @memberof User
     */
    userType: string;
    /**
     * Username
     * @type {string}
     * @memberof User
     */
    username?: string;
}

export function UserFromJSON(json: any): User {
    return UserFromJSONTyped(json, false);
}

export function UserFromJSONTyped(json: any, ignoreDiscriminator: boolean): User {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        '$schema': !exists(json, '$schema') ? undefined : json['$schema'],
        'active': json['active'],
        'authProvider': json['authProvider'],
        'blocked': json['blocked'],
        'createdAt': (new Date(json['createdAt'])),
        'createdBy': !exists(json, 'createdBy') ? undefined : json['createdBy'],
        'customAttributes': !exists(json, 'customAttributes') ? undefined : json['customAttributes'],
        'customerId': !exists(json, 'customerId') ? undefined : json['customerId'],
        'email': json['email'],
        'emailVerified': json['emailVerified'],
        'externalId': !exists(json, 'externalId') ? undefined : json['externalId'],
        'firstName': !exists(json, 'firstName') ? undefined : json['firstName'],
        'id': json['id'],
        'isPlatformAdmin': json['isPlatformAdmin'],
        'lastLogin': !exists(json, 'lastLogin') ? undefined : (new Date(json['lastLogin'])),
        'lastLoginIp': !exists(json, 'lastLoginIp') ? undefined : json['lastLoginIp'],
        'lastName': !exists(json, 'lastName') ? undefined : json['lastName'],
        'lastPasswordChange': !exists(json, 'lastPasswordChange') ? undefined : (new Date(json['lastPasswordChange'])),
        'locale': json['locale'],
        'loginCount': json['loginCount'],
        'metadata': !exists(json, 'metadata') ? undefined : json['metadata'],
        'mfaMethods': !exists(json, 'mfaMethods') ? undefined : (json['mfaMethods'] === null ? null : (json['mfaMethods'] as Array<any>).map(MfaMethodFromJSON)),
        'organizationId': !exists(json, 'organizationId') ? undefined : json['organizationId'],
        'organizations': !exists(json, 'organizations') ? undefined : (json['organizations'] === null ? null : (json['organizations'] as Array<any>).map(OrganizationSummaryFromJSON)),
        'permissions': !exists(json, 'permissions') ? undefined : (json['permissions'] === null ? null : (json['permissions'] as Array<any>).map(UserPermissionAssignmentFromJSON)),
        'phoneNumber': !exists(json, 'phoneNumber') ? undefined : json['phoneNumber'],
        'phoneVerified': json['phoneVerified'],
        'primaryOrganizationId': !exists(json, 'primaryOrganizationId') ? undefined : json['primaryOrganizationId'],
        'profileImageUrl': !exists(json, 'profileImageUrl') ? undefined : json['profileImageUrl'],
        'roles': !exists(json, 'roles') ? undefined : (json['roles'] === null ? null : (json['roles'] as Array<any>).map(UserRoleAssignmentFromJSON)),
        'sessions': !exists(json, 'sessions') ? undefined : (json['sessions'] === null ? null : (json['sessions'] as Array<any>).map(SessionInfoFromJSON)),
        'timezone': !exists(json, 'timezone') ? undefined : json['timezone'],
        'updatedAt': (new Date(json['updatedAt'])),
        'userType': json['userType'],
        'username': !exists(json, 'username') ? undefined : json['username'],
    };
}

export function UserToJSON(value?: User | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'active': value.active,
        'authProvider': value.authProvider,
        'blocked': value.blocked,
        'createdAt': (value.createdAt.toISOString()),
        'createdBy': value.createdBy,
        'customAttributes': value.customAttributes,
        'customerId': value.customerId,
        'email': value.email,
        'emailVerified': value.emailVerified,
        'externalId': value.externalId,
        'firstName': value.firstName,
        'id': value.id,
        'isPlatformAdmin': value.isPlatformAdmin,
        'lastLogin': value.lastLogin === undefined ? undefined : (value.lastLogin.toISOString()),
        'lastLoginIp': value.lastLoginIp,
        'lastName': value.lastName,
        'lastPasswordChange': value.lastPasswordChange === undefined ? undefined : (value.lastPasswordChange.toISOString()),
        'locale': value.locale,
        'loginCount': value.loginCount,
        'metadata': value.metadata,
        'mfaMethods': value.mfaMethods === undefined ? undefined : (value.mfaMethods === null ? null : (value.mfaMethods as Array<any>).map(MfaMethodToJSON)),
        'organizationId': value.organizationId,
        'organizations': value.organizations === undefined ? undefined : (value.organizations === null ? null : (value.organizations as Array<any>).map(OrganizationSummaryToJSON)),
        'permissions': value.permissions === undefined ? undefined : (value.permissions === null ? null : (value.permissions as Array<any>).map(UserPermissionAssignmentToJSON)),
        'phoneNumber': value.phoneNumber,
        'phoneVerified': value.phoneVerified,
        'primaryOrganizationId': value.primaryOrganizationId,
        'profileImageUrl': value.profileImageUrl,
        'roles': value.roles === undefined ? undefined : (value.roles === null ? null : (value.roles as Array<any>).map(UserRoleAssignmentToJSON)),
        'sessions': value.sessions === undefined ? undefined : (value.sessions === null ? null : (value.sessions as Array<any>).map(SessionInfoToJSON)),
        'timezone': value.timezone,
        'updatedAt': (value.updatedAt.toISOString()),
        'userType': value.userType,
        'username': value.username,
    };
}


