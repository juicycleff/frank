/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { FeatureVariation } from './FeatureVariation';
import {
    FeatureVariationFromJSON,
    FeatureVariationFromJSONTyped,
    FeatureVariationToJSON,
    FeatureVariationToJSONTyped,
} from './FeatureVariation';
import type { FeatureRule } from './FeatureRule';
import {
    FeatureRuleFromJSON,
    FeatureRuleFromJSONTyped,
    FeatureRuleToJSON,
    FeatureRuleToJSONTyped,
} from './FeatureRule';
import type { FeatureAnalytics } from './FeatureAnalytics';
import {
    FeatureAnalyticsFromJSON,
    FeatureAnalyticsFromJSONTyped,
    FeatureAnalyticsToJSON,
    FeatureAnalyticsToJSONTyped,
} from './FeatureAnalytics';
import type { FeatureTargeting } from './FeatureTargeting';
import {
    FeatureTargetingFromJSON,
    FeatureTargetingFromJSONTyped,
    FeatureTargetingToJSON,
    FeatureTargetingToJSONTyped,
} from './FeatureTargeting';
import type { FeatureRollout } from './FeatureRollout';
import {
    FeatureRolloutFromJSON,
    FeatureRolloutFromJSONTyped,
    FeatureRolloutToJSON,
    FeatureRolloutToJSONTyped,
} from './FeatureRollout';

/**
 * 
 * @export
 * @interface FeatureFlag
 */
export interface FeatureFlag {
    /**
     * A URL to the JSON Schema for this object.
     * @type {string}
     * @memberof FeatureFlag
     */
    readonly $schema?: string;
    /**
     * 
     * @type {FeatureAnalytics}
     * @memberof FeatureFlag
     */
    analytics?: FeatureAnalytics;
    /**
     * 
     * @type {Date}
     * @memberof FeatureFlag
     */
    createdAt: Date;
    /**
     * 
     * @type {any}
     * @memberof FeatureFlag
     */
    defaultValue: any | null;
    /**
     * 
     * @type {string}
     * @memberof FeatureFlag
     */
    description: string;
    /**
     * 
     * @type {boolean}
     * @memberof FeatureFlag
     */
    enabled: boolean;
    /**
     * 
     * @type {string}
     * @memberof FeatureFlag
     */
    environment: string;
    /**
     * 
     * @type {string}
     * @memberof FeatureFlag
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof FeatureFlag
     */
    key: string;
    /**
     * 
     * @type {Date}
     * @memberof FeatureFlag
     */
    lastModified: Date;
    /**
     * 
     * @type {string}
     * @memberof FeatureFlag
     */
    modifiedBy: string;
    /**
     * 
     * @type {string}
     * @memberof FeatureFlag
     */
    name: string;
    /**
     * 
     * @type {FeatureRollout}
     * @memberof FeatureFlag
     */
    rollout?: FeatureRollout;
    /**
     * 
     * @type {Array<FeatureRule>}
     * @memberof FeatureFlag
     */
    rules?: Array<FeatureRule> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof FeatureFlag
     */
    tags?: Array<string> | null;
    /**
     * 
     * @type {FeatureTargeting}
     * @memberof FeatureFlag
     */
    targeting?: FeatureTargeting;
    /**
     * 
     * @type {string}
     * @memberof FeatureFlag
     */
    type: string;
    /**
     * 
     * @type {Date}
     * @memberof FeatureFlag
     */
    updatedAt: Date;
    /**
     * 
     * @type {Array<FeatureVariation>}
     * @memberof FeatureFlag
     */
    variations?: Array<FeatureVariation> | null;
}

/**
 * Check if a given object implements the FeatureFlag interface.
 */
export function instanceOfFeatureFlag(value: object): value is FeatureFlag {
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('defaultValue' in value) || value['defaultValue'] === undefined) return false;
    if (!('description' in value) || value['description'] === undefined) return false;
    if (!('enabled' in value) || value['enabled'] === undefined) return false;
    if (!('environment' in value) || value['environment'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('key' in value) || value['key'] === undefined) return false;
    if (!('lastModified' in value) || value['lastModified'] === undefined) return false;
    if (!('modifiedBy' in value) || value['modifiedBy'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    return true;
}

export function FeatureFlagFromJSON(json: any): FeatureFlag {
    return FeatureFlagFromJSONTyped(json, false);
}

export function FeatureFlagFromJSONTyped(json: any, ignoreDiscriminator: boolean): FeatureFlag {
    if (json == null) {
        return json;
    }
    return {
        
        '$schema': json['$schema'] == null ? undefined : json['$schema'],
        'analytics': json['analytics'] == null ? undefined : FeatureAnalyticsFromJSON(json['analytics']),
        'createdAt': (new Date(json['createdAt'])),
        'defaultValue': json['default_value'],
        'description': json['description'],
        'enabled': json['enabled'],
        'environment': json['environment'],
        'id': json['id'],
        'key': json['key'],
        'lastModified': (new Date(json['last_modified'])),
        'modifiedBy': json['modified_by'],
        'name': json['name'],
        'rollout': json['rollout'] == null ? undefined : FeatureRolloutFromJSON(json['rollout']),
        'rules': json['rules'] == null ? undefined : ((json['rules'] as Array<any>).map(FeatureRuleFromJSON)),
        'tags': json['tags'] == null ? undefined : json['tags'],
        'targeting': json['targeting'] == null ? undefined : FeatureTargetingFromJSON(json['targeting']),
        'type': json['type'],
        'updatedAt': (new Date(json['updatedAt'])),
        'variations': json['variations'] == null ? undefined : ((json['variations'] as Array<any>).map(FeatureVariationFromJSON)),
    };
}

export function FeatureFlagToJSON(json: any): FeatureFlag {
    return FeatureFlagToJSONTyped(json, false);
}

export function FeatureFlagToJSONTyped(value?: Omit<FeatureFlag, '$schema'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'analytics': FeatureAnalyticsToJSON(value['analytics']),
        'createdAt': ((value['createdAt']).toISOString()),
        'default_value': value['defaultValue'],
        'description': value['description'],
        'enabled': value['enabled'],
        'environment': value['environment'],
        'id': value['id'],
        'key': value['key'],
        'last_modified': ((value['lastModified']).toISOString()),
        'modified_by': value['modifiedBy'],
        'name': value['name'],
        'rollout': FeatureRolloutToJSON(value['rollout']),
        'rules': value['rules'] == null ? undefined : ((value['rules'] as Array<any>).map(FeatureRuleToJSON)),
        'tags': value['tags'],
        'targeting': FeatureTargetingToJSON(value['targeting']),
        'type': value['type'],
        'updatedAt': ((value['updatedAt']).toISOString()),
        'variations': value['variations'] == null ? undefined : ((value['variations'] as Array<any>).map(FeatureVariationToJSON)),
    };
}

