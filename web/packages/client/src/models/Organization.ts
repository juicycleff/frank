/* tslint:disable */
/* eslint-disable */
/**
 * My Project
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    FeatureSummary,
    FeatureSummaryFromJSON,
    FeatureSummaryFromJSONTyped,
    FeatureSummaryToJSON,
    OrgStats,
    OrgStatsFromJSON,
    OrgStatsFromJSONTyped,
    OrgStatsToJSON,
    UserSummary,
    UserSummaryFromJSON,
    UserSummaryFromJSONTyped,
    UserSummaryToJSON,
} from './';

/**
 * 
 * @export
 * @interface Organization
 */
export interface Organization {
    /**
     * A URL to the JSON Schema for this object.
     * @type {string}
     * @memberof Organization
     */
    readonly $schema?: string;
    /**
     * Whether organization is active
     * @type {boolean}
     * @memberof Organization
     */
    active: boolean;
    /**
     * Monthly API request limit
     * @type {number}
     * @memberof Organization
     */
    apiRequestLimit: number;
    /**
     * API requests used this month
     * @type {number}
     * @memberof Organization
     */
    apiRequestsUsed: number;
    /**
     * Auth service configuration
     * @type {{ [key: string]: string; }}
     * @memberof Organization
     */
    authConfig?: { [key: string]: string; };
    /**
     * Custom auth domain
     * @type {string}
     * @memberof Organization
     */
    authDomain?: string;
    /**
     * Whether auth service is enabled
     * @type {boolean}
     * @memberof Organization
     */
    authServiceEnabled: boolean;
    /**
     * 
     * @type {Date}
     * @memberof Organization
     */
    createdAt: Date;
    /**
     * Current end user count
     * @type {number}
     * @memberof Organization
     */
    currentEndUsers: number;
    /**
     * Current external user count
     * @type {number}
     * @memberof Organization
     */
    currentExternalUsers: number;
    /**
     * Billing customer ID
     * @type {string}
     * @memberof Organization
     */
    customerId?: string;
    /**
     * Primary domain
     * @type {string}
     * @memberof Organization
     */
    domain?: string;
    /**
     * Organization domains
     * @type {Array<string>}
     * @memberof Organization
     */
    domains?: Array<string> | null;
    /**
     * Maximum end users allowed
     * @type {number}
     * @memberof Organization
     */
    endUserLimit: number;
    /**
     * Maximum external users allowed
     * @type {number}
     * @memberof Organization
     */
    externalUserLimit: number;
    /**
     * Enabled features
     * @type {Array<FeatureSummary>}
     * @memberof Organization
     */
    features?: Array<FeatureSummary> | null;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    id: string;
    /**
     * Whether this is the platform organization
     * @type {boolean}
     * @memberof Organization
     */
    isPlatformOrganization: boolean;
    /**
     * Organization logo URL
     * @type {string}
     * @memberof Organization
     */
    logoUrl?: string;
    /**
     * Organization members
     * @type {Array<object>}
     * @memberof Organization
     */
    members?: Array<object> | null;
    /**
     * Additional organization metadata
     * @type {{ [key: string]: string; }}
     * @memberof Organization
     */
    metadata?: { [key: string]: string; };
    /**
     * Organization name
     * @type {string}
     * @memberof Organization
     */
    name: string;
    /**
     * Organization type (platform, customer)
     * @type {string}
     * @memberof Organization
     */
    orgType: string;
    /**
     * 
     * @type {UserSummary}
     * @memberof Organization
     */
    owner?: UserSummary;
    /**
     * Organization owner ID
     * @type {string}
     * @memberof Organization
     */
    ownerId?: string;
    /**
     * Subscription plan
     * @type {string}
     * @memberof Organization
     */
    plan: string;
    /**
     * Unique organization slug
     * @type {string}
     * @memberof Organization
     */
    slug: string;
    /**
     * SSO domain
     * @type {string}
     * @memberof Organization
     */
    ssoDomain?: string;
    /**
     * Whether SSO is enabled
     * @type {boolean}
     * @memberof Organization
     */
    ssoEnabled: boolean;
    /**
     * 
     * @type {OrgStats}
     * @memberof Organization
     */
    stats?: OrgStats;
    /**
     * Billing subscription ID
     * @type {string}
     * @memberof Organization
     */
    subscriptionId?: string;
    /**
     * Subscription status
     * @type {string}
     * @memberof Organization
     */
    subscriptionStatus: string;
    /**
     * Trial end date
     * @type {Date}
     * @memberof Organization
     */
    trialEndsAt?: Date;
    /**
     * Whether trial has been used
     * @type {boolean}
     * @memberof Organization
     */
    trialUsed: boolean;
    /**
     * 
     * @type {Date}
     * @memberof Organization
     */
    updatedAt: Date;
    /**
     * Verified domains
     * @type {Array<string>}
     * @memberof Organization
     */
    verifiedDomains?: Array<string> | null;
}

export function OrganizationFromJSON(json: any): Organization {
    return OrganizationFromJSONTyped(json, false);
}

export function OrganizationFromJSONTyped(json: any, ignoreDiscriminator: boolean): Organization {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        '$schema': !exists(json, '$schema') ? undefined : json['$schema'],
        'active': json['active'],
        'apiRequestLimit': json['apiRequestLimit'],
        'apiRequestsUsed': json['apiRequestsUsed'],
        'authConfig': !exists(json, 'authConfig') ? undefined : json['authConfig'],
        'authDomain': !exists(json, 'authDomain') ? undefined : json['authDomain'],
        'authServiceEnabled': json['authServiceEnabled'],
        'createdAt': (new Date(json['createdAt'])),
        'currentEndUsers': json['currentEndUsers'],
        'currentExternalUsers': json['currentExternalUsers'],
        'customerId': !exists(json, 'customerId') ? undefined : json['customerId'],
        'domain': !exists(json, 'domain') ? undefined : json['domain'],
        'domains': !exists(json, 'domains') ? undefined : json['domains'],
        'endUserLimit': json['endUserLimit'],
        'externalUserLimit': json['externalUserLimit'],
        'features': !exists(json, 'features') ? undefined : (json['features'] === null ? null : (json['features'] as Array<any>).map(FeatureSummaryFromJSON)),
        'id': json['id'],
        'isPlatformOrganization': json['isPlatformOrganization'],
        'logoUrl': !exists(json, 'logoUrl') ? undefined : json['logoUrl'],
        'members': !exists(json, 'members') ? undefined : json['members'],
        'metadata': !exists(json, 'metadata') ? undefined : json['metadata'],
        'name': json['name'],
        'orgType': json['orgType'],
        'owner': !exists(json, 'owner') ? undefined : UserSummaryFromJSON(json['owner']),
        'ownerId': !exists(json, 'ownerId') ? undefined : json['ownerId'],
        'plan': json['plan'],
        'slug': json['slug'],
        'ssoDomain': !exists(json, 'ssoDomain') ? undefined : json['ssoDomain'],
        'ssoEnabled': json['ssoEnabled'],
        'stats': !exists(json, 'stats') ? undefined : OrgStatsFromJSON(json['stats']),
        'subscriptionId': !exists(json, 'subscriptionId') ? undefined : json['subscriptionId'],
        'subscriptionStatus': json['subscriptionStatus'],
        'trialEndsAt': !exists(json, 'trialEndsAt') ? undefined : (new Date(json['trialEndsAt'])),
        'trialUsed': json['trialUsed'],
        'updatedAt': (new Date(json['updatedAt'])),
        'verifiedDomains': !exists(json, 'verifiedDomains') ? undefined : json['verifiedDomains'],
    };
}

export function OrganizationToJSON(value?: Organization | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'active': value.active,
        'apiRequestLimit': value.apiRequestLimit,
        'apiRequestsUsed': value.apiRequestsUsed,
        'authConfig': value.authConfig,
        'authDomain': value.authDomain,
        'authServiceEnabled': value.authServiceEnabled,
        'createdAt': (value.createdAt.toISOString()),
        'currentEndUsers': value.currentEndUsers,
        'currentExternalUsers': value.currentExternalUsers,
        'customerId': value.customerId,
        'domain': value.domain,
        'domains': value.domains,
        'endUserLimit': value.endUserLimit,
        'externalUserLimit': value.externalUserLimit,
        'features': value.features === undefined ? undefined : (value.features === null ? null : (value.features as Array<any>).map(FeatureSummaryToJSON)),
        'id': value.id,
        'isPlatformOrganization': value.isPlatformOrganization,
        'logoUrl': value.logoUrl,
        'members': value.members,
        'metadata': value.metadata,
        'name': value.name,
        'orgType': value.orgType,
        'owner': UserSummaryToJSON(value.owner),
        'ownerId': value.ownerId,
        'plan': value.plan,
        'slug': value.slug,
        'ssoDomain': value.ssoDomain,
        'ssoEnabled': value.ssoEnabled,
        'stats': OrgStatsToJSON(value.stats),
        'subscriptionId': value.subscriptionId,
        'subscriptionStatus': value.subscriptionStatus,
        'trialEndsAt': value.trialEndsAt === undefined ? undefined : (value.trialEndsAt.toISOString()),
        'trialUsed': value.trialUsed,
        'updatedAt': (value.updatedAt.toISOString()),
        'verifiedDomains': value.verifiedDomains,
    };
}


