/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ForecastPeriod
 */
export interface ForecastPeriod {
    /**
     * 
     * @type {number}
     * @memberof ForecastPeriod
     */
    churnRatePercent: number;
    /**
     * 
     * @type {number}
     * @memberof ForecastPeriod
     */
    growthRatePercent: number;
    /**
     * 
     * @type {number}
     * @memberof ForecastPeriod
     */
    revenue: number;
    /**
     * 
     * @type {number}
     * @memberof ForecastPeriod
     */
    subscriptions: number;
}

/**
 * Check if a given object implements the ForecastPeriod interface.
 */
export function instanceOfForecastPeriod(value: object): value is ForecastPeriod {
    if (!('churnRatePercent' in value) || value['churnRatePercent'] === undefined) return false;
    if (!('growthRatePercent' in value) || value['growthRatePercent'] === undefined) return false;
    if (!('revenue' in value) || value['revenue'] === undefined) return false;
    if (!('subscriptions' in value) || value['subscriptions'] === undefined) return false;
    return true;
}

export function ForecastPeriodFromJSON(json: any): ForecastPeriod {
    return ForecastPeriodFromJSONTyped(json, false);
}

export function ForecastPeriodFromJSONTyped(json: any, ignoreDiscriminator: boolean): ForecastPeriod {
    if (json == null) {
        return json;
    }
    return {
        
        'churnRatePercent': json['churn_rate_percent'],
        'growthRatePercent': json['growth_rate_percent'],
        'revenue': json['revenue'],
        'subscriptions': json['subscriptions'],
    };
}

export function ForecastPeriodToJSON(json: any): ForecastPeriod {
    return ForecastPeriodToJSONTyped(json, false);
}

export function ForecastPeriodToJSONTyped(value?: ForecastPeriod | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'churn_rate_percent': value['churnRatePercent'],
        'growth_rate_percent': value['growthRatePercent'],
        'revenue': value['revenue'],
        'subscriptions': value['subscriptions'],
    };
}

