/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { DataTransfer } from './DataTransfer';
import {
    DataTransferFromJSON,
    DataTransferFromJSONTyped,
    DataTransferToJSON,
    DataTransferToJSONTyped,
} from './DataTransfer';

/**
 * 
 * @export
 * @interface ProcessingRecord
 */
export interface ProcessingRecord {
    /**
     * 
     * @type {Array<string>}
     * @memberof ProcessingRecord
     */
    dataCategories: Array<string> | null;
    /**
     * 
     * @type {boolean}
     * @memberof ProcessingRecord
     */
    dpiaCompleted: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ProcessingRecord
     */
    dpiaRequired: boolean;
    /**
     * 
     * @type {string}
     * @memberof ProcessingRecord
     */
    legalBasis: string;
    /**
     * 
     * @type {string}
     * @memberof ProcessingRecord
     */
    purpose: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProcessingRecord
     */
    recipients: Array<string> | null;
    /**
     * 
     * @type {string}
     * @memberof ProcessingRecord
     */
    retentionPeriod: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProcessingRecord
     */
    securityMeasures: Array<string> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProcessingRecord
     */
    subjectCategories: Array<string> | null;
    /**
     * 
     * @type {Array<DataTransfer>}
     * @memberof ProcessingRecord
     */
    transfers: Array<DataTransfer> | null;
}

/**
 * Check if a given object implements the ProcessingRecord interface.
 */
export function instanceOfProcessingRecord(value: object): value is ProcessingRecord {
    if (!('dataCategories' in value) || value['dataCategories'] === undefined) return false;
    if (!('dpiaCompleted' in value) || value['dpiaCompleted'] === undefined) return false;
    if (!('dpiaRequired' in value) || value['dpiaRequired'] === undefined) return false;
    if (!('legalBasis' in value) || value['legalBasis'] === undefined) return false;
    if (!('purpose' in value) || value['purpose'] === undefined) return false;
    if (!('recipients' in value) || value['recipients'] === undefined) return false;
    if (!('retentionPeriod' in value) || value['retentionPeriod'] === undefined) return false;
    if (!('securityMeasures' in value) || value['securityMeasures'] === undefined) return false;
    if (!('subjectCategories' in value) || value['subjectCategories'] === undefined) return false;
    if (!('transfers' in value) || value['transfers'] === undefined) return false;
    return true;
}

export function ProcessingRecordFromJSON(json: any): ProcessingRecord {
    return ProcessingRecordFromJSONTyped(json, false);
}

export function ProcessingRecordFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProcessingRecord {
    if (json == null) {
        return json;
    }
    return {
        
        'dataCategories': json['data_categories'] == null ? null : json['data_categories'],
        'dpiaCompleted': json['dpia_completed'],
        'dpiaRequired': json['dpia_required'],
        'legalBasis': json['legal_basis'],
        'purpose': json['purpose'],
        'recipients': json['recipients'] == null ? null : json['recipients'],
        'retentionPeriod': json['retention_period'],
        'securityMeasures': json['security_measures'] == null ? null : json['security_measures'],
        'subjectCategories': json['subject_categories'] == null ? null : json['subject_categories'],
        'transfers': (json['transfers'] == null ? null : (json['transfers'] as Array<any>).map(DataTransferFromJSON)),
    };
}

export function ProcessingRecordToJSON(json: any): ProcessingRecord {
    return ProcessingRecordToJSONTyped(json, false);
}

export function ProcessingRecordToJSONTyped(value?: ProcessingRecord | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'data_categories': value['dataCategories'],
        'dpia_completed': value['dpiaCompleted'],
        'dpia_required': value['dpiaRequired'],
        'legal_basis': value['legalBasis'],
        'purpose': value['purpose'],
        'recipients': value['recipients'],
        'retention_period': value['retentionPeriod'],
        'security_measures': value['securityMeasures'],
        'subject_categories': value['subjectCategories'],
        'transfers': (value['transfers'] == null ? null : (value['transfers'] as Array<any>).map(DataTransferToJSON)),
    };
}

