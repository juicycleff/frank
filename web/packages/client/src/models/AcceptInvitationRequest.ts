/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface AcceptInvitationRequest
 */
export interface AcceptInvitationRequest {
    [key: string]: any | any;
    /**
     * A URL to the JSON Schema for this object.
     * @type {string}
     * @memberof AcceptInvitationRequest
     */
    readonly $schema?: string;
    /**
     * Accept terms and conditions
     * @type {boolean}
     * @memberof AcceptInvitationRequest
     */
    acceptTerms: boolean;
    /**
     * First name (if empty in invitation)
     * @type {string}
     * @memberof AcceptInvitationRequest
     */
    firstName?: string;
    /**
     * Last name (if empty in invitation)
     * @type {string}
     * @memberof AcceptInvitationRequest
     */
    lastName?: string;
    /**
     * Password for new user
     * @type {string}
     * @memberof AcceptInvitationRequest
     */
    password?: string;
    /**
     * Invitation token
     * @type {string}
     * @memberof AcceptInvitationRequest
     */
    token: string;
}

/**
 * Check if a given object implements the AcceptInvitationRequest interface.
 */
export function instanceOfAcceptInvitationRequest(value: object): value is AcceptInvitationRequest {
    if (!('acceptTerms' in value) || value['acceptTerms'] === undefined) return false;
    if (!('token' in value) || value['token'] === undefined) return false;
    return true;
}

export function AcceptInvitationRequestFromJSON(json: any): AcceptInvitationRequest {
    return AcceptInvitationRequestFromJSONTyped(json, false);
}

export function AcceptInvitationRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): AcceptInvitationRequest {
    if (json == null) {
        return json;
    }
    return {
        
            ...json,
        '$schema': json['$schema'] == null ? undefined : json['$schema'],
        'acceptTerms': json['acceptTerms'],
        'firstName': json['firstName'] == null ? undefined : json['firstName'],
        'lastName': json['lastName'] == null ? undefined : json['lastName'],
        'password': json['password'] == null ? undefined : json['password'],
        'token': json['token'],
    };
}

export function AcceptInvitationRequestToJSON(json: any): AcceptInvitationRequest {
    return AcceptInvitationRequestToJSONTyped(json, false);
}

export function AcceptInvitationRequestToJSONTyped(value?: Omit<AcceptInvitationRequest, '$schema'> | null, ignoreDiscriminator = false): any {
    if (value == null) {
        return value;
    }

    return {
        
            ...value,
        'acceptTerms': value['acceptTerms'],
        'firstName': value['firstName'],
        'lastName': value['lastName'],
        'password': value['password'],
        'token': value['token'],
    };
}

