/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface IdentityProviderSummary
 */
export interface IdentityProviderSummary {
    /**
     * Creation timestamp
     * @type {Date}
     * @memberof IdentityProviderSummary
     */
    createdAt: Date;
    /**
     * Email domain
     * @type {string}
     * @memberof IdentityProviderSummary
     */
    domain?: string;
    /**
     * Whether provider is enabled
     * @type {boolean}
     * @memberof IdentityProviderSummary
     */
    enabled: boolean;
    /**
     * Provider ID
     * @type {string}
     * @memberof IdentityProviderSummary
     */
    id: string;
    /**
     * Last usage timestamp
     * @type {Date}
     * @memberof IdentityProviderSummary
     */
    lastUsed?: Date;
    /**
     * Provider name
     * @type {string}
     * @memberof IdentityProviderSummary
     */
    name: string;
    /**
     * Provider type
     * @type {string}
     * @memberof IdentityProviderSummary
     */
    type: string;
    /**
     * Number of users using this provider
     * @type {number}
     * @memberof IdentityProviderSummary
     */
    userCount: number;
}

/**
 * Check if a given object implements the IdentityProviderSummary interface.
 */
export function instanceOfIdentityProviderSummary(value: object): value is IdentityProviderSummary {
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('enabled' in value) || value['enabled'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('userCount' in value) || value['userCount'] === undefined) return false;
    return true;
}

export function IdentityProviderSummaryFromJSON(json: any): IdentityProviderSummary {
    return IdentityProviderSummaryFromJSONTyped(json, false);
}

export function IdentityProviderSummaryFromJSONTyped(json: any, ignoreDiscriminator: boolean): IdentityProviderSummary {
    if (json == null) {
        return json;
    }
    return {
        
        'createdAt': (new Date(json['createdAt'])),
        'domain': json['domain'] == null ? undefined : json['domain'],
        'enabled': json['enabled'],
        'id': json['id'],
        'lastUsed': json['lastUsed'] == null ? undefined : (new Date(json['lastUsed'])),
        'name': json['name'],
        'type': json['type'],
        'userCount': json['userCount'],
    };
}

export function IdentityProviderSummaryToJSON(json: any): IdentityProviderSummary {
    return IdentityProviderSummaryToJSONTyped(json, false);
}

export function IdentityProviderSummaryToJSONTyped(value?: IdentityProviderSummary | null, ignoreDiscriminator = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'createdAt': ((value['createdAt']).toISOString()),
        'domain': value['domain'],
        'enabled': value['enabled'],
        'id': value['id'],
        'lastUsed': value['lastUsed'] == null ? undefined : ((value['lastUsed']).toISOString()),
        'name': value['name'],
        'type': value['type'],
        'userCount': value['userCount'],
    };
}

