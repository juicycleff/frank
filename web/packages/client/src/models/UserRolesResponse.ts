/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Role } from './Role';
import {
    RoleFromJSON,
    RoleFromJSONTyped,
    RoleToJSON,
    RoleToJSONTyped,
} from './Role';
import type { Permission } from './Permission';
import {
    PermissionFromJSON,
    PermissionFromJSONTyped,
    PermissionToJSON,
    PermissionToJSONTyped,
} from './Permission';

/**
 * 
 * @export
 * @interface UserRolesResponse
 */
export interface UserRolesResponse {
    /**
     * A URL to the JSON Schema for this object.
     * @type {string}
     * @memberof UserRolesResponse
     */
    readonly $schema?: string;
    /**
     * 
     * @type {Array<Role>}
     * @memberof UserRolesResponse
     */
    applicationRoles?: Array<Role> | null;
    /**
     * 
     * @type {Array<Permission>}
     * @memberof UserRolesResponse
     */
    effectivePermissions?: Array<Permission> | null;
    /**
     * 
     * @type {Array<Role>}
     * @memberof UserRolesResponse
     */
    organizationRoles?: Array<Role> | null;
    /**
     * 
     * @type {Array<Role>}
     * @memberof UserRolesResponse
     */
    systemRoles?: Array<Role> | null;
    /**
     * 
     * @type {string}
     * @memberof UserRolesResponse
     */
    userId: string;
}

/**
 * Check if a given object implements the UserRolesResponse interface.
 */
export function instanceOfUserRolesResponse(value: object): value is UserRolesResponse {
    if (!('userId' in value) || value['userId'] === undefined) return false;
    return true;
}

export function UserRolesResponseFromJSON(json: any): UserRolesResponse {
    return UserRolesResponseFromJSONTyped(json, false);
}

export function UserRolesResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserRolesResponse {
    if (json == null) {
        return json;
    }
    return {
        
        '$schema': json['$schema'] == null ? undefined : json['$schema'],
        'applicationRoles': json['application_roles'] == null ? undefined : ((json['application_roles'] as Array<any>).map(RoleFromJSON)),
        'effectivePermissions': json['effective_permissions'] == null ? undefined : ((json['effective_permissions'] as Array<any>).map(PermissionFromJSON)),
        'organizationRoles': json['organization_roles'] == null ? undefined : ((json['organization_roles'] as Array<any>).map(RoleFromJSON)),
        'systemRoles': json['system_roles'] == null ? undefined : ((json['system_roles'] as Array<any>).map(RoleFromJSON)),
        'userId': json['user_id'],
    };
}

export function UserRolesResponseToJSON(json: any): UserRolesResponse {
    return UserRolesResponseToJSONTyped(json, false);
}

export function UserRolesResponseToJSONTyped(value?: Omit<UserRolesResponse, '$schema'> | null, ignoreDiscriminator = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'application_roles': value['applicationRoles'] == null ? undefined : ((value['applicationRoles'] as Array<any>).map(RoleToJSON)),
        'effective_permissions': value['effectivePermissions'] == null ? undefined : ((value['effectivePermissions'] as Array<any>).map(PermissionToJSON)),
        'organization_roles': value['organizationRoles'] == null ? undefined : ((value['organizationRoles'] as Array<any>).map(RoleToJSON)),
        'system_roles': value['systemRoles'] == null ? undefined : ((value['systemRoles'] as Array<any>).map(RoleToJSON)),
        'user_id': value['userId'],
    };
}

