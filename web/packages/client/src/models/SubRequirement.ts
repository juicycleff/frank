/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Evidence } from './Evidence';
import {
    EvidenceFromJSON,
    EvidenceFromJSONTyped,
    EvidenceToJSON,
    EvidenceToJSONTyped,
} from './Evidence';

/**
 * 
 * @export
 * @interface SubRequirement
 */
export interface SubRequirement {
    /**
     * 
     * @type {string}
     * @memberof SubRequirement
     */
    description: string;
    /**
     * 
     * @type {Array<Evidence>}
     * @memberof SubRequirement
     */
    evidence: Array<Evidence> | null;
    /**
     * 
     * @type {string}
     * @memberof SubRequirement
     */
    number: string;
    /**
     * 
     * @type {string}
     * @memberof SubRequirement
     */
    status: string;
}

/**
 * Check if a given object implements the SubRequirement interface.
 */
export function instanceOfSubRequirement(value: object): value is SubRequirement {
    if (!('description' in value) || value['description'] === undefined) return false;
    if (!('evidence' in value) || value['evidence'] === undefined) return false;
    if (!('number' in value) || value['number'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    return true;
}

export function SubRequirementFromJSON(json: any): SubRequirement {
    return SubRequirementFromJSONTyped(json, false);
}

export function SubRequirementFromJSONTyped(json: any, ignoreDiscriminator: boolean): SubRequirement {
    if (json == null) {
        return json;
    }
    return {
        
        'description': json['description'],
        'evidence': (json['evidence'] == null ? null : (json['evidence'] as Array<any>).map(EvidenceFromJSON)),
        'number': json['number'],
        'status': json['status'],
    };
}

export function SubRequirementToJSON(json: any): SubRequirement {
    return SubRequirementToJSONTyped(json, false);
}

export function SubRequirementToJSONTyped(value?: SubRequirement | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'description': value['description'],
        'evidence': (value['evidence'] == null ? null : (value['evidence'] as Array<any>).map(EvidenceToJSON)),
        'number': value['number'],
        'status': value['status'],
    };
}

