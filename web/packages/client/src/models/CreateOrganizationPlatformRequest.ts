/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { OrgType } from './OrgType';
import {
    OrgTypeFromJSON,
    OrgTypeFromJSONTyped,
    OrgTypeToJSON,
    OrgTypeToJSONTyped,
} from './OrgType';

/**
 * 
 * @export
 * @interface CreateOrganizationPlatformRequest
 */
export interface CreateOrganizationPlatformRequest {
    [key: string]: any | any;
    /**
     * A URL to the JSON Schema for this object.
     * @type {string}
     * @memberof CreateOrganizationPlatformRequest
     */
    readonly $schema?: string;
    /**
     * Auth service configuration
     * @type {object}
     * @memberof CreateOrganizationPlatformRequest
     */
    authConfig?: object;
    /**
     * Whether to create trial period
     * @type {boolean}
     * @memberof CreateOrganizationPlatformRequest
     */
    createTrialPeriod: boolean;
    /**
     * Primary domain
     * @type {string}
     * @memberof CreateOrganizationPlatformRequest
     */
    domain?: string;
    /**
     * Enable auth service
     * @type {boolean}
     * @memberof CreateOrganizationPlatformRequest
     */
    enableAuthService: boolean;
    /**
     * End user limit
     * @type {number}
     * @memberof CreateOrganizationPlatformRequest
     */
    endUserLimit: number;
    /**
     * External user limit
     * @type {number}
     * @memberof CreateOrganizationPlatformRequest
     */
    externalUserLimit: number;
    /**
     * Logo URL
     * @type {string}
     * @memberof CreateOrganizationPlatformRequest
     */
    logoUrl?: string;
    /**
     * Additional metadata
     * @type {object}
     * @memberof CreateOrganizationPlatformRequest
     */
    metadata?: object;
    /**
     * Organization name
     * @type {string}
     * @memberof CreateOrganizationPlatformRequest
     */
    name: string;
    /**
     * Organization type
     * @type {OrgType}
     * @memberof CreateOrganizationPlatformRequest
     */
    orgType: OrgType;
    /**
     * Owner email (will create user if not exists)
     * @type {string}
     * @memberof CreateOrganizationPlatformRequest
     */
    ownerEmail?: string;
    /**
     * Initial subscription plan
     * @type {string}
     * @memberof CreateOrganizationPlatformRequest
     */
    plan: string;
    /**
     * Unique slug (auto-generated if not provided)
     * @type {string}
     * @memberof CreateOrganizationPlatformRequest
     */
    slug?: string;
}



/**
 * Check if a given object implements the CreateOrganizationPlatformRequest interface.
 */
export function instanceOfCreateOrganizationPlatformRequest(value: object): value is CreateOrganizationPlatformRequest {
    if (!('createTrialPeriod' in value) || value['createTrialPeriod'] === undefined) return false;
    if (!('enableAuthService' in value) || value['enableAuthService'] === undefined) return false;
    if (!('endUserLimit' in value) || value['endUserLimit'] === undefined) return false;
    if (!('externalUserLimit' in value) || value['externalUserLimit'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('orgType' in value) || value['orgType'] === undefined) return false;
    if (!('plan' in value) || value['plan'] === undefined) return false;
    return true;
}

export function CreateOrganizationPlatformRequestFromJSON(json: any): CreateOrganizationPlatformRequest {
    return CreateOrganizationPlatformRequestFromJSONTyped(json, false);
}

export function CreateOrganizationPlatformRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateOrganizationPlatformRequest {
    if (json == null) {
        return json;
    }
    return {
        
            ...json,
        '$schema': json['$schema'] == null ? undefined : json['$schema'],
        'authConfig': json['authConfig'] == null ? undefined : json['authConfig'],
        'createTrialPeriod': json['createTrialPeriod'],
        'domain': json['domain'] == null ? undefined : json['domain'],
        'enableAuthService': json['enableAuthService'],
        'endUserLimit': json['endUserLimit'],
        'externalUserLimit': json['externalUserLimit'],
        'logoUrl': json['logoUrl'] == null ? undefined : json['logoUrl'],
        'metadata': json['metadata'] == null ? undefined : json['metadata'],
        'name': json['name'],
        'orgType': OrgTypeFromJSON(json['orgType']),
        'ownerEmail': json['ownerEmail'] == null ? undefined : json['ownerEmail'],
        'plan': json['plan'],
        'slug': json['slug'] == null ? undefined : json['slug'],
    };
}

export function CreateOrganizationPlatformRequestToJSON(json: any): CreateOrganizationPlatformRequest {
    return CreateOrganizationPlatformRequestToJSONTyped(json, false);
}

export function CreateOrganizationPlatformRequestToJSONTyped(value?: Omit<CreateOrganizationPlatformRequest, '$schema'> | null, ignoreDiscriminator = false): any {
    if (value == null) {
        return value;
    }

    return {
        
            ...value,
        'authConfig': value['authConfig'],
        'createTrialPeriod': value['createTrialPeriod'],
        'domain': value['domain'],
        'enableAuthService': value['enableAuthService'],
        'endUserLimit': value['endUserLimit'],
        'externalUserLimit': value['externalUserLimit'],
        'logoUrl': value['logoUrl'],
        'metadata': value['metadata'],
        'name': value['name'],
        'orgType': OrgTypeToJSON(value['orgType']),
        'ownerEmail': value['ownerEmail'],
        'plan': value['plan'],
        'slug': value['slug'],
    };
}

