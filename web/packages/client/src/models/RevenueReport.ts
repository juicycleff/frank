/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { RevenueForecast } from './RevenueForecast';
import {
    RevenueForecastFromJSON,
    RevenueForecastFromJSONTyped,
    RevenueForecastToJSON,
    RevenueForecastToJSONTyped,
} from './RevenueForecast';
import type { RevenueTrend } from './RevenueTrend';
import {
    RevenueTrendFromJSON,
    RevenueTrendFromJSONTyped,
    RevenueTrendToJSON,
    RevenueTrendToJSONTyped,
} from './RevenueTrend';
import type { RevenueBreakdown } from './RevenueBreakdown';
import {
    RevenueBreakdownFromJSON,
    RevenueBreakdownFromJSONTyped,
    RevenueBreakdownToJSON,
    RevenueBreakdownToJSONTyped,
} from './RevenueBreakdown';
import type { RevenueExport } from './RevenueExport';
import {
    RevenueExportFromJSON,
    RevenueExportFromJSONTyped,
    RevenueExportToJSON,
    RevenueExportToJSONTyped,
} from './RevenueExport';
import type { RevenueOverview } from './RevenueOverview';
import {
    RevenueOverviewFromJSON,
    RevenueOverviewFromJSONTyped,
    RevenueOverviewToJSON,
    RevenueOverviewToJSONTyped,
} from './RevenueOverview';

/**
 * 
 * @export
 * @interface RevenueReport
 */
export interface RevenueReport {
    /**
     * A URL to the JSON Schema for this object.
     * @type {string}
     * @memberof RevenueReport
     */
    readonly $schema?: string;
    /**
     * 
     * @type {RevenueBreakdown}
     * @memberof RevenueReport
     */
    breakdown: RevenueBreakdown;
    /**
     * 
     * @type {RevenueExport}
     * @memberof RevenueReport
     */
    _export?: RevenueExport;
    /**
     * 
     * @type {RevenueForecast}
     * @memberof RevenueReport
     */
    forecasting: RevenueForecast;
    /**
     * 
     * @type {string}
     * @memberof RevenueReport
     */
    format: string;
    /**
     * 
     * @type {Date}
     * @memberof RevenueReport
     */
    generatedAt: Date;
    /**
     * 
     * @type {RevenueOverview}
     * @memberof RevenueReport
     */
    overview: RevenueOverview;
    /**
     * 
     * @type {string}
     * @memberof RevenueReport
     */
    period: string;
    /**
     * 
     * @type {Array<RevenueTrend>}
     * @memberof RevenueReport
     */
    trends: Array<RevenueTrend> | null;
}

/**
 * Check if a given object implements the RevenueReport interface.
 */
export function instanceOfRevenueReport(value: object): value is RevenueReport {
    if (!('breakdown' in value) || value['breakdown'] === undefined) return false;
    if (!('forecasting' in value) || value['forecasting'] === undefined) return false;
    if (!('format' in value) || value['format'] === undefined) return false;
    if (!('generatedAt' in value) || value['generatedAt'] === undefined) return false;
    if (!('overview' in value) || value['overview'] === undefined) return false;
    if (!('period' in value) || value['period'] === undefined) return false;
    if (!('trends' in value) || value['trends'] === undefined) return false;
    return true;
}

export function RevenueReportFromJSON(json: any): RevenueReport {
    return RevenueReportFromJSONTyped(json, false);
}

export function RevenueReportFromJSONTyped(json: any, ignoreDiscriminator: boolean): RevenueReport {
    if (json == null) {
        return json;
    }
    return {
        
        '$schema': json['$schema'] == null ? undefined : json['$schema'],
        'breakdown': RevenueBreakdownFromJSON(json['breakdown']),
        '_export': json['export'] == null ? undefined : RevenueExportFromJSON(json['export']),
        'forecasting': RevenueForecastFromJSON(json['forecasting']),
        'format': json['format'],
        'generatedAt': (new Date(json['generated_at'])),
        'overview': RevenueOverviewFromJSON(json['overview']),
        'period': json['period'],
        'trends': (json['trends'] == null ? null : (json['trends'] as Array<any>).map(RevenueTrendFromJSON)),
    };
}

export function RevenueReportToJSON(json: any): RevenueReport {
    return RevenueReportToJSONTyped(json, false);
}

export function RevenueReportToJSONTyped(value?: Omit<RevenueReport, '$schema'> | null, ignoreDiscriminator = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'breakdown': RevenueBreakdownToJSON(value['breakdown']),
        'export': RevenueExportToJSON(value['_export']),
        'forecasting': RevenueForecastToJSON(value['forecasting']),
        'format': value['format'],
        'generated_at': ((value['generatedAt']).toISOString()),
        'overview': RevenueOverviewToJSON(value['overview']),
        'period': value['period'],
        'trends': (value['trends'] == null ? null : (value['trends'] as Array<any>).map(RevenueTrendToJSON)),
    };
}

