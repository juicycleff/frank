/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { VulnerabilityCount } from './VulnerabilityCount';
import {
    VulnerabilityCountFromJSON,
    VulnerabilityCountFromJSONTyped,
    VulnerabilityCountToJSON,
    VulnerabilityCountToJSONTyped,
} from './VulnerabilityCount';
import type { SecurityComplianceScore } from './SecurityComplianceScore';
import {
    SecurityComplianceScoreFromJSON,
    SecurityComplianceScoreFromJSONTyped,
    SecurityComplianceScoreToJSON,
    SecurityComplianceScoreToJSONTyped,
} from './SecurityComplianceScore';
import type { SecurityIncidentCount } from './SecurityIncidentCount';
import {
    SecurityIncidentCountFromJSON,
    SecurityIncidentCountFromJSONTyped,
    SecurityIncidentCountToJSON,
    SecurityIncidentCountToJSONTyped,
} from './SecurityIncidentCount';

/**
 * 
 * @export
 * @interface SecuritySummary
 */
export interface SecuritySummary {
    /**
     * 
     * @type {SecurityComplianceScore}
     * @memberof SecuritySummary
     */
    compliance: SecurityComplianceScore;
    /**
     * 
     * @type {SecurityIncidentCount}
     * @memberof SecuritySummary
     */
    incidents: SecurityIncidentCount;
    /**
     * 
     * @type {Date}
     * @memberof SecuritySummary
     */
    lastSecurityScan?: Date;
    /**
     * 
     * @type {number}
     * @memberof SecuritySummary
     */
    openRecommendations: number;
    /**
     * 
     * @type {number}
     * @memberof SecuritySummary
     */
    securityScore: number;
    /**
     * 
     * @type {VulnerabilityCount}
     * @memberof SecuritySummary
     */
    vulnerabilities: VulnerabilityCount;
}

/**
 * Check if a given object implements the SecuritySummary interface.
 */
export function instanceOfSecuritySummary(value: object): value is SecuritySummary {
    if (!('compliance' in value) || value['compliance'] === undefined) return false;
    if (!('incidents' in value) || value['incidents'] === undefined) return false;
    if (!('openRecommendations' in value) || value['openRecommendations'] === undefined) return false;
    if (!('securityScore' in value) || value['securityScore'] === undefined) return false;
    if (!('vulnerabilities' in value) || value['vulnerabilities'] === undefined) return false;
    return true;
}

export function SecuritySummaryFromJSON(json: any): SecuritySummary {
    return SecuritySummaryFromJSONTyped(json, false);
}

export function SecuritySummaryFromJSONTyped(json: any, ignoreDiscriminator: boolean): SecuritySummary {
    if (json == null) {
        return json;
    }
    return {
        
        'compliance': SecurityComplianceScoreFromJSON(json['compliance']),
        'incidents': SecurityIncidentCountFromJSON(json['incidents']),
        'lastSecurityScan': json['last_security_scan'] == null ? undefined : (new Date(json['last_security_scan'])),
        'openRecommendations': json['open_recommendations'],
        'securityScore': json['security_score'],
        'vulnerabilities': VulnerabilityCountFromJSON(json['vulnerabilities']),
    };
}

export function SecuritySummaryToJSON(json: any): SecuritySummary {
    return SecuritySummaryToJSONTyped(json, false);
}

export function SecuritySummaryToJSONTyped(value?: SecuritySummary | null, ignoreDiscriminator = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'compliance': SecurityComplianceScoreToJSON(value['compliance']),
        'incidents': SecurityIncidentCountToJSON(value['incidents']),
        'last_security_scan': value['lastSecurityScan'] == null ? undefined : ((value['lastSecurityScan']).toISOString()),
        'open_recommendations': value['openRecommendations'],
        'security_score': value['securityScore'],
        'vulnerabilities': VulnerabilityCountToJSON(value['vulnerabilities']),
    };
}

