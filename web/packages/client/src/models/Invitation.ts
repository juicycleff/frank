/* tslint:disable */
/* eslint-disable */
/**
 * My Project
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    OrganizationSummary,
    OrganizationSummaryFromJSON,
    OrganizationSummaryFromJSONTyped,
    OrganizationSummaryToJSON,
    RoleSummary,
    RoleSummaryFromJSON,
    RoleSummaryFromJSONTyped,
    RoleSummaryToJSON,
    UserSummary,
    UserSummaryFromJSON,
    UserSummaryFromJSONTyped,
    UserSummaryToJSON,
} from './';

/**
 * 
 * @export
 * @interface Invitation
 */
export interface Invitation {
    /**
     * A URL to the JSON Schema for this object.
     * @type {string}
     * @memberof Invitation
     */
    readonly $schema?: string;
    /**
     * When invitation was accepted
     * @type {Date}
     * @memberof Invitation
     */
    acceptedAt?: Date;
    /**
     * User who accepted the invitation
     * @type {string}
     * @memberof Invitation
     */
    acceptedBy?: string;
    /**
     * 
     * @type {Date}
     * @memberof Invitation
     */
    createdAt: Date;
    /**
     * Custom invitation fields
     * @type {{ [key: string]: string; }}
     * @memberof Invitation
     */
    customFields?: { [key: string]: string; };
    /**
     * When invitation was declined
     * @type {Date}
     * @memberof Invitation
     */
    declinedAt?: Date;
    /**
     * Invited user email address
     * @type {string}
     * @memberof Invitation
     */
    email: string;
    /**
     * Invitation expiration time
     * @type {Date}
     * @memberof Invitation
     */
    expiresAt: Date | null;
    /**
     * 
     * @type {string}
     * @memberof Invitation
     */
    id: string;
    /**
     * User who sent the invitation
     * @type {string}
     * @memberof Invitation
     */
    invitedBy?: string;
    /**
     * 
     * @type {UserSummary}
     * @memberof Invitation
     */
    inviter?: UserSummary;
    /**
     * When invitation was last sent
     * @type {Date}
     * @memberof Invitation
     */
    lastSentAt?: Date;
    /**
     * Personal message from inviter
     * @type {string}
     * @memberof Invitation
     */
    message?: string;
    /**
     * 
     * @type {OrganizationSummary}
     * @memberof Invitation
     */
    organization?: OrganizationSummary;
    /**
     * Organization ID
     * @type {string}
     * @memberof Invitation
     */
    organizationId: string;
    /**
     * URL to redirect to after acceptance
     * @type {string}
     * @memberof Invitation
     */
    redirectUrl?: string;
    /**
     * 
     * @type {RoleSummary}
     * @memberof Invitation
     */
    role?: RoleSummary;
    /**
     * Role ID to assign
     * @type {string}
     * @memberof Invitation
     */
    roleId: string;
    /**
     * Number of times invitation was sent
     * @type {number}
     * @memberof Invitation
     */
    sendCount: number;
    /**
     * Invitation status
     * @type {string}
     * @memberof Invitation
     */
    status: InvitationStatusEnum;
    /**
     * Invitation token
     * @type {string}
     * @memberof Invitation
     */
    token?: string;
    /**
     * 
     * @type {Date}
     * @memberof Invitation
     */
    updatedAt: Date;
}

export function InvitationFromJSON(json: any): Invitation {
    return InvitationFromJSONTyped(json, false);
}

export function InvitationFromJSONTyped(json: any, ignoreDiscriminator: boolean): Invitation {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        '$schema': !exists(json, '$schema') ? undefined : json['$schema'],
        'acceptedAt': !exists(json, 'acceptedAt') ? undefined : (new Date(json['acceptedAt'])),
        'acceptedBy': !exists(json, 'acceptedBy') ? undefined : json['acceptedBy'],
        'createdAt': (new Date(json['createdAt'])),
        'customFields': !exists(json, 'customFields') ? undefined : json['customFields'],
        'declinedAt': !exists(json, 'declinedAt') ? undefined : (new Date(json['declinedAt'])),
        'email': json['email'],
        'expiresAt': (json['expiresAt'] === null ? null : new Date(json['expiresAt'])),
        'id': json['id'],
        'invitedBy': !exists(json, 'invitedBy') ? undefined : json['invitedBy'],
        'inviter': !exists(json, 'inviter') ? undefined : UserSummaryFromJSON(json['inviter']),
        'lastSentAt': !exists(json, 'lastSentAt') ? undefined : (new Date(json['lastSentAt'])),
        'message': !exists(json, 'message') ? undefined : json['message'],
        'organization': !exists(json, 'organization') ? undefined : OrganizationSummaryFromJSON(json['organization']),
        'organizationId': json['organizationId'],
        'redirectUrl': !exists(json, 'redirectUrl') ? undefined : json['redirectUrl'],
        'role': !exists(json, 'role') ? undefined : RoleSummaryFromJSON(json['role']),
        'roleId': json['roleId'],
        'sendCount': json['sendCount'],
        'status': json['status'],
        'token': !exists(json, 'token') ? undefined : json['token'],
        'updatedAt': (new Date(json['updatedAt'])),
    };
}

export function InvitationToJSON(value?: Invitation | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'acceptedAt': value.acceptedAt === undefined ? undefined : (value.acceptedAt.toISOString()),
        'acceptedBy': value.acceptedBy,
        'createdAt': (value.createdAt.toISOString()),
        'customFields': value.customFields,
        'declinedAt': value.declinedAt === undefined ? undefined : (value.declinedAt.toISOString()),
        'email': value.email,
        'expiresAt': (value.expiresAt === null ? null : value.expiresAt.toISOString()),
        'id': value.id,
        'invitedBy': value.invitedBy,
        'inviter': UserSummaryToJSON(value.inviter),
        'lastSentAt': value.lastSentAt === undefined ? undefined : (value.lastSentAt.toISOString()),
        'message': value.message,
        'organization': OrganizationSummaryToJSON(value.organization),
        'organizationId': value.organizationId,
        'redirectUrl': value.redirectUrl,
        'role': RoleSummaryToJSON(value.role),
        'roleId': value.roleId,
        'sendCount': value.sendCount,
        'status': value.status,
        'token': value.token,
        'updatedAt': (value.updatedAt.toISOString()),
    };
}

/**
* @export
* @enum {string}
*/
export enum InvitationStatusEnum {
    Pending = 'pending',
    Accepted = 'accepted',
    Declined = 'declined',
    Expired = 'expired',
    Cancelled = 'cancelled'
}


