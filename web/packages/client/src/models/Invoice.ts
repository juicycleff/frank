/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { LineItem } from './LineItem';
import {
    LineItemFromJSON,
    LineItemFromJSONTyped,
    LineItemToJSON,
    LineItemToJSONTyped,
} from './LineItem';

/**
 * 
 * @export
 * @interface Invoice
 */
export interface Invoice {
    [key: string]: any | any;
    /**
     * Invoice amount in cents
     * @type {number}
     * @memberof Invoice
     */
    amount: number;
    /**
     * Amount paid in cents
     * @type {number}
     * @memberof Invoice
     */
    amountPaid: number;
    /**
     * Amount remaining in cents
     * @type {number}
     * @memberof Invoice
     */
    amountRemaining: number;
    /**
     * Invoice creation time
     * @type {Date}
     * @memberof Invoice
     */
    createdAt: Date;
    /**
     * Currency code
     * @type {string}
     * @memberof Invoice
     */
    currency: string;
    /**
     * Invoice description
     * @type {string}
     * @memberof Invoice
     */
    description?: string;
    /**
     * Discount amount in cents
     * @type {number}
     * @memberof Invoice
     */
    discountAmount: number;
    /**
     * Invoice download URL
     * @type {string}
     * @memberof Invoice
     */
    downloadUrl?: string;
    /**
     * Invoice due date
     * @type {Date}
     * @memberof Invoice
     */
    dueDate: Date;
    /**
     * Invoice ID
     * @type {string}
     * @memberof Invoice
     */
    id: string;
    /**
     * Invoice line items
     * @type {Array<LineItem>}
     * @memberof Invoice
     */
    lineItems: Array<LineItem>;
    /**
     * Additional invoice metadata
     * @type {object}
     * @memberof Invoice
     */
    metadata?: object;
    /**
     * Invoice number
     * @type {string}
     * @memberof Invoice
     */
    number: string;
    /**
     * Organization ID
     * @type {string}
     * @memberof Invoice
     */
    organizationId: string;
    /**
     * Payment timestamp
     * @type {Date}
     * @memberof Invoice
     */
    paidAt?: Date;
    /**
     * Payment method used
     * @type {string}
     * @memberof Invoice
     */
    paymentMethodId?: string;
    /**
     * Billing period end
     * @type {Date}
     * @memberof Invoice
     */
    periodEnd: Date;
    /**
     * Billing period start
     * @type {Date}
     * @memberof Invoice
     */
    periodStart: Date;
    /**
     * Invoice status
     * @type {string}
     * @memberof Invoice
     */
    status: InvoiceStatusEnum;
    /**
     * Subtotal before tax in cents
     * @type {number}
     * @memberof Invoice
     */
    subtotal: number;
    /**
     * Tax amount in cents
     * @type {number}
     * @memberof Invoice
     */
    taxAmount: number;
    /**
     * Tax rate percentage
     * @type {number}
     * @memberof Invoice
     */
    taxRate: number;
}


/**
 * @export
 */
export const InvoiceStatusEnum = {
    Draft: 'draft',
    Open: 'open',
    Paid: 'paid',
    Void: 'void',
    Uncollectible: 'uncollectible'
} as const;
export type InvoiceStatusEnum = typeof InvoiceStatusEnum[keyof typeof InvoiceStatusEnum];


/**
 * Check if a given object implements the Invoice interface.
 */
export function instanceOfInvoice(value: object): value is Invoice {
    if (!('amount' in value) || value['amount'] === undefined) return false;
    if (!('amountPaid' in value) || value['amountPaid'] === undefined) return false;
    if (!('amountRemaining' in value) || value['amountRemaining'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('currency' in value) || value['currency'] === undefined) return false;
    if (!('discountAmount' in value) || value['discountAmount'] === undefined) return false;
    if (!('dueDate' in value) || value['dueDate'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('lineItems' in value) || value['lineItems'] === undefined) return false;
    if (!('number' in value) || value['number'] === undefined) return false;
    if (!('organizationId' in value) || value['organizationId'] === undefined) return false;
    if (!('periodEnd' in value) || value['periodEnd'] === undefined) return false;
    if (!('periodStart' in value) || value['periodStart'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('subtotal' in value) || value['subtotal'] === undefined) return false;
    if (!('taxAmount' in value) || value['taxAmount'] === undefined) return false;
    if (!('taxRate' in value) || value['taxRate'] === undefined) return false;
    return true;
}

export function InvoiceFromJSON(json: any): Invoice {
    return InvoiceFromJSONTyped(json, false);
}

export function InvoiceFromJSONTyped(json: any, ignoreDiscriminator: boolean): Invoice {
    if (json == null) {
        return json;
    }
    return {
        
            ...json,
        'amount': json['amount'],
        'amountPaid': json['amountPaid'],
        'amountRemaining': json['amountRemaining'],
        'createdAt': (new Date(json['createdAt'])),
        'currency': json['currency'],
        'description': json['description'] == null ? undefined : json['description'],
        'discountAmount': json['discountAmount'],
        'downloadUrl': json['downloadUrl'] == null ? undefined : json['downloadUrl'],
        'dueDate': (new Date(json['dueDate'])),
        'id': json['id'],
        'lineItems': ((json['lineItems'] as Array<any>).map(LineItemFromJSON)),
        'metadata': json['metadata'] == null ? undefined : json['metadata'],
        'number': json['number'],
        'organizationId': json['organizationId'],
        'paidAt': json['paidAt'] == null ? undefined : (new Date(json['paidAt'])),
        'paymentMethodId': json['paymentMethodId'] == null ? undefined : json['paymentMethodId'],
        'periodEnd': (new Date(json['periodEnd'])),
        'periodStart': (new Date(json['periodStart'])),
        'status': json['status'],
        'subtotal': json['subtotal'],
        'taxAmount': json['taxAmount'],
        'taxRate': json['taxRate'],
    };
}

export function InvoiceToJSON(json: any): Invoice {
    return InvoiceToJSONTyped(json, false);
}

export function InvoiceToJSONTyped(value?: Invoice | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
            ...value,
        'amount': value['amount'],
        'amountPaid': value['amountPaid'],
        'amountRemaining': value['amountRemaining'],
        'createdAt': ((value['createdAt']).toISOString()),
        'currency': value['currency'],
        'description': value['description'],
        'discountAmount': value['discountAmount'],
        'downloadUrl': value['downloadUrl'],
        'dueDate': ((value['dueDate']).toISOString()),
        'id': value['id'],
        'lineItems': ((value['lineItems'] as Array<any>).map(LineItemToJSON)),
        'metadata': value['metadata'],
        'number': value['number'],
        'organizationId': value['organizationId'],
        'paidAt': value['paidAt'] == null ? undefined : ((value['paidAt']).toISOString()),
        'paymentMethodId': value['paymentMethodId'],
        'periodEnd': ((value['periodEnd']).toISOString()),
        'periodStart': ((value['periodStart']).toISOString()),
        'status': value['status'],
        'subtotal': value['subtotal'],
        'taxAmount': value['taxAmount'],
        'taxRate': value['taxRate'],
    };
}

