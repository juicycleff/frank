/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Evidence } from './Evidence';
import {
    EvidenceFromJSON,
    EvidenceFromJSONTyped,
    EvidenceToJSON,
    EvidenceToJSONTyped,
} from './Evidence';

/**
 * 
 * @export
 * @interface ComplianceViolation
 */
export interface ComplianceViolation {
    /**
     * 
     * @type {string}
     * @memberof ComplianceViolation
     */
    complianceType: string;
    /**
     * 
     * @type {string}
     * @memberof ComplianceViolation
     */
    description: string;
    /**
     * 
     * @type {Date}
     * @memberof ComplianceViolation
     */
    detectedAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof ComplianceViolation
     */
    dueDate?: Date;
    /**
     * 
     * @type {Array<Evidence>}
     * @memberof ComplianceViolation
     */
    evidence: Array<Evidence> | null;
    /**
     * 
     * @type {string}
     * @memberof ComplianceViolation
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof ComplianceViolation
     */
    impact: string;
    /**
     * 
     * @type {string}
     * @memberof ComplianceViolation
     */
    organizationId: string;
    /**
     * 
     * @type {string}
     * @memberof ComplianceViolation
     */
    owner: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ComplianceViolation
     */
    relatedEvents: Array<string> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof ComplianceViolation
     */
    remediationSteps: Array<string> | null;
    /**
     * 
     * @type {string}
     * @memberof ComplianceViolation
     */
    requirementRef: string;
    /**
     * 
     * @type {Date}
     * @memberof ComplianceViolation
     */
    resolvedAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof ComplianceViolation
     */
    rootCause: string;
    /**
     * 
     * @type {string}
     * @memberof ComplianceViolation
     */
    severity: string;
    /**
     * 
     * @type {string}
     * @memberof ComplianceViolation
     */
    status: string;
    /**
     * 
     * @type {string}
     * @memberof ComplianceViolation
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof ComplianceViolation
     */
    violationType: string;
}

/**
 * Check if a given object implements the ComplianceViolation interface.
 */
export function instanceOfComplianceViolation(value: object): value is ComplianceViolation {
    if (!('complianceType' in value) || value['complianceType'] === undefined) return false;
    if (!('description' in value) || value['description'] === undefined) return false;
    if (!('detectedAt' in value) || value['detectedAt'] === undefined) return false;
    if (!('evidence' in value) || value['evidence'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('impact' in value) || value['impact'] === undefined) return false;
    if (!('organizationId' in value) || value['organizationId'] === undefined) return false;
    if (!('owner' in value) || value['owner'] === undefined) return false;
    if (!('relatedEvents' in value) || value['relatedEvents'] === undefined) return false;
    if (!('remediationSteps' in value) || value['remediationSteps'] === undefined) return false;
    if (!('requirementRef' in value) || value['requirementRef'] === undefined) return false;
    if (!('rootCause' in value) || value['rootCause'] === undefined) return false;
    if (!('severity' in value) || value['severity'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('title' in value) || value['title'] === undefined) return false;
    if (!('violationType' in value) || value['violationType'] === undefined) return false;
    return true;
}

export function ComplianceViolationFromJSON(json: any): ComplianceViolation {
    return ComplianceViolationFromJSONTyped(json, false);
}

export function ComplianceViolationFromJSONTyped(json: any, ignoreDiscriminator: boolean): ComplianceViolation {
    if (json == null) {
        return json;
    }
    return {
        
        'complianceType': json['compliance_type'],
        'description': json['description'],
        'detectedAt': (new Date(json['detected_at'])),
        'dueDate': json['due_date'] == null ? undefined : (new Date(json['due_date'])),
        'evidence': (json['evidence'] == null ? null : (json['evidence'] as Array<any>).map(EvidenceFromJSON)),
        'id': json['id'],
        'impact': json['impact'],
        'organizationId': json['organization_id'],
        'owner': json['owner'],
        'relatedEvents': json['related_events'] == null ? null : json['related_events'],
        'remediationSteps': json['remediation_steps'] == null ? null : json['remediation_steps'],
        'requirementRef': json['requirement_ref'],
        'resolvedAt': json['resolved_at'] == null ? undefined : (new Date(json['resolved_at'])),
        'rootCause': json['root_cause'],
        'severity': json['severity'],
        'status': json['status'],
        'title': json['title'],
        'violationType': json['violation_type'],
    };
}

export function ComplianceViolationToJSON(json: any): ComplianceViolation {
    return ComplianceViolationToJSONTyped(json, false);
}

export function ComplianceViolationToJSONTyped(value?: ComplianceViolation | null, ignoreDiscriminator = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'compliance_type': value['complianceType'],
        'description': value['description'],
        'detected_at': ((value['detectedAt']).toISOString()),
        'due_date': value['dueDate'] == null ? undefined : ((value['dueDate']).toISOString()),
        'evidence': (value['evidence'] == null ? null : (value['evidence'] as Array<any>).map(EvidenceToJSON)),
        'id': value['id'],
        'impact': value['impact'],
        'organization_id': value['organizationId'],
        'owner': value['owner'],
        'related_events': value['relatedEvents'],
        'remediation_steps': value['remediationSteps'],
        'requirement_ref': value['requirementRef'],
        'resolved_at': value['resolvedAt'] == null ? undefined : ((value['resolvedAt']).toISOString()),
        'root_cause': value['rootCause'],
        'severity': value['severity'],
        'status': value['status'],
        'title': value['title'],
        'violation_type': value['violationType'],
    };
}

