/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { UsageTrends } from './UsageTrends';
import {
    UsageTrendsFromJSON,
    UsageTrendsFromJSONTyped,
    UsageTrendsToJSON,
    UsageTrendsToJSONTyped,
} from './UsageTrends';
import type { APIUsageAnalytics } from './APIUsageAnalytics';
import {
    APIUsageAnalyticsFromJSON,
    APIUsageAnalyticsFromJSONTyped,
    APIUsageAnalyticsToJSON,
    APIUsageAnalyticsToJSONTyped,
} from './APIUsageAnalytics';
import type { AuthUsageAnalytics } from './AuthUsageAnalytics';
import {
    AuthUsageAnalyticsFromJSON,
    AuthUsageAnalyticsFromJSONTyped,
    AuthUsageAnalyticsToJSON,
    AuthUsageAnalyticsToJSONTyped,
} from './AuthUsageAnalytics';
import type { FeatureUsage } from './FeatureUsage';
import {
    FeatureUsageFromJSON,
    FeatureUsageFromJSONTyped,
    FeatureUsageToJSON,
    FeatureUsageToJSONTyped,
} from './FeatureUsage';

/**
 * 
 * @export
 * @interface UsageAnalytics
 */
export interface UsageAnalytics {
    /**
     * A URL to the JSON Schema for this object.
     * @type {string}
     * @memberof UsageAnalytics
     */
    readonly $schema?: string;
    /**
     * 
     * @type {APIUsageAnalytics}
     * @memberof UsageAnalytics
     */
    api: APIUsageAnalytics;
    /**
     * 
     * @type {AuthUsageAnalytics}
     * @memberof UsageAnalytics
     */
    auth: AuthUsageAnalytics;
    /**
     * 
     * @type {Array<FeatureUsage>}
     * @memberof UsageAnalytics
     */
    features: Array<FeatureUsage> | null;
    /**
     * 
     * @type {Date}
     * @memberof UsageAnalytics
     */
    generatedAt: Date;
    /**
     * 
     * @type {string}
     * @memberof UsageAnalytics
     */
    period: string;
    /**
     * 
     * @type {UsageTrends}
     * @memberof UsageAnalytics
     */
    trends: UsageTrends;
}

/**
 * Check if a given object implements the UsageAnalytics interface.
 */
export function instanceOfUsageAnalytics(value: object): value is UsageAnalytics {
    if (!('api' in value) || value['api'] === undefined) return false;
    if (!('auth' in value) || value['auth'] === undefined) return false;
    if (!('features' in value) || value['features'] === undefined) return false;
    if (!('generatedAt' in value) || value['generatedAt'] === undefined) return false;
    if (!('period' in value) || value['period'] === undefined) return false;
    if (!('trends' in value) || value['trends'] === undefined) return false;
    return true;
}

export function UsageAnalyticsFromJSON(json: any): UsageAnalytics {
    return UsageAnalyticsFromJSONTyped(json, false);
}

export function UsageAnalyticsFromJSONTyped(json: any, ignoreDiscriminator: boolean): UsageAnalytics {
    if (json == null) {
        return json;
    }
    return {
        
        '$schema': json['$schema'] == null ? undefined : json['$schema'],
        'api': APIUsageAnalyticsFromJSON(json['api']),
        'auth': AuthUsageAnalyticsFromJSON(json['auth']),
        'features': (json['features'] == null ? null : (json['features'] as Array<any>).map(FeatureUsageFromJSON)),
        'generatedAt': (new Date(json['generated_at'])),
        'period': json['period'],
        'trends': UsageTrendsFromJSON(json['trends']),
    };
}

export function UsageAnalyticsToJSON(json: any): UsageAnalytics {
    return UsageAnalyticsToJSONTyped(json, false);
}

export function UsageAnalyticsToJSONTyped(value?: Omit<UsageAnalytics, '$schema'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'api': APIUsageAnalyticsToJSON(value['api']),
        'auth': AuthUsageAnalyticsToJSON(value['auth']),
        'features': (value['features'] == null ? null : (value['features'] as Array<any>).map(FeatureUsageToJSON)),
        'generated_at': ((value['generatedAt']).toISOString()),
        'period': value['period'],
        'trends': UsageTrendsToJSON(value['trends']),
    };
}

