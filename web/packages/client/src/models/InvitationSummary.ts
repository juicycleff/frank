/* tslint:disable */
/* eslint-disable */
/**
 * My Project
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface InvitationSummary
 */
export interface InvitationSummary {
    /**
     * Acceptance timestamp
     * @type {Date}
     * @memberof InvitationSummary
     */
    acceptedAt?: Date;
    /**
     * Creation timestamp
     * @type {Date}
     * @memberof InvitationSummary
     */
    createdAt: Date;
    /**
     * Days until expiration
     * @type {number}
     * @memberof InvitationSummary
     */
    daysUntilExpiry: number;
    /**
     * Invited email
     * @type {string}
     * @memberof InvitationSummary
     */
    email: string;
    /**
     * Expiration timestamp
     * @type {Date}
     * @memberof InvitationSummary
     */
    expiresAt: Date | null;
    /**
     * Invitation ID
     * @type {string}
     * @memberof InvitationSummary
     */
    id: string;
    /**
     * Inviter user ID
     * @type {string}
     * @memberof InvitationSummary
     */
    invitedBy?: string;
    /**
     * Inviter email
     * @type {string}
     * @memberof InvitationSummary
     */
    inviterEmail?: string;
    /**
     * Inviter full name
     * @type {string}
     * @memberof InvitationSummary
     */
    inviterName?: string;
    /**
     * Whether invitation has expired
     * @type {boolean}
     * @memberof InvitationSummary
     */
    isExpired: boolean;
    /**
     * Organization ID
     * @type {string}
     * @memberof InvitationSummary
     */
    organizationId: string;
    /**
     * Role ID
     * @type {string}
     * @memberof InvitationSummary
     */
    roleId: string;
    /**
     * Role name
     * @type {string}
     * @memberof InvitationSummary
     */
    roleName: string;
    /**
     * Invitation status
     * @type {string}
     * @memberof InvitationSummary
     */
    status: InvitationSummaryStatusEnum;
}

export function InvitationSummaryFromJSON(json: any): InvitationSummary {
    return InvitationSummaryFromJSONTyped(json, false);
}

export function InvitationSummaryFromJSONTyped(json: any, ignoreDiscriminator: boolean): InvitationSummary {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'acceptedAt': !exists(json, 'acceptedAt') ? undefined : (new Date(json['acceptedAt'])),
        'createdAt': (new Date(json['createdAt'])),
        'daysUntilExpiry': json['daysUntilExpiry'],
        'email': json['email'],
        'expiresAt': (json['expiresAt'] === null ? null : new Date(json['expiresAt'])),
        'id': json['id'],
        'invitedBy': !exists(json, 'invitedBy') ? undefined : json['invitedBy'],
        'inviterEmail': !exists(json, 'inviterEmail') ? undefined : json['inviterEmail'],
        'inviterName': !exists(json, 'inviterName') ? undefined : json['inviterName'],
        'isExpired': json['isExpired'],
        'organizationId': json['organizationId'],
        'roleId': json['roleId'],
        'roleName': json['roleName'],
        'status': json['status'],
    };
}

export function InvitationSummaryToJSON(value?: InvitationSummary | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'acceptedAt': value.acceptedAt === undefined ? undefined : (value.acceptedAt.toISOString()),
        'createdAt': (value.createdAt.toISOString()),
        'daysUntilExpiry': value.daysUntilExpiry,
        'email': value.email,
        'expiresAt': (value.expiresAt === null ? null : value.expiresAt.toISOString()),
        'id': value.id,
        'invitedBy': value.invitedBy,
        'inviterEmail': value.inviterEmail,
        'inviterName': value.inviterName,
        'isExpired': value.isExpired,
        'organizationId': value.organizationId,
        'roleId': value.roleId,
        'roleName': value.roleName,
        'status': value.status,
    };
}

/**
* @export
* @enum {string}
*/
export enum InvitationSummaryStatusEnum {
    Pending = 'pending',
    Accepted = 'accepted',
    Declined = 'declined',
    Expired = 'expired',
    Cancelled = 'cancelled'
}


