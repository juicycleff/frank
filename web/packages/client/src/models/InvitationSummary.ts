/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface InvitationSummary
 */
export interface InvitationSummary {
    [key: string]: any | any;
    /**
     * Acceptance timestamp
     * @type {Date}
     * @memberof InvitationSummary
     */
    acceptedAt?: Date;
    /**
     * Creation timestamp
     * @type {Date}
     * @memberof InvitationSummary
     */
    createdAt: Date;
    /**
     * Days until expiration
     * @type {number}
     * @memberof InvitationSummary
     */
    daysUntilExpiry: number;
    /**
     * Invited email
     * @type {string}
     * @memberof InvitationSummary
     */
    email: string;
    /**
     * Expiration timestamp
     * @type {Date}
     * @memberof InvitationSummary
     */
    expiresAt: Date;
    /**
     * Invitation ID
     * @type {string}
     * @memberof InvitationSummary
     */
    id: string;
    /**
     * Inviter user ID
     * @type {string}
     * @memberof InvitationSummary
     */
    invitedBy?: string;
    /**
     * Inviter email
     * @type {string}
     * @memberof InvitationSummary
     */
    inviterEmail?: string;
    /**
     * Inviter full name
     * @type {string}
     * @memberof InvitationSummary
     */
    inviterName?: string;
    /**
     * Whether invitation has expired
     * @type {boolean}
     * @memberof InvitationSummary
     */
    isExpired: boolean;
    /**
     * Organization ID
     * @type {string}
     * @memberof InvitationSummary
     */
    organizationId: string;
    /**
     * Role ID
     * @type {string}
     * @memberof InvitationSummary
     */
    roleId: string;
    /**
     * Role name
     * @type {string}
     * @memberof InvitationSummary
     */
    roleName: string;
    /**
     * Invitation status
     * @type {string}
     * @memberof InvitationSummary
     */
    status: InvitationSummaryStatusEnum;
}


/**
 * @export
 */
export const InvitationSummaryStatusEnum = {
    Pending: 'pending',
    Accepted: 'accepted',
    Declined: 'declined',
    Expired: 'expired',
    Cancelled: 'cancelled'
} as const;
export type InvitationSummaryStatusEnum = typeof InvitationSummaryStatusEnum[keyof typeof InvitationSummaryStatusEnum];


/**
 * Check if a given object implements the InvitationSummary interface.
 */
export function instanceOfInvitationSummary(value: object): value is InvitationSummary {
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('daysUntilExpiry' in value) || value['daysUntilExpiry'] === undefined) return false;
    if (!('email' in value) || value['email'] === undefined) return false;
    if (!('expiresAt' in value) || value['expiresAt'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('isExpired' in value) || value['isExpired'] === undefined) return false;
    if (!('organizationId' in value) || value['organizationId'] === undefined) return false;
    if (!('roleId' in value) || value['roleId'] === undefined) return false;
    if (!('roleName' in value) || value['roleName'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    return true;
}

export function InvitationSummaryFromJSON(json: any): InvitationSummary {
    return InvitationSummaryFromJSONTyped(json, false);
}

export function InvitationSummaryFromJSONTyped(json: any, ignoreDiscriminator: boolean): InvitationSummary {
    if (json == null) {
        return json;
    }
    return {
        
            ...json,
        'acceptedAt': json['acceptedAt'] == null ? undefined : (new Date(json['acceptedAt'])),
        'createdAt': (new Date(json['createdAt'])),
        'daysUntilExpiry': json['daysUntilExpiry'],
        'email': json['email'],
        'expiresAt': (new Date(json['expiresAt'])),
        'id': json['id'],
        'invitedBy': json['invitedBy'] == null ? undefined : json['invitedBy'],
        'inviterEmail': json['inviterEmail'] == null ? undefined : json['inviterEmail'],
        'inviterName': json['inviterName'] == null ? undefined : json['inviterName'],
        'isExpired': json['isExpired'],
        'organizationId': json['organizationId'],
        'roleId': json['roleId'],
        'roleName': json['roleName'],
        'status': json['status'],
    };
}

export function InvitationSummaryToJSON(json: any): InvitationSummary {
    return InvitationSummaryToJSONTyped(json, false);
}

export function InvitationSummaryToJSONTyped(value?: InvitationSummary | null, ignoreDiscriminator = false): any {
    if (value == null) {
        return value;
    }

    return {
        
            ...value,
        'acceptedAt': value['acceptedAt'] == null ? undefined : ((value['acceptedAt']).toISOString()),
        'createdAt': ((value['createdAt']).toISOString()),
        'daysUntilExpiry': value['daysUntilExpiry'],
        'email': value['email'],
        'expiresAt': ((value['expiresAt']).toISOString()),
        'id': value['id'],
        'invitedBy': value['invitedBy'],
        'inviterEmail': value['inviterEmail'],
        'inviterName': value['inviterName'],
        'isExpired': value['isExpired'],
        'organizationId': value['organizationId'],
        'roleId': value['roleId'],
        'roleName': value['roleName'],
        'status': value['status'],
    };
}

