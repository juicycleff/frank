/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface LineItem
 */
export interface LineItem {
    [key: string]: any | any;
    /**
     * Total amount in cents
     * @type {number}
     * @memberof LineItem
     */
    amount: number;
    /**
     * Currency code
     * @type {string}
     * @memberof LineItem
     */
    currency: string;
    /**
     * Line item description
     * @type {string}
     * @memberof LineItem
     */
    description: string;
    /**
     * Line item ID
     * @type {string}
     * @memberof LineItem
     */
    id: string;
    /**
     * Additional line item metadata
     * @type {object}
     * @memberof LineItem
     */
    metadata?: object;
    /**
     * Service period end
     * @type {Date}
     * @memberof LineItem
     */
    periodEnd?: Date;
    /**
     * Service period start
     * @type {Date}
     * @memberof LineItem
     */
    periodStart?: Date;
    /**
     * Quantity
     * @type {number}
     * @memberof LineItem
     */
    quantity: number;
    /**
     * Line item type
     * @type {string}
     * @memberof LineItem
     */
    type: LineItemTypeEnum;
    /**
     * Unit amount in cents
     * @type {number}
     * @memberof LineItem
     */
    unitAmount: number;
}


/**
 * @export
 */
export const LineItemTypeEnum = {
    Subscription: 'subscription',
    Usage: 'usage',
    Tax: 'tax',
    Discount: 'discount'
} as const;
export type LineItemTypeEnum = typeof LineItemTypeEnum[keyof typeof LineItemTypeEnum];


/**
 * Check if a given object implements the LineItem interface.
 */
export function instanceOfLineItem(value: object): value is LineItem {
    if (!('amount' in value) || value['amount'] === undefined) return false;
    if (!('currency' in value) || value['currency'] === undefined) return false;
    if (!('description' in value) || value['description'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('quantity' in value) || value['quantity'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('unitAmount' in value) || value['unitAmount'] === undefined) return false;
    return true;
}

export function LineItemFromJSON(json: any): LineItem {
    return LineItemFromJSONTyped(json, false);
}

export function LineItemFromJSONTyped(json: any, ignoreDiscriminator: boolean): LineItem {
    if (json == null) {
        return json;
    }
    return {
        
            ...json,
        'amount': json['amount'],
        'currency': json['currency'],
        'description': json['description'],
        'id': json['id'],
        'metadata': json['metadata'] == null ? undefined : json['metadata'],
        'periodEnd': json['periodEnd'] == null ? undefined : (new Date(json['periodEnd'])),
        'periodStart': json['periodStart'] == null ? undefined : (new Date(json['periodStart'])),
        'quantity': json['quantity'],
        'type': json['type'],
        'unitAmount': json['unitAmount'],
    };
}

export function LineItemToJSON(json: any): LineItem {
    return LineItemToJSONTyped(json, false);
}

export function LineItemToJSONTyped(value?: LineItem | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
            ...value,
        'amount': value['amount'],
        'currency': value['currency'],
        'description': value['description'],
        'id': value['id'],
        'metadata': value['metadata'],
        'periodEnd': value['periodEnd'] == null ? undefined : ((value['periodEnd']).toISOString()),
        'periodStart': value['periodStart'] == null ? undefined : ((value['periodStart']).toISOString()),
        'quantity': value['quantity'],
        'type': value['type'],
        'unitAmount': value['unitAmount'],
    };
}

