/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { OAuthScope } from './OAuthScope';
import {
    OAuthScopeFromJSON,
    OAuthScopeFromJSONTyped,
    OAuthScopeToJSON,
    OAuthScopeToJSONTyped,
} from './OAuthScope';
import type { OrganizationSummary } from './OrganizationSummary';
import {
    OrganizationSummaryFromJSON,
    OrganizationSummaryFromJSONTyped,
    OrganizationSummaryToJSON,
    OrganizationSummaryToJSONTyped,
} from './OrganizationSummary';
import type { OAuthClientStats } from './OAuthClientStats';
import {
    OAuthClientStatsFromJSON,
    OAuthClientStatsFromJSONTyped,
    OAuthClientStatsToJSON,
    OAuthClientStatsToJSONTyped,
} from './OAuthClientStats';

/**
 * 
 * @export
 * @interface OAuthClient
 */
export interface OAuthClient {
    /**
     * A URL to the JSON Schema for this object.
     * @type {string}
     * @memberof OAuthClient
     */
    readonly $schema?: string;
    /**
     * Whether client is active
     * @type {boolean}
     * @memberof OAuthClient
     */
    active: boolean;
    /**
     * Allowed CORS origins
     * @type {Array<string>}
     * @memberof OAuthClient
     */
    allowedCorsOrigins?: Array<string> | null;
    /**
     * Allowed grant types
     * @type {Array<string>}
     * @memberof OAuthClient
     */
    allowedGrantTypes: Array<string> | null;
    /**
     * Authorization code expiry in seconds
     * @type {number}
     * @memberof OAuthClient
     */
    authCodeExpirySeconds: number;
    /**
     * Client description
     * @type {string}
     * @memberof OAuthClient
     */
    clientDescription?: string;
    /**
     * OAuth client ID
     * @type {string}
     * @memberof OAuthClient
     */
    clientId: string;
    /**
     * Client application name
     * @type {string}
     * @memberof OAuthClient
     */
    clientName: string;
    /**
     * OAuth client secret (write-only)
     * @type {string}
     * @memberof OAuthClient
     */
    clientSecret?: string;
    /**
     * Client website URL
     * @type {string}
     * @memberof OAuthClient
     */
    clientUri?: string;
    /**
     * 
     * @type {Date}
     * @memberof OAuthClient
     */
    createdAt: Date;
    /**
     * 
     * @type {string}
     * @memberof OAuthClient
     */
    createdBy: string;
    /**
     * 
     * @type {string}
     * @memberof OAuthClient
     */
    id: string;
    /**
     * Client logo URL
     * @type {string}
     * @memberof OAuthClient
     */
    logoUri?: string;
    /**
     * Organization information
     * @type {OrganizationSummary}
     * @memberof OAuthClient
     */
    organization?: OrganizationSummary;
    /**
     * Organization ID
     * @type {string}
     * @memberof OAuthClient
     */
    organizationId?: string;
    /**
     * Post-logout redirect URIs
     * @type {Array<string>}
     * @memberof OAuthClient
     */
    postLogoutRedirectUris?: Array<string> | null;
    /**
     * Whether client is public (no secret)
     * @type {boolean}
     * @memberof OAuthClient
     */
    _public: boolean;
    /**
     * Allowed redirect URIs
     * @type {Array<string>}
     * @memberof OAuthClient
     */
    redirectUris: Array<string> | null;
    /**
     * Refresh token expiry in seconds
     * @type {number}
     * @memberof OAuthClient
     */
    refreshTokenExpirySeconds: number;
    /**
     * Whether user consent is required
     * @type {boolean}
     * @memberof OAuthClient
     */
    requiresConsent: boolean;
    /**
     * Whether PKCE is required
     * @type {boolean}
     * @memberof OAuthClient
     */
    requiresPkce: boolean;
    /**
     * Available scopes for this client
     * @type {Array<OAuthScope>}
     * @memberof OAuthClient
     */
    scopes?: Array<OAuthScope> | null;
    /**
     * Client usage statistics
     * @type {OAuthClientStats}
     * @memberof OAuthClient
     */
    stats?: OAuthClientStats;
    /**
     * Access token expiry in seconds
     * @type {number}
     * @memberof OAuthClient
     */
    tokenExpirySeconds: number;
    /**
     * 
     * @type {Date}
     * @memberof OAuthClient
     */
    updatedAt: Date;
    /**
     * 
     * @type {string}
     * @memberof OAuthClient
     */
    updatedBy: string;
}

/**
 * Check if a given object implements the OAuthClient interface.
 */
export function instanceOfOAuthClient(value: object): value is OAuthClient {
    if (!('active' in value) || value['active'] === undefined) return false;
    if (!('allowedGrantTypes' in value) || value['allowedGrantTypes'] === undefined) return false;
    if (!('authCodeExpirySeconds' in value) || value['authCodeExpirySeconds'] === undefined) return false;
    if (!('clientId' in value) || value['clientId'] === undefined) return false;
    if (!('clientName' in value) || value['clientName'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('createdBy' in value) || value['createdBy'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('_public' in value) || value['_public'] === undefined) return false;
    if (!('redirectUris' in value) || value['redirectUris'] === undefined) return false;
    if (!('refreshTokenExpirySeconds' in value) || value['refreshTokenExpirySeconds'] === undefined) return false;
    if (!('requiresConsent' in value) || value['requiresConsent'] === undefined) return false;
    if (!('requiresPkce' in value) || value['requiresPkce'] === undefined) return false;
    if (!('tokenExpirySeconds' in value) || value['tokenExpirySeconds'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    if (!('updatedBy' in value) || value['updatedBy'] === undefined) return false;
    return true;
}

export function OAuthClientFromJSON(json: any): OAuthClient {
    return OAuthClientFromJSONTyped(json, false);
}

export function OAuthClientFromJSONTyped(json: any, ignoreDiscriminator: boolean): OAuthClient {
    if (json == null) {
        return json;
    }
    return {
        
        '$schema': json['$schema'] == null ? undefined : json['$schema'],
        'active': json['active'],
        'allowedCorsOrigins': json['allowedCorsOrigins'] == null ? undefined : json['allowedCorsOrigins'],
        'allowedGrantTypes': json['allowedGrantTypes'] == null ? null : json['allowedGrantTypes'],
        'authCodeExpirySeconds': json['authCodeExpirySeconds'],
        'clientDescription': json['clientDescription'] == null ? undefined : json['clientDescription'],
        'clientId': json['clientId'],
        'clientName': json['clientName'],
        'clientSecret': json['clientSecret'] == null ? undefined : json['clientSecret'],
        'clientUri': json['clientUri'] == null ? undefined : json['clientUri'],
        'createdAt': (new Date(json['createdAt'])),
        'createdBy': json['createdBy'],
        'id': json['id'],
        'logoUri': json['logoUri'] == null ? undefined : json['logoUri'],
        'organization': json['organization'] == null ? undefined : OrganizationSummaryFromJSON(json['organization']),
        'organizationId': json['organizationId'] == null ? undefined : json['organizationId'],
        'postLogoutRedirectUris': json['postLogoutRedirectUris'] == null ? undefined : json['postLogoutRedirectUris'],
        '_public': json['public'],
        'redirectUris': json['redirectUris'] == null ? null : json['redirectUris'],
        'refreshTokenExpirySeconds': json['refreshTokenExpirySeconds'],
        'requiresConsent': json['requiresConsent'],
        'requiresPkce': json['requiresPkce'],
        'scopes': json['scopes'] == null ? undefined : ((json['scopes'] as Array<any>).map(OAuthScopeFromJSON)),
        'stats': json['stats'] == null ? undefined : OAuthClientStatsFromJSON(json['stats']),
        'tokenExpirySeconds': json['tokenExpirySeconds'],
        'updatedAt': (new Date(json['updatedAt'])),
        'updatedBy': json['updatedBy'],
    };
}

export function OAuthClientToJSON(json: any): OAuthClient {
    return OAuthClientToJSONTyped(json, false);
}

export function OAuthClientToJSONTyped(value?: Omit<OAuthClient, '$schema'> | null, ignoreDiscriminator = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'active': value['active'],
        'allowedCorsOrigins': value['allowedCorsOrigins'],
        'allowedGrantTypes': value['allowedGrantTypes'],
        'authCodeExpirySeconds': value['authCodeExpirySeconds'],
        'clientDescription': value['clientDescription'],
        'clientId': value['clientId'],
        'clientName': value['clientName'],
        'clientSecret': value['clientSecret'],
        'clientUri': value['clientUri'],
        'createdAt': ((value['createdAt']).toISOString()),
        'createdBy': value['createdBy'],
        'id': value['id'],
        'logoUri': value['logoUri'],
        'organization': OrganizationSummaryToJSON(value['organization']),
        'organizationId': value['organizationId'],
        'postLogoutRedirectUris': value['postLogoutRedirectUris'],
        'public': value['_public'],
        'redirectUris': value['redirectUris'],
        'refreshTokenExpirySeconds': value['refreshTokenExpirySeconds'],
        'requiresConsent': value['requiresConsent'],
        'requiresPkce': value['requiresPkce'],
        'scopes': value['scopes'] == null ? undefined : ((value['scopes'] as Array<any>).map(OAuthScopeToJSON)),
        'stats': OAuthClientStatsToJSON(value['stats']),
        'tokenExpirySeconds': value['tokenExpirySeconds'],
        'updatedAt': ((value['updatedAt']).toISOString()),
        'updatedBy': value['updatedBy'],
    };
}

