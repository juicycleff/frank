/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { RolePermission } from './RolePermission';
import {
    RolePermissionFromJSON,
    RolePermissionFromJSONTyped,
    RolePermissionToJSON,
    RolePermissionToJSONTyped,
} from './RolePermission';
import type { PermissionAssignment } from './PermissionAssignment';
import {
    PermissionAssignmentFromJSON,
    PermissionAssignmentFromJSONTyped,
    PermissionAssignmentToJSON,
    PermissionAssignmentToJSONTyped,
} from './PermissionAssignment';

/**
 * 
 * @export
 * @interface UserPermissionsResponse
 */
export interface UserPermissionsResponse {
    /**
     * A URL to the JSON Schema for this object.
     * @type {string}
     * @memberof UserPermissionsResponse
     */
    readonly $schema?: string;
    /**
     * Explicitly denied permissions
     * @type {Array<string>}
     * @memberof UserPermissionsResponse
     */
    deniedPermissions: Array<string> | null;
    /**
     * Direct permission assignments
     * @type {Array<PermissionAssignment>}
     * @memberof UserPermissionsResponse
     */
    directPermissions: Array<PermissionAssignment> | null;
    /**
     * Effective permissions list
     * @type {Array<string>}
     * @memberof UserPermissionsResponse
     */
    effectivePermissions: Array<string> | null;
    /**
     * Permissions from roles
     * @type {Array<RolePermission>}
     * @memberof UserPermissionsResponse
     */
    rolePermissions: Array<RolePermission> | null;
    /**
     * User ID
     * @type {string}
     * @memberof UserPermissionsResponse
     */
    userId: string;
}

/**
 * Check if a given object implements the UserPermissionsResponse interface.
 */
export function instanceOfUserPermissionsResponse(value: object): value is UserPermissionsResponse {
    if (!('deniedPermissions' in value) || value['deniedPermissions'] === undefined) return false;
    if (!('directPermissions' in value) || value['directPermissions'] === undefined) return false;
    if (!('effectivePermissions' in value) || value['effectivePermissions'] === undefined) return false;
    if (!('rolePermissions' in value) || value['rolePermissions'] === undefined) return false;
    if (!('userId' in value) || value['userId'] === undefined) return false;
    return true;
}

export function UserPermissionsResponseFromJSON(json: any): UserPermissionsResponse {
    return UserPermissionsResponseFromJSONTyped(json, false);
}

export function UserPermissionsResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserPermissionsResponse {
    if (json == null) {
        return json;
    }
    return {
        
        '$schema': json['$schema'] == null ? undefined : json['$schema'],
        'deniedPermissions': json['deniedPermissions'] == null ? null : json['deniedPermissions'],
        'directPermissions': (json['directPermissions'] == null ? null : (json['directPermissions'] as Array<any>).map(PermissionAssignmentFromJSON)),
        'effectivePermissions': json['effectivePermissions'] == null ? null : json['effectivePermissions'],
        'rolePermissions': (json['rolePermissions'] == null ? null : (json['rolePermissions'] as Array<any>).map(RolePermissionFromJSON)),
        'userId': json['userId'],
    };
}

export function UserPermissionsResponseToJSON(json: any): UserPermissionsResponse {
    return UserPermissionsResponseToJSONTyped(json, false);
}

export function UserPermissionsResponseToJSONTyped(value?: Omit<UserPermissionsResponse, '$schema'> | null, ignoreDiscriminator = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'deniedPermissions': value['deniedPermissions'],
        'directPermissions': (value['directPermissions'] == null ? null : (value['directPermissions'] as Array<any>).map(PermissionAssignmentToJSON)),
        'effectivePermissions': value['effectivePermissions'],
        'rolePermissions': (value['rolePermissions'] == null ? null : (value['rolePermissions'] as Array<any>).map(RolePermissionToJSON)),
        'userId': value['userId'],
    };
}

