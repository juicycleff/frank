/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { BillingPaymentHealth } from './BillingPaymentHealth';
import {
    BillingPaymentHealthFromJSON,
    BillingPaymentHealthFromJSONTyped,
    BillingPaymentHealthToJSON,
    BillingPaymentHealthToJSONTyped,
} from './BillingPaymentHealth';
import type { BillingUsage } from './BillingUsage';
import {
    BillingUsageFromJSON,
    BillingUsageFromJSONTyped,
    BillingUsageToJSON,
    BillingUsageToJSONTyped,
} from './BillingUsage';
import type { BillingForecast } from './BillingForecast';
import {
    BillingForecastFromJSON,
    BillingForecastFromJSONTyped,
    BillingForecastToJSON,
    BillingForecastToJSONTyped,
} from './BillingForecast';
import type { BillingSubscriptions } from './BillingSubscriptions';
import {
    BillingSubscriptionsFromJSON,
    BillingSubscriptionsFromJSONTyped,
    BillingSubscriptionsToJSON,
    BillingSubscriptionsToJSONTyped,
} from './BillingSubscriptions';
import type { BillingRevenue } from './BillingRevenue';
import {
    BillingRevenueFromJSON,
    BillingRevenueFromJSONTyped,
    BillingRevenueToJSON,
    BillingRevenueToJSONTyped,
} from './BillingRevenue';

/**
 * 
 * @export
 * @interface BillingOverview
 */
export interface BillingOverview {
    /**
     * A URL to the JSON Schema for this object.
     * @type {string}
     * @memberof BillingOverview
     */
    readonly $schema?: string;
    /**
     * 
     * @type {BillingForecast}
     * @memberof BillingOverview
     */
    forecasting: BillingForecast;
    /**
     * 
     * @type {Date}
     * @memberof BillingOverview
     */
    generatedAt: Date;
    /**
     * 
     * @type {BillingPaymentHealth}
     * @memberof BillingOverview
     */
    paymentHealth: BillingPaymentHealth;
    /**
     * 
     * @type {string}
     * @memberof BillingOverview
     */
    period: string;
    /**
     * 
     * @type {BillingRevenue}
     * @memberof BillingOverview
     */
    revenue: BillingRevenue;
    /**
     * 
     * @type {BillingSubscriptions}
     * @memberof BillingOverview
     */
    subscriptions: BillingSubscriptions;
    /**
     * 
     * @type {BillingUsage}
     * @memberof BillingOverview
     */
    usage: BillingUsage;
}

/**
 * Check if a given object implements the BillingOverview interface.
 */
export function instanceOfBillingOverview(value: object): value is BillingOverview {
    if (!('forecasting' in value) || value['forecasting'] === undefined) return false;
    if (!('generatedAt' in value) || value['generatedAt'] === undefined) return false;
    if (!('paymentHealth' in value) || value['paymentHealth'] === undefined) return false;
    if (!('period' in value) || value['period'] === undefined) return false;
    if (!('revenue' in value) || value['revenue'] === undefined) return false;
    if (!('subscriptions' in value) || value['subscriptions'] === undefined) return false;
    if (!('usage' in value) || value['usage'] === undefined) return false;
    return true;
}

export function BillingOverviewFromJSON(json: any): BillingOverview {
    return BillingOverviewFromJSONTyped(json, false);
}

export function BillingOverviewFromJSONTyped(json: any, ignoreDiscriminator: boolean): BillingOverview {
    if (json == null) {
        return json;
    }
    return {
        
        '$schema': json['$schema'] == null ? undefined : json['$schema'],
        'forecasting': BillingForecastFromJSON(json['forecasting']),
        'generatedAt': (new Date(json['generated_at'])),
        'paymentHealth': BillingPaymentHealthFromJSON(json['payment_health']),
        'period': json['period'],
        'revenue': BillingRevenueFromJSON(json['revenue']),
        'subscriptions': BillingSubscriptionsFromJSON(json['subscriptions']),
        'usage': BillingUsageFromJSON(json['usage']),
    };
}

export function BillingOverviewToJSON(json: any): BillingOverview {
    return BillingOverviewToJSONTyped(json, false);
}

export function BillingOverviewToJSONTyped(value?: Omit<BillingOverview, '$schema'> | null, ignoreDiscriminator = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'forecasting': BillingForecastToJSON(value['forecasting']),
        'generated_at': ((value['generatedAt']).toISOString()),
        'payment_health': BillingPaymentHealthToJSON(value['paymentHealth']),
        'period': value['period'],
        'revenue': BillingRevenueToJSON(value['revenue']),
        'subscriptions': BillingSubscriptionsToJSON(value['subscriptions']),
        'usage': BillingUsageToJSON(value['usage']),
    };
}

