/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface AssignRoleRequest
 */
export interface AssignRoleRequest {
    [key: string]: any | any;
    /**
     * A URL to the JSON Schema for this object.
     * @type {string}
     * @memberof AssignRoleRequest
     */
    readonly $schema?: string;
    /**
     * Optional conditions for role
     * @type {object}
     * @memberof AssignRoleRequest
     */
    conditions?: object;
    /**
     * Context ID
     * @type {string}
     * @memberof AssignRoleRequest
     */
    contextId?: string;
    /**
     * Assignment context type
     * @type {string}
     * @memberof AssignRoleRequest
     */
    contextType: string;
    /**
     * When assignment expires
     * @type {Date}
     * @memberof AssignRoleRequest
     */
    expiresAt?: Date;
    /**
     * Role ID to assign
     * @type {string}
     * @memberof AssignRoleRequest
     */
    roleId: string;
}

/**
 * Check if a given object implements the AssignRoleRequest interface.
 */
export function instanceOfAssignRoleRequest(value: object): value is AssignRoleRequest {
    if (!('contextType' in value) || value['contextType'] === undefined) return false;
    if (!('roleId' in value) || value['roleId'] === undefined) return false;
    return true;
}

export function AssignRoleRequestFromJSON(json: any): AssignRoleRequest {
    return AssignRoleRequestFromJSONTyped(json, false);
}

export function AssignRoleRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): AssignRoleRequest {
    if (json == null) {
        return json;
    }
    return {
        
            ...json,
        '$schema': json['$schema'] == null ? undefined : json['$schema'],
        'conditions': json['conditions'] == null ? undefined : json['conditions'],
        'contextId': json['contextId'] == null ? undefined : json['contextId'],
        'contextType': json['contextType'],
        'expiresAt': json['expiresAt'] == null ? undefined : (new Date(json['expiresAt'])),
        'roleId': json['roleId'],
    };
}

export function AssignRoleRequestToJSON(json: any): AssignRoleRequest {
    return AssignRoleRequestToJSONTyped(json, false);
}

export function AssignRoleRequestToJSONTyped(value?: Omit<AssignRoleRequest, '$schema'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
            ...value,
        'conditions': value['conditions'],
        'contextId': value['contextId'],
        'contextType': value['contextType'],
        'expiresAt': value['expiresAt'] == null ? undefined : ((value['expiresAt']).toISOString()),
        'roleId': value['roleId'],
    };
}

