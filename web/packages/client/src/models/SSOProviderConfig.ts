/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface SSOProviderConfig
 */
export interface SSOProviderConfig {
    [key: string]: any | any;
    /**
     * Signature algorithm
     * @type {string}
     * @memberof SSOProviderConfig
     */
    algorithm?: string;
    /**
     * Token audience
     * @type {string}
     * @memberof SSOProviderConfig
     */
    audience?: string;
    /**
     * Authorization URL
     * @type {string}
     * @memberof SSOProviderConfig
     */
    authUrl?: string;
    /**
     * SAML certificate
     * @type {string}
     * @memberof SSOProviderConfig
     */
    certificate?: string;
    /**
     * OAuth client ID
     * @type {string}
     * @memberof SSOProviderConfig
     */
    clientId?: string;
    /**
     * OAuth client secret (write-only)
     * @type {string}
     * @memberof SSOProviderConfig
     */
    clientSecret?: string;
    /**
     * SAML entity ID
     * @type {string}
     * @memberof SSOProviderConfig
     */
    entityId?: string;
    /**
     * Token issuer
     * @type {string}
     * @memberof SSOProviderConfig
     */
    issuer?: string;
    /**
     * JWKS URL
     * @type {string}
     * @memberof SSOProviderConfig
     */
    jwksUrl?: string;
    /**
     * SAML NameID format
     * @type {string}
     * @memberof SSOProviderConfig
     */
    nameIdFormat?: string;
    /**
     * OAuth scopes
     * @type {Array<string>}
     * @memberof SSOProviderConfig
     */
    scopes?: Array<string>;
    /**
     * Whether a request was signed by an IdentityProvider
     * @type {boolean}
     * @memberof SSOProviderConfig
     */
    signRequests: boolean;
    /**
     * SAML signature algorithm
     * @type {string}
     * @memberof SSOProviderConfig
     */
    signatureAlgorithm?: string;
    /**
     * SAML SLO URL
     * @type {string}
     * @memberof SSOProviderConfig
     */
    sloUrl?: string;
    /**
     * SAML SSO URL
     * @type {string}
     * @memberof SSOProviderConfig
     */
    ssoUrl?: string;
    /**
     * Token URL
     * @type {string}
     * @memberof SSOProviderConfig
     */
    tokenUrl?: string;
    /**
     * User info URL
     * @type {string}
     * @memberof SSOProviderConfig
     */
    userInfoUrl?: string;
    /**
     * Whether the assertion was signed by an IdentityProvider
     * @type {boolean}
     * @memberof SSOProviderConfig
     */
    wantAssertionSigned: boolean;
}

/**
 * Check if a given object implements the SSOProviderConfig interface.
 */
export function instanceOfSSOProviderConfig(value: object): value is SSOProviderConfig {
    if (!('signRequests' in value) || value['signRequests'] === undefined) return false;
    if (!('wantAssertionSigned' in value) || value['wantAssertionSigned'] === undefined) return false;
    return true;
}

export function SSOProviderConfigFromJSON(json: any): SSOProviderConfig {
    return SSOProviderConfigFromJSONTyped(json, false);
}

export function SSOProviderConfigFromJSONTyped(json: any, ignoreDiscriminator: boolean): SSOProviderConfig {
    if (json == null) {
        return json;
    }
    return {
        
            ...json,
        'algorithm': json['algorithm'] == null ? undefined : json['algorithm'],
        'audience': json['audience'] == null ? undefined : json['audience'],
        'authUrl': json['authUrl'] == null ? undefined : json['authUrl'],
        'certificate': json['certificate'] == null ? undefined : json['certificate'],
        'clientId': json['clientId'] == null ? undefined : json['clientId'],
        'clientSecret': json['clientSecret'] == null ? undefined : json['clientSecret'],
        'entityId': json['entityId'] == null ? undefined : json['entityId'],
        'issuer': json['issuer'] == null ? undefined : json['issuer'],
        'jwksUrl': json['jwksUrl'] == null ? undefined : json['jwksUrl'],
        'nameIdFormat': json['nameIdFormat'] == null ? undefined : json['nameIdFormat'],
        'scopes': json['scopes'] == null ? undefined : json['scopes'],
        'signRequests': json['signRequests'],
        'signatureAlgorithm': json['signatureAlgorithm'] == null ? undefined : json['signatureAlgorithm'],
        'sloUrl': json['sloUrl'] == null ? undefined : json['sloUrl'],
        'ssoUrl': json['ssoUrl'] == null ? undefined : json['ssoUrl'],
        'tokenUrl': json['tokenUrl'] == null ? undefined : json['tokenUrl'],
        'userInfoUrl': json['userInfoUrl'] == null ? undefined : json['userInfoUrl'],
        'wantAssertionSigned': json['wantAssertionSigned'],
    };
}

export function SSOProviderConfigToJSON(json: any): SSOProviderConfig {
    return SSOProviderConfigToJSONTyped(json, false);
}

export function SSOProviderConfigToJSONTyped(value?: SSOProviderConfig | null, ignoreDiscriminator = false): any {
    if (value == null) {
        return value;
    }

    return {
        
            ...value,
        'algorithm': value['algorithm'],
        'audience': value['audience'],
        'authUrl': value['authUrl'],
        'certificate': value['certificate'],
        'clientId': value['clientId'],
        'clientSecret': value['clientSecret'],
        'entityId': value['entityId'],
        'issuer': value['issuer'],
        'jwksUrl': value['jwksUrl'],
        'nameIdFormat': value['nameIdFormat'],
        'scopes': value['scopes'],
        'signRequests': value['signRequests'],
        'signatureAlgorithm': value['signatureAlgorithm'],
        'sloUrl': value['sloUrl'],
        'ssoUrl': value['ssoUrl'],
        'tokenUrl': value['tokenUrl'],
        'userInfoUrl': value['userInfoUrl'],
        'wantAssertionSigned': value['wantAssertionSigned'],
    };
}

