/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface RBACStats
 */
export interface RBACStats {
    /**
     * A URL to the JSON Schema for this object.
     * @type {string}
     * @memberof RBACStats
     */
    readonly $schema?: string;
    /**
     * Application roles
     * @type {number}
     * @memberof RBACStats
     */
    applicationRoles: number;
    /**
     * Dangerous permissions
     * @type {number}
     * @memberof RBACStats
     */
    dangerousPermissions: number;
    /**
     * Direct permission assignments
     * @type {number}
     * @memberof RBACStats
     */
    directPermissionAssignments: number;
    /**
     * Organization roles
     * @type {number}
     * @memberof RBACStats
     */
    organizationRoles: number;
    /**
     * Permissions by category
     * @type {{ [key: string]: number; }}
     * @memberof RBACStats
     */
    permissionsByCategory: { [key: string]: number; };
    /**
     * Total role assignments
     * @type {number}
     * @memberof RBACStats
     */
    roleAssignments: number;
    /**
     * Roles by priority
     * @type {{ [key: string]: number; }}
     * @memberof RBACStats
     */
    rolesByPriority: { [key: string]: number; };
    /**
     * System permissions
     * @type {number}
     * @memberof RBACStats
     */
    systemPermissions: number;
    /**
     * System roles
     * @type {number}
     * @memberof RBACStats
     */
    systemRoles: number;
    /**
     * Total permissions
     * @type {number}
     * @memberof RBACStats
     */
    totalPermissions: number;
    /**
     * Total roles
     * @type {number}
     * @memberof RBACStats
     */
    totalRoles: number;
}

/**
 * Check if a given object implements the RBACStats interface.
 */
export function instanceOfRBACStats(value: object): value is RBACStats {
    if (!('applicationRoles' in value) || value['applicationRoles'] === undefined) return false;
    if (!('dangerousPermissions' in value) || value['dangerousPermissions'] === undefined) return false;
    if (!('directPermissionAssignments' in value) || value['directPermissionAssignments'] === undefined) return false;
    if (!('organizationRoles' in value) || value['organizationRoles'] === undefined) return false;
    if (!('permissionsByCategory' in value) || value['permissionsByCategory'] === undefined) return false;
    if (!('roleAssignments' in value) || value['roleAssignments'] === undefined) return false;
    if (!('rolesByPriority' in value) || value['rolesByPriority'] === undefined) return false;
    if (!('systemPermissions' in value) || value['systemPermissions'] === undefined) return false;
    if (!('systemRoles' in value) || value['systemRoles'] === undefined) return false;
    if (!('totalPermissions' in value) || value['totalPermissions'] === undefined) return false;
    if (!('totalRoles' in value) || value['totalRoles'] === undefined) return false;
    return true;
}

export function RBACStatsFromJSON(json: any): RBACStats {
    return RBACStatsFromJSONTyped(json, false);
}

export function RBACStatsFromJSONTyped(json: any, ignoreDiscriminator: boolean): RBACStats {
    if (json == null) {
        return json;
    }
    return {
        
        '$schema': json['$schema'] == null ? undefined : json['$schema'],
        'applicationRoles': json['applicationRoles'],
        'dangerousPermissions': json['dangerousPermissions'],
        'directPermissionAssignments': json['directPermissionAssignments'],
        'organizationRoles': json['organizationRoles'],
        'permissionsByCategory': json['permissionsByCategory'],
        'roleAssignments': json['roleAssignments'],
        'rolesByPriority': json['rolesByPriority'],
        'systemPermissions': json['systemPermissions'],
        'systemRoles': json['systemRoles'],
        'totalPermissions': json['totalPermissions'],
        'totalRoles': json['totalRoles'],
    };
}

export function RBACStatsToJSON(json: any): RBACStats {
    return RBACStatsToJSONTyped(json, false);
}

export function RBACStatsToJSONTyped(value?: Omit<RBACStats, '$schema'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'applicationRoles': value['applicationRoles'],
        'dangerousPermissions': value['dangerousPermissions'],
        'directPermissionAssignments': value['directPermissionAssignments'],
        'organizationRoles': value['organizationRoles'],
        'permissionsByCategory': value['permissionsByCategory'],
        'roleAssignments': value['roleAssignments'],
        'rolesByPriority': value['rolesByPriority'],
        'systemPermissions': value['systemPermissions'],
        'systemRoles': value['systemRoles'],
        'totalPermissions': value['totalPermissions'],
        'totalRoles': value['totalRoles'],
    };
}

