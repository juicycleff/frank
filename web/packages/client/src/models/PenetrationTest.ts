/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { PenTestFinding } from './PenTestFinding';
import {
    PenTestFindingFromJSON,
    PenTestFindingFromJSONTyped,
    PenTestFindingToJSON,
    PenTestFindingToJSONTyped,
} from './PenTestFinding';

/**
 * 
 * @export
 * @interface PenetrationTest
 */
export interface PenetrationTest {
    /**
     * 
     * @type {Date}
     * @memberof PenetrationTest
     */
    date: Date;
    /**
     * 
     * @type {Array<PenTestFinding>}
     * @memberof PenetrationTest
     */
    findings: Array<PenTestFinding> | null;
    /**
     * 
     * @type {string}
     * @memberof PenetrationTest
     */
    methodology: string;
    /**
     * 
     * @type {string}
     * @memberof PenetrationTest
     */
    scope: string;
    /**
     * 
     * @type {string}
     * @memberof PenetrationTest
     */
    status: string;
    /**
     * 
     * @type {string}
     * @memberof PenetrationTest
     */
    tester: string;
}

/**
 * Check if a given object implements the PenetrationTest interface.
 */
export function instanceOfPenetrationTest(value: object): value is PenetrationTest {
    if (!('date' in value) || value['date'] === undefined) return false;
    if (!('findings' in value) || value['findings'] === undefined) return false;
    if (!('methodology' in value) || value['methodology'] === undefined) return false;
    if (!('scope' in value) || value['scope'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('tester' in value) || value['tester'] === undefined) return false;
    return true;
}

export function PenetrationTestFromJSON(json: any): PenetrationTest {
    return PenetrationTestFromJSONTyped(json, false);
}

export function PenetrationTestFromJSONTyped(json: any, ignoreDiscriminator: boolean): PenetrationTest {
    if (json == null) {
        return json;
    }
    return {
        
        'date': (new Date(json['date'])),
        'findings': (json['findings'] == null ? null : (json['findings'] as Array<any>).map(PenTestFindingFromJSON)),
        'methodology': json['methodology'],
        'scope': json['scope'],
        'status': json['status'],
        'tester': json['tester'],
    };
}

export function PenetrationTestToJSON(json: any): PenetrationTest {
    return PenetrationTestToJSONTyped(json, false);
}

export function PenetrationTestToJSONTyped(value?: PenetrationTest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'date': ((value['date']).toISOString()),
        'findings': (value['findings'] == null ? null : (value['findings'] as Array<any>).map(PenTestFindingToJSON)),
        'methodology': value['methodology'],
        'scope': value['scope'],
        'status': value['status'],
        'tester': value['tester'],
    };
}

