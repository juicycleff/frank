/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface AuthProvider
 */
export interface AuthProvider {
    /**
     * Authentication URL
     * @type {string}
     * @memberof AuthProvider
     */
    authUrl?: string;
    /**
     * Provider display name
     * @type {string}
     * @memberof AuthProvider
     */
    displayName: string;
    /**
     * Whether provider is enabled
     * @type {boolean}
     * @memberof AuthProvider
     */
    enabled: boolean;
    /**
     * Provider icon URL
     * @type {string}
     * @memberof AuthProvider
     */
    iconUrl?: string;
    /**
     * Provider name
     * @type {string}
     * @memberof AuthProvider
     */
    name: string;
    /**
     * Provider type
     * @type {string}
     * @memberof AuthProvider
     */
    type: string;
}

/**
 * Check if a given object implements the AuthProvider interface.
 */
export function instanceOfAuthProvider(value: object): value is AuthProvider {
    if (!('displayName' in value) || value['displayName'] === undefined) return false;
    if (!('enabled' in value) || value['enabled'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    return true;
}

export function AuthProviderFromJSON(json: any): AuthProvider {
    return AuthProviderFromJSONTyped(json, false);
}

export function AuthProviderFromJSONTyped(json: any, ignoreDiscriminator: boolean): AuthProvider {
    if (json == null) {
        return json;
    }
    return {
        
        'authUrl': json['authUrl'] == null ? undefined : json['authUrl'],
        'displayName': json['displayName'],
        'enabled': json['enabled'],
        'iconUrl': json['iconUrl'] == null ? undefined : json['iconUrl'],
        'name': json['name'],
        'type': json['type'],
    };
}

export function AuthProviderToJSON(json: any): AuthProvider {
    return AuthProviderToJSONTyped(json, false);
}

export function AuthProviderToJSONTyped(value?: AuthProvider | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'authUrl': value['authUrl'],
        'displayName': value['displayName'],
        'enabled': value['enabled'],
        'iconUrl': value['iconUrl'],
        'name': value['name'],
        'type': value['type'],
    };
}

