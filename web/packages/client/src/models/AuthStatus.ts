/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { User } from './User';
import {
    UserFromJSON,
    UserFromJSONTyped,
    UserToJSON,
    UserToJSONTyped,
} from './User';
import type { RoleInfo } from './RoleInfo';
import {
    RoleInfoFromJSON,
    RoleInfoFromJSONTyped,
    RoleInfoToJSON,
    RoleInfoToJSONTyped,
} from './RoleInfo';
import type { Session } from './Session';
import {
    SessionFromJSON,
    SessionFromJSONTyped,
    SessionToJSON,
    SessionToJSONTyped,
} from './Session';

/**
 * 
 * @export
 * @interface AuthStatus
 */
export interface AuthStatus {
    [key: string]: any | any;
    /**
     * A URL to the JSON Schema for this object.
     * @type {string}
     * @memberof AuthStatus
     */
    readonly $schema?: string;
    /**
     * Authentication expiration time
     * @type {Date}
     * @memberof AuthStatus
     */
    expiresAt?: Date;
    /**
     * Whether user is authenticated
     * @type {boolean}
     * @memberof AuthStatus
     */
    isAuthenticated: boolean;
    /**
     * User permissions
     * @type {Array<string>}
     * @memberof AuthStatus
     */
    permissions?: Array<string>;
    /**
     * User roles
     * @type {Array<RoleInfo>}
     * @memberof AuthStatus
     */
    roles?: Array<RoleInfo>;
    /**
     * Current session information
     * @type {Session}
     * @memberof AuthStatus
     */
    session?: Session;
    /**
     * Current user information
     * @type {User}
     * @memberof AuthStatus
     */
    user?: User;
}

/**
 * Check if a given object implements the AuthStatus interface.
 */
export function instanceOfAuthStatus(value: object): value is AuthStatus {
    if (!('isAuthenticated' in value) || value['isAuthenticated'] === undefined) return false;
    return true;
}

export function AuthStatusFromJSON(json: any): AuthStatus {
    return AuthStatusFromJSONTyped(json, false);
}

export function AuthStatusFromJSONTyped(json: any, ignoreDiscriminator: boolean): AuthStatus {
    if (json == null) {
        return json;
    }
    return {
        
            ...json,
        '$schema': json['$schema'] == null ? undefined : json['$schema'],
        'expiresAt': json['expiresAt'] == null ? undefined : (new Date(json['expiresAt'])),
        'isAuthenticated': json['isAuthenticated'],
        'permissions': json['permissions'] == null ? undefined : json['permissions'],
        'roles': json['roles'] == null ? undefined : ((json['roles'] as Array<any>).map(RoleInfoFromJSON)),
        'session': json['session'] == null ? undefined : SessionFromJSON(json['session']),
        'user': json['user'] == null ? undefined : UserFromJSON(json['user']),
    };
}

export function AuthStatusToJSON(json: any): AuthStatus {
    return AuthStatusToJSONTyped(json, false);
}

export function AuthStatusToJSONTyped(value?: Omit<AuthStatus, '$schema'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
            ...value,
        'expiresAt': value['expiresAt'] == null ? undefined : ((value['expiresAt']).toISOString()),
        'isAuthenticated': value['isAuthenticated'],
        'permissions': value['permissions'],
        'roles': value['roles'] == null ? undefined : ((value['roles'] as Array<any>).map(RoleInfoToJSON)),
        'session': SessionToJSON(value['session']),
        'user': UserToJSON(value['user']),
    };
}

