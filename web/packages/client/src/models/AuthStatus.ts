/* tslint:disable */
/* eslint-disable */
/**
 * My Project
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    RoleInfo,
    RoleInfoFromJSON,
    RoleInfoFromJSONTyped,
    RoleInfoToJSON,
    Session,
    SessionFromJSON,
    SessionFromJSONTyped,
    SessionToJSON,
    User,
    UserFromJSON,
    UserFromJSONTyped,
    UserToJSON,
} from './';

/**
 * 
 * @export
 * @interface AuthStatus
 */
export interface AuthStatus {
    /**
     * A URL to the JSON Schema for this object.
     * @type {string}
     * @memberof AuthStatus
     */
    readonly $schema?: string;
    /**
     * Authentication expiration time
     * @type {Date}
     * @memberof AuthStatus
     */
    expiresAt?: Date;
    /**
     * Whether user is authenticated
     * @type {boolean}
     * @memberof AuthStatus
     */
    isAuthenticated: boolean;
    /**
     * User permissions
     * @type {Array<string>}
     * @memberof AuthStatus
     */
    permissions?: Array<string> | null;
    /**
     * User roles
     * @type {Array<RoleInfo>}
     * @memberof AuthStatus
     */
    roles?: Array<RoleInfo> | null;
    /**
     * 
     * @type {Session}
     * @memberof AuthStatus
     */
    session?: Session;
    /**
     * 
     * @type {User}
     * @memberof AuthStatus
     */
    user?: User;
}

export function AuthStatusFromJSON(json: any): AuthStatus {
    return AuthStatusFromJSONTyped(json, false);
}

export function AuthStatusFromJSONTyped(json: any, ignoreDiscriminator: boolean): AuthStatus {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        '$schema': !exists(json, '$schema') ? undefined : json['$schema'],
        'expiresAt': !exists(json, 'expiresAt') ? undefined : (new Date(json['expiresAt'])),
        'isAuthenticated': json['isAuthenticated'],
        'permissions': !exists(json, 'permissions') ? undefined : json['permissions'],
        'roles': !exists(json, 'roles') ? undefined : (json['roles'] === null ? null : (json['roles'] as Array<any>).map(RoleInfoFromJSON)),
        'session': !exists(json, 'session') ? undefined : SessionFromJSON(json['session']),
        'user': !exists(json, 'user') ? undefined : UserFromJSON(json['user']),
    };
}

export function AuthStatusToJSON(value?: AuthStatus | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'expiresAt': value.expiresAt === undefined ? undefined : (value.expiresAt.toISOString()),
        'isAuthenticated': value.isAuthenticated,
        'permissions': value.permissions,
        'roles': value.roles === undefined ? undefined : (value.roles === null ? null : (value.roles as Array<any>).map(RoleInfoToJSON)),
        'session': SessionToJSON(value.session),
        'user': UserToJSON(value.user),
    };
}


