/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Evidence
 */
export interface Evidence {
    [key: string]: any | any;
    /**
     * 
     * @type {string}
     * @memberof Evidence
     */
    description: string;
    /**
     * 
     * @type {string}
     * @memberof Evidence
     */
    location: string;
    /**
     * 
     * @type {object}
     * @memberof Evidence
     */
    metadata: object;
    /**
     * 
     * @type {Date}
     * @memberof Evidence
     */
    timestamp: Date;
    /**
     * 
     * @type {string}
     * @memberof Evidence
     */
    type: string;
}

/**
 * Check if a given object implements the Evidence interface.
 */
export function instanceOfEvidence(value: object): value is Evidence {
    if (!('description' in value) || value['description'] === undefined) return false;
    if (!('location' in value) || value['location'] === undefined) return false;
    if (!('metadata' in value) || value['metadata'] === undefined) return false;
    if (!('timestamp' in value) || value['timestamp'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    return true;
}

export function EvidenceFromJSON(json: any): Evidence {
    return EvidenceFromJSONTyped(json, false);
}

export function EvidenceFromJSONTyped(json: any, ignoreDiscriminator: boolean): Evidence {
    if (json == null) {
        return json;
    }
    return {
        
            ...json,
        'description': json['description'],
        'location': json['location'],
        'metadata': json['metadata'],
        'timestamp': (new Date(json['timestamp'])),
        'type': json['type'],
    };
}

export function EvidenceToJSON(json: any): Evidence {
    return EvidenceToJSONTyped(json, false);
}

export function EvidenceToJSONTyped(value?: Evidence | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
            ...value,
        'description': value['description'],
        'location': value['location'],
        'metadata': value['metadata'],
        'timestamp': ((value['timestamp']).toISOString()),
        'type': value['type'],
    };
}

