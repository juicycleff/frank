/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface VulnerabilityScan
 */
export interface VulnerabilityScan {
    /**
     * 
     * @type {number}
     * @memberof VulnerabilityScan
     */
    critical: number;
    /**
     * 
     * @type {Date}
     * @memberof VulnerabilityScan
     */
    date: Date;
    /**
     * 
     * @type {number}
     * @memberof VulnerabilityScan
     */
    findings: number;
    /**
     * 
     * @type {number}
     * @memberof VulnerabilityScan
     */
    high: number;
    /**
     * 
     * @type {number}
     * @memberof VulnerabilityScan
     */
    low: number;
    /**
     * 
     * @type {number}
     * @memberof VulnerabilityScan
     */
    medium: number;
    /**
     * 
     * @type {string}
     * @memberof VulnerabilityScan
     */
    scanner: string;
    /**
     * 
     * @type {string}
     * @memberof VulnerabilityScan
     */
    scope: string;
    /**
     * 
     * @type {string}
     * @memberof VulnerabilityScan
     */
    status: string;
}

/**
 * Check if a given object implements the VulnerabilityScan interface.
 */
export function instanceOfVulnerabilityScan(value: object): value is VulnerabilityScan {
    if (!('critical' in value) || value['critical'] === undefined) return false;
    if (!('date' in value) || value['date'] === undefined) return false;
    if (!('findings' in value) || value['findings'] === undefined) return false;
    if (!('high' in value) || value['high'] === undefined) return false;
    if (!('low' in value) || value['low'] === undefined) return false;
    if (!('medium' in value) || value['medium'] === undefined) return false;
    if (!('scanner' in value) || value['scanner'] === undefined) return false;
    if (!('scope' in value) || value['scope'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    return true;
}

export function VulnerabilityScanFromJSON(json: any): VulnerabilityScan {
    return VulnerabilityScanFromJSONTyped(json, false);
}

export function VulnerabilityScanFromJSONTyped(json: any, ignoreDiscriminator: boolean): VulnerabilityScan {
    if (json == null) {
        return json;
    }
    return {
        
        'critical': json['critical'],
        'date': (new Date(json['date'])),
        'findings': json['findings'],
        'high': json['high'],
        'low': json['low'],
        'medium': json['medium'],
        'scanner': json['scanner'],
        'scope': json['scope'],
        'status': json['status'],
    };
}

export function VulnerabilityScanToJSON(json: any): VulnerabilityScan {
    return VulnerabilityScanToJSONTyped(json, false);
}

export function VulnerabilityScanToJSONTyped(value?: VulnerabilityScan | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'critical': value['critical'],
        'date': ((value['date']).toISOString()),
        'findings': value['findings'],
        'high': value['high'],
        'low': value['low'],
        'medium': value['medium'],
        'scanner': value['scanner'],
        'scope': value['scope'],
        'status': value['status'],
    };
}

