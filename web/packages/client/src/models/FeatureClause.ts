/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface FeatureClause
 */
export interface FeatureClause {
    /**
     * 
     * @type {string}
     * @memberof FeatureClause
     */
    attribute: string;
    /**
     * 
     * @type {boolean}
     * @memberof FeatureClause
     */
    negate?: boolean;
    /**
     * 
     * @type {string}
     * @memberof FeatureClause
     */
    op: string;
    /**
     * 
     * @type {Array<any>}
     * @memberof FeatureClause
     */
    values: Array<any> | null;
}

/**
 * Check if a given object implements the FeatureClause interface.
 */
export function instanceOfFeatureClause(value: object): value is FeatureClause {
    if (!('attribute' in value) || value['attribute'] === undefined) return false;
    if (!('op' in value) || value['op'] === undefined) return false;
    if (!('values' in value) || value['values'] === undefined) return false;
    return true;
}

export function FeatureClauseFromJSON(json: any): FeatureClause {
    return FeatureClauseFromJSONTyped(json, false);
}

export function FeatureClauseFromJSONTyped(json: any, ignoreDiscriminator: boolean): FeatureClause {
    if (json == null) {
        return json;
    }
    return {
        
        'attribute': json['attribute'],
        'negate': json['negate'] == null ? undefined : json['negate'],
        'op': json['op'],
        'values': json['values'] == null ? null : json['values'],
    };
}

export function FeatureClauseToJSON(json: any): FeatureClause {
    return FeatureClauseToJSONTyped(json, false);
}

export function FeatureClauseToJSONTyped(value?: FeatureClause | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'attribute': value['attribute'],
        'negate': value['negate'],
        'op': value['op'],
        'values': value['values'],
    };
}

