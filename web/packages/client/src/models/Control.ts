/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { TestResult } from './TestResult';
import {
    TestResultFromJSON,
    TestResultFromJSONTyped,
    TestResultToJSON,
    TestResultToJSONTyped,
} from './TestResult';

/**
 * 
 * @export
 * @interface Control
 */
export interface Control {
    /**
     * 
     * @type {string}
     * @memberof Control
     */
    category: string;
    /**
     * 
     * @type {string}
     * @memberof Control
     */
    description: string;
    /**
     * 
     * @type {string}
     * @memberof Control
     */
    effectivenessRating: string;
    /**
     * 
     * @type {string}
     * @memberof Control
     */
    frequency: string;
    /**
     * 
     * @type {string}
     * @memberof Control
     */
    id: string;
    /**
     * 
     * @type {Date}
     * @memberof Control
     */
    lastTested: Date;
    /**
     * 
     * @type {string}
     * @memberof Control
     */
    name: string;
    /**
     * 
     * @type {Date}
     * @memberof Control
     */
    nextTestDate: Date;
    /**
     * 
     * @type {string}
     * @memberof Control
     */
    owner: string;
    /**
     * 
     * @type {string}
     * @memberof Control
     */
    status: string;
    /**
     * 
     * @type {Array<TestResult>}
     * @memberof Control
     */
    testResults: Array<TestResult> | null;
    /**
     * 
     * @type {string}
     * @memberof Control
     */
    type: string;
}

/**
 * Check if a given object implements the Control interface.
 */
export function instanceOfControl(value: object): value is Control {
    if (!('category' in value) || value['category'] === undefined) return false;
    if (!('description' in value) || value['description'] === undefined) return false;
    if (!('effectivenessRating' in value) || value['effectivenessRating'] === undefined) return false;
    if (!('frequency' in value) || value['frequency'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('lastTested' in value) || value['lastTested'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('nextTestDate' in value) || value['nextTestDate'] === undefined) return false;
    if (!('owner' in value) || value['owner'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('testResults' in value) || value['testResults'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    return true;
}

export function ControlFromJSON(json: any): Control {
    return ControlFromJSONTyped(json, false);
}

export function ControlFromJSONTyped(json: any, ignoreDiscriminator: boolean): Control {
    if (json == null) {
        return json;
    }
    return {
        
        'category': json['category'],
        'description': json['description'],
        'effectivenessRating': json['effectiveness_rating'],
        'frequency': json['frequency'],
        'id': json['id'],
        'lastTested': (new Date(json['last_tested'])),
        'name': json['name'],
        'nextTestDate': (new Date(json['next_test_date'])),
        'owner': json['owner'],
        'status': json['status'],
        'testResults': (json['test_results'] == null ? null : (json['test_results'] as Array<any>).map(TestResultFromJSON)),
        'type': json['type'],
    };
}

export function ControlToJSON(json: any): Control {
    return ControlToJSONTyped(json, false);
}

export function ControlToJSONTyped(value?: Control | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'category': value['category'],
        'description': value['description'],
        'effectiveness_rating': value['effectivenessRating'],
        'frequency': value['frequency'],
        'id': value['id'],
        'last_tested': ((value['lastTested']).toISOString()),
        'name': value['name'],
        'next_test_date': ((value['nextTestDate']).toISOString()),
        'owner': value['owner'],
        'status': value['status'],
        'test_results': (value['testResults'] == null ? null : (value['testResults'] as Array<any>).map(TestResultToJSON)),
        'type': value['type'],
    };
}

