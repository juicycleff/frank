/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { RequirementStatus } from './RequirementStatus';
import {
    RequirementStatusFromJSON,
    RequirementStatusFromJSONTyped,
    RequirementStatusToJSON,
    RequirementStatusToJSONTyped,
} from './RequirementStatus';

/**
 * 
 * @export
 * @interface ComplianceStatus
 */
export interface ComplianceStatus {
    /**
     * A URL to the JSON Schema for this object.
     * @type {string}
     * @memberof ComplianceStatus
     */
    readonly $schema?: string;
    /**
     * 
     * @type {string}
     * @memberof ComplianceStatus
     */
    certificationStatus: string;
    /**
     * 
     * @type {string}
     * @memberof ComplianceStatus
     */
    complianceType: string;
    /**
     * 
     * @type {number}
     * @memberof ComplianceStatus
     */
    criticalIssues: number;
    /**
     * 
     * @type {Date}
     * @memberof ComplianceStatus
     */
    lastAssessment: Date;
    /**
     * 
     * @type {Date}
     * @memberof ComplianceStatus
     */
    nextAssessment: Date;
    /**
     * 
     * @type {string}
     * @memberof ComplianceStatus
     */
    organizationId: string;
    /**
     * 
     * @type {string}
     * @memberof ComplianceStatus
     */
    overallStatus: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ComplianceStatus
     */
    recommendations: Array<string> | null;
    /**
     * 
     * @type {{ [key: string]: RequirementStatus; }}
     * @memberof ComplianceStatus
     */
    requirements: { [key: string]: RequirementStatus; };
    /**
     * 
     * @type {number}
     * @memberof ComplianceStatus
     */
    score: number;
    /**
     * 
     * @type {number}
     * @memberof ComplianceStatus
     */
    totalIssues: number;
}

/**
 * Check if a given object implements the ComplianceStatus interface.
 */
export function instanceOfComplianceStatus(value: object): value is ComplianceStatus {
    if (!('certificationStatus' in value) || value['certificationStatus'] === undefined) return false;
    if (!('complianceType' in value) || value['complianceType'] === undefined) return false;
    if (!('criticalIssues' in value) || value['criticalIssues'] === undefined) return false;
    if (!('lastAssessment' in value) || value['lastAssessment'] === undefined) return false;
    if (!('nextAssessment' in value) || value['nextAssessment'] === undefined) return false;
    if (!('organizationId' in value) || value['organizationId'] === undefined) return false;
    if (!('overallStatus' in value) || value['overallStatus'] === undefined) return false;
    if (!('recommendations' in value) || value['recommendations'] === undefined) return false;
    if (!('requirements' in value) || value['requirements'] === undefined) return false;
    if (!('score' in value) || value['score'] === undefined) return false;
    if (!('totalIssues' in value) || value['totalIssues'] === undefined) return false;
    return true;
}

export function ComplianceStatusFromJSON(json: any): ComplianceStatus {
    return ComplianceStatusFromJSONTyped(json, false);
}

export function ComplianceStatusFromJSONTyped(json: any, ignoreDiscriminator: boolean): ComplianceStatus {
    if (json == null) {
        return json;
    }
    return {
        
        '$schema': json['$schema'] == null ? undefined : json['$schema'],
        'certificationStatus': json['certification_status'],
        'complianceType': json['compliance_type'],
        'criticalIssues': json['critical_issues'],
        'lastAssessment': (new Date(json['last_assessment'])),
        'nextAssessment': (new Date(json['next_assessment'])),
        'organizationId': json['organization_id'],
        'overallStatus': json['overall_status'],
        'recommendations': json['recommendations'] == null ? null : json['recommendations'],
        'requirements': (mapValues(json['requirements'], RequirementStatusFromJSON)),
        'score': json['score'],
        'totalIssues': json['total_issues'],
    };
}

export function ComplianceStatusToJSON(json: any): ComplianceStatus {
    return ComplianceStatusToJSONTyped(json, false);
}

export function ComplianceStatusToJSONTyped(value?: Omit<ComplianceStatus, '$schema'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'certification_status': value['certificationStatus'],
        'compliance_type': value['complianceType'],
        'critical_issues': value['criticalIssues'],
        'last_assessment': ((value['lastAssessment']).toISOString()),
        'next_assessment': ((value['nextAssessment']).toISOString()),
        'organization_id': value['organizationId'],
        'overall_status': value['overallStatus'],
        'recommendations': value['recommendations'],
        'requirements': (mapValues(value['requirements'], RequirementStatusToJSON)),
        'score': value['score'],
        'total_issues': value['totalIssues'],
    };
}

