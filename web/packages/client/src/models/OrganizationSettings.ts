/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { BrandingSettings } from './BrandingSettings';
import {
    BrandingSettingsFromJSON,
    BrandingSettingsFromJSONTyped,
    BrandingSettingsToJSON,
    BrandingSettingsToJSONTyped,
} from './BrandingSettings';
import type { WebhookSettings } from './WebhookSettings';
import {
    WebhookSettingsFromJSON,
    WebhookSettingsFromJSONTyped,
    WebhookSettingsToJSON,
    WebhookSettingsToJSONTyped,
} from './WebhookSettings';
import type { AuditSettings } from './AuditSettings';
import {
    AuditSettingsFromJSON,
    AuditSettingsFromJSONTyped,
    AuditSettingsToJSON,
    AuditSettingsToJSONTyped,
} from './AuditSettings';
import type { MFASettings } from './MFASettings';
import {
    MFASettingsFromJSON,
    MFASettingsFromJSONTyped,
    MFASettingsToJSON,
    MFASettingsToJSONTyped,
} from './MFASettings';
import type { CustomField } from './CustomField';
import {
    CustomFieldFromJSON,
    CustomFieldFromJSONTyped,
    CustomFieldToJSON,
    CustomFieldToJSONTyped,
} from './CustomField';
import type { PasswordPolicy } from './PasswordPolicy';
import {
    PasswordPolicyFromJSON,
    PasswordPolicyFromJSONTyped,
    PasswordPolicyToJSON,
    PasswordPolicyToJSONTyped,
} from './PasswordPolicy';
import type { SessionSettings } from './SessionSettings';
import {
    SessionSettingsFromJSON,
    SessionSettingsFromJSONTyped,
    SessionSettingsToJSON,
    SessionSettingsToJSONTyped,
} from './SessionSettings';

/**
 * 
 * @export
 * @interface OrganizationSettings
 */
export interface OrganizationSettings {
    [key: string]: any | any;
    /**
     * A URL to the JSON Schema for this object.
     * @type {string}
     * @memberof OrganizationSettings
     */
    readonly $schema?: string;
    /**
     * Allowed email domains for members
     * @type {Array<string>}
     * @memberof OrganizationSettings
     */
    allowedDomains?: Array<string>;
    /**
     * Audit settings
     * @type {AuditSettings}
     * @memberof OrganizationSettings
     */
    auditSettings: AuditSettings;
    /**
     * Branding settings
     * @type {BrandingSettings}
     * @memberof OrganizationSettings
     */
    branding: BrandingSettings;
    /**
     * Custom user fields
     * @type {Array<CustomField>}
     * @memberof OrganizationSettings
     */
    customFields?: Array<CustomField>;
    /**
     * MFA settings
     * @type {MFASettings}
     * @memberof OrganizationSettings
     */
    mfaSettings: MFASettings;
    /**
     * Password policy settings
     * @type {PasswordPolicy}
     * @memberof OrganizationSettings
     */
    passwordPolicy: PasswordPolicy;
    /**
     * Require email verification
     * @type {boolean}
     * @memberof OrganizationSettings
     */
    requireEmailVerification: boolean;
    /**
     * Require phone verification
     * @type {boolean}
     * @memberof OrganizationSettings
     */
    requirePhoneVerification: boolean;
    /**
     * Session management settings
     * @type {SessionSettings}
     * @memberof OrganizationSettings
     */
    sessionSettings: SessionSettings;
    /**
     * Webhook settings
     * @type {WebhookSettings}
     * @memberof OrganizationSettings
     */
    webhookSettings: WebhookSettings;
}

/**
 * Check if a given object implements the OrganizationSettings interface.
 */
export function instanceOfOrganizationSettings(value: object): value is OrganizationSettings {
    if (!('auditSettings' in value) || value['auditSettings'] === undefined) return false;
    if (!('branding' in value) || value['branding'] === undefined) return false;
    if (!('mfaSettings' in value) || value['mfaSettings'] === undefined) return false;
    if (!('passwordPolicy' in value) || value['passwordPolicy'] === undefined) return false;
    if (!('requireEmailVerification' in value) || value['requireEmailVerification'] === undefined) return false;
    if (!('requirePhoneVerification' in value) || value['requirePhoneVerification'] === undefined) return false;
    if (!('sessionSettings' in value) || value['sessionSettings'] === undefined) return false;
    if (!('webhookSettings' in value) || value['webhookSettings'] === undefined) return false;
    return true;
}

export function OrganizationSettingsFromJSON(json: any): OrganizationSettings {
    return OrganizationSettingsFromJSONTyped(json, false);
}

export function OrganizationSettingsFromJSONTyped(json: any, ignoreDiscriminator: boolean): OrganizationSettings {
    if (json == null) {
        return json;
    }
    return {
        
            ...json,
        '$schema': json['$schema'] == null ? undefined : json['$schema'],
        'allowedDomains': json['allowedDomains'] == null ? undefined : json['allowedDomains'],
        'auditSettings': AuditSettingsFromJSON(json['auditSettings']),
        'branding': BrandingSettingsFromJSON(json['branding']),
        'customFields': json['customFields'] == null ? undefined : ((json['customFields'] as Array<any>).map(CustomFieldFromJSON)),
        'mfaSettings': MFASettingsFromJSON(json['mfaSettings']),
        'passwordPolicy': PasswordPolicyFromJSON(json['passwordPolicy']),
        'requireEmailVerification': json['requireEmailVerification'],
        'requirePhoneVerification': json['requirePhoneVerification'],
        'sessionSettings': SessionSettingsFromJSON(json['sessionSettings']),
        'webhookSettings': WebhookSettingsFromJSON(json['webhookSettings']),
    };
}

export function OrganizationSettingsToJSON(json: any): OrganizationSettings {
    return OrganizationSettingsToJSONTyped(json, false);
}

export function OrganizationSettingsToJSONTyped(value?: Omit<OrganizationSettings, '$schema'> | null, ignoreDiscriminator = false): any {
    if (value == null) {
        return value;
    }

    return {
        
            ...value,
        'allowedDomains': value['allowedDomains'],
        'auditSettings': AuditSettingsToJSON(value['auditSettings']),
        'branding': BrandingSettingsToJSON(value['branding']),
        'customFields': value['customFields'] == null ? undefined : ((value['customFields'] as Array<any>).map(CustomFieldToJSON)),
        'mfaSettings': MFASettingsToJSON(value['mfaSettings']),
        'passwordPolicy': PasswordPolicyToJSON(value['passwordPolicy']),
        'requireEmailVerification': value['requireEmailVerification'],
        'requirePhoneVerification': value['requirePhoneVerification'],
        'sessionSettings': SessionSettingsToJSON(value['sessionSettings']),
        'webhookSettings': WebhookSettingsToJSON(value['webhookSettings']),
    };
}

