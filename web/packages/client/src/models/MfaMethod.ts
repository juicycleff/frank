/* tslint:disable */
/* eslint-disable */
/**
 * My Project
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    UserSummary,
    UserSummaryFromJSON,
    UserSummaryFromJSONTyped,
    UserSummaryToJSON,
} from './';

/**
 * 
 * @export
 * @interface MfaMethod
 */
export interface MfaMethod {
    /**
     * Whether method is active
     * @type {boolean}
     * @memberof MfaMethod
     */
    active: boolean;
    /**
     * Backup recovery codes (write-only)
     * @type {Array<string>}
     * @memberof MfaMethod
     */
    backupCodes?: Array<string> | null;
    /**
     * 
     * @type {Date}
     * @memberof MfaMethod
     */
    createdAt: Date;
    /**
     * Email for email-based MFA
     * @type {string}
     * @memberof MfaMethod
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof MfaMethod
     */
    id: string;
    /**
     * Last usage timestamp
     * @type {Date}
     * @memberof MfaMethod
     */
    lastUsed?: Date;
    /**
     * Additional MFA metadata
     * @type {{ [key: string]: string; }}
     * @memberof MfaMethod
     */
    metadata?: { [key: string]: string; };
    /**
     * MFA method type (totp, sms, email, backup_codes)
     * @type {string}
     * @memberof MfaMethod
     */
    method: string;
    /**
     * User-friendly name
     * @type {string}
     * @memberof MfaMethod
     */
    name?: string;
    /**
     * Phone number for SMS
     * @type {string}
     * @memberof MfaMethod
     */
    phoneNumber?: string;
    /**
     * MFA secret (write-only)
     * @type {string}
     * @memberof MfaMethod
     */
    secret?: string;
    /**
     * 
     * @type {Date}
     * @memberof MfaMethod
     */
    updatedAt: Date;
    /**
     * 
     * @type {UserSummary}
     * @memberof MfaMethod
     */
    user?: UserSummary;
    /**
     * User ID
     * @type {string}
     * @memberof MfaMethod
     */
    userId: string;
    /**
     * Whether method is verified
     * @type {boolean}
     * @memberof MfaMethod
     */
    verified: boolean;
}

export function MfaMethodFromJSON(json: any): MfaMethod {
    return MfaMethodFromJSONTyped(json, false);
}

export function MfaMethodFromJSONTyped(json: any, ignoreDiscriminator: boolean): MfaMethod {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'active': json['active'],
        'backupCodes': !exists(json, 'backupCodes') ? undefined : json['backupCodes'],
        'createdAt': (new Date(json['createdAt'])),
        'email': !exists(json, 'email') ? undefined : json['email'],
        'id': json['id'],
        'lastUsed': !exists(json, 'lastUsed') ? undefined : (new Date(json['lastUsed'])),
        'metadata': !exists(json, 'metadata') ? undefined : json['metadata'],
        'method': json['method'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'phoneNumber': !exists(json, 'phoneNumber') ? undefined : json['phoneNumber'],
        'secret': !exists(json, 'secret') ? undefined : json['secret'],
        'updatedAt': (new Date(json['updatedAt'])),
        'user': !exists(json, 'user') ? undefined : UserSummaryFromJSON(json['user']),
        'userId': json['userId'],
        'verified': json['verified'],
    };
}

export function MfaMethodToJSON(value?: MfaMethod | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'active': value.active,
        'backupCodes': value.backupCodes,
        'createdAt': (value.createdAt.toISOString()),
        'email': value.email,
        'id': value.id,
        'lastUsed': value.lastUsed === undefined ? undefined : (value.lastUsed.toISOString()),
        'metadata': value.metadata,
        'method': value.method,
        'name': value.name,
        'phoneNumber': value.phoneNumber,
        'secret': value.secret,
        'updatedAt': (value.updatedAt.toISOString()),
        'user': UserSummaryToJSON(value.user),
        'userId': value.userId,
        'verified': value.verified,
    };
}


