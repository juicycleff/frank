/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ProviderConfiguration
 */
export interface ProviderConfiguration {
    [key: string]: any | any;
    /**
     * A URL to the JSON Schema for this object.
     * @type {string}
     * @memberof ProviderConfiguration
     */
    readonly $schema?: string;
    /**
     * Attribute mapping
     * @type {{ [key: string]: string; }}
     * @memberof ProviderConfiguration
     */
    attributeMapping?: { [key: string]: string; };
    /**
     * Auto-provision setting
     * @type {boolean}
     * @memberof ProviderConfiguration
     */
    autoProvision?: boolean;
    /**
     * Provider configuration
     * @type {object}
     * @memberof ProviderConfiguration
     */
    config: object;
    /**
     * Default role
     * @type {string}
     * @memberof ProviderConfiguration
     */
    defaultRole?: string;
    /**
     * Domain restriction
     * @type {string}
     * @memberof ProviderConfiguration
     */
    domain?: string;
    /**
     * Whether provider is enabled
     * @type {boolean}
     * @memberof ProviderConfiguration
     */
    enabled?: boolean;
}

/**
 * Check if a given object implements the ProviderConfiguration interface.
 */
export function instanceOfProviderConfiguration(value: object): value is ProviderConfiguration {
    if (!('config' in value) || value['config'] === undefined) return false;
    return true;
}

export function ProviderConfigurationFromJSON(json: any): ProviderConfiguration {
    return ProviderConfigurationFromJSONTyped(json, false);
}

export function ProviderConfigurationFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProviderConfiguration {
    if (json == null) {
        return json;
    }
    return {
        
            ...json,
        '$schema': json['$schema'] == null ? undefined : json['$schema'],
        'attributeMapping': json['attributeMapping'] == null ? undefined : json['attributeMapping'],
        'autoProvision': json['autoProvision'] == null ? undefined : json['autoProvision'],
        'config': json['config'],
        'defaultRole': json['defaultRole'] == null ? undefined : json['defaultRole'],
        'domain': json['domain'] == null ? undefined : json['domain'],
        'enabled': json['enabled'] == null ? undefined : json['enabled'],
    };
}

export function ProviderConfigurationToJSON(json: any): ProviderConfiguration {
    return ProviderConfigurationToJSONTyped(json, false);
}

export function ProviderConfigurationToJSONTyped(value?: Omit<ProviderConfiguration, '$schema'> | null, ignoreDiscriminator = false): any {
    if (value == null) {
        return value;
    }

    return {
        
            ...value,
        'attributeMapping': value['attributeMapping'],
        'autoProvision': value['autoProvision'],
        'config': value['config'],
        'defaultRole': value['defaultRole'],
        'domain': value['domain'],
        'enabled': value['enabled'],
    };
}

