/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface CreateOrganizationRequest
 */
export interface CreateOrganizationRequest {
    /**
     * A URL to the JSON Schema for this object.
     * @type {string}
     * @memberof CreateOrganizationRequest
     */
    readonly $schema?: string;
    /**
     * Primary domain
     * @type {string}
     * @memberof CreateOrganizationRequest
     */
    domain?: string;
    /**
     * Logo URL
     * @type {string}
     * @memberof CreateOrganizationRequest
     */
    logoUrl?: string;
    /**
     * Organization name
     * @type {string}
     * @memberof CreateOrganizationRequest
     */
    name: string;
    /**
     * Initial subscription plan
     * @type {string}
     * @memberof CreateOrganizationRequest
     */
    plan: string;
    /**
     * Unique slug (auto-generated if not provided)
     * @type {string}
     * @memberof CreateOrganizationRequest
     */
    slug?: string;
}

/**
 * Check if a given object implements the CreateOrganizationRequest interface.
 */
export function instanceOfCreateOrganizationRequest(value: object): value is CreateOrganizationRequest {
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('plan' in value) || value['plan'] === undefined) return false;
    return true;
}

export function CreateOrganizationRequestFromJSON(json: any): CreateOrganizationRequest {
    return CreateOrganizationRequestFromJSONTyped(json, false);
}

export function CreateOrganizationRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateOrganizationRequest {
    if (json == null) {
        return json;
    }
    return {
        
        '$schema': json['$schema'] == null ? undefined : json['$schema'],
        'domain': json['domain'] == null ? undefined : json['domain'],
        'logoUrl': json['logoUrl'] == null ? undefined : json['logoUrl'],
        'name': json['name'],
        'plan': json['plan'],
        'slug': json['slug'] == null ? undefined : json['slug'],
    };
}

export function CreateOrganizationRequestToJSON(json: any): CreateOrganizationRequest {
    return CreateOrganizationRequestToJSONTyped(json, false);
}

export function CreateOrganizationRequestToJSONTyped(value?: Omit<CreateOrganizationRequest, '$schema'> | null, ignoreDiscriminator = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'domain': value['domain'],
        'logoUrl': value['logoUrl'],
        'name': value['name'],
        'plan': value['plan'],
        'slug': value['slug'],
    };
}

