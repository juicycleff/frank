/* tslint:disable */
/* eslint-disable */
/**
 * My Project
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface CreateOrganizationRequest
 */
export interface CreateOrganizationRequest {
    /**
     * A URL to the JSON Schema for this object.
     * @type {string}
     * @memberof CreateOrganizationRequest
     */
    readonly $schema?: string;
    /**
     * Auth service configuration
     * @type {{ [key: string]: string; }}
     * @memberof CreateOrganizationRequest
     */
    authConfig?: { [key: string]: string; };
    /**
     * Whether to create trial period
     * @type {boolean}
     * @memberof CreateOrganizationRequest
     */
    createTrialPeriod: boolean;
    /**
     * Primary domain
     * @type {string}
     * @memberof CreateOrganizationRequest
     */
    domain?: string;
    /**
     * Enable auth service
     * @type {boolean}
     * @memberof CreateOrganizationRequest
     */
    enableAuthService: boolean;
    /**
     * End user limit
     * @type {number}
     * @memberof CreateOrganizationRequest
     */
    endUserLimit: number;
    /**
     * External user limit
     * @type {number}
     * @memberof CreateOrganizationRequest
     */
    externalUserLimit: number;
    /**
     * Logo URL
     * @type {string}
     * @memberof CreateOrganizationRequest
     */
    logoUrl?: string;
    /**
     * Additional metadata
     * @type {{ [key: string]: string; }}
     * @memberof CreateOrganizationRequest
     */
    metadata?: { [key: string]: string; };
    /**
     * Organization name
     * @type {string}
     * @memberof CreateOrganizationRequest
     */
    name: string;
    /**
     * Organization type
     * @type {string}
     * @memberof CreateOrganizationRequest
     */
    orgType: string;
    /**
     * Owner email (will create user if not exists)
     * @type {string}
     * @memberof CreateOrganizationRequest
     */
    ownerEmail?: string;
    /**
     * Initial subscription plan
     * @type {string}
     * @memberof CreateOrganizationRequest
     */
    plan: string;
    /**
     * Unique slug (auto-generated if not provided)
     * @type {string}
     * @memberof CreateOrganizationRequest
     */
    slug?: string;
}

export function CreateOrganizationRequestFromJSON(json: any): CreateOrganizationRequest {
    return CreateOrganizationRequestFromJSONTyped(json, false);
}

export function CreateOrganizationRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateOrganizationRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        '$schema': !exists(json, '$schema') ? undefined : json['$schema'],
        'authConfig': !exists(json, 'authConfig') ? undefined : json['authConfig'],
        'createTrialPeriod': json['createTrialPeriod'],
        'domain': !exists(json, 'domain') ? undefined : json['domain'],
        'enableAuthService': json['enableAuthService'],
        'endUserLimit': json['endUserLimit'],
        'externalUserLimit': json['externalUserLimit'],
        'logoUrl': !exists(json, 'logoUrl') ? undefined : json['logoUrl'],
        'metadata': !exists(json, 'metadata') ? undefined : json['metadata'],
        'name': json['name'],
        'orgType': json['orgType'],
        'ownerEmail': !exists(json, 'ownerEmail') ? undefined : json['ownerEmail'],
        'plan': json['plan'],
        'slug': !exists(json, 'slug') ? undefined : json['slug'],
    };
}

export function CreateOrganizationRequestToJSON(value?: CreateOrganizationRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'authConfig': value.authConfig,
        'createTrialPeriod': value.createTrialPeriod,
        'domain': value.domain,
        'enableAuthService': value.enableAuthService,
        'endUserLimit': value.endUserLimit,
        'externalUserLimit': value.externalUserLimit,
        'logoUrl': value.logoUrl,
        'metadata': value.metadata,
        'name': value.name,
        'orgType': value.orgType,
        'ownerEmail': value.ownerEmail,
        'plan': value.plan,
        'slug': value.slug,
    };
}


