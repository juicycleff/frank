/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface AttestationRequest
 */
export interface AttestationRequest {
    /**
     * A URL to the JSON Schema for this object.
     * @type {string}
     * @memberof AttestationRequest
     */
    readonly $schema?: string;
    /**
     * 
     * @type {string}
     * @memberof AttestationRequest
     */
    attestationType: string;
    /**
     * 
     * @type {string}
     * @memberof AttestationRequest
     */
    attestor: string;
    /**
     * 
     * @type {string}
     * @memberof AttestationRequest
     */
    complianceType: string;
    /**
     * 
     * @type {Date}
     * @memberof AttestationRequest
     */
    effectiveDate: Date;
    /**
     * 
     * @type {Date}
     * @memberof AttestationRequest
     */
    expirationDate: Date;
    /**
     * 
     * @type {string}
     * @memberof AttestationRequest
     */
    organizationId: string;
    /**
     * 
     * @type {string}
     * @memberof AttestationRequest
     */
    period: string;
    /**
     * 
     * @type {string}
     * @memberof AttestationRequest
     */
    statement: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof AttestationRequest
     */
    supportingDocs: Array<string> | null;
}

/**
 * Check if a given object implements the AttestationRequest interface.
 */
export function instanceOfAttestationRequest(value: object): value is AttestationRequest {
    if (!('attestationType' in value) || value['attestationType'] === undefined) return false;
    if (!('attestor' in value) || value['attestor'] === undefined) return false;
    if (!('complianceType' in value) || value['complianceType'] === undefined) return false;
    if (!('effectiveDate' in value) || value['effectiveDate'] === undefined) return false;
    if (!('expirationDate' in value) || value['expirationDate'] === undefined) return false;
    if (!('organizationId' in value) || value['organizationId'] === undefined) return false;
    if (!('period' in value) || value['period'] === undefined) return false;
    if (!('statement' in value) || value['statement'] === undefined) return false;
    if (!('supportingDocs' in value) || value['supportingDocs'] === undefined) return false;
    return true;
}

export function AttestationRequestFromJSON(json: any): AttestationRequest {
    return AttestationRequestFromJSONTyped(json, false);
}

export function AttestationRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): AttestationRequest {
    if (json == null) {
        return json;
    }
    return {
        
        '$schema': json['$schema'] == null ? undefined : json['$schema'],
        'attestationType': json['attestation_type'],
        'attestor': json['attestor'],
        'complianceType': json['compliance_type'],
        'effectiveDate': (new Date(json['effective_date'])),
        'expirationDate': (new Date(json['expiration_date'])),
        'organizationId': json['organization_id'],
        'period': json['period'],
        'statement': json['statement'],
        'supportingDocs': json['supporting_docs'] == null ? null : json['supporting_docs'],
    };
}

export function AttestationRequestToJSON(json: any): AttestationRequest {
    return AttestationRequestToJSONTyped(json, false);
}

export function AttestationRequestToJSONTyped(value?: Omit<AttestationRequest, '$schema'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'attestation_type': value['attestationType'],
        'attestor': value['attestor'],
        'compliance_type': value['complianceType'],
        'effective_date': ((value['effectiveDate']).toISOString()),
        'expiration_date': ((value['expirationDate']).toISOString()),
        'organization_id': value['organizationId'],
        'period': value['period'],
        'statement': value['statement'],
        'supporting_docs': value['supportingDocs'],
    };
}

