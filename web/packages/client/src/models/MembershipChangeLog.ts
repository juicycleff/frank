/* tslint:disable */
/* eslint-disable */
/**
 * My Project
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface MembershipChangeLog
 */
export interface MembershipChangeLog {
    /**
     * Type of change
     * @type {string}
     * @memberof MembershipChangeLog
     */
    changeType: string;
    /**
     * When change was made
     * @type {Date}
     * @memberof MembershipChangeLog
     */
    changedAt: Date;
    /**
     * User who made the change
     * @type {string}
     * @memberof MembershipChangeLog
     */
    changedBy: string;
    /**
     * Change log ID
     * @type {string}
     * @memberof MembershipChangeLog
     */
    id: string;
    /**
     * IP address of change
     * @type {string}
     * @memberof MembershipChangeLog
     */
    ipAddress?: string;
    /**
     * Membership ID
     * @type {string}
     * @memberof MembershipChangeLog
     */
    membershipId: string;
    /**
     * Additional change metadata
     * @type {{ [key: string]: string; }}
     * @memberof MembershipChangeLog
     */
    metadata?: { [key: string]: string; };
    /**
     * New value
     * @type {string}
     * @memberof MembershipChangeLog
     */
    newValue?: string;
    /**
     * Old value
     * @type {string}
     * @memberof MembershipChangeLog
     */
    oldValue?: string;
    /**
     * Organization ID
     * @type {string}
     * @memberof MembershipChangeLog
     */
    organizationId: string;
    /**
     * Reason for change
     * @type {string}
     * @memberof MembershipChangeLog
     */
    reason?: string;
    /**
     * User agent of change
     * @type {string}
     * @memberof MembershipChangeLog
     */
    userAgent?: string;
    /**
     * User ID
     * @type {string}
     * @memberof MembershipChangeLog
     */
    userId: string;
}

export function MembershipChangeLogFromJSON(json: any): MembershipChangeLog {
    return MembershipChangeLogFromJSONTyped(json, false);
}

export function MembershipChangeLogFromJSONTyped(json: any, ignoreDiscriminator: boolean): MembershipChangeLog {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'changeType': json['changeType'],
        'changedAt': (new Date(json['changedAt'])),
        'changedBy': json['changedBy'],
        'id': json['id'],
        'ipAddress': !exists(json, 'ipAddress') ? undefined : json['ipAddress'],
        'membershipId': json['membershipId'],
        'metadata': !exists(json, 'metadata') ? undefined : json['metadata'],
        'newValue': !exists(json, 'newValue') ? undefined : json['newValue'],
        'oldValue': !exists(json, 'oldValue') ? undefined : json['oldValue'],
        'organizationId': json['organizationId'],
        'reason': !exists(json, 'reason') ? undefined : json['reason'],
        'userAgent': !exists(json, 'userAgent') ? undefined : json['userAgent'],
        'userId': json['userId'],
    };
}

export function MembershipChangeLogToJSON(value?: MembershipChangeLog | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'changeType': value.changeType,
        'changedAt': (value.changedAt.toISOString()),
        'changedBy': value.changedBy,
        'id': value.id,
        'ipAddress': value.ipAddress,
        'membershipId': value.membershipId,
        'metadata': value.metadata,
        'newValue': value.newValue,
        'oldValue': value.oldValue,
        'organizationId': value.organizationId,
        'reason': value.reason,
        'userAgent': value.userAgent,
        'userId': value.userId,
    };
}


