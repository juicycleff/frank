/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { OrgOwner } from './OrgOwner';
import {
    OrgOwnerFromJSON,
    OrgOwnerFromJSONTyped,
    OrgOwnerToJSON,
    OrgOwnerToJSONTyped,
} from './OrgOwner';

/**
 * 
 * @export
 * @interface ManagedOrganization
 */
export interface ManagedOrganization {
    /**
     * Compliance score
     * @type {number}
     * @memberof ManagedOrganization
     */
    complianceScore: number;
    /**
     * Creation timestamp
     * @type {Date}
     * @memberof ManagedOrganization
     */
    createdAt: Date;
    /**
     * Organization domain
     * @type {string}
     * @memberof ManagedOrganization
     */
    domain: string;
    /**
     * Organization health score
     * @type {number}
     * @memberof ManagedOrganization
     */
    healthScore: number;
    /**
     * Organization ID
     * @type {string}
     * @memberof ManagedOrganization
     */
    id: string;
    /**
     * Last activity timestamp
     * @type {Date}
     * @memberof ManagedOrganization
     */
    lastActivity: Date;
    /**
     * Monthly revenue from org
     * @type {number}
     * @memberof ManagedOrganization
     */
    monthlyRevenue: number;
    /**
     * Organization name
     * @type {string}
     * @memberof ManagedOrganization
     */
    name: string;
    /**
     * Organization owner information
     * @type {OrgOwner}
     * @memberof ManagedOrganization
     */
    owner: OrgOwner;
    /**
     * Billing plan
     * @type {string}
     * @memberof ManagedOrganization
     */
    plan: string;
    /**
     * Risk assessment level
     * @type {string}
     * @memberof ManagedOrganization
     */
    riskLevel: string;
    /**
     * Organization status
     * @type {string}
     * @memberof ManagedOrganization
     */
    status: string;
    /**
     * Number of users
     * @type {number}
     * @memberof ManagedOrganization
     */
    userCount: number;
}

/**
 * Check if a given object implements the ManagedOrganization interface.
 */
export function instanceOfManagedOrganization(value: object): value is ManagedOrganization {
    if (!('complianceScore' in value) || value['complianceScore'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('domain' in value) || value['domain'] === undefined) return false;
    if (!('healthScore' in value) || value['healthScore'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('lastActivity' in value) || value['lastActivity'] === undefined) return false;
    if (!('monthlyRevenue' in value) || value['monthlyRevenue'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('owner' in value) || value['owner'] === undefined) return false;
    if (!('plan' in value) || value['plan'] === undefined) return false;
    if (!('riskLevel' in value) || value['riskLevel'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('userCount' in value) || value['userCount'] === undefined) return false;
    return true;
}

export function ManagedOrganizationFromJSON(json: any): ManagedOrganization {
    return ManagedOrganizationFromJSONTyped(json, false);
}

export function ManagedOrganizationFromJSONTyped(json: any, ignoreDiscriminator: boolean): ManagedOrganization {
    if (json == null) {
        return json;
    }
    return {
        
        'complianceScore': json['complianceScore'],
        'createdAt': (new Date(json['createdAt'])),
        'domain': json['domain'],
        'healthScore': json['healthScore'],
        'id': json['id'],
        'lastActivity': (new Date(json['lastActivity'])),
        'monthlyRevenue': json['monthlyRevenue'],
        'name': json['name'],
        'owner': OrgOwnerFromJSON(json['owner']),
        'plan': json['plan'],
        'riskLevel': json['riskLevel'],
        'status': json['status'],
        'userCount': json['userCount'],
    };
}

export function ManagedOrganizationToJSON(json: any): ManagedOrganization {
    return ManagedOrganizationToJSONTyped(json, false);
}

export function ManagedOrganizationToJSONTyped(value?: ManagedOrganization | null, ignoreDiscriminator = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'complianceScore': value['complianceScore'],
        'createdAt': ((value['createdAt']).toISOString()),
        'domain': value['domain'],
        'healthScore': value['healthScore'],
        'id': value['id'],
        'lastActivity': ((value['lastActivity']).toISOString()),
        'monthlyRevenue': value['monthlyRevenue'],
        'name': value['name'],
        'owner': OrgOwnerToJSON(value['owner']),
        'plan': value['plan'],
        'riskLevel': value['riskLevel'],
        'status': value['status'],
        'userCount': value['userCount'],
    };
}

