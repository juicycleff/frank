/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ResourceType } from './ResourceType';
import {
    ResourceTypeFromJSON,
    ResourceTypeFromJSONTyped,
    ResourceTypeToJSON,
    ResourceTypeToJSONTyped,
} from './ResourceType';

/**
 * 
 * @export
 * @interface ActivityRecord
 */
export interface ActivityRecord {
    [key: string]: any | any;
    /**
     * A URL to the JSON Schema for this object.
     * @type {string}
     * @memberof ActivityRecord
     */
    readonly $schema?: string;
    /**
     * 
     * @type {string}
     * @memberof ActivityRecord
     */
    action: string;
    /**
     * 
     * @type {string}
     * @memberof ActivityRecord
     */
    category: string;
    /**
     * 
     * @type {number}
     * @memberof ActivityRecord
     */
    count?: number;
    /**
     * 
     * @type {string}
     * @memberof ActivityRecord
     */
    endpoint?: string;
    /**
     * 
     * @type {string}
     * @memberof ActivityRecord
     */
    error?: string;
    /**
     * 
     * @type {string}
     * @memberof ActivityRecord
     */
    errorCode?: string;
    /**
     * 
     * @type {Date}
     * @memberof ActivityRecord
     */
    expiresAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof ActivityRecord
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof ActivityRecord
     */
    ipAddress?: string;
    /**
     * 
     * @type {string}
     * @memberof ActivityRecord
     */
    location?: string;
    /**
     * 
     * @type {object}
     * @memberof ActivityRecord
     */
    metadata?: object;
    /**
     * 
     * @type {string}
     * @memberof ActivityRecord
     */
    method?: string;
    /**
     * 
     * @type {string}
     * @memberof ActivityRecord
     */
    organizationId?: string;
    /**
     * 
     * @type {string}
     * @memberof ActivityRecord
     */
    resourceId: string;
    /**
     * 
     * @type {ResourceType}
     * @memberof ActivityRecord
     */
    resourceType: ResourceType;
    /**
     * 
     * @type {number}
     * @memberof ActivityRecord
     */
    responseTime?: number;
    /**
     * 
     * @type {string}
     * @memberof ActivityRecord
     */
    sessionId?: string;
    /**
     * 
     * @type {number}
     * @memberof ActivityRecord
     */
    size?: number;
    /**
     * 
     * @type {string}
     * @memberof ActivityRecord
     */
    source: string;
    /**
     * 
     * @type {number}
     * @memberof ActivityRecord
     */
    statusCode?: number;
    /**
     * 
     * @type {boolean}
     * @memberof ActivityRecord
     */
    success: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof ActivityRecord
     */
    tags?: Array<string> | null;
    /**
     * 
     * @type {Date}
     * @memberof ActivityRecord
     */
    timestamp: Date;
    /**
     * 
     * @type {string}
     * @memberof ActivityRecord
     */
    userAgent?: string;
    /**
     * 
     * @type {string}
     * @memberof ActivityRecord
     */
    userId?: string;
    /**
     * 
     * @type {number}
     * @memberof ActivityRecord
     */
    value?: number;
}



/**
 * Check if a given object implements the ActivityRecord interface.
 */
export function instanceOfActivityRecord(value: object): value is ActivityRecord {
    if (!('action' in value) || value['action'] === undefined) return false;
    if (!('category' in value) || value['category'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('resourceId' in value) || value['resourceId'] === undefined) return false;
    if (!('resourceType' in value) || value['resourceType'] === undefined) return false;
    if (!('source' in value) || value['source'] === undefined) return false;
    if (!('success' in value) || value['success'] === undefined) return false;
    if (!('timestamp' in value) || value['timestamp'] === undefined) return false;
    return true;
}

export function ActivityRecordFromJSON(json: any): ActivityRecord {
    return ActivityRecordFromJSONTyped(json, false);
}

export function ActivityRecordFromJSONTyped(json: any, ignoreDiscriminator: boolean): ActivityRecord {
    if (json == null) {
        return json;
    }
    return {
        
            ...json,
        '$schema': json['$schema'] == null ? undefined : json['$schema'],
        'action': json['action'],
        'category': json['category'],
        'count': json['count'] == null ? undefined : json['count'],
        'endpoint': json['endpoint'] == null ? undefined : json['endpoint'],
        'error': json['error'] == null ? undefined : json['error'],
        'errorCode': json['errorCode'] == null ? undefined : json['errorCode'],
        'expiresAt': json['expiresAt'] == null ? undefined : (new Date(json['expiresAt'])),
        'id': json['id'],
        'ipAddress': json['ipAddress'] == null ? undefined : json['ipAddress'],
        'location': json['location'] == null ? undefined : json['location'],
        'metadata': json['metadata'] == null ? undefined : json['metadata'],
        'method': json['method'] == null ? undefined : json['method'],
        'organizationId': json['organizationId'] == null ? undefined : json['organizationId'],
        'resourceId': json['resourceId'],
        'resourceType': ResourceTypeFromJSON(json['resourceType']),
        'responseTime': json['responseTime'] == null ? undefined : json['responseTime'],
        'sessionId': json['sessionId'] == null ? undefined : json['sessionId'],
        'size': json['size'] == null ? undefined : json['size'],
        'source': json['source'],
        'statusCode': json['statusCode'] == null ? undefined : json['statusCode'],
        'success': json['success'],
        'tags': json['tags'] == null ? undefined : json['tags'],
        'timestamp': (new Date(json['timestamp'])),
        'userAgent': json['userAgent'] == null ? undefined : json['userAgent'],
        'userId': json['userId'] == null ? undefined : json['userId'],
        'value': json['value'] == null ? undefined : json['value'],
    };
}

export function ActivityRecordToJSON(json: any): ActivityRecord {
    return ActivityRecordToJSONTyped(json, false);
}

export function ActivityRecordToJSONTyped(value?: Omit<ActivityRecord, '$schema'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
            ...value,
        'action': value['action'],
        'category': value['category'],
        'count': value['count'],
        'endpoint': value['endpoint'],
        'error': value['error'],
        'errorCode': value['errorCode'],
        'expiresAt': value['expiresAt'] == null ? undefined : ((value['expiresAt']).toISOString()),
        'id': value['id'],
        'ipAddress': value['ipAddress'],
        'location': value['location'],
        'metadata': value['metadata'],
        'method': value['method'],
        'organizationId': value['organizationId'],
        'resourceId': value['resourceId'],
        'resourceType': ResourceTypeToJSON(value['resourceType']),
        'responseTime': value['responseTime'],
        'sessionId': value['sessionId'],
        'size': value['size'],
        'source': value['source'],
        'statusCode': value['statusCode'],
        'success': value['success'],
        'tags': value['tags'],
        'timestamp': ((value['timestamp']).toISOString()),
        'userAgent': value['userAgent'],
        'userId': value['userId'],
        'value': value['value'],
    };
}

