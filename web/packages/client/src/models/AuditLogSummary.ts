/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface AuditLogSummary
 */
export interface AuditLogSummary {
    /**
     * Action performed
     * @type {string}
     * @memberof AuditLogSummary
     */
    action: string;
    /**
     * Duration in milliseconds
     * @type {number}
     * @memberof AuditLogSummary
     */
    duration?: number;
    /**
     * Audit log ID
     * @type {string}
     * @memberof AuditLogSummary
     */
    id: string;
    /**
     * IP address
     * @type {string}
     * @memberof AuditLogSummary
     */
    ipAddress?: string;
    /**
     * Resource affected
     * @type {string}
     * @memberof AuditLogSummary
     */
    resource?: string;
    /**
     * Risk level
     * @type {string}
     * @memberof AuditLogSummary
     */
    riskLevel: string;
    /**
     * Action status
     * @type {string}
     * @memberof AuditLogSummary
     */
    status: string;
    /**
     * Action timestamp
     * @type {Date}
     * @memberof AuditLogSummary
     */
    timestamp: Date;
    /**
     * User email
     * @type {string}
     * @memberof AuditLogSummary
     */
    userEmail?: string;
}

/**
 * Check if a given object implements the AuditLogSummary interface.
 */
export function instanceOfAuditLogSummary(value: object): value is AuditLogSummary {
    if (!('action' in value) || value['action'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('riskLevel' in value) || value['riskLevel'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('timestamp' in value) || value['timestamp'] === undefined) return false;
    return true;
}

export function AuditLogSummaryFromJSON(json: any): AuditLogSummary {
    return AuditLogSummaryFromJSONTyped(json, false);
}

export function AuditLogSummaryFromJSONTyped(json: any, ignoreDiscriminator: boolean): AuditLogSummary {
    if (json == null) {
        return json;
    }
    return {
        
        'action': json['action'],
        'duration': json['duration'] == null ? undefined : json['duration'],
        'id': json['id'],
        'ipAddress': json['ipAddress'] == null ? undefined : json['ipAddress'],
        'resource': json['resource'] == null ? undefined : json['resource'],
        'riskLevel': json['riskLevel'],
        'status': json['status'],
        'timestamp': (new Date(json['timestamp'])),
        'userEmail': json['userEmail'] == null ? undefined : json['userEmail'],
    };
}

export function AuditLogSummaryToJSON(json: any): AuditLogSummary {
    return AuditLogSummaryToJSONTyped(json, false);
}

export function AuditLogSummaryToJSONTyped(value?: AuditLogSummary | null, ignoreDiscriminator = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'action': value['action'],
        'duration': value['duration'],
        'id': value['id'],
        'ipAddress': value['ipAddress'],
        'resource': value['resource'],
        'riskLevel': value['riskLevel'],
        'status': value['status'],
        'timestamp': ((value['timestamp']).toISOString()),
        'userEmail': value['userEmail'],
    };
}

