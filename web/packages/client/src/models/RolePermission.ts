/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Permission } from './Permission';
import {
    PermissionFromJSON,
    PermissionFromJSONTyped,
    PermissionToJSON,
    PermissionToJSONTyped,
} from './Permission';

/**
 * 
 * @export
 * @interface RolePermission
 */
export interface RolePermission {
    /**
     * Context ID
     * @type {string}
     * @memberof RolePermission
     */
    contextId?: string;
    /**
     * Role context
     * @type {string}
     * @memberof RolePermission
     */
    contextType: string;
    /**
     * Permissions from this role
     * @type {Array<Permission>}
     * @memberof RolePermission
     */
    permissions: Array<Permission> | null;
    /**
     * Role ID
     * @type {string}
     * @memberof RolePermission
     */
    roleId: string;
    /**
     * Role name
     * @type {string}
     * @memberof RolePermission
     */
    roleName: string;
}

/**
 * Check if a given object implements the RolePermission interface.
 */
export function instanceOfRolePermission(value: object): value is RolePermission {
    if (!('contextType' in value) || value['contextType'] === undefined) return false;
    if (!('permissions' in value) || value['permissions'] === undefined) return false;
    if (!('roleId' in value) || value['roleId'] === undefined) return false;
    if (!('roleName' in value) || value['roleName'] === undefined) return false;
    return true;
}

export function RolePermissionFromJSON(json: any): RolePermission {
    return RolePermissionFromJSONTyped(json, false);
}

export function RolePermissionFromJSONTyped(json: any, ignoreDiscriminator: boolean): RolePermission {
    if (json == null) {
        return json;
    }
    return {
        
        'contextId': json['contextId'] == null ? undefined : json['contextId'],
        'contextType': json['contextType'],
        'permissions': (json['permissions'] == null ? null : (json['permissions'] as Array<any>).map(PermissionFromJSON)),
        'roleId': json['roleId'],
        'roleName': json['roleName'],
    };
}

export function RolePermissionToJSON(json: any): RolePermission {
    return RolePermissionToJSONTyped(json, false);
}

export function RolePermissionToJSONTyped(value?: RolePermission | null, ignoreDiscriminator = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'contextId': value['contextId'],
        'contextType': value['contextType'],
        'permissions': (value['permissions'] == null ? null : (value['permissions'] as Array<any>).map(PermissionToJSON)),
        'roleId': value['roleId'],
        'roleName': value['roleName'],
    };
}

