/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface EmailMFASetupResponse
 */
export interface EmailMFASetupResponse {
    [key: string]: any | any;
    /**
     * A URL to the JSON Schema for this object.
     * @type {string}
     * @memberof EmailMFASetupResponse
     */
    readonly $schema?: string;
    /**
     * Whether verification code was sent
     * @type {boolean}
     * @memberof EmailMFASetupResponse
     */
    codeSent: boolean;
    /**
     * Email address
     * @type {string}
     * @memberof EmailMFASetupResponse
     */
    email: string;
    /**
     * Code expiration
     * @type {Date}
     * @memberof EmailMFASetupResponse
     */
    expiresAt: Date;
    /**
     * 
     * @type {string}
     * @memberof EmailMFASetupResponse
     */
    message: string;
    /**
     * MFA method ID
     * @type {string}
     * @memberof EmailMFASetupResponse
     */
    methodId: string;
}

/**
 * Check if a given object implements the EmailMFASetupResponse interface.
 */
export function instanceOfEmailMFASetupResponse(value: object): value is EmailMFASetupResponse {
    if (!('codeSent' in value) || value['codeSent'] === undefined) return false;
    if (!('email' in value) || value['email'] === undefined) return false;
    if (!('expiresAt' in value) || value['expiresAt'] === undefined) return false;
    if (!('message' in value) || value['message'] === undefined) return false;
    if (!('methodId' in value) || value['methodId'] === undefined) return false;
    return true;
}

export function EmailMFASetupResponseFromJSON(json: any): EmailMFASetupResponse {
    return EmailMFASetupResponseFromJSONTyped(json, false);
}

export function EmailMFASetupResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): EmailMFASetupResponse {
    if (json == null) {
        return json;
    }
    return {
        
            ...json,
        '$schema': json['$schema'] == null ? undefined : json['$schema'],
        'codeSent': json['codeSent'],
        'email': json['email'],
        'expiresAt': (new Date(json['expiresAt'])),
        'message': json['message'],
        'methodId': json['methodId'],
    };
}

export function EmailMFASetupResponseToJSON(json: any): EmailMFASetupResponse {
    return EmailMFASetupResponseToJSONTyped(json, false);
}

export function EmailMFASetupResponseToJSONTyped(value?: Omit<EmailMFASetupResponse, '$schema'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
            ...value,
        'codeSent': value['codeSent'],
        'email': value['email'],
        'expiresAt': ((value['expiresAt']).toISOString()),
        'message': value['message'],
        'methodId': value['methodId'],
    };
}

