/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface DataAccessLog
 */
export interface DataAccessLog {
    [key: string]: any | any;
    /**
     * 
     * @type {string}
     * @memberof DataAccessLog
     */
    accessType: string;
    /**
     * 
     * @type {string}
     * @memberof DataAccessLog
     */
    accessedBy: string;
    /**
     * 
     * @type {string}
     * @memberof DataAccessLog
     */
    dataType: string;
    /**
     * 
     * @type {object}
     * @memberof DataAccessLog
     */
    details: object;
    /**
     * 
     * @type {string}
     * @memberof DataAccessLog
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof DataAccessLog
     */
    ipAddress: string;
    /**
     * 
     * @type {string}
     * @memberof DataAccessLog
     */
    organizationId?: string;
    /**
     * 
     * @type {string}
     * @memberof DataAccessLog
     */
    purpose: string;
    /**
     * 
     * @type {boolean}
     * @memberof DataAccessLog
     */
    success: boolean;
    /**
     * 
     * @type {Date}
     * @memberof DataAccessLog
     */
    timestamp: Date;
    /**
     * 
     * @type {string}
     * @memberof DataAccessLog
     */
    userId: string;
}

/**
 * Check if a given object implements the DataAccessLog interface.
 */
export function instanceOfDataAccessLog(value: object): value is DataAccessLog {
    if (!('accessType' in value) || value['accessType'] === undefined) return false;
    if (!('accessedBy' in value) || value['accessedBy'] === undefined) return false;
    if (!('dataType' in value) || value['dataType'] === undefined) return false;
    if (!('details' in value) || value['details'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('ipAddress' in value) || value['ipAddress'] === undefined) return false;
    if (!('purpose' in value) || value['purpose'] === undefined) return false;
    if (!('success' in value) || value['success'] === undefined) return false;
    if (!('timestamp' in value) || value['timestamp'] === undefined) return false;
    if (!('userId' in value) || value['userId'] === undefined) return false;
    return true;
}

export function DataAccessLogFromJSON(json: any): DataAccessLog {
    return DataAccessLogFromJSONTyped(json, false);
}

export function DataAccessLogFromJSONTyped(json: any, ignoreDiscriminator: boolean): DataAccessLog {
    if (json == null) {
        return json;
    }
    return {
        
            ...json,
        'accessType': json['access_type'],
        'accessedBy': json['accessed_by'],
        'dataType': json['data_type'],
        'details': json['details'],
        'id': json['id'],
        'ipAddress': json['ip_address'],
        'organizationId': json['organization_id'] == null ? undefined : json['organization_id'],
        'purpose': json['purpose'],
        'success': json['success'],
        'timestamp': (new Date(json['timestamp'])),
        'userId': json['user_id'],
    };
}

export function DataAccessLogToJSON(json: any): DataAccessLog {
    return DataAccessLogToJSONTyped(json, false);
}

export function DataAccessLogToJSONTyped(value?: DataAccessLog | null, ignoreDiscriminator = false): any {
    if (value == null) {
        return value;
    }

    return {
        
            ...value,
        'access_type': value['accessType'],
        'accessed_by': value['accessedBy'],
        'data_type': value['dataType'],
        'details': value['details'],
        'id': value['id'],
        'ip_address': value['ipAddress'],
        'organization_id': value['organizationId'],
        'purpose': value['purpose'],
        'success': value['success'],
        'timestamp': ((value['timestamp']).toISOString()),
        'user_id': value['userId'],
    };
}

