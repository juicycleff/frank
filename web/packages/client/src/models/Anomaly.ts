/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Anomaly
 */
export interface Anomaly {
    /**
     * 
     * @type {string}
     * @memberof Anomaly
     */
    description: string;
    /**
     * 
     * @type {number}
     * @memberof Anomaly
     */
    deviation: number;
    /**
     * 
     * @type {number}
     * @memberof Anomaly
     */
    expected: number;
    /**
     * 
     * @type {string}
     * @memberof Anomaly
     */
    severity: string;
    /**
     * 
     * @type {Date}
     * @memberof Anomaly
     */
    timestamp: Date;
    /**
     * 
     * @type {string}
     * @memberof Anomaly
     */
    type: string;
    /**
     * 
     * @type {number}
     * @memberof Anomaly
     */
    value: number;
}

/**
 * Check if a given object implements the Anomaly interface.
 */
export function instanceOfAnomaly(value: object): value is Anomaly {
    if (!('description' in value) || value['description'] === undefined) return false;
    if (!('deviation' in value) || value['deviation'] === undefined) return false;
    if (!('expected' in value) || value['expected'] === undefined) return false;
    if (!('severity' in value) || value['severity'] === undefined) return false;
    if (!('timestamp' in value) || value['timestamp'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('value' in value) || value['value'] === undefined) return false;
    return true;
}

export function AnomalyFromJSON(json: any): Anomaly {
    return AnomalyFromJSONTyped(json, false);
}

export function AnomalyFromJSONTyped(json: any, ignoreDiscriminator: boolean): Anomaly {
    if (json == null) {
        return json;
    }
    return {
        
        'description': json['description'],
        'deviation': json['deviation'],
        'expected': json['expected'],
        'severity': json['severity'],
        'timestamp': (new Date(json['timestamp'])),
        'type': json['type'],
        'value': json['value'],
    };
}

export function AnomalyToJSON(json: any): Anomaly {
    return AnomalyToJSONTyped(json, false);
}

export function AnomalyToJSONTyped(value?: Anomaly | null, ignoreDiscriminator = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'description': value['description'],
        'deviation': value['deviation'],
        'expected': value['expected'],
        'severity': value['severity'],
        'timestamp': ((value['timestamp']).toISOString()),
        'type': value['type'],
        'value': value['value'],
    };
}

