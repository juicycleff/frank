/* tslint:disable */
/* eslint-disable */
/**
 * My Project
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface LoginRequest
 */
export interface LoginRequest {
    /**
     * A URL to the JSON Schema for this object.
     * @type {string}
     * @memberof LoginRequest
     */
    readonly $schema?: string;
    /**
     * Unique device identifier
     * @type {string}
     * @memberof LoginRequest
     */
    deviceId?: string;
    /**
     * User email address
     * @type {string}
     * @memberof LoginRequest
     */
    email: string;
    /**
     * Client IP address
     * @type {string}
     * @memberof LoginRequest
     */
    ipAddress?: string;
    /**
     * User location
     * @type {string}
     * @memberof LoginRequest
     */
    location?: string;
    /**
     * MFA method used (totp, sms, email)
     * @type {string}
     * @memberof LoginRequest
     */
    mfaMethod?: string;
    /**
     * MFA token for two-factor authentication
     * @type {string}
     * @memberof LoginRequest
     */
    mfaToken?: string;
    /**
     * User password (optional for passwordless)
     * @type {string}
     * @memberof LoginRequest
     */
    password?: string;
    /**
     * Phone number for SMS authentication
     * @type {string}
     * @memberof LoginRequest
     */
    phoneNumber?: string;
    /**
     * OAuth provider (google, github, etc.)
     * @type {string}
     * @memberof LoginRequest
     */
    provider?: string;
    /**
     * Token from OAuth provider
     * @type {string}
     * @memberof LoginRequest
     */
    providerToken?: string;
    /**
     * Whether to remember the user for extended session
     * @type {boolean}
     * @memberof LoginRequest
     */
    rememberMe: boolean;
    /**
     * Client user agent
     * @type {string}
     * @memberof LoginRequest
     */
    userAgent?: string;
    /**
     * Username (alternative to email)
     * @type {string}
     * @memberof LoginRequest
     */
    username?: string;
}

export function LoginRequestFromJSON(json: any): LoginRequest {
    return LoginRequestFromJSONTyped(json, false);
}

export function LoginRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): LoginRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        '$schema': !exists(json, '$schema') ? undefined : json['$schema'],
        'deviceId': !exists(json, 'deviceId') ? undefined : json['deviceId'],
        'email': json['email'],
        'ipAddress': !exists(json, 'ipAddress') ? undefined : json['ipAddress'],
        'location': !exists(json, 'location') ? undefined : json['location'],
        'mfaMethod': !exists(json, 'mfaMethod') ? undefined : json['mfaMethod'],
        'mfaToken': !exists(json, 'mfaToken') ? undefined : json['mfaToken'],
        'password': !exists(json, 'password') ? undefined : json['password'],
        'phoneNumber': !exists(json, 'phoneNumber') ? undefined : json['phoneNumber'],
        'provider': !exists(json, 'provider') ? undefined : json['provider'],
        'providerToken': !exists(json, 'providerToken') ? undefined : json['providerToken'],
        'rememberMe': json['rememberMe'],
        'userAgent': !exists(json, 'userAgent') ? undefined : json['userAgent'],
        'username': !exists(json, 'username') ? undefined : json['username'],
    };
}

export function LoginRequestToJSON(value?: LoginRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'deviceId': value.deviceId,
        'email': value.email,
        'ipAddress': value.ipAddress,
        'location': value.location,
        'mfaMethod': value.mfaMethod,
        'mfaToken': value.mfaToken,
        'password': value.password,
        'phoneNumber': value.phoneNumber,
        'provider': value.provider,
        'providerToken': value.providerToken,
        'rememberMe': value.rememberMe,
        'userAgent': value.userAgent,
        'username': value.username,
    };
}


