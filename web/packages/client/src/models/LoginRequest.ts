/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface LoginRequest
 */
export interface LoginRequest {
    [key: string]: any | any;
    /**
     * A URL to the JSON Schema for this object.
     * @type {string}
     * @memberof LoginRequest
     */
    readonly $schema?: string;
    /**
     * Unique device identifier
     * @type {string}
     * @memberof LoginRequest
     */
    deviceId?: string;
    /**
     * User email address
     * @type {string}
     * @memberof LoginRequest
     */
    email: string;
    /**
     * Client IP address
     * @type {string}
     * @memberof LoginRequest
     */
    ipAddress?: string;
    /**
     * User location
     * @type {string}
     * @memberof LoginRequest
     */
    location?: string;
    /**
     * MFA method used (totp, sms, email)
     * @type {string}
     * @memberof LoginRequest
     */
    mfaMethod?: string;
    /**
     * MFA token for two-factor authentication
     * @type {string}
     * @memberof LoginRequest
     */
    mfaToken?: string;
    /**
     * User password (optional for passwordless)
     * @type {string}
     * @memberof LoginRequest
     */
    password?: string;
    /**
     * Phone number for SMS authentication
     * @type {string}
     * @memberof LoginRequest
     */
    phoneNumber?: string;
    /**
     * OAuth provider (google, github, etc.)
     * @type {string}
     * @memberof LoginRequest
     */
    provider?: string;
    /**
     * Token from OAuth provider
     * @type {string}
     * @memberof LoginRequest
     */
    providerToken?: string;
    /**
     * Whether to remember the user for extended session
     * @type {boolean}
     * @memberof LoginRequest
     */
    rememberMe: boolean;
    /**
     * Client user agent
     * @type {string}
     * @memberof LoginRequest
     */
    userAgent?: string;
    /**
     * Username (alternative to email)
     * @type {string}
     * @memberof LoginRequest
     */
    username?: string;
}

/**
 * Check if a given object implements the LoginRequest interface.
 */
export function instanceOfLoginRequest(value: object): value is LoginRequest {
    if (!('email' in value) || value['email'] === undefined) return false;
    if (!('rememberMe' in value) || value['rememberMe'] === undefined) return false;
    return true;
}

export function LoginRequestFromJSON(json: any): LoginRequest {
    return LoginRequestFromJSONTyped(json, false);
}

export function LoginRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): LoginRequest {
    if (json == null) {
        return json;
    }
    return {
        
            ...json,
        '$schema': json['$schema'] == null ? undefined : json['$schema'],
        'deviceId': json['deviceId'] == null ? undefined : json['deviceId'],
        'email': json['email'],
        'ipAddress': json['ipAddress'] == null ? undefined : json['ipAddress'],
        'location': json['location'] == null ? undefined : json['location'],
        'mfaMethod': json['mfaMethod'] == null ? undefined : json['mfaMethod'],
        'mfaToken': json['mfaToken'] == null ? undefined : json['mfaToken'],
        'password': json['password'] == null ? undefined : json['password'],
        'phoneNumber': json['phoneNumber'] == null ? undefined : json['phoneNumber'],
        'provider': json['provider'] == null ? undefined : json['provider'],
        'providerToken': json['providerToken'] == null ? undefined : json['providerToken'],
        'rememberMe': json['rememberMe'],
        'userAgent': json['userAgent'] == null ? undefined : json['userAgent'],
        'username': json['username'] == null ? undefined : json['username'],
    };
}

export function LoginRequestToJSON(json: any): LoginRequest {
    return LoginRequestToJSONTyped(json, false);
}

export function LoginRequestToJSONTyped(value?: Omit<LoginRequest, '$schema'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
            ...value,
        'deviceId': value['deviceId'],
        'email': value['email'],
        'ipAddress': value['ipAddress'],
        'location': value['location'],
        'mfaMethod': value['mfaMethod'],
        'mfaToken': value['mfaToken'],
        'password': value['password'],
        'phoneNumber': value['phoneNumber'],
        'provider': value['provider'],
        'providerToken': value['providerToken'],
        'rememberMe': value['rememberMe'],
        'userAgent': value['userAgent'],
        'username': value['username'],
    };
}

