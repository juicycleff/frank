/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { RiskDataPoint } from './RiskDataPoint';
import {
    RiskDataPointFromJSON,
    RiskDataPointFromJSONTyped,
    RiskDataPointToJSON,
    RiskDataPointToJSONTyped,
} from './RiskDataPoint';
import type { RemediationMetrics } from './RemediationMetrics';
import {
    RemediationMetricsFromJSON,
    RemediationMetricsFromJSONTyped,
    RemediationMetricsToJSON,
    RemediationMetricsToJSONTyped,
} from './RemediationMetrics';
import type { ComplianceCoverage } from './ComplianceCoverage';
import {
    ComplianceCoverageFromJSON,
    ComplianceCoverageFromJSONTyped,
    ComplianceCoverageToJSON,
    ComplianceCoverageToJSONTyped,
} from './ComplianceCoverage';
import type { ScoreDataPoint } from './ScoreDataPoint';
import {
    ScoreDataPointFromJSON,
    ScoreDataPointFromJSONTyped,
    ScoreDataPointToJSON,
    ScoreDataPointToJSONTyped,
} from './ScoreDataPoint';
import type { ViolationDataPoint } from './ViolationDataPoint';
import {
    ViolationDataPointFromJSON,
    ViolationDataPointFromJSONTyped,
    ViolationDataPointToJSON,
    ViolationDataPointToJSONTyped,
} from './ViolationDataPoint';

/**
 * 
 * @export
 * @interface ComplianceMetrics
 */
export interface ComplianceMetrics {
    [key: string]: any | any;
    /**
     * A URL to the JSON Schema for this object.
     * @type {string}
     * @memberof ComplianceMetrics
     */
    readonly $schema?: string;
    /**
     * 
     * @type {ComplianceCoverage}
     * @memberof ComplianceMetrics
     */
    complianceCoverage: ComplianceCoverage;
    /**
     * 
     * @type {object}
     * @memberof ComplianceMetrics
     */
    frameworkBreakdown: object;
    /**
     * 
     * @type {string}
     * @memberof ComplianceMetrics
     */
    organizationId: string;
    /**
     * 
     * @type {string}
     * @memberof ComplianceMetrics
     */
    period: string;
    /**
     * 
     * @type {RemediationMetrics}
     * @memberof ComplianceMetrics
     */
    remediationMetrics: RemediationMetrics;
    /**
     * 
     * @type {Array<ScoreDataPoint>}
     * @memberof ComplianceMetrics
     */
    scoreHistory: Array<ScoreDataPoint>;
    /**
     * 
     * @type {Array<RiskDataPoint>}
     * @memberof ComplianceMetrics
     */
    topRisks: Array<RiskDataPoint>;
    /**
     * 
     * @type {Array<ViolationDataPoint>}
     * @memberof ComplianceMetrics
     */
    violationHistory: Array<ViolationDataPoint>;
}

/**
 * Check if a given object implements the ComplianceMetrics interface.
 */
export function instanceOfComplianceMetrics(value: object): value is ComplianceMetrics {
    if (!('complianceCoverage' in value) || value['complianceCoverage'] === undefined) return false;
    if (!('frameworkBreakdown' in value) || value['frameworkBreakdown'] === undefined) return false;
    if (!('organizationId' in value) || value['organizationId'] === undefined) return false;
    if (!('period' in value) || value['period'] === undefined) return false;
    if (!('remediationMetrics' in value) || value['remediationMetrics'] === undefined) return false;
    if (!('scoreHistory' in value) || value['scoreHistory'] === undefined) return false;
    if (!('topRisks' in value) || value['topRisks'] === undefined) return false;
    if (!('violationHistory' in value) || value['violationHistory'] === undefined) return false;
    return true;
}

export function ComplianceMetricsFromJSON(json: any): ComplianceMetrics {
    return ComplianceMetricsFromJSONTyped(json, false);
}

export function ComplianceMetricsFromJSONTyped(json: any, ignoreDiscriminator: boolean): ComplianceMetrics {
    if (json == null) {
        return json;
    }
    return {
        
            ...json,
        '$schema': json['$schema'] == null ? undefined : json['$schema'],
        'complianceCoverage': ComplianceCoverageFromJSON(json['complianceCoverage']),
        'frameworkBreakdown': json['frameworkBreakdown'],
        'organizationId': json['organizationId'],
        'period': json['period'],
        'remediationMetrics': RemediationMetricsFromJSON(json['remediationMetrics']),
        'scoreHistory': ((json['scoreHistory'] as Array<any>).map(ScoreDataPointFromJSON)),
        'topRisks': ((json['topRisks'] as Array<any>).map(RiskDataPointFromJSON)),
        'violationHistory': ((json['violationHistory'] as Array<any>).map(ViolationDataPointFromJSON)),
    };
}

export function ComplianceMetricsToJSON(json: any): ComplianceMetrics {
    return ComplianceMetricsToJSONTyped(json, false);
}

export function ComplianceMetricsToJSONTyped(value?: Omit<ComplianceMetrics, '$schema'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
            ...value,
        'complianceCoverage': ComplianceCoverageToJSON(value['complianceCoverage']),
        'frameworkBreakdown': value['frameworkBreakdown'],
        'organizationId': value['organizationId'],
        'period': value['period'],
        'remediationMetrics': RemediationMetricsToJSON(value['remediationMetrics']),
        'scoreHistory': ((value['scoreHistory'] as Array<any>).map(ScoreDataPointToJSON)),
        'topRisks': ((value['topRisks'] as Array<any>).map(RiskDataPointToJSON)),
        'violationHistory': ((value['violationHistory'] as Array<any>).map(ViolationDataPointToJSON)),
    };
}

