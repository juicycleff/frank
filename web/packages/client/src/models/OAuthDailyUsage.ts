/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface OAuthDailyUsage
 */
export interface OAuthDailyUsage {
    /**
     * 
     * @type {number}
     * @memberof OAuthDailyUsage
     */
    cost: number;
    /**
     * 
     * @type {Date}
     * @memberof OAuthDailyUsage
     */
    date: Date;
    /**
     * 
     * @type {number}
     * @memberof OAuthDailyUsage
     */
    messages: number;
    /**
     * 
     * @type {number}
     * @memberof OAuthDailyUsage
     */
    segments: number;
}

/**
 * Check if a given object implements the OAuthDailyUsage interface.
 */
export function instanceOfOAuthDailyUsage(value: object): value is OAuthDailyUsage {
    if (!('cost' in value) || value['cost'] === undefined) return false;
    if (!('date' in value) || value['date'] === undefined) return false;
    if (!('messages' in value) || value['messages'] === undefined) return false;
    if (!('segments' in value) || value['segments'] === undefined) return false;
    return true;
}

export function OAuthDailyUsageFromJSON(json: any): OAuthDailyUsage {
    return OAuthDailyUsageFromJSONTyped(json, false);
}

export function OAuthDailyUsageFromJSONTyped(json: any, ignoreDiscriminator: boolean): OAuthDailyUsage {
    if (json == null) {
        return json;
    }
    return {
        
        'cost': json['cost'],
        'date': (new Date(json['date'])),
        'messages': json['messages'],
        'segments': json['segments'],
    };
}

export function OAuthDailyUsageToJSON(json: any): OAuthDailyUsage {
    return OAuthDailyUsageToJSONTyped(json, false);
}

export function OAuthDailyUsageToJSONTyped(value?: OAuthDailyUsage | null, ignoreDiscriminator = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'cost': value['cost'],
        'date': ((value['date']).toISOString()),
        'messages': value['messages'],
        'segments': value['segments'],
    };
}

