/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface UserActivity
 */
export interface UserActivity {
    [key: string]: any | any;
    /**
     * Additional activity details
     * @type {object}
     * @memberof UserActivity
     */
    details?: object;
    /**
     * Error message if failed
     * @type {string}
     * @memberof UserActivity
     */
    error?: string;
    /**
     * Activity event type
     * @type {string}
     * @memberof UserActivity
     */
    event: string;
    /**
     * IP address
     * @type {string}
     * @memberof UserActivity
     */
    ipAddress?: string;
    /**
     * Location
     * @type {string}
     * @memberof UserActivity
     */
    location?: string;
    /**
     * Whether activity was successful
     * @type {boolean}
     * @memberof UserActivity
     */
    success: boolean;
    /**
     * Activity timestamp
     * @type {Date}
     * @memberof UserActivity
     */
    timestamp: Date;
    /**
     * User agent
     * @type {string}
     * @memberof UserActivity
     */
    userAgent?: string;
}

/**
 * Check if a given object implements the UserActivity interface.
 */
export function instanceOfUserActivity(value: object): value is UserActivity {
    if (!('event' in value) || value['event'] === undefined) return false;
    if (!('success' in value) || value['success'] === undefined) return false;
    if (!('timestamp' in value) || value['timestamp'] === undefined) return false;
    return true;
}

export function UserActivityFromJSON(json: any): UserActivity {
    return UserActivityFromJSONTyped(json, false);
}

export function UserActivityFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserActivity {
    if (json == null) {
        return json;
    }
    return {
        
            ...json,
        'details': json['details'] == null ? undefined : json['details'],
        'error': json['error'] == null ? undefined : json['error'],
        'event': json['event'],
        'ipAddress': json['ipAddress'] == null ? undefined : json['ipAddress'],
        'location': json['location'] == null ? undefined : json['location'],
        'success': json['success'],
        'timestamp': (new Date(json['timestamp'])),
        'userAgent': json['userAgent'] == null ? undefined : json['userAgent'],
    };
}

export function UserActivityToJSON(json: any): UserActivity {
    return UserActivityToJSONTyped(json, false);
}

export function UserActivityToJSONTyped(value?: UserActivity | null, ignoreDiscriminator = false): any {
    if (value == null) {
        return value;
    }

    return {
        
            ...value,
        'details': value['details'],
        'error': value['error'],
        'event': value['event'],
        'ipAddress': value['ipAddress'],
        'location': value['location'],
        'success': value['success'],
        'timestamp': ((value['timestamp']).toISOString()),
        'userAgent': value['userAgent'],
    };
}

