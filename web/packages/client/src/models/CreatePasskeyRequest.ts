/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface CreatePasskeyRequest
 */
export interface CreatePasskeyRequest {
    [key: string]: any | any;
    /**
     * A URL to the JSON Schema for this object.
     * @type {string}
     * @memberof CreatePasskeyRequest
     */
    readonly $schema?: string;
    /**
     * Authenticator AAGUID
     * @type {string}
     * @memberof CreatePasskeyRequest
     */
    aaguid?: string;
    /**
     * Attestation data
     * @type {object}
     * @memberof CreatePasskeyRequest
     */
    attestation?: object;
    /**
     * Backup eligible
     * @type {boolean}
     * @memberof CreatePasskeyRequest
     */
    backupEligible: boolean;
    /**
     * Backup state
     * @type {boolean}
     * @memberof CreatePasskeyRequest
     */
    backupState: boolean;
    /**
     * WebAuthn credential ID
     * @type {string}
     * @memberof CreatePasskeyRequest
     */
    credentialId: string;
    /**
     * Device type
     * @type {string}
     * @memberof CreatePasskeyRequest
     */
    deviceType?: string;
    /**
     * IP address
     * @type {string}
     * @memberof CreatePasskeyRequest
     */
    ipAddress?: string;
    /**
     * User-friendly name
     * @type {string}
     * @memberof CreatePasskeyRequest
     */
    name: string;
    /**
     * Public key bytes
     * @type {string}
     * @memberof CreatePasskeyRequest
     */
    publicKey: string;
    /**
     * Supported transports
     * @type {Array<string>}
     * @memberof CreatePasskeyRequest
     */
    transports?: Array<string>;
    /**
     * User agent
     * @type {string}
     * @memberof CreatePasskeyRequest
     */
    userAgent?: string;
}

/**
 * Check if a given object implements the CreatePasskeyRequest interface.
 */
export function instanceOfCreatePasskeyRequest(value: object): value is CreatePasskeyRequest {
    if (!('backupEligible' in value) || value['backupEligible'] === undefined) return false;
    if (!('backupState' in value) || value['backupState'] === undefined) return false;
    if (!('credentialId' in value) || value['credentialId'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('publicKey' in value) || value['publicKey'] === undefined) return false;
    return true;
}

export function CreatePasskeyRequestFromJSON(json: any): CreatePasskeyRequest {
    return CreatePasskeyRequestFromJSONTyped(json, false);
}

export function CreatePasskeyRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreatePasskeyRequest {
    if (json == null) {
        return json;
    }
    return {
        
            ...json,
        '$schema': json['$schema'] == null ? undefined : json['$schema'],
        'aaguid': json['aaguid'] == null ? undefined : json['aaguid'],
        'attestation': json['attestation'] == null ? undefined : json['attestation'],
        'backupEligible': json['backupEligible'],
        'backupState': json['backupState'],
        'credentialId': json['credentialId'],
        'deviceType': json['deviceType'] == null ? undefined : json['deviceType'],
        'ipAddress': json['ipAddress'] == null ? undefined : json['ipAddress'],
        'name': json['name'],
        'publicKey': json['publicKey'],
        'transports': json['transports'] == null ? undefined : json['transports'],
        'userAgent': json['userAgent'] == null ? undefined : json['userAgent'],
    };
}

export function CreatePasskeyRequestToJSON(json: any): CreatePasskeyRequest {
    return CreatePasskeyRequestToJSONTyped(json, false);
}

export function CreatePasskeyRequestToJSONTyped(value?: Omit<CreatePasskeyRequest, '$schema'> | null, ignoreDiscriminator = false): any {
    if (value == null) {
        return value;
    }

    return {
        
            ...value,
        'aaguid': value['aaguid'],
        'attestation': value['attestation'],
        'backupEligible': value['backupEligible'],
        'backupState': value['backupState'],
        'credentialId': value['credentialId'],
        'deviceType': value['deviceType'],
        'ipAddress': value['ipAddress'],
        'name': value['name'],
        'publicKey': value['publicKey'],
        'transports': value['transports'],
        'userAgent': value['userAgent'],
    };
}

