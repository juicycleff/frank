/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { UserSummary } from './UserSummary';
import {
    UserSummaryFromJSON,
    UserSummaryFromJSONTyped,
    UserSummaryToJSON,
    UserSummaryToJSONTyped,
} from './UserSummary';

/**
 * 
 * @export
 * @interface Passkey
 */
export interface Passkey {
    [key: string]: any | any;
    /**
     * A URL to the JSON Schema for this object.
     * @type {string}
     * @memberof Passkey
     */
    readonly $schema?: string;
    /**
     * Authenticator AAGUID
     * @type {string}
     * @memberof Passkey
     */
    aaguid?: string;
    /**
     * Whether passkey is active
     * @type {boolean}
     * @memberof Passkey
     */
    active: boolean;
    /**
     * Attestation data
     * @type {object}
     * @memberof Passkey
     */
    attestation?: object;
    /**
     * Whether credential is backup eligible
     * @type {boolean}
     * @memberof Passkey
     */
    backupEligible: boolean;
    /**
     * Whether credential is backed up
     * @type {boolean}
     * @memberof Passkey
     */
    backupState: boolean;
    /**
     * 
     * @type {Date}
     * @memberof Passkey
     */
    createdAt: Date;
    /**
     * WebAuthn credential ID
     * @type {string}
     * @memberof Passkey
     */
    credentialId: string;
    /**
     * Device type (platform, roaming)
     * @type {string}
     * @memberof Passkey
     */
    deviceType?: string;
    /**
     * 
     * @type {string}
     * @memberof Passkey
     */
    id: string;
    /**
     * IP address when created
     * @type {string}
     * @memberof Passkey
     */
    ipAddress?: string;
    /**
     * Last usage timestamp
     * @type {Date}
     * @memberof Passkey
     */
    lastUsed?: Date;
    /**
     * User-friendly name for the passkey
     * @type {string}
     * @memberof Passkey
     */
    name: string;
    /**
     * Public key bytes (write-only)
     * @type {string}
     * @memberof Passkey
     */
    publicKey?: string;
    /**
     * WebAuthn signature counter
     * @type {number}
     * @memberof Passkey
     */
    signCount: number;
    /**
     * Supported transports
     * @type {Array<string>}
     * @memberof Passkey
     */
    transports?: Array<string>;
    /**
     * 
     * @type {Date}
     * @memberof Passkey
     */
    updatedAt: Date;
    /**
     * User information
     * @type {UserSummary}
     * @memberof Passkey
     */
    user?: UserSummary;
    /**
     * User agent when created
     * @type {string}
     * @memberof Passkey
     */
    userAgent?: string;
    /**
     * User ID
     * @type {string}
     * @memberof Passkey
     */
    userId: string;
}

/**
 * Check if a given object implements the Passkey interface.
 */
export function instanceOfPasskey(value: object): value is Passkey {
    if (!('active' in value) || value['active'] === undefined) return false;
    if (!('backupEligible' in value) || value['backupEligible'] === undefined) return false;
    if (!('backupState' in value) || value['backupState'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('credentialId' in value) || value['credentialId'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('signCount' in value) || value['signCount'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    if (!('userId' in value) || value['userId'] === undefined) return false;
    return true;
}

export function PasskeyFromJSON(json: any): Passkey {
    return PasskeyFromJSONTyped(json, false);
}

export function PasskeyFromJSONTyped(json: any, ignoreDiscriminator: boolean): Passkey {
    if (json == null) {
        return json;
    }
    return {
        
            ...json,
        '$schema': json['$schema'] == null ? undefined : json['$schema'],
        'aaguid': json['aaguid'] == null ? undefined : json['aaguid'],
        'active': json['active'],
        'attestation': json['attestation'] == null ? undefined : json['attestation'],
        'backupEligible': json['backupEligible'],
        'backupState': json['backupState'],
        'createdAt': (new Date(json['createdAt'])),
        'credentialId': json['credentialId'],
        'deviceType': json['deviceType'] == null ? undefined : json['deviceType'],
        'id': json['id'],
        'ipAddress': json['ipAddress'] == null ? undefined : json['ipAddress'],
        'lastUsed': json['lastUsed'] == null ? undefined : (new Date(json['lastUsed'])),
        'name': json['name'],
        'publicKey': json['publicKey'] == null ? undefined : json['publicKey'],
        'signCount': json['signCount'],
        'transports': json['transports'] == null ? undefined : json['transports'],
        'updatedAt': (new Date(json['updatedAt'])),
        'user': json['user'] == null ? undefined : UserSummaryFromJSON(json['user']),
        'userAgent': json['userAgent'] == null ? undefined : json['userAgent'],
        'userId': json['userId'],
    };
}

export function PasskeyToJSON(json: any): Passkey {
    return PasskeyToJSONTyped(json, false);
}

export function PasskeyToJSONTyped(value?: Omit<Passkey, '$schema'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
            ...value,
        'aaguid': value['aaguid'],
        'active': value['active'],
        'attestation': value['attestation'],
        'backupEligible': value['backupEligible'],
        'backupState': value['backupState'],
        'createdAt': ((value['createdAt']).toISOString()),
        'credentialId': value['credentialId'],
        'deviceType': value['deviceType'],
        'id': value['id'],
        'ipAddress': value['ipAddress'],
        'lastUsed': value['lastUsed'] == null ? undefined : ((value['lastUsed']).toISOString()),
        'name': value['name'],
        'publicKey': value['publicKey'],
        'signCount': value['signCount'],
        'transports': value['transports'],
        'updatedAt': ((value['updatedAt']).toISOString()),
        'user': UserSummaryToJSON(value['user']),
        'userAgent': value['userAgent'],
        'userId': value['userId'],
    };
}

