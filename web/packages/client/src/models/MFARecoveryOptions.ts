/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface MFARecoveryOptions
 */
export interface MFARecoveryOptions {
    [key: string]: any | any;
    /**
     * A URL to the JSON Schema for this object.
     * @type {string}
     * @memberof MFARecoveryOptions
     */
    readonly $schema?: string;
    /**
     * Whether a backup code was available
     * @type {boolean}
     * @memberof MFARecoveryOptions
     */
    available: boolean;
    /**
     * Whether a contact support
     * @type {boolean}
     * @memberof MFARecoveryOptions
     */
    contactSupport: boolean;
    /**
     * Whether a backup code was available
     * @type {boolean}
     * @memberof MFARecoveryOptions
     */
    hasBackupCodes: boolean;
    /**
     * MFA methods used
     * @type {Array<string>}
     * @memberof MFARecoveryOptions
     */
    methods: Array<string>;
}

/**
 * Check if a given object implements the MFARecoveryOptions interface.
 */
export function instanceOfMFARecoveryOptions(value: object): value is MFARecoveryOptions {
    if (!('available' in value) || value['available'] === undefined) return false;
    if (!('contactSupport' in value) || value['contactSupport'] === undefined) return false;
    if (!('hasBackupCodes' in value) || value['hasBackupCodes'] === undefined) return false;
    if (!('methods' in value) || value['methods'] === undefined) return false;
    return true;
}

export function MFARecoveryOptionsFromJSON(json: any): MFARecoveryOptions {
    return MFARecoveryOptionsFromJSONTyped(json, false);
}

export function MFARecoveryOptionsFromJSONTyped(json: any, ignoreDiscriminator: boolean): MFARecoveryOptions {
    if (json == null) {
        return json;
    }
    return {
        
            ...json,
        '$schema': json['$schema'] == null ? undefined : json['$schema'],
        'available': json['available'],
        'contactSupport': json['contactSupport'],
        'hasBackupCodes': json['hasBackupCodes'],
        'methods': json['methods'],
    };
}

export function MFARecoveryOptionsToJSON(json: any): MFARecoveryOptions {
    return MFARecoveryOptionsToJSONTyped(json, false);
}

export function MFARecoveryOptionsToJSONTyped(value?: Omit<MFARecoveryOptions, '$schema'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
            ...value,
        'available': value['available'],
        'contactSupport': value['contactSupport'],
        'hasBackupCodes': value['hasBackupCodes'],
        'methods': value['methods'],
    };
}

