/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { LoginResponse } from './LoginResponse';
import {
    LoginResponseFromJSON,
    LoginResponseFromJSONTyped,
    LoginResponseToJSON,
    LoginResponseToJSONTyped,
} from './LoginResponse';

/**
 * 
 * @export
 * @interface MFAVerifyResponse
 */
export interface MFAVerifyResponse {
    [key: string]: any | any;
    /**
     * A URL to the JSON Schema for this object.
     * @type {string}
     * @memberof MFAVerifyResponse
     */
    readonly $schema?: string;
    /**
     * Whether a backup code was used
     * @type {boolean}
     * @memberof MFAVerifyResponse
     */
    backupUsed: boolean;
    /**
     * Full login response if completing authentication
     * @type {LoginResponse}
     * @memberof MFAVerifyResponse
     */
    loginData?: LoginResponse;
    /**
     * Response message
     * @type {string}
     * @memberof MFAVerifyResponse
     */
    message: string;
    /**
     * MFA method used
     * @type {string}
     * @memberof MFAVerifyResponse
     */
    method: string;
    /**
     * Whether verification was successful
     * @type {boolean}
     * @memberof MFAVerifyResponse
     */
    success: boolean;
}

/**
 * Check if a given object implements the MFAVerifyResponse interface.
 */
export function instanceOfMFAVerifyResponse(value: object): value is MFAVerifyResponse {
    if (!('backupUsed' in value) || value['backupUsed'] === undefined) return false;
    if (!('message' in value) || value['message'] === undefined) return false;
    if (!('method' in value) || value['method'] === undefined) return false;
    if (!('success' in value) || value['success'] === undefined) return false;
    return true;
}

export function MFAVerifyResponseFromJSON(json: any): MFAVerifyResponse {
    return MFAVerifyResponseFromJSONTyped(json, false);
}

export function MFAVerifyResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): MFAVerifyResponse {
    if (json == null) {
        return json;
    }
    return {
        
            ...json,
        '$schema': json['$schema'] == null ? undefined : json['$schema'],
        'backupUsed': json['backupUsed'],
        'loginData': json['loginData'] == null ? undefined : LoginResponseFromJSON(json['loginData']),
        'message': json['message'],
        'method': json['method'],
        'success': json['success'],
    };
}

export function MFAVerifyResponseToJSON(json: any): MFAVerifyResponse {
    return MFAVerifyResponseToJSONTyped(json, false);
}

export function MFAVerifyResponseToJSONTyped(value?: Omit<MFAVerifyResponse, '$schema'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
            ...value,
        'backupUsed': value['backupUsed'],
        'loginData': LoginResponseToJSON(value['loginData']),
        'message': value['message'],
        'method': value['method'],
        'success': value['success'],
    };
}

