/* tslint:disable */
/* eslint-disable */
/**
 * My Project
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface AssignPermissionRequest
 */
export interface AssignPermissionRequest {
    /**
     * A URL to the JSON Schema for this object.
     * @type {string}
     * @memberof AssignPermissionRequest
     */
    readonly $schema?: string;
    /**
     * Optional conditions for permission
     * @type {{ [key: string]: string; }}
     * @memberof AssignPermissionRequest
     */
    conditions?: { [key: string]: string; };
    /**
     * Context ID
     * @type {string}
     * @memberof AssignPermissionRequest
     */
    contextId?: string;
    /**
     * Assignment context type
     * @type {string}
     * @memberof AssignPermissionRequest
     */
    contextType: string;
    /**
     * When assignment expires
     * @type {Date}
     * @memberof AssignPermissionRequest
     */
    expiresAt?: Date;
    /**
     * Permission ID to assign
     * @type {string}
     * @memberof AssignPermissionRequest
     */
    permissionId: string;
    /**
     * Permission type (grant, deny)
     * @type {string}
     * @memberof AssignPermissionRequest
     */
    permissionType: string;
    /**
     * Reason for assignment
     * @type {string}
     * @memberof AssignPermissionRequest
     */
    reason?: string;
    /**
     * Specific resource ID
     * @type {string}
     * @memberof AssignPermissionRequest
     */
    resourceId?: string;
    /**
     * Specific resource type
     * @type {string}
     * @memberof AssignPermissionRequest
     */
    resourceType?: string;
}

export function AssignPermissionRequestFromJSON(json: any): AssignPermissionRequest {
    return AssignPermissionRequestFromJSONTyped(json, false);
}

export function AssignPermissionRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): AssignPermissionRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        '$schema': !exists(json, '$schema') ? undefined : json['$schema'],
        'conditions': !exists(json, 'conditions') ? undefined : json['conditions'],
        'contextId': !exists(json, 'contextId') ? undefined : json['contextId'],
        'contextType': json['contextType'],
        'expiresAt': !exists(json, 'expiresAt') ? undefined : (new Date(json['expiresAt'])),
        'permissionId': json['permissionId'],
        'permissionType': json['permissionType'],
        'reason': !exists(json, 'reason') ? undefined : json['reason'],
        'resourceId': !exists(json, 'resourceId') ? undefined : json['resourceId'],
        'resourceType': !exists(json, 'resourceType') ? undefined : json['resourceType'],
    };
}

export function AssignPermissionRequestToJSON(value?: AssignPermissionRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'conditions': value.conditions,
        'contextId': value.contextId,
        'contextType': value.contextType,
        'expiresAt': value.expiresAt === undefined ? undefined : (value.expiresAt.toISOString()),
        'permissionId': value.permissionId,
        'permissionType': value.permissionType,
        'reason': value.reason,
        'resourceId': value.resourceId,
        'resourceType': value.resourceType,
    };
}


