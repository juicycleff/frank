/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ForecastData } from './ForecastData';
import {
    ForecastDataFromJSON,
    ForecastDataFromJSONTyped,
    ForecastDataToJSON,
    ForecastDataToJSONTyped,
} from './ForecastData';

/**
 * 
 * @export
 * @interface RevenueForecast
 */
export interface RevenueForecast {
    /**
     * Forecast confidence percentage
     * @type {number}
     * @memberof RevenueForecast
     */
    confidenceLevel: number;
    /**
     * Forecasting methodology used
     * @type {string}
     * @memberof RevenueForecast
     */
    methodology: string;
    /**
     * Next month forecast
     * @type {ForecastData}
     * @memberof RevenueForecast
     */
    nextMonth: ForecastData;
    /**
     * Next quarter forecast
     * @type {ForecastData}
     * @memberof RevenueForecast
     */
    nextQuarter: ForecastData;
    /**
     * Next year forecast
     * @type {ForecastData}
     * @memberof RevenueForecast
     */
    nextYear: ForecastData;
}

/**
 * Check if a given object implements the RevenueForecast interface.
 */
export function instanceOfRevenueForecast(value: object): value is RevenueForecast {
    if (!('confidenceLevel' in value) || value['confidenceLevel'] === undefined) return false;
    if (!('methodology' in value) || value['methodology'] === undefined) return false;
    if (!('nextMonth' in value) || value['nextMonth'] === undefined) return false;
    if (!('nextQuarter' in value) || value['nextQuarter'] === undefined) return false;
    if (!('nextYear' in value) || value['nextYear'] === undefined) return false;
    return true;
}

export function RevenueForecastFromJSON(json: any): RevenueForecast {
    return RevenueForecastFromJSONTyped(json, false);
}

export function RevenueForecastFromJSONTyped(json: any, ignoreDiscriminator: boolean): RevenueForecast {
    if (json == null) {
        return json;
    }
    return {
        
        'confidenceLevel': json['confidenceLevel'],
        'methodology': json['methodology'],
        'nextMonth': ForecastDataFromJSON(json['nextMonth']),
        'nextQuarter': ForecastDataFromJSON(json['nextQuarter']),
        'nextYear': ForecastDataFromJSON(json['nextYear']),
    };
}

export function RevenueForecastToJSON(json: any): RevenueForecast {
    return RevenueForecastToJSONTyped(json, false);
}

export function RevenueForecastToJSONTyped(value?: RevenueForecast | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'confidenceLevel': value['confidenceLevel'],
        'methodology': value['methodology'],
        'nextMonth': ForecastDataToJSON(value['nextMonth']),
        'nextQuarter': ForecastDataToJSON(value['nextQuarter']),
        'nextYear': ForecastDataToJSON(value['nextYear']),
    };
}

