/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { User } from './User';
import {
    UserFromJSON,
    UserFromJSONTyped,
    UserToJSON,
    UserToJSONTyped,
} from './User';

/**
 * 
 * @export
 * @interface RegisterResponse
 */
export interface RegisterResponse {
    [key: string]: any | any;
    /**
     * A URL to the JSON Schema for this object.
     * @type {string}
     * @memberof RegisterResponse
     */
    readonly $schema?: string;
    /**
     * JWT access token (if auto-login enabled)
     * @type {string}
     * @memberof RegisterResponse
     */
    accessToken?: string;
    /**
     * Whether email verification is required
     * @type {boolean}
     * @memberof RegisterResponse
     */
    emailVerificationRequired: boolean;
    /**
     * Token expiration in seconds
     * @type {number}
     * @memberof RegisterResponse
     */
    expiresIn?: number;
    /**
     * Whether phone verification is required
     * @type {boolean}
     * @memberof RegisterResponse
     */
    phoneVerificationRequired: boolean;
    /**
     * Refresh token
     * @type {string}
     * @memberof RegisterResponse
     */
    refreshToken?: string;
    /**
     * Token type
     * @type {string}
     * @memberof RegisterResponse
     */
    tokenType?: string;
    /**
     * Created user information
     * @type {User}
     * @memberof RegisterResponse
     */
    user: User;
    /**
     * Whether verification is required for this user
     * @type {boolean}
     * @memberof RegisterResponse
     */
    verificationRequired?: boolean;
    /**
     * Verification token
     * @type {string}
     * @memberof RegisterResponse
     */
    verificationToken?: string;
}

/**
 * Check if a given object implements the RegisterResponse interface.
 */
export function instanceOfRegisterResponse(value: object): value is RegisterResponse {
    if (!('emailVerificationRequired' in value) || value['emailVerificationRequired'] === undefined) return false;
    if (!('phoneVerificationRequired' in value) || value['phoneVerificationRequired'] === undefined) return false;
    if (!('user' in value) || value['user'] === undefined) return false;
    return true;
}

export function RegisterResponseFromJSON(json: any): RegisterResponse {
    return RegisterResponseFromJSONTyped(json, false);
}

export function RegisterResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): RegisterResponse {
    if (json == null) {
        return json;
    }
    return {
        
            ...json,
        '$schema': json['$schema'] == null ? undefined : json['$schema'],
        'accessToken': json['accessToken'] == null ? undefined : json['accessToken'],
        'emailVerificationRequired': json['emailVerificationRequired'],
        'expiresIn': json['expiresIn'] == null ? undefined : json['expiresIn'],
        'phoneVerificationRequired': json['phoneVerificationRequired'],
        'refreshToken': json['refreshToken'] == null ? undefined : json['refreshToken'],
        'tokenType': json['tokenType'] == null ? undefined : json['tokenType'],
        'user': UserFromJSON(json['user']),
        'verificationRequired': json['verificationRequired'] == null ? undefined : json['verificationRequired'],
        'verificationToken': json['verificationToken'] == null ? undefined : json['verificationToken'],
    };
}

export function RegisterResponseToJSON(json: any): RegisterResponse {
    return RegisterResponseToJSONTyped(json, false);
}

export function RegisterResponseToJSONTyped(value?: Omit<RegisterResponse, '$schema'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
            ...value,
        'accessToken': value['accessToken'],
        'emailVerificationRequired': value['emailVerificationRequired'],
        'expiresIn': value['expiresIn'],
        'phoneVerificationRequired': value['phoneVerificationRequired'],
        'refreshToken': value['refreshToken'],
        'tokenType': value['tokenType'],
        'user': UserToJSON(value['user']),
        'verificationRequired': value['verificationRequired'],
        'verificationToken': value['verificationToken'],
    };
}

