/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { MembershipStatus } from './MembershipStatus';
import {
    MembershipStatusFromJSON,
    MembershipStatusFromJSONTyped,
    MembershipStatusToJSON,
    MembershipStatusToJSONTyped,
} from './MembershipStatus';
import type { OrganizationSummary } from './OrganizationSummary';
import {
    OrganizationSummaryFromJSON,
    OrganizationSummaryFromJSONTyped,
    OrganizationSummaryToJSON,
    OrganizationSummaryToJSONTyped,
} from './OrganizationSummary';
import type { UserSummary } from './UserSummary';
import {
    UserSummaryFromJSON,
    UserSummaryFromJSONTyped,
    UserSummaryToJSON,
    UserSummaryToJSONTyped,
} from './UserSummary';
import type { RoleSummary } from './RoleSummary';
import {
    RoleSummaryFromJSON,
    RoleSummaryFromJSONTyped,
    RoleSummaryToJSON,
    RoleSummaryToJSONTyped,
} from './RoleSummary';

/**
 * 
 * @export
 * @interface Membership
 */
export interface Membership {
    [key: string]: any | any;
    /**
     * A URL to the JSON Schema for this object.
     * @type {string}
     * @memberof Membership
     */
    readonly $schema?: string;
    /**
     * 
     * @type {Date}
     * @memberof Membership
     */
    createdAt: Date;
    /**
     * 
     * @type {string}
     * @memberof Membership
     */
    createdBy: string;
    /**
     * Custom membership fields
     * @type {object}
     * @memberof Membership
     */
    customFields?: object;
    /**
     * When invitation expires
     * @type {Date}
     * @memberof Membership
     */
    expiresAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof Membership
     */
    id: string;
    /**
     * Invitation token
     * @type {string}
     * @memberof Membership
     */
    invitationToken?: string;
    /**
     * Invitation timestamp
     * @type {Date}
     * @memberof Membership
     */
    invitedAt: Date;
    /**
     * User who sent the invitation
     * @type {string}
     * @memberof Membership
     */
    invitedBy?: string;
    /**
     * User who sent invitation
     * @type {UserSummary}
     * @memberof Membership
     */
    inviter?: UserSummary;
    /**
     * Whether member receives billing notifications
     * @type {boolean}
     * @memberof Membership
     */
    isBillingContact: boolean;
    /**
     * Whether member is organization owner
     * @type {boolean}
     * @memberof Membership
     */
    isOwner: boolean;
    /**
     * Whether member is primary contact
     * @type {boolean}
     * @memberof Membership
     */
    isPrimaryContact: boolean;
    /**
     * When user accepted invitation
     * @type {Date}
     * @memberof Membership
     */
    joinedAt?: Date;
    /**
     * When user left the organization
     * @type {Date}
     * @memberof Membership
     */
    leftAt?: Date;
    /**
     * Additional membership metadata
     * @type {object}
     * @memberof Membership
     */
    metadata?: object;
    /**
     * Internal notes about membership
     * @type {string}
     * @memberof Membership
     */
    notes?: string;
    /**
     * Organization information
     * @type {OrganizationSummary}
     * @memberof Membership
     */
    organization?: OrganizationSummary;
    /**
     * Organization ID
     * @type {string}
     * @memberof Membership
     */
    organizationId: string;
    /**
     * Role information
     * @type {RoleSummary}
     * @memberof Membership
     */
    role?: RoleSummary;
    /**
     * Role ID
     * @type {string}
     * @memberof Membership
     */
    roleId: string;
    /**
     * Membership status (pending, active, inactive, suspended)
     * @type {MembershipStatus}
     * @memberof Membership
     */
    status: MembershipStatusEnum;
    /**
     * 
     * @type {Date}
     * @memberof Membership
     */
    updatedAt: Date;
    /**
     * 
     * @type {string}
     * @memberof Membership
     */
    updatedBy: string;
    /**
     * User information
     * @type {UserSummary}
     * @memberof Membership
     */
    user?: UserSummary;
    /**
     * User ID
     * @type {string}
     * @memberof Membership
     */
    userId: string;
}


/**
 * @export
 */
export const MembershipStatusEnum = {
    Pending: 'pending',
    Active: 'active',
    Inactive: 'inactive',
    Suspended: 'suspended'
} as const;
export type MembershipStatusEnum = typeof MembershipStatusEnum[keyof typeof MembershipStatusEnum];


/**
 * Check if a given object implements the Membership interface.
 */
export function instanceOfMembership(value: object): value is Membership {
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('createdBy' in value) || value['createdBy'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('invitedAt' in value) || value['invitedAt'] === undefined) return false;
    if (!('isBillingContact' in value) || value['isBillingContact'] === undefined) return false;
    if (!('isOwner' in value) || value['isOwner'] === undefined) return false;
    if (!('isPrimaryContact' in value) || value['isPrimaryContact'] === undefined) return false;
    if (!('organizationId' in value) || value['organizationId'] === undefined) return false;
    if (!('roleId' in value) || value['roleId'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    if (!('updatedBy' in value) || value['updatedBy'] === undefined) return false;
    if (!('userId' in value) || value['userId'] === undefined) return false;
    return true;
}

export function MembershipFromJSON(json: any): Membership {
    return MembershipFromJSONTyped(json, false);
}

export function MembershipFromJSONTyped(json: any, ignoreDiscriminator: boolean): Membership {
    if (json == null) {
        return json;
    }
    return {
        
            ...json,
        '$schema': json['$schema'] == null ? undefined : json['$schema'],
        'createdAt': (new Date(json['createdAt'])),
        'createdBy': json['createdBy'],
        'customFields': json['customFields'] == null ? undefined : json['customFields'],
        'expiresAt': json['expiresAt'] == null ? undefined : (new Date(json['expiresAt'])),
        'id': json['id'],
        'invitationToken': json['invitationToken'] == null ? undefined : json['invitationToken'],
        'invitedAt': (new Date(json['invitedAt'])),
        'invitedBy': json['invitedBy'] == null ? undefined : json['invitedBy'],
        'inviter': json['inviter'] == null ? undefined : UserSummaryFromJSON(json['inviter']),
        'isBillingContact': json['isBillingContact'],
        'isOwner': json['isOwner'],
        'isPrimaryContact': json['isPrimaryContact'],
        'joinedAt': json['joinedAt'] == null ? undefined : (new Date(json['joinedAt'])),
        'leftAt': json['leftAt'] == null ? undefined : (new Date(json['leftAt'])),
        'metadata': json['metadata'] == null ? undefined : json['metadata'],
        'notes': json['notes'] == null ? undefined : json['notes'],
        'organization': json['organization'] == null ? undefined : OrganizationSummaryFromJSON(json['organization']),
        'organizationId': json['organizationId'],
        'role': json['role'] == null ? undefined : RoleSummaryFromJSON(json['role']),
        'roleId': json['roleId'],
        'status': MembershipStatusFromJSON(json['status']),
        'updatedAt': (new Date(json['updatedAt'])),
        'updatedBy': json['updatedBy'],
        'user': json['user'] == null ? undefined : UserSummaryFromJSON(json['user']),
        'userId': json['userId'],
    };
}

export function MembershipToJSON(json: any): Membership {
    return MembershipToJSONTyped(json, false);
}

export function MembershipToJSONTyped(value?: Omit<Membership, '$schema'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
            ...value,
        'createdAt': ((value['createdAt']).toISOString()),
        'createdBy': value['createdBy'],
        'customFields': value['customFields'],
        'expiresAt': value['expiresAt'] == null ? undefined : ((value['expiresAt']).toISOString()),
        'id': value['id'],
        'invitationToken': value['invitationToken'],
        'invitedAt': ((value['invitedAt']).toISOString()),
        'invitedBy': value['invitedBy'],
        'inviter': UserSummaryToJSON(value['inviter']),
        'isBillingContact': value['isBillingContact'],
        'isOwner': value['isOwner'],
        'isPrimaryContact': value['isPrimaryContact'],
        'joinedAt': value['joinedAt'] == null ? undefined : ((value['joinedAt']).toISOString()),
        'leftAt': value['leftAt'] == null ? undefined : ((value['leftAt']).toISOString()),
        'metadata': value['metadata'],
        'notes': value['notes'],
        'organization': OrganizationSummaryToJSON(value['organization']),
        'organizationId': value['organizationId'],
        'role': RoleSummaryToJSON(value['role']),
        'roleId': value['roleId'],
        'status': MembershipStatusToJSON(value['status']),
        'updatedAt': ((value['updatedAt']).toISOString()),
        'updatedBy': value['updatedBy'],
        'user': UserSummaryToJSON(value['user']),
        'userId': value['userId'],
    };
}

