/* tslint:disable */
/* eslint-disable */
/**
 * My Project
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    OrganizationSummary,
    OrganizationSummaryFromJSON,
    OrganizationSummaryFromJSONTyped,
    OrganizationSummaryToJSON,
    RoleSummary,
    RoleSummaryFromJSON,
    RoleSummaryFromJSONTyped,
    RoleSummaryToJSON,
    UserSummary,
    UserSummaryFromJSON,
    UserSummaryFromJSONTyped,
    UserSummaryToJSON,
} from './';

/**
 * 
 * @export
 * @interface Membership
 */
export interface Membership {
    /**
     * A URL to the JSON Schema for this object.
     * @type {string}
     * @memberof Membership
     */
    readonly $schema?: string;
    /**
     * 
     * @type {Date}
     * @memberof Membership
     */
    createdAt: Date;
    /**
     * 
     * @type {string}
     * @memberof Membership
     */
    createdBy: string;
    /**
     * Custom membership fields
     * @type {{ [key: string]: string; }}
     * @memberof Membership
     */
    customFields?: { [key: string]: string; };
    /**
     * When invitation expires
     * @type {Date}
     * @memberof Membership
     */
    expiresAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof Membership
     */
    id: string;
    /**
     * Invitation token
     * @type {string}
     * @memberof Membership
     */
    invitationToken?: string;
    /**
     * Invitation timestamp
     * @type {Date}
     * @memberof Membership
     */
    invitedAt: Date;
    /**
     * User who sent the invitation
     * @type {string}
     * @memberof Membership
     */
    invitedBy?: string;
    /**
     * 
     * @type {UserSummary}
     * @memberof Membership
     */
    inviter?: UserSummary;
    /**
     * Whether member receives billing notifications
     * @type {boolean}
     * @memberof Membership
     */
    isBillingContact: boolean;
    /**
     * Whether member is organization owner
     * @type {boolean}
     * @memberof Membership
     */
    isOwner: boolean;
    /**
     * Whether member is primary contact
     * @type {boolean}
     * @memberof Membership
     */
    isPrimaryContact: boolean;
    /**
     * When user accepted invitation
     * @type {Date}
     * @memberof Membership
     */
    joinedAt?: Date;
    /**
     * When user left the organization
     * @type {Date}
     * @memberof Membership
     */
    leftAt?: Date;
    /**
     * Additional membership metadata
     * @type {{ [key: string]: string; }}
     * @memberof Membership
     */
    metadata?: { [key: string]: string; };
    /**
     * Internal notes about membership
     * @type {string}
     * @memberof Membership
     */
    notes?: string;
    /**
     * 
     * @type {OrganizationSummary}
     * @memberof Membership
     */
    organization?: OrganizationSummary;
    /**
     * Organization ID
     * @type {string}
     * @memberof Membership
     */
    organizationId: string;
    /**
     * 
     * @type {RoleSummary}
     * @memberof Membership
     */
    role?: RoleSummary;
    /**
     * Role ID
     * @type {string}
     * @memberof Membership
     */
    roleId: string;
    /**
     * Membership status (pending, active, inactive, suspended)
     * @type {string}
     * @memberof Membership
     */
    status: MembershipStatusEnum;
    /**
     * 
     * @type {Date}
     * @memberof Membership
     */
    updatedAt: Date;
    /**
     * 
     * @type {string}
     * @memberof Membership
     */
    updatedBy: string;
    /**
     * 
     * @type {UserSummary}
     * @memberof Membership
     */
    user?: UserSummary;
    /**
     * User ID
     * @type {string}
     * @memberof Membership
     */
    userId: string;
}

export function MembershipFromJSON(json: any): Membership {
    return MembershipFromJSONTyped(json, false);
}

export function MembershipFromJSONTyped(json: any, ignoreDiscriminator: boolean): Membership {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        '$schema': !exists(json, '$schema') ? undefined : json['$schema'],
        'createdAt': (new Date(json['createdAt'])),
        'createdBy': json['createdBy'],
        'customFields': !exists(json, 'customFields') ? undefined : json['customFields'],
        'expiresAt': !exists(json, 'expiresAt') ? undefined : (new Date(json['expiresAt'])),
        'id': json['id'],
        'invitationToken': !exists(json, 'invitationToken') ? undefined : json['invitationToken'],
        'invitedAt': (new Date(json['invitedAt'])),
        'invitedBy': !exists(json, 'invitedBy') ? undefined : json['invitedBy'],
        'inviter': !exists(json, 'inviter') ? undefined : UserSummaryFromJSON(json['inviter']),
        'isBillingContact': json['isBillingContact'],
        'isOwner': json['isOwner'],
        'isPrimaryContact': json['isPrimaryContact'],
        'joinedAt': !exists(json, 'joinedAt') ? undefined : (new Date(json['joinedAt'])),
        'leftAt': !exists(json, 'leftAt') ? undefined : (new Date(json['leftAt'])),
        'metadata': !exists(json, 'metadata') ? undefined : json['metadata'],
        'notes': !exists(json, 'notes') ? undefined : json['notes'],
        'organization': !exists(json, 'organization') ? undefined : OrganizationSummaryFromJSON(json['organization']),
        'organizationId': json['organizationId'],
        'role': !exists(json, 'role') ? undefined : RoleSummaryFromJSON(json['role']),
        'roleId': json['roleId'],
        'status': json['status'],
        'updatedAt': (new Date(json['updatedAt'])),
        'updatedBy': json['updatedBy'],
        'user': !exists(json, 'user') ? undefined : UserSummaryFromJSON(json['user']),
        'userId': json['userId'],
    };
}

export function MembershipToJSON(value?: Membership | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'createdAt': (value.createdAt.toISOString()),
        'createdBy': value.createdBy,
        'customFields': value.customFields,
        'expiresAt': value.expiresAt === undefined ? undefined : (value.expiresAt.toISOString()),
        'id': value.id,
        'invitationToken': value.invitationToken,
        'invitedAt': (value.invitedAt.toISOString()),
        'invitedBy': value.invitedBy,
        'inviter': UserSummaryToJSON(value.inviter),
        'isBillingContact': value.isBillingContact,
        'isOwner': value.isOwner,
        'isPrimaryContact': value.isPrimaryContact,
        'joinedAt': value.joinedAt === undefined ? undefined : (value.joinedAt.toISOString()),
        'leftAt': value.leftAt === undefined ? undefined : (value.leftAt.toISOString()),
        'metadata': value.metadata,
        'notes': value.notes,
        'organization': OrganizationSummaryToJSON(value.organization),
        'organizationId': value.organizationId,
        'role': RoleSummaryToJSON(value.role),
        'roleId': value.roleId,
        'status': value.status,
        'updatedAt': (value.updatedAt.toISOString()),
        'updatedBy': value.updatedBy,
        'user': UserSummaryToJSON(value.user),
        'userId': value.userId,
    };
}

/**
* @export
* @enum {string}
*/
export enum MembershipStatusEnum {
    Active = 'active',
    Inactive = 'inactive',
    Suspended = 'suspended',
    Pending = 'pending'
}


