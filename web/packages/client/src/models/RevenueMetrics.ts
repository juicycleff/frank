/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { RevenueTrends } from './RevenueTrends';
import {
    RevenueTrendsFromJSON,
    RevenueTrendsFromJSONTyped,
    RevenueTrendsToJSON,
    RevenueTrendsToJSONTyped,
} from './RevenueTrends';
import type { PlanRevenue } from './PlanRevenue';
import {
    PlanRevenueFromJSON,
    PlanRevenueFromJSONTyped,
    PlanRevenueToJSON,
    PlanRevenueToJSONTyped,
} from './PlanRevenue';

/**
 * 
 * @export
 * @interface RevenueMetrics
 */
export interface RevenueMetrics {
    /**
     * A URL to the JSON Schema for this object.
     * @type {string}
     * @memberof RevenueMetrics
     */
    readonly $schema?: string;
    /**
     * ARR in cents
     * @type {number}
     * @memberof RevenueMetrics
     */
    annualRecurringRevenue: number;
    /**
     * ARPU in cents
     * @type {number}
     * @memberof RevenueMetrics
     */
    averageRevenuePerUser: number;
    /**
     * Revenue churn rate percentage
     * @type {number}
     * @memberof RevenueMetrics
     */
    churnRate: number;
    /**
     * Revenue lost from downgrades (cents)
     * @type {number}
     * @memberof RevenueMetrics
     */
    contractionRevenue: number;
    /**
     * Currency code
     * @type {string}
     * @memberof RevenueMetrics
     */
    currency: string;
    /**
     * Period end date
     * @type {Date}
     * @memberof RevenueMetrics
     */
    endDate: Date;
    /**
     * Revenue from upgrades (cents)
     * @type {number}
     * @memberof RevenueMetrics
     */
    expansionRevenue: number;
    /**
     * MRR in cents
     * @type {number}
     * @memberof RevenueMetrics
     */
    monthlyRecurringRevenue: number;
    /**
     * Net revenue after refunds (cents)
     * @type {number}
     * @memberof RevenueMetrics
     */
    netRevenue: number;
    /**
     * One-time revenue in period (cents)
     * @type {number}
     * @memberof RevenueMetrics
     */
    oneTimeRevenue: number;
    /**
     * Metrics period
     * @type {string}
     * @memberof RevenueMetrics
     */
    period: string;
    /**
     * Recurring revenue in period (cents)
     * @type {number}
     * @memberof RevenueMetrics
     */
    recurringRevenue: number;
    /**
     * Refunded amount in period (cents)
     * @type {number}
     * @memberof RevenueMetrics
     */
    refundedAmount: number;
    /**
     * Revenue breakdown by plan
     * @type {{ [key: string]: PlanRevenue; }}
     * @memberof RevenueMetrics
     */
    revenueByPlan: { [key: string]: PlanRevenue; };
    /**
     * Revenue growth percentage
     * @type {number}
     * @memberof RevenueMetrics
     */
    revenueGrowth: number;
    /**
     * Period start date
     * @type {Date}
     * @memberof RevenueMetrics
     */
    startDate: Date;
    /**
     * Total revenue in period (cents)
     * @type {number}
     * @memberof RevenueMetrics
     */
    totalRevenue: number;
    /**
     * Revenue trend analysis
     * @type {RevenueTrends}
     * @memberof RevenueMetrics
     */
    trends: RevenueTrends;
}

/**
 * Check if a given object implements the RevenueMetrics interface.
 */
export function instanceOfRevenueMetrics(value: object): value is RevenueMetrics {
    if (!('annualRecurringRevenue' in value) || value['annualRecurringRevenue'] === undefined) return false;
    if (!('averageRevenuePerUser' in value) || value['averageRevenuePerUser'] === undefined) return false;
    if (!('churnRate' in value) || value['churnRate'] === undefined) return false;
    if (!('contractionRevenue' in value) || value['contractionRevenue'] === undefined) return false;
    if (!('currency' in value) || value['currency'] === undefined) return false;
    if (!('endDate' in value) || value['endDate'] === undefined) return false;
    if (!('expansionRevenue' in value) || value['expansionRevenue'] === undefined) return false;
    if (!('monthlyRecurringRevenue' in value) || value['monthlyRecurringRevenue'] === undefined) return false;
    if (!('netRevenue' in value) || value['netRevenue'] === undefined) return false;
    if (!('oneTimeRevenue' in value) || value['oneTimeRevenue'] === undefined) return false;
    if (!('period' in value) || value['period'] === undefined) return false;
    if (!('recurringRevenue' in value) || value['recurringRevenue'] === undefined) return false;
    if (!('refundedAmount' in value) || value['refundedAmount'] === undefined) return false;
    if (!('revenueByPlan' in value) || value['revenueByPlan'] === undefined) return false;
    if (!('revenueGrowth' in value) || value['revenueGrowth'] === undefined) return false;
    if (!('startDate' in value) || value['startDate'] === undefined) return false;
    if (!('totalRevenue' in value) || value['totalRevenue'] === undefined) return false;
    if (!('trends' in value) || value['trends'] === undefined) return false;
    return true;
}

export function RevenueMetricsFromJSON(json: any): RevenueMetrics {
    return RevenueMetricsFromJSONTyped(json, false);
}

export function RevenueMetricsFromJSONTyped(json: any, ignoreDiscriminator: boolean): RevenueMetrics {
    if (json == null) {
        return json;
    }
    return {
        
        '$schema': json['$schema'] == null ? undefined : json['$schema'],
        'annualRecurringRevenue': json['annualRecurringRevenue'],
        'averageRevenuePerUser': json['averageRevenuePerUser'],
        'churnRate': json['churnRate'],
        'contractionRevenue': json['contractionRevenue'],
        'currency': json['currency'],
        'endDate': (new Date(json['endDate'])),
        'expansionRevenue': json['expansionRevenue'],
        'monthlyRecurringRevenue': json['monthlyRecurringRevenue'],
        'netRevenue': json['netRevenue'],
        'oneTimeRevenue': json['oneTimeRevenue'],
        'period': json['period'],
        'recurringRevenue': json['recurringRevenue'],
        'refundedAmount': json['refundedAmount'],
        'revenueByPlan': (mapValues(json['revenueByPlan'], PlanRevenueFromJSON)),
        'revenueGrowth': json['revenueGrowth'],
        'startDate': (new Date(json['startDate'])),
        'totalRevenue': json['totalRevenue'],
        'trends': RevenueTrendsFromJSON(json['trends']),
    };
}

export function RevenueMetricsToJSON(json: any): RevenueMetrics {
    return RevenueMetricsToJSONTyped(json, false);
}

export function RevenueMetricsToJSONTyped(value?: Omit<RevenueMetrics, '$schema'> | null, ignoreDiscriminator = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'annualRecurringRevenue': value['annualRecurringRevenue'],
        'averageRevenuePerUser': value['averageRevenuePerUser'],
        'churnRate': value['churnRate'],
        'contractionRevenue': value['contractionRevenue'],
        'currency': value['currency'],
        'endDate': ((value['endDate']).toISOString()),
        'expansionRevenue': value['expansionRevenue'],
        'monthlyRecurringRevenue': value['monthlyRecurringRevenue'],
        'netRevenue': value['netRevenue'],
        'oneTimeRevenue': value['oneTimeRevenue'],
        'period': value['period'],
        'recurringRevenue': value['recurringRevenue'],
        'refundedAmount': value['refundedAmount'],
        'revenueByPlan': (mapValues(value['revenueByPlan'], PlanRevenueToJSON)),
        'revenueGrowth': value['revenueGrowth'],
        'startDate': ((value['startDate']).toISOString()),
        'totalRevenue': value['totalRevenue'],
        'trends': RevenueTrendsToJSON(value['trends']),
    };
}

