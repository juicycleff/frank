/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { FeatureCondition } from './FeatureCondition';
import {
    FeatureConditionFromJSON,
    FeatureConditionFromJSONTyped,
    FeatureConditionToJSON,
    FeatureConditionToJSONTyped,
} from './FeatureCondition';

/**
 * 
 * @export
 * @interface FeatureRule
 */
export interface FeatureRule {
    /**
     * 
     * @type {Array<FeatureCondition>}
     * @memberof FeatureRule
     */
    conditions: Array<FeatureCondition> | null;
    /**
     * 
     * @type {string}
     * @memberof FeatureRule
     */
    description?: string;
    /**
     * 
     * @type {boolean}
     * @memberof FeatureRule
     */
    enabled: boolean;
    /**
     * 
     * @type {string}
     * @memberof FeatureRule
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof FeatureRule
     */
    variation: string;
}

/**
 * Check if a given object implements the FeatureRule interface.
 */
export function instanceOfFeatureRule(value: object): value is FeatureRule {
    if (!('conditions' in value) || value['conditions'] === undefined) return false;
    if (!('enabled' in value) || value['enabled'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('variation' in value) || value['variation'] === undefined) return false;
    return true;
}

export function FeatureRuleFromJSON(json: any): FeatureRule {
    return FeatureRuleFromJSONTyped(json, false);
}

export function FeatureRuleFromJSONTyped(json: any, ignoreDiscriminator: boolean): FeatureRule {
    if (json == null) {
        return json;
    }
    return {
        
        'conditions': (json['conditions'] == null ? null : (json['conditions'] as Array<any>).map(FeatureConditionFromJSON)),
        'description': json['description'] == null ? undefined : json['description'],
        'enabled': json['enabled'],
        'id': json['id'],
        'variation': json['variation'],
    };
}

export function FeatureRuleToJSON(json: any): FeatureRule {
    return FeatureRuleToJSONTyped(json, false);
}

export function FeatureRuleToJSONTyped(value?: FeatureRule | null, ignoreDiscriminator = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'conditions': (value['conditions'] == null ? null : (value['conditions'] as Array<any>).map(FeatureConditionToJSON)),
        'description': value['description'],
        'enabled': value['enabled'],
        'id': value['id'],
        'variation': value['variation'],
    };
}

