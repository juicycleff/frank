/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface SecurityIncidentEvent
 */
export interface SecurityIncidentEvent {
    [key: string]: any | any;
    /**
     * 
     * @type {string}
     * @memberof SecurityIncidentEvent
     */
    description: string;
    /**
     * 
     * @type {string}
     * @memberof SecurityIncidentEvent
     */
    id: string;
    /**
     * 
     * @type {object}
     * @memberof SecurityIncidentEvent
     */
    metadata?: object;
    /**
     * 
     * @type {Date}
     * @memberof SecurityIncidentEvent
     */
    timestamp: Date;
    /**
     * 
     * @type {string}
     * @memberof SecurityIncidentEvent
     */
    type: string;
    /**
     * 
     * @type {string}
     * @memberof SecurityIncidentEvent
     */
    userId?: string;
}

/**
 * Check if a given object implements the SecurityIncidentEvent interface.
 */
export function instanceOfSecurityIncidentEvent(value: object): value is SecurityIncidentEvent {
    if (!('description' in value) || value['description'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('timestamp' in value) || value['timestamp'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    return true;
}

export function SecurityIncidentEventFromJSON(json: any): SecurityIncidentEvent {
    return SecurityIncidentEventFromJSONTyped(json, false);
}

export function SecurityIncidentEventFromJSONTyped(json: any, ignoreDiscriminator: boolean): SecurityIncidentEvent {
    if (json == null) {
        return json;
    }
    return {
        
            ...json,
        'description': json['description'],
        'id': json['id'],
        'metadata': json['metadata'] == null ? undefined : json['metadata'],
        'timestamp': (new Date(json['timestamp'])),
        'type': json['type'],
        'userId': json['userId'] == null ? undefined : json['userId'],
    };
}

export function SecurityIncidentEventToJSON(json: any): SecurityIncidentEvent {
    return SecurityIncidentEventToJSONTyped(json, false);
}

export function SecurityIncidentEventToJSONTyped(value?: SecurityIncidentEvent | null, ignoreDiscriminator = false): any {
    if (value == null) {
        return value;
    }

    return {
        
            ...value,
        'description': value['description'],
        'id': value['id'],
        'metadata': value['metadata'],
        'timestamp': ((value['timestamp']).toISOString()),
        'type': value['type'],
        'userId': value['userId'],
    };
}

