/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { UserType } from './UserType';
import {
    UserTypeFromJSON,
    UserTypeFromJSONTyped,
    UserTypeToJSON,
    UserTypeToJSONTyped,
} from './UserType';

/**
 * 
 * @export
 * @interface PlatformUserSummary
 */
export interface PlatformUserSummary {
    [key: string]: any | any;
    /**
     * Whether user is active
     * @type {boolean}
     * @memberof PlatformUserSummary
     */
    active: boolean;
    /**
     * Authentication provider
     * @type {string}
     * @memberof PlatformUserSummary
     */
    authProvider: string;
    /**
     * Whether user is blocked
     * @type {boolean}
     * @memberof PlatformUserSummary
     */
    blocked: boolean;
    /**
     * Creation timestamp
     * @type {Date}
     * @memberof PlatformUserSummary
     */
    createdAt: Date;
    /**
     * User who created this user
     * @type {string}
     * @memberof PlatformUserSummary
     */
    createdBy?: string;
    /**
     * Custom user attributes
     * @type {object}
     * @memberof PlatformUserSummary
     */
    customAttributes?: object;
    /**
     * Customer management system ID
     * @type {string}
     * @memberof PlatformUserSummary
     */
    customerId?: string;
    /**
     * User email
     * @type {string}
     * @memberof PlatformUserSummary
     */
    email: string;
    /**
     * Whether email is verified
     * @type {boolean}
     * @memberof PlatformUserSummary
     */
    emailVerified: boolean;
    /**
     * External provider user ID
     * @type {string}
     * @memberof PlatformUserSummary
     */
    externalId?: string;
    /**
     * First name
     * @type {string}
     * @memberof PlatformUserSummary
     */
    firstName?: string;
    /**
     * User ID
     * @type {string}
     * @memberof PlatformUserSummary
     */
    id: string;
    /**
     * Whether user is a platform administrator
     * @type {boolean}
     * @memberof PlatformUserSummary
     */
    isPlatformAdmin: boolean;
    /**
     * Last login
     * @type {Date}
     * @memberof PlatformUserSummary
     */
    lastLogin?: Date;
    /**
     * Last login timestamp
     * @type {Date}
     * @memberof PlatformUserSummary
     */
    lastLoginAt?: Date;
    /**
     * Last login IP address
     * @type {string}
     * @memberof PlatformUserSummary
     */
    lastLoginIp?: string;
    /**
     * Last name
     * @type {string}
     * @memberof PlatformUserSummary
     */
    lastName?: string;
    /**
     * Last password change timestamp
     * @type {Date}
     * @memberof PlatformUserSummary
     */
    lastPasswordChange?: Date;
    /**
     * User locale
     * @type {string}
     * @memberof PlatformUserSummary
     */
    locale: string;
    /**
     * Number of logins
     * @type {number}
     * @memberof PlatformUserSummary
     */
    loginCount: number;
    /**
     * Additional user metadata
     * @type {object}
     * @memberof PlatformUserSummary
     */
    metadata?: object;
    /**
     * Primary organization ID
     * @type {string}
     * @memberof PlatformUserSummary
     */
    organizationId?: string;
    /**
     * Phone number
     * @type {string}
     * @memberof PlatformUserSummary
     */
    phoneNumber: string;
    /**
     * Whether phone is verified
     * @type {boolean}
     * @memberof PlatformUserSummary
     */
    phoneVerified: boolean;
    /**
     * Primary organization for multi-org users
     * @type {string}
     * @memberof PlatformUserSummary
     */
    primaryOrganizationId?: string;
    /**
     * Profile image URL
     * @type {string}
     * @memberof PlatformUserSummary
     */
    profileImageUrl?: string;
    /**
     * User timezone
     * @type {string}
     * @memberof PlatformUserSummary
     */
    timezone?: string;
    /**
     * User type
     * @type {UserType}
     * @memberof PlatformUserSummary
     */
    userType: UserType;
    /**
     * Username
     * @type {string}
     * @memberof PlatformUserSummary
     */
    username?: string;
}



/**
 * Check if a given object implements the PlatformUserSummary interface.
 */
export function instanceOfPlatformUserSummary(value: object): value is PlatformUserSummary {
    if (!('active' in value) || value['active'] === undefined) return false;
    if (!('authProvider' in value) || value['authProvider'] === undefined) return false;
    if (!('blocked' in value) || value['blocked'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('email' in value) || value['email'] === undefined) return false;
    if (!('emailVerified' in value) || value['emailVerified'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('isPlatformAdmin' in value) || value['isPlatformAdmin'] === undefined) return false;
    if (!('locale' in value) || value['locale'] === undefined) return false;
    if (!('loginCount' in value) || value['loginCount'] === undefined) return false;
    if (!('phoneNumber' in value) || value['phoneNumber'] === undefined) return false;
    if (!('phoneVerified' in value) || value['phoneVerified'] === undefined) return false;
    if (!('userType' in value) || value['userType'] === undefined) return false;
    return true;
}

export function PlatformUserSummaryFromJSON(json: any): PlatformUserSummary {
    return PlatformUserSummaryFromJSONTyped(json, false);
}

export function PlatformUserSummaryFromJSONTyped(json: any, ignoreDiscriminator: boolean): PlatformUserSummary {
    if (json == null) {
        return json;
    }
    return {
        
            ...json,
        'active': json['active'],
        'authProvider': json['authProvider'],
        'blocked': json['blocked'],
        'createdAt': (new Date(json['createdAt'])),
        'createdBy': json['createdBy'] == null ? undefined : json['createdBy'],
        'customAttributes': json['customAttributes'] == null ? undefined : json['customAttributes'],
        'customerId': json['customerId'] == null ? undefined : json['customerId'],
        'email': json['email'],
        'emailVerified': json['emailVerified'],
        'externalId': json['externalId'] == null ? undefined : json['externalId'],
        'firstName': json['firstName'] == null ? undefined : json['firstName'],
        'id': json['id'],
        'isPlatformAdmin': json['isPlatformAdmin'],
        'lastLogin': json['lastLogin'] == null ? undefined : (new Date(json['lastLogin'])),
        'lastLoginAt': json['lastLoginAt'] == null ? undefined : (new Date(json['lastLoginAt'])),
        'lastLoginIp': json['lastLoginIp'] == null ? undefined : json['lastLoginIp'],
        'lastName': json['lastName'] == null ? undefined : json['lastName'],
        'lastPasswordChange': json['lastPasswordChange'] == null ? undefined : (new Date(json['lastPasswordChange'])),
        'locale': json['locale'],
        'loginCount': json['loginCount'],
        'metadata': json['metadata'] == null ? undefined : json['metadata'],
        'organizationId': json['organizationId'] == null ? undefined : json['organizationId'],
        'phoneNumber': json['phoneNumber'],
        'phoneVerified': json['phoneVerified'],
        'primaryOrganizationId': json['primaryOrganizationId'] == null ? undefined : json['primaryOrganizationId'],
        'profileImageUrl': json['profileImageUrl'] == null ? undefined : json['profileImageUrl'],
        'timezone': json['timezone'] == null ? undefined : json['timezone'],
        'userType': UserTypeFromJSON(json['userType']),
        'username': json['username'] == null ? undefined : json['username'],
    };
}

export function PlatformUserSummaryToJSON(json: any): PlatformUserSummary {
    return PlatformUserSummaryToJSONTyped(json, false);
}

export function PlatformUserSummaryToJSONTyped(value?: PlatformUserSummary | null, ignoreDiscriminator = false): any {
    if (value == null) {
        return value;
    }

    return {
        
            ...value,
        'active': value['active'],
        'authProvider': value['authProvider'],
        'blocked': value['blocked'],
        'createdAt': ((value['createdAt']).toISOString()),
        'createdBy': value['createdBy'],
        'customAttributes': value['customAttributes'],
        'customerId': value['customerId'],
        'email': value['email'],
        'emailVerified': value['emailVerified'],
        'externalId': value['externalId'],
        'firstName': value['firstName'],
        'id': value['id'],
        'isPlatformAdmin': value['isPlatformAdmin'],
        'lastLogin': value['lastLogin'] == null ? undefined : ((value['lastLogin']).toISOString()),
        'lastLoginAt': value['lastLoginAt'] == null ? undefined : ((value['lastLoginAt']).toISOString()),
        'lastLoginIp': value['lastLoginIp'],
        'lastName': value['lastName'],
        'lastPasswordChange': value['lastPasswordChange'] == null ? undefined : ((value['lastPasswordChange']).toISOString()),
        'locale': value['locale'],
        'loginCount': value['loginCount'],
        'metadata': value['metadata'],
        'organizationId': value['organizationId'],
        'phoneNumber': value['phoneNumber'],
        'phoneVerified': value['phoneVerified'],
        'primaryOrganizationId': value['primaryOrganizationId'],
        'profileImageUrl': value['profileImageUrl'],
        'timezone': value['timezone'],
        'userType': UserTypeToJSON(value['userType']),
        'username': value['username'],
    };
}

