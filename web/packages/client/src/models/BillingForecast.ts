/* tslint:disable */
/* eslint-disable */
/**
 * Frank Authentication API
 * Multi-tenant authentication SaaS platform API with Clerk.js compatibility
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@frankauth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ForecastPeriod } from './ForecastPeriod';
import {
    ForecastPeriodFromJSON,
    ForecastPeriodFromJSONTyped,
    ForecastPeriodToJSON,
    ForecastPeriodToJSONTyped,
} from './ForecastPeriod';

/**
 * 
 * @export
 * @interface BillingForecast
 */
export interface BillingForecast {
    /**
     * 
     * @type {Array<string>}
     * @memberof BillingForecast
     */
    assumptions: Array<string> | null;
    /**
     * 
     * @type {number}
     * @memberof BillingForecast
     */
    confidencePercent: number;
    /**
     * 
     * @type {ForecastPeriod}
     * @memberof BillingForecast
     */
    nextMonth: ForecastPeriod;
    /**
     * 
     * @type {ForecastPeriod}
     * @memberof BillingForecast
     */
    nextQuarter: ForecastPeriod;
    /**
     * 
     * @type {ForecastPeriod}
     * @memberof BillingForecast
     */
    nextYear: ForecastPeriod;
}

/**
 * Check if a given object implements the BillingForecast interface.
 */
export function instanceOfBillingForecast(value: object): value is BillingForecast {
    if (!('assumptions' in value) || value['assumptions'] === undefined) return false;
    if (!('confidencePercent' in value) || value['confidencePercent'] === undefined) return false;
    if (!('nextMonth' in value) || value['nextMonth'] === undefined) return false;
    if (!('nextQuarter' in value) || value['nextQuarter'] === undefined) return false;
    if (!('nextYear' in value) || value['nextYear'] === undefined) return false;
    return true;
}

export function BillingForecastFromJSON(json: any): BillingForecast {
    return BillingForecastFromJSONTyped(json, false);
}

export function BillingForecastFromJSONTyped(json: any, ignoreDiscriminator: boolean): BillingForecast {
    if (json == null) {
        return json;
    }
    return {
        
        'assumptions': json['assumptions'] == null ? null : json['assumptions'],
        'confidencePercent': json['confidence_percent'],
        'nextMonth': ForecastPeriodFromJSON(json['next_month']),
        'nextQuarter': ForecastPeriodFromJSON(json['next_quarter']),
        'nextYear': ForecastPeriodFromJSON(json['next_year']),
    };
}

export function BillingForecastToJSON(json: any): BillingForecast {
    return BillingForecastToJSONTyped(json, false);
}

export function BillingForecastToJSONTyped(value?: BillingForecast | null, ignoreDiscriminator = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'assumptions': value['assumptions'],
        'confidence_percent': value['confidencePercent'],
        'next_month': ForecastPeriodToJSON(value['nextMonth']),
        'next_quarter': ForecastPeriodToJSON(value['nextQuarter']),
        'next_year': ForecastPeriodToJSON(value['nextYear']),
    };
}

