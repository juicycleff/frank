// This file is auto-generated by @hey-api/openapi-ts

import type { HealthCheckResponse, HealthMetricsResponse, HealthReadyResponse, HealthVersionResponse, ApiKeysListResponse, AuthLoginResponse, MfaSendCodeResponse, PasswordlessMagicLinkResponse, AuthRefreshTokenResponse, AuthRegisterResponse, EmailListTemplatesResponse, EmailCreateTemplateResponse, EmailGetTemplateByTypeResponse, EmailGetTemplateResponse, EmailUpdateTemplateResponse, OauthProviderListClientsResponse, OauthProviderCreateClientResponse, OauthProviderGetClientResponse, OauthProviderUpdateClientResponse, OauthProviderIntrospectResponse, OauthProviderListScopesResponse, OauthProviderTokenResponse, OauthProviderUserinfoResponse, OrganizationsListResponse, OrganizationsListMembersResponse, RbacListPermissionsResponse, RbacListRolesResponse, UsersListResponse, UsersGetSessionsResponse, WebhooksListResponse, WebhooksCreateResponse, WebhooksTriggerEventResponse, WebhooksGetResponse, WebhooksUpdateResponse, WebhooksListEventsResponse, WebhooksReplayEventResponse } from './types.gen';

const healthResponseSchemaResponseTransformer = (data: any) => {
    data.timestamp = new Date(data.timestamp);
    return data;
};

export const healthCheckResponseTransformer = async (data: any): Promise<HealthCheckResponse> => {
    data = healthResponseSchemaResponseTransformer(data);
    return data;
};

const metricsResponseBodySchemaResponseTransformer = (data: any) => {
    if (data.errors) {
        data.errors = BigInt(data.errors.toString());
    }
    data.goroutines = BigInt(data.goroutines.toString());
    data.memory_usage = BigInt(data.memory_usage.toString());
    if (data.requests) {
        data.requests = BigInt(data.requests.toString());
    }
    data.uptime = BigInt(data.uptime.toString());
    return data;
};

export const healthMetricsResponseTransformer = async (data: any): Promise<HealthMetricsResponse> => {
    data = metricsResponseBodySchemaResponseTransformer(data);
    return data;
};

const readyResponseSchemaResponseTransformer = (data: any) => {
    data.timestamp = new Date(data.timestamp);
    return data;
};

export const healthReadyResponseTransformer = async (data: any): Promise<HealthReadyResponse> => {
    data = readyResponseSchemaResponseTransformer(data);
    return data;
};

const versionResponseBodySchemaResponseTransformer = (data: any) => {
    data.build_date = new Date(data.build_date);
    return data;
};

export const healthVersionResponseTransformer = async (data: any): Promise<HealthVersionResponse> => {
    data = versionResponseBodySchemaResponseTransformer(data);
    return data;
};

const paginationSchemaResponseTransformer = (data: any) => {
    data.current_page = BigInt(data.current_page.toString());
    data.limit = BigInt(data.limit.toString());
    data.offset = BigInt(data.offset.toString());
    data.total = BigInt(data.total.toString());
    data.total_pages = BigInt(data.total_pages.toString());
    return data;
};

const listResponseBodySchemaResponseTransformer = (data: any) => {
    data.pagination = paginationSchemaResponseTransformer(data.pagination);
    data.total = BigInt(data.total.toString());
    return data;
};

export const apiKeysListResponseTransformer = async (data: any): Promise<ApiKeysListResponse> => {
    data = listResponseBodySchemaResponseTransformer(data);
    return data;
};

const loginResponse2SchemaResponseTransformer = (data: any) => {
    data.expires_at = BigInt(data.expires_at.toString());
    return data;
};

export const authLoginResponseTransformer = async (data: any): Promise<AuthLoginResponse> => {
    data = loginResponse2SchemaResponseTransformer(data);
    return data;
};

const sendCodeResponseBodySchemaResponseTransformer = (data: any) => {
    data.expires_at = BigInt(data.expires_at.toString());
    return data;
};

export const mfaSendCodeResponseTransformer = async (data: any): Promise<MfaSendCodeResponse> => {
    data = sendCodeResponseBodySchemaResponseTransformer(data);
    return data;
};

const magicLinkResponseBodySchemaResponseTransformer = (data: any) => {
    data.expires_in = BigInt(data.expires_in.toString());
    return data;
};

export const passwordlessMagicLinkResponseTransformer = async (data: any): Promise<PasswordlessMagicLinkResponse> => {
    data = magicLinkResponseBodySchemaResponseTransformer(data);
    return data;
};

const refreshTokenResponseSchemaResponseTransformer = (data: any) => {
    data.expires_at = BigInt(data.expires_at.toString());
    return data;
};

export const authRefreshTokenResponseTransformer = async (data: any): Promise<AuthRefreshTokenResponse> => {
    data = refreshTokenResponseSchemaResponseTransformer(data);
    return data;
};

const loginResponse3SchemaResponseTransformer = (data: any) => {
    data.expires_at = BigInt(data.expires_at.toString());
    return data;
};

export const authRegisterResponseTransformer = async (data: any): Promise<AuthRegisterResponse> => {
    data = loginResponse3SchemaResponseTransformer(data);
    return data;
};

const emailTemplateResponseSchemaResponseTransformer = (data: any) => {
    data.created_at = new Date(data.created_at);
    data.updated_at = new Date(data.updated_at);
    return data;
};

const listTemplatesResponseBodySchemaResponseTransformer = (data: any) => {
    data.data = data.data.map((item: any) => {
        return emailTemplateResponseSchemaResponseTransformer(item);
    });
    data.pagination = paginationSchemaResponseTransformer(data.pagination);
    return data;
};

export const emailListTemplatesResponseTransformer = async (data: any): Promise<EmailListTemplatesResponse> => {
    data = listTemplatesResponseBodySchemaResponseTransformer(data);
    return data;
};

export const emailCreateTemplateResponseTransformer = async (data: any): Promise<EmailCreateTemplateResponse> => {
    data = emailTemplateResponseSchemaResponseTransformer(data);
    return data;
};

export const emailGetTemplateByTypeResponseTransformer = async (data: any): Promise<EmailGetTemplateByTypeResponse> => {
    data = emailTemplateResponseSchemaResponseTransformer(data);
    return data;
};

export const emailGetTemplateResponseTransformer = async (data: any): Promise<EmailGetTemplateResponse> => {
    data = emailTemplateResponseSchemaResponseTransformer(data);
    return data;
};

export const emailUpdateTemplateResponseTransformer = async (data: any): Promise<EmailUpdateTemplateResponse> => {
    data = emailTemplateResponseSchemaResponseTransformer(data);
    return data;
};

const oAuthClientResponseSchemaResponseTransformer = (data: any) => {
    if (data.refresh_token_expiry_seconds) {
        data.refresh_token_expiry_seconds = BigInt(data.refresh_token_expiry_seconds.toString());
    }
    if (data.token_expiry_seconds) {
        data.token_expiry_seconds = BigInt(data.token_expiry_seconds.toString());
    }
    return data;
};

const listClientsResponseBodySchemaResponseTransformer = (data: any) => {
    data.data = data.data.map((item: any) => {
        return oAuthClientResponseSchemaResponseTransformer(item);
    });
    data.pagination = paginationSchemaResponseTransformer(data.pagination);
    return data;
};

export const oauthProviderListClientsResponseTransformer = async (data: any): Promise<OauthProviderListClientsResponse> => {
    data = listClientsResponseBodySchemaResponseTransformer(data);
    return data;
};

const oAuthClientWithSecretResponseSchemaResponseTransformer = (data: any) => {
    if (data.refresh_token_expiry_seconds) {
        data.refresh_token_expiry_seconds = BigInt(data.refresh_token_expiry_seconds.toString());
    }
    if (data.token_expiry_seconds) {
        data.token_expiry_seconds = BigInt(data.token_expiry_seconds.toString());
    }
    return data;
};

export const oauthProviderCreateClientResponseTransformer = async (data: any): Promise<OauthProviderCreateClientResponse> => {
    data = oAuthClientWithSecretResponseSchemaResponseTransformer(data);
    return data;
};

export const oauthProviderGetClientResponseTransformer = async (data: any): Promise<OauthProviderGetClientResponse> => {
    data = oAuthClientResponseSchemaResponseTransformer(data);
    return data;
};

export const oauthProviderUpdateClientResponseTransformer = async (data: any): Promise<OauthProviderUpdateClientResponse> => {
    data = oAuthClientResponseSchemaResponseTransformer(data);
    return data;
};

const introspectResponseBodySchemaResponseTransformer = (data: any) => {
    if (data.exp) {
        data.exp = BigInt(data.exp.toString());
    }
    if (data.iat) {
        data.iat = BigInt(data.iat.toString());
    }
    if (data.nbf) {
        data.nbf = BigInt(data.nbf.toString());
    }
    return data;
};

export const oauthProviderIntrospectResponseTransformer = async (data: any): Promise<OauthProviderIntrospectResponse> => {
    data = introspectResponseBodySchemaResponseTransformer(data);
    return data;
};

const listScopesResponseBodySchemaResponseTransformer = (data: any) => {
    data.pagination = paginationSchemaResponseTransformer(data.pagination);
    return data;
};

export const oauthProviderListScopesResponseTransformer = async (data: any): Promise<OauthProviderListScopesResponse> => {
    data = listScopesResponseBodySchemaResponseTransformer(data);
    return data;
};

const tokenResponseBodySchemaResponseTransformer = (data: any) => {
    data.expires_in = BigInt(data.expires_in.toString());
    return data;
};

export const oauthProviderTokenResponseTransformer = async (data: any): Promise<OauthProviderTokenResponse> => {
    data = tokenResponseBodySchemaResponseTransformer(data);
    return data;
};

const userinfoResponseBodySchemaResponseTransformer = (data: any) => {
    if (data.updated_at) {
        data.updated_at = BigInt(data.updated_at.toString());
    }
    return data;
};

export const oauthProviderUserinfoResponseTransformer = async (data: any): Promise<OauthProviderUserinfoResponse> => {
    data = userinfoResponseBodySchemaResponseTransformer(data);
    return data;
};

const listResponseBody2SchemaResponseTransformer = (data: any) => {
    data.pagination = paginationSchemaResponseTransformer(data.pagination);
    return data;
};

export const organizationsListResponseTransformer = async (data: any): Promise<OrganizationsListResponse> => {
    data = listResponseBody2SchemaResponseTransformer(data);
    return data;
};

const listMembersResponseBodySchemaResponseTransformer = (data: any) => {
    data.pagination = paginationSchemaResponseTransformer(data.pagination);
    return data;
};

export const organizationsListMembersResponseTransformer = async (data: any): Promise<OrganizationsListMembersResponse> => {
    data = listMembersResponseBodySchemaResponseTransformer(data);
    return data;
};

const listPermissionsResponseSchemaResponseTransformer = (data: any) => {
    data.pagination = paginationSchemaResponseTransformer(data.pagination);
    return data;
};

export const rbacListPermissionsResponseTransformer = async (data: any): Promise<RbacListPermissionsResponse> => {
    data = listPermissionsResponseSchemaResponseTransformer(data);
    return data;
};

const listRolesResponseBodySchemaResponseTransformer = (data: any) => {
    data.pagination = paginationSchemaResponseTransformer(data.pagination);
    return data;
};

export const rbacListRolesResponseTransformer = async (data: any): Promise<RbacListRolesResponse> => {
    data = listRolesResponseBodySchemaResponseTransformer(data);
    return data;
};

const listResponseBody4SchemaResponseTransformer = (data: any) => {
    data.pagination = paginationSchemaResponseTransformer(data.pagination);
    return data;
};

export const usersListResponseTransformer = async (data: any): Promise<UsersListResponse> => {
    data = listResponseBody4SchemaResponseTransformer(data);
    return data;
};

const sessionSchemaResponseTransformer = (data: any) => {
    data.created_at = new Date(data.created_at);
    data.expires_at = new Date(data.expires_at);
    if (data.last_active_at) {
        data.last_active_at = new Date(data.last_active_at);
    }
    data.updated_at = new Date(data.updated_at);
    return data;
};

const getUserSessionResponseSchemaResponseTransformer = (data: any) => {
    data.data = data.data.map((item: any) => {
        return sessionSchemaResponseTransformer(item);
    });
    data.pagination = paginationSchemaResponseTransformer(data.pagination);
    return data;
};

export const usersGetSessionsResponseTransformer = async (data: any): Promise<UsersGetSessionsResponse> => {
    data = getUserSessionResponseSchemaResponseTransformer(data);
    return data;
};

const webhookResponseSchemaResponseTransformer = (data: any) => {
    if (data.retry_count) {
        data.retry_count = BigInt(data.retry_count.toString());
    }
    if (data.timeout_ms) {
        data.timeout_ms = BigInt(data.timeout_ms.toString());
    }
    return data;
};

const listResponseBody5SchemaResponseTransformer = (data: any) => {
    data.data = data.data.map((item: any) => {
        return webhookResponseSchemaResponseTransformer(item);
    });
    data.pagination = paginationSchemaResponseTransformer(data.pagination);
    return data;
};

export const webhooksListResponseTransformer = async (data: any): Promise<WebhooksListResponse> => {
    data = listResponseBody5SchemaResponseTransformer(data);
    return data;
};

const webhookSecretResponseSchemaResponseTransformer = (data: any) => {
    if (data.retry_count) {
        data.retry_count = BigInt(data.retry_count.toString());
    }
    if (data.timeout_ms) {
        data.timeout_ms = BigInt(data.timeout_ms.toString());
    }
    return data;
};

export const webhooksCreateResponseTransformer = async (data: any): Promise<WebhooksCreateResponse> => {
    data = webhookSecretResponseSchemaResponseTransformer(data);
    return data;
};

const webhookEventResponseSchemaResponseTransformer = (data: any) => {
    data.attempts = BigInt(data.attempts.toString());
    if (data.status_code) {
        data.status_code = BigInt(data.status_code.toString());
    }
    return data;
};

export const webhooksTriggerEventResponseTransformer = async (data: any): Promise<WebhooksTriggerEventResponse> => {
    data = webhookEventResponseSchemaResponseTransformer(data);
    return data;
};

export const webhooksGetResponseTransformer = async (data: any): Promise<WebhooksGetResponse> => {
    data = webhookResponseSchemaResponseTransformer(data);
    return data;
};

export const webhooksUpdateResponseTransformer = async (data: any): Promise<WebhooksUpdateResponse> => {
    data = webhookResponseSchemaResponseTransformer(data);
    return data;
};

const listEventsResponseBodySchemaResponseTransformer = (data: any) => {
    data.data = data.data.map((item: any) => {
        return webhookEventResponseSchemaResponseTransformer(item);
    });
    data.pagination = paginationSchemaResponseTransformer(data.pagination);
    return data;
};

export const webhooksListEventsResponseTransformer = async (data: any): Promise<WebhooksListEventsResponse> => {
    data = listEventsResponseBodySchemaResponseTransformer(data);
    return data;
};

export const webhooksReplayEventResponseTransformer = async (data: any): Promise<WebhooksReplayEventResponse> => {
    data = webhookEventResponseSchemaResponseTransformer(data);
    return data;
};