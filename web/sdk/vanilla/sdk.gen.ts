// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { WebHomeData, HealthDebugData, HealthCheckData, HealthCheckResponse, HealthCheckError, HealthMetricsData, HealthMetricsResponse, HealthReadyData, HealthReadyResponse, HealthReadyError, HealthVersionData, HealthVersionResponse, AdminHome1Data, AdminAdminFilepathData, AdminFaviconIcoData, AdminRobotsTxtData, WebHome1Data, WebUiFilepathData, RbacCheckPermissionData, RbacCheckPermissionResponse, RbacCheckPermissionError, RbacCheckRoleData, RbacCheckRoleResponse, RbacCheckRoleError, ApiKeysListData, ApiKeysListResponse, ApiKeysListError, ApiKeysCreateData, ApiKeysCreateResponse, ApiKeysCreateError, ApiKeysValidateData, ApiKeysValidateResponse, ApiKeysValidateError, ApiKeysDeleteData, ApiKeysDeleteResponse, ApiKeysDeleteError, ApiKeysGetData, ApiKeysGetResponse, ApiKeysGetError, ApiKeysUpdateData, ApiKeysUpdateResponse, ApiKeysUpdateError, AuthCsrfData, AuthCsrfResponse, AuthCsrfError, AuthForgotPasswordData, AuthForgotPasswordResponse, AuthForgotPasswordError, AuthLoginData, AuthLoginResponse, AuthLoginError, AuthLogoutData, AuthLogoutResponse, AuthLogoutError, AuthMeData, AuthMeResponse, AuthMeError, MfaEnrollData, MfaEnrollResponse, MfaEnrollError, MfaMethodsData, MfaMethodsResponse, MfaMethodsError, MfaSendCodeData, MfaSendCodeResponse, MfaSendCodeError, MfaUnenrollData, MfaUnenrollResponse, MfaUnenrollError, MfaVerifyData, MfaVerifyResponse, MfaVerifyError, OauthClientProviderCallbackData, OauthClientProviderCallbackResponse, OauthClientProviderCallbackError, OauthClientListProvidersData, OauthClientListProvidersResponse, OauthClientListProvidersError, OauthClientProviderAuthData, OauthClientProviderAuthError, PasskeysListData, PasskeysListResponse, PasskeysListError, PasskeysLoginBeginData, PasskeysLoginBeginResponse, PasskeysLoginBeginError, PasskeysLoginCompleteData, PasskeysLoginCompleteResponse, PasskeysLoginCompleteError, PasskeysRegisterBeginData, PasskeysRegisterBeginResponse, PasskeysRegisterBeginError, PasskeysRegisterCompleteData, PasskeysRegisterCompleteResponse, PasskeysRegisterCompleteError, PasskeysDeleteData, PasskeysDeleteResponse, PasskeysDeleteError, PasskeysUpdateData, PasskeysUpdateResponse, PasskeysUpdateError, PasswordlessEmailData, PasswordlessEmailResponse, PasswordlessEmailError, PasswordlessMagicLinkData, PasswordlessMagicLinkResponse, PasswordlessMagicLinkError, PasswordlessMethodsData, PasswordlessMethodsResponse, PasswordlessMethodsError, PasswordlessSmsData, PasswordlessSmsResponse, PasswordlessSmsError, PasswordlessVerifyData, PasswordlessVerifyResponse, PasswordlessVerifyError, AuthRefreshTokenData, AuthRefreshTokenResponse, AuthRefreshTokenError, AuthRegisterData, AuthRegisterResponse, AuthRegisterError, AuthResetPasswordData, AuthResetPasswordResponse, AuthResetPasswordError, SsoProviderCallbackData, SsoProviderCallbackResponse, SsoProviderCallbackError, SsoListIdentityProvidersData, SsoListIdentityProvidersResponse, SsoListIdentityProvidersError, SsoCreateIdentityProviderData, SsoCreateIdentityProviderResponse, SsoCreateIdentityProviderError, SsoDeleteIdentityProviderData, SsoDeleteIdentityProviderResponse, SsoDeleteIdentityProviderError, SsoGetIdentityProviderData, SsoGetIdentityProviderResponse, SsoGetIdentityProviderError, SsoUpdateIdentityProviderData, SsoUpdateIdentityProviderResponse, SsoUpdateIdentityProviderError, SsoListProvidersData, SsoListProvidersResponse, SsoListProvidersError, SsoProviderAuthData, SsoProviderAuthError, SsoSamlAcsData, SsoSamlAcsResponse, SsoSamlAcsError, SsoSamlMetadataData, SsoSamlMetadataResponse, SsoSamlMetadataError, AuthVerifyEmailData, AuthVerifyEmailResponse, AuthVerifyEmailError, EmailSendData, EmailSendResponse, EmailSendError, EmailSendTemplateData, EmailSendTemplateResponse, EmailSendTemplateError, EmailListTemplatesData, EmailListTemplatesResponse, EmailListTemplatesError, EmailCreateTemplateData, EmailCreateTemplateResponse, EmailCreateTemplateError, EmailGetTemplateByTypeData, EmailGetTemplateByTypeResponse, EmailGetTemplateByTypeError, EmailDeleteTemplateData, EmailDeleteTemplateResponse, EmailDeleteTemplateError, EmailGetTemplateData, EmailGetTemplateResponse, EmailGetTemplateError, EmailUpdateTemplateData, EmailUpdateTemplateResponse, EmailUpdateTemplateError, OauthProviderJwksData, OauthProviderJwksResponse, OauthProviderJwksError, OauthProviderOidcConfigurationData, OauthProviderOidcConfigurationResponse, OauthProviderOidcConfigurationError, OauthProviderAuthorizeData, OauthProviderAuthorizeResponse, OauthProviderAuthorizeError, OauthProviderListClientsData, OauthProviderListClientsResponse, OauthProviderListClientsError, OauthProviderCreateClientData, OauthProviderCreateClientResponse, OauthProviderCreateClientError, OauthProviderDeleteClientData, OauthProviderDeleteClientResponse, OauthProviderDeleteClientError, OauthProviderGetClientData, OauthProviderGetClientResponse, OauthProviderGetClientError, OauthProviderUpdateClientData, OauthProviderUpdateClientResponse, OauthProviderUpdateClientError, OauthProviderRotateClientSecretData, OauthProviderRotateClientSecretResponse, OauthProviderRotateClientSecretError, OauthProviderConsentData, OauthProviderConsentError, OauthProviderIntrospectData, OauthProviderIntrospectResponse, OauthProviderIntrospectError, OauthProviderRevokeData, OauthProviderRevokeError, OauthProviderListScopesData, OauthProviderListScopesResponse, OauthProviderListScopesError, OauthProviderCreateScopeData, OauthProviderCreateScopeResponse, OauthProviderCreateScopeError, OauthProviderDeleteScopeData, OauthProviderDeleteScopeResponse, OauthProviderDeleteScopeError, OauthProviderGetScopeData, OauthProviderGetScopeResponse, OauthProviderGetScopeError, OauthProviderUpdateScopeData, OauthProviderUpdateScopeResponse, OauthProviderUpdateScopeError, OauthProviderTokenData, OauthProviderTokenResponse, OauthProviderTokenError, OauthProviderUserinfoData, OauthProviderUserinfoResponse, OauthProviderUserinfoError, OrganizationsListData, OrganizationsListResponse, OrganizationsListError, OrganizationsCreateData, OrganizationsCreateResponse, OrganizationsCreateError, OrganizationsDeleteData, OrganizationsDeleteResponse, OrganizationsDeleteError, OrganizationsGetData, OrganizationsGetResponse, OrganizationsGetError, OrganizationsUpdateData, OrganizationsUpdateResponse, OrganizationsUpdateError, OrganizationsListFeaturesData, OrganizationsListFeaturesResponse, OrganizationsListFeaturesError, OrganizationsEnableFeatureData, OrganizationsEnableFeatureResponse, OrganizationsEnableFeatureError, OrganizationsDisableFeatureData, OrganizationsDisableFeatureResponse, OrganizationsDisableFeatureError, OrganizationsListMembersData, OrganizationsListMembersResponse, OrganizationsListMembersError, OrganizationsAddMemberData, OrganizationsAddMemberResponse, OrganizationsAddMemberError, OrganizationsRemoveMemberData, OrganizationsRemoveMemberResponse, OrganizationsRemoveMemberError, OrganizationsUpdateMemberData, OrganizationsUpdateMemberResponse, OrganizationsUpdateMemberError, RbacListPermissionsData, RbacListPermissionsResponse, RbacListPermissionsError, RbacCreatePermissionData, RbacCreatePermissionResponse, RbacCreatePermissionError, RbacDeletePermissionData, RbacDeletePermissionResponse, RbacDeletePermissionError, RbacGetPermissionData, RbacGetPermissionResponse, RbacGetPermissionError, RbacUpdatePermissionData, RbacUpdatePermissionResponse, RbacUpdatePermissionError, RbacListRolesData, RbacListRolesResponse, RbacListRolesError, RbacCreateRoleData, RbacCreateRoleResponse, RbacCreateRoleError, RbacDeleteRoleData, RbacDeleteRoleResponse, RbacDeleteRoleError, RbacGetRoleData, RbacGetRoleResponse, RbacGetRoleError, RbacUpdateRoleData, RbacUpdateRoleResponse, RbacUpdateRoleError, RbacListRolePermissionsData, RbacListRolePermissionsResponse, RbacListRolePermissionsError, RbacAddRolePermissionData, RbacAddRolePermissionResponse, RbacAddRolePermissionError, RbacRemoveRolePermissionData, RbacRemoveRolePermissionResponse, RbacRemoveRolePermissionError, UsersListData, UsersListResponse, UsersListError, UsersCreateData, UsersCreateResponse, UsersCreateError, UsersUpdateMeData, UsersUpdateMeResponse, UsersUpdateMeError, UsersUpdatePasswordData, UsersUpdatePasswordResponse, UsersUpdatePasswordError, UsersGetSessionsData, UsersGetSessionsResponse, UsersGetSessionsError, UsersDeleteSessionData, UsersDeleteSessionResponse, UsersDeleteSessionError, UsersDeleteData, UsersDeleteResponse, UsersDeleteError, UsersGetData, UsersGetResponse, UsersGetError, UsersUpdateData, UsersUpdateResponse, UsersUpdateError, UsersGetOrganizationsData, UsersGetOrganizationsResponse, UsersGetOrganizationsError, WebhooksListData, WebhooksListResponse, WebhooksListError, WebhooksCreateData, WebhooksCreateResponse, WebhooksCreateError, WebhooksReceiveData, WebhooksReceiveResponse, WebhooksReceiveError, WebhooksTriggerEventData, WebhooksTriggerEventResponse, WebhooksTriggerEventError, WebhooksDeleteData, WebhooksDeleteResponse, WebhooksDeleteError, WebhooksGetData, WebhooksGetResponse, WebhooksGetError, WebhooksUpdateData, WebhooksUpdateResponse, WebhooksUpdateError, WebhooksListEventsData, WebhooksListEventsResponse, WebhooksListEventsError, WebhooksReplayEventData, WebhooksReplayEventResponse, WebhooksReplayEventError } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * home web
 * Render the home page
 */
export const webHome = <ThrowOnError extends boolean = false>(options?: Options<WebHomeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/',
        ...options
    });
};

/**
 * debug health
 * Debug information (only available in development mode)
 */
export const healthDebug = <ThrowOnError extends boolean = false>(options?: Options<HealthDebugData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/__debug',
        ...options
    });
};

/**
 * check health
 * Check system health
 */
export const healthCheck = <ThrowOnError extends boolean = false>(options?: Options<HealthCheckData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<HealthCheckResponse, HealthCheckError, ThrowOnError>({
        url: '/__health',
        ...options
    });
};

/**
 * metrics health
 * Get system metrics
 */
export const healthMetrics = <ThrowOnError extends boolean = false>(options?: Options<HealthMetricsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<HealthMetricsResponse, unknown, ThrowOnError>({
        url: '/__metrics',
        ...options
    });
};

/**
 * ready health
 * Check if the system is ready to receive traffic
 */
export const healthReady = <ThrowOnError extends boolean = false>(options?: Options<HealthReadyData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<HealthReadyResponse, HealthReadyError, ThrowOnError>({
        url: '/__ready',
        ...options
    });
};

/**
 * version health
 * Get system version information
 */
export const healthVersion = <ThrowOnError extends boolean = false>(options?: Options<HealthVersionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<HealthVersionResponse, unknown, ThrowOnError>({
        url: '/__version',
        ...options
    });
};

/**
 * home admin
 * Render the home page
 */
export const adminHome1 = <ThrowOnError extends boolean = false>(options?: Options<AdminHome1Data, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/admin',
        ...options
    });
};

/**
 * Download ui/build
 */
export const adminAdminFilepath = <ThrowOnError extends boolean = false>(options: Options<AdminAdminFilepathData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/admin/{*filepath}',
        ...options
    });
};

/**
 * Download admin/public/favicon.ico
 */
export const adminFaviconIco = <ThrowOnError extends boolean = false>(options?: Options<AdminFaviconIcoData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/favicon.ico',
        ...options
    });
};

/**
 * Download admin/public/robots.txt
 */
export const adminRobotsTxt = <ThrowOnError extends boolean = false>(options?: Options<AdminRobotsTxtData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/robots.txt',
        ...options
    });
};

/**
 * home web
 * Render the home page
 */
export const webHome1 = <ThrowOnError extends boolean = false>(options?: Options<WebHome1Data, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/ui',
        ...options
    });
};

/**
 * Download ./web/client/dist
 */
export const webUiFilepath = <ThrowOnError extends boolean = false>(options: Options<WebUiFilepathData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/ui/{*filepath}',
        ...options
    });
};

/**
 * check_permission rbac
 * Check if user has a permission
 */
export const rbacCheckPermission = <ThrowOnError extends boolean = false>(options: Options<RbacCheckPermissionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RbacCheckPermissionResponse, RbacCheckPermissionError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/access/check',
        ...options
    });
};

/**
 * check_role rbac
 * Check if user has a role
 */
export const rbacCheckRole = <ThrowOnError extends boolean = false>(options: Options<RbacCheckRoleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RbacCheckRoleResponse, RbacCheckRoleError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/access/check-role',
        ...options
    });
};

/**
 * list api_keys
 * List API keys
 */
export const apiKeysList = <ThrowOnError extends boolean = false>(options?: Options<ApiKeysListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApiKeysListResponse, ApiKeysListError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/api-keys',
        ...options
    });
};

/**
 * create api_keys
 * Create a new API key
 */
export const apiKeysCreate = <ThrowOnError extends boolean = false>(options: Options<ApiKeysCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ApiKeysCreateResponse, ApiKeysCreateError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/api-keys',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * validate api_keys
 * Validate API key
 */
export const apiKeysValidate = <ThrowOnError extends boolean = false>(options: Options<ApiKeysValidateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ApiKeysValidateResponse, ApiKeysValidateError, ThrowOnError>({
        url: '/v1/api-keys/validate',
        ...options
    });
};

/**
 * delete api_keys
 * Delete API key
 */
export const apiKeysDelete = <ThrowOnError extends boolean = false>(options: Options<ApiKeysDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ApiKeysDeleteResponse, ApiKeysDeleteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/api-keys/{id}',
        ...options
    });
};

/**
 * get api_keys
 * Get API key by ID
 */
export const apiKeysGet = <ThrowOnError extends boolean = false>(options: Options<ApiKeysGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ApiKeysGetResponse, ApiKeysGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/api-keys/{id}',
        ...options
    });
};

/**
 * update api_keys
 * Update API key
 */
export const apiKeysUpdate = <ThrowOnError extends boolean = false>(options: Options<ApiKeysUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<ApiKeysUpdateResponse, ApiKeysUpdateError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/api-keys/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * csrf auth
 * Generates a CSRF token
 */
export const authCsrf = <ThrowOnError extends boolean = false>(options?: Options<AuthCsrfData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AuthCsrfResponse, AuthCsrfError, ThrowOnError>({
        url: '/v1/auth/csrf-token',
        ...options
    });
};

/**
 * forgot_password auth
 * Initiate password reset process
 */
export const authForgotPassword = <ThrowOnError extends boolean = false>(options: Options<AuthForgotPasswordData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AuthForgotPasswordResponse, AuthForgotPasswordError, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/auth/forgot-password',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * login auth
 * Authenticate user with email and password
 */
export const authLogin = <ThrowOnError extends boolean = false>(options: Options<AuthLoginData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AuthLoginResponse, AuthLoginError, ThrowOnError>({
        url: '/v1/auth/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * logout auth
 * Log out the current user
 */
export const authLogout = <ThrowOnError extends boolean = false>(options?: Options<AuthLogoutData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<AuthLogoutResponse, AuthLogoutError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/auth/logout',
        ...options
    });
};

/**
 * me auth
 * Get current user info
 */
export const authMe = <ThrowOnError extends boolean = false>(options?: Options<AuthMeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AuthMeResponse, AuthMeError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/auth/me',
        ...options
    });
};

/**
 * enroll mfa
 * Start MFA enrollment
 */
export const mfaEnroll = <ThrowOnError extends boolean = false>(options: Options<MfaEnrollData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MfaEnrollResponse, MfaEnrollError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/auth/mfa/enroll',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * methods mfa
 * Get enabled MFA methods
 */
export const mfaMethods = <ThrowOnError extends boolean = false>(options?: Options<MfaMethodsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MfaMethodsResponse, MfaMethodsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/auth/mfa/methods',
        ...options
    });
};

/**
 * send_code mfa
 * Send verification code
 */
export const mfaSendCode = <ThrowOnError extends boolean = false>(options: Options<MfaSendCodeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MfaSendCodeResponse, MfaSendCodeError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/auth/mfa/send-code',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * unenroll mfa
 * Disable MFA method
 */
export const mfaUnenroll = <ThrowOnError extends boolean = false>(options: Options<MfaUnenrollData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MfaUnenrollResponse, MfaUnenrollError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/auth/mfa/unenroll',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * verify mfa
 * Verify MFA code
 */
export const mfaVerify = <ThrowOnError extends boolean = false>(options: Options<MfaVerifyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MfaVerifyResponse, MfaVerifyError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/auth/mfa/verify',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * provider_callback oauth_client
 * Handle OAuth provider callback
 */
export const oauthClientProviderCallback = <ThrowOnError extends boolean = false>(options: Options<OauthClientProviderCallbackData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OauthClientProviderCallbackResponse, OauthClientProviderCallbackError, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/auth/oauth/callback/{provider}',
        ...options
    });
};

/**
 * list_providers oauth_client
 * List available OAuth providers
 */
export const oauthClientListProviders = <ThrowOnError extends boolean = false>(options?: Options<OauthClientListProvidersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<OauthClientListProvidersResponse, OauthClientListProvidersError, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/auth/oauth/providers',
        ...options
    });
};

/**
 * provider_auth oauth_client
 * Initiate authentication with an OAuth provider
 */
export const oauthClientProviderAuth = <ThrowOnError extends boolean = false>(options: Options<OauthClientProviderAuthData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, OauthClientProviderAuthError, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/auth/oauth/providers/{provider}',
        ...options
    });
};

/**
 * list passkeys
 * List registered passkeys
 */
export const passkeysList = <ThrowOnError extends boolean = false>(options?: Options<PasskeysListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<PasskeysListResponse, PasskeysListError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/auth/passkeys',
        ...options
    });
};

/**
 * login_begin passkeys
 * Begin passkey authentication
 */
export const passkeysLoginBegin = <ThrowOnError extends boolean = false>(options?: Options<PasskeysLoginBeginData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PasskeysLoginBeginResponse, PasskeysLoginBeginError, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/auth/passkeys/login/begin',
        ...options
    });
};

/**
 * login_complete passkeys
 * Complete passkey authentication
 */
export const passkeysLoginComplete = <ThrowOnError extends boolean = false>(options: Options<PasskeysLoginCompleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PasskeysLoginCompleteResponse, PasskeysLoginCompleteError, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/auth/passkeys/login/complete',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * register_begin passkeys
 * Begin passkey registration
 */
export const passkeysRegisterBegin = <ThrowOnError extends boolean = false>(options: Options<PasskeysRegisterBeginData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PasskeysRegisterBeginResponse, PasskeysRegisterBeginError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/auth/passkeys/register/begin',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * register_complete passkeys
 * Complete passkey registration
 */
export const passkeysRegisterComplete = <ThrowOnError extends boolean = false>(options: Options<PasskeysRegisterCompleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PasskeysRegisterCompleteResponse, PasskeysRegisterCompleteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/auth/passkeys/register/complete',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * delete passkeys
 * Delete passkey
 */
export const passkeysDelete = <ThrowOnError extends boolean = false>(options: Options<PasskeysDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<PasskeysDeleteResponse, PasskeysDeleteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/auth/passkeys/{id}',
        ...options
    });
};

/**
 * update passkeys
 * Update passkey
 */
export const passkeysUpdate = <ThrowOnError extends boolean = false>(options: Options<PasskeysUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PasskeysUpdateResponse, PasskeysUpdateError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/auth/passkeys/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * email passwordless
 * Initiate passwordless email authentication
 */
export const passwordlessEmail = <ThrowOnError extends boolean = false>(options: Options<PasswordlessEmailData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PasswordlessEmailResponse, PasswordlessEmailError, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/auth/passwordless/email',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * magic_link passwordless
 * Generate magic link for passwordless login
 */
export const passwordlessMagicLink = <ThrowOnError extends boolean = false>(options: Options<PasswordlessMagicLinkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PasswordlessMagicLinkResponse, PasswordlessMagicLinkError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/auth/passwordless/magic-link',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * methods passwordless
 * Get available passwordless authentication methods
 */
export const passwordlessMethods = <ThrowOnError extends boolean = false>(options?: Options<PasswordlessMethodsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<PasswordlessMethodsResponse, PasswordlessMethodsError, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/auth/passwordless/methods',
        ...options
    });
};

/**
 * sms passwordless
 * Initiate passwordless SMS authentication
 */
export const passwordlessSms = <ThrowOnError extends boolean = false>(options: Options<PasswordlessSmsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PasswordlessSmsResponse, PasswordlessSmsError, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/auth/passwordless/sms',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * verify passwordless
 * Verify passwordless authentication
 */
export const passwordlessVerify = <ThrowOnError extends boolean = false>(options: Options<PasswordlessVerifyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PasswordlessVerifyResponse, PasswordlessVerifyError, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/auth/passwordless/verify',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * refresh_token auth
 * Refresh an access token
 */
export const authRefreshToken = <ThrowOnError extends boolean = false>(options: Options<AuthRefreshTokenData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AuthRefreshTokenResponse, AuthRefreshTokenError, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/auth/refresh',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * register auth
 * Register a new user
 */
export const authRegister = <ThrowOnError extends boolean = false>(options: Options<AuthRegisterData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AuthRegisterResponse, AuthRegisterError, ThrowOnError>({
        url: '/v1/auth/register',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * reset_password auth
 * Reset password using token
 */
export const authResetPassword = <ThrowOnError extends boolean = false>(options: Options<AuthResetPasswordData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AuthResetPasswordResponse, AuthResetPasswordError, ThrowOnError>({
        url: '/v1/auth/reset-password',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * provider_callback sso
 * Handle SSO provider callback
 */
export const ssoProviderCallback = <ThrowOnError extends boolean = false>(options: Options<SsoProviderCallbackData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SsoProviderCallbackResponse, SsoProviderCallbackError, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/auth/sso/callback/{provider}',
        ...options
    });
};

/**
 * list_identity_providers sso
 * List identity providers
 */
export const ssoListIdentityProviders = <ThrowOnError extends boolean = false>(options: Options<SsoListIdentityProvidersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SsoListIdentityProvidersResponse, SsoListIdentityProvidersError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/auth/sso/identity-providers',
        ...options
    });
};

/**
 * create_identity_provider sso
 * Create a new identity provider
 */
export const ssoCreateIdentityProvider = <ThrowOnError extends boolean = false>(options: Options<SsoCreateIdentityProviderData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SsoCreateIdentityProviderResponse, SsoCreateIdentityProviderError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/auth/sso/identity-providers',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * delete_identity_provider sso
 * Delete identity provider
 */
export const ssoDeleteIdentityProvider = <ThrowOnError extends boolean = false>(options: Options<SsoDeleteIdentityProviderData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<SsoDeleteIdentityProviderResponse, SsoDeleteIdentityProviderError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/auth/sso/identity-providers/{id}',
        ...options
    });
};

/**
 * get_identity_provider sso
 * Get identity provider by ID
 */
export const ssoGetIdentityProvider = <ThrowOnError extends boolean = false>(options: Options<SsoGetIdentityProviderData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SsoGetIdentityProviderResponse, SsoGetIdentityProviderError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/auth/sso/identity-providers/{id}',
        ...options
    });
};

/**
 * update_identity_provider sso
 * Update identity provider
 */
export const ssoUpdateIdentityProvider = <ThrowOnError extends boolean = false>(options: Options<SsoUpdateIdentityProviderData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<SsoUpdateIdentityProviderResponse, SsoUpdateIdentityProviderError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/auth/sso/identity-providers/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * list_providers sso
 * List available SSO providers
 */
export const ssoListProviders = <ThrowOnError extends boolean = false>(options?: Options<SsoListProvidersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<SsoListProvidersResponse, SsoListProvidersError, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/auth/sso/providers',
        ...options
    });
};

/**
 * provider_auth sso
 * Initiate SSO authentication with a provider
 */
export const ssoProviderAuth = <ThrowOnError extends boolean = false>(options: Options<SsoProviderAuthData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, SsoProviderAuthError, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/auth/sso/providers/{provider}',
        ...options
    });
};

/**
 * saml_acs sso
 * SAML assertion consumer service
 */
export const ssoSamlAcs = <ThrowOnError extends boolean = false>(options: Options<SsoSamlAcsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SsoSamlAcsResponse, SsoSamlAcsError, ThrowOnError>({
        url: '/v1/auth/sso/saml/{id}/acs',
        ...options
    });
};

/**
 * saml_metadata sso
 * SAML metadata endpoint
 */
export const ssoSamlMetadata = <ThrowOnError extends boolean = false>(options: Options<SsoSamlMetadataData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SsoSamlMetadataResponse, SsoSamlMetadataError, ThrowOnError>({
        url: '/v1/auth/sso/saml/{id}/metadata',
        ...options
    });
};

/**
 * verify_email auth
 * Verify email using token
 */
export const authVerifyEmail = <ThrowOnError extends boolean = false>(options: Options<AuthVerifyEmailData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AuthVerifyEmailResponse, AuthVerifyEmailError, ThrowOnError>({
        url: '/v1/auth/verify-email',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * send email
 * Send email
 */
export const emailSend = <ThrowOnError extends boolean = false>(options: Options<EmailSendData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<EmailSendResponse, EmailSendError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/email/send',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * send_template email
 * Send email using a template
 */
export const emailSendTemplate = <ThrowOnError extends boolean = false>(options: Options<EmailSendTemplateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<EmailSendTemplateResponse, EmailSendTemplateError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/email/send-template',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * list_templates email
 * List email templates
 */
export const emailListTemplates = <ThrowOnError extends boolean = false>(options?: Options<EmailListTemplatesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<EmailListTemplatesResponse, EmailListTemplatesError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/email/templates',
        ...options
    });
};

/**
 * create_template email
 * Create a new email template
 */
export const emailCreateTemplate = <ThrowOnError extends boolean = false>(options: Options<EmailCreateTemplateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<EmailCreateTemplateResponse, EmailCreateTemplateError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/email/templates',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * get_template_by_type email
 * Get email template by type
 */
export const emailGetTemplateByType = <ThrowOnError extends boolean = false>(options: Options<EmailGetTemplateByTypeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<EmailGetTemplateByTypeResponse, EmailGetTemplateByTypeError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/email/templates/by-type/{type}',
        ...options
    });
};

/**
 * delete_template email
 * Delete email template
 */
export const emailDeleteTemplate = <ThrowOnError extends boolean = false>(options: Options<EmailDeleteTemplateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<EmailDeleteTemplateResponse, EmailDeleteTemplateError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/email/templates/{id}',
        ...options
    });
};

/**
 * get_template email
 * Get email template by ID
 */
export const emailGetTemplate = <ThrowOnError extends boolean = false>(options: Options<EmailGetTemplateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<EmailGetTemplateResponse, EmailGetTemplateError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/email/templates/{id}',
        ...options
    });
};

/**
 * update_template email
 * Update email template
 */
export const emailUpdateTemplate = <ThrowOnError extends boolean = false>(options: Options<EmailUpdateTemplateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<EmailUpdateTemplateResponse, EmailUpdateTemplateError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/email/templates/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * jwks oauth_provider
 * JSON Web Key Set
 */
export const oauthProviderJwks = <ThrowOnError extends boolean = false>(options?: Options<OauthProviderJwksData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<OauthProviderJwksResponse, OauthProviderJwksError, ThrowOnError>({
        url: '/v1/oauth/.well-known/jwks.json',
        ...options
    });
};

/**
 * oidc_configuration oauth_provider
 * OpenID Connect discovery configuration
 */
export const oauthProviderOidcConfiguration = <ThrowOnError extends boolean = false>(options?: Options<OauthProviderOidcConfigurationData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<OauthProviderOidcConfigurationResponse, OauthProviderOidcConfigurationError, ThrowOnError>({
        url: '/v1/oauth/.well-known/openid-configuration',
        ...options
    });
};

/**
 * authorize oauth_provider
 * OAuth2 authorization endpoint
 */
export const oauthProviderAuthorize = <ThrowOnError extends boolean = false>(options: Options<OauthProviderAuthorizeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OauthProviderAuthorizeResponse, OauthProviderAuthorizeError, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/oauth/authorize',
        ...options
    });
};

/**
 * list_clients oauth_provider
 * List OAuth clients
 */
export const oauthProviderListClients = <ThrowOnError extends boolean = false>(options?: Options<OauthProviderListClientsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<OauthProviderListClientsResponse, OauthProviderListClientsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/oauth/clients',
        ...options
    });
};

/**
 * create_client oauth_provider
 * Create a new OAuth client
 */
export const oauthProviderCreateClient = <ThrowOnError extends boolean = false>(options: Options<OauthProviderCreateClientData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OauthProviderCreateClientResponse, OauthProviderCreateClientError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/oauth/clients',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * delete_client oauth_provider
 * Delete OAuth client
 */
export const oauthProviderDeleteClient = <ThrowOnError extends boolean = false>(options: Options<OauthProviderDeleteClientData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<OauthProviderDeleteClientResponse, OauthProviderDeleteClientError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/oauth/clients/{id}',
        ...options
    });
};

/**
 * get_client oauth_provider
 * Get OAuth client by ID
 */
export const oauthProviderGetClient = <ThrowOnError extends boolean = false>(options: Options<OauthProviderGetClientData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OauthProviderGetClientResponse, OauthProviderGetClientError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/oauth/clients/{id}',
        ...options
    });
};

/**
 * update_client oauth_provider
 * Update OAuth client
 */
export const oauthProviderUpdateClient = <ThrowOnError extends boolean = false>(options: Options<OauthProviderUpdateClientData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<OauthProviderUpdateClientResponse, OauthProviderUpdateClientError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/oauth/clients/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * rotate_client_secret oauth_provider
 * Rotate OAuth client secret
 */
export const oauthProviderRotateClientSecret = <ThrowOnError extends boolean = false>(options: Options<OauthProviderRotateClientSecretData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OauthProviderRotateClientSecretResponse, OauthProviderRotateClientSecretError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/oauth/clients/{id}/rotate-secret',
        ...options
    });
};

/**
 * consent oauth_provider
 * Handle user consent for OAuth authorization
 */
export const oauthProviderConsent = <ThrowOnError extends boolean = false>(options: Options<OauthProviderConsentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, OauthProviderConsentError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/oauth/consent',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * introspect oauth_provider
 * OAuth2 token introspection endpoint
 */
export const oauthProviderIntrospect = <ThrowOnError extends boolean = false>(options: Options<OauthProviderIntrospectData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OauthProviderIntrospectResponse, OauthProviderIntrospectError, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/oauth/introspect',
        ...options
    });
};

/**
 * revoke oauth_provider
 * OAuth2 token revocation endpoint
 */
export const oauthProviderRevoke = <ThrowOnError extends boolean = false>(options: Options<OauthProviderRevokeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, OauthProviderRevokeError, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/oauth/revoke',
        ...options
    });
};

/**
 * list_scopes oauth_provider
 * List OAuth scopes
 */
export const oauthProviderListScopes = <ThrowOnError extends boolean = false>(options?: Options<OauthProviderListScopesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<OauthProviderListScopesResponse, OauthProviderListScopesError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/oauth/scopes',
        ...options
    });
};

/**
 * create_scope oauth_provider
 * Create a new OAuth scope
 */
export const oauthProviderCreateScope = <ThrowOnError extends boolean = false>(options: Options<OauthProviderCreateScopeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OauthProviderCreateScopeResponse, OauthProviderCreateScopeError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/oauth/scopes',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * delete_scope oauth_provider
 * Delete OAuth scope
 */
export const oauthProviderDeleteScope = <ThrowOnError extends boolean = false>(options: Options<OauthProviderDeleteScopeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<OauthProviderDeleteScopeResponse, OauthProviderDeleteScopeError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/oauth/scopes/{id}',
        ...options
    });
};

/**
 * get_scope oauth_provider
 * Get OAuth scope by ID
 */
export const oauthProviderGetScope = <ThrowOnError extends boolean = false>(options: Options<OauthProviderGetScopeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OauthProviderGetScopeResponse, OauthProviderGetScopeError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/oauth/scopes/{id}',
        ...options
    });
};

/**
 * update_scope oauth_provider
 * Update OAuth scope
 */
export const oauthProviderUpdateScope = <ThrowOnError extends boolean = false>(options: Options<OauthProviderUpdateScopeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<OauthProviderUpdateScopeResponse, OauthProviderUpdateScopeError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/oauth/scopes/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * token oauth_provider
 * OAuth2 token endpoint
 */
export const oauthProviderToken = <ThrowOnError extends boolean = false>(options: Options<OauthProviderTokenData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OauthProviderTokenResponse, OauthProviderTokenError, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/oauth/token',
        ...options
    });
};

/**
 * userinfo oauth_provider
 * OAuth2 UserInfo endpoint for OpenID Connect
 */
export const oauthProviderUserinfo = <ThrowOnError extends boolean = false>(options?: Options<OauthProviderUserinfoData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<OauthProviderUserinfoResponse, OauthProviderUserinfoError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/oauth/userinfo',
        ...options
    });
};

/**
 * list organizations
 * List organizations
 */
export const organizationsList = <ThrowOnError extends boolean = false>(options?: Options<OrganizationsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<OrganizationsListResponse, OrganizationsListError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/organizations',
        ...options
    });
};

/**
 * create organizations
 * Create a new organization
 */
export const organizationsCreate = <ThrowOnError extends boolean = false>(options: Options<OrganizationsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OrganizationsCreateResponse, OrganizationsCreateError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/organizations',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * delete organizations
 * Delete organization
 */
export const organizationsDelete = <ThrowOnError extends boolean = false>(options: Options<OrganizationsDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<OrganizationsDeleteResponse, OrganizationsDeleteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/organizations/{id}',
        ...options
    });
};

/**
 * get organizations
 * Get organization by ID
 */
export const organizationsGet = <ThrowOnError extends boolean = false>(options: Options<OrganizationsGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OrganizationsGetResponse, OrganizationsGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/organizations/{id}',
        ...options
    });
};

/**
 * update organizations
 * Update organization
 */
export const organizationsUpdate = <ThrowOnError extends boolean = false>(options: Options<OrganizationsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<OrganizationsUpdateResponse, OrganizationsUpdateError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/organizations/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * list_features organizations
 * List organization features
 */
export const organizationsListFeatures = <ThrowOnError extends boolean = false>(options: Options<OrganizationsListFeaturesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OrganizationsListFeaturesResponse, OrganizationsListFeaturesError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/organizations/{id}/features',
        ...options
    });
};

/**
 * enable_feature organizations
 * Enable a feature for an organization
 */
export const organizationsEnableFeature = <ThrowOnError extends boolean = false>(options: Options<OrganizationsEnableFeatureData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OrganizationsEnableFeatureResponse, OrganizationsEnableFeatureError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/organizations/{id}/features',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * disable_feature organizations
 * Disable a feature for an organization
 */
export const organizationsDisableFeature = <ThrowOnError extends boolean = false>(options: Options<OrganizationsDisableFeatureData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<OrganizationsDisableFeatureResponse, OrganizationsDisableFeatureError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/organizations/{id}/features/{feature_key}',
        ...options
    });
};

/**
 * list_members organizations
 * List organization members
 */
export const organizationsListMembers = <ThrowOnError extends boolean = false>(options: Options<OrganizationsListMembersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OrganizationsListMembersResponse, OrganizationsListMembersError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/organizations/{id}/members',
        ...options
    });
};

/**
 * add_member organizations
 * Add member to organization
 */
export const organizationsAddMember = <ThrowOnError extends boolean = false>(options: Options<OrganizationsAddMemberData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OrganizationsAddMemberResponse, OrganizationsAddMemberError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/organizations/{id}/members',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * remove_member organizations
 * Remove member from organization
 */
export const organizationsRemoveMember = <ThrowOnError extends boolean = false>(options: Options<OrganizationsRemoveMemberData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<OrganizationsRemoveMemberResponse, OrganizationsRemoveMemberError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/organizations/{id}/members/{user_id}',
        ...options
    });
};

/**
 * update_member organizations
 * Update organization member
 */
export const organizationsUpdateMember = <ThrowOnError extends boolean = false>(options: Options<OrganizationsUpdateMemberData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<OrganizationsUpdateMemberResponse, OrganizationsUpdateMemberError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/organizations/{id}/members/{user_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * list_permissions rbac
 * List permissions
 */
export const rbacListPermissions = <ThrowOnError extends boolean = false>(options?: Options<RbacListPermissionsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<RbacListPermissionsResponse, RbacListPermissionsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/permissions',
        ...options
    });
};

/**
 * create_permission rbac
 * Create a new permission
 */
export const rbacCreatePermission = <ThrowOnError extends boolean = false>(options: Options<RbacCreatePermissionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RbacCreatePermissionResponse, RbacCreatePermissionError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/permissions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * delete_permission rbac
 * Delete permission
 */
export const rbacDeletePermission = <ThrowOnError extends boolean = false>(options: Options<RbacDeletePermissionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RbacDeletePermissionResponse, RbacDeletePermissionError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/permissions/{id}',
        ...options
    });
};

/**
 * get_permission rbac
 * Get permission by ID
 */
export const rbacGetPermission = <ThrowOnError extends boolean = false>(options: Options<RbacGetPermissionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RbacGetPermissionResponse, RbacGetPermissionError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/permissions/{id}',
        ...options
    });
};

/**
 * update_permission rbac
 * Update permission
 */
export const rbacUpdatePermission = <ThrowOnError extends boolean = false>(options: Options<RbacUpdatePermissionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<RbacUpdatePermissionResponse, RbacUpdatePermissionError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/permissions/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * list_roles rbac
 * List roles
 */
export const rbacListRoles = <ThrowOnError extends boolean = false>(options?: Options<RbacListRolesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<RbacListRolesResponse, RbacListRolesError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/roles',
        ...options
    });
};

/**
 * create_role rbac
 * Create a new role
 */
export const rbacCreateRole = <ThrowOnError extends boolean = false>(options: Options<RbacCreateRoleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RbacCreateRoleResponse, RbacCreateRoleError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/roles',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * delete_role rbac
 * Delete role
 */
export const rbacDeleteRole = <ThrowOnError extends boolean = false>(options: Options<RbacDeleteRoleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RbacDeleteRoleResponse, RbacDeleteRoleError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/roles/{id}',
        ...options
    });
};

/**
 * get_role rbac
 * Get role by ID
 */
export const rbacGetRole = <ThrowOnError extends boolean = false>(options: Options<RbacGetRoleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RbacGetRoleResponse, RbacGetRoleError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/roles/{id}',
        ...options
    });
};

/**
 * update_role rbac
 * Update role
 */
export const rbacUpdateRole = <ThrowOnError extends boolean = false>(options: Options<RbacUpdateRoleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<RbacUpdateRoleResponse, RbacUpdateRoleError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/roles/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * list_role_permissions rbac
 * List role permissions
 */
export const rbacListRolePermissions = <ThrowOnError extends boolean = false>(options: Options<RbacListRolePermissionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RbacListRolePermissionsResponse, RbacListRolePermissionsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/roles/{id}/permissions',
        ...options
    });
};

/**
 * add_role_permission rbac
 * Add permission to role
 */
export const rbacAddRolePermission = <ThrowOnError extends boolean = false>(options: Options<RbacAddRolePermissionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RbacAddRolePermissionResponse, RbacAddRolePermissionError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/roles/{id}/permissions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * remove_role_permission rbac
 * Remove permission from role
 */
export const rbacRemoveRolePermission = <ThrowOnError extends boolean = false>(options: Options<RbacRemoveRolePermissionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RbacRemoveRolePermissionResponse, RbacRemoveRolePermissionError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/roles/{id}/permissions/{permission_id}',
        ...options
    });
};

/**
 * list users
 * List users
 */
export const usersList = <ThrowOnError extends boolean = false>(options?: Options<UsersListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UsersListResponse, UsersListError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users',
        ...options
    });
};

/**
 * create users
 * Create a new user
 */
export const usersCreate = <ThrowOnError extends boolean = false>(options: Options<UsersCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UsersCreateResponse, UsersCreateError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * update_me users
 * Update current user
 */
export const usersUpdateMe = <ThrowOnError extends boolean = false>(options: Options<UsersUpdateMeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UsersUpdateMeResponse, UsersUpdateMeError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/me',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * update_password users
 * Update current user password
 */
export const usersUpdatePassword = <ThrowOnError extends boolean = false>(options: Options<UsersUpdatePasswordData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UsersUpdatePasswordResponse, UsersUpdatePasswordError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/me/password',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * get_sessions users
 * Get current user sessions
 */
export const usersGetSessions = <ThrowOnError extends boolean = false>(options?: Options<UsersGetSessionsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UsersGetSessionsResponse, UsersGetSessionsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/me/sessions',
        ...options
    });
};

/**
 * delete_session users
 * Delete user session
 */
export const usersDeleteSession = <ThrowOnError extends boolean = false>(options: Options<UsersDeleteSessionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<UsersDeleteSessionResponse, UsersDeleteSessionError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/me/sessions/{session_id}',
        ...options
    });
};

/**
 * delete users
 * Delete user
 */
export const usersDelete = <ThrowOnError extends boolean = false>(options: Options<UsersDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<UsersDeleteResponse, UsersDeleteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/{id}',
        ...options
    });
};

/**
 * get users
 * Get user by ID
 */
export const usersGet = <ThrowOnError extends boolean = false>(options: Options<UsersGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UsersGetResponse, UsersGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/{id}',
        ...options
    });
};

/**
 * update users
 * Update user
 */
export const usersUpdate = <ThrowOnError extends boolean = false>(options: Options<UsersUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UsersUpdateResponse, UsersUpdateError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * get_organizations users
 * Get user organizations
 */
export const usersGetOrganizations = <ThrowOnError extends boolean = false>(options: Options<UsersGetOrganizationsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UsersGetOrganizationsResponse, UsersGetOrganizationsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/{id}/organizations',
        ...options
    });
};

/**
 * list webhooks
 * List webhooks
 */
export const webhooksList = <ThrowOnError extends boolean = false>(options?: Options<WebhooksListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<WebhooksListResponse, WebhooksListError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/webhooks',
        ...options
    });
};

/**
 * create webhooks
 * Create a new webhook
 */
export const webhooksCreate = <ThrowOnError extends boolean = false>(options: Options<WebhooksCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<WebhooksCreateResponse, WebhooksCreateError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/webhooks',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * receive webhooks
 * Receive webhook callbacks from external sources
 */
export const webhooksReceive = <ThrowOnError extends boolean = false>(options: Options<WebhooksReceiveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<WebhooksReceiveResponse, WebhooksReceiveError, ThrowOnError>({
        url: '/v1/webhooks/external/receive/{id}',
        ...options
    });
};

/**
 * trigger_event webhooks
 * Manually trigger a webhook event
 */
export const webhooksTriggerEvent = <ThrowOnError extends boolean = false>(options: Options<WebhooksTriggerEventData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<WebhooksTriggerEventResponse, WebhooksTriggerEventError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/webhooks/trigger',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * delete webhooks
 * Delete webhook
 */
export const webhooksDelete = <ThrowOnError extends boolean = false>(options: Options<WebhooksDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<WebhooksDeleteResponse, WebhooksDeleteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/webhooks/{id}',
        ...options
    });
};

/**
 * get webhooks
 * Get webhook by ID
 */
export const webhooksGet = <ThrowOnError extends boolean = false>(options: Options<WebhooksGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<WebhooksGetResponse, WebhooksGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/webhooks/{id}',
        ...options
    });
};

/**
 * update webhooks
 * Update webhook
 */
export const webhooksUpdate = <ThrowOnError extends boolean = false>(options: Options<WebhooksUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<WebhooksUpdateResponse, WebhooksUpdateError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/webhooks/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * list_events webhooks
 * List webhook events
 */
export const webhooksListEvents = <ThrowOnError extends boolean = false>(options: Options<WebhooksListEventsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<WebhooksListEventsResponse, WebhooksListEventsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/webhooks/{id}/events',
        ...options
    });
};

/**
 * replay_event webhooks
 * Replay a webhook event
 */
export const webhooksReplayEvent = <ThrowOnError extends boolean = false>(options: Options<WebhooksReplayEventData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<WebhooksReplayEventResponse, WebhooksReplayEventError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/webhooks/{id}/events/{event_id}/replay',
        ...options
    });
};