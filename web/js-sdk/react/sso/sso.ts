/**
 * Generated by orval v7.7.0 üç∫
 * Do not edit manually.
 * Frank Authentication Server
 * A comprehensive authentication server with OAuth2, MFA, Passkeys, SSO, and more
 * OpenAPI spec version: 1.0.0
 */
import { useInfiniteQuery, useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  BadRequestError,
  ConflictError,
  CreateIdentityProviderRequestBody,
  ForbiddenError,
  IdentityProviderResponse,
  InternalServerError,
  ListIdentityProvidersResponseBody,
  ListProvidersResponseBody,
  NotFoundError,
  ProviderCallbackResponseBody2,
  SamlMetadataResponseBody,
  SsoListIdentityProvidersParams,
  SsoListProvidersParams,
  SsoProviderAuthParams,
  SsoProviderCallbackParams,
  UnauthorizedError,
  UpdateIdentityProviderRequestBody,
} from "../../model";

import { customInstance } from "../../mutator/custom-instance";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * Handle SSO provider callback
 * @summary provider_callback sso
 */
export type ssoProviderCallbackResponse200 = {
  data: ProviderCallbackResponseBody2;
  status: 200;
};

export type ssoProviderCallbackResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type ssoProviderCallbackResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type ssoProviderCallbackResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type ssoProviderCallbackResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type ssoProviderCallbackResponse409 = {
  data: ConflictError;
  status: 409;
};

export type ssoProviderCallbackResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type ssoProviderCallbackResponseComposite =
  | ssoProviderCallbackResponse200
  | ssoProviderCallbackResponse400
  | ssoProviderCallbackResponse401
  | ssoProviderCallbackResponse403
  | ssoProviderCallbackResponse404
  | ssoProviderCallbackResponse409
  | ssoProviderCallbackResponse500;

export type ssoProviderCallbackResponse =
  ssoProviderCallbackResponseComposite & {
    headers: Headers;
  };

export const getSsoProviderCallbackUrl = (
  provider: string,
  params?: SsoProviderCallbackParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/v1/auth/sso/callback/${provider}?${stringifiedParams}`
    : `/v1/auth/sso/callback/${provider}`;
};

export const ssoProviderCallback = async (
  provider: string,
  params?: SsoProviderCallbackParams,
  options?: RequestInit,
): Promise<ssoProviderCallbackResponse> => {
  return customInstance<ssoProviderCallbackResponse>(
    getSsoProviderCallbackUrl(provider, params),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getSsoProviderCallbackQueryKey = (
  provider: string,
  params?: SsoProviderCallbackParams,
) => {
  return [
    `/v1/auth/sso/callback/${provider}`,
    ...(params ? [params] : []),
  ] as const;
};

export const getSsoProviderCallbackInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof ssoProviderCallback>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  provider: string,
  params?: SsoProviderCallbackParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof ssoProviderCallback>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getSsoProviderCallbackQueryKey(provider, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof ssoProviderCallback>>
  > = ({ signal }) =>
    ssoProviderCallback(provider, params, { signal, ...requestOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!provider,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof ssoProviderCallback>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SsoProviderCallbackInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof ssoProviderCallback>>
>;
export type SsoProviderCallbackInfiniteQueryError =
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | ConflictError
  | InternalServerError;

export function useSsoProviderCallbackInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof ssoProviderCallback>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  provider: string,
  params: undefined | SsoProviderCallbackParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof ssoProviderCallback>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof ssoProviderCallback>>,
          TError,
          Awaited<ReturnType<typeof ssoProviderCallback>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSsoProviderCallbackInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof ssoProviderCallback>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  provider: string,
  params?: SsoProviderCallbackParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof ssoProviderCallback>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof ssoProviderCallback>>,
          TError,
          Awaited<ReturnType<typeof ssoProviderCallback>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSsoProviderCallbackInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof ssoProviderCallback>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  provider: string,
  params?: SsoProviderCallbackParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof ssoProviderCallback>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary provider_callback sso
 */

export function useSsoProviderCallbackInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof ssoProviderCallback>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  provider: string,
  params?: SsoProviderCallbackParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof ssoProviderCallback>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getSsoProviderCallbackInfiniteQueryOptions(
    provider,
    params,
    options,
  );

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getSsoProviderCallbackQueryOptions = <
  TData = Awaited<ReturnType<typeof ssoProviderCallback>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  provider: string,
  params?: SsoProviderCallbackParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ssoProviderCallback>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getSsoProviderCallbackQueryKey(provider, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof ssoProviderCallback>>
  > = ({ signal }) =>
    ssoProviderCallback(provider, params, { signal, ...requestOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!provider,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof ssoProviderCallback>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SsoProviderCallbackQueryResult = NonNullable<
  Awaited<ReturnType<typeof ssoProviderCallback>>
>;
export type SsoProviderCallbackQueryError =
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | ConflictError
  | InternalServerError;

export function useSsoProviderCallback<
  TData = Awaited<ReturnType<typeof ssoProviderCallback>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  provider: string,
  params: undefined | SsoProviderCallbackParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ssoProviderCallback>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof ssoProviderCallback>>,
          TError,
          Awaited<ReturnType<typeof ssoProviderCallback>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSsoProviderCallback<
  TData = Awaited<ReturnType<typeof ssoProviderCallback>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  provider: string,
  params?: SsoProviderCallbackParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ssoProviderCallback>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof ssoProviderCallback>>,
          TError,
          Awaited<ReturnType<typeof ssoProviderCallback>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSsoProviderCallback<
  TData = Awaited<ReturnType<typeof ssoProviderCallback>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  provider: string,
  params?: SsoProviderCallbackParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ssoProviderCallback>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary provider_callback sso
 */

export function useSsoProviderCallback<
  TData = Awaited<ReturnType<typeof ssoProviderCallback>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  provider: string,
  params?: SsoProviderCallbackParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ssoProviderCallback>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getSsoProviderCallbackQueryOptions(
    provider,
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * List identity providers
 * @summary list_identity_providers sso
 */
export type ssoListIdentityProvidersResponse200 = {
  data: ListIdentityProvidersResponseBody;
  status: 200;
};

export type ssoListIdentityProvidersResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type ssoListIdentityProvidersResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type ssoListIdentityProvidersResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type ssoListIdentityProvidersResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type ssoListIdentityProvidersResponse409 = {
  data: ConflictError;
  status: 409;
};

export type ssoListIdentityProvidersResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type ssoListIdentityProvidersResponseComposite =
  | ssoListIdentityProvidersResponse200
  | ssoListIdentityProvidersResponse400
  | ssoListIdentityProvidersResponse401
  | ssoListIdentityProvidersResponse403
  | ssoListIdentityProvidersResponse404
  | ssoListIdentityProvidersResponse409
  | ssoListIdentityProvidersResponse500;

export type ssoListIdentityProvidersResponse =
  ssoListIdentityProvidersResponseComposite & {
    headers: Headers;
  };

export const getSsoListIdentityProvidersUrl = (
  params: SsoListIdentityProvidersParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/v1/auth/sso/identity-providers?${stringifiedParams}`
    : `/v1/auth/sso/identity-providers`;
};

export const ssoListIdentityProviders = async (
  params: SsoListIdentityProvidersParams,
  options?: RequestInit,
): Promise<ssoListIdentityProvidersResponse> => {
  return customInstance<ssoListIdentityProvidersResponse>(
    getSsoListIdentityProvidersUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getSsoListIdentityProvidersQueryKey = (
  params: SsoListIdentityProvidersParams,
) => {
  return [
    `/v1/auth/sso/identity-providers`,
    ...(params ? [params] : []),
  ] as const;
};

export const getSsoListIdentityProvidersInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof ssoListIdentityProviders>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  params: SsoListIdentityProvidersParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof ssoListIdentityProviders>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getSsoListIdentityProvidersQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof ssoListIdentityProviders>>
  > = ({ signal }) =>
    ssoListIdentityProviders(params, { signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof ssoListIdentityProviders>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SsoListIdentityProvidersInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof ssoListIdentityProviders>>
>;
export type SsoListIdentityProvidersInfiniteQueryError =
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | ConflictError
  | InternalServerError;

export function useSsoListIdentityProvidersInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof ssoListIdentityProviders>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  params: SsoListIdentityProvidersParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof ssoListIdentityProviders>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof ssoListIdentityProviders>>,
          TError,
          Awaited<ReturnType<typeof ssoListIdentityProviders>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSsoListIdentityProvidersInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof ssoListIdentityProviders>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  params: SsoListIdentityProvidersParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof ssoListIdentityProviders>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof ssoListIdentityProviders>>,
          TError,
          Awaited<ReturnType<typeof ssoListIdentityProviders>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSsoListIdentityProvidersInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof ssoListIdentityProviders>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  params: SsoListIdentityProvidersParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof ssoListIdentityProviders>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary list_identity_providers sso
 */

export function useSsoListIdentityProvidersInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof ssoListIdentityProviders>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  params: SsoListIdentityProvidersParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof ssoListIdentityProviders>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getSsoListIdentityProvidersInfiniteQueryOptions(
    params,
    options,
  );

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getSsoListIdentityProvidersQueryOptions = <
  TData = Awaited<ReturnType<typeof ssoListIdentityProviders>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  params: SsoListIdentityProvidersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ssoListIdentityProviders>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getSsoListIdentityProvidersQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof ssoListIdentityProviders>>
  > = ({ signal }) =>
    ssoListIdentityProviders(params, { signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof ssoListIdentityProviders>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SsoListIdentityProvidersQueryResult = NonNullable<
  Awaited<ReturnType<typeof ssoListIdentityProviders>>
>;
export type SsoListIdentityProvidersQueryError =
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | ConflictError
  | InternalServerError;

export function useSsoListIdentityProviders<
  TData = Awaited<ReturnType<typeof ssoListIdentityProviders>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  params: SsoListIdentityProvidersParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ssoListIdentityProviders>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof ssoListIdentityProviders>>,
          TError,
          Awaited<ReturnType<typeof ssoListIdentityProviders>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSsoListIdentityProviders<
  TData = Awaited<ReturnType<typeof ssoListIdentityProviders>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  params: SsoListIdentityProvidersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ssoListIdentityProviders>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof ssoListIdentityProviders>>,
          TError,
          Awaited<ReturnType<typeof ssoListIdentityProviders>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSsoListIdentityProviders<
  TData = Awaited<ReturnType<typeof ssoListIdentityProviders>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  params: SsoListIdentityProvidersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ssoListIdentityProviders>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary list_identity_providers sso
 */

export function useSsoListIdentityProviders<
  TData = Awaited<ReturnType<typeof ssoListIdentityProviders>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  params: SsoListIdentityProvidersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ssoListIdentityProviders>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getSsoListIdentityProvidersQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Create a new identity provider
 * @summary create_identity_provider sso
 */
export type ssoCreateIdentityProviderResponse201 = {
  data: IdentityProviderResponse;
  status: 201;
};

export type ssoCreateIdentityProviderResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type ssoCreateIdentityProviderResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type ssoCreateIdentityProviderResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type ssoCreateIdentityProviderResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type ssoCreateIdentityProviderResponse409 = {
  data: ConflictError;
  status: 409;
};

export type ssoCreateIdentityProviderResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type ssoCreateIdentityProviderResponseComposite =
  | ssoCreateIdentityProviderResponse201
  | ssoCreateIdentityProviderResponse400
  | ssoCreateIdentityProviderResponse401
  | ssoCreateIdentityProviderResponse403
  | ssoCreateIdentityProviderResponse404
  | ssoCreateIdentityProviderResponse409
  | ssoCreateIdentityProviderResponse500;

export type ssoCreateIdentityProviderResponse =
  ssoCreateIdentityProviderResponseComposite & {
    headers: Headers;
  };

export const getSsoCreateIdentityProviderUrl = () => {
  return `/v1/auth/sso/identity-providers`;
};

export const ssoCreateIdentityProvider = async (
  createIdentityProviderRequestBody: CreateIdentityProviderRequestBody,
  options?: RequestInit,
): Promise<ssoCreateIdentityProviderResponse> => {
  return customInstance<ssoCreateIdentityProviderResponse>(
    getSsoCreateIdentityProviderUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(createIdentityProviderRequestBody),
    },
  );
};

export const getSsoCreateIdentityProviderMutationOptions = <
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof ssoCreateIdentityProvider>>,
    TError,
    { data: CreateIdentityProviderRequestBody },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof ssoCreateIdentityProvider>>,
  TError,
  { data: CreateIdentityProviderRequestBody },
  TContext
> => {
  const mutationKey = ["ssoCreateIdentityProvider"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof ssoCreateIdentityProvider>>,
    { data: CreateIdentityProviderRequestBody }
  > = (props) => {
    const { data } = props ?? {};

    return ssoCreateIdentityProvider(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type SsoCreateIdentityProviderMutationResult = NonNullable<
  Awaited<ReturnType<typeof ssoCreateIdentityProvider>>
>;
export type SsoCreateIdentityProviderMutationBody =
  CreateIdentityProviderRequestBody;
export type SsoCreateIdentityProviderMutationError =
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | ConflictError
  | InternalServerError;

/**
 * @summary create_identity_provider sso
 */
export const useSsoCreateIdentityProvider = <
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof ssoCreateIdentityProvider>>,
    TError,
    { data: CreateIdentityProviderRequestBody },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof ssoCreateIdentityProvider>>,
  TError,
  { data: CreateIdentityProviderRequestBody },
  TContext
> => {
  const mutationOptions = getSsoCreateIdentityProviderMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Delete identity provider
 * @summary delete_identity_provider sso
 */
export type ssoDeleteIdentityProviderResponse204 = {
  data: void;
  status: 204;
};

export type ssoDeleteIdentityProviderResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type ssoDeleteIdentityProviderResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type ssoDeleteIdentityProviderResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type ssoDeleteIdentityProviderResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type ssoDeleteIdentityProviderResponse409 = {
  data: ConflictError;
  status: 409;
};

export type ssoDeleteIdentityProviderResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type ssoDeleteIdentityProviderResponseComposite =
  | ssoDeleteIdentityProviderResponse204
  | ssoDeleteIdentityProviderResponse400
  | ssoDeleteIdentityProviderResponse401
  | ssoDeleteIdentityProviderResponse403
  | ssoDeleteIdentityProviderResponse404
  | ssoDeleteIdentityProviderResponse409
  | ssoDeleteIdentityProviderResponse500;

export type ssoDeleteIdentityProviderResponse =
  ssoDeleteIdentityProviderResponseComposite & {
    headers: Headers;
  };

export const getSsoDeleteIdentityProviderUrl = (id: string) => {
  return `/v1/auth/sso/identity-providers/${id}`;
};

export const ssoDeleteIdentityProvider = async (
  id: string,
  options?: RequestInit,
): Promise<ssoDeleteIdentityProviderResponse> => {
  return customInstance<ssoDeleteIdentityProviderResponse>(
    getSsoDeleteIdentityProviderUrl(id),
    {
      ...options,
      method: "DELETE",
    },
  );
};

export const getSsoDeleteIdentityProviderMutationOptions = <
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof ssoDeleteIdentityProvider>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof ssoDeleteIdentityProvider>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["ssoDeleteIdentityProvider"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof ssoDeleteIdentityProvider>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return ssoDeleteIdentityProvider(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type SsoDeleteIdentityProviderMutationResult = NonNullable<
  Awaited<ReturnType<typeof ssoDeleteIdentityProvider>>
>;

export type SsoDeleteIdentityProviderMutationError =
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | ConflictError
  | InternalServerError;

/**
 * @summary delete_identity_provider sso
 */
export const useSsoDeleteIdentityProvider = <
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof ssoDeleteIdentityProvider>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof ssoDeleteIdentityProvider>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getSsoDeleteIdentityProviderMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Get identity provider by ID
 * @summary get_identity_provider sso
 */
export type ssoGetIdentityProviderResponse200 = {
  data: IdentityProviderResponse;
  status: 200;
};

export type ssoGetIdentityProviderResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type ssoGetIdentityProviderResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type ssoGetIdentityProviderResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type ssoGetIdentityProviderResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type ssoGetIdentityProviderResponse409 = {
  data: ConflictError;
  status: 409;
};

export type ssoGetIdentityProviderResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type ssoGetIdentityProviderResponseComposite =
  | ssoGetIdentityProviderResponse200
  | ssoGetIdentityProviderResponse400
  | ssoGetIdentityProviderResponse401
  | ssoGetIdentityProviderResponse403
  | ssoGetIdentityProviderResponse404
  | ssoGetIdentityProviderResponse409
  | ssoGetIdentityProviderResponse500;

export type ssoGetIdentityProviderResponse =
  ssoGetIdentityProviderResponseComposite & {
    headers: Headers;
  };

export const getSsoGetIdentityProviderUrl = (id: string) => {
  return `/v1/auth/sso/identity-providers/${id}`;
};

export const ssoGetIdentityProvider = async (
  id: string,
  options?: RequestInit,
): Promise<ssoGetIdentityProviderResponse> => {
  return customInstance<ssoGetIdentityProviderResponse>(
    getSsoGetIdentityProviderUrl(id),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getSsoGetIdentityProviderQueryKey = (id: string) => {
  return [`/v1/auth/sso/identity-providers/${id}`] as const;
};

export const getSsoGetIdentityProviderInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof ssoGetIdentityProvider>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof ssoGetIdentityProvider>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getSsoGetIdentityProviderQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof ssoGetIdentityProvider>>
  > = ({ signal }) => ssoGetIdentityProvider(id, { signal, ...requestOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof ssoGetIdentityProvider>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SsoGetIdentityProviderInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof ssoGetIdentityProvider>>
>;
export type SsoGetIdentityProviderInfiniteQueryError =
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | ConflictError
  | InternalServerError;

export function useSsoGetIdentityProviderInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof ssoGetIdentityProvider>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  id: string,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof ssoGetIdentityProvider>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof ssoGetIdentityProvider>>,
          TError,
          Awaited<ReturnType<typeof ssoGetIdentityProvider>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSsoGetIdentityProviderInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof ssoGetIdentityProvider>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof ssoGetIdentityProvider>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof ssoGetIdentityProvider>>,
          TError,
          Awaited<ReturnType<typeof ssoGetIdentityProvider>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSsoGetIdentityProviderInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof ssoGetIdentityProvider>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof ssoGetIdentityProvider>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary get_identity_provider sso
 */

export function useSsoGetIdentityProviderInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof ssoGetIdentityProvider>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof ssoGetIdentityProvider>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getSsoGetIdentityProviderInfiniteQueryOptions(
    id,
    options,
  );

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getSsoGetIdentityProviderQueryOptions = <
  TData = Awaited<ReturnType<typeof ssoGetIdentityProvider>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ssoGetIdentityProvider>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getSsoGetIdentityProviderQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof ssoGetIdentityProvider>>
  > = ({ signal }) => ssoGetIdentityProvider(id, { signal, ...requestOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof ssoGetIdentityProvider>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SsoGetIdentityProviderQueryResult = NonNullable<
  Awaited<ReturnType<typeof ssoGetIdentityProvider>>
>;
export type SsoGetIdentityProviderQueryError =
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | ConflictError
  | InternalServerError;

export function useSsoGetIdentityProvider<
  TData = Awaited<ReturnType<typeof ssoGetIdentityProvider>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ssoGetIdentityProvider>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof ssoGetIdentityProvider>>,
          TError,
          Awaited<ReturnType<typeof ssoGetIdentityProvider>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSsoGetIdentityProvider<
  TData = Awaited<ReturnType<typeof ssoGetIdentityProvider>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ssoGetIdentityProvider>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof ssoGetIdentityProvider>>,
          TError,
          Awaited<ReturnType<typeof ssoGetIdentityProvider>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSsoGetIdentityProvider<
  TData = Awaited<ReturnType<typeof ssoGetIdentityProvider>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ssoGetIdentityProvider>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary get_identity_provider sso
 */

export function useSsoGetIdentityProvider<
  TData = Awaited<ReturnType<typeof ssoGetIdentityProvider>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ssoGetIdentityProvider>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getSsoGetIdentityProviderQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Update identity provider
 * @summary update_identity_provider sso
 */
export type ssoUpdateIdentityProviderResponse200 = {
  data: IdentityProviderResponse;
  status: 200;
};

export type ssoUpdateIdentityProviderResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type ssoUpdateIdentityProviderResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type ssoUpdateIdentityProviderResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type ssoUpdateIdentityProviderResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type ssoUpdateIdentityProviderResponse409 = {
  data: ConflictError;
  status: 409;
};

export type ssoUpdateIdentityProviderResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type ssoUpdateIdentityProviderResponseComposite =
  | ssoUpdateIdentityProviderResponse200
  | ssoUpdateIdentityProviderResponse400
  | ssoUpdateIdentityProviderResponse401
  | ssoUpdateIdentityProviderResponse403
  | ssoUpdateIdentityProviderResponse404
  | ssoUpdateIdentityProviderResponse409
  | ssoUpdateIdentityProviderResponse500;

export type ssoUpdateIdentityProviderResponse =
  ssoUpdateIdentityProviderResponseComposite & {
    headers: Headers;
  };

export const getSsoUpdateIdentityProviderUrl = (id: string) => {
  return `/v1/auth/sso/identity-providers/${id}`;
};

export const ssoUpdateIdentityProvider = async (
  id: string,
  updateIdentityProviderRequestBody: UpdateIdentityProviderRequestBody,
  options?: RequestInit,
): Promise<ssoUpdateIdentityProviderResponse> => {
  return customInstance<ssoUpdateIdentityProviderResponse>(
    getSsoUpdateIdentityProviderUrl(id),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(updateIdentityProviderRequestBody),
    },
  );
};

export const getSsoUpdateIdentityProviderMutationOptions = <
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof ssoUpdateIdentityProvider>>,
    TError,
    { id: string; data: UpdateIdentityProviderRequestBody },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof ssoUpdateIdentityProvider>>,
  TError,
  { id: string; data: UpdateIdentityProviderRequestBody },
  TContext
> => {
  const mutationKey = ["ssoUpdateIdentityProvider"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof ssoUpdateIdentityProvider>>,
    { id: string; data: UpdateIdentityProviderRequestBody }
  > = (props) => {
    const { id, data } = props ?? {};

    return ssoUpdateIdentityProvider(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type SsoUpdateIdentityProviderMutationResult = NonNullable<
  Awaited<ReturnType<typeof ssoUpdateIdentityProvider>>
>;
export type SsoUpdateIdentityProviderMutationBody =
  UpdateIdentityProviderRequestBody;
export type SsoUpdateIdentityProviderMutationError =
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | ConflictError
  | InternalServerError;

/**
 * @summary update_identity_provider sso
 */
export const useSsoUpdateIdentityProvider = <
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof ssoUpdateIdentityProvider>>,
    TError,
    { id: string; data: UpdateIdentityProviderRequestBody },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof ssoUpdateIdentityProvider>>,
  TError,
  { id: string; data: UpdateIdentityProviderRequestBody },
  TContext
> => {
  const mutationOptions = getSsoUpdateIdentityProviderMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * List available SSO providers
 * @summary list_providers sso
 */
export type ssoListProvidersResponse200 = {
  data: ListProvidersResponseBody;
  status: 200;
};

export type ssoListProvidersResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type ssoListProvidersResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type ssoListProvidersResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type ssoListProvidersResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type ssoListProvidersResponse409 = {
  data: ConflictError;
  status: 409;
};

export type ssoListProvidersResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type ssoListProvidersResponseComposite =
  | ssoListProvidersResponse200
  | ssoListProvidersResponse400
  | ssoListProvidersResponse401
  | ssoListProvidersResponse403
  | ssoListProvidersResponse404
  | ssoListProvidersResponse409
  | ssoListProvidersResponse500;

export type ssoListProvidersResponse = ssoListProvidersResponseComposite & {
  headers: Headers;
};

export const getSsoListProvidersUrl = (params?: SsoListProvidersParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/v1/auth/sso/providers?${stringifiedParams}`
    : `/v1/auth/sso/providers`;
};

export const ssoListProviders = async (
  params?: SsoListProvidersParams,
  options?: RequestInit,
): Promise<ssoListProvidersResponse> => {
  return customInstance<ssoListProvidersResponse>(
    getSsoListProvidersUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getSsoListProvidersQueryKey = (
  params?: SsoListProvidersParams,
) => {
  return [`/v1/auth/sso/providers`, ...(params ? [params] : [])] as const;
};

export const getSsoListProvidersInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof ssoListProviders>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  params?: SsoListProvidersParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof ssoListProviders>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getSsoListProvidersQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof ssoListProviders>>
  > = ({ signal }) => ssoListProviders(params, { signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof ssoListProviders>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SsoListProvidersInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof ssoListProviders>>
>;
export type SsoListProvidersInfiniteQueryError =
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | ConflictError
  | InternalServerError;

export function useSsoListProvidersInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof ssoListProviders>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  params: undefined | SsoListProvidersParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof ssoListProviders>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof ssoListProviders>>,
          TError,
          Awaited<ReturnType<typeof ssoListProviders>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSsoListProvidersInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof ssoListProviders>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  params?: SsoListProvidersParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof ssoListProviders>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof ssoListProviders>>,
          TError,
          Awaited<ReturnType<typeof ssoListProviders>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSsoListProvidersInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof ssoListProviders>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  params?: SsoListProvidersParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof ssoListProviders>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary list_providers sso
 */

export function useSsoListProvidersInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof ssoListProviders>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  params?: SsoListProvidersParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof ssoListProviders>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getSsoListProvidersInfiniteQueryOptions(params, options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getSsoListProvidersQueryOptions = <
  TData = Awaited<ReturnType<typeof ssoListProviders>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  params?: SsoListProvidersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ssoListProviders>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getSsoListProvidersQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof ssoListProviders>>
  > = ({ signal }) => ssoListProviders(params, { signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof ssoListProviders>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SsoListProvidersQueryResult = NonNullable<
  Awaited<ReturnType<typeof ssoListProviders>>
>;
export type SsoListProvidersQueryError =
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | ConflictError
  | InternalServerError;

export function useSsoListProviders<
  TData = Awaited<ReturnType<typeof ssoListProviders>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  params: undefined | SsoListProvidersParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ssoListProviders>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof ssoListProviders>>,
          TError,
          Awaited<ReturnType<typeof ssoListProviders>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSsoListProviders<
  TData = Awaited<ReturnType<typeof ssoListProviders>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  params?: SsoListProvidersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ssoListProviders>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof ssoListProviders>>,
          TError,
          Awaited<ReturnType<typeof ssoListProviders>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSsoListProviders<
  TData = Awaited<ReturnType<typeof ssoListProviders>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  params?: SsoListProvidersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ssoListProviders>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary list_providers sso
 */

export function useSsoListProviders<
  TData = Awaited<ReturnType<typeof ssoListProviders>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  params?: SsoListProvidersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ssoListProviders>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getSsoListProvidersQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Initiate SSO authentication with a provider
 * @summary provider_auth sso
 */
export type ssoProviderAuthResponse307 = {
  data: void;
  status: 307;
};

export type ssoProviderAuthResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type ssoProviderAuthResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type ssoProviderAuthResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type ssoProviderAuthResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type ssoProviderAuthResponse409 = {
  data: ConflictError;
  status: 409;
};

export type ssoProviderAuthResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type ssoProviderAuthResponseComposite =
  | ssoProviderAuthResponse307
  | ssoProviderAuthResponse400
  | ssoProviderAuthResponse401
  | ssoProviderAuthResponse403
  | ssoProviderAuthResponse404
  | ssoProviderAuthResponse409
  | ssoProviderAuthResponse500;

export type ssoProviderAuthResponse = ssoProviderAuthResponseComposite & {
  headers: Headers;
};

export const getSsoProviderAuthUrl = (
  provider: string,
  params?: SsoProviderAuthParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/v1/auth/sso/providers/${provider}?${stringifiedParams}`
    : `/v1/auth/sso/providers/${provider}`;
};

export const ssoProviderAuth = async (
  provider: string,
  params?: SsoProviderAuthParams,
  options?: RequestInit,
): Promise<ssoProviderAuthResponse> => {
  return customInstance<ssoProviderAuthResponse>(
    getSsoProviderAuthUrl(provider, params),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getSsoProviderAuthQueryKey = (
  provider: string,
  params?: SsoProviderAuthParams,
) => {
  return [
    `/v1/auth/sso/providers/${provider}`,
    ...(params ? [params] : []),
  ] as const;
};

export const getSsoProviderAuthInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof ssoProviderAuth>>>,
  TError =
    | void
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  provider: string,
  params?: SsoProviderAuthParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof ssoProviderAuth>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getSsoProviderAuthQueryKey(provider, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof ssoProviderAuth>>> = ({
    signal,
  }) => ssoProviderAuth(provider, params, { signal, ...requestOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!provider,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof ssoProviderAuth>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SsoProviderAuthInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof ssoProviderAuth>>
>;
export type SsoProviderAuthInfiniteQueryError =
  | void
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | ConflictError
  | InternalServerError;

export function useSsoProviderAuthInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof ssoProviderAuth>>>,
  TError =
    | void
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  provider: string,
  params: undefined | SsoProviderAuthParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof ssoProviderAuth>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof ssoProviderAuth>>,
          TError,
          Awaited<ReturnType<typeof ssoProviderAuth>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSsoProviderAuthInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof ssoProviderAuth>>>,
  TError =
    | void
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  provider: string,
  params?: SsoProviderAuthParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof ssoProviderAuth>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof ssoProviderAuth>>,
          TError,
          Awaited<ReturnType<typeof ssoProviderAuth>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSsoProviderAuthInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof ssoProviderAuth>>>,
  TError =
    | void
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  provider: string,
  params?: SsoProviderAuthParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof ssoProviderAuth>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary provider_auth sso
 */

export function useSsoProviderAuthInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof ssoProviderAuth>>>,
  TError =
    | void
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  provider: string,
  params?: SsoProviderAuthParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof ssoProviderAuth>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getSsoProviderAuthInfiniteQueryOptions(
    provider,
    params,
    options,
  );

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getSsoProviderAuthQueryOptions = <
  TData = Awaited<ReturnType<typeof ssoProviderAuth>>,
  TError =
    | void
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  provider: string,
  params?: SsoProviderAuthParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ssoProviderAuth>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getSsoProviderAuthQueryKey(provider, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof ssoProviderAuth>>> = ({
    signal,
  }) => ssoProviderAuth(provider, params, { signal, ...requestOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!provider,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof ssoProviderAuth>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SsoProviderAuthQueryResult = NonNullable<
  Awaited<ReturnType<typeof ssoProviderAuth>>
>;
export type SsoProviderAuthQueryError =
  | void
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | ConflictError
  | InternalServerError;

export function useSsoProviderAuth<
  TData = Awaited<ReturnType<typeof ssoProviderAuth>>,
  TError =
    | void
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  provider: string,
  params: undefined | SsoProviderAuthParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ssoProviderAuth>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof ssoProviderAuth>>,
          TError,
          Awaited<ReturnType<typeof ssoProviderAuth>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSsoProviderAuth<
  TData = Awaited<ReturnType<typeof ssoProviderAuth>>,
  TError =
    | void
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  provider: string,
  params?: SsoProviderAuthParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ssoProviderAuth>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof ssoProviderAuth>>,
          TError,
          Awaited<ReturnType<typeof ssoProviderAuth>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSsoProviderAuth<
  TData = Awaited<ReturnType<typeof ssoProviderAuth>>,
  TError =
    | void
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  provider: string,
  params?: SsoProviderAuthParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ssoProviderAuth>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary provider_auth sso
 */

export function useSsoProviderAuth<
  TData = Awaited<ReturnType<typeof ssoProviderAuth>>,
  TError =
    | void
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  provider: string,
  params?: SsoProviderAuthParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ssoProviderAuth>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getSsoProviderAuthQueryOptions(
    provider,
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * SAML assertion consumer service
 * @summary saml_acs sso
 */
export type ssoSamlAcsResponse200 = {
  data: string;
  status: 200;
};

export type ssoSamlAcsResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type ssoSamlAcsResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type ssoSamlAcsResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type ssoSamlAcsResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type ssoSamlAcsResponse409 = {
  data: ConflictError;
  status: 409;
};

export type ssoSamlAcsResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type ssoSamlAcsResponseComposite =
  | ssoSamlAcsResponse200
  | ssoSamlAcsResponse400
  | ssoSamlAcsResponse401
  | ssoSamlAcsResponse403
  | ssoSamlAcsResponse404
  | ssoSamlAcsResponse409
  | ssoSamlAcsResponse500;

export type ssoSamlAcsResponse = ssoSamlAcsResponseComposite & {
  headers: Headers;
};

export const getSsoSamlAcsUrl = (id: string) => {
  return `/v1/auth/sso/saml/${id}/acs`;
};

export const ssoSamlAcs = async (
  id: string,
  options?: RequestInit,
): Promise<ssoSamlAcsResponse> => {
  return customInstance<ssoSamlAcsResponse>(getSsoSamlAcsUrl(id), {
    ...options,
    method: "POST",
  });
};

export const getSsoSamlAcsMutationOptions = <
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof ssoSamlAcs>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof ssoSamlAcs>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["ssoSamlAcs"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof ssoSamlAcs>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return ssoSamlAcs(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type SsoSamlAcsMutationResult = NonNullable<
  Awaited<ReturnType<typeof ssoSamlAcs>>
>;

export type SsoSamlAcsMutationError =
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | ConflictError
  | InternalServerError;

/**
 * @summary saml_acs sso
 */
export const useSsoSamlAcs = <
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof ssoSamlAcs>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof ssoSamlAcs>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getSsoSamlAcsMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * SAML metadata endpoint
 * @summary saml_metadata sso
 */
export type ssoSamlMetadataResponse200 = {
  data: SamlMetadataResponseBody;
  status: 200;
};

export type ssoSamlMetadataResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type ssoSamlMetadataResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type ssoSamlMetadataResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type ssoSamlMetadataResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type ssoSamlMetadataResponse409 = {
  data: ConflictError;
  status: 409;
};

export type ssoSamlMetadataResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type ssoSamlMetadataResponseComposite =
  | ssoSamlMetadataResponse200
  | ssoSamlMetadataResponse400
  | ssoSamlMetadataResponse401
  | ssoSamlMetadataResponse403
  | ssoSamlMetadataResponse404
  | ssoSamlMetadataResponse409
  | ssoSamlMetadataResponse500;

export type ssoSamlMetadataResponse = ssoSamlMetadataResponseComposite & {
  headers: Headers;
};

export const getSsoSamlMetadataUrl = (id: string) => {
  return `/v1/auth/sso/saml/${id}/metadata`;
};

export const ssoSamlMetadata = async (
  id: string,
  options?: RequestInit,
): Promise<ssoSamlMetadataResponse> => {
  return customInstance<ssoSamlMetadataResponse>(getSsoSamlMetadataUrl(id), {
    ...options,
    method: "GET",
  });
};

export const getSsoSamlMetadataQueryKey = (id: string) => {
  return [`/v1/auth/sso/saml/${id}/metadata`] as const;
};

export const getSsoSamlMetadataInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof ssoSamlMetadata>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof ssoSamlMetadata>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSsoSamlMetadataQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof ssoSamlMetadata>>> = ({
    signal,
  }) => ssoSamlMetadata(id, { signal, ...requestOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof ssoSamlMetadata>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SsoSamlMetadataInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof ssoSamlMetadata>>
>;
export type SsoSamlMetadataInfiniteQueryError =
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | ConflictError
  | InternalServerError;

export function useSsoSamlMetadataInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof ssoSamlMetadata>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  id: string,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof ssoSamlMetadata>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof ssoSamlMetadata>>,
          TError,
          Awaited<ReturnType<typeof ssoSamlMetadata>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSsoSamlMetadataInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof ssoSamlMetadata>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof ssoSamlMetadata>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof ssoSamlMetadata>>,
          TError,
          Awaited<ReturnType<typeof ssoSamlMetadata>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSsoSamlMetadataInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof ssoSamlMetadata>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof ssoSamlMetadata>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary saml_metadata sso
 */

export function useSsoSamlMetadataInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof ssoSamlMetadata>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof ssoSamlMetadata>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getSsoSamlMetadataInfiniteQueryOptions(id, options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getSsoSamlMetadataQueryOptions = <
  TData = Awaited<ReturnType<typeof ssoSamlMetadata>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ssoSamlMetadata>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSsoSamlMetadataQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof ssoSamlMetadata>>> = ({
    signal,
  }) => ssoSamlMetadata(id, { signal, ...requestOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof ssoSamlMetadata>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SsoSamlMetadataQueryResult = NonNullable<
  Awaited<ReturnType<typeof ssoSamlMetadata>>
>;
export type SsoSamlMetadataQueryError =
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | ConflictError
  | InternalServerError;

export function useSsoSamlMetadata<
  TData = Awaited<ReturnType<typeof ssoSamlMetadata>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ssoSamlMetadata>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof ssoSamlMetadata>>,
          TError,
          Awaited<ReturnType<typeof ssoSamlMetadata>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSsoSamlMetadata<
  TData = Awaited<ReturnType<typeof ssoSamlMetadata>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ssoSamlMetadata>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof ssoSamlMetadata>>,
          TError,
          Awaited<ReturnType<typeof ssoSamlMetadata>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSsoSamlMetadata<
  TData = Awaited<ReturnType<typeof ssoSamlMetadata>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ssoSamlMetadata>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary saml_metadata sso
 */

export function useSsoSamlMetadata<
  TData = Awaited<ReturnType<typeof ssoSamlMetadata>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ssoSamlMetadata>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getSsoSamlMetadataQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
