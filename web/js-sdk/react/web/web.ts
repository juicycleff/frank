/**
 * Generated by orval v7.7.0 üç∫
 * Do not edit manually.
 * Frank Authentication Server
 * A comprehensive authentication server with OAuth2, MFA, Passkeys, SSO, and more
 * OpenAPI spec version: 1.0.0
 */
import { useInfiniteQuery, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import { customInstance } from "../../mutator/custom-instance";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * Render the home page
 * @summary home web
 */
export type webHomeResponse301 = {
  data: void;
  status: 301;
};

export type webHomeResponseComposite = webHomeResponse301;

export type webHomeResponse = webHomeResponseComposite & {
  headers: Headers;
};

export const getWebHomeUrl = () => {
  return `/`;
};

export const webHome = async (
  options?: RequestInit,
): Promise<webHomeResponse> => {
  return customInstance<webHomeResponse>(getWebHomeUrl(), {
    ...options,
    method: "GET",
  });
};

export const getWebHomeQueryKey = () => {
  return [`/`] as const;
};

export const getWebHomeInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof webHome>>>,
  TError = void,
>(options?: {
  query?: Partial<
    UseInfiniteQueryOptions<Awaited<ReturnType<typeof webHome>>, TError, TData>
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getWebHomeQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof webHome>>> = ({
    signal,
  }) => webHome({ signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof webHome>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type WebHomeInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof webHome>>
>;
export type WebHomeInfiniteQueryError = void;

export function useWebHomeInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof webHome>>>,
  TError = void,
>(options: {
  query: Partial<
    UseInfiniteQueryOptions<Awaited<ReturnType<typeof webHome>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof webHome>>,
        TError,
        Awaited<ReturnType<typeof webHome>>
      >,
      "initialData"
    >;
  request?: SecondParameter<typeof customInstance>;
}): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useWebHomeInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof webHome>>>,
  TError = void,
>(options?: {
  query?: Partial<
    UseInfiniteQueryOptions<Awaited<ReturnType<typeof webHome>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof webHome>>,
        TError,
        Awaited<ReturnType<typeof webHome>>
      >,
      "initialData"
    >;
  request?: SecondParameter<typeof customInstance>;
}): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useWebHomeInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof webHome>>>,
  TError = void,
>(options?: {
  query?: Partial<
    UseInfiniteQueryOptions<Awaited<ReturnType<typeof webHome>>, TError, TData>
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary home web
 */

export function useWebHomeInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof webHome>>>,
  TError = void,
>(options?: {
  query?: Partial<
    UseInfiniteQueryOptions<Awaited<ReturnType<typeof webHome>>, TError, TData>
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getWebHomeInfiniteQueryOptions(options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getWebHomeQueryOptions = <
  TData = Awaited<ReturnType<typeof webHome>>,
  TError = void,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof webHome>>, TError, TData>
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getWebHomeQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof webHome>>> = ({
    signal,
  }) => webHome({ signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof webHome>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type WebHomeQueryResult = NonNullable<
  Awaited<ReturnType<typeof webHome>>
>;
export type WebHomeQueryError = void;

export function useWebHome<
  TData = Awaited<ReturnType<typeof webHome>>,
  TError = void,
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof webHome>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof webHome>>,
        TError,
        Awaited<ReturnType<typeof webHome>>
      >,
      "initialData"
    >;
  request?: SecondParameter<typeof customInstance>;
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useWebHome<
  TData = Awaited<ReturnType<typeof webHome>>,
  TError = void,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof webHome>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof webHome>>,
        TError,
        Awaited<ReturnType<typeof webHome>>
      >,
      "initialData"
    >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useWebHome<
  TData = Awaited<ReturnType<typeof webHome>>,
  TError = void,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof webHome>>, TError, TData>
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary home web
 */

export function useWebHome<
  TData = Awaited<ReturnType<typeof webHome>>,
  TError = void,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof webHome>>, TError, TData>
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getWebHomeQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Render the home page
 * @summary home web
 */
export type webHome1Response301 = {
  data: void;
  status: 301;
};

export type webHome1ResponseComposite = webHome1Response301;

export type webHome1Response = webHome1ResponseComposite & {
  headers: Headers;
};

export const getWebHome1Url = () => {
  return `/ui`;
};

export const webHome1 = async (
  options?: RequestInit,
): Promise<webHome1Response> => {
  return customInstance<webHome1Response>(getWebHome1Url(), {
    ...options,
    method: "GET",
  });
};

export const getWebHome1QueryKey = () => {
  return [`/ui`] as const;
};

export const getWebHome1InfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof webHome1>>>,
  TError = void,
>(options?: {
  query?: Partial<
    UseInfiniteQueryOptions<Awaited<ReturnType<typeof webHome1>>, TError, TData>
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getWebHome1QueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof webHome1>>> = ({
    signal,
  }) => webHome1({ signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof webHome1>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type WebHome1InfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof webHome1>>
>;
export type WebHome1InfiniteQueryError = void;

export function useWebHome1Infinite<
  TData = InfiniteData<Awaited<ReturnType<typeof webHome1>>>,
  TError = void,
>(options: {
  query: Partial<
    UseInfiniteQueryOptions<Awaited<ReturnType<typeof webHome1>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof webHome1>>,
        TError,
        Awaited<ReturnType<typeof webHome1>>
      >,
      "initialData"
    >;
  request?: SecondParameter<typeof customInstance>;
}): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useWebHome1Infinite<
  TData = InfiniteData<Awaited<ReturnType<typeof webHome1>>>,
  TError = void,
>(options?: {
  query?: Partial<
    UseInfiniteQueryOptions<Awaited<ReturnType<typeof webHome1>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof webHome1>>,
        TError,
        Awaited<ReturnType<typeof webHome1>>
      >,
      "initialData"
    >;
  request?: SecondParameter<typeof customInstance>;
}): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useWebHome1Infinite<
  TData = InfiniteData<Awaited<ReturnType<typeof webHome1>>>,
  TError = void,
>(options?: {
  query?: Partial<
    UseInfiniteQueryOptions<Awaited<ReturnType<typeof webHome1>>, TError, TData>
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary home web
 */

export function useWebHome1Infinite<
  TData = InfiniteData<Awaited<ReturnType<typeof webHome1>>>,
  TError = void,
>(options?: {
  query?: Partial<
    UseInfiniteQueryOptions<Awaited<ReturnType<typeof webHome1>>, TError, TData>
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getWebHome1InfiniteQueryOptions(options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getWebHome1QueryOptions = <
  TData = Awaited<ReturnType<typeof webHome1>>,
  TError = void,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof webHome1>>, TError, TData>
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getWebHome1QueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof webHome1>>> = ({
    signal,
  }) => webHome1({ signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof webHome1>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type WebHome1QueryResult = NonNullable<
  Awaited<ReturnType<typeof webHome1>>
>;
export type WebHome1QueryError = void;

export function useWebHome1<
  TData = Awaited<ReturnType<typeof webHome1>>,
  TError = void,
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof webHome1>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof webHome1>>,
        TError,
        Awaited<ReturnType<typeof webHome1>>
      >,
      "initialData"
    >;
  request?: SecondParameter<typeof customInstance>;
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useWebHome1<
  TData = Awaited<ReturnType<typeof webHome1>>,
  TError = void,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof webHome1>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof webHome1>>,
        TError,
        Awaited<ReturnType<typeof webHome1>>
      >,
      "initialData"
    >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useWebHome1<
  TData = Awaited<ReturnType<typeof webHome1>>,
  TError = void,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof webHome1>>, TError, TData>
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary home web
 */

export function useWebHome1<
  TData = Awaited<ReturnType<typeof webHome1>>,
  TError = void,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof webHome1>>, TError, TData>
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getWebHome1QueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Download ./web/client/dist
 */
export type webUiFilepathResponse200 = {
  data: void;
  status: 200;
};

export type webUiFilepathResponse404 = {
  data: void;
  status: 404;
};

export type webUiFilepathResponseComposite =
  | webUiFilepathResponse200
  | webUiFilepathResponse404;

export type webUiFilepathResponse = webUiFilepathResponseComposite & {
  headers: Headers;
};

export const getWebUiFilepathUrl = (filepath: unknown) => {
  return `/ui/${filepath}`;
};

export const webUiFilepath = async (
  filepath: unknown,
  options?: RequestInit,
): Promise<webUiFilepathResponse> => {
  return customInstance<webUiFilepathResponse>(getWebUiFilepathUrl(filepath), {
    ...options,
    method: "GET",
  });
};

export const getWebUiFilepathQueryKey = (filepath: unknown) => {
  return [`/ui/${filepath}`] as const;
};

export const getWebUiFilepathInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof webUiFilepath>>>,
  TError = void,
>(
  filepath: unknown,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof webUiFilepath>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getWebUiFilepathQueryKey(filepath);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof webUiFilepath>>> = ({
    signal,
  }) => webUiFilepath(filepath, { signal, ...requestOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!filepath,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof webUiFilepath>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type WebUiFilepathInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof webUiFilepath>>
>;
export type WebUiFilepathInfiniteQueryError = void;

export function useWebUiFilepathInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof webUiFilepath>>>,
  TError = void,
>(
  filepath: unknown,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof webUiFilepath>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof webUiFilepath>>,
          TError,
          Awaited<ReturnType<typeof webUiFilepath>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useWebUiFilepathInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof webUiFilepath>>>,
  TError = void,
>(
  filepath: unknown,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof webUiFilepath>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof webUiFilepath>>,
          TError,
          Awaited<ReturnType<typeof webUiFilepath>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useWebUiFilepathInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof webUiFilepath>>>,
  TError = void,
>(
  filepath: unknown,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof webUiFilepath>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Download ./web/client/dist
 */

export function useWebUiFilepathInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof webUiFilepath>>>,
  TError = void,
>(
  filepath: unknown,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof webUiFilepath>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getWebUiFilepathInfiniteQueryOptions(filepath, options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getWebUiFilepathQueryOptions = <
  TData = Awaited<ReturnType<typeof webUiFilepath>>,
  TError = void,
>(
  filepath: unknown,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof webUiFilepath>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getWebUiFilepathQueryKey(filepath);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof webUiFilepath>>> = ({
    signal,
  }) => webUiFilepath(filepath, { signal, ...requestOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!filepath,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof webUiFilepath>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type WebUiFilepathQueryResult = NonNullable<
  Awaited<ReturnType<typeof webUiFilepath>>
>;
export type WebUiFilepathQueryError = void;

export function useWebUiFilepath<
  TData = Awaited<ReturnType<typeof webUiFilepath>>,
  TError = void,
>(
  filepath: unknown,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof webUiFilepath>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof webUiFilepath>>,
          TError,
          Awaited<ReturnType<typeof webUiFilepath>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useWebUiFilepath<
  TData = Awaited<ReturnType<typeof webUiFilepath>>,
  TError = void,
>(
  filepath: unknown,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof webUiFilepath>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof webUiFilepath>>,
          TError,
          Awaited<ReturnType<typeof webUiFilepath>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useWebUiFilepath<
  TData = Awaited<ReturnType<typeof webUiFilepath>>,
  TError = void,
>(
  filepath: unknown,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof webUiFilepath>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Download ./web/client/dist
 */

export function useWebUiFilepath<
  TData = Awaited<ReturnType<typeof webUiFilepath>>,
  TError = void,
>(
  filepath: unknown,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof webUiFilepath>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getWebUiFilepathQueryOptions(filepath, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
