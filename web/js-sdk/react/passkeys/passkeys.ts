/**
 * Generated by orval v7.7.0 üç∫
 * Do not edit manually.
 * Frank Authentication Server
 * A comprehensive authentication server with OAuth2, MFA, Passkeys, SSO, and more
 * OpenAPI spec version: 1.0.0
 */
import { useInfiniteQuery, useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  BadRequestError,
  ConflictError,
  ForbiddenError,
  InternalServerError,
  ListResponseBody3,
  LoginCompleteResponseBody,
  NotFoundError,
  PasskeyLoginCompleteRequest,
  PasskeyRegisterBeginRequest,
  PasskeyRegisterCompleteRequest,
  RegisterBeginResponseBody,
  RegisteredPasskey,
  SendResponseBody,
  UnauthorizedError,
  UpdateRequestBody3,
} from "../../model";

import { customInstance } from "../../mutator/custom-instance";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * List registered passkeys
 * @summary list passkeys
 */
export type passkeysListResponse200 = {
  data: ListResponseBody3;
  status: 200;
};

export type passkeysListResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type passkeysListResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type passkeysListResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type passkeysListResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type passkeysListResponse409 = {
  data: ConflictError;
  status: 409;
};

export type passkeysListResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type passkeysListResponseComposite =
  | passkeysListResponse200
  | passkeysListResponse400
  | passkeysListResponse401
  | passkeysListResponse403
  | passkeysListResponse404
  | passkeysListResponse409
  | passkeysListResponse500;

export type passkeysListResponse = passkeysListResponseComposite & {
  headers: Headers;
};

export const getPasskeysListUrl = () => {
  return `/v1/auth/passkeys`;
};

export const passkeysList = async (
  options?: RequestInit,
): Promise<passkeysListResponse> => {
  return customInstance<passkeysListResponse>(getPasskeysListUrl(), {
    ...options,
    method: "GET",
  });
};

export const getPasskeysListQueryKey = () => {
  return [`/v1/auth/passkeys`] as const;
};

export const getPasskeysListInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof passkeysList>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(options?: {
  query?: Partial<
    UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof passkeysList>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getPasskeysListQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof passkeysList>>> = ({
    signal,
  }) => passkeysList({ signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof passkeysList>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type PasskeysListInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof passkeysList>>
>;
export type PasskeysListInfiniteQueryError =
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | ConflictError
  | InternalServerError;

export function usePasskeysListInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof passkeysList>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(options: {
  query: Partial<
    UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof passkeysList>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof passkeysList>>,
        TError,
        Awaited<ReturnType<typeof passkeysList>>
      >,
      "initialData"
    >;
  request?: SecondParameter<typeof customInstance>;
}): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function usePasskeysListInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof passkeysList>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(options?: {
  query?: Partial<
    UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof passkeysList>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof passkeysList>>,
        TError,
        Awaited<ReturnType<typeof passkeysList>>
      >,
      "initialData"
    >;
  request?: SecondParameter<typeof customInstance>;
}): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function usePasskeysListInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof passkeysList>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(options?: {
  query?: Partial<
    UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof passkeysList>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary list passkeys
 */

export function usePasskeysListInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof passkeysList>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(options?: {
  query?: Partial<
    UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof passkeysList>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getPasskeysListInfiniteQueryOptions(options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getPasskeysListQueryOptions = <
  TData = Awaited<ReturnType<typeof passkeysList>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof passkeysList>>, TError, TData>
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getPasskeysListQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof passkeysList>>> = ({
    signal,
  }) => passkeysList({ signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof passkeysList>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type PasskeysListQueryResult = NonNullable<
  Awaited<ReturnType<typeof passkeysList>>
>;
export type PasskeysListQueryError =
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | ConflictError
  | InternalServerError;

export function usePasskeysList<
  TData = Awaited<ReturnType<typeof passkeysList>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof passkeysList>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof passkeysList>>,
        TError,
        Awaited<ReturnType<typeof passkeysList>>
      >,
      "initialData"
    >;
  request?: SecondParameter<typeof customInstance>;
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function usePasskeysList<
  TData = Awaited<ReturnType<typeof passkeysList>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof passkeysList>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof passkeysList>>,
        TError,
        Awaited<ReturnType<typeof passkeysList>>
      >,
      "initialData"
    >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function usePasskeysList<
  TData = Awaited<ReturnType<typeof passkeysList>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof passkeysList>>, TError, TData>
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary list passkeys
 */

export function usePasskeysList<
  TData = Awaited<ReturnType<typeof passkeysList>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof passkeysList>>, TError, TData>
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getPasskeysListQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Begin passkey authentication
 * @summary login_begin passkeys
 */
export type passkeysLoginBeginResponse200 = {
  data: RegisterBeginResponseBody;
  status: 200;
};

export type passkeysLoginBeginResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type passkeysLoginBeginResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type passkeysLoginBeginResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type passkeysLoginBeginResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type passkeysLoginBeginResponse409 = {
  data: ConflictError;
  status: 409;
};

export type passkeysLoginBeginResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type passkeysLoginBeginResponseComposite =
  | passkeysLoginBeginResponse200
  | passkeysLoginBeginResponse400
  | passkeysLoginBeginResponse401
  | passkeysLoginBeginResponse403
  | passkeysLoginBeginResponse404
  | passkeysLoginBeginResponse409
  | passkeysLoginBeginResponse500;

export type passkeysLoginBeginResponse = passkeysLoginBeginResponseComposite & {
  headers: Headers;
};

export const getPasskeysLoginBeginUrl = () => {
  return `/v1/auth/passkeys/login/begin`;
};

export const passkeysLoginBegin = async (
  options?: RequestInit,
): Promise<passkeysLoginBeginResponse> => {
  return customInstance<passkeysLoginBeginResponse>(
    getPasskeysLoginBeginUrl(),
    {
      ...options,
      method: "POST",
    },
  );
};

export const getPasskeysLoginBeginMutationOptions = <
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof passkeysLoginBegin>>,
    TError,
    void,
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof passkeysLoginBegin>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ["passkeysLoginBegin"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof passkeysLoginBegin>>,
    void
  > = () => {
    return passkeysLoginBegin(requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PasskeysLoginBeginMutationResult = NonNullable<
  Awaited<ReturnType<typeof passkeysLoginBegin>>
>;

export type PasskeysLoginBeginMutationError =
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | ConflictError
  | InternalServerError;

/**
 * @summary login_begin passkeys
 */
export const usePasskeysLoginBegin = <
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof passkeysLoginBegin>>,
    TError,
    void,
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof passkeysLoginBegin>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getPasskeysLoginBeginMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Complete passkey authentication
 * @summary login_complete passkeys
 */
export type passkeysLoginCompleteResponse200 = {
  data: LoginCompleteResponseBody;
  status: 200;
};

export type passkeysLoginCompleteResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type passkeysLoginCompleteResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type passkeysLoginCompleteResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type passkeysLoginCompleteResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type passkeysLoginCompleteResponse409 = {
  data: ConflictError;
  status: 409;
};

export type passkeysLoginCompleteResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type passkeysLoginCompleteResponseComposite =
  | passkeysLoginCompleteResponse200
  | passkeysLoginCompleteResponse400
  | passkeysLoginCompleteResponse401
  | passkeysLoginCompleteResponse403
  | passkeysLoginCompleteResponse404
  | passkeysLoginCompleteResponse409
  | passkeysLoginCompleteResponse500;

export type passkeysLoginCompleteResponse =
  passkeysLoginCompleteResponseComposite & {
    headers: Headers;
  };

export const getPasskeysLoginCompleteUrl = () => {
  return `/v1/auth/passkeys/login/complete`;
};

export const passkeysLoginComplete = async (
  passkeyLoginCompleteRequest: PasskeyLoginCompleteRequest,
  options?: RequestInit,
): Promise<passkeysLoginCompleteResponse> => {
  return customInstance<passkeysLoginCompleteResponse>(
    getPasskeysLoginCompleteUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(passkeyLoginCompleteRequest),
    },
  );
};

export const getPasskeysLoginCompleteMutationOptions = <
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof passkeysLoginComplete>>,
    TError,
    { data: PasskeyLoginCompleteRequest },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof passkeysLoginComplete>>,
  TError,
  { data: PasskeyLoginCompleteRequest },
  TContext
> => {
  const mutationKey = ["passkeysLoginComplete"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof passkeysLoginComplete>>,
    { data: PasskeyLoginCompleteRequest }
  > = (props) => {
    const { data } = props ?? {};

    return passkeysLoginComplete(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PasskeysLoginCompleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof passkeysLoginComplete>>
>;
export type PasskeysLoginCompleteMutationBody = PasskeyLoginCompleteRequest;
export type PasskeysLoginCompleteMutationError =
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | ConflictError
  | InternalServerError;

/**
 * @summary login_complete passkeys
 */
export const usePasskeysLoginComplete = <
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof passkeysLoginComplete>>,
    TError,
    { data: PasskeyLoginCompleteRequest },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof passkeysLoginComplete>>,
  TError,
  { data: PasskeyLoginCompleteRequest },
  TContext
> => {
  const mutationOptions = getPasskeysLoginCompleteMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Begin passkey registration
 * @summary register_begin passkeys
 */
export type passkeysRegisterBeginResponse200 = {
  data: RegisterBeginResponseBody;
  status: 200;
};

export type passkeysRegisterBeginResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type passkeysRegisterBeginResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type passkeysRegisterBeginResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type passkeysRegisterBeginResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type passkeysRegisterBeginResponse409 = {
  data: ConflictError;
  status: 409;
};

export type passkeysRegisterBeginResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type passkeysRegisterBeginResponseComposite =
  | passkeysRegisterBeginResponse200
  | passkeysRegisterBeginResponse400
  | passkeysRegisterBeginResponse401
  | passkeysRegisterBeginResponse403
  | passkeysRegisterBeginResponse404
  | passkeysRegisterBeginResponse409
  | passkeysRegisterBeginResponse500;

export type passkeysRegisterBeginResponse =
  passkeysRegisterBeginResponseComposite & {
    headers: Headers;
  };

export const getPasskeysRegisterBeginUrl = () => {
  return `/v1/auth/passkeys/register/begin`;
};

export const passkeysRegisterBegin = async (
  passkeyRegisterBeginRequest: PasskeyRegisterBeginRequest,
  options?: RequestInit,
): Promise<passkeysRegisterBeginResponse> => {
  return customInstance<passkeysRegisterBeginResponse>(
    getPasskeysRegisterBeginUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(passkeyRegisterBeginRequest),
    },
  );
};

export const getPasskeysRegisterBeginMutationOptions = <
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof passkeysRegisterBegin>>,
    TError,
    { data: PasskeyRegisterBeginRequest },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof passkeysRegisterBegin>>,
  TError,
  { data: PasskeyRegisterBeginRequest },
  TContext
> => {
  const mutationKey = ["passkeysRegisterBegin"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof passkeysRegisterBegin>>,
    { data: PasskeyRegisterBeginRequest }
  > = (props) => {
    const { data } = props ?? {};

    return passkeysRegisterBegin(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PasskeysRegisterBeginMutationResult = NonNullable<
  Awaited<ReturnType<typeof passkeysRegisterBegin>>
>;
export type PasskeysRegisterBeginMutationBody = PasskeyRegisterBeginRequest;
export type PasskeysRegisterBeginMutationError =
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | ConflictError
  | InternalServerError;

/**
 * @summary register_begin passkeys
 */
export const usePasskeysRegisterBegin = <
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof passkeysRegisterBegin>>,
    TError,
    { data: PasskeyRegisterBeginRequest },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof passkeysRegisterBegin>>,
  TError,
  { data: PasskeyRegisterBeginRequest },
  TContext
> => {
  const mutationOptions = getPasskeysRegisterBeginMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Complete passkey registration
 * @summary register_complete passkeys
 */
export type passkeysRegisterCompleteResponse200 = {
  data: RegisteredPasskey;
  status: 200;
};

export type passkeysRegisterCompleteResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type passkeysRegisterCompleteResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type passkeysRegisterCompleteResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type passkeysRegisterCompleteResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type passkeysRegisterCompleteResponse409 = {
  data: ConflictError;
  status: 409;
};

export type passkeysRegisterCompleteResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type passkeysRegisterCompleteResponseComposite =
  | passkeysRegisterCompleteResponse200
  | passkeysRegisterCompleteResponse400
  | passkeysRegisterCompleteResponse401
  | passkeysRegisterCompleteResponse403
  | passkeysRegisterCompleteResponse404
  | passkeysRegisterCompleteResponse409
  | passkeysRegisterCompleteResponse500;

export type passkeysRegisterCompleteResponse =
  passkeysRegisterCompleteResponseComposite & {
    headers: Headers;
  };

export const getPasskeysRegisterCompleteUrl = () => {
  return `/v1/auth/passkeys/register/complete`;
};

export const passkeysRegisterComplete = async (
  passkeyRegisterCompleteRequest: PasskeyRegisterCompleteRequest,
  options?: RequestInit,
): Promise<passkeysRegisterCompleteResponse> => {
  return customInstance<passkeysRegisterCompleteResponse>(
    getPasskeysRegisterCompleteUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(passkeyRegisterCompleteRequest),
    },
  );
};

export const getPasskeysRegisterCompleteMutationOptions = <
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof passkeysRegisterComplete>>,
    TError,
    { data: PasskeyRegisterCompleteRequest },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof passkeysRegisterComplete>>,
  TError,
  { data: PasskeyRegisterCompleteRequest },
  TContext
> => {
  const mutationKey = ["passkeysRegisterComplete"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof passkeysRegisterComplete>>,
    { data: PasskeyRegisterCompleteRequest }
  > = (props) => {
    const { data } = props ?? {};

    return passkeysRegisterComplete(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PasskeysRegisterCompleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof passkeysRegisterComplete>>
>;
export type PasskeysRegisterCompleteMutationBody =
  PasskeyRegisterCompleteRequest;
export type PasskeysRegisterCompleteMutationError =
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | ConflictError
  | InternalServerError;

/**
 * @summary register_complete passkeys
 */
export const usePasskeysRegisterComplete = <
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof passkeysRegisterComplete>>,
    TError,
    { data: PasskeyRegisterCompleteRequest },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof passkeysRegisterComplete>>,
  TError,
  { data: PasskeyRegisterCompleteRequest },
  TContext
> => {
  const mutationOptions = getPasskeysRegisterCompleteMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Delete passkey
 * @summary delete passkeys
 */
export type passkeysDeleteResponse204 = {
  data: void;
  status: 204;
};

export type passkeysDeleteResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type passkeysDeleteResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type passkeysDeleteResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type passkeysDeleteResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type passkeysDeleteResponse409 = {
  data: ConflictError;
  status: 409;
};

export type passkeysDeleteResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type passkeysDeleteResponseComposite =
  | passkeysDeleteResponse204
  | passkeysDeleteResponse400
  | passkeysDeleteResponse401
  | passkeysDeleteResponse403
  | passkeysDeleteResponse404
  | passkeysDeleteResponse409
  | passkeysDeleteResponse500;

export type passkeysDeleteResponse = passkeysDeleteResponseComposite & {
  headers: Headers;
};

export const getPasskeysDeleteUrl = (id: string) => {
  return `/v1/auth/passkeys/${id}`;
};

export const passkeysDelete = async (
  id: string,
  options?: RequestInit,
): Promise<passkeysDeleteResponse> => {
  return customInstance<passkeysDeleteResponse>(getPasskeysDeleteUrl(id), {
    ...options,
    method: "DELETE",
  });
};

export const getPasskeysDeleteMutationOptions = <
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof passkeysDelete>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof passkeysDelete>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["passkeysDelete"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof passkeysDelete>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return passkeysDelete(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PasskeysDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof passkeysDelete>>
>;

export type PasskeysDeleteMutationError =
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | ConflictError
  | InternalServerError;

/**
 * @summary delete passkeys
 */
export const usePasskeysDelete = <
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof passkeysDelete>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof passkeysDelete>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getPasskeysDeleteMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Update passkey
 * @summary update passkeys
 */
export type passkeysUpdateResponse200 = {
  data: SendResponseBody;
  status: 200;
};

export type passkeysUpdateResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type passkeysUpdateResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type passkeysUpdateResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type passkeysUpdateResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type passkeysUpdateResponse409 = {
  data: ConflictError;
  status: 409;
};

export type passkeysUpdateResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type passkeysUpdateResponseComposite =
  | passkeysUpdateResponse200
  | passkeysUpdateResponse400
  | passkeysUpdateResponse401
  | passkeysUpdateResponse403
  | passkeysUpdateResponse404
  | passkeysUpdateResponse409
  | passkeysUpdateResponse500;

export type passkeysUpdateResponse = passkeysUpdateResponseComposite & {
  headers: Headers;
};

export const getPasskeysUpdateUrl = (id: string) => {
  return `/v1/auth/passkeys/${id}`;
};

export const passkeysUpdate = async (
  id: string,
  updateRequestBody3: UpdateRequestBody3,
  options?: RequestInit,
): Promise<passkeysUpdateResponse> => {
  return customInstance<passkeysUpdateResponse>(getPasskeysUpdateUrl(id), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(updateRequestBody3),
  });
};

export const getPasskeysUpdateMutationOptions = <
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof passkeysUpdate>>,
    TError,
    { id: string; data: UpdateRequestBody3 },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof passkeysUpdate>>,
  TError,
  { id: string; data: UpdateRequestBody3 },
  TContext
> => {
  const mutationKey = ["passkeysUpdate"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof passkeysUpdate>>,
    { id: string; data: UpdateRequestBody3 }
  > = (props) => {
    const { id, data } = props ?? {};

    return passkeysUpdate(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PasskeysUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof passkeysUpdate>>
>;
export type PasskeysUpdateMutationBody = UpdateRequestBody3;
export type PasskeysUpdateMutationError =
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | ConflictError
  | InternalServerError;

/**
 * @summary update passkeys
 */
export const usePasskeysUpdate = <
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof passkeysUpdate>>,
    TError,
    { id: string; data: UpdateRequestBody3 },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof passkeysUpdate>>,
  TError,
  { id: string; data: UpdateRequestBody3 },
  TContext
> => {
  const mutationOptions = getPasskeysUpdateMutationOptions(options);

  return useMutation(mutationOptions);
};
