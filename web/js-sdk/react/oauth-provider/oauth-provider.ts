/**
 * Generated by orval v7.7.0 üç∫
 * Do not edit manually.
 * Frank Authentication Server
 * A comprehensive authentication server with OAuth2, MFA, Passkeys, SSO, and more
 * OpenAPI spec version: 1.0.0
 */
import { useInfiniteQuery, useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  BadRequestError,
  ConflictError,
  ConsentRequest,
  ConsentResponseBody,
  CreateOAuthClientRequest,
  CreateOAuthScopeRequest,
  ForbiddenError,
  InternalServerError,
  IntrospectResponseBody,
  JwksResponseBody,
  ListClientsResponseBody,
  ListScopesResponseBody,
  NotFoundError,
  OAuthClientResponse,
  OAuthClientWithSecretResponse,
  OAuthScopeResponse,
  OauthProviderAuthorizeParams,
  OauthProviderIntrospectParams,
  OauthProviderListClientsParams,
  OauthProviderListScopesParams,
  OauthProviderRevokeParams,
  OauthProviderTokenParams,
  OidcConfigurationResponseBody,
  RotateClientSecretResponseBody,
  TokenResponseBody,
  UnauthorizedError,
  UpdateClientRequestBody,
  UpdateScopeRequestBody,
  UserinfoResponseBody,
} from "../../model";

import { customInstance } from "../../mutator/custom-instance";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * JSON Web Key Set
 * @summary jwks oauth_provider
 */
export type oauthProviderJwksResponse200 = {
  data: JwksResponseBody;
  status: 200;
};

export type oauthProviderJwksResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type oauthProviderJwksResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type oauthProviderJwksResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type oauthProviderJwksResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type oauthProviderJwksResponse409 = {
  data: ConflictError;
  status: 409;
};

export type oauthProviderJwksResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type oauthProviderJwksResponseComposite =
  | oauthProviderJwksResponse200
  | oauthProviderJwksResponse400
  | oauthProviderJwksResponse401
  | oauthProviderJwksResponse403
  | oauthProviderJwksResponse404
  | oauthProviderJwksResponse409
  | oauthProviderJwksResponse500;

export type oauthProviderJwksResponse = oauthProviderJwksResponseComposite & {
  headers: Headers;
};

export const getOauthProviderJwksUrl = () => {
  return `/v1/oauth/.well-known/jwks.json`;
};

export const oauthProviderJwks = async (
  options?: RequestInit,
): Promise<oauthProviderJwksResponse> => {
  return customInstance<oauthProviderJwksResponse>(getOauthProviderJwksUrl(), {
    ...options,
    method: "GET",
  });
};

export const getOauthProviderJwksQueryKey = () => {
  return [`/v1/oauth/.well-known/jwks.json`] as const;
};

export const getOauthProviderJwksInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof oauthProviderJwks>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(options?: {
  query?: Partial<
    UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof oauthProviderJwks>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getOauthProviderJwksQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof oauthProviderJwks>>
  > = ({ signal }) => oauthProviderJwks({ signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof oauthProviderJwks>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type OauthProviderJwksInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof oauthProviderJwks>>
>;
export type OauthProviderJwksInfiniteQueryError =
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | ConflictError
  | InternalServerError;

export function useOauthProviderJwksInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof oauthProviderJwks>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(options: {
  query: Partial<
    UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof oauthProviderJwks>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof oauthProviderJwks>>,
        TError,
        Awaited<ReturnType<typeof oauthProviderJwks>>
      >,
      "initialData"
    >;
  request?: SecondParameter<typeof customInstance>;
}): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useOauthProviderJwksInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof oauthProviderJwks>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(options?: {
  query?: Partial<
    UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof oauthProviderJwks>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof oauthProviderJwks>>,
        TError,
        Awaited<ReturnType<typeof oauthProviderJwks>>
      >,
      "initialData"
    >;
  request?: SecondParameter<typeof customInstance>;
}): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useOauthProviderJwksInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof oauthProviderJwks>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(options?: {
  query?: Partial<
    UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof oauthProviderJwks>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary jwks oauth_provider
 */

export function useOauthProviderJwksInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof oauthProviderJwks>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(options?: {
  query?: Partial<
    UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof oauthProviderJwks>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getOauthProviderJwksInfiniteQueryOptions(options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getOauthProviderJwksQueryOptions = <
  TData = Awaited<ReturnType<typeof oauthProviderJwks>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof oauthProviderJwks>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getOauthProviderJwksQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof oauthProviderJwks>>
  > = ({ signal }) => oauthProviderJwks({ signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof oauthProviderJwks>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type OauthProviderJwksQueryResult = NonNullable<
  Awaited<ReturnType<typeof oauthProviderJwks>>
>;
export type OauthProviderJwksQueryError =
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | ConflictError
  | InternalServerError;

export function useOauthProviderJwks<
  TData = Awaited<ReturnType<typeof oauthProviderJwks>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof oauthProviderJwks>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof oauthProviderJwks>>,
        TError,
        Awaited<ReturnType<typeof oauthProviderJwks>>
      >,
      "initialData"
    >;
  request?: SecondParameter<typeof customInstance>;
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useOauthProviderJwks<
  TData = Awaited<ReturnType<typeof oauthProviderJwks>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof oauthProviderJwks>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof oauthProviderJwks>>,
        TError,
        Awaited<ReturnType<typeof oauthProviderJwks>>
      >,
      "initialData"
    >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useOauthProviderJwks<
  TData = Awaited<ReturnType<typeof oauthProviderJwks>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof oauthProviderJwks>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary jwks oauth_provider
 */

export function useOauthProviderJwks<
  TData = Awaited<ReturnType<typeof oauthProviderJwks>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof oauthProviderJwks>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getOauthProviderJwksQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * OpenID Connect discovery configuration
 * @summary oidc_configuration oauth_provider
 */
export type oauthProviderOidcConfigurationResponse200 = {
  data: OidcConfigurationResponseBody;
  status: 200;
};

export type oauthProviderOidcConfigurationResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type oauthProviderOidcConfigurationResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type oauthProviderOidcConfigurationResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type oauthProviderOidcConfigurationResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type oauthProviderOidcConfigurationResponse409 = {
  data: ConflictError;
  status: 409;
};

export type oauthProviderOidcConfigurationResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type oauthProviderOidcConfigurationResponseComposite =
  | oauthProviderOidcConfigurationResponse200
  | oauthProviderOidcConfigurationResponse400
  | oauthProviderOidcConfigurationResponse401
  | oauthProviderOidcConfigurationResponse403
  | oauthProviderOidcConfigurationResponse404
  | oauthProviderOidcConfigurationResponse409
  | oauthProviderOidcConfigurationResponse500;

export type oauthProviderOidcConfigurationResponse =
  oauthProviderOidcConfigurationResponseComposite & {
    headers: Headers;
  };

export const getOauthProviderOidcConfigurationUrl = () => {
  return `/v1/oauth/.well-known/openid-configuration`;
};

export const oauthProviderOidcConfiguration = async (
  options?: RequestInit,
): Promise<oauthProviderOidcConfigurationResponse> => {
  return customInstance<oauthProviderOidcConfigurationResponse>(
    getOauthProviderOidcConfigurationUrl(),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getOauthProviderOidcConfigurationQueryKey = () => {
  return [`/v1/oauth/.well-known/openid-configuration`] as const;
};

export const getOauthProviderOidcConfigurationInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof oauthProviderOidcConfiguration>>
  >,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(options?: {
  query?: Partial<
    UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof oauthProviderOidcConfiguration>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getOauthProviderOidcConfigurationQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof oauthProviderOidcConfiguration>>
  > = ({ signal }) =>
    oauthProviderOidcConfiguration({ signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof oauthProviderOidcConfiguration>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type OauthProviderOidcConfigurationInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof oauthProviderOidcConfiguration>>
>;
export type OauthProviderOidcConfigurationInfiniteQueryError =
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | ConflictError
  | InternalServerError;

export function useOauthProviderOidcConfigurationInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof oauthProviderOidcConfiguration>>
  >,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(options: {
  query: Partial<
    UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof oauthProviderOidcConfiguration>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof oauthProviderOidcConfiguration>>,
        TError,
        Awaited<ReturnType<typeof oauthProviderOidcConfiguration>>
      >,
      "initialData"
    >;
  request?: SecondParameter<typeof customInstance>;
}): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useOauthProviderOidcConfigurationInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof oauthProviderOidcConfiguration>>
  >,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(options?: {
  query?: Partial<
    UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof oauthProviderOidcConfiguration>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof oauthProviderOidcConfiguration>>,
        TError,
        Awaited<ReturnType<typeof oauthProviderOidcConfiguration>>
      >,
      "initialData"
    >;
  request?: SecondParameter<typeof customInstance>;
}): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useOauthProviderOidcConfigurationInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof oauthProviderOidcConfiguration>>
  >,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(options?: {
  query?: Partial<
    UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof oauthProviderOidcConfiguration>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary oidc_configuration oauth_provider
 */

export function useOauthProviderOidcConfigurationInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof oauthProviderOidcConfiguration>>
  >,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(options?: {
  query?: Partial<
    UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof oauthProviderOidcConfiguration>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    getOauthProviderOidcConfigurationInfiniteQueryOptions(options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getOauthProviderOidcConfigurationQueryOptions = <
  TData = Awaited<ReturnType<typeof oauthProviderOidcConfiguration>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof oauthProviderOidcConfiguration>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getOauthProviderOidcConfigurationQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof oauthProviderOidcConfiguration>>
  > = ({ signal }) =>
    oauthProviderOidcConfiguration({ signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof oauthProviderOidcConfiguration>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type OauthProviderOidcConfigurationQueryResult = NonNullable<
  Awaited<ReturnType<typeof oauthProviderOidcConfiguration>>
>;
export type OauthProviderOidcConfigurationQueryError =
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | ConflictError
  | InternalServerError;

export function useOauthProviderOidcConfiguration<
  TData = Awaited<ReturnType<typeof oauthProviderOidcConfiguration>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof oauthProviderOidcConfiguration>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof oauthProviderOidcConfiguration>>,
        TError,
        Awaited<ReturnType<typeof oauthProviderOidcConfiguration>>
      >,
      "initialData"
    >;
  request?: SecondParameter<typeof customInstance>;
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useOauthProviderOidcConfiguration<
  TData = Awaited<ReturnType<typeof oauthProviderOidcConfiguration>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof oauthProviderOidcConfiguration>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof oauthProviderOidcConfiguration>>,
        TError,
        Awaited<ReturnType<typeof oauthProviderOidcConfiguration>>
      >,
      "initialData"
    >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useOauthProviderOidcConfiguration<
  TData = Awaited<ReturnType<typeof oauthProviderOidcConfiguration>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof oauthProviderOidcConfiguration>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary oidc_configuration oauth_provider
 */

export function useOauthProviderOidcConfiguration<
  TData = Awaited<ReturnType<typeof oauthProviderOidcConfiguration>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof oauthProviderOidcConfiguration>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getOauthProviderOidcConfigurationQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * OAuth2 authorization endpoint
 * @summary authorize oauth_provider
 */
export type oauthProviderAuthorizeResponse200 = {
  data: string;
  status: 200;
};

export type oauthProviderAuthorizeResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type oauthProviderAuthorizeResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type oauthProviderAuthorizeResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type oauthProviderAuthorizeResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type oauthProviderAuthorizeResponse409 = {
  data: ConflictError;
  status: 409;
};

export type oauthProviderAuthorizeResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type oauthProviderAuthorizeResponseComposite =
  | oauthProviderAuthorizeResponse200
  | oauthProviderAuthorizeResponse400
  | oauthProviderAuthorizeResponse401
  | oauthProviderAuthorizeResponse403
  | oauthProviderAuthorizeResponse404
  | oauthProviderAuthorizeResponse409
  | oauthProviderAuthorizeResponse500;

export type oauthProviderAuthorizeResponse =
  oauthProviderAuthorizeResponseComposite & {
    headers: Headers;
  };

export const getOauthProviderAuthorizeUrl = (
  params: OauthProviderAuthorizeParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/v1/oauth/authorize?${stringifiedParams}`
    : `/v1/oauth/authorize`;
};

export const oauthProviderAuthorize = async (
  params: OauthProviderAuthorizeParams,
  options?: RequestInit,
): Promise<oauthProviderAuthorizeResponse> => {
  return customInstance<oauthProviderAuthorizeResponse>(
    getOauthProviderAuthorizeUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getOauthProviderAuthorizeQueryKey = (
  params: OauthProviderAuthorizeParams,
) => {
  return [`/v1/oauth/authorize`, ...(params ? [params] : [])] as const;
};

export const getOauthProviderAuthorizeInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof oauthProviderAuthorize>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  params: OauthProviderAuthorizeParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof oauthProviderAuthorize>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getOauthProviderAuthorizeQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof oauthProviderAuthorize>>
  > = ({ signal }) =>
    oauthProviderAuthorize(params, { signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof oauthProviderAuthorize>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type OauthProviderAuthorizeInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof oauthProviderAuthorize>>
>;
export type OauthProviderAuthorizeInfiniteQueryError =
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | ConflictError
  | InternalServerError;

export function useOauthProviderAuthorizeInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof oauthProviderAuthorize>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  params: OauthProviderAuthorizeParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof oauthProviderAuthorize>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof oauthProviderAuthorize>>,
          TError,
          Awaited<ReturnType<typeof oauthProviderAuthorize>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useOauthProviderAuthorizeInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof oauthProviderAuthorize>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  params: OauthProviderAuthorizeParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof oauthProviderAuthorize>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof oauthProviderAuthorize>>,
          TError,
          Awaited<ReturnType<typeof oauthProviderAuthorize>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useOauthProviderAuthorizeInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof oauthProviderAuthorize>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  params: OauthProviderAuthorizeParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof oauthProviderAuthorize>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary authorize oauth_provider
 */

export function useOauthProviderAuthorizeInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof oauthProviderAuthorize>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  params: OauthProviderAuthorizeParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof oauthProviderAuthorize>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getOauthProviderAuthorizeInfiniteQueryOptions(
    params,
    options,
  );

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getOauthProviderAuthorizeQueryOptions = <
  TData = Awaited<ReturnType<typeof oauthProviderAuthorize>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  params: OauthProviderAuthorizeParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof oauthProviderAuthorize>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getOauthProviderAuthorizeQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof oauthProviderAuthorize>>
  > = ({ signal }) =>
    oauthProviderAuthorize(params, { signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof oauthProviderAuthorize>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type OauthProviderAuthorizeQueryResult = NonNullable<
  Awaited<ReturnType<typeof oauthProviderAuthorize>>
>;
export type OauthProviderAuthorizeQueryError =
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | ConflictError
  | InternalServerError;

export function useOauthProviderAuthorize<
  TData = Awaited<ReturnType<typeof oauthProviderAuthorize>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  params: OauthProviderAuthorizeParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof oauthProviderAuthorize>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof oauthProviderAuthorize>>,
          TError,
          Awaited<ReturnType<typeof oauthProviderAuthorize>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useOauthProviderAuthorize<
  TData = Awaited<ReturnType<typeof oauthProviderAuthorize>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  params: OauthProviderAuthorizeParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof oauthProviderAuthorize>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof oauthProviderAuthorize>>,
          TError,
          Awaited<ReturnType<typeof oauthProviderAuthorize>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useOauthProviderAuthorize<
  TData = Awaited<ReturnType<typeof oauthProviderAuthorize>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  params: OauthProviderAuthorizeParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof oauthProviderAuthorize>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary authorize oauth_provider
 */

export function useOauthProviderAuthorize<
  TData = Awaited<ReturnType<typeof oauthProviderAuthorize>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  params: OauthProviderAuthorizeParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof oauthProviderAuthorize>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getOauthProviderAuthorizeQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * List OAuth clients
 * @summary list_clients oauth_provider
 */
export type oauthProviderListClientsResponse200 = {
  data: ListClientsResponseBody;
  status: 200;
};

export type oauthProviderListClientsResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type oauthProviderListClientsResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type oauthProviderListClientsResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type oauthProviderListClientsResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type oauthProviderListClientsResponse409 = {
  data: ConflictError;
  status: 409;
};

export type oauthProviderListClientsResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type oauthProviderListClientsResponseComposite =
  | oauthProviderListClientsResponse200
  | oauthProviderListClientsResponse400
  | oauthProviderListClientsResponse401
  | oauthProviderListClientsResponse403
  | oauthProviderListClientsResponse404
  | oauthProviderListClientsResponse409
  | oauthProviderListClientsResponse500;

export type oauthProviderListClientsResponse =
  oauthProviderListClientsResponseComposite & {
    headers: Headers;
  };

export const getOauthProviderListClientsUrl = (
  params?: OauthProviderListClientsParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/v1/oauth/clients?${stringifiedParams}`
    : `/v1/oauth/clients`;
};

export const oauthProviderListClients = async (
  params?: OauthProviderListClientsParams,
  options?: RequestInit,
): Promise<oauthProviderListClientsResponse> => {
  return customInstance<oauthProviderListClientsResponse>(
    getOauthProviderListClientsUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getOauthProviderListClientsQueryKey = (
  params?: OauthProviderListClientsParams,
) => {
  return [`/v1/oauth/clients`, ...(params ? [params] : [])] as const;
};

export const getOauthProviderListClientsInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof oauthProviderListClients>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  params?: OauthProviderListClientsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof oauthProviderListClients>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getOauthProviderListClientsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof oauthProviderListClients>>
  > = ({ signal }) =>
    oauthProviderListClients(params, { signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof oauthProviderListClients>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type OauthProviderListClientsInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof oauthProviderListClients>>
>;
export type OauthProviderListClientsInfiniteQueryError =
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | ConflictError
  | InternalServerError;

export function useOauthProviderListClientsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof oauthProviderListClients>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  params: undefined | OauthProviderListClientsParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof oauthProviderListClients>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof oauthProviderListClients>>,
          TError,
          Awaited<ReturnType<typeof oauthProviderListClients>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useOauthProviderListClientsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof oauthProviderListClients>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  params?: OauthProviderListClientsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof oauthProviderListClients>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof oauthProviderListClients>>,
          TError,
          Awaited<ReturnType<typeof oauthProviderListClients>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useOauthProviderListClientsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof oauthProviderListClients>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  params?: OauthProviderListClientsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof oauthProviderListClients>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary list_clients oauth_provider
 */

export function useOauthProviderListClientsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof oauthProviderListClients>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  params?: OauthProviderListClientsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof oauthProviderListClients>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getOauthProviderListClientsInfiniteQueryOptions(
    params,
    options,
  );

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getOauthProviderListClientsQueryOptions = <
  TData = Awaited<ReturnType<typeof oauthProviderListClients>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  params?: OauthProviderListClientsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof oauthProviderListClients>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getOauthProviderListClientsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof oauthProviderListClients>>
  > = ({ signal }) =>
    oauthProviderListClients(params, { signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof oauthProviderListClients>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type OauthProviderListClientsQueryResult = NonNullable<
  Awaited<ReturnType<typeof oauthProviderListClients>>
>;
export type OauthProviderListClientsQueryError =
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | ConflictError
  | InternalServerError;

export function useOauthProviderListClients<
  TData = Awaited<ReturnType<typeof oauthProviderListClients>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  params: undefined | OauthProviderListClientsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof oauthProviderListClients>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof oauthProviderListClients>>,
          TError,
          Awaited<ReturnType<typeof oauthProviderListClients>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useOauthProviderListClients<
  TData = Awaited<ReturnType<typeof oauthProviderListClients>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  params?: OauthProviderListClientsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof oauthProviderListClients>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof oauthProviderListClients>>,
          TError,
          Awaited<ReturnType<typeof oauthProviderListClients>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useOauthProviderListClients<
  TData = Awaited<ReturnType<typeof oauthProviderListClients>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  params?: OauthProviderListClientsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof oauthProviderListClients>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary list_clients oauth_provider
 */

export function useOauthProviderListClients<
  TData = Awaited<ReturnType<typeof oauthProviderListClients>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  params?: OauthProviderListClientsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof oauthProviderListClients>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getOauthProviderListClientsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Create a new OAuth client
 * @summary create_client oauth_provider
 */
export type oauthProviderCreateClientResponse201 = {
  data: OAuthClientWithSecretResponse;
  status: 201;
};

export type oauthProviderCreateClientResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type oauthProviderCreateClientResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type oauthProviderCreateClientResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type oauthProviderCreateClientResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type oauthProviderCreateClientResponse409 = {
  data: ConflictError;
  status: 409;
};

export type oauthProviderCreateClientResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type oauthProviderCreateClientResponseComposite =
  | oauthProviderCreateClientResponse201
  | oauthProviderCreateClientResponse400
  | oauthProviderCreateClientResponse401
  | oauthProviderCreateClientResponse403
  | oauthProviderCreateClientResponse404
  | oauthProviderCreateClientResponse409
  | oauthProviderCreateClientResponse500;

export type oauthProviderCreateClientResponse =
  oauthProviderCreateClientResponseComposite & {
    headers: Headers;
  };

export const getOauthProviderCreateClientUrl = () => {
  return `/v1/oauth/clients`;
};

export const oauthProviderCreateClient = async (
  createOAuthClientRequest: CreateOAuthClientRequest,
  options?: RequestInit,
): Promise<oauthProviderCreateClientResponse> => {
  return customInstance<oauthProviderCreateClientResponse>(
    getOauthProviderCreateClientUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(createOAuthClientRequest),
    },
  );
};

export const getOauthProviderCreateClientMutationOptions = <
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof oauthProviderCreateClient>>,
    TError,
    { data: CreateOAuthClientRequest },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof oauthProviderCreateClient>>,
  TError,
  { data: CreateOAuthClientRequest },
  TContext
> => {
  const mutationKey = ["oauthProviderCreateClient"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof oauthProviderCreateClient>>,
    { data: CreateOAuthClientRequest }
  > = (props) => {
    const { data } = props ?? {};

    return oauthProviderCreateClient(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type OauthProviderCreateClientMutationResult = NonNullable<
  Awaited<ReturnType<typeof oauthProviderCreateClient>>
>;
export type OauthProviderCreateClientMutationBody = CreateOAuthClientRequest;
export type OauthProviderCreateClientMutationError =
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | ConflictError
  | InternalServerError;

/**
 * @summary create_client oauth_provider
 */
export const useOauthProviderCreateClient = <
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof oauthProviderCreateClient>>,
    TError,
    { data: CreateOAuthClientRequest },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof oauthProviderCreateClient>>,
  TError,
  { data: CreateOAuthClientRequest },
  TContext
> => {
  const mutationOptions = getOauthProviderCreateClientMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Delete OAuth client
 * @summary delete_client oauth_provider
 */
export type oauthProviderDeleteClientResponse204 = {
  data: void;
  status: 204;
};

export type oauthProviderDeleteClientResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type oauthProviderDeleteClientResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type oauthProviderDeleteClientResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type oauthProviderDeleteClientResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type oauthProviderDeleteClientResponse409 = {
  data: ConflictError;
  status: 409;
};

export type oauthProviderDeleteClientResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type oauthProviderDeleteClientResponseComposite =
  | oauthProviderDeleteClientResponse204
  | oauthProviderDeleteClientResponse400
  | oauthProviderDeleteClientResponse401
  | oauthProviderDeleteClientResponse403
  | oauthProviderDeleteClientResponse404
  | oauthProviderDeleteClientResponse409
  | oauthProviderDeleteClientResponse500;

export type oauthProviderDeleteClientResponse =
  oauthProviderDeleteClientResponseComposite & {
    headers: Headers;
  };

export const getOauthProviderDeleteClientUrl = (id: string) => {
  return `/v1/oauth/clients/${id}`;
};

export const oauthProviderDeleteClient = async (
  id: string,
  options?: RequestInit,
): Promise<oauthProviderDeleteClientResponse> => {
  return customInstance<oauthProviderDeleteClientResponse>(
    getOauthProviderDeleteClientUrl(id),
    {
      ...options,
      method: "DELETE",
    },
  );
};

export const getOauthProviderDeleteClientMutationOptions = <
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof oauthProviderDeleteClient>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof oauthProviderDeleteClient>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["oauthProviderDeleteClient"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof oauthProviderDeleteClient>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return oauthProviderDeleteClient(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type OauthProviderDeleteClientMutationResult = NonNullable<
  Awaited<ReturnType<typeof oauthProviderDeleteClient>>
>;

export type OauthProviderDeleteClientMutationError =
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | ConflictError
  | InternalServerError;

/**
 * @summary delete_client oauth_provider
 */
export const useOauthProviderDeleteClient = <
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof oauthProviderDeleteClient>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof oauthProviderDeleteClient>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getOauthProviderDeleteClientMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Get OAuth client by ID
 * @summary get_client oauth_provider
 */
export type oauthProviderGetClientResponse200 = {
  data: OAuthClientResponse;
  status: 200;
};

export type oauthProviderGetClientResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type oauthProviderGetClientResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type oauthProviderGetClientResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type oauthProviderGetClientResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type oauthProviderGetClientResponse409 = {
  data: ConflictError;
  status: 409;
};

export type oauthProviderGetClientResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type oauthProviderGetClientResponseComposite =
  | oauthProviderGetClientResponse200
  | oauthProviderGetClientResponse400
  | oauthProviderGetClientResponse401
  | oauthProviderGetClientResponse403
  | oauthProviderGetClientResponse404
  | oauthProviderGetClientResponse409
  | oauthProviderGetClientResponse500;

export type oauthProviderGetClientResponse =
  oauthProviderGetClientResponseComposite & {
    headers: Headers;
  };

export const getOauthProviderGetClientUrl = (id: string) => {
  return `/v1/oauth/clients/${id}`;
};

export const oauthProviderGetClient = async (
  id: string,
  options?: RequestInit,
): Promise<oauthProviderGetClientResponse> => {
  return customInstance<oauthProviderGetClientResponse>(
    getOauthProviderGetClientUrl(id),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getOauthProviderGetClientQueryKey = (id: string) => {
  return [`/v1/oauth/clients/${id}`] as const;
};

export const getOauthProviderGetClientInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof oauthProviderGetClient>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof oauthProviderGetClient>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getOauthProviderGetClientQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof oauthProviderGetClient>>
  > = ({ signal }) => oauthProviderGetClient(id, { signal, ...requestOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof oauthProviderGetClient>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type OauthProviderGetClientInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof oauthProviderGetClient>>
>;
export type OauthProviderGetClientInfiniteQueryError =
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | ConflictError
  | InternalServerError;

export function useOauthProviderGetClientInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof oauthProviderGetClient>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  id: string,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof oauthProviderGetClient>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof oauthProviderGetClient>>,
          TError,
          Awaited<ReturnType<typeof oauthProviderGetClient>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useOauthProviderGetClientInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof oauthProviderGetClient>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof oauthProviderGetClient>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof oauthProviderGetClient>>,
          TError,
          Awaited<ReturnType<typeof oauthProviderGetClient>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useOauthProviderGetClientInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof oauthProviderGetClient>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof oauthProviderGetClient>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary get_client oauth_provider
 */

export function useOauthProviderGetClientInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof oauthProviderGetClient>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof oauthProviderGetClient>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getOauthProviderGetClientInfiniteQueryOptions(
    id,
    options,
  );

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getOauthProviderGetClientQueryOptions = <
  TData = Awaited<ReturnType<typeof oauthProviderGetClient>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof oauthProviderGetClient>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getOauthProviderGetClientQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof oauthProviderGetClient>>
  > = ({ signal }) => oauthProviderGetClient(id, { signal, ...requestOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof oauthProviderGetClient>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type OauthProviderGetClientQueryResult = NonNullable<
  Awaited<ReturnType<typeof oauthProviderGetClient>>
>;
export type OauthProviderGetClientQueryError =
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | ConflictError
  | InternalServerError;

export function useOauthProviderGetClient<
  TData = Awaited<ReturnType<typeof oauthProviderGetClient>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof oauthProviderGetClient>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof oauthProviderGetClient>>,
          TError,
          Awaited<ReturnType<typeof oauthProviderGetClient>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useOauthProviderGetClient<
  TData = Awaited<ReturnType<typeof oauthProviderGetClient>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof oauthProviderGetClient>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof oauthProviderGetClient>>,
          TError,
          Awaited<ReturnType<typeof oauthProviderGetClient>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useOauthProviderGetClient<
  TData = Awaited<ReturnType<typeof oauthProviderGetClient>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof oauthProviderGetClient>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary get_client oauth_provider
 */

export function useOauthProviderGetClient<
  TData = Awaited<ReturnType<typeof oauthProviderGetClient>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof oauthProviderGetClient>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getOauthProviderGetClientQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Update OAuth client
 * @summary update_client oauth_provider
 */
export type oauthProviderUpdateClientResponse200 = {
  data: OAuthClientResponse;
  status: 200;
};

export type oauthProviderUpdateClientResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type oauthProviderUpdateClientResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type oauthProviderUpdateClientResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type oauthProviderUpdateClientResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type oauthProviderUpdateClientResponse409 = {
  data: ConflictError;
  status: 409;
};

export type oauthProviderUpdateClientResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type oauthProviderUpdateClientResponseComposite =
  | oauthProviderUpdateClientResponse200
  | oauthProviderUpdateClientResponse400
  | oauthProviderUpdateClientResponse401
  | oauthProviderUpdateClientResponse403
  | oauthProviderUpdateClientResponse404
  | oauthProviderUpdateClientResponse409
  | oauthProviderUpdateClientResponse500;

export type oauthProviderUpdateClientResponse =
  oauthProviderUpdateClientResponseComposite & {
    headers: Headers;
  };

export const getOauthProviderUpdateClientUrl = (id: string) => {
  return `/v1/oauth/clients/${id}`;
};

export const oauthProviderUpdateClient = async (
  id: string,
  updateClientRequestBody: UpdateClientRequestBody,
  options?: RequestInit,
): Promise<oauthProviderUpdateClientResponse> => {
  return customInstance<oauthProviderUpdateClientResponse>(
    getOauthProviderUpdateClientUrl(id),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(updateClientRequestBody),
    },
  );
};

export const getOauthProviderUpdateClientMutationOptions = <
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof oauthProviderUpdateClient>>,
    TError,
    { id: string; data: UpdateClientRequestBody },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof oauthProviderUpdateClient>>,
  TError,
  { id: string; data: UpdateClientRequestBody },
  TContext
> => {
  const mutationKey = ["oauthProviderUpdateClient"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof oauthProviderUpdateClient>>,
    { id: string; data: UpdateClientRequestBody }
  > = (props) => {
    const { id, data } = props ?? {};

    return oauthProviderUpdateClient(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type OauthProviderUpdateClientMutationResult = NonNullable<
  Awaited<ReturnType<typeof oauthProviderUpdateClient>>
>;
export type OauthProviderUpdateClientMutationBody = UpdateClientRequestBody;
export type OauthProviderUpdateClientMutationError =
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | ConflictError
  | InternalServerError;

/**
 * @summary update_client oauth_provider
 */
export const useOauthProviderUpdateClient = <
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof oauthProviderUpdateClient>>,
    TError,
    { id: string; data: UpdateClientRequestBody },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof oauthProviderUpdateClient>>,
  TError,
  { id: string; data: UpdateClientRequestBody },
  TContext
> => {
  const mutationOptions = getOauthProviderUpdateClientMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Rotate OAuth client secret
 * @summary rotate_client_secret oauth_provider
 */
export type oauthProviderRotateClientSecretResponse200 = {
  data: RotateClientSecretResponseBody;
  status: 200;
};

export type oauthProviderRotateClientSecretResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type oauthProviderRotateClientSecretResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type oauthProviderRotateClientSecretResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type oauthProviderRotateClientSecretResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type oauthProviderRotateClientSecretResponse409 = {
  data: ConflictError;
  status: 409;
};

export type oauthProviderRotateClientSecretResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type oauthProviderRotateClientSecretResponseComposite =
  | oauthProviderRotateClientSecretResponse200
  | oauthProviderRotateClientSecretResponse400
  | oauthProviderRotateClientSecretResponse401
  | oauthProviderRotateClientSecretResponse403
  | oauthProviderRotateClientSecretResponse404
  | oauthProviderRotateClientSecretResponse409
  | oauthProviderRotateClientSecretResponse500;

export type oauthProviderRotateClientSecretResponse =
  oauthProviderRotateClientSecretResponseComposite & {
    headers: Headers;
  };

export const getOauthProviderRotateClientSecretUrl = (id: string) => {
  return `/v1/oauth/clients/${id}/rotate-secret`;
};

export const oauthProviderRotateClientSecret = async (
  id: string,
  options?: RequestInit,
): Promise<oauthProviderRotateClientSecretResponse> => {
  return customInstance<oauthProviderRotateClientSecretResponse>(
    getOauthProviderRotateClientSecretUrl(id),
    {
      ...options,
      method: "POST",
    },
  );
};

export const getOauthProviderRotateClientSecretMutationOptions = <
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof oauthProviderRotateClientSecret>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof oauthProviderRotateClientSecret>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["oauthProviderRotateClientSecret"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof oauthProviderRotateClientSecret>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return oauthProviderRotateClientSecret(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type OauthProviderRotateClientSecretMutationResult = NonNullable<
  Awaited<ReturnType<typeof oauthProviderRotateClientSecret>>
>;

export type OauthProviderRotateClientSecretMutationError =
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | ConflictError
  | InternalServerError;

/**
 * @summary rotate_client_secret oauth_provider
 */
export const useOauthProviderRotateClientSecret = <
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof oauthProviderRotateClientSecret>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof oauthProviderRotateClientSecret>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions =
    getOauthProviderRotateClientSecretMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Handle user consent for OAuth authorization
 * @summary consent oauth_provider
 */
export type oauthProviderConsentResponse307 = {
  data: ConsentResponseBody;
  status: 307;
};

export type oauthProviderConsentResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type oauthProviderConsentResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type oauthProviderConsentResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type oauthProviderConsentResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type oauthProviderConsentResponse409 = {
  data: ConflictError;
  status: 409;
};

export type oauthProviderConsentResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type oauthProviderConsentResponseComposite =
  | oauthProviderConsentResponse307
  | oauthProviderConsentResponse400
  | oauthProviderConsentResponse401
  | oauthProviderConsentResponse403
  | oauthProviderConsentResponse404
  | oauthProviderConsentResponse409
  | oauthProviderConsentResponse500;

export type oauthProviderConsentResponse =
  oauthProviderConsentResponseComposite & {
    headers: Headers;
  };

export const getOauthProviderConsentUrl = () => {
  return `/v1/oauth/consent`;
};

export const oauthProviderConsent = async (
  consentRequest: ConsentRequest,
  options?: RequestInit,
): Promise<oauthProviderConsentResponse> => {
  return customInstance<oauthProviderConsentResponse>(
    getOauthProviderConsentUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(consentRequest),
    },
  );
};

export const getOauthProviderConsentMutationOptions = <
  TError =
    | ConsentResponseBody
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof oauthProviderConsent>>,
    TError,
    { data: ConsentRequest },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof oauthProviderConsent>>,
  TError,
  { data: ConsentRequest },
  TContext
> => {
  const mutationKey = ["oauthProviderConsent"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof oauthProviderConsent>>,
    { data: ConsentRequest }
  > = (props) => {
    const { data } = props ?? {};

    return oauthProviderConsent(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type OauthProviderConsentMutationResult = NonNullable<
  Awaited<ReturnType<typeof oauthProviderConsent>>
>;
export type OauthProviderConsentMutationBody = ConsentRequest;
export type OauthProviderConsentMutationError =
  | ConsentResponseBody
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | ConflictError
  | InternalServerError;

/**
 * @summary consent oauth_provider
 */
export const useOauthProviderConsent = <
  TError =
    | ConsentResponseBody
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof oauthProviderConsent>>,
    TError,
    { data: ConsentRequest },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof oauthProviderConsent>>,
  TError,
  { data: ConsentRequest },
  TContext
> => {
  const mutationOptions = getOauthProviderConsentMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * OAuth2 token introspection endpoint
 * @summary introspect oauth_provider
 */
export type oauthProviderIntrospectResponse200 = {
  data: IntrospectResponseBody;
  status: 200;
};

export type oauthProviderIntrospectResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type oauthProviderIntrospectResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type oauthProviderIntrospectResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type oauthProviderIntrospectResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type oauthProviderIntrospectResponse409 = {
  data: ConflictError;
  status: 409;
};

export type oauthProviderIntrospectResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type oauthProviderIntrospectResponseComposite =
  | oauthProviderIntrospectResponse200
  | oauthProviderIntrospectResponse400
  | oauthProviderIntrospectResponse401
  | oauthProviderIntrospectResponse403
  | oauthProviderIntrospectResponse404
  | oauthProviderIntrospectResponse409
  | oauthProviderIntrospectResponse500;

export type oauthProviderIntrospectResponse =
  oauthProviderIntrospectResponseComposite & {
    headers: Headers;
  };

export const getOauthProviderIntrospectUrl = (
  params: OauthProviderIntrospectParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/v1/oauth/introspect?${stringifiedParams}`
    : `/v1/oauth/introspect`;
};

export const oauthProviderIntrospect = async (
  params: OauthProviderIntrospectParams,
  options?: RequestInit,
): Promise<oauthProviderIntrospectResponse> => {
  return customInstance<oauthProviderIntrospectResponse>(
    getOauthProviderIntrospectUrl(params),
    {
      ...options,
      method: "POST",
    },
  );
};

export const getOauthProviderIntrospectMutationOptions = <
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof oauthProviderIntrospect>>,
    TError,
    { params: OauthProviderIntrospectParams },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof oauthProviderIntrospect>>,
  TError,
  { params: OauthProviderIntrospectParams },
  TContext
> => {
  const mutationKey = ["oauthProviderIntrospect"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof oauthProviderIntrospect>>,
    { params: OauthProviderIntrospectParams }
  > = (props) => {
    const { params } = props ?? {};

    return oauthProviderIntrospect(params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type OauthProviderIntrospectMutationResult = NonNullable<
  Awaited<ReturnType<typeof oauthProviderIntrospect>>
>;

export type OauthProviderIntrospectMutationError =
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | ConflictError
  | InternalServerError;

/**
 * @summary introspect oauth_provider
 */
export const useOauthProviderIntrospect = <
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof oauthProviderIntrospect>>,
    TError,
    { params: OauthProviderIntrospectParams },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof oauthProviderIntrospect>>,
  TError,
  { params: OauthProviderIntrospectParams },
  TContext
> => {
  const mutationOptions = getOauthProviderIntrospectMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * OAuth2 token revocation endpoint
 * @summary revoke oauth_provider
 */
export type oauthProviderRevokeResponse200 = {
  data: void;
  status: 200;
};

export type oauthProviderRevokeResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type oauthProviderRevokeResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type oauthProviderRevokeResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type oauthProviderRevokeResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type oauthProviderRevokeResponse409 = {
  data: ConflictError;
  status: 409;
};

export type oauthProviderRevokeResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type oauthProviderRevokeResponseComposite =
  | oauthProviderRevokeResponse200
  | oauthProviderRevokeResponse400
  | oauthProviderRevokeResponse401
  | oauthProviderRevokeResponse403
  | oauthProviderRevokeResponse404
  | oauthProviderRevokeResponse409
  | oauthProviderRevokeResponse500;

export type oauthProviderRevokeResponse =
  oauthProviderRevokeResponseComposite & {
    headers: Headers;
  };

export const getOauthProviderRevokeUrl = (
  params: OauthProviderRevokeParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/v1/oauth/revoke?${stringifiedParams}`
    : `/v1/oauth/revoke`;
};

export const oauthProviderRevoke = async (
  params: OauthProviderRevokeParams,
  options?: RequestInit,
): Promise<oauthProviderRevokeResponse> => {
  return customInstance<oauthProviderRevokeResponse>(
    getOauthProviderRevokeUrl(params),
    {
      ...options,
      method: "POST",
    },
  );
};

export const getOauthProviderRevokeMutationOptions = <
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof oauthProviderRevoke>>,
    TError,
    { params: OauthProviderRevokeParams },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof oauthProviderRevoke>>,
  TError,
  { params: OauthProviderRevokeParams },
  TContext
> => {
  const mutationKey = ["oauthProviderRevoke"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof oauthProviderRevoke>>,
    { params: OauthProviderRevokeParams }
  > = (props) => {
    const { params } = props ?? {};

    return oauthProviderRevoke(params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type OauthProviderRevokeMutationResult = NonNullable<
  Awaited<ReturnType<typeof oauthProviderRevoke>>
>;

export type OauthProviderRevokeMutationError =
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | ConflictError
  | InternalServerError;

/**
 * @summary revoke oauth_provider
 */
export const useOauthProviderRevoke = <
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof oauthProviderRevoke>>,
    TError,
    { params: OauthProviderRevokeParams },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof oauthProviderRevoke>>,
  TError,
  { params: OauthProviderRevokeParams },
  TContext
> => {
  const mutationOptions = getOauthProviderRevokeMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * List OAuth scopes
 * @summary list_scopes oauth_provider
 */
export type oauthProviderListScopesResponse200 = {
  data: ListScopesResponseBody;
  status: 200;
};

export type oauthProviderListScopesResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type oauthProviderListScopesResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type oauthProviderListScopesResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type oauthProviderListScopesResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type oauthProviderListScopesResponse409 = {
  data: ConflictError;
  status: 409;
};

export type oauthProviderListScopesResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type oauthProviderListScopesResponseComposite =
  | oauthProviderListScopesResponse200
  | oauthProviderListScopesResponse400
  | oauthProviderListScopesResponse401
  | oauthProviderListScopesResponse403
  | oauthProviderListScopesResponse404
  | oauthProviderListScopesResponse409
  | oauthProviderListScopesResponse500;

export type oauthProviderListScopesResponse =
  oauthProviderListScopesResponseComposite & {
    headers: Headers;
  };

export const getOauthProviderListScopesUrl = (
  params?: OauthProviderListScopesParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/v1/oauth/scopes?${stringifiedParams}`
    : `/v1/oauth/scopes`;
};

export const oauthProviderListScopes = async (
  params?: OauthProviderListScopesParams,
  options?: RequestInit,
): Promise<oauthProviderListScopesResponse> => {
  return customInstance<oauthProviderListScopesResponse>(
    getOauthProviderListScopesUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getOauthProviderListScopesQueryKey = (
  params?: OauthProviderListScopesParams,
) => {
  return [`/v1/oauth/scopes`, ...(params ? [params] : [])] as const;
};

export const getOauthProviderListScopesInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof oauthProviderListScopes>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  params?: OauthProviderListScopesParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof oauthProviderListScopes>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getOauthProviderListScopesQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof oauthProviderListScopes>>
  > = ({ signal }) =>
    oauthProviderListScopes(params, { signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof oauthProviderListScopes>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type OauthProviderListScopesInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof oauthProviderListScopes>>
>;
export type OauthProviderListScopesInfiniteQueryError =
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | ConflictError
  | InternalServerError;

export function useOauthProviderListScopesInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof oauthProviderListScopes>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  params: undefined | OauthProviderListScopesParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof oauthProviderListScopes>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof oauthProviderListScopes>>,
          TError,
          Awaited<ReturnType<typeof oauthProviderListScopes>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useOauthProviderListScopesInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof oauthProviderListScopes>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  params?: OauthProviderListScopesParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof oauthProviderListScopes>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof oauthProviderListScopes>>,
          TError,
          Awaited<ReturnType<typeof oauthProviderListScopes>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useOauthProviderListScopesInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof oauthProviderListScopes>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  params?: OauthProviderListScopesParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof oauthProviderListScopes>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary list_scopes oauth_provider
 */

export function useOauthProviderListScopesInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof oauthProviderListScopes>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  params?: OauthProviderListScopesParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof oauthProviderListScopes>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getOauthProviderListScopesInfiniteQueryOptions(
    params,
    options,
  );

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getOauthProviderListScopesQueryOptions = <
  TData = Awaited<ReturnType<typeof oauthProviderListScopes>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  params?: OauthProviderListScopesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof oauthProviderListScopes>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getOauthProviderListScopesQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof oauthProviderListScopes>>
  > = ({ signal }) =>
    oauthProviderListScopes(params, { signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof oauthProviderListScopes>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type OauthProviderListScopesQueryResult = NonNullable<
  Awaited<ReturnType<typeof oauthProviderListScopes>>
>;
export type OauthProviderListScopesQueryError =
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | ConflictError
  | InternalServerError;

export function useOauthProviderListScopes<
  TData = Awaited<ReturnType<typeof oauthProviderListScopes>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  params: undefined | OauthProviderListScopesParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof oauthProviderListScopes>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof oauthProviderListScopes>>,
          TError,
          Awaited<ReturnType<typeof oauthProviderListScopes>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useOauthProviderListScopes<
  TData = Awaited<ReturnType<typeof oauthProviderListScopes>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  params?: OauthProviderListScopesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof oauthProviderListScopes>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof oauthProviderListScopes>>,
          TError,
          Awaited<ReturnType<typeof oauthProviderListScopes>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useOauthProviderListScopes<
  TData = Awaited<ReturnType<typeof oauthProviderListScopes>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  params?: OauthProviderListScopesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof oauthProviderListScopes>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary list_scopes oauth_provider
 */

export function useOauthProviderListScopes<
  TData = Awaited<ReturnType<typeof oauthProviderListScopes>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  params?: OauthProviderListScopesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof oauthProviderListScopes>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getOauthProviderListScopesQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Create a new OAuth scope
 * @summary create_scope oauth_provider
 */
export type oauthProviderCreateScopeResponse201 = {
  data: OAuthScopeResponse;
  status: 201;
};

export type oauthProviderCreateScopeResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type oauthProviderCreateScopeResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type oauthProviderCreateScopeResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type oauthProviderCreateScopeResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type oauthProviderCreateScopeResponse409 = {
  data: ConflictError;
  status: 409;
};

export type oauthProviderCreateScopeResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type oauthProviderCreateScopeResponseComposite =
  | oauthProviderCreateScopeResponse201
  | oauthProviderCreateScopeResponse400
  | oauthProviderCreateScopeResponse401
  | oauthProviderCreateScopeResponse403
  | oauthProviderCreateScopeResponse404
  | oauthProviderCreateScopeResponse409
  | oauthProviderCreateScopeResponse500;

export type oauthProviderCreateScopeResponse =
  oauthProviderCreateScopeResponseComposite & {
    headers: Headers;
  };

export const getOauthProviderCreateScopeUrl = () => {
  return `/v1/oauth/scopes`;
};

export const oauthProviderCreateScope = async (
  createOAuthScopeRequest: CreateOAuthScopeRequest,
  options?: RequestInit,
): Promise<oauthProviderCreateScopeResponse> => {
  return customInstance<oauthProviderCreateScopeResponse>(
    getOauthProviderCreateScopeUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(createOAuthScopeRequest),
    },
  );
};

export const getOauthProviderCreateScopeMutationOptions = <
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof oauthProviderCreateScope>>,
    TError,
    { data: CreateOAuthScopeRequest },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof oauthProviderCreateScope>>,
  TError,
  { data: CreateOAuthScopeRequest },
  TContext
> => {
  const mutationKey = ["oauthProviderCreateScope"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof oauthProviderCreateScope>>,
    { data: CreateOAuthScopeRequest }
  > = (props) => {
    const { data } = props ?? {};

    return oauthProviderCreateScope(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type OauthProviderCreateScopeMutationResult = NonNullable<
  Awaited<ReturnType<typeof oauthProviderCreateScope>>
>;
export type OauthProviderCreateScopeMutationBody = CreateOAuthScopeRequest;
export type OauthProviderCreateScopeMutationError =
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | ConflictError
  | InternalServerError;

/**
 * @summary create_scope oauth_provider
 */
export const useOauthProviderCreateScope = <
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof oauthProviderCreateScope>>,
    TError,
    { data: CreateOAuthScopeRequest },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof oauthProviderCreateScope>>,
  TError,
  { data: CreateOAuthScopeRequest },
  TContext
> => {
  const mutationOptions = getOauthProviderCreateScopeMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Delete OAuth scope
 * @summary delete_scope oauth_provider
 */
export type oauthProviderDeleteScopeResponse204 = {
  data: void;
  status: 204;
};

export type oauthProviderDeleteScopeResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type oauthProviderDeleteScopeResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type oauthProviderDeleteScopeResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type oauthProviderDeleteScopeResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type oauthProviderDeleteScopeResponse409 = {
  data: ConflictError;
  status: 409;
};

export type oauthProviderDeleteScopeResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type oauthProviderDeleteScopeResponseComposite =
  | oauthProviderDeleteScopeResponse204
  | oauthProviderDeleteScopeResponse400
  | oauthProviderDeleteScopeResponse401
  | oauthProviderDeleteScopeResponse403
  | oauthProviderDeleteScopeResponse404
  | oauthProviderDeleteScopeResponse409
  | oauthProviderDeleteScopeResponse500;

export type oauthProviderDeleteScopeResponse =
  oauthProviderDeleteScopeResponseComposite & {
    headers: Headers;
  };

export const getOauthProviderDeleteScopeUrl = (id: string) => {
  return `/v1/oauth/scopes/${id}`;
};

export const oauthProviderDeleteScope = async (
  id: string,
  options?: RequestInit,
): Promise<oauthProviderDeleteScopeResponse> => {
  return customInstance<oauthProviderDeleteScopeResponse>(
    getOauthProviderDeleteScopeUrl(id),
    {
      ...options,
      method: "DELETE",
    },
  );
};

export const getOauthProviderDeleteScopeMutationOptions = <
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof oauthProviderDeleteScope>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof oauthProviderDeleteScope>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["oauthProviderDeleteScope"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof oauthProviderDeleteScope>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return oauthProviderDeleteScope(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type OauthProviderDeleteScopeMutationResult = NonNullable<
  Awaited<ReturnType<typeof oauthProviderDeleteScope>>
>;

export type OauthProviderDeleteScopeMutationError =
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | ConflictError
  | InternalServerError;

/**
 * @summary delete_scope oauth_provider
 */
export const useOauthProviderDeleteScope = <
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof oauthProviderDeleteScope>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof oauthProviderDeleteScope>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getOauthProviderDeleteScopeMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Get OAuth scope by ID
 * @summary get_scope oauth_provider
 */
export type oauthProviderGetScopeResponse200 = {
  data: OAuthScopeResponse;
  status: 200;
};

export type oauthProviderGetScopeResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type oauthProviderGetScopeResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type oauthProviderGetScopeResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type oauthProviderGetScopeResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type oauthProviderGetScopeResponse409 = {
  data: ConflictError;
  status: 409;
};

export type oauthProviderGetScopeResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type oauthProviderGetScopeResponseComposite =
  | oauthProviderGetScopeResponse200
  | oauthProviderGetScopeResponse400
  | oauthProviderGetScopeResponse401
  | oauthProviderGetScopeResponse403
  | oauthProviderGetScopeResponse404
  | oauthProviderGetScopeResponse409
  | oauthProviderGetScopeResponse500;

export type oauthProviderGetScopeResponse =
  oauthProviderGetScopeResponseComposite & {
    headers: Headers;
  };

export const getOauthProviderGetScopeUrl = (id: string) => {
  return `/v1/oauth/scopes/${id}`;
};

export const oauthProviderGetScope = async (
  id: string,
  options?: RequestInit,
): Promise<oauthProviderGetScopeResponse> => {
  return customInstance<oauthProviderGetScopeResponse>(
    getOauthProviderGetScopeUrl(id),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getOauthProviderGetScopeQueryKey = (id: string) => {
  return [`/v1/oauth/scopes/${id}`] as const;
};

export const getOauthProviderGetScopeInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof oauthProviderGetScope>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof oauthProviderGetScope>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getOauthProviderGetScopeQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof oauthProviderGetScope>>
  > = ({ signal }) => oauthProviderGetScope(id, { signal, ...requestOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof oauthProviderGetScope>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type OauthProviderGetScopeInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof oauthProviderGetScope>>
>;
export type OauthProviderGetScopeInfiniteQueryError =
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | ConflictError
  | InternalServerError;

export function useOauthProviderGetScopeInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof oauthProviderGetScope>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  id: string,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof oauthProviderGetScope>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof oauthProviderGetScope>>,
          TError,
          Awaited<ReturnType<typeof oauthProviderGetScope>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useOauthProviderGetScopeInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof oauthProviderGetScope>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof oauthProviderGetScope>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof oauthProviderGetScope>>,
          TError,
          Awaited<ReturnType<typeof oauthProviderGetScope>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useOauthProviderGetScopeInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof oauthProviderGetScope>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof oauthProviderGetScope>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary get_scope oauth_provider
 */

export function useOauthProviderGetScopeInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof oauthProviderGetScope>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof oauthProviderGetScope>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getOauthProviderGetScopeInfiniteQueryOptions(
    id,
    options,
  );

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getOauthProviderGetScopeQueryOptions = <
  TData = Awaited<ReturnType<typeof oauthProviderGetScope>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof oauthProviderGetScope>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getOauthProviderGetScopeQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof oauthProviderGetScope>>
  > = ({ signal }) => oauthProviderGetScope(id, { signal, ...requestOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof oauthProviderGetScope>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type OauthProviderGetScopeQueryResult = NonNullable<
  Awaited<ReturnType<typeof oauthProviderGetScope>>
>;
export type OauthProviderGetScopeQueryError =
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | ConflictError
  | InternalServerError;

export function useOauthProviderGetScope<
  TData = Awaited<ReturnType<typeof oauthProviderGetScope>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof oauthProviderGetScope>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof oauthProviderGetScope>>,
          TError,
          Awaited<ReturnType<typeof oauthProviderGetScope>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useOauthProviderGetScope<
  TData = Awaited<ReturnType<typeof oauthProviderGetScope>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof oauthProviderGetScope>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof oauthProviderGetScope>>,
          TError,
          Awaited<ReturnType<typeof oauthProviderGetScope>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useOauthProviderGetScope<
  TData = Awaited<ReturnType<typeof oauthProviderGetScope>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof oauthProviderGetScope>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary get_scope oauth_provider
 */

export function useOauthProviderGetScope<
  TData = Awaited<ReturnType<typeof oauthProviderGetScope>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof oauthProviderGetScope>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getOauthProviderGetScopeQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Update OAuth scope
 * @summary update_scope oauth_provider
 */
export type oauthProviderUpdateScopeResponse200 = {
  data: OAuthScopeResponse;
  status: 200;
};

export type oauthProviderUpdateScopeResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type oauthProviderUpdateScopeResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type oauthProviderUpdateScopeResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type oauthProviderUpdateScopeResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type oauthProviderUpdateScopeResponse409 = {
  data: ConflictError;
  status: 409;
};

export type oauthProviderUpdateScopeResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type oauthProviderUpdateScopeResponseComposite =
  | oauthProviderUpdateScopeResponse200
  | oauthProviderUpdateScopeResponse400
  | oauthProviderUpdateScopeResponse401
  | oauthProviderUpdateScopeResponse403
  | oauthProviderUpdateScopeResponse404
  | oauthProviderUpdateScopeResponse409
  | oauthProviderUpdateScopeResponse500;

export type oauthProviderUpdateScopeResponse =
  oauthProviderUpdateScopeResponseComposite & {
    headers: Headers;
  };

export const getOauthProviderUpdateScopeUrl = (id: string) => {
  return `/v1/oauth/scopes/${id}`;
};

export const oauthProviderUpdateScope = async (
  id: string,
  updateScopeRequestBody: UpdateScopeRequestBody,
  options?: RequestInit,
): Promise<oauthProviderUpdateScopeResponse> => {
  return customInstance<oauthProviderUpdateScopeResponse>(
    getOauthProviderUpdateScopeUrl(id),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(updateScopeRequestBody),
    },
  );
};

export const getOauthProviderUpdateScopeMutationOptions = <
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof oauthProviderUpdateScope>>,
    TError,
    { id: string; data: UpdateScopeRequestBody },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof oauthProviderUpdateScope>>,
  TError,
  { id: string; data: UpdateScopeRequestBody },
  TContext
> => {
  const mutationKey = ["oauthProviderUpdateScope"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof oauthProviderUpdateScope>>,
    { id: string; data: UpdateScopeRequestBody }
  > = (props) => {
    const { id, data } = props ?? {};

    return oauthProviderUpdateScope(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type OauthProviderUpdateScopeMutationResult = NonNullable<
  Awaited<ReturnType<typeof oauthProviderUpdateScope>>
>;
export type OauthProviderUpdateScopeMutationBody = UpdateScopeRequestBody;
export type OauthProviderUpdateScopeMutationError =
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | ConflictError
  | InternalServerError;

/**
 * @summary update_scope oauth_provider
 */
export const useOauthProviderUpdateScope = <
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof oauthProviderUpdateScope>>,
    TError,
    { id: string; data: UpdateScopeRequestBody },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof oauthProviderUpdateScope>>,
  TError,
  { id: string; data: UpdateScopeRequestBody },
  TContext
> => {
  const mutationOptions = getOauthProviderUpdateScopeMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * OAuth2 token endpoint
 * @summary token oauth_provider
 */
export type oauthProviderTokenResponse200 = {
  data: TokenResponseBody;
  status: 200;
};

export type oauthProviderTokenResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type oauthProviderTokenResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type oauthProviderTokenResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type oauthProviderTokenResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type oauthProviderTokenResponse409 = {
  data: ConflictError;
  status: 409;
};

export type oauthProviderTokenResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type oauthProviderTokenResponseComposite =
  | oauthProviderTokenResponse200
  | oauthProviderTokenResponse400
  | oauthProviderTokenResponse401
  | oauthProviderTokenResponse403
  | oauthProviderTokenResponse404
  | oauthProviderTokenResponse409
  | oauthProviderTokenResponse500;

export type oauthProviderTokenResponse = oauthProviderTokenResponseComposite & {
  headers: Headers;
};

export const getOauthProviderTokenUrl = (params: OauthProviderTokenParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/v1/oauth/token?${stringifiedParams}`
    : `/v1/oauth/token`;
};

export const oauthProviderToken = async (
  params: OauthProviderTokenParams,
  options?: RequestInit,
): Promise<oauthProviderTokenResponse> => {
  return customInstance<oauthProviderTokenResponse>(
    getOauthProviderTokenUrl(params),
    {
      ...options,
      method: "POST",
    },
  );
};

export const getOauthProviderTokenMutationOptions = <
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof oauthProviderToken>>,
    TError,
    { params: OauthProviderTokenParams },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof oauthProviderToken>>,
  TError,
  { params: OauthProviderTokenParams },
  TContext
> => {
  const mutationKey = ["oauthProviderToken"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof oauthProviderToken>>,
    { params: OauthProviderTokenParams }
  > = (props) => {
    const { params } = props ?? {};

    return oauthProviderToken(params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type OauthProviderTokenMutationResult = NonNullable<
  Awaited<ReturnType<typeof oauthProviderToken>>
>;

export type OauthProviderTokenMutationError =
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | ConflictError
  | InternalServerError;

/**
 * @summary token oauth_provider
 */
export const useOauthProviderToken = <
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof oauthProviderToken>>,
    TError,
    { params: OauthProviderTokenParams },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof oauthProviderToken>>,
  TError,
  { params: OauthProviderTokenParams },
  TContext
> => {
  const mutationOptions = getOauthProviderTokenMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * OAuth2 UserInfo endpoint for OpenID Connect
 * @summary userinfo oauth_provider
 */
export type oauthProviderUserinfoResponse200 = {
  data: UserinfoResponseBody;
  status: 200;
};

export type oauthProviderUserinfoResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type oauthProviderUserinfoResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type oauthProviderUserinfoResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type oauthProviderUserinfoResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type oauthProviderUserinfoResponse409 = {
  data: ConflictError;
  status: 409;
};

export type oauthProviderUserinfoResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type oauthProviderUserinfoResponseComposite =
  | oauthProviderUserinfoResponse200
  | oauthProviderUserinfoResponse400
  | oauthProviderUserinfoResponse401
  | oauthProviderUserinfoResponse403
  | oauthProviderUserinfoResponse404
  | oauthProviderUserinfoResponse409
  | oauthProviderUserinfoResponse500;

export type oauthProviderUserinfoResponse =
  oauthProviderUserinfoResponseComposite & {
    headers: Headers;
  };

export const getOauthProviderUserinfoUrl = () => {
  return `/v1/oauth/userinfo`;
};

export const oauthProviderUserinfo = async (
  options?: RequestInit,
): Promise<oauthProviderUserinfoResponse> => {
  return customInstance<oauthProviderUserinfoResponse>(
    getOauthProviderUserinfoUrl(),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getOauthProviderUserinfoQueryKey = () => {
  return [`/v1/oauth/userinfo`] as const;
};

export const getOauthProviderUserinfoInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof oauthProviderUserinfo>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(options?: {
  query?: Partial<
    UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof oauthProviderUserinfo>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getOauthProviderUserinfoQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof oauthProviderUserinfo>>
  > = ({ signal }) => oauthProviderUserinfo({ signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof oauthProviderUserinfo>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type OauthProviderUserinfoInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof oauthProviderUserinfo>>
>;
export type OauthProviderUserinfoInfiniteQueryError =
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | ConflictError
  | InternalServerError;

export function useOauthProviderUserinfoInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof oauthProviderUserinfo>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(options: {
  query: Partial<
    UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof oauthProviderUserinfo>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof oauthProviderUserinfo>>,
        TError,
        Awaited<ReturnType<typeof oauthProviderUserinfo>>
      >,
      "initialData"
    >;
  request?: SecondParameter<typeof customInstance>;
}): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useOauthProviderUserinfoInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof oauthProviderUserinfo>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(options?: {
  query?: Partial<
    UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof oauthProviderUserinfo>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof oauthProviderUserinfo>>,
        TError,
        Awaited<ReturnType<typeof oauthProviderUserinfo>>
      >,
      "initialData"
    >;
  request?: SecondParameter<typeof customInstance>;
}): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useOauthProviderUserinfoInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof oauthProviderUserinfo>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(options?: {
  query?: Partial<
    UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof oauthProviderUserinfo>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary userinfo oauth_provider
 */

export function useOauthProviderUserinfoInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof oauthProviderUserinfo>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(options?: {
  query?: Partial<
    UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof oauthProviderUserinfo>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getOauthProviderUserinfoInfiniteQueryOptions(options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getOauthProviderUserinfoQueryOptions = <
  TData = Awaited<ReturnType<typeof oauthProviderUserinfo>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof oauthProviderUserinfo>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getOauthProviderUserinfoQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof oauthProviderUserinfo>>
  > = ({ signal }) => oauthProviderUserinfo({ signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof oauthProviderUserinfo>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type OauthProviderUserinfoQueryResult = NonNullable<
  Awaited<ReturnType<typeof oauthProviderUserinfo>>
>;
export type OauthProviderUserinfoQueryError =
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | ConflictError
  | InternalServerError;

export function useOauthProviderUserinfo<
  TData = Awaited<ReturnType<typeof oauthProviderUserinfo>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof oauthProviderUserinfo>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof oauthProviderUserinfo>>,
        TError,
        Awaited<ReturnType<typeof oauthProviderUserinfo>>
      >,
      "initialData"
    >;
  request?: SecondParameter<typeof customInstance>;
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useOauthProviderUserinfo<
  TData = Awaited<ReturnType<typeof oauthProviderUserinfo>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof oauthProviderUserinfo>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof oauthProviderUserinfo>>,
        TError,
        Awaited<ReturnType<typeof oauthProviderUserinfo>>
      >,
      "initialData"
    >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useOauthProviderUserinfo<
  TData = Awaited<ReturnType<typeof oauthProviderUserinfo>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof oauthProviderUserinfo>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary userinfo oauth_provider
 */

export function useOauthProviderUserinfo<
  TData = Awaited<ReturnType<typeof oauthProviderUserinfo>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof oauthProviderUserinfo>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getOauthProviderUserinfoQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
