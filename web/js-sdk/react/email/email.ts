/**
 * Generated by orval v7.7.0 üç∫
 * Do not edit manually.
 * Frank Authentication Server
 * A comprehensive authentication server with OAuth2, MFA, Passkeys, SSO, and more
 * OpenAPI spec version: 1.0.0
 */
import { useInfiniteQuery, useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  BadRequestError,
  CreateEmailTemplateRequest,
  EmailGetTemplateByTypeParams,
  EmailListTemplatesParams,
  EmailTemplateResponse,
  ForbiddenError,
  InternalServerError,
  ListTemplatesResponseBody,
  NotFoundError,
  SendEmailRequest,
  SendResponseBody,
  SendTemplateEmailRequest,
  UnauthorizedError,
  UpdateTemplateRequestBody,
} from "../../model";

import { customInstance } from "../../mutator/custom-instance";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * Send email
 * @summary send email
 */
export type emailSendResponse200 = {
  data: SendResponseBody;
  status: 200;
};

export type emailSendResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type emailSendResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type emailSendResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type emailSendResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type emailSendResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type emailSendResponseComposite =
  | emailSendResponse200
  | emailSendResponse400
  | emailSendResponse401
  | emailSendResponse403
  | emailSendResponse404
  | emailSendResponse500;

export type emailSendResponse = emailSendResponseComposite & {
  headers: Headers;
};

export const getEmailSendUrl = () => {
  return `/v1/email/send`;
};

export const emailSend = async (
  sendEmailRequest: SendEmailRequest,
  options?: RequestInit,
): Promise<emailSendResponse> => {
  return customInstance<emailSendResponse>(getEmailSendUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(sendEmailRequest),
  });
};

export const getEmailSendMutationOptions = <
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof emailSend>>,
    TError,
    { data: SendEmailRequest },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof emailSend>>,
  TError,
  { data: SendEmailRequest },
  TContext
> => {
  const mutationKey = ["emailSend"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof emailSend>>,
    { data: SendEmailRequest }
  > = (props) => {
    const { data } = props ?? {};

    return emailSend(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type EmailSendMutationResult = NonNullable<
  Awaited<ReturnType<typeof emailSend>>
>;
export type EmailSendMutationBody = SendEmailRequest;
export type EmailSendMutationError =
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | InternalServerError;

/**
 * @summary send email
 */
export const useEmailSend = <
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof emailSend>>,
    TError,
    { data: SendEmailRequest },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof emailSend>>,
  TError,
  { data: SendEmailRequest },
  TContext
> => {
  const mutationOptions = getEmailSendMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Send email using a template
 * @summary send_template email
 */
export type emailSendTemplateResponse200 = {
  data: SendResponseBody;
  status: 200;
};

export type emailSendTemplateResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type emailSendTemplateResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type emailSendTemplateResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type emailSendTemplateResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type emailSendTemplateResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type emailSendTemplateResponseComposite =
  | emailSendTemplateResponse200
  | emailSendTemplateResponse400
  | emailSendTemplateResponse401
  | emailSendTemplateResponse403
  | emailSendTemplateResponse404
  | emailSendTemplateResponse500;

export type emailSendTemplateResponse = emailSendTemplateResponseComposite & {
  headers: Headers;
};

export const getEmailSendTemplateUrl = () => {
  return `/v1/email/send-template`;
};

export const emailSendTemplate = async (
  sendTemplateEmailRequest: SendTemplateEmailRequest,
  options?: RequestInit,
): Promise<emailSendTemplateResponse> => {
  return customInstance<emailSendTemplateResponse>(getEmailSendTemplateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(sendTemplateEmailRequest),
  });
};

export const getEmailSendTemplateMutationOptions = <
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof emailSendTemplate>>,
    TError,
    { data: SendTemplateEmailRequest },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof emailSendTemplate>>,
  TError,
  { data: SendTemplateEmailRequest },
  TContext
> => {
  const mutationKey = ["emailSendTemplate"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof emailSendTemplate>>,
    { data: SendTemplateEmailRequest }
  > = (props) => {
    const { data } = props ?? {};

    return emailSendTemplate(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type EmailSendTemplateMutationResult = NonNullable<
  Awaited<ReturnType<typeof emailSendTemplate>>
>;
export type EmailSendTemplateMutationBody = SendTemplateEmailRequest;
export type EmailSendTemplateMutationError =
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | InternalServerError;

/**
 * @summary send_template email
 */
export const useEmailSendTemplate = <
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof emailSendTemplate>>,
    TError,
    { data: SendTemplateEmailRequest },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof emailSendTemplate>>,
  TError,
  { data: SendTemplateEmailRequest },
  TContext
> => {
  const mutationOptions = getEmailSendTemplateMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * List email templates
 * @summary list_templates email
 */
export type emailListTemplatesResponse200 = {
  data: ListTemplatesResponseBody;
  status: 200;
};

export type emailListTemplatesResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type emailListTemplatesResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type emailListTemplatesResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type emailListTemplatesResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type emailListTemplatesResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type emailListTemplatesResponseComposite =
  | emailListTemplatesResponse200
  | emailListTemplatesResponse400
  | emailListTemplatesResponse401
  | emailListTemplatesResponse403
  | emailListTemplatesResponse404
  | emailListTemplatesResponse500;

export type emailListTemplatesResponse = emailListTemplatesResponseComposite & {
  headers: Headers;
};

export const getEmailListTemplatesUrl = (params?: EmailListTemplatesParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/v1/email/templates?${stringifiedParams}`
    : `/v1/email/templates`;
};

export const emailListTemplates = async (
  params?: EmailListTemplatesParams,
  options?: RequestInit,
): Promise<emailListTemplatesResponse> => {
  return customInstance<emailListTemplatesResponse>(
    getEmailListTemplatesUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getEmailListTemplatesQueryKey = (
  params?: EmailListTemplatesParams,
) => {
  return [`/v1/email/templates`, ...(params ? [params] : [])] as const;
};

export const getEmailListTemplatesInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof emailListTemplates>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
>(
  params?: EmailListTemplatesParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof emailListTemplates>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getEmailListTemplatesQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof emailListTemplates>>
  > = ({ signal }) => emailListTemplates(params, { signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof emailListTemplates>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type EmailListTemplatesInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof emailListTemplates>>
>;
export type EmailListTemplatesInfiniteQueryError =
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | InternalServerError;

export function useEmailListTemplatesInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof emailListTemplates>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
>(
  params: undefined | EmailListTemplatesParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof emailListTemplates>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof emailListTemplates>>,
          TError,
          Awaited<ReturnType<typeof emailListTemplates>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useEmailListTemplatesInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof emailListTemplates>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
>(
  params?: EmailListTemplatesParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof emailListTemplates>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof emailListTemplates>>,
          TError,
          Awaited<ReturnType<typeof emailListTemplates>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useEmailListTemplatesInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof emailListTemplates>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
>(
  params?: EmailListTemplatesParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof emailListTemplates>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary list_templates email
 */

export function useEmailListTemplatesInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof emailListTemplates>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
>(
  params?: EmailListTemplatesParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof emailListTemplates>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getEmailListTemplatesInfiniteQueryOptions(
    params,
    options,
  );

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getEmailListTemplatesQueryOptions = <
  TData = Awaited<ReturnType<typeof emailListTemplates>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
>(
  params?: EmailListTemplatesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof emailListTemplates>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getEmailListTemplatesQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof emailListTemplates>>
  > = ({ signal }) => emailListTemplates(params, { signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof emailListTemplates>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type EmailListTemplatesQueryResult = NonNullable<
  Awaited<ReturnType<typeof emailListTemplates>>
>;
export type EmailListTemplatesQueryError =
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | InternalServerError;

export function useEmailListTemplates<
  TData = Awaited<ReturnType<typeof emailListTemplates>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
>(
  params: undefined | EmailListTemplatesParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof emailListTemplates>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof emailListTemplates>>,
          TError,
          Awaited<ReturnType<typeof emailListTemplates>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useEmailListTemplates<
  TData = Awaited<ReturnType<typeof emailListTemplates>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
>(
  params?: EmailListTemplatesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof emailListTemplates>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof emailListTemplates>>,
          TError,
          Awaited<ReturnType<typeof emailListTemplates>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useEmailListTemplates<
  TData = Awaited<ReturnType<typeof emailListTemplates>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
>(
  params?: EmailListTemplatesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof emailListTemplates>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary list_templates email
 */

export function useEmailListTemplates<
  TData = Awaited<ReturnType<typeof emailListTemplates>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
>(
  params?: EmailListTemplatesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof emailListTemplates>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getEmailListTemplatesQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Create a new email template
 * @summary create_template email
 */
export type emailCreateTemplateResponse201 = {
  data: EmailTemplateResponse;
  status: 201;
};

export type emailCreateTemplateResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type emailCreateTemplateResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type emailCreateTemplateResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type emailCreateTemplateResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type emailCreateTemplateResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type emailCreateTemplateResponseComposite =
  | emailCreateTemplateResponse201
  | emailCreateTemplateResponse400
  | emailCreateTemplateResponse401
  | emailCreateTemplateResponse403
  | emailCreateTemplateResponse404
  | emailCreateTemplateResponse500;

export type emailCreateTemplateResponse =
  emailCreateTemplateResponseComposite & {
    headers: Headers;
  };

export const getEmailCreateTemplateUrl = () => {
  return `/v1/email/templates`;
};

export const emailCreateTemplate = async (
  createEmailTemplateRequest: CreateEmailTemplateRequest,
  options?: RequestInit,
): Promise<emailCreateTemplateResponse> => {
  return customInstance<emailCreateTemplateResponse>(
    getEmailCreateTemplateUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(createEmailTemplateRequest),
    },
  );
};

export const getEmailCreateTemplateMutationOptions = <
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof emailCreateTemplate>>,
    TError,
    { data: CreateEmailTemplateRequest },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof emailCreateTemplate>>,
  TError,
  { data: CreateEmailTemplateRequest },
  TContext
> => {
  const mutationKey = ["emailCreateTemplate"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof emailCreateTemplate>>,
    { data: CreateEmailTemplateRequest }
  > = (props) => {
    const { data } = props ?? {};

    return emailCreateTemplate(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type EmailCreateTemplateMutationResult = NonNullable<
  Awaited<ReturnType<typeof emailCreateTemplate>>
>;
export type EmailCreateTemplateMutationBody = CreateEmailTemplateRequest;
export type EmailCreateTemplateMutationError =
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | InternalServerError;

/**
 * @summary create_template email
 */
export const useEmailCreateTemplate = <
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof emailCreateTemplate>>,
    TError,
    { data: CreateEmailTemplateRequest },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof emailCreateTemplate>>,
  TError,
  { data: CreateEmailTemplateRequest },
  TContext
> => {
  const mutationOptions = getEmailCreateTemplateMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Get email template by type
 * @summary get_template_by_type email
 */
export type emailGetTemplateByTypeResponse200 = {
  data: EmailTemplateResponse;
  status: 200;
};

export type emailGetTemplateByTypeResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type emailGetTemplateByTypeResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type emailGetTemplateByTypeResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type emailGetTemplateByTypeResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type emailGetTemplateByTypeResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type emailGetTemplateByTypeResponseComposite =
  | emailGetTemplateByTypeResponse200
  | emailGetTemplateByTypeResponse400
  | emailGetTemplateByTypeResponse401
  | emailGetTemplateByTypeResponse403
  | emailGetTemplateByTypeResponse404
  | emailGetTemplateByTypeResponse500;

export type emailGetTemplateByTypeResponse =
  emailGetTemplateByTypeResponseComposite & {
    headers: Headers;
  };

export const getEmailGetTemplateByTypeUrl = (
  type: string,
  params?: EmailGetTemplateByTypeParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/v1/email/templates/by-type/${type}?${stringifiedParams}`
    : `/v1/email/templates/by-type/${type}`;
};

export const emailGetTemplateByType = async (
  type: string,
  params?: EmailGetTemplateByTypeParams,
  options?: RequestInit,
): Promise<emailGetTemplateByTypeResponse> => {
  return customInstance<emailGetTemplateByTypeResponse>(
    getEmailGetTemplateByTypeUrl(type, params),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getEmailGetTemplateByTypeQueryKey = (
  type: string,
  params?: EmailGetTemplateByTypeParams,
) => {
  return [
    `/v1/email/templates/by-type/${type}`,
    ...(params ? [params] : []),
  ] as const;
};

export const getEmailGetTemplateByTypeInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof emailGetTemplateByType>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
>(
  type: string,
  params?: EmailGetTemplateByTypeParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof emailGetTemplateByType>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getEmailGetTemplateByTypeQueryKey(type, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof emailGetTemplateByType>>
  > = ({ signal }) =>
    emailGetTemplateByType(type, params, { signal, ...requestOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!type,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof emailGetTemplateByType>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type EmailGetTemplateByTypeInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof emailGetTemplateByType>>
>;
export type EmailGetTemplateByTypeInfiniteQueryError =
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | InternalServerError;

export function useEmailGetTemplateByTypeInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof emailGetTemplateByType>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
>(
  type: string,
  params: undefined | EmailGetTemplateByTypeParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof emailGetTemplateByType>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof emailGetTemplateByType>>,
          TError,
          Awaited<ReturnType<typeof emailGetTemplateByType>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useEmailGetTemplateByTypeInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof emailGetTemplateByType>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
>(
  type: string,
  params?: EmailGetTemplateByTypeParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof emailGetTemplateByType>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof emailGetTemplateByType>>,
          TError,
          Awaited<ReturnType<typeof emailGetTemplateByType>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useEmailGetTemplateByTypeInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof emailGetTemplateByType>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
>(
  type: string,
  params?: EmailGetTemplateByTypeParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof emailGetTemplateByType>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary get_template_by_type email
 */

export function useEmailGetTemplateByTypeInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof emailGetTemplateByType>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
>(
  type: string,
  params?: EmailGetTemplateByTypeParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof emailGetTemplateByType>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getEmailGetTemplateByTypeInfiniteQueryOptions(
    type,
    params,
    options,
  );

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getEmailGetTemplateByTypeQueryOptions = <
  TData = Awaited<ReturnType<typeof emailGetTemplateByType>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
>(
  type: string,
  params?: EmailGetTemplateByTypeParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof emailGetTemplateByType>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getEmailGetTemplateByTypeQueryKey(type, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof emailGetTemplateByType>>
  > = ({ signal }) =>
    emailGetTemplateByType(type, params, { signal, ...requestOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!type,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof emailGetTemplateByType>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type EmailGetTemplateByTypeQueryResult = NonNullable<
  Awaited<ReturnType<typeof emailGetTemplateByType>>
>;
export type EmailGetTemplateByTypeQueryError =
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | InternalServerError;

export function useEmailGetTemplateByType<
  TData = Awaited<ReturnType<typeof emailGetTemplateByType>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
>(
  type: string,
  params: undefined | EmailGetTemplateByTypeParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof emailGetTemplateByType>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof emailGetTemplateByType>>,
          TError,
          Awaited<ReturnType<typeof emailGetTemplateByType>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useEmailGetTemplateByType<
  TData = Awaited<ReturnType<typeof emailGetTemplateByType>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
>(
  type: string,
  params?: EmailGetTemplateByTypeParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof emailGetTemplateByType>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof emailGetTemplateByType>>,
          TError,
          Awaited<ReturnType<typeof emailGetTemplateByType>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useEmailGetTemplateByType<
  TData = Awaited<ReturnType<typeof emailGetTemplateByType>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
>(
  type: string,
  params?: EmailGetTemplateByTypeParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof emailGetTemplateByType>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary get_template_by_type email
 */

export function useEmailGetTemplateByType<
  TData = Awaited<ReturnType<typeof emailGetTemplateByType>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
>(
  type: string,
  params?: EmailGetTemplateByTypeParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof emailGetTemplateByType>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getEmailGetTemplateByTypeQueryOptions(
    type,
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Delete email template
 * @summary delete_template email
 */
export type emailDeleteTemplateResponse204 = {
  data: void;
  status: 204;
};

export type emailDeleteTemplateResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type emailDeleteTemplateResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type emailDeleteTemplateResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type emailDeleteTemplateResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type emailDeleteTemplateResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type emailDeleteTemplateResponseComposite =
  | emailDeleteTemplateResponse204
  | emailDeleteTemplateResponse400
  | emailDeleteTemplateResponse401
  | emailDeleteTemplateResponse403
  | emailDeleteTemplateResponse404
  | emailDeleteTemplateResponse500;

export type emailDeleteTemplateResponse =
  emailDeleteTemplateResponseComposite & {
    headers: Headers;
  };

export const getEmailDeleteTemplateUrl = (id: string) => {
  return `/v1/email/templates/${id}`;
};

export const emailDeleteTemplate = async (
  id: string,
  options?: RequestInit,
): Promise<emailDeleteTemplateResponse> => {
  return customInstance<emailDeleteTemplateResponse>(
    getEmailDeleteTemplateUrl(id),
    {
      ...options,
      method: "DELETE",
    },
  );
};

export const getEmailDeleteTemplateMutationOptions = <
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof emailDeleteTemplate>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof emailDeleteTemplate>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["emailDeleteTemplate"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof emailDeleteTemplate>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return emailDeleteTemplate(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type EmailDeleteTemplateMutationResult = NonNullable<
  Awaited<ReturnType<typeof emailDeleteTemplate>>
>;

export type EmailDeleteTemplateMutationError =
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | InternalServerError;

/**
 * @summary delete_template email
 */
export const useEmailDeleteTemplate = <
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof emailDeleteTemplate>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof emailDeleteTemplate>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getEmailDeleteTemplateMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Get email template by ID
 * @summary get_template email
 */
export type emailGetTemplateResponse200 = {
  data: EmailTemplateResponse;
  status: 200;
};

export type emailGetTemplateResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type emailGetTemplateResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type emailGetTemplateResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type emailGetTemplateResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type emailGetTemplateResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type emailGetTemplateResponseComposite =
  | emailGetTemplateResponse200
  | emailGetTemplateResponse400
  | emailGetTemplateResponse401
  | emailGetTemplateResponse403
  | emailGetTemplateResponse404
  | emailGetTemplateResponse500;

export type emailGetTemplateResponse = emailGetTemplateResponseComposite & {
  headers: Headers;
};

export const getEmailGetTemplateUrl = (id: string) => {
  return `/v1/email/templates/${id}`;
};

export const emailGetTemplate = async (
  id: string,
  options?: RequestInit,
): Promise<emailGetTemplateResponse> => {
  return customInstance<emailGetTemplateResponse>(getEmailGetTemplateUrl(id), {
    ...options,
    method: "GET",
  });
};

export const getEmailGetTemplateQueryKey = (id: string) => {
  return [`/v1/email/templates/${id}`] as const;
};

export const getEmailGetTemplateInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof emailGetTemplate>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof emailGetTemplate>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getEmailGetTemplateQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof emailGetTemplate>>
  > = ({ signal }) => emailGetTemplate(id, { signal, ...requestOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof emailGetTemplate>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type EmailGetTemplateInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof emailGetTemplate>>
>;
export type EmailGetTemplateInfiniteQueryError =
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | InternalServerError;

export function useEmailGetTemplateInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof emailGetTemplate>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
>(
  id: string,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof emailGetTemplate>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof emailGetTemplate>>,
          TError,
          Awaited<ReturnType<typeof emailGetTemplate>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useEmailGetTemplateInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof emailGetTemplate>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof emailGetTemplate>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof emailGetTemplate>>,
          TError,
          Awaited<ReturnType<typeof emailGetTemplate>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useEmailGetTemplateInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof emailGetTemplate>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof emailGetTemplate>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary get_template email
 */

export function useEmailGetTemplateInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof emailGetTemplate>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof emailGetTemplate>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getEmailGetTemplateInfiniteQueryOptions(id, options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getEmailGetTemplateQueryOptions = <
  TData = Awaited<ReturnType<typeof emailGetTemplate>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof emailGetTemplate>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getEmailGetTemplateQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof emailGetTemplate>>
  > = ({ signal }) => emailGetTemplate(id, { signal, ...requestOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof emailGetTemplate>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type EmailGetTemplateQueryResult = NonNullable<
  Awaited<ReturnType<typeof emailGetTemplate>>
>;
export type EmailGetTemplateQueryError =
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | InternalServerError;

export function useEmailGetTemplate<
  TData = Awaited<ReturnType<typeof emailGetTemplate>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof emailGetTemplate>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof emailGetTemplate>>,
          TError,
          Awaited<ReturnType<typeof emailGetTemplate>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useEmailGetTemplate<
  TData = Awaited<ReturnType<typeof emailGetTemplate>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof emailGetTemplate>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof emailGetTemplate>>,
          TError,
          Awaited<ReturnType<typeof emailGetTemplate>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useEmailGetTemplate<
  TData = Awaited<ReturnType<typeof emailGetTemplate>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof emailGetTemplate>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary get_template email
 */

export function useEmailGetTemplate<
  TData = Awaited<ReturnType<typeof emailGetTemplate>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof emailGetTemplate>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getEmailGetTemplateQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Update email template
 * @summary update_template email
 */
export type emailUpdateTemplateResponse200 = {
  data: EmailTemplateResponse;
  status: 200;
};

export type emailUpdateTemplateResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type emailUpdateTemplateResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type emailUpdateTemplateResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type emailUpdateTemplateResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type emailUpdateTemplateResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type emailUpdateTemplateResponseComposite =
  | emailUpdateTemplateResponse200
  | emailUpdateTemplateResponse400
  | emailUpdateTemplateResponse401
  | emailUpdateTemplateResponse403
  | emailUpdateTemplateResponse404
  | emailUpdateTemplateResponse500;

export type emailUpdateTemplateResponse =
  emailUpdateTemplateResponseComposite & {
    headers: Headers;
  };

export const getEmailUpdateTemplateUrl = (id: string) => {
  return `/v1/email/templates/${id}`;
};

export const emailUpdateTemplate = async (
  id: string,
  updateTemplateRequestBody: UpdateTemplateRequestBody,
  options?: RequestInit,
): Promise<emailUpdateTemplateResponse> => {
  return customInstance<emailUpdateTemplateResponse>(
    getEmailUpdateTemplateUrl(id),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(updateTemplateRequestBody),
    },
  );
};

export const getEmailUpdateTemplateMutationOptions = <
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof emailUpdateTemplate>>,
    TError,
    { id: string; data: UpdateTemplateRequestBody },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof emailUpdateTemplate>>,
  TError,
  { id: string; data: UpdateTemplateRequestBody },
  TContext
> => {
  const mutationKey = ["emailUpdateTemplate"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof emailUpdateTemplate>>,
    { id: string; data: UpdateTemplateRequestBody }
  > = (props) => {
    const { id, data } = props ?? {};

    return emailUpdateTemplate(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type EmailUpdateTemplateMutationResult = NonNullable<
  Awaited<ReturnType<typeof emailUpdateTemplate>>
>;
export type EmailUpdateTemplateMutationBody = UpdateTemplateRequestBody;
export type EmailUpdateTemplateMutationError =
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | InternalServerError;

/**
 * @summary update_template email
 */
export const useEmailUpdateTemplate = <
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof emailUpdateTemplate>>,
    TError,
    { id: string; data: UpdateTemplateRequestBody },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof emailUpdateTemplate>>,
  TError,
  { id: string; data: UpdateTemplateRequestBody },
  TContext
> => {
  const mutationOptions = getEmailUpdateTemplateMutationOptions(options);

  return useMutation(mutationOptions);
};
