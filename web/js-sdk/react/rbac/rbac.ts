/**
 * Generated by orval v7.7.0 üç∫
 * Do not edit manually.
 * Frank Authentication Server
 * A comprehensive authentication server with OAuth2, MFA, Passkeys, SSO, and more
 * OpenAPI spec version: 1.0.0
 */
import { useInfiniteQuery, useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  AddRolePermissionRequestBody,
  BadRequestError,
  CheckPermissionResponseBody,
  CheckRoleResponseBody,
  ConflictError,
  CreatePermissionRequestBody,
  CreateRoleRequestBody,
  ForbiddenError,
  InternalServerError,
  ListPermissionsResponse,
  ListRolePermissionsResponseBody,
  ListRolesResponseBody,
  NotFoundError,
  PermissionResponse,
  RbacCheckPermissionParams,
  RbacCheckRoleParams,
  RbacListPermissionsParams,
  RbacListRolesParams,
  RoleResponse,
  SendResponseBody,
  UnauthorizedError,
  UpdatePermissionRequestBody,
  UpdateRoleRequestBody,
} from "../../model";

import { customInstance } from "../../mutator/custom-instance";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * Check if user has a permission
 * @summary check_permission rbac
 */
export type rbacCheckPermissionResponse200 = {
  data: CheckPermissionResponseBody;
  status: 200;
};

export type rbacCheckPermissionResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type rbacCheckPermissionResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type rbacCheckPermissionResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type rbacCheckPermissionResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type rbacCheckPermissionResponse409 = {
  data: ConflictError;
  status: 409;
};

export type rbacCheckPermissionResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type rbacCheckPermissionResponseComposite =
  | rbacCheckPermissionResponse200
  | rbacCheckPermissionResponse400
  | rbacCheckPermissionResponse401
  | rbacCheckPermissionResponse403
  | rbacCheckPermissionResponse404
  | rbacCheckPermissionResponse409
  | rbacCheckPermissionResponse500;

export type rbacCheckPermissionResponse =
  rbacCheckPermissionResponseComposite & {
    headers: Headers;
  };

export const getRbacCheckPermissionUrl = (
  params: RbacCheckPermissionParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/v1/access/check?${stringifiedParams}`
    : `/v1/access/check`;
};

export const rbacCheckPermission = async (
  params: RbacCheckPermissionParams,
  options?: RequestInit,
): Promise<rbacCheckPermissionResponse> => {
  return customInstance<rbacCheckPermissionResponse>(
    getRbacCheckPermissionUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getRbacCheckPermissionQueryKey = (
  params: RbacCheckPermissionParams,
) => {
  return [`/v1/access/check`, ...(params ? [params] : [])] as const;
};

export const getRbacCheckPermissionInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof rbacCheckPermission>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  params: RbacCheckPermissionParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof rbacCheckPermission>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getRbacCheckPermissionQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof rbacCheckPermission>>
  > = ({ signal }) =>
    rbacCheckPermission(params, { signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof rbacCheckPermission>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type RbacCheckPermissionInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof rbacCheckPermission>>
>;
export type RbacCheckPermissionInfiniteQueryError =
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | ConflictError
  | InternalServerError;

export function useRbacCheckPermissionInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof rbacCheckPermission>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  params: RbacCheckPermissionParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof rbacCheckPermission>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof rbacCheckPermission>>,
          TError,
          Awaited<ReturnType<typeof rbacCheckPermission>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useRbacCheckPermissionInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof rbacCheckPermission>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  params: RbacCheckPermissionParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof rbacCheckPermission>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof rbacCheckPermission>>,
          TError,
          Awaited<ReturnType<typeof rbacCheckPermission>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useRbacCheckPermissionInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof rbacCheckPermission>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  params: RbacCheckPermissionParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof rbacCheckPermission>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary check_permission rbac
 */

export function useRbacCheckPermissionInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof rbacCheckPermission>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  params: RbacCheckPermissionParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof rbacCheckPermission>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getRbacCheckPermissionInfiniteQueryOptions(
    params,
    options,
  );

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getRbacCheckPermissionQueryOptions = <
  TData = Awaited<ReturnType<typeof rbacCheckPermission>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  params: RbacCheckPermissionParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof rbacCheckPermission>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getRbacCheckPermissionQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof rbacCheckPermission>>
  > = ({ signal }) =>
    rbacCheckPermission(params, { signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof rbacCheckPermission>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type RbacCheckPermissionQueryResult = NonNullable<
  Awaited<ReturnType<typeof rbacCheckPermission>>
>;
export type RbacCheckPermissionQueryError =
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | ConflictError
  | InternalServerError;

export function useRbacCheckPermission<
  TData = Awaited<ReturnType<typeof rbacCheckPermission>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  params: RbacCheckPermissionParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof rbacCheckPermission>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof rbacCheckPermission>>,
          TError,
          Awaited<ReturnType<typeof rbacCheckPermission>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useRbacCheckPermission<
  TData = Awaited<ReturnType<typeof rbacCheckPermission>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  params: RbacCheckPermissionParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof rbacCheckPermission>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof rbacCheckPermission>>,
          TError,
          Awaited<ReturnType<typeof rbacCheckPermission>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useRbacCheckPermission<
  TData = Awaited<ReturnType<typeof rbacCheckPermission>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  params: RbacCheckPermissionParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof rbacCheckPermission>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary check_permission rbac
 */

export function useRbacCheckPermission<
  TData = Awaited<ReturnType<typeof rbacCheckPermission>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  params: RbacCheckPermissionParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof rbacCheckPermission>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getRbacCheckPermissionQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Check if user has a role
 * @summary check_role rbac
 */
export type rbacCheckRoleResponse200 = {
  data: CheckRoleResponseBody;
  status: 200;
};

export type rbacCheckRoleResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type rbacCheckRoleResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type rbacCheckRoleResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type rbacCheckRoleResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type rbacCheckRoleResponse409 = {
  data: ConflictError;
  status: 409;
};

export type rbacCheckRoleResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type rbacCheckRoleResponseComposite =
  | rbacCheckRoleResponse200
  | rbacCheckRoleResponse400
  | rbacCheckRoleResponse401
  | rbacCheckRoleResponse403
  | rbacCheckRoleResponse404
  | rbacCheckRoleResponse409
  | rbacCheckRoleResponse500;

export type rbacCheckRoleResponse = rbacCheckRoleResponseComposite & {
  headers: Headers;
};

export const getRbacCheckRoleUrl = (params: RbacCheckRoleParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/v1/access/check-role?${stringifiedParams}`
    : `/v1/access/check-role`;
};

export const rbacCheckRole = async (
  params: RbacCheckRoleParams,
  options?: RequestInit,
): Promise<rbacCheckRoleResponse> => {
  return customInstance<rbacCheckRoleResponse>(getRbacCheckRoleUrl(params), {
    ...options,
    method: "GET",
  });
};

export const getRbacCheckRoleQueryKey = (params: RbacCheckRoleParams) => {
  return [`/v1/access/check-role`, ...(params ? [params] : [])] as const;
};

export const getRbacCheckRoleInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof rbacCheckRole>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  params: RbacCheckRoleParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof rbacCheckRole>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getRbacCheckRoleQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof rbacCheckRole>>> = ({
    signal,
  }) => rbacCheckRole(params, { signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof rbacCheckRole>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type RbacCheckRoleInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof rbacCheckRole>>
>;
export type RbacCheckRoleInfiniteQueryError =
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | ConflictError
  | InternalServerError;

export function useRbacCheckRoleInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof rbacCheckRole>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  params: RbacCheckRoleParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof rbacCheckRole>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof rbacCheckRole>>,
          TError,
          Awaited<ReturnType<typeof rbacCheckRole>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useRbacCheckRoleInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof rbacCheckRole>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  params: RbacCheckRoleParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof rbacCheckRole>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof rbacCheckRole>>,
          TError,
          Awaited<ReturnType<typeof rbacCheckRole>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useRbacCheckRoleInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof rbacCheckRole>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  params: RbacCheckRoleParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof rbacCheckRole>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary check_role rbac
 */

export function useRbacCheckRoleInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof rbacCheckRole>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  params: RbacCheckRoleParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof rbacCheckRole>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getRbacCheckRoleInfiniteQueryOptions(params, options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getRbacCheckRoleQueryOptions = <
  TData = Awaited<ReturnType<typeof rbacCheckRole>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  params: RbacCheckRoleParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof rbacCheckRole>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getRbacCheckRoleQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof rbacCheckRole>>> = ({
    signal,
  }) => rbacCheckRole(params, { signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof rbacCheckRole>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type RbacCheckRoleQueryResult = NonNullable<
  Awaited<ReturnType<typeof rbacCheckRole>>
>;
export type RbacCheckRoleQueryError =
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | ConflictError
  | InternalServerError;

export function useRbacCheckRole<
  TData = Awaited<ReturnType<typeof rbacCheckRole>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  params: RbacCheckRoleParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof rbacCheckRole>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof rbacCheckRole>>,
          TError,
          Awaited<ReturnType<typeof rbacCheckRole>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useRbacCheckRole<
  TData = Awaited<ReturnType<typeof rbacCheckRole>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  params: RbacCheckRoleParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof rbacCheckRole>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof rbacCheckRole>>,
          TError,
          Awaited<ReturnType<typeof rbacCheckRole>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useRbacCheckRole<
  TData = Awaited<ReturnType<typeof rbacCheckRole>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  params: RbacCheckRoleParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof rbacCheckRole>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary check_role rbac
 */

export function useRbacCheckRole<
  TData = Awaited<ReturnType<typeof rbacCheckRole>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  params: RbacCheckRoleParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof rbacCheckRole>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getRbacCheckRoleQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * List permissions
 * @summary list_permissions rbac
 */
export type rbacListPermissionsResponse200 = {
  data: ListPermissionsResponse;
  status: 200;
};

export type rbacListPermissionsResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type rbacListPermissionsResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type rbacListPermissionsResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type rbacListPermissionsResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type rbacListPermissionsResponse409 = {
  data: ConflictError;
  status: 409;
};

export type rbacListPermissionsResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type rbacListPermissionsResponseComposite =
  | rbacListPermissionsResponse200
  | rbacListPermissionsResponse400
  | rbacListPermissionsResponse401
  | rbacListPermissionsResponse403
  | rbacListPermissionsResponse404
  | rbacListPermissionsResponse409
  | rbacListPermissionsResponse500;

export type rbacListPermissionsResponse =
  rbacListPermissionsResponseComposite & {
    headers: Headers;
  };

export const getRbacListPermissionsUrl = (
  params?: RbacListPermissionsParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/v1/permissions?${stringifiedParams}`
    : `/v1/permissions`;
};

export const rbacListPermissions = async (
  params?: RbacListPermissionsParams,
  options?: RequestInit,
): Promise<rbacListPermissionsResponse> => {
  return customInstance<rbacListPermissionsResponse>(
    getRbacListPermissionsUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getRbacListPermissionsQueryKey = (
  params?: RbacListPermissionsParams,
) => {
  return [`/v1/permissions`, ...(params ? [params] : [])] as const;
};

export const getRbacListPermissionsInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof rbacListPermissions>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  params?: RbacListPermissionsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof rbacListPermissions>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getRbacListPermissionsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof rbacListPermissions>>
  > = ({ signal }) =>
    rbacListPermissions(params, { signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof rbacListPermissions>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type RbacListPermissionsInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof rbacListPermissions>>
>;
export type RbacListPermissionsInfiniteQueryError =
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | ConflictError
  | InternalServerError;

export function useRbacListPermissionsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof rbacListPermissions>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  params: undefined | RbacListPermissionsParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof rbacListPermissions>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof rbacListPermissions>>,
          TError,
          Awaited<ReturnType<typeof rbacListPermissions>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useRbacListPermissionsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof rbacListPermissions>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  params?: RbacListPermissionsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof rbacListPermissions>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof rbacListPermissions>>,
          TError,
          Awaited<ReturnType<typeof rbacListPermissions>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useRbacListPermissionsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof rbacListPermissions>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  params?: RbacListPermissionsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof rbacListPermissions>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary list_permissions rbac
 */

export function useRbacListPermissionsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof rbacListPermissions>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  params?: RbacListPermissionsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof rbacListPermissions>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getRbacListPermissionsInfiniteQueryOptions(
    params,
    options,
  );

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getRbacListPermissionsQueryOptions = <
  TData = Awaited<ReturnType<typeof rbacListPermissions>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  params?: RbacListPermissionsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof rbacListPermissions>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getRbacListPermissionsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof rbacListPermissions>>
  > = ({ signal }) =>
    rbacListPermissions(params, { signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof rbacListPermissions>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type RbacListPermissionsQueryResult = NonNullable<
  Awaited<ReturnType<typeof rbacListPermissions>>
>;
export type RbacListPermissionsQueryError =
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | ConflictError
  | InternalServerError;

export function useRbacListPermissions<
  TData = Awaited<ReturnType<typeof rbacListPermissions>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  params: undefined | RbacListPermissionsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof rbacListPermissions>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof rbacListPermissions>>,
          TError,
          Awaited<ReturnType<typeof rbacListPermissions>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useRbacListPermissions<
  TData = Awaited<ReturnType<typeof rbacListPermissions>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  params?: RbacListPermissionsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof rbacListPermissions>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof rbacListPermissions>>,
          TError,
          Awaited<ReturnType<typeof rbacListPermissions>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useRbacListPermissions<
  TData = Awaited<ReturnType<typeof rbacListPermissions>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  params?: RbacListPermissionsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof rbacListPermissions>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary list_permissions rbac
 */

export function useRbacListPermissions<
  TData = Awaited<ReturnType<typeof rbacListPermissions>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  params?: RbacListPermissionsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof rbacListPermissions>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getRbacListPermissionsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Create a new permission
 * @summary create_permission rbac
 */
export type rbacCreatePermissionResponse201 = {
  data: PermissionResponse;
  status: 201;
};

export type rbacCreatePermissionResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type rbacCreatePermissionResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type rbacCreatePermissionResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type rbacCreatePermissionResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type rbacCreatePermissionResponse409 = {
  data: ConflictError;
  status: 409;
};

export type rbacCreatePermissionResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type rbacCreatePermissionResponseComposite =
  | rbacCreatePermissionResponse201
  | rbacCreatePermissionResponse400
  | rbacCreatePermissionResponse401
  | rbacCreatePermissionResponse403
  | rbacCreatePermissionResponse404
  | rbacCreatePermissionResponse409
  | rbacCreatePermissionResponse500;

export type rbacCreatePermissionResponse =
  rbacCreatePermissionResponseComposite & {
    headers: Headers;
  };

export const getRbacCreatePermissionUrl = () => {
  return `/v1/permissions`;
};

export const rbacCreatePermission = async (
  createPermissionRequestBody: CreatePermissionRequestBody,
  options?: RequestInit,
): Promise<rbacCreatePermissionResponse> => {
  return customInstance<rbacCreatePermissionResponse>(
    getRbacCreatePermissionUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(createPermissionRequestBody),
    },
  );
};

export const getRbacCreatePermissionMutationOptions = <
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof rbacCreatePermission>>,
    TError,
    { data: CreatePermissionRequestBody },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof rbacCreatePermission>>,
  TError,
  { data: CreatePermissionRequestBody },
  TContext
> => {
  const mutationKey = ["rbacCreatePermission"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof rbacCreatePermission>>,
    { data: CreatePermissionRequestBody }
  > = (props) => {
    const { data } = props ?? {};

    return rbacCreatePermission(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type RbacCreatePermissionMutationResult = NonNullable<
  Awaited<ReturnType<typeof rbacCreatePermission>>
>;
export type RbacCreatePermissionMutationBody = CreatePermissionRequestBody;
export type RbacCreatePermissionMutationError =
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | ConflictError
  | InternalServerError;

/**
 * @summary create_permission rbac
 */
export const useRbacCreatePermission = <
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof rbacCreatePermission>>,
    TError,
    { data: CreatePermissionRequestBody },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof rbacCreatePermission>>,
  TError,
  { data: CreatePermissionRequestBody },
  TContext
> => {
  const mutationOptions = getRbacCreatePermissionMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Delete permission
 * @summary delete_permission rbac
 */
export type rbacDeletePermissionResponse204 = {
  data: void;
  status: 204;
};

export type rbacDeletePermissionResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type rbacDeletePermissionResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type rbacDeletePermissionResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type rbacDeletePermissionResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type rbacDeletePermissionResponse409 = {
  data: ConflictError;
  status: 409;
};

export type rbacDeletePermissionResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type rbacDeletePermissionResponseComposite =
  | rbacDeletePermissionResponse204
  | rbacDeletePermissionResponse400
  | rbacDeletePermissionResponse401
  | rbacDeletePermissionResponse403
  | rbacDeletePermissionResponse404
  | rbacDeletePermissionResponse409
  | rbacDeletePermissionResponse500;

export type rbacDeletePermissionResponse =
  rbacDeletePermissionResponseComposite & {
    headers: Headers;
  };

export const getRbacDeletePermissionUrl = (id: string) => {
  return `/v1/permissions/${id}`;
};

export const rbacDeletePermission = async (
  id: string,
  options?: RequestInit,
): Promise<rbacDeletePermissionResponse> => {
  return customInstance<rbacDeletePermissionResponse>(
    getRbacDeletePermissionUrl(id),
    {
      ...options,
      method: "DELETE",
    },
  );
};

export const getRbacDeletePermissionMutationOptions = <
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof rbacDeletePermission>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof rbacDeletePermission>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["rbacDeletePermission"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof rbacDeletePermission>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return rbacDeletePermission(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type RbacDeletePermissionMutationResult = NonNullable<
  Awaited<ReturnType<typeof rbacDeletePermission>>
>;

export type RbacDeletePermissionMutationError =
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | ConflictError
  | InternalServerError;

/**
 * @summary delete_permission rbac
 */
export const useRbacDeletePermission = <
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof rbacDeletePermission>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof rbacDeletePermission>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getRbacDeletePermissionMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Get permission by ID
 * @summary get_permission rbac
 */
export type rbacGetPermissionResponse200 = {
  data: PermissionResponse;
  status: 200;
};

export type rbacGetPermissionResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type rbacGetPermissionResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type rbacGetPermissionResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type rbacGetPermissionResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type rbacGetPermissionResponse409 = {
  data: ConflictError;
  status: 409;
};

export type rbacGetPermissionResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type rbacGetPermissionResponseComposite =
  | rbacGetPermissionResponse200
  | rbacGetPermissionResponse400
  | rbacGetPermissionResponse401
  | rbacGetPermissionResponse403
  | rbacGetPermissionResponse404
  | rbacGetPermissionResponse409
  | rbacGetPermissionResponse500;

export type rbacGetPermissionResponse = rbacGetPermissionResponseComposite & {
  headers: Headers;
};

export const getRbacGetPermissionUrl = (id: string) => {
  return `/v1/permissions/${id}`;
};

export const rbacGetPermission = async (
  id: string,
  options?: RequestInit,
): Promise<rbacGetPermissionResponse> => {
  return customInstance<rbacGetPermissionResponse>(
    getRbacGetPermissionUrl(id),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getRbacGetPermissionQueryKey = (id: string) => {
  return [`/v1/permissions/${id}`] as const;
};

export const getRbacGetPermissionInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof rbacGetPermission>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof rbacGetPermission>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getRbacGetPermissionQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof rbacGetPermission>>
  > = ({ signal }) => rbacGetPermission(id, { signal, ...requestOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof rbacGetPermission>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type RbacGetPermissionInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof rbacGetPermission>>
>;
export type RbacGetPermissionInfiniteQueryError =
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | ConflictError
  | InternalServerError;

export function useRbacGetPermissionInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof rbacGetPermission>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  id: string,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof rbacGetPermission>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof rbacGetPermission>>,
          TError,
          Awaited<ReturnType<typeof rbacGetPermission>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useRbacGetPermissionInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof rbacGetPermission>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof rbacGetPermission>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof rbacGetPermission>>,
          TError,
          Awaited<ReturnType<typeof rbacGetPermission>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useRbacGetPermissionInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof rbacGetPermission>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof rbacGetPermission>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary get_permission rbac
 */

export function useRbacGetPermissionInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof rbacGetPermission>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof rbacGetPermission>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getRbacGetPermissionInfiniteQueryOptions(id, options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getRbacGetPermissionQueryOptions = <
  TData = Awaited<ReturnType<typeof rbacGetPermission>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof rbacGetPermission>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getRbacGetPermissionQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof rbacGetPermission>>
  > = ({ signal }) => rbacGetPermission(id, { signal, ...requestOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof rbacGetPermission>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type RbacGetPermissionQueryResult = NonNullable<
  Awaited<ReturnType<typeof rbacGetPermission>>
>;
export type RbacGetPermissionQueryError =
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | ConflictError
  | InternalServerError;

export function useRbacGetPermission<
  TData = Awaited<ReturnType<typeof rbacGetPermission>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof rbacGetPermission>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof rbacGetPermission>>,
          TError,
          Awaited<ReturnType<typeof rbacGetPermission>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useRbacGetPermission<
  TData = Awaited<ReturnType<typeof rbacGetPermission>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof rbacGetPermission>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof rbacGetPermission>>,
          TError,
          Awaited<ReturnType<typeof rbacGetPermission>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useRbacGetPermission<
  TData = Awaited<ReturnType<typeof rbacGetPermission>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof rbacGetPermission>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary get_permission rbac
 */

export function useRbacGetPermission<
  TData = Awaited<ReturnType<typeof rbacGetPermission>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof rbacGetPermission>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getRbacGetPermissionQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Update permission
 * @summary update_permission rbac
 */
export type rbacUpdatePermissionResponse200 = {
  data: PermissionResponse;
  status: 200;
};

export type rbacUpdatePermissionResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type rbacUpdatePermissionResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type rbacUpdatePermissionResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type rbacUpdatePermissionResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type rbacUpdatePermissionResponse409 = {
  data: ConflictError;
  status: 409;
};

export type rbacUpdatePermissionResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type rbacUpdatePermissionResponseComposite =
  | rbacUpdatePermissionResponse200
  | rbacUpdatePermissionResponse400
  | rbacUpdatePermissionResponse401
  | rbacUpdatePermissionResponse403
  | rbacUpdatePermissionResponse404
  | rbacUpdatePermissionResponse409
  | rbacUpdatePermissionResponse500;

export type rbacUpdatePermissionResponse =
  rbacUpdatePermissionResponseComposite & {
    headers: Headers;
  };

export const getRbacUpdatePermissionUrl = (id: string) => {
  return `/v1/permissions/${id}`;
};

export const rbacUpdatePermission = async (
  id: string,
  updatePermissionRequestBody: UpdatePermissionRequestBody,
  options?: RequestInit,
): Promise<rbacUpdatePermissionResponse> => {
  return customInstance<rbacUpdatePermissionResponse>(
    getRbacUpdatePermissionUrl(id),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(updatePermissionRequestBody),
    },
  );
};

export const getRbacUpdatePermissionMutationOptions = <
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof rbacUpdatePermission>>,
    TError,
    { id: string; data: UpdatePermissionRequestBody },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof rbacUpdatePermission>>,
  TError,
  { id: string; data: UpdatePermissionRequestBody },
  TContext
> => {
  const mutationKey = ["rbacUpdatePermission"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof rbacUpdatePermission>>,
    { id: string; data: UpdatePermissionRequestBody }
  > = (props) => {
    const { id, data } = props ?? {};

    return rbacUpdatePermission(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type RbacUpdatePermissionMutationResult = NonNullable<
  Awaited<ReturnType<typeof rbacUpdatePermission>>
>;
export type RbacUpdatePermissionMutationBody = UpdatePermissionRequestBody;
export type RbacUpdatePermissionMutationError =
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | ConflictError
  | InternalServerError;

/**
 * @summary update_permission rbac
 */
export const useRbacUpdatePermission = <
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof rbacUpdatePermission>>,
    TError,
    { id: string; data: UpdatePermissionRequestBody },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof rbacUpdatePermission>>,
  TError,
  { id: string; data: UpdatePermissionRequestBody },
  TContext
> => {
  const mutationOptions = getRbacUpdatePermissionMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * List roles
 * @summary list_roles rbac
 */
export type rbacListRolesResponse200 = {
  data: ListRolesResponseBody;
  status: 200;
};

export type rbacListRolesResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type rbacListRolesResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type rbacListRolesResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type rbacListRolesResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type rbacListRolesResponse409 = {
  data: ConflictError;
  status: 409;
};

export type rbacListRolesResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type rbacListRolesResponseComposite =
  | rbacListRolesResponse200
  | rbacListRolesResponse400
  | rbacListRolesResponse401
  | rbacListRolesResponse403
  | rbacListRolesResponse404
  | rbacListRolesResponse409
  | rbacListRolesResponse500;

export type rbacListRolesResponse = rbacListRolesResponseComposite & {
  headers: Headers;
};

export const getRbacListRolesUrl = (params?: RbacListRolesParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/v1/roles?${stringifiedParams}`
    : `/v1/roles`;
};

export const rbacListRoles = async (
  params?: RbacListRolesParams,
  options?: RequestInit,
): Promise<rbacListRolesResponse> => {
  return customInstance<rbacListRolesResponse>(getRbacListRolesUrl(params), {
    ...options,
    method: "GET",
  });
};

export const getRbacListRolesQueryKey = (params?: RbacListRolesParams) => {
  return [`/v1/roles`, ...(params ? [params] : [])] as const;
};

export const getRbacListRolesInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof rbacListRoles>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  params?: RbacListRolesParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof rbacListRoles>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getRbacListRolesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof rbacListRoles>>> = ({
    signal,
  }) => rbacListRoles(params, { signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof rbacListRoles>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type RbacListRolesInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof rbacListRoles>>
>;
export type RbacListRolesInfiniteQueryError =
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | ConflictError
  | InternalServerError;

export function useRbacListRolesInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof rbacListRoles>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  params: undefined | RbacListRolesParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof rbacListRoles>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof rbacListRoles>>,
          TError,
          Awaited<ReturnType<typeof rbacListRoles>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useRbacListRolesInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof rbacListRoles>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  params?: RbacListRolesParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof rbacListRoles>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof rbacListRoles>>,
          TError,
          Awaited<ReturnType<typeof rbacListRoles>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useRbacListRolesInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof rbacListRoles>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  params?: RbacListRolesParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof rbacListRoles>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary list_roles rbac
 */

export function useRbacListRolesInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof rbacListRoles>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  params?: RbacListRolesParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof rbacListRoles>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getRbacListRolesInfiniteQueryOptions(params, options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getRbacListRolesQueryOptions = <
  TData = Awaited<ReturnType<typeof rbacListRoles>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  params?: RbacListRolesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof rbacListRoles>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getRbacListRolesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof rbacListRoles>>> = ({
    signal,
  }) => rbacListRoles(params, { signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof rbacListRoles>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type RbacListRolesQueryResult = NonNullable<
  Awaited<ReturnType<typeof rbacListRoles>>
>;
export type RbacListRolesQueryError =
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | ConflictError
  | InternalServerError;

export function useRbacListRoles<
  TData = Awaited<ReturnType<typeof rbacListRoles>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  params: undefined | RbacListRolesParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof rbacListRoles>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof rbacListRoles>>,
          TError,
          Awaited<ReturnType<typeof rbacListRoles>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useRbacListRoles<
  TData = Awaited<ReturnType<typeof rbacListRoles>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  params?: RbacListRolesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof rbacListRoles>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof rbacListRoles>>,
          TError,
          Awaited<ReturnType<typeof rbacListRoles>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useRbacListRoles<
  TData = Awaited<ReturnType<typeof rbacListRoles>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  params?: RbacListRolesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof rbacListRoles>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary list_roles rbac
 */

export function useRbacListRoles<
  TData = Awaited<ReturnType<typeof rbacListRoles>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  params?: RbacListRolesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof rbacListRoles>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getRbacListRolesQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Create a new role
 * @summary create_role rbac
 */
export type rbacCreateRoleResponse201 = {
  data: RoleResponse;
  status: 201;
};

export type rbacCreateRoleResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type rbacCreateRoleResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type rbacCreateRoleResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type rbacCreateRoleResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type rbacCreateRoleResponse409 = {
  data: ConflictError;
  status: 409;
};

export type rbacCreateRoleResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type rbacCreateRoleResponseComposite =
  | rbacCreateRoleResponse201
  | rbacCreateRoleResponse400
  | rbacCreateRoleResponse401
  | rbacCreateRoleResponse403
  | rbacCreateRoleResponse404
  | rbacCreateRoleResponse409
  | rbacCreateRoleResponse500;

export type rbacCreateRoleResponse = rbacCreateRoleResponseComposite & {
  headers: Headers;
};

export const getRbacCreateRoleUrl = () => {
  return `/v1/roles`;
};

export const rbacCreateRole = async (
  createRoleRequestBody: CreateRoleRequestBody,
  options?: RequestInit,
): Promise<rbacCreateRoleResponse> => {
  return customInstance<rbacCreateRoleResponse>(getRbacCreateRoleUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(createRoleRequestBody),
  });
};

export const getRbacCreateRoleMutationOptions = <
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof rbacCreateRole>>,
    TError,
    { data: CreateRoleRequestBody },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof rbacCreateRole>>,
  TError,
  { data: CreateRoleRequestBody },
  TContext
> => {
  const mutationKey = ["rbacCreateRole"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof rbacCreateRole>>,
    { data: CreateRoleRequestBody }
  > = (props) => {
    const { data } = props ?? {};

    return rbacCreateRole(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type RbacCreateRoleMutationResult = NonNullable<
  Awaited<ReturnType<typeof rbacCreateRole>>
>;
export type RbacCreateRoleMutationBody = CreateRoleRequestBody;
export type RbacCreateRoleMutationError =
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | ConflictError
  | InternalServerError;

/**
 * @summary create_role rbac
 */
export const useRbacCreateRole = <
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof rbacCreateRole>>,
    TError,
    { data: CreateRoleRequestBody },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof rbacCreateRole>>,
  TError,
  { data: CreateRoleRequestBody },
  TContext
> => {
  const mutationOptions = getRbacCreateRoleMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Delete role
 * @summary delete_role rbac
 */
export type rbacDeleteRoleResponse204 = {
  data: void;
  status: 204;
};

export type rbacDeleteRoleResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type rbacDeleteRoleResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type rbacDeleteRoleResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type rbacDeleteRoleResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type rbacDeleteRoleResponse409 = {
  data: ConflictError;
  status: 409;
};

export type rbacDeleteRoleResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type rbacDeleteRoleResponseComposite =
  | rbacDeleteRoleResponse204
  | rbacDeleteRoleResponse400
  | rbacDeleteRoleResponse401
  | rbacDeleteRoleResponse403
  | rbacDeleteRoleResponse404
  | rbacDeleteRoleResponse409
  | rbacDeleteRoleResponse500;

export type rbacDeleteRoleResponse = rbacDeleteRoleResponseComposite & {
  headers: Headers;
};

export const getRbacDeleteRoleUrl = (id: string) => {
  return `/v1/roles/${id}`;
};

export const rbacDeleteRole = async (
  id: string,
  options?: RequestInit,
): Promise<rbacDeleteRoleResponse> => {
  return customInstance<rbacDeleteRoleResponse>(getRbacDeleteRoleUrl(id), {
    ...options,
    method: "DELETE",
  });
};

export const getRbacDeleteRoleMutationOptions = <
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof rbacDeleteRole>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof rbacDeleteRole>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["rbacDeleteRole"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof rbacDeleteRole>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return rbacDeleteRole(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type RbacDeleteRoleMutationResult = NonNullable<
  Awaited<ReturnType<typeof rbacDeleteRole>>
>;

export type RbacDeleteRoleMutationError =
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | ConflictError
  | InternalServerError;

/**
 * @summary delete_role rbac
 */
export const useRbacDeleteRole = <
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof rbacDeleteRole>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof rbacDeleteRole>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getRbacDeleteRoleMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Get role by ID
 * @summary get_role rbac
 */
export type rbacGetRoleResponse200 = {
  data: RoleResponse;
  status: 200;
};

export type rbacGetRoleResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type rbacGetRoleResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type rbacGetRoleResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type rbacGetRoleResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type rbacGetRoleResponse409 = {
  data: ConflictError;
  status: 409;
};

export type rbacGetRoleResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type rbacGetRoleResponseComposite =
  | rbacGetRoleResponse200
  | rbacGetRoleResponse400
  | rbacGetRoleResponse401
  | rbacGetRoleResponse403
  | rbacGetRoleResponse404
  | rbacGetRoleResponse409
  | rbacGetRoleResponse500;

export type rbacGetRoleResponse = rbacGetRoleResponseComposite & {
  headers: Headers;
};

export const getRbacGetRoleUrl = (id: string) => {
  return `/v1/roles/${id}`;
};

export const rbacGetRole = async (
  id: string,
  options?: RequestInit,
): Promise<rbacGetRoleResponse> => {
  return customInstance<rbacGetRoleResponse>(getRbacGetRoleUrl(id), {
    ...options,
    method: "GET",
  });
};

export const getRbacGetRoleQueryKey = (id: string) => {
  return [`/v1/roles/${id}`] as const;
};

export const getRbacGetRoleInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof rbacGetRole>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof rbacGetRole>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getRbacGetRoleQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof rbacGetRole>>> = ({
    signal,
  }) => rbacGetRole(id, { signal, ...requestOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof rbacGetRole>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type RbacGetRoleInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof rbacGetRole>>
>;
export type RbacGetRoleInfiniteQueryError =
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | ConflictError
  | InternalServerError;

export function useRbacGetRoleInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof rbacGetRole>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  id: string,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof rbacGetRole>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof rbacGetRole>>,
          TError,
          Awaited<ReturnType<typeof rbacGetRole>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useRbacGetRoleInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof rbacGetRole>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof rbacGetRole>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof rbacGetRole>>,
          TError,
          Awaited<ReturnType<typeof rbacGetRole>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useRbacGetRoleInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof rbacGetRole>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof rbacGetRole>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary get_role rbac
 */

export function useRbacGetRoleInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof rbacGetRole>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof rbacGetRole>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getRbacGetRoleInfiniteQueryOptions(id, options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getRbacGetRoleQueryOptions = <
  TData = Awaited<ReturnType<typeof rbacGetRole>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof rbacGetRole>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getRbacGetRoleQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof rbacGetRole>>> = ({
    signal,
  }) => rbacGetRole(id, { signal, ...requestOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof rbacGetRole>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type RbacGetRoleQueryResult = NonNullable<
  Awaited<ReturnType<typeof rbacGetRole>>
>;
export type RbacGetRoleQueryError =
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | ConflictError
  | InternalServerError;

export function useRbacGetRole<
  TData = Awaited<ReturnType<typeof rbacGetRole>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof rbacGetRole>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof rbacGetRole>>,
          TError,
          Awaited<ReturnType<typeof rbacGetRole>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useRbacGetRole<
  TData = Awaited<ReturnType<typeof rbacGetRole>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof rbacGetRole>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof rbacGetRole>>,
          TError,
          Awaited<ReturnType<typeof rbacGetRole>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useRbacGetRole<
  TData = Awaited<ReturnType<typeof rbacGetRole>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof rbacGetRole>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary get_role rbac
 */

export function useRbacGetRole<
  TData = Awaited<ReturnType<typeof rbacGetRole>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof rbacGetRole>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getRbacGetRoleQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Update role
 * @summary update_role rbac
 */
export type rbacUpdateRoleResponse200 = {
  data: RoleResponse;
  status: 200;
};

export type rbacUpdateRoleResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type rbacUpdateRoleResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type rbacUpdateRoleResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type rbacUpdateRoleResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type rbacUpdateRoleResponse409 = {
  data: ConflictError;
  status: 409;
};

export type rbacUpdateRoleResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type rbacUpdateRoleResponseComposite =
  | rbacUpdateRoleResponse200
  | rbacUpdateRoleResponse400
  | rbacUpdateRoleResponse401
  | rbacUpdateRoleResponse403
  | rbacUpdateRoleResponse404
  | rbacUpdateRoleResponse409
  | rbacUpdateRoleResponse500;

export type rbacUpdateRoleResponse = rbacUpdateRoleResponseComposite & {
  headers: Headers;
};

export const getRbacUpdateRoleUrl = (id: string) => {
  return `/v1/roles/${id}`;
};

export const rbacUpdateRole = async (
  id: string,
  updateRoleRequestBody: UpdateRoleRequestBody,
  options?: RequestInit,
): Promise<rbacUpdateRoleResponse> => {
  return customInstance<rbacUpdateRoleResponse>(getRbacUpdateRoleUrl(id), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(updateRoleRequestBody),
  });
};

export const getRbacUpdateRoleMutationOptions = <
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof rbacUpdateRole>>,
    TError,
    { id: string; data: UpdateRoleRequestBody },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof rbacUpdateRole>>,
  TError,
  { id: string; data: UpdateRoleRequestBody },
  TContext
> => {
  const mutationKey = ["rbacUpdateRole"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof rbacUpdateRole>>,
    { id: string; data: UpdateRoleRequestBody }
  > = (props) => {
    const { id, data } = props ?? {};

    return rbacUpdateRole(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type RbacUpdateRoleMutationResult = NonNullable<
  Awaited<ReturnType<typeof rbacUpdateRole>>
>;
export type RbacUpdateRoleMutationBody = UpdateRoleRequestBody;
export type RbacUpdateRoleMutationError =
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | ConflictError
  | InternalServerError;

/**
 * @summary update_role rbac
 */
export const useRbacUpdateRole = <
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof rbacUpdateRole>>,
    TError,
    { id: string; data: UpdateRoleRequestBody },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof rbacUpdateRole>>,
  TError,
  { id: string; data: UpdateRoleRequestBody },
  TContext
> => {
  const mutationOptions = getRbacUpdateRoleMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * List role permissions
 * @summary list_role_permissions rbac
 */
export type rbacListRolePermissionsResponse200 = {
  data: ListRolePermissionsResponseBody;
  status: 200;
};

export type rbacListRolePermissionsResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type rbacListRolePermissionsResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type rbacListRolePermissionsResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type rbacListRolePermissionsResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type rbacListRolePermissionsResponse409 = {
  data: ConflictError;
  status: 409;
};

export type rbacListRolePermissionsResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type rbacListRolePermissionsResponseComposite =
  | rbacListRolePermissionsResponse200
  | rbacListRolePermissionsResponse400
  | rbacListRolePermissionsResponse401
  | rbacListRolePermissionsResponse403
  | rbacListRolePermissionsResponse404
  | rbacListRolePermissionsResponse409
  | rbacListRolePermissionsResponse500;

export type rbacListRolePermissionsResponse =
  rbacListRolePermissionsResponseComposite & {
    headers: Headers;
  };

export const getRbacListRolePermissionsUrl = (id: string) => {
  return `/v1/roles/${id}/permissions`;
};

export const rbacListRolePermissions = async (
  id: string,
  options?: RequestInit,
): Promise<rbacListRolePermissionsResponse> => {
  return customInstance<rbacListRolePermissionsResponse>(
    getRbacListRolePermissionsUrl(id),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getRbacListRolePermissionsQueryKey = (id: string) => {
  return [`/v1/roles/${id}/permissions`] as const;
};

export const getRbacListRolePermissionsInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof rbacListRolePermissions>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof rbacListRolePermissions>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getRbacListRolePermissionsQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof rbacListRolePermissions>>
  > = ({ signal }) =>
    rbacListRolePermissions(id, { signal, ...requestOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof rbacListRolePermissions>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type RbacListRolePermissionsInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof rbacListRolePermissions>>
>;
export type RbacListRolePermissionsInfiniteQueryError =
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | ConflictError
  | InternalServerError;

export function useRbacListRolePermissionsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof rbacListRolePermissions>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  id: string,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof rbacListRolePermissions>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof rbacListRolePermissions>>,
          TError,
          Awaited<ReturnType<typeof rbacListRolePermissions>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useRbacListRolePermissionsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof rbacListRolePermissions>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof rbacListRolePermissions>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof rbacListRolePermissions>>,
          TError,
          Awaited<ReturnType<typeof rbacListRolePermissions>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useRbacListRolePermissionsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof rbacListRolePermissions>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof rbacListRolePermissions>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary list_role_permissions rbac
 */

export function useRbacListRolePermissionsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof rbacListRolePermissions>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof rbacListRolePermissions>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getRbacListRolePermissionsInfiniteQueryOptions(
    id,
    options,
  );

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getRbacListRolePermissionsQueryOptions = <
  TData = Awaited<ReturnType<typeof rbacListRolePermissions>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof rbacListRolePermissions>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getRbacListRolePermissionsQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof rbacListRolePermissions>>
  > = ({ signal }) =>
    rbacListRolePermissions(id, { signal, ...requestOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof rbacListRolePermissions>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type RbacListRolePermissionsQueryResult = NonNullable<
  Awaited<ReturnType<typeof rbacListRolePermissions>>
>;
export type RbacListRolePermissionsQueryError =
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | ConflictError
  | InternalServerError;

export function useRbacListRolePermissions<
  TData = Awaited<ReturnType<typeof rbacListRolePermissions>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof rbacListRolePermissions>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof rbacListRolePermissions>>,
          TError,
          Awaited<ReturnType<typeof rbacListRolePermissions>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useRbacListRolePermissions<
  TData = Awaited<ReturnType<typeof rbacListRolePermissions>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof rbacListRolePermissions>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof rbacListRolePermissions>>,
          TError,
          Awaited<ReturnType<typeof rbacListRolePermissions>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useRbacListRolePermissions<
  TData = Awaited<ReturnType<typeof rbacListRolePermissions>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof rbacListRolePermissions>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary list_role_permissions rbac
 */

export function useRbacListRolePermissions<
  TData = Awaited<ReturnType<typeof rbacListRolePermissions>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof rbacListRolePermissions>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getRbacListRolePermissionsQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Add permission to role
 * @summary add_role_permission rbac
 */
export type rbacAddRolePermissionResponse200 = {
  data: SendResponseBody;
  status: 200;
};

export type rbacAddRolePermissionResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type rbacAddRolePermissionResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type rbacAddRolePermissionResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type rbacAddRolePermissionResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type rbacAddRolePermissionResponse409 = {
  data: ConflictError;
  status: 409;
};

export type rbacAddRolePermissionResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type rbacAddRolePermissionResponseComposite =
  | rbacAddRolePermissionResponse200
  | rbacAddRolePermissionResponse400
  | rbacAddRolePermissionResponse401
  | rbacAddRolePermissionResponse403
  | rbacAddRolePermissionResponse404
  | rbacAddRolePermissionResponse409
  | rbacAddRolePermissionResponse500;

export type rbacAddRolePermissionResponse =
  rbacAddRolePermissionResponseComposite & {
    headers: Headers;
  };

export const getRbacAddRolePermissionUrl = (id: string) => {
  return `/v1/roles/${id}/permissions`;
};

export const rbacAddRolePermission = async (
  id: string,
  addRolePermissionRequestBody: AddRolePermissionRequestBody,
  options?: RequestInit,
): Promise<rbacAddRolePermissionResponse> => {
  return customInstance<rbacAddRolePermissionResponse>(
    getRbacAddRolePermissionUrl(id),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(addRolePermissionRequestBody),
    },
  );
};

export const getRbacAddRolePermissionMutationOptions = <
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof rbacAddRolePermission>>,
    TError,
    { id: string; data: AddRolePermissionRequestBody },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof rbacAddRolePermission>>,
  TError,
  { id: string; data: AddRolePermissionRequestBody },
  TContext
> => {
  const mutationKey = ["rbacAddRolePermission"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof rbacAddRolePermission>>,
    { id: string; data: AddRolePermissionRequestBody }
  > = (props) => {
    const { id, data } = props ?? {};

    return rbacAddRolePermission(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type RbacAddRolePermissionMutationResult = NonNullable<
  Awaited<ReturnType<typeof rbacAddRolePermission>>
>;
export type RbacAddRolePermissionMutationBody = AddRolePermissionRequestBody;
export type RbacAddRolePermissionMutationError =
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | ConflictError
  | InternalServerError;

/**
 * @summary add_role_permission rbac
 */
export const useRbacAddRolePermission = <
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof rbacAddRolePermission>>,
    TError,
    { id: string; data: AddRolePermissionRequestBody },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof rbacAddRolePermission>>,
  TError,
  { id: string; data: AddRolePermissionRequestBody },
  TContext
> => {
  const mutationOptions = getRbacAddRolePermissionMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Remove permission from role
 * @summary remove_role_permission rbac
 */
export type rbacRemoveRolePermissionResponse204 = {
  data: void;
  status: 204;
};

export type rbacRemoveRolePermissionResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type rbacRemoveRolePermissionResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type rbacRemoveRolePermissionResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type rbacRemoveRolePermissionResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type rbacRemoveRolePermissionResponse409 = {
  data: ConflictError;
  status: 409;
};

export type rbacRemoveRolePermissionResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type rbacRemoveRolePermissionResponseComposite =
  | rbacRemoveRolePermissionResponse204
  | rbacRemoveRolePermissionResponse400
  | rbacRemoveRolePermissionResponse401
  | rbacRemoveRolePermissionResponse403
  | rbacRemoveRolePermissionResponse404
  | rbacRemoveRolePermissionResponse409
  | rbacRemoveRolePermissionResponse500;

export type rbacRemoveRolePermissionResponse =
  rbacRemoveRolePermissionResponseComposite & {
    headers: Headers;
  };

export const getRbacRemoveRolePermissionUrl = (
  id: string,
  permissionId: string,
) => {
  return `/v1/roles/${id}/permissions/${permissionId}`;
};

export const rbacRemoveRolePermission = async (
  id: string,
  permissionId: string,
  options?: RequestInit,
): Promise<rbacRemoveRolePermissionResponse> => {
  return customInstance<rbacRemoveRolePermissionResponse>(
    getRbacRemoveRolePermissionUrl(id, permissionId),
    {
      ...options,
      method: "DELETE",
    },
  );
};

export const getRbacRemoveRolePermissionMutationOptions = <
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof rbacRemoveRolePermission>>,
    TError,
    { id: string; permissionId: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof rbacRemoveRolePermission>>,
  TError,
  { id: string; permissionId: string },
  TContext
> => {
  const mutationKey = ["rbacRemoveRolePermission"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof rbacRemoveRolePermission>>,
    { id: string; permissionId: string }
  > = (props) => {
    const { id, permissionId } = props ?? {};

    return rbacRemoveRolePermission(id, permissionId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type RbacRemoveRolePermissionMutationResult = NonNullable<
  Awaited<ReturnType<typeof rbacRemoveRolePermission>>
>;

export type RbacRemoveRolePermissionMutationError =
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | ConflictError
  | InternalServerError;

/**
 * @summary remove_role_permission rbac
 */
export const useRbacRemoveRolePermission = <
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | ConflictError
    | InternalServerError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof rbacRemoveRolePermission>>,
    TError,
    { id: string; permissionId: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof rbacRemoveRolePermission>>,
  TError,
  { id: string; permissionId: string },
  TContext
> => {
  const mutationOptions = getRbacRemoveRolePermissionMutationOptions(options);

  return useMutation(mutationOptions);
};
