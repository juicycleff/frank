/**
 * Generated by orval v7.7.0 üç∫
 * Do not edit manually.
 * Frank Authentication Server
 * A comprehensive authentication server with OAuth2, MFA, Passkeys, SSO, and more
 * OpenAPI spec version: 1.0.0
 */
import { useInfiniteQuery, useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  BadRequestError,
  EmailResponseBody,
  ForbiddenError,
  InternalServerError,
  MagicLinkRequest,
  MagicLinkResponseBody,
  MethodsResponseBody2,
  NotFoundError,
  PasswordlessEmailRequest,
  PasswordlessSMSRequest,
  PasswordlessVerifyRequest,
  UnauthorizedError,
  VerifyResponseBody2,
} from "../../model";

import { customInstance } from "../../mutator/custom-instance";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * Initiate passwordless email authentication
 * @summary email passwordless
 */
export type passwordlessEmailResponse200 = {
  data: EmailResponseBody;
  status: 200;
};

export type passwordlessEmailResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type passwordlessEmailResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type passwordlessEmailResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type passwordlessEmailResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type passwordlessEmailResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type passwordlessEmailResponseComposite =
  | passwordlessEmailResponse200
  | passwordlessEmailResponse400
  | passwordlessEmailResponse401
  | passwordlessEmailResponse403
  | passwordlessEmailResponse404
  | passwordlessEmailResponse500;

export type passwordlessEmailResponse = passwordlessEmailResponseComposite & {
  headers: Headers;
};

export const getPasswordlessEmailUrl = () => {
  return `/v1/auth/passwordless/email`;
};

export const passwordlessEmail = async (
  passwordlessEmailRequest: PasswordlessEmailRequest,
  options?: RequestInit,
): Promise<passwordlessEmailResponse> => {
  return customInstance<passwordlessEmailResponse>(getPasswordlessEmailUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(passwordlessEmailRequest),
  });
};

export const getPasswordlessEmailMutationOptions = <
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof passwordlessEmail>>,
    TError,
    { data: PasswordlessEmailRequest },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof passwordlessEmail>>,
  TError,
  { data: PasswordlessEmailRequest },
  TContext
> => {
  const mutationKey = ["passwordlessEmail"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof passwordlessEmail>>,
    { data: PasswordlessEmailRequest }
  > = (props) => {
    const { data } = props ?? {};

    return passwordlessEmail(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PasswordlessEmailMutationResult = NonNullable<
  Awaited<ReturnType<typeof passwordlessEmail>>
>;
export type PasswordlessEmailMutationBody = PasswordlessEmailRequest;
export type PasswordlessEmailMutationError =
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | InternalServerError;

/**
 * @summary email passwordless
 */
export const usePasswordlessEmail = <
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof passwordlessEmail>>,
    TError,
    { data: PasswordlessEmailRequest },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof passwordlessEmail>>,
  TError,
  { data: PasswordlessEmailRequest },
  TContext
> => {
  const mutationOptions = getPasswordlessEmailMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Generate magic link for passwordless login
 * @summary magic_link passwordless
 */
export type passwordlessMagicLinkResponse200 = {
  data: MagicLinkResponseBody;
  status: 200;
};

export type passwordlessMagicLinkResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type passwordlessMagicLinkResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type passwordlessMagicLinkResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type passwordlessMagicLinkResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type passwordlessMagicLinkResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type passwordlessMagicLinkResponseComposite =
  | passwordlessMagicLinkResponse200
  | passwordlessMagicLinkResponse400
  | passwordlessMagicLinkResponse401
  | passwordlessMagicLinkResponse403
  | passwordlessMagicLinkResponse404
  | passwordlessMagicLinkResponse500;

export type passwordlessMagicLinkResponse =
  passwordlessMagicLinkResponseComposite & {
    headers: Headers;
  };

export const getPasswordlessMagicLinkUrl = () => {
  return `/v1/auth/passwordless/magic-link`;
};

export const passwordlessMagicLink = async (
  magicLinkRequest: MagicLinkRequest,
  options?: RequestInit,
): Promise<passwordlessMagicLinkResponse> => {
  return customInstance<passwordlessMagicLinkResponse>(
    getPasswordlessMagicLinkUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(magicLinkRequest),
    },
  );
};

export const getPasswordlessMagicLinkMutationOptions = <
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof passwordlessMagicLink>>,
    TError,
    { data: MagicLinkRequest },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof passwordlessMagicLink>>,
  TError,
  { data: MagicLinkRequest },
  TContext
> => {
  const mutationKey = ["passwordlessMagicLink"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof passwordlessMagicLink>>,
    { data: MagicLinkRequest }
  > = (props) => {
    const { data } = props ?? {};

    return passwordlessMagicLink(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PasswordlessMagicLinkMutationResult = NonNullable<
  Awaited<ReturnType<typeof passwordlessMagicLink>>
>;
export type PasswordlessMagicLinkMutationBody = MagicLinkRequest;
export type PasswordlessMagicLinkMutationError =
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | InternalServerError;

/**
 * @summary magic_link passwordless
 */
export const usePasswordlessMagicLink = <
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof passwordlessMagicLink>>,
    TError,
    { data: MagicLinkRequest },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof passwordlessMagicLink>>,
  TError,
  { data: MagicLinkRequest },
  TContext
> => {
  const mutationOptions = getPasswordlessMagicLinkMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Get available passwordless authentication methods
 * @summary methods passwordless
 */
export type passwordlessMethodsResponse200 = {
  data: MethodsResponseBody2;
  status: 200;
};

export type passwordlessMethodsResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type passwordlessMethodsResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type passwordlessMethodsResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type passwordlessMethodsResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type passwordlessMethodsResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type passwordlessMethodsResponseComposite =
  | passwordlessMethodsResponse200
  | passwordlessMethodsResponse400
  | passwordlessMethodsResponse401
  | passwordlessMethodsResponse403
  | passwordlessMethodsResponse404
  | passwordlessMethodsResponse500;

export type passwordlessMethodsResponse =
  passwordlessMethodsResponseComposite & {
    headers: Headers;
  };

export const getPasswordlessMethodsUrl = () => {
  return `/v1/auth/passwordless/methods`;
};

export const passwordlessMethods = async (
  options?: RequestInit,
): Promise<passwordlessMethodsResponse> => {
  return customInstance<passwordlessMethodsResponse>(
    getPasswordlessMethodsUrl(),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getPasswordlessMethodsQueryKey = () => {
  return [`/v1/auth/passwordless/methods`] as const;
};

export const getPasswordlessMethodsInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof passwordlessMethods>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
>(options?: {
  query?: Partial<
    UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof passwordlessMethods>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getPasswordlessMethodsQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof passwordlessMethods>>
  > = ({ signal }) => passwordlessMethods({ signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof passwordlessMethods>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type PasswordlessMethodsInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof passwordlessMethods>>
>;
export type PasswordlessMethodsInfiniteQueryError =
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | InternalServerError;

export function usePasswordlessMethodsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof passwordlessMethods>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
>(options: {
  query: Partial<
    UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof passwordlessMethods>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof passwordlessMethods>>,
        TError,
        Awaited<ReturnType<typeof passwordlessMethods>>
      >,
      "initialData"
    >;
  request?: SecondParameter<typeof customInstance>;
}): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function usePasswordlessMethodsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof passwordlessMethods>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
>(options?: {
  query?: Partial<
    UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof passwordlessMethods>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof passwordlessMethods>>,
        TError,
        Awaited<ReturnType<typeof passwordlessMethods>>
      >,
      "initialData"
    >;
  request?: SecondParameter<typeof customInstance>;
}): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function usePasswordlessMethodsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof passwordlessMethods>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
>(options?: {
  query?: Partial<
    UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof passwordlessMethods>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary methods passwordless
 */

export function usePasswordlessMethodsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof passwordlessMethods>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
>(options?: {
  query?: Partial<
    UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof passwordlessMethods>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getPasswordlessMethodsInfiniteQueryOptions(options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getPasswordlessMethodsQueryOptions = <
  TData = Awaited<ReturnType<typeof passwordlessMethods>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof passwordlessMethods>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getPasswordlessMethodsQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof passwordlessMethods>>
  > = ({ signal }) => passwordlessMethods({ signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof passwordlessMethods>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type PasswordlessMethodsQueryResult = NonNullable<
  Awaited<ReturnType<typeof passwordlessMethods>>
>;
export type PasswordlessMethodsQueryError =
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | InternalServerError;

export function usePasswordlessMethods<
  TData = Awaited<ReturnType<typeof passwordlessMethods>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof passwordlessMethods>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof passwordlessMethods>>,
        TError,
        Awaited<ReturnType<typeof passwordlessMethods>>
      >,
      "initialData"
    >;
  request?: SecondParameter<typeof customInstance>;
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function usePasswordlessMethods<
  TData = Awaited<ReturnType<typeof passwordlessMethods>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof passwordlessMethods>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof passwordlessMethods>>,
        TError,
        Awaited<ReturnType<typeof passwordlessMethods>>
      >,
      "initialData"
    >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function usePasswordlessMethods<
  TData = Awaited<ReturnType<typeof passwordlessMethods>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof passwordlessMethods>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary methods passwordless
 */

export function usePasswordlessMethods<
  TData = Awaited<ReturnType<typeof passwordlessMethods>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof passwordlessMethods>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getPasswordlessMethodsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Initiate passwordless SMS authentication
 * @summary sms passwordless
 */
export type passwordlessSmsResponse200 = {
  data: EmailResponseBody;
  status: 200;
};

export type passwordlessSmsResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type passwordlessSmsResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type passwordlessSmsResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type passwordlessSmsResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type passwordlessSmsResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type passwordlessSmsResponseComposite =
  | passwordlessSmsResponse200
  | passwordlessSmsResponse400
  | passwordlessSmsResponse401
  | passwordlessSmsResponse403
  | passwordlessSmsResponse404
  | passwordlessSmsResponse500;

export type passwordlessSmsResponse = passwordlessSmsResponseComposite & {
  headers: Headers;
};

export const getPasswordlessSmsUrl = () => {
  return `/v1/auth/passwordless/sms`;
};

export const passwordlessSms = async (
  passwordlessSMSRequest: PasswordlessSMSRequest,
  options?: RequestInit,
): Promise<passwordlessSmsResponse> => {
  return customInstance<passwordlessSmsResponse>(getPasswordlessSmsUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(passwordlessSMSRequest),
  });
};

export const getPasswordlessSmsMutationOptions = <
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof passwordlessSms>>,
    TError,
    { data: PasswordlessSMSRequest },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof passwordlessSms>>,
  TError,
  { data: PasswordlessSMSRequest },
  TContext
> => {
  const mutationKey = ["passwordlessSms"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof passwordlessSms>>,
    { data: PasswordlessSMSRequest }
  > = (props) => {
    const { data } = props ?? {};

    return passwordlessSms(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PasswordlessSmsMutationResult = NonNullable<
  Awaited<ReturnType<typeof passwordlessSms>>
>;
export type PasswordlessSmsMutationBody = PasswordlessSMSRequest;
export type PasswordlessSmsMutationError =
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | InternalServerError;

/**
 * @summary sms passwordless
 */
export const usePasswordlessSms = <
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof passwordlessSms>>,
    TError,
    { data: PasswordlessSMSRequest },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof passwordlessSms>>,
  TError,
  { data: PasswordlessSMSRequest },
  TContext
> => {
  const mutationOptions = getPasswordlessSmsMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Verify passwordless authentication
 * @summary verify passwordless
 */
export type passwordlessVerifyResponse200 = {
  data: VerifyResponseBody2;
  status: 200;
};

export type passwordlessVerifyResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type passwordlessVerifyResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type passwordlessVerifyResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type passwordlessVerifyResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type passwordlessVerifyResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type passwordlessVerifyResponseComposite =
  | passwordlessVerifyResponse200
  | passwordlessVerifyResponse400
  | passwordlessVerifyResponse401
  | passwordlessVerifyResponse403
  | passwordlessVerifyResponse404
  | passwordlessVerifyResponse500;

export type passwordlessVerifyResponse = passwordlessVerifyResponseComposite & {
  headers: Headers;
};

export const getPasswordlessVerifyUrl = () => {
  return `/v1/auth/passwordless/verify`;
};

export const passwordlessVerify = async (
  passwordlessVerifyRequest: PasswordlessVerifyRequest,
  options?: RequestInit,
): Promise<passwordlessVerifyResponse> => {
  return customInstance<passwordlessVerifyResponse>(
    getPasswordlessVerifyUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(passwordlessVerifyRequest),
    },
  );
};

export const getPasswordlessVerifyMutationOptions = <
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof passwordlessVerify>>,
    TError,
    { data: PasswordlessVerifyRequest },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof passwordlessVerify>>,
  TError,
  { data: PasswordlessVerifyRequest },
  TContext
> => {
  const mutationKey = ["passwordlessVerify"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof passwordlessVerify>>,
    { data: PasswordlessVerifyRequest }
  > = (props) => {
    const { data } = props ?? {};

    return passwordlessVerify(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PasswordlessVerifyMutationResult = NonNullable<
  Awaited<ReturnType<typeof passwordlessVerify>>
>;
export type PasswordlessVerifyMutationBody = PasswordlessVerifyRequest;
export type PasswordlessVerifyMutationError =
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | InternalServerError;

/**
 * @summary verify passwordless
 */
export const usePasswordlessVerify = <
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof passwordlessVerify>>,
    TError,
    { data: PasswordlessVerifyRequest },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof passwordlessVerify>>,
  TError,
  { data: PasswordlessVerifyRequest },
  TContext
> => {
  const mutationOptions = getPasswordlessVerifyMutationOptions(options);

  return useMutation(mutationOptions);
};
