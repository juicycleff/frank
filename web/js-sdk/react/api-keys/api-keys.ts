/**
 * Generated by orval v7.7.0 üç∫
 * Do not edit manually.
 * Frank Authentication Server
 * A comprehensive authentication server with OAuth2, MFA, Passkeys, SSO, and more
 * OpenAPI spec version: 1.0.0
 */
import { useInfiniteQuery, useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  APIKeyResponse,
  APIKeyWithSecretResponse,
  ApiKeysListParams,
  ApiKeysValidateParams,
  BadRequestError,
  CreateRequestBody,
  ForbiddenError,
  InternalServerError,
  ListResponseBody,
  NotFoundError,
  UnauthorizedError,
  UpdateRequestBody,
  ValidateResponseBody,
} from "../../model";

import { customInstance } from "../../mutator/custom-instance";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * List API keys
 * @summary list api_keys
 */
export type apiKeysListResponse200 = {
  data: ListResponseBody;
  status: 200;
};

export type apiKeysListResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type apiKeysListResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type apiKeysListResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type apiKeysListResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type apiKeysListResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type apiKeysListResponseComposite =
  | apiKeysListResponse200
  | apiKeysListResponse400
  | apiKeysListResponse401
  | apiKeysListResponse403
  | apiKeysListResponse404
  | apiKeysListResponse500;

export type apiKeysListResponse = apiKeysListResponseComposite & {
  headers: Headers;
};

export const getApiKeysListUrl = (params?: ApiKeysListParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/v1/api-keys?${stringifiedParams}`
    : `/v1/api-keys`;
};

export const apiKeysList = async (
  params?: ApiKeysListParams,
  options?: RequestInit,
): Promise<apiKeysListResponse> => {
  return customInstance<apiKeysListResponse>(getApiKeysListUrl(params), {
    ...options,
    method: "GET",
  });
};

export const getApiKeysListQueryKey = (params?: ApiKeysListParams) => {
  return [`/v1/api-keys`, ...(params ? [params] : [])] as const;
};

export const getApiKeysListInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof apiKeysList>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
>(
  params?: ApiKeysListParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof apiKeysList>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getApiKeysListQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof apiKeysList>>> = ({
    signal,
  }) => apiKeysList(params, { signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof apiKeysList>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ApiKeysListInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof apiKeysList>>
>;
export type ApiKeysListInfiniteQueryError =
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | InternalServerError;

export function useApiKeysListInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof apiKeysList>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
>(
  params: undefined | ApiKeysListParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof apiKeysList>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiKeysList>>,
          TError,
          Awaited<ReturnType<typeof apiKeysList>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useApiKeysListInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof apiKeysList>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
>(
  params?: ApiKeysListParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof apiKeysList>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiKeysList>>,
          TError,
          Awaited<ReturnType<typeof apiKeysList>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useApiKeysListInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof apiKeysList>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
>(
  params?: ApiKeysListParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof apiKeysList>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary list api_keys
 */

export function useApiKeysListInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof apiKeysList>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
>(
  params?: ApiKeysListParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof apiKeysList>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getApiKeysListInfiniteQueryOptions(params, options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiKeysListQueryOptions = <
  TData = Awaited<ReturnType<typeof apiKeysList>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
>(
  params?: ApiKeysListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof apiKeysList>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getApiKeysListQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof apiKeysList>>> = ({
    signal,
  }) => apiKeysList(params, { signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof apiKeysList>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ApiKeysListQueryResult = NonNullable<
  Awaited<ReturnType<typeof apiKeysList>>
>;
export type ApiKeysListQueryError =
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | InternalServerError;

export function useApiKeysList<
  TData = Awaited<ReturnType<typeof apiKeysList>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
>(
  params: undefined | ApiKeysListParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof apiKeysList>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiKeysList>>,
          TError,
          Awaited<ReturnType<typeof apiKeysList>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useApiKeysList<
  TData = Awaited<ReturnType<typeof apiKeysList>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
>(
  params?: ApiKeysListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof apiKeysList>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiKeysList>>,
          TError,
          Awaited<ReturnType<typeof apiKeysList>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useApiKeysList<
  TData = Awaited<ReturnType<typeof apiKeysList>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
>(
  params?: ApiKeysListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof apiKeysList>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary list api_keys
 */

export function useApiKeysList<
  TData = Awaited<ReturnType<typeof apiKeysList>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
>(
  params?: ApiKeysListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof apiKeysList>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getApiKeysListQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Create a new API key
 * @summary create api_keys
 */
export type apiKeysCreateResponse201 = {
  data: APIKeyWithSecretResponse;
  status: 201;
};

export type apiKeysCreateResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type apiKeysCreateResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type apiKeysCreateResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type apiKeysCreateResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type apiKeysCreateResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type apiKeysCreateResponseComposite =
  | apiKeysCreateResponse201
  | apiKeysCreateResponse400
  | apiKeysCreateResponse401
  | apiKeysCreateResponse403
  | apiKeysCreateResponse404
  | apiKeysCreateResponse500;

export type apiKeysCreateResponse = apiKeysCreateResponseComposite & {
  headers: Headers;
};

export const getApiKeysCreateUrl = () => {
  return `/v1/api-keys`;
};

export const apiKeysCreate = async (
  createRequestBody: CreateRequestBody,
  options?: RequestInit,
): Promise<apiKeysCreateResponse> => {
  return customInstance<apiKeysCreateResponse>(getApiKeysCreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(createRequestBody),
  });
};

export const getApiKeysCreateMutationOptions = <
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof apiKeysCreate>>,
    TError,
    { data: CreateRequestBody },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof apiKeysCreate>>,
  TError,
  { data: CreateRequestBody },
  TContext
> => {
  const mutationKey = ["apiKeysCreate"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof apiKeysCreate>>,
    { data: CreateRequestBody }
  > = (props) => {
    const { data } = props ?? {};

    return apiKeysCreate(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ApiKeysCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof apiKeysCreate>>
>;
export type ApiKeysCreateMutationBody = CreateRequestBody;
export type ApiKeysCreateMutationError =
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | InternalServerError;

/**
 * @summary create api_keys
 */
export const useApiKeysCreate = <
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof apiKeysCreate>>,
    TError,
    { data: CreateRequestBody },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof apiKeysCreate>>,
  TError,
  { data: CreateRequestBody },
  TContext
> => {
  const mutationOptions = getApiKeysCreateMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Validate API key
 * @summary validate api_keys
 */
export type apiKeysValidateResponse200 = {
  data: ValidateResponseBody;
  status: 200;
};

export type apiKeysValidateResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type apiKeysValidateResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type apiKeysValidateResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type apiKeysValidateResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type apiKeysValidateResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type apiKeysValidateResponseComposite =
  | apiKeysValidateResponse200
  | apiKeysValidateResponse400
  | apiKeysValidateResponse401
  | apiKeysValidateResponse403
  | apiKeysValidateResponse404
  | apiKeysValidateResponse500;

export type apiKeysValidateResponse = apiKeysValidateResponseComposite & {
  headers: Headers;
};

export const getApiKeysValidateUrl = (params: ApiKeysValidateParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/v1/api-keys/validate?${stringifiedParams}`
    : `/v1/api-keys/validate`;
};

export const apiKeysValidate = async (
  params: ApiKeysValidateParams,
  options?: RequestInit,
): Promise<apiKeysValidateResponse> => {
  return customInstance<apiKeysValidateResponse>(
    getApiKeysValidateUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getApiKeysValidateQueryKey = (params: ApiKeysValidateParams) => {
  return [`/v1/api-keys/validate`, ...(params ? [params] : [])] as const;
};

export const getApiKeysValidateInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof apiKeysValidate>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
>(
  params: ApiKeysValidateParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof apiKeysValidate>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getApiKeysValidateQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof apiKeysValidate>>> = ({
    signal,
  }) => apiKeysValidate(params, { signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof apiKeysValidate>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ApiKeysValidateInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof apiKeysValidate>>
>;
export type ApiKeysValidateInfiniteQueryError =
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | InternalServerError;

export function useApiKeysValidateInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof apiKeysValidate>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
>(
  params: ApiKeysValidateParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof apiKeysValidate>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiKeysValidate>>,
          TError,
          Awaited<ReturnType<typeof apiKeysValidate>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useApiKeysValidateInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof apiKeysValidate>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
>(
  params: ApiKeysValidateParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof apiKeysValidate>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiKeysValidate>>,
          TError,
          Awaited<ReturnType<typeof apiKeysValidate>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useApiKeysValidateInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof apiKeysValidate>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
>(
  params: ApiKeysValidateParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof apiKeysValidate>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary validate api_keys
 */

export function useApiKeysValidateInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof apiKeysValidate>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
>(
  params: ApiKeysValidateParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof apiKeysValidate>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getApiKeysValidateInfiniteQueryOptions(params, options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiKeysValidateQueryOptions = <
  TData = Awaited<ReturnType<typeof apiKeysValidate>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
>(
  params: ApiKeysValidateParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof apiKeysValidate>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getApiKeysValidateQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof apiKeysValidate>>> = ({
    signal,
  }) => apiKeysValidate(params, { signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof apiKeysValidate>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ApiKeysValidateQueryResult = NonNullable<
  Awaited<ReturnType<typeof apiKeysValidate>>
>;
export type ApiKeysValidateQueryError =
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | InternalServerError;

export function useApiKeysValidate<
  TData = Awaited<ReturnType<typeof apiKeysValidate>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
>(
  params: ApiKeysValidateParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof apiKeysValidate>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiKeysValidate>>,
          TError,
          Awaited<ReturnType<typeof apiKeysValidate>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useApiKeysValidate<
  TData = Awaited<ReturnType<typeof apiKeysValidate>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
>(
  params: ApiKeysValidateParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof apiKeysValidate>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiKeysValidate>>,
          TError,
          Awaited<ReturnType<typeof apiKeysValidate>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useApiKeysValidate<
  TData = Awaited<ReturnType<typeof apiKeysValidate>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
>(
  params: ApiKeysValidateParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof apiKeysValidate>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary validate api_keys
 */

export function useApiKeysValidate<
  TData = Awaited<ReturnType<typeof apiKeysValidate>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
>(
  params: ApiKeysValidateParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof apiKeysValidate>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getApiKeysValidateQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Delete API key
 * @summary delete api_keys
 */
export type apiKeysDeleteResponse204 = {
  data: void;
  status: 204;
};

export type apiKeysDeleteResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type apiKeysDeleteResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type apiKeysDeleteResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type apiKeysDeleteResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type apiKeysDeleteResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type apiKeysDeleteResponseComposite =
  | apiKeysDeleteResponse204
  | apiKeysDeleteResponse400
  | apiKeysDeleteResponse401
  | apiKeysDeleteResponse403
  | apiKeysDeleteResponse404
  | apiKeysDeleteResponse500;

export type apiKeysDeleteResponse = apiKeysDeleteResponseComposite & {
  headers: Headers;
};

export const getApiKeysDeleteUrl = (id: string) => {
  return `/v1/api-keys/${id}`;
};

export const apiKeysDelete = async (
  id: string,
  options?: RequestInit,
): Promise<apiKeysDeleteResponse> => {
  return customInstance<apiKeysDeleteResponse>(getApiKeysDeleteUrl(id), {
    ...options,
    method: "DELETE",
  });
};

export const getApiKeysDeleteMutationOptions = <
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof apiKeysDelete>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof apiKeysDelete>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["apiKeysDelete"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof apiKeysDelete>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return apiKeysDelete(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ApiKeysDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof apiKeysDelete>>
>;

export type ApiKeysDeleteMutationError =
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | InternalServerError;

/**
 * @summary delete api_keys
 */
export const useApiKeysDelete = <
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof apiKeysDelete>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof apiKeysDelete>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getApiKeysDeleteMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Get API key by ID
 * @summary get api_keys
 */
export type apiKeysGetResponse200 = {
  data: APIKeyResponse;
  status: 200;
};

export type apiKeysGetResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type apiKeysGetResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type apiKeysGetResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type apiKeysGetResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type apiKeysGetResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type apiKeysGetResponseComposite =
  | apiKeysGetResponse200
  | apiKeysGetResponse400
  | apiKeysGetResponse401
  | apiKeysGetResponse403
  | apiKeysGetResponse404
  | apiKeysGetResponse500;

export type apiKeysGetResponse = apiKeysGetResponseComposite & {
  headers: Headers;
};

export const getApiKeysGetUrl = (id: string) => {
  return `/v1/api-keys/${id}`;
};

export const apiKeysGet = async (
  id: string,
  options?: RequestInit,
): Promise<apiKeysGetResponse> => {
  return customInstance<apiKeysGetResponse>(getApiKeysGetUrl(id), {
    ...options,
    method: "GET",
  });
};

export const getApiKeysGetQueryKey = (id: string) => {
  return [`/v1/api-keys/${id}`] as const;
};

export const getApiKeysGetInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof apiKeysGet>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof apiKeysGet>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getApiKeysGetQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof apiKeysGet>>> = ({
    signal,
  }) => apiKeysGet(id, { signal, ...requestOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof apiKeysGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ApiKeysGetInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof apiKeysGet>>
>;
export type ApiKeysGetInfiniteQueryError =
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | InternalServerError;

export function useApiKeysGetInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof apiKeysGet>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
>(
  id: string,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof apiKeysGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiKeysGet>>,
          TError,
          Awaited<ReturnType<typeof apiKeysGet>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useApiKeysGetInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof apiKeysGet>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof apiKeysGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiKeysGet>>,
          TError,
          Awaited<ReturnType<typeof apiKeysGet>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useApiKeysGetInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof apiKeysGet>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof apiKeysGet>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary get api_keys
 */

export function useApiKeysGetInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof apiKeysGet>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof apiKeysGet>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getApiKeysGetInfiniteQueryOptions(id, options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiKeysGetQueryOptions = <
  TData = Awaited<ReturnType<typeof apiKeysGet>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof apiKeysGet>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getApiKeysGetQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof apiKeysGet>>> = ({
    signal,
  }) => apiKeysGet(id, { signal, ...requestOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof apiKeysGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ApiKeysGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof apiKeysGet>>
>;
export type ApiKeysGetQueryError =
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | InternalServerError;

export function useApiKeysGet<
  TData = Awaited<ReturnType<typeof apiKeysGet>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof apiKeysGet>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiKeysGet>>,
          TError,
          Awaited<ReturnType<typeof apiKeysGet>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useApiKeysGet<
  TData = Awaited<ReturnType<typeof apiKeysGet>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof apiKeysGet>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiKeysGet>>,
          TError,
          Awaited<ReturnType<typeof apiKeysGet>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useApiKeysGet<
  TData = Awaited<ReturnType<typeof apiKeysGet>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof apiKeysGet>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary get api_keys
 */

export function useApiKeysGet<
  TData = Awaited<ReturnType<typeof apiKeysGet>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof apiKeysGet>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getApiKeysGetQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Update API key
 * @summary update api_keys
 */
export type apiKeysUpdateResponse200 = {
  data: APIKeyResponse;
  status: 200;
};

export type apiKeysUpdateResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type apiKeysUpdateResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type apiKeysUpdateResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type apiKeysUpdateResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type apiKeysUpdateResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type apiKeysUpdateResponseComposite =
  | apiKeysUpdateResponse200
  | apiKeysUpdateResponse400
  | apiKeysUpdateResponse401
  | apiKeysUpdateResponse403
  | apiKeysUpdateResponse404
  | apiKeysUpdateResponse500;

export type apiKeysUpdateResponse = apiKeysUpdateResponseComposite & {
  headers: Headers;
};

export const getApiKeysUpdateUrl = (id: string) => {
  return `/v1/api-keys/${id}`;
};

export const apiKeysUpdate = async (
  id: string,
  updateRequestBody: UpdateRequestBody,
  options?: RequestInit,
): Promise<apiKeysUpdateResponse> => {
  return customInstance<apiKeysUpdateResponse>(getApiKeysUpdateUrl(id), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(updateRequestBody),
  });
};

export const getApiKeysUpdateMutationOptions = <
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof apiKeysUpdate>>,
    TError,
    { id: string; data: UpdateRequestBody },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof apiKeysUpdate>>,
  TError,
  { id: string; data: UpdateRequestBody },
  TContext
> => {
  const mutationKey = ["apiKeysUpdate"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof apiKeysUpdate>>,
    { id: string; data: UpdateRequestBody }
  > = (props) => {
    const { id, data } = props ?? {};

    return apiKeysUpdate(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ApiKeysUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof apiKeysUpdate>>
>;
export type ApiKeysUpdateMutationBody = UpdateRequestBody;
export type ApiKeysUpdateMutationError =
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | InternalServerError;

/**
 * @summary update api_keys
 */
export const useApiKeysUpdate = <
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof apiKeysUpdate>>,
    TError,
    { id: string; data: UpdateRequestBody },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof apiKeysUpdate>>,
  TError,
  { id: string; data: UpdateRequestBody },
  TContext
> => {
  const mutationOptions = getApiKeysUpdateMutationOptions(options);

  return useMutation(mutationOptions);
};
