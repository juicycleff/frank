/**
 * Generated by orval v7.7.0 üç∫
 * Do not edit manually.
 * Frank Authentication Server
 * A comprehensive authentication server with OAuth2, MFA, Passkeys, SSO, and more
 * OpenAPI spec version: 1.0.0
 */
import { useInfiniteQuery, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  BadRequestError,
  ForbiddenError,
  InternalServerError,
  ListProvidersResponseBody,
  NotFoundError,
  OauthClientProviderAuthParams,
  OauthClientProviderCallbackParams,
  ProviderCallbackResponseBody,
  UnauthorizedError,
} from "../../model";

import { customInstance } from "../../mutator/custom-instance";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * Handle OAuth provider callback
 * @summary provider_callback oauth_client
 */
export type oauthClientProviderCallbackResponse200 = {
  data: ProviderCallbackResponseBody;
  status: 200;
};

export type oauthClientProviderCallbackResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type oauthClientProviderCallbackResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type oauthClientProviderCallbackResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type oauthClientProviderCallbackResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type oauthClientProviderCallbackResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type oauthClientProviderCallbackResponseComposite =
  | oauthClientProviderCallbackResponse200
  | oauthClientProviderCallbackResponse400
  | oauthClientProviderCallbackResponse401
  | oauthClientProviderCallbackResponse403
  | oauthClientProviderCallbackResponse404
  | oauthClientProviderCallbackResponse500;

export type oauthClientProviderCallbackResponse =
  oauthClientProviderCallbackResponseComposite & {
    headers: Headers;
  };

export const getOauthClientProviderCallbackUrl = (
  provider: string,
  params?: OauthClientProviderCallbackParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/v1/auth/oauth/callback/${provider}?${stringifiedParams}`
    : `/v1/auth/oauth/callback/${provider}`;
};

export const oauthClientProviderCallback = async (
  provider: string,
  params?: OauthClientProviderCallbackParams,
  options?: RequestInit,
): Promise<oauthClientProviderCallbackResponse> => {
  return customInstance<oauthClientProviderCallbackResponse>(
    getOauthClientProviderCallbackUrl(provider, params),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getOauthClientProviderCallbackQueryKey = (
  provider: string,
  params?: OauthClientProviderCallbackParams,
) => {
  return [
    `/v1/auth/oauth/callback/${provider}`,
    ...(params ? [params] : []),
  ] as const;
};

export const getOauthClientProviderCallbackInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof oauthClientProviderCallback>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
>(
  provider: string,
  params?: OauthClientProviderCallbackParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof oauthClientProviderCallback>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getOauthClientProviderCallbackQueryKey(provider, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof oauthClientProviderCallback>>
  > = ({ signal }) =>
    oauthClientProviderCallback(provider, params, {
      signal,
      ...requestOptions,
    });

  return {
    queryKey,
    queryFn,
    enabled: !!provider,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof oauthClientProviderCallback>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type OauthClientProviderCallbackInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof oauthClientProviderCallback>>
>;
export type OauthClientProviderCallbackInfiniteQueryError =
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | InternalServerError;

export function useOauthClientProviderCallbackInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof oauthClientProviderCallback>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
>(
  provider: string,
  params: undefined | OauthClientProviderCallbackParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof oauthClientProviderCallback>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof oauthClientProviderCallback>>,
          TError,
          Awaited<ReturnType<typeof oauthClientProviderCallback>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useOauthClientProviderCallbackInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof oauthClientProviderCallback>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
>(
  provider: string,
  params?: OauthClientProviderCallbackParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof oauthClientProviderCallback>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof oauthClientProviderCallback>>,
          TError,
          Awaited<ReturnType<typeof oauthClientProviderCallback>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useOauthClientProviderCallbackInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof oauthClientProviderCallback>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
>(
  provider: string,
  params?: OauthClientProviderCallbackParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof oauthClientProviderCallback>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary provider_callback oauth_client
 */

export function useOauthClientProviderCallbackInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof oauthClientProviderCallback>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
>(
  provider: string,
  params?: OauthClientProviderCallbackParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof oauthClientProviderCallback>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getOauthClientProviderCallbackInfiniteQueryOptions(
    provider,
    params,
    options,
  );

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getOauthClientProviderCallbackQueryOptions = <
  TData = Awaited<ReturnType<typeof oauthClientProviderCallback>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
>(
  provider: string,
  params?: OauthClientProviderCallbackParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof oauthClientProviderCallback>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getOauthClientProviderCallbackQueryKey(provider, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof oauthClientProviderCallback>>
  > = ({ signal }) =>
    oauthClientProviderCallback(provider, params, {
      signal,
      ...requestOptions,
    });

  return {
    queryKey,
    queryFn,
    enabled: !!provider,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof oauthClientProviderCallback>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type OauthClientProviderCallbackQueryResult = NonNullable<
  Awaited<ReturnType<typeof oauthClientProviderCallback>>
>;
export type OauthClientProviderCallbackQueryError =
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | InternalServerError;

export function useOauthClientProviderCallback<
  TData = Awaited<ReturnType<typeof oauthClientProviderCallback>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
>(
  provider: string,
  params: undefined | OauthClientProviderCallbackParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof oauthClientProviderCallback>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof oauthClientProviderCallback>>,
          TError,
          Awaited<ReturnType<typeof oauthClientProviderCallback>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useOauthClientProviderCallback<
  TData = Awaited<ReturnType<typeof oauthClientProviderCallback>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
>(
  provider: string,
  params?: OauthClientProviderCallbackParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof oauthClientProviderCallback>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof oauthClientProviderCallback>>,
          TError,
          Awaited<ReturnType<typeof oauthClientProviderCallback>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useOauthClientProviderCallback<
  TData = Awaited<ReturnType<typeof oauthClientProviderCallback>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
>(
  provider: string,
  params?: OauthClientProviderCallbackParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof oauthClientProviderCallback>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary provider_callback oauth_client
 */

export function useOauthClientProviderCallback<
  TData = Awaited<ReturnType<typeof oauthClientProviderCallback>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
>(
  provider: string,
  params?: OauthClientProviderCallbackParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof oauthClientProviderCallback>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getOauthClientProviderCallbackQueryOptions(
    provider,
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * List available OAuth providers
 * @summary list_providers oauth_client
 */
export type oauthClientListProvidersResponse200 = {
  data: ListProvidersResponseBody;
  status: 200;
};

export type oauthClientListProvidersResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type oauthClientListProvidersResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type oauthClientListProvidersResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type oauthClientListProvidersResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type oauthClientListProvidersResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type oauthClientListProvidersResponseComposite =
  | oauthClientListProvidersResponse200
  | oauthClientListProvidersResponse400
  | oauthClientListProvidersResponse401
  | oauthClientListProvidersResponse403
  | oauthClientListProvidersResponse404
  | oauthClientListProvidersResponse500;

export type oauthClientListProvidersResponse =
  oauthClientListProvidersResponseComposite & {
    headers: Headers;
  };

export const getOauthClientListProvidersUrl = () => {
  return `/v1/auth/oauth/providers`;
};

export const oauthClientListProviders = async (
  options?: RequestInit,
): Promise<oauthClientListProvidersResponse> => {
  return customInstance<oauthClientListProvidersResponse>(
    getOauthClientListProvidersUrl(),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getOauthClientListProvidersQueryKey = () => {
  return [`/v1/auth/oauth/providers`] as const;
};

export const getOauthClientListProvidersInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof oauthClientListProviders>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
>(options?: {
  query?: Partial<
    UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof oauthClientListProviders>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getOauthClientListProvidersQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof oauthClientListProviders>>
  > = ({ signal }) => oauthClientListProviders({ signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof oauthClientListProviders>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type OauthClientListProvidersInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof oauthClientListProviders>>
>;
export type OauthClientListProvidersInfiniteQueryError =
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | InternalServerError;

export function useOauthClientListProvidersInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof oauthClientListProviders>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
>(options: {
  query: Partial<
    UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof oauthClientListProviders>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof oauthClientListProviders>>,
        TError,
        Awaited<ReturnType<typeof oauthClientListProviders>>
      >,
      "initialData"
    >;
  request?: SecondParameter<typeof customInstance>;
}): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useOauthClientListProvidersInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof oauthClientListProviders>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
>(options?: {
  query?: Partial<
    UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof oauthClientListProviders>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof oauthClientListProviders>>,
        TError,
        Awaited<ReturnType<typeof oauthClientListProviders>>
      >,
      "initialData"
    >;
  request?: SecondParameter<typeof customInstance>;
}): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useOauthClientListProvidersInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof oauthClientListProviders>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
>(options?: {
  query?: Partial<
    UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof oauthClientListProviders>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary list_providers oauth_client
 */

export function useOauthClientListProvidersInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof oauthClientListProviders>>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
>(options?: {
  query?: Partial<
    UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof oauthClientListProviders>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getOauthClientListProvidersInfiniteQueryOptions(options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getOauthClientListProvidersQueryOptions = <
  TData = Awaited<ReturnType<typeof oauthClientListProviders>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof oauthClientListProviders>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getOauthClientListProvidersQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof oauthClientListProviders>>
  > = ({ signal }) => oauthClientListProviders({ signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof oauthClientListProviders>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type OauthClientListProvidersQueryResult = NonNullable<
  Awaited<ReturnType<typeof oauthClientListProviders>>
>;
export type OauthClientListProvidersQueryError =
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | InternalServerError;

export function useOauthClientListProviders<
  TData = Awaited<ReturnType<typeof oauthClientListProviders>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof oauthClientListProviders>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof oauthClientListProviders>>,
        TError,
        Awaited<ReturnType<typeof oauthClientListProviders>>
      >,
      "initialData"
    >;
  request?: SecondParameter<typeof customInstance>;
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useOauthClientListProviders<
  TData = Awaited<ReturnType<typeof oauthClientListProviders>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof oauthClientListProviders>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof oauthClientListProviders>>,
        TError,
        Awaited<ReturnType<typeof oauthClientListProviders>>
      >,
      "initialData"
    >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useOauthClientListProviders<
  TData = Awaited<ReturnType<typeof oauthClientListProviders>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof oauthClientListProviders>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary list_providers oauth_client
 */

export function useOauthClientListProviders<
  TData = Awaited<ReturnType<typeof oauthClientListProviders>>,
  TError =
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof oauthClientListProviders>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getOauthClientListProvidersQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Initiate authentication with an OAuth provider
 * @summary provider_auth oauth_client
 */
export type oauthClientProviderAuthResponse302 = {
  data: void;
  status: 302;
};

export type oauthClientProviderAuthResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type oauthClientProviderAuthResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type oauthClientProviderAuthResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type oauthClientProviderAuthResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type oauthClientProviderAuthResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type oauthClientProviderAuthResponseComposite =
  | oauthClientProviderAuthResponse302
  | oauthClientProviderAuthResponse400
  | oauthClientProviderAuthResponse401
  | oauthClientProviderAuthResponse403
  | oauthClientProviderAuthResponse404
  | oauthClientProviderAuthResponse500;

export type oauthClientProviderAuthResponse =
  oauthClientProviderAuthResponseComposite & {
    headers: Headers;
  };

export const getOauthClientProviderAuthUrl = (
  provider: string,
  params?: OauthClientProviderAuthParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/v1/auth/oauth/providers/${provider}?${stringifiedParams}`
    : `/v1/auth/oauth/providers/${provider}`;
};

export const oauthClientProviderAuth = async (
  provider: string,
  params?: OauthClientProviderAuthParams,
  options?: RequestInit,
): Promise<oauthClientProviderAuthResponse> => {
  return customInstance<oauthClientProviderAuthResponse>(
    getOauthClientProviderAuthUrl(provider, params),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getOauthClientProviderAuthQueryKey = (
  provider: string,
  params?: OauthClientProviderAuthParams,
) => {
  return [
    `/v1/auth/oauth/providers/${provider}`,
    ...(params ? [params] : []),
  ] as const;
};

export const getOauthClientProviderAuthInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof oauthClientProviderAuth>>>,
  TError =
    | void
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
>(
  provider: string,
  params?: OauthClientProviderAuthParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof oauthClientProviderAuth>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getOauthClientProviderAuthQueryKey(provider, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof oauthClientProviderAuth>>
  > = ({ signal }) =>
    oauthClientProviderAuth(provider, params, { signal, ...requestOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!provider,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof oauthClientProviderAuth>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type OauthClientProviderAuthInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof oauthClientProviderAuth>>
>;
export type OauthClientProviderAuthInfiniteQueryError =
  | void
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | InternalServerError;

export function useOauthClientProviderAuthInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof oauthClientProviderAuth>>>,
  TError =
    | void
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
>(
  provider: string,
  params: undefined | OauthClientProviderAuthParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof oauthClientProviderAuth>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof oauthClientProviderAuth>>,
          TError,
          Awaited<ReturnType<typeof oauthClientProviderAuth>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useOauthClientProviderAuthInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof oauthClientProviderAuth>>>,
  TError =
    | void
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
>(
  provider: string,
  params?: OauthClientProviderAuthParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof oauthClientProviderAuth>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof oauthClientProviderAuth>>,
          TError,
          Awaited<ReturnType<typeof oauthClientProviderAuth>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useOauthClientProviderAuthInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof oauthClientProviderAuth>>>,
  TError =
    | void
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
>(
  provider: string,
  params?: OauthClientProviderAuthParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof oauthClientProviderAuth>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary provider_auth oauth_client
 */

export function useOauthClientProviderAuthInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof oauthClientProviderAuth>>>,
  TError =
    | void
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
>(
  provider: string,
  params?: OauthClientProviderAuthParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof oauthClientProviderAuth>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getOauthClientProviderAuthInfiniteQueryOptions(
    provider,
    params,
    options,
  );

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getOauthClientProviderAuthQueryOptions = <
  TData = Awaited<ReturnType<typeof oauthClientProviderAuth>>,
  TError =
    | void
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
>(
  provider: string,
  params?: OauthClientProviderAuthParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof oauthClientProviderAuth>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getOauthClientProviderAuthQueryKey(provider, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof oauthClientProviderAuth>>
  > = ({ signal }) =>
    oauthClientProviderAuth(provider, params, { signal, ...requestOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!provider,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof oauthClientProviderAuth>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type OauthClientProviderAuthQueryResult = NonNullable<
  Awaited<ReturnType<typeof oauthClientProviderAuth>>
>;
export type OauthClientProviderAuthQueryError =
  | void
  | BadRequestError
  | UnauthorizedError
  | ForbiddenError
  | NotFoundError
  | InternalServerError;

export function useOauthClientProviderAuth<
  TData = Awaited<ReturnType<typeof oauthClientProviderAuth>>,
  TError =
    | void
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
>(
  provider: string,
  params: undefined | OauthClientProviderAuthParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof oauthClientProviderAuth>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof oauthClientProviderAuth>>,
          TError,
          Awaited<ReturnType<typeof oauthClientProviderAuth>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useOauthClientProviderAuth<
  TData = Awaited<ReturnType<typeof oauthClientProviderAuth>>,
  TError =
    | void
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
>(
  provider: string,
  params?: OauthClientProviderAuthParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof oauthClientProviderAuth>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof oauthClientProviderAuth>>,
          TError,
          Awaited<ReturnType<typeof oauthClientProviderAuth>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useOauthClientProviderAuth<
  TData = Awaited<ReturnType<typeof oauthClientProviderAuth>>,
  TError =
    | void
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
>(
  provider: string,
  params?: OauthClientProviderAuthParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof oauthClientProviderAuth>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary provider_auth oauth_client
 */

export function useOauthClientProviderAuth<
  TData = Awaited<ReturnType<typeof oauthClientProviderAuth>>,
  TError =
    | void
    | BadRequestError
    | UnauthorizedError
    | ForbiddenError
    | NotFoundError
    | InternalServerError,
>(
  provider: string,
  params?: OauthClientProviderAuthParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof oauthClientProviderAuth>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getOauthClientProviderAuthQueryOptions(
    provider,
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
