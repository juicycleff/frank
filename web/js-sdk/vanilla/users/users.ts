/**
 * Generated by orval v7.7.0 🍺
 * Do not edit manually.
 * Frank Authentication Server
 * A comprehensive authentication server with OAuth2, MFA, Passkeys, SSO, and more
 * OpenAPI spec version: 1.0.0
 */
import type {
  BadRequestError,
  ConflictError,
  CreateUserRequest,
  ForbiddenError,
  GetOrganizationsResponseBody,
  GetUserSessionResponse,
  InternalServerError,
  ListResponseBody4,
  NotFoundError,
  SendResponseBody,
  UnauthorizedError,
  UpdatePasswordRequest,
  UpdateRequestBody4,
  UpdateUserRequest,
  User,
  UsersListParams,
} from "../../model";

import { customInstance } from "../../mutator/custom-instance";

/**
 * List users
 * @summary list users
 */
export type usersListResponse200 = {
  data: ListResponseBody4;
  status: 200;
};

export type usersListResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type usersListResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type usersListResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type usersListResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type usersListResponse409 = {
  data: ConflictError;
  status: 409;
};

export type usersListResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type usersListResponseComposite =
  | usersListResponse200
  | usersListResponse400
  | usersListResponse401
  | usersListResponse403
  | usersListResponse404
  | usersListResponse409
  | usersListResponse500;

export type usersListResponse = usersListResponseComposite & {
  headers: Headers;
};

export const getUsersListUrl = (params?: UsersListParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/v1/users?${stringifiedParams}`
    : `/v1/users`;
};

export const usersList = async (
  params?: UsersListParams,
  options?: RequestInit,
): Promise<usersListResponse> => {
  return customInstance<usersListResponse>(getUsersListUrl(params), {
    ...options,
    method: "GET",
  });
};

/**
 * Create a new user
 * @summary create users
 */
export type usersCreateResponse201 = {
  data: User;
  status: 201;
};

export type usersCreateResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type usersCreateResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type usersCreateResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type usersCreateResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type usersCreateResponse409 = {
  data: ConflictError;
  status: 409;
};

export type usersCreateResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type usersCreateResponseComposite =
  | usersCreateResponse201
  | usersCreateResponse400
  | usersCreateResponse401
  | usersCreateResponse403
  | usersCreateResponse404
  | usersCreateResponse409
  | usersCreateResponse500;

export type usersCreateResponse = usersCreateResponseComposite & {
  headers: Headers;
};

export const getUsersCreateUrl = () => {
  return `/v1/users`;
};

export const usersCreate = async (
  createUserRequest: CreateUserRequest,
  options?: RequestInit,
): Promise<usersCreateResponse> => {
  return customInstance<usersCreateResponse>(getUsersCreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(createUserRequest),
  });
};

/**
 * Update current user
 * @summary update_me users
 */
export type usersUpdateMeResponse200 = {
  data: User;
  status: 200;
};

export type usersUpdateMeResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type usersUpdateMeResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type usersUpdateMeResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type usersUpdateMeResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type usersUpdateMeResponse409 = {
  data: ConflictError;
  status: 409;
};

export type usersUpdateMeResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type usersUpdateMeResponseComposite =
  | usersUpdateMeResponse200
  | usersUpdateMeResponse400
  | usersUpdateMeResponse401
  | usersUpdateMeResponse403
  | usersUpdateMeResponse404
  | usersUpdateMeResponse409
  | usersUpdateMeResponse500;

export type usersUpdateMeResponse = usersUpdateMeResponseComposite & {
  headers: Headers;
};

export const getUsersUpdateMeUrl = () => {
  return `/v1/users/me`;
};

export const usersUpdateMe = async (
  updateUserRequest: UpdateUserRequest,
  options?: RequestInit,
): Promise<usersUpdateMeResponse> => {
  return customInstance<usersUpdateMeResponse>(getUsersUpdateMeUrl(), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(updateUserRequest),
  });
};

/**
 * Update current user password
 * @summary update_password users
 */
export type usersUpdatePasswordResponse200 = {
  data: SendResponseBody;
  status: 200;
};

export type usersUpdatePasswordResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type usersUpdatePasswordResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type usersUpdatePasswordResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type usersUpdatePasswordResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type usersUpdatePasswordResponse409 = {
  data: ConflictError;
  status: 409;
};

export type usersUpdatePasswordResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type usersUpdatePasswordResponseComposite =
  | usersUpdatePasswordResponse200
  | usersUpdatePasswordResponse400
  | usersUpdatePasswordResponse401
  | usersUpdatePasswordResponse403
  | usersUpdatePasswordResponse404
  | usersUpdatePasswordResponse409
  | usersUpdatePasswordResponse500;

export type usersUpdatePasswordResponse =
  usersUpdatePasswordResponseComposite & {
    headers: Headers;
  };

export const getUsersUpdatePasswordUrl = () => {
  return `/v1/users/me/password`;
};

export const usersUpdatePassword = async (
  updatePasswordRequest: UpdatePasswordRequest,
  options?: RequestInit,
): Promise<usersUpdatePasswordResponse> => {
  return customInstance<usersUpdatePasswordResponse>(
    getUsersUpdatePasswordUrl(),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(updatePasswordRequest),
    },
  );
};

/**
 * Get current user sessions
 * @summary get_sessions users
 */
export type usersGetSessionsResponse200 = {
  data: GetUserSessionResponse;
  status: 200;
};

export type usersGetSessionsResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type usersGetSessionsResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type usersGetSessionsResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type usersGetSessionsResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type usersGetSessionsResponse409 = {
  data: ConflictError;
  status: 409;
};

export type usersGetSessionsResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type usersGetSessionsResponseComposite =
  | usersGetSessionsResponse200
  | usersGetSessionsResponse400
  | usersGetSessionsResponse401
  | usersGetSessionsResponse403
  | usersGetSessionsResponse404
  | usersGetSessionsResponse409
  | usersGetSessionsResponse500;

export type usersGetSessionsResponse = usersGetSessionsResponseComposite & {
  headers: Headers;
};

export const getUsersGetSessionsUrl = () => {
  return `/v1/users/me/sessions`;
};

export const usersGetSessions = async (
  options?: RequestInit,
): Promise<usersGetSessionsResponse> => {
  return customInstance<usersGetSessionsResponse>(getUsersGetSessionsUrl(), {
    ...options,
    method: "GET",
  });
};

/**
 * Delete user session
 * @summary delete_session users
 */
export type usersDeleteSessionResponse204 = {
  data: void;
  status: 204;
};

export type usersDeleteSessionResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type usersDeleteSessionResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type usersDeleteSessionResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type usersDeleteSessionResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type usersDeleteSessionResponse409 = {
  data: ConflictError;
  status: 409;
};

export type usersDeleteSessionResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type usersDeleteSessionResponseComposite =
  | usersDeleteSessionResponse204
  | usersDeleteSessionResponse400
  | usersDeleteSessionResponse401
  | usersDeleteSessionResponse403
  | usersDeleteSessionResponse404
  | usersDeleteSessionResponse409
  | usersDeleteSessionResponse500;

export type usersDeleteSessionResponse = usersDeleteSessionResponseComposite & {
  headers: Headers;
};

export const getUsersDeleteSessionUrl = (sessionId: string) => {
  return `/v1/users/me/sessions/${sessionId}`;
};

export const usersDeleteSession = async (
  sessionId: string,
  options?: RequestInit,
): Promise<usersDeleteSessionResponse> => {
  return customInstance<usersDeleteSessionResponse>(
    getUsersDeleteSessionUrl(sessionId),
    {
      ...options,
      method: "DELETE",
    },
  );
};

/**
 * Delete user
 * @summary delete users
 */
export type usersDeleteResponse204 = {
  data: void;
  status: 204;
};

export type usersDeleteResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type usersDeleteResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type usersDeleteResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type usersDeleteResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type usersDeleteResponse409 = {
  data: ConflictError;
  status: 409;
};

export type usersDeleteResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type usersDeleteResponseComposite =
  | usersDeleteResponse204
  | usersDeleteResponse400
  | usersDeleteResponse401
  | usersDeleteResponse403
  | usersDeleteResponse404
  | usersDeleteResponse409
  | usersDeleteResponse500;

export type usersDeleteResponse = usersDeleteResponseComposite & {
  headers: Headers;
};

export const getUsersDeleteUrl = (id: string) => {
  return `/v1/users/${id}`;
};

export const usersDelete = async (
  id: string,
  options?: RequestInit,
): Promise<usersDeleteResponse> => {
  return customInstance<usersDeleteResponse>(getUsersDeleteUrl(id), {
    ...options,
    method: "DELETE",
  });
};

/**
 * Get user by ID
 * @summary get users
 */
export type usersGetResponse200 = {
  data: User;
  status: 200;
};

export type usersGetResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type usersGetResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type usersGetResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type usersGetResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type usersGetResponse409 = {
  data: ConflictError;
  status: 409;
};

export type usersGetResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type usersGetResponseComposite =
  | usersGetResponse200
  | usersGetResponse400
  | usersGetResponse401
  | usersGetResponse403
  | usersGetResponse404
  | usersGetResponse409
  | usersGetResponse500;

export type usersGetResponse = usersGetResponseComposite & {
  headers: Headers;
};

export const getUsersGetUrl = (id: string) => {
  return `/v1/users/${id}`;
};

export const usersGet = async (
  id: string,
  options?: RequestInit,
): Promise<usersGetResponse> => {
  return customInstance<usersGetResponse>(getUsersGetUrl(id), {
    ...options,
    method: "GET",
  });
};

/**
 * Update user
 * @summary update users
 */
export type usersUpdateResponse200 = {
  data: User;
  status: 200;
};

export type usersUpdateResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type usersUpdateResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type usersUpdateResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type usersUpdateResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type usersUpdateResponse409 = {
  data: ConflictError;
  status: 409;
};

export type usersUpdateResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type usersUpdateResponseComposite =
  | usersUpdateResponse200
  | usersUpdateResponse400
  | usersUpdateResponse401
  | usersUpdateResponse403
  | usersUpdateResponse404
  | usersUpdateResponse409
  | usersUpdateResponse500;

export type usersUpdateResponse = usersUpdateResponseComposite & {
  headers: Headers;
};

export const getUsersUpdateUrl = (id: string) => {
  return `/v1/users/${id}`;
};

export const usersUpdate = async (
  id: string,
  updateRequestBody4: UpdateRequestBody4,
  options?: RequestInit,
): Promise<usersUpdateResponse> => {
  return customInstance<usersUpdateResponse>(getUsersUpdateUrl(id), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(updateRequestBody4),
  });
};

/**
 * Get user organizations
 * @summary get_organizations users
 */
export type usersGetOrganizationsResponse200 = {
  data: GetOrganizationsResponseBody;
  status: 200;
};

export type usersGetOrganizationsResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type usersGetOrganizationsResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type usersGetOrganizationsResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type usersGetOrganizationsResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type usersGetOrganizationsResponse409 = {
  data: ConflictError;
  status: 409;
};

export type usersGetOrganizationsResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type usersGetOrganizationsResponseComposite =
  | usersGetOrganizationsResponse200
  | usersGetOrganizationsResponse400
  | usersGetOrganizationsResponse401
  | usersGetOrganizationsResponse403
  | usersGetOrganizationsResponse404
  | usersGetOrganizationsResponse409
  | usersGetOrganizationsResponse500;

export type usersGetOrganizationsResponse =
  usersGetOrganizationsResponseComposite & {
    headers: Headers;
  };

export const getUsersGetOrganizationsUrl = (id: string) => {
  return `/v1/users/${id}/organizations`;
};

export const usersGetOrganizations = async (
  id: string,
  options?: RequestInit,
): Promise<usersGetOrganizationsResponse> => {
  return customInstance<usersGetOrganizationsResponse>(
    getUsersGetOrganizationsUrl(id),
    {
      ...options,
      method: "GET",
    },
  );
};
