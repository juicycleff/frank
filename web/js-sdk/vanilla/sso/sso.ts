/**
 * Generated by orval v7.7.0 🍺
 * Do not edit manually.
 * Frank Authentication Server
 * A comprehensive authentication server with OAuth2, MFA, Passkeys, SSO, and more
 * OpenAPI spec version: 1.0.0
 */
import type {
  BadRequestError,
  ConflictError,
  CreateIdentityProviderRequestBody,
  ForbiddenError,
  IdentityProviderResponse,
  InternalServerError,
  ListIdentityProvidersResponseBody,
  ListProvidersResponseBody,
  NotFoundError,
  ProviderCallbackResponseBody2,
  SamlMetadataResponseBody,
  SsoListIdentityProvidersParams,
  SsoListProvidersParams,
  SsoProviderAuthParams,
  SsoProviderCallbackParams,
  UnauthorizedError,
  UpdateIdentityProviderRequestBody,
} from "../../model";

import { customInstance } from "../../mutator/custom-instance";

/**
 * Handle SSO provider callback
 * @summary provider_callback sso
 */
export type ssoProviderCallbackResponse200 = {
  data: ProviderCallbackResponseBody2;
  status: 200;
};

export type ssoProviderCallbackResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type ssoProviderCallbackResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type ssoProviderCallbackResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type ssoProviderCallbackResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type ssoProviderCallbackResponse409 = {
  data: ConflictError;
  status: 409;
};

export type ssoProviderCallbackResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type ssoProviderCallbackResponseComposite =
  | ssoProviderCallbackResponse200
  | ssoProviderCallbackResponse400
  | ssoProviderCallbackResponse401
  | ssoProviderCallbackResponse403
  | ssoProviderCallbackResponse404
  | ssoProviderCallbackResponse409
  | ssoProviderCallbackResponse500;

export type ssoProviderCallbackResponse =
  ssoProviderCallbackResponseComposite & {
    headers: Headers;
  };

export const getSsoProviderCallbackUrl = (
  provider: string,
  params?: SsoProviderCallbackParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/v1/auth/sso/callback/${provider}?${stringifiedParams}`
    : `/v1/auth/sso/callback/${provider}`;
};

export const ssoProviderCallback = async (
  provider: string,
  params?: SsoProviderCallbackParams,
  options?: RequestInit,
): Promise<ssoProviderCallbackResponse> => {
  return customInstance<ssoProviderCallbackResponse>(
    getSsoProviderCallbackUrl(provider, params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * List identity providers
 * @summary list_identity_providers sso
 */
export type ssoListIdentityProvidersResponse200 = {
  data: ListIdentityProvidersResponseBody;
  status: 200;
};

export type ssoListIdentityProvidersResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type ssoListIdentityProvidersResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type ssoListIdentityProvidersResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type ssoListIdentityProvidersResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type ssoListIdentityProvidersResponse409 = {
  data: ConflictError;
  status: 409;
};

export type ssoListIdentityProvidersResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type ssoListIdentityProvidersResponseComposite =
  | ssoListIdentityProvidersResponse200
  | ssoListIdentityProvidersResponse400
  | ssoListIdentityProvidersResponse401
  | ssoListIdentityProvidersResponse403
  | ssoListIdentityProvidersResponse404
  | ssoListIdentityProvidersResponse409
  | ssoListIdentityProvidersResponse500;

export type ssoListIdentityProvidersResponse =
  ssoListIdentityProvidersResponseComposite & {
    headers: Headers;
  };

export const getSsoListIdentityProvidersUrl = (
  params: SsoListIdentityProvidersParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/v1/auth/sso/identity-providers?${stringifiedParams}`
    : `/v1/auth/sso/identity-providers`;
};

export const ssoListIdentityProviders = async (
  params: SsoListIdentityProvidersParams,
  options?: RequestInit,
): Promise<ssoListIdentityProvidersResponse> => {
  return customInstance<ssoListIdentityProvidersResponse>(
    getSsoListIdentityProvidersUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * Create a new identity provider
 * @summary create_identity_provider sso
 */
export type ssoCreateIdentityProviderResponse201 = {
  data: IdentityProviderResponse;
  status: 201;
};

export type ssoCreateIdentityProviderResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type ssoCreateIdentityProviderResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type ssoCreateIdentityProviderResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type ssoCreateIdentityProviderResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type ssoCreateIdentityProviderResponse409 = {
  data: ConflictError;
  status: 409;
};

export type ssoCreateIdentityProviderResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type ssoCreateIdentityProviderResponseComposite =
  | ssoCreateIdentityProviderResponse201
  | ssoCreateIdentityProviderResponse400
  | ssoCreateIdentityProviderResponse401
  | ssoCreateIdentityProviderResponse403
  | ssoCreateIdentityProviderResponse404
  | ssoCreateIdentityProviderResponse409
  | ssoCreateIdentityProviderResponse500;

export type ssoCreateIdentityProviderResponse =
  ssoCreateIdentityProviderResponseComposite & {
    headers: Headers;
  };

export const getSsoCreateIdentityProviderUrl = () => {
  return `/v1/auth/sso/identity-providers`;
};

export const ssoCreateIdentityProvider = async (
  createIdentityProviderRequestBody: CreateIdentityProviderRequestBody,
  options?: RequestInit,
): Promise<ssoCreateIdentityProviderResponse> => {
  return customInstance<ssoCreateIdentityProviderResponse>(
    getSsoCreateIdentityProviderUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(createIdentityProviderRequestBody),
    },
  );
};

/**
 * Delete identity provider
 * @summary delete_identity_provider sso
 */
export type ssoDeleteIdentityProviderResponse204 = {
  data: void;
  status: 204;
};

export type ssoDeleteIdentityProviderResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type ssoDeleteIdentityProviderResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type ssoDeleteIdentityProviderResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type ssoDeleteIdentityProviderResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type ssoDeleteIdentityProviderResponse409 = {
  data: ConflictError;
  status: 409;
};

export type ssoDeleteIdentityProviderResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type ssoDeleteIdentityProviderResponseComposite =
  | ssoDeleteIdentityProviderResponse204
  | ssoDeleteIdentityProviderResponse400
  | ssoDeleteIdentityProviderResponse401
  | ssoDeleteIdentityProviderResponse403
  | ssoDeleteIdentityProviderResponse404
  | ssoDeleteIdentityProviderResponse409
  | ssoDeleteIdentityProviderResponse500;

export type ssoDeleteIdentityProviderResponse =
  ssoDeleteIdentityProviderResponseComposite & {
    headers: Headers;
  };

export const getSsoDeleteIdentityProviderUrl = (id: string) => {
  return `/v1/auth/sso/identity-providers/${id}`;
};

export const ssoDeleteIdentityProvider = async (
  id: string,
  options?: RequestInit,
): Promise<ssoDeleteIdentityProviderResponse> => {
  return customInstance<ssoDeleteIdentityProviderResponse>(
    getSsoDeleteIdentityProviderUrl(id),
    {
      ...options,
      method: "DELETE",
    },
  );
};

/**
 * Get identity provider by ID
 * @summary get_identity_provider sso
 */
export type ssoGetIdentityProviderResponse200 = {
  data: IdentityProviderResponse;
  status: 200;
};

export type ssoGetIdentityProviderResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type ssoGetIdentityProviderResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type ssoGetIdentityProviderResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type ssoGetIdentityProviderResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type ssoGetIdentityProviderResponse409 = {
  data: ConflictError;
  status: 409;
};

export type ssoGetIdentityProviderResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type ssoGetIdentityProviderResponseComposite =
  | ssoGetIdentityProviderResponse200
  | ssoGetIdentityProviderResponse400
  | ssoGetIdentityProviderResponse401
  | ssoGetIdentityProviderResponse403
  | ssoGetIdentityProviderResponse404
  | ssoGetIdentityProviderResponse409
  | ssoGetIdentityProviderResponse500;

export type ssoGetIdentityProviderResponse =
  ssoGetIdentityProviderResponseComposite & {
    headers: Headers;
  };

export const getSsoGetIdentityProviderUrl = (id: string) => {
  return `/v1/auth/sso/identity-providers/${id}`;
};

export const ssoGetIdentityProvider = async (
  id: string,
  options?: RequestInit,
): Promise<ssoGetIdentityProviderResponse> => {
  return customInstance<ssoGetIdentityProviderResponse>(
    getSsoGetIdentityProviderUrl(id),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * Update identity provider
 * @summary update_identity_provider sso
 */
export type ssoUpdateIdentityProviderResponse200 = {
  data: IdentityProviderResponse;
  status: 200;
};

export type ssoUpdateIdentityProviderResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type ssoUpdateIdentityProviderResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type ssoUpdateIdentityProviderResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type ssoUpdateIdentityProviderResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type ssoUpdateIdentityProviderResponse409 = {
  data: ConflictError;
  status: 409;
};

export type ssoUpdateIdentityProviderResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type ssoUpdateIdentityProviderResponseComposite =
  | ssoUpdateIdentityProviderResponse200
  | ssoUpdateIdentityProviderResponse400
  | ssoUpdateIdentityProviderResponse401
  | ssoUpdateIdentityProviderResponse403
  | ssoUpdateIdentityProviderResponse404
  | ssoUpdateIdentityProviderResponse409
  | ssoUpdateIdentityProviderResponse500;

export type ssoUpdateIdentityProviderResponse =
  ssoUpdateIdentityProviderResponseComposite & {
    headers: Headers;
  };

export const getSsoUpdateIdentityProviderUrl = (id: string) => {
  return `/v1/auth/sso/identity-providers/${id}`;
};

export const ssoUpdateIdentityProvider = async (
  id: string,
  updateIdentityProviderRequestBody: UpdateIdentityProviderRequestBody,
  options?: RequestInit,
): Promise<ssoUpdateIdentityProviderResponse> => {
  return customInstance<ssoUpdateIdentityProviderResponse>(
    getSsoUpdateIdentityProviderUrl(id),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(updateIdentityProviderRequestBody),
    },
  );
};

/**
 * List available SSO providers
 * @summary list_providers sso
 */
export type ssoListProvidersResponse200 = {
  data: ListProvidersResponseBody;
  status: 200;
};

export type ssoListProvidersResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type ssoListProvidersResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type ssoListProvidersResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type ssoListProvidersResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type ssoListProvidersResponse409 = {
  data: ConflictError;
  status: 409;
};

export type ssoListProvidersResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type ssoListProvidersResponseComposite =
  | ssoListProvidersResponse200
  | ssoListProvidersResponse400
  | ssoListProvidersResponse401
  | ssoListProvidersResponse403
  | ssoListProvidersResponse404
  | ssoListProvidersResponse409
  | ssoListProvidersResponse500;

export type ssoListProvidersResponse = ssoListProvidersResponseComposite & {
  headers: Headers;
};

export const getSsoListProvidersUrl = (params?: SsoListProvidersParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/v1/auth/sso/providers?${stringifiedParams}`
    : `/v1/auth/sso/providers`;
};

export const ssoListProviders = async (
  params?: SsoListProvidersParams,
  options?: RequestInit,
): Promise<ssoListProvidersResponse> => {
  return customInstance<ssoListProvidersResponse>(
    getSsoListProvidersUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * Initiate SSO authentication with a provider
 * @summary provider_auth sso
 */
export type ssoProviderAuthResponse307 = {
  data: void;
  status: 307;
};

export type ssoProviderAuthResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type ssoProviderAuthResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type ssoProviderAuthResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type ssoProviderAuthResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type ssoProviderAuthResponse409 = {
  data: ConflictError;
  status: 409;
};

export type ssoProviderAuthResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type ssoProviderAuthResponseComposite =
  | ssoProviderAuthResponse307
  | ssoProviderAuthResponse400
  | ssoProviderAuthResponse401
  | ssoProviderAuthResponse403
  | ssoProviderAuthResponse404
  | ssoProviderAuthResponse409
  | ssoProviderAuthResponse500;

export type ssoProviderAuthResponse = ssoProviderAuthResponseComposite & {
  headers: Headers;
};

export const getSsoProviderAuthUrl = (
  provider: string,
  params?: SsoProviderAuthParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/v1/auth/sso/providers/${provider}?${stringifiedParams}`
    : `/v1/auth/sso/providers/${provider}`;
};

export const ssoProviderAuth = async (
  provider: string,
  params?: SsoProviderAuthParams,
  options?: RequestInit,
): Promise<ssoProviderAuthResponse> => {
  return customInstance<ssoProviderAuthResponse>(
    getSsoProviderAuthUrl(provider, params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * SAML assertion consumer service
 * @summary saml_acs sso
 */
export type ssoSamlAcsResponse200 = {
  data: string;
  status: 200;
};

export type ssoSamlAcsResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type ssoSamlAcsResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type ssoSamlAcsResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type ssoSamlAcsResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type ssoSamlAcsResponse409 = {
  data: ConflictError;
  status: 409;
};

export type ssoSamlAcsResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type ssoSamlAcsResponseComposite =
  | ssoSamlAcsResponse200
  | ssoSamlAcsResponse400
  | ssoSamlAcsResponse401
  | ssoSamlAcsResponse403
  | ssoSamlAcsResponse404
  | ssoSamlAcsResponse409
  | ssoSamlAcsResponse500;

export type ssoSamlAcsResponse = ssoSamlAcsResponseComposite & {
  headers: Headers;
};

export const getSsoSamlAcsUrl = (id: string) => {
  return `/v1/auth/sso/saml/${id}/acs`;
};

export const ssoSamlAcs = async (
  id: string,
  options?: RequestInit,
): Promise<ssoSamlAcsResponse> => {
  return customInstance<ssoSamlAcsResponse>(getSsoSamlAcsUrl(id), {
    ...options,
    method: "POST",
  });
};

/**
 * SAML metadata endpoint
 * @summary saml_metadata sso
 */
export type ssoSamlMetadataResponse200 = {
  data: SamlMetadataResponseBody;
  status: 200;
};

export type ssoSamlMetadataResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type ssoSamlMetadataResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type ssoSamlMetadataResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type ssoSamlMetadataResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type ssoSamlMetadataResponse409 = {
  data: ConflictError;
  status: 409;
};

export type ssoSamlMetadataResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type ssoSamlMetadataResponseComposite =
  | ssoSamlMetadataResponse200
  | ssoSamlMetadataResponse400
  | ssoSamlMetadataResponse401
  | ssoSamlMetadataResponse403
  | ssoSamlMetadataResponse404
  | ssoSamlMetadataResponse409
  | ssoSamlMetadataResponse500;

export type ssoSamlMetadataResponse = ssoSamlMetadataResponseComposite & {
  headers: Headers;
};

export const getSsoSamlMetadataUrl = (id: string) => {
  return `/v1/auth/sso/saml/${id}/metadata`;
};

export const ssoSamlMetadata = async (
  id: string,
  options?: RequestInit,
): Promise<ssoSamlMetadataResponse> => {
  return customInstance<ssoSamlMetadataResponse>(getSsoSamlMetadataUrl(id), {
    ...options,
    method: "GET",
  });
};
