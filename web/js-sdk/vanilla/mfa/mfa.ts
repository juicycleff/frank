/**
 * Generated by orval v7.7.0 🍺
 * Do not edit manually.
 * Frank Authentication Server
 * A comprehensive authentication server with OAuth2, MFA, Passkeys, SSO, and more
 * OpenAPI spec version: 1.0.0
 */
import type {
  BadRequestError,
  EnrollRequestBody,
  EnrollResponseBody,
  ForbiddenError,
  InternalServerError,
  MethodsResponseBody,
  NotFoundError,
  SendCodeRequestBody,
  SendCodeResponseBody,
  SendResponseBody,
  UnauthorizedError,
  UnenrollRequestBody,
  VerifyRequestBody,
  VerifyResponseBody,
} from "../../model";

import { customInstance } from "../../mutator/custom-instance";

/**
 * Start MFA enrollment
 * @summary enroll mfa
 */
export type mfaEnrollResponse200 = {
  data: EnrollResponseBody;
  status: 200;
};

export type mfaEnrollResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type mfaEnrollResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type mfaEnrollResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type mfaEnrollResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type mfaEnrollResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type mfaEnrollResponseComposite =
  | mfaEnrollResponse200
  | mfaEnrollResponse400
  | mfaEnrollResponse401
  | mfaEnrollResponse403
  | mfaEnrollResponse404
  | mfaEnrollResponse500;

export type mfaEnrollResponse = mfaEnrollResponseComposite & {
  headers: Headers;
};

export const getMfaEnrollUrl = () => {
  return `/v1/auth/mfa/enroll`;
};

export const mfaEnroll = async (
  enrollRequestBody: EnrollRequestBody,
  options?: RequestInit,
): Promise<mfaEnrollResponse> => {
  return customInstance<mfaEnrollResponse>(getMfaEnrollUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(enrollRequestBody),
  });
};

/**
 * Get enabled MFA methods
 * @summary methods mfa
 */
export type mfaMethodsResponse200 = {
  data: MethodsResponseBody;
  status: 200;
};

export type mfaMethodsResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type mfaMethodsResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type mfaMethodsResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type mfaMethodsResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type mfaMethodsResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type mfaMethodsResponseComposite =
  | mfaMethodsResponse200
  | mfaMethodsResponse400
  | mfaMethodsResponse401
  | mfaMethodsResponse403
  | mfaMethodsResponse404
  | mfaMethodsResponse500;

export type mfaMethodsResponse = mfaMethodsResponseComposite & {
  headers: Headers;
};

export const getMfaMethodsUrl = () => {
  return `/v1/auth/mfa/methods`;
};

export const mfaMethods = async (
  options?: RequestInit,
): Promise<mfaMethodsResponse> => {
  return customInstance<mfaMethodsResponse>(getMfaMethodsUrl(), {
    ...options,
    method: "GET",
  });
};

/**
 * Send verification code
 * @summary send_code mfa
 */
export type mfaSendCodeResponse200 = {
  data: SendCodeResponseBody;
  status: 200;
};

export type mfaSendCodeResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type mfaSendCodeResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type mfaSendCodeResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type mfaSendCodeResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type mfaSendCodeResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type mfaSendCodeResponseComposite =
  | mfaSendCodeResponse200
  | mfaSendCodeResponse400
  | mfaSendCodeResponse401
  | mfaSendCodeResponse403
  | mfaSendCodeResponse404
  | mfaSendCodeResponse500;

export type mfaSendCodeResponse = mfaSendCodeResponseComposite & {
  headers: Headers;
};

export const getMfaSendCodeUrl = () => {
  return `/v1/auth/mfa/send-code`;
};

export const mfaSendCode = async (
  sendCodeRequestBody: SendCodeRequestBody,
  options?: RequestInit,
): Promise<mfaSendCodeResponse> => {
  return customInstance<mfaSendCodeResponse>(getMfaSendCodeUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(sendCodeRequestBody),
  });
};

/**
 * Disable MFA method
 * @summary unenroll mfa
 */
export type mfaUnenrollResponse200 = {
  data: SendResponseBody;
  status: 200;
};

export type mfaUnenrollResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type mfaUnenrollResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type mfaUnenrollResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type mfaUnenrollResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type mfaUnenrollResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type mfaUnenrollResponseComposite =
  | mfaUnenrollResponse200
  | mfaUnenrollResponse400
  | mfaUnenrollResponse401
  | mfaUnenrollResponse403
  | mfaUnenrollResponse404
  | mfaUnenrollResponse500;

export type mfaUnenrollResponse = mfaUnenrollResponseComposite & {
  headers: Headers;
};

export const getMfaUnenrollUrl = () => {
  return `/v1/auth/mfa/unenroll`;
};

export const mfaUnenroll = async (
  unenrollRequestBody: UnenrollRequestBody,
  options?: RequestInit,
): Promise<mfaUnenrollResponse> => {
  return customInstance<mfaUnenrollResponse>(getMfaUnenrollUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(unenrollRequestBody),
  });
};

/**
 * Verify MFA code
 * @summary verify mfa
 */
export type mfaVerifyResponse200 = {
  data: VerifyResponseBody;
  status: 200;
};

export type mfaVerifyResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type mfaVerifyResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type mfaVerifyResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type mfaVerifyResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type mfaVerifyResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type mfaVerifyResponseComposite =
  | mfaVerifyResponse200
  | mfaVerifyResponse400
  | mfaVerifyResponse401
  | mfaVerifyResponse403
  | mfaVerifyResponse404
  | mfaVerifyResponse500;

export type mfaVerifyResponse = mfaVerifyResponseComposite & {
  headers: Headers;
};

export const getMfaVerifyUrl = () => {
  return `/v1/auth/mfa/verify`;
};

export const mfaVerify = async (
  verifyRequestBody: VerifyRequestBody,
  options?: RequestInit,
): Promise<mfaVerifyResponse> => {
  return customInstance<mfaVerifyResponse>(getMfaVerifyUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(verifyRequestBody),
  });
};
