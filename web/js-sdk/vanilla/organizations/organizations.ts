/**
 * Generated by orval v7.7.0 🍺
 * Do not edit manually.
 * Frank Authentication Server
 * A comprehensive authentication server with OAuth2, MFA, Passkeys, SSO, and more
 * OpenAPI spec version: 1.0.0
 */
import type {
  AddMemberRequestBody,
  BadRequestError,
  ConflictError,
  CreateRequestBody2,
  EnableFeatureRequestBody,
  ForbiddenError,
  InternalServerError,
  ListFeaturesResponseBody,
  ListMembersResponseBody,
  ListResponseBody2,
  NotFoundError,
  OrganizationResponse,
  OrganizationsListMembersParams,
  OrganizationsListParams,
  SendResponseBody,
  UnauthorizedError,
  UpdateMemberRequestBody,
  UpdateRequestBody2,
} from "../../model";

import { customInstance } from "../../mutator/custom-instance";

/**
 * List organizations
 * @summary list organizations
 */
export type organizationsListResponse200 = {
  data: ListResponseBody2;
  status: 200;
};

export type organizationsListResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type organizationsListResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type organizationsListResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type organizationsListResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type organizationsListResponse409 = {
  data: ConflictError;
  status: 409;
};

export type organizationsListResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type organizationsListResponseComposite =
  | organizationsListResponse200
  | organizationsListResponse400
  | organizationsListResponse401
  | organizationsListResponse403
  | organizationsListResponse404
  | organizationsListResponse409
  | organizationsListResponse500;

export type organizationsListResponse = organizationsListResponseComposite & {
  headers: Headers;
};

export const getOrganizationsListUrl = (params?: OrganizationsListParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/v1/organizations?${stringifiedParams}`
    : `/v1/organizations`;
};

export const organizationsList = async (
  params?: OrganizationsListParams,
  options?: RequestInit,
): Promise<organizationsListResponse> => {
  return customInstance<organizationsListResponse>(
    getOrganizationsListUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * Create a new organization
 * @summary create organizations
 */
export type organizationsCreateResponse201 = {
  data: OrganizationResponse;
  status: 201;
};

export type organizationsCreateResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type organizationsCreateResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type organizationsCreateResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type organizationsCreateResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type organizationsCreateResponse409 = {
  data: ConflictError;
  status: 409;
};

export type organizationsCreateResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type organizationsCreateResponseComposite =
  | organizationsCreateResponse201
  | organizationsCreateResponse400
  | organizationsCreateResponse401
  | organizationsCreateResponse403
  | organizationsCreateResponse404
  | organizationsCreateResponse409
  | organizationsCreateResponse500;

export type organizationsCreateResponse =
  organizationsCreateResponseComposite & {
    headers: Headers;
  };

export const getOrganizationsCreateUrl = () => {
  return `/v1/organizations`;
};

export const organizationsCreate = async (
  createRequestBody2: CreateRequestBody2,
  options?: RequestInit,
): Promise<organizationsCreateResponse> => {
  return customInstance<organizationsCreateResponse>(
    getOrganizationsCreateUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(createRequestBody2),
    },
  );
};

/**
 * Delete organization
 * @summary delete organizations
 */
export type organizationsDeleteResponse204 = {
  data: void;
  status: 204;
};

export type organizationsDeleteResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type organizationsDeleteResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type organizationsDeleteResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type organizationsDeleteResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type organizationsDeleteResponse409 = {
  data: ConflictError;
  status: 409;
};

export type organizationsDeleteResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type organizationsDeleteResponseComposite =
  | organizationsDeleteResponse204
  | organizationsDeleteResponse400
  | organizationsDeleteResponse401
  | organizationsDeleteResponse403
  | organizationsDeleteResponse404
  | organizationsDeleteResponse409
  | organizationsDeleteResponse500;

export type organizationsDeleteResponse =
  organizationsDeleteResponseComposite & {
    headers: Headers;
  };

export const getOrganizationsDeleteUrl = (id: string) => {
  return `/v1/organizations/${id}`;
};

export const organizationsDelete = async (
  id: string,
  options?: RequestInit,
): Promise<organizationsDeleteResponse> => {
  return customInstance<organizationsDeleteResponse>(
    getOrganizationsDeleteUrl(id),
    {
      ...options,
      method: "DELETE",
    },
  );
};

/**
 * Get organization by ID
 * @summary get organizations
 */
export type organizationsGetResponse200 = {
  data: OrganizationResponse;
  status: 200;
};

export type organizationsGetResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type organizationsGetResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type organizationsGetResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type organizationsGetResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type organizationsGetResponse409 = {
  data: ConflictError;
  status: 409;
};

export type organizationsGetResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type organizationsGetResponseComposite =
  | organizationsGetResponse200
  | organizationsGetResponse400
  | organizationsGetResponse401
  | organizationsGetResponse403
  | organizationsGetResponse404
  | organizationsGetResponse409
  | organizationsGetResponse500;

export type organizationsGetResponse = organizationsGetResponseComposite & {
  headers: Headers;
};

export const getOrganizationsGetUrl = (id: string) => {
  return `/v1/organizations/${id}`;
};

export const organizationsGet = async (
  id: string,
  options?: RequestInit,
): Promise<organizationsGetResponse> => {
  return customInstance<organizationsGetResponse>(getOrganizationsGetUrl(id), {
    ...options,
    method: "GET",
  });
};

/**
 * Update organization
 * @summary update organizations
 */
export type organizationsUpdateResponse200 = {
  data: OrganizationResponse;
  status: 200;
};

export type organizationsUpdateResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type organizationsUpdateResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type organizationsUpdateResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type organizationsUpdateResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type organizationsUpdateResponse409 = {
  data: ConflictError;
  status: 409;
};

export type organizationsUpdateResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type organizationsUpdateResponseComposite =
  | organizationsUpdateResponse200
  | organizationsUpdateResponse400
  | organizationsUpdateResponse401
  | organizationsUpdateResponse403
  | organizationsUpdateResponse404
  | organizationsUpdateResponse409
  | organizationsUpdateResponse500;

export type organizationsUpdateResponse =
  organizationsUpdateResponseComposite & {
    headers: Headers;
  };

export const getOrganizationsUpdateUrl = (id: string) => {
  return `/v1/organizations/${id}`;
};

export const organizationsUpdate = async (
  id: string,
  updateRequestBody2: UpdateRequestBody2,
  options?: RequestInit,
): Promise<organizationsUpdateResponse> => {
  return customInstance<organizationsUpdateResponse>(
    getOrganizationsUpdateUrl(id),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(updateRequestBody2),
    },
  );
};

/**
 * List organization features
 * @summary list_features organizations
 */
export type organizationsListFeaturesResponse200 = {
  data: ListFeaturesResponseBody;
  status: 200;
};

export type organizationsListFeaturesResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type organizationsListFeaturesResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type organizationsListFeaturesResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type organizationsListFeaturesResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type organizationsListFeaturesResponse409 = {
  data: ConflictError;
  status: 409;
};

export type organizationsListFeaturesResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type organizationsListFeaturesResponseComposite =
  | organizationsListFeaturesResponse200
  | organizationsListFeaturesResponse400
  | organizationsListFeaturesResponse401
  | organizationsListFeaturesResponse403
  | organizationsListFeaturesResponse404
  | organizationsListFeaturesResponse409
  | organizationsListFeaturesResponse500;

export type organizationsListFeaturesResponse =
  organizationsListFeaturesResponseComposite & {
    headers: Headers;
  };

export const getOrganizationsListFeaturesUrl = (id: string) => {
  return `/v1/organizations/${id}/features`;
};

export const organizationsListFeatures = async (
  id: string,
  options?: RequestInit,
): Promise<organizationsListFeaturesResponse> => {
  return customInstance<organizationsListFeaturesResponse>(
    getOrganizationsListFeaturesUrl(id),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * Enable a feature for an organization
 * @summary enable_feature organizations
 */
export type organizationsEnableFeatureResponse200 = {
  data: SendResponseBody;
  status: 200;
};

export type organizationsEnableFeatureResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type organizationsEnableFeatureResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type organizationsEnableFeatureResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type organizationsEnableFeatureResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type organizationsEnableFeatureResponse409 = {
  data: ConflictError;
  status: 409;
};

export type organizationsEnableFeatureResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type organizationsEnableFeatureResponseComposite =
  | organizationsEnableFeatureResponse200
  | organizationsEnableFeatureResponse400
  | organizationsEnableFeatureResponse401
  | organizationsEnableFeatureResponse403
  | organizationsEnableFeatureResponse404
  | organizationsEnableFeatureResponse409
  | organizationsEnableFeatureResponse500;

export type organizationsEnableFeatureResponse =
  organizationsEnableFeatureResponseComposite & {
    headers: Headers;
  };

export const getOrganizationsEnableFeatureUrl = (id: string) => {
  return `/v1/organizations/${id}/features`;
};

export const organizationsEnableFeature = async (
  id: string,
  enableFeatureRequestBody: EnableFeatureRequestBody,
  options?: RequestInit,
): Promise<organizationsEnableFeatureResponse> => {
  return customInstance<organizationsEnableFeatureResponse>(
    getOrganizationsEnableFeatureUrl(id),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(enableFeatureRequestBody),
    },
  );
};

/**
 * Disable a feature for an organization
 * @summary disable_feature organizations
 */
export type organizationsDisableFeatureResponse204 = {
  data: void;
  status: 204;
};

export type organizationsDisableFeatureResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type organizationsDisableFeatureResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type organizationsDisableFeatureResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type organizationsDisableFeatureResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type organizationsDisableFeatureResponse409 = {
  data: ConflictError;
  status: 409;
};

export type organizationsDisableFeatureResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type organizationsDisableFeatureResponseComposite =
  | organizationsDisableFeatureResponse204
  | organizationsDisableFeatureResponse400
  | organizationsDisableFeatureResponse401
  | organizationsDisableFeatureResponse403
  | organizationsDisableFeatureResponse404
  | organizationsDisableFeatureResponse409
  | organizationsDisableFeatureResponse500;

export type organizationsDisableFeatureResponse =
  organizationsDisableFeatureResponseComposite & {
    headers: Headers;
  };

export const getOrganizationsDisableFeatureUrl = (
  id: string,
  featureKey: string,
) => {
  return `/v1/organizations/${id}/features/${featureKey}`;
};

export const organizationsDisableFeature = async (
  id: string,
  featureKey: string,
  options?: RequestInit,
): Promise<organizationsDisableFeatureResponse> => {
  return customInstance<organizationsDisableFeatureResponse>(
    getOrganizationsDisableFeatureUrl(id, featureKey),
    {
      ...options,
      method: "DELETE",
    },
  );
};

/**
 * List organization members
 * @summary list_members organizations
 */
export type organizationsListMembersResponse200 = {
  data: ListMembersResponseBody;
  status: 200;
};

export type organizationsListMembersResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type organizationsListMembersResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type organizationsListMembersResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type organizationsListMembersResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type organizationsListMembersResponse409 = {
  data: ConflictError;
  status: 409;
};

export type organizationsListMembersResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type organizationsListMembersResponseComposite =
  | organizationsListMembersResponse200
  | organizationsListMembersResponse400
  | organizationsListMembersResponse401
  | organizationsListMembersResponse403
  | organizationsListMembersResponse404
  | organizationsListMembersResponse409
  | organizationsListMembersResponse500;

export type organizationsListMembersResponse =
  organizationsListMembersResponseComposite & {
    headers: Headers;
  };

export const getOrganizationsListMembersUrl = (
  id: string,
  params?: OrganizationsListMembersParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/v1/organizations/${id}/members?${stringifiedParams}`
    : `/v1/organizations/${id}/members`;
};

export const organizationsListMembers = async (
  id: string,
  params?: OrganizationsListMembersParams,
  options?: RequestInit,
): Promise<organizationsListMembersResponse> => {
  return customInstance<organizationsListMembersResponse>(
    getOrganizationsListMembersUrl(id, params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * Add member to organization
 * @summary add_member organizations
 */
export type organizationsAddMemberResponse200 = {
  data: SendResponseBody;
  status: 200;
};

export type organizationsAddMemberResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type organizationsAddMemberResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type organizationsAddMemberResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type organizationsAddMemberResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type organizationsAddMemberResponse409 = {
  data: ConflictError;
  status: 409;
};

export type organizationsAddMemberResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type organizationsAddMemberResponseComposite =
  | organizationsAddMemberResponse200
  | organizationsAddMemberResponse400
  | organizationsAddMemberResponse401
  | organizationsAddMemberResponse403
  | organizationsAddMemberResponse404
  | organizationsAddMemberResponse409
  | organizationsAddMemberResponse500;

export type organizationsAddMemberResponse =
  organizationsAddMemberResponseComposite & {
    headers: Headers;
  };

export const getOrganizationsAddMemberUrl = (id: string) => {
  return `/v1/organizations/${id}/members`;
};

export const organizationsAddMember = async (
  id: string,
  addMemberRequestBody: AddMemberRequestBody,
  options?: RequestInit,
): Promise<organizationsAddMemberResponse> => {
  return customInstance<organizationsAddMemberResponse>(
    getOrganizationsAddMemberUrl(id),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(addMemberRequestBody),
    },
  );
};

/**
 * Remove member from organization
 * @summary remove_member organizations
 */
export type organizationsRemoveMemberResponse204 = {
  data: void;
  status: 204;
};

export type organizationsRemoveMemberResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type organizationsRemoveMemberResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type organizationsRemoveMemberResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type organizationsRemoveMemberResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type organizationsRemoveMemberResponse409 = {
  data: ConflictError;
  status: 409;
};

export type organizationsRemoveMemberResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type organizationsRemoveMemberResponseComposite =
  | organizationsRemoveMemberResponse204
  | organizationsRemoveMemberResponse400
  | organizationsRemoveMemberResponse401
  | organizationsRemoveMemberResponse403
  | organizationsRemoveMemberResponse404
  | organizationsRemoveMemberResponse409
  | organizationsRemoveMemberResponse500;

export type organizationsRemoveMemberResponse =
  organizationsRemoveMemberResponseComposite & {
    headers: Headers;
  };

export const getOrganizationsRemoveMemberUrl = (id: string, userId: string) => {
  return `/v1/organizations/${id}/members/${userId}`;
};

export const organizationsRemoveMember = async (
  id: string,
  userId: string,
  options?: RequestInit,
): Promise<organizationsRemoveMemberResponse> => {
  return customInstance<organizationsRemoveMemberResponse>(
    getOrganizationsRemoveMemberUrl(id, userId),
    {
      ...options,
      method: "DELETE",
    },
  );
};

/**
 * Update organization member
 * @summary update_member organizations
 */
export type organizationsUpdateMemberResponse200 = {
  data: SendResponseBody;
  status: 200;
};

export type organizationsUpdateMemberResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type organizationsUpdateMemberResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type organizationsUpdateMemberResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type organizationsUpdateMemberResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type organizationsUpdateMemberResponse409 = {
  data: ConflictError;
  status: 409;
};

export type organizationsUpdateMemberResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type organizationsUpdateMemberResponseComposite =
  | organizationsUpdateMemberResponse200
  | organizationsUpdateMemberResponse400
  | organizationsUpdateMemberResponse401
  | organizationsUpdateMemberResponse403
  | organizationsUpdateMemberResponse404
  | organizationsUpdateMemberResponse409
  | organizationsUpdateMemberResponse500;

export type organizationsUpdateMemberResponse =
  organizationsUpdateMemberResponseComposite & {
    headers: Headers;
  };

export const getOrganizationsUpdateMemberUrl = (id: string, userId: string) => {
  return `/v1/organizations/${id}/members/${userId}`;
};

export const organizationsUpdateMember = async (
  id: string,
  userId: string,
  updateMemberRequestBody: UpdateMemberRequestBody,
  options?: RequestInit,
): Promise<organizationsUpdateMemberResponse> => {
  return customInstance<organizationsUpdateMemberResponse>(
    getOrganizationsUpdateMemberUrl(id, userId),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(updateMemberRequestBody),
    },
  );
};
