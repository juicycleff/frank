/**
 * Generated by orval v7.7.0 🍺
 * Do not edit manually.
 * Frank Authentication Server
 * A comprehensive authentication server with OAuth2, MFA, Passkeys, SSO, and more
 * OpenAPI spec version: 1.0.0
 */
import type {
  BadRequestError,
  ConflictError,
  ForbiddenError,
  InternalServerError,
  ListResponseBody3,
  LoginCompleteResponseBody,
  NotFoundError,
  PasskeyLoginCompleteRequest,
  PasskeyRegisterBeginRequest,
  PasskeyRegisterCompleteRequest,
  RegisterBeginResponseBody,
  RegisteredPasskey,
  SendResponseBody,
  UnauthorizedError,
  UpdateRequestBody3,
} from "../../model";

import { customInstance } from "../../mutator/custom-instance";

/**
 * List registered passkeys
 * @summary list passkeys
 */
export type passkeysListResponse200 = {
  data: ListResponseBody3;
  status: 200;
};

export type passkeysListResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type passkeysListResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type passkeysListResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type passkeysListResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type passkeysListResponse409 = {
  data: ConflictError;
  status: 409;
};

export type passkeysListResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type passkeysListResponseComposite =
  | passkeysListResponse200
  | passkeysListResponse400
  | passkeysListResponse401
  | passkeysListResponse403
  | passkeysListResponse404
  | passkeysListResponse409
  | passkeysListResponse500;

export type passkeysListResponse = passkeysListResponseComposite & {
  headers: Headers;
};

export const getPasskeysListUrl = () => {
  return `/v1/auth/passkeys`;
};

export const passkeysList = async (
  options?: RequestInit,
): Promise<passkeysListResponse> => {
  return customInstance<passkeysListResponse>(getPasskeysListUrl(), {
    ...options,
    method: "GET",
  });
};

/**
 * Begin passkey authentication
 * @summary login_begin passkeys
 */
export type passkeysLoginBeginResponse200 = {
  data: RegisterBeginResponseBody;
  status: 200;
};

export type passkeysLoginBeginResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type passkeysLoginBeginResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type passkeysLoginBeginResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type passkeysLoginBeginResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type passkeysLoginBeginResponse409 = {
  data: ConflictError;
  status: 409;
};

export type passkeysLoginBeginResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type passkeysLoginBeginResponseComposite =
  | passkeysLoginBeginResponse200
  | passkeysLoginBeginResponse400
  | passkeysLoginBeginResponse401
  | passkeysLoginBeginResponse403
  | passkeysLoginBeginResponse404
  | passkeysLoginBeginResponse409
  | passkeysLoginBeginResponse500;

export type passkeysLoginBeginResponse = passkeysLoginBeginResponseComposite & {
  headers: Headers;
};

export const getPasskeysLoginBeginUrl = () => {
  return `/v1/auth/passkeys/login/begin`;
};

export const passkeysLoginBegin = async (
  options?: RequestInit,
): Promise<passkeysLoginBeginResponse> => {
  return customInstance<passkeysLoginBeginResponse>(
    getPasskeysLoginBeginUrl(),
    {
      ...options,
      method: "POST",
    },
  );
};

/**
 * Complete passkey authentication
 * @summary login_complete passkeys
 */
export type passkeysLoginCompleteResponse200 = {
  data: LoginCompleteResponseBody;
  status: 200;
};

export type passkeysLoginCompleteResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type passkeysLoginCompleteResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type passkeysLoginCompleteResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type passkeysLoginCompleteResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type passkeysLoginCompleteResponse409 = {
  data: ConflictError;
  status: 409;
};

export type passkeysLoginCompleteResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type passkeysLoginCompleteResponseComposite =
  | passkeysLoginCompleteResponse200
  | passkeysLoginCompleteResponse400
  | passkeysLoginCompleteResponse401
  | passkeysLoginCompleteResponse403
  | passkeysLoginCompleteResponse404
  | passkeysLoginCompleteResponse409
  | passkeysLoginCompleteResponse500;

export type passkeysLoginCompleteResponse =
  passkeysLoginCompleteResponseComposite & {
    headers: Headers;
  };

export const getPasskeysLoginCompleteUrl = () => {
  return `/v1/auth/passkeys/login/complete`;
};

export const passkeysLoginComplete = async (
  passkeyLoginCompleteRequest: PasskeyLoginCompleteRequest,
  options?: RequestInit,
): Promise<passkeysLoginCompleteResponse> => {
  return customInstance<passkeysLoginCompleteResponse>(
    getPasskeysLoginCompleteUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(passkeyLoginCompleteRequest),
    },
  );
};

/**
 * Begin passkey registration
 * @summary register_begin passkeys
 */
export type passkeysRegisterBeginResponse200 = {
  data: RegisterBeginResponseBody;
  status: 200;
};

export type passkeysRegisterBeginResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type passkeysRegisterBeginResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type passkeysRegisterBeginResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type passkeysRegisterBeginResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type passkeysRegisterBeginResponse409 = {
  data: ConflictError;
  status: 409;
};

export type passkeysRegisterBeginResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type passkeysRegisterBeginResponseComposite =
  | passkeysRegisterBeginResponse200
  | passkeysRegisterBeginResponse400
  | passkeysRegisterBeginResponse401
  | passkeysRegisterBeginResponse403
  | passkeysRegisterBeginResponse404
  | passkeysRegisterBeginResponse409
  | passkeysRegisterBeginResponse500;

export type passkeysRegisterBeginResponse =
  passkeysRegisterBeginResponseComposite & {
    headers: Headers;
  };

export const getPasskeysRegisterBeginUrl = () => {
  return `/v1/auth/passkeys/register/begin`;
};

export const passkeysRegisterBegin = async (
  passkeyRegisterBeginRequest: PasskeyRegisterBeginRequest,
  options?: RequestInit,
): Promise<passkeysRegisterBeginResponse> => {
  return customInstance<passkeysRegisterBeginResponse>(
    getPasskeysRegisterBeginUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(passkeyRegisterBeginRequest),
    },
  );
};

/**
 * Complete passkey registration
 * @summary register_complete passkeys
 */
export type passkeysRegisterCompleteResponse200 = {
  data: RegisteredPasskey;
  status: 200;
};

export type passkeysRegisterCompleteResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type passkeysRegisterCompleteResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type passkeysRegisterCompleteResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type passkeysRegisterCompleteResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type passkeysRegisterCompleteResponse409 = {
  data: ConflictError;
  status: 409;
};

export type passkeysRegisterCompleteResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type passkeysRegisterCompleteResponseComposite =
  | passkeysRegisterCompleteResponse200
  | passkeysRegisterCompleteResponse400
  | passkeysRegisterCompleteResponse401
  | passkeysRegisterCompleteResponse403
  | passkeysRegisterCompleteResponse404
  | passkeysRegisterCompleteResponse409
  | passkeysRegisterCompleteResponse500;

export type passkeysRegisterCompleteResponse =
  passkeysRegisterCompleteResponseComposite & {
    headers: Headers;
  };

export const getPasskeysRegisterCompleteUrl = () => {
  return `/v1/auth/passkeys/register/complete`;
};

export const passkeysRegisterComplete = async (
  passkeyRegisterCompleteRequest: PasskeyRegisterCompleteRequest,
  options?: RequestInit,
): Promise<passkeysRegisterCompleteResponse> => {
  return customInstance<passkeysRegisterCompleteResponse>(
    getPasskeysRegisterCompleteUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(passkeyRegisterCompleteRequest),
    },
  );
};

/**
 * Delete passkey
 * @summary delete passkeys
 */
export type passkeysDeleteResponse204 = {
  data: void;
  status: 204;
};

export type passkeysDeleteResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type passkeysDeleteResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type passkeysDeleteResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type passkeysDeleteResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type passkeysDeleteResponse409 = {
  data: ConflictError;
  status: 409;
};

export type passkeysDeleteResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type passkeysDeleteResponseComposite =
  | passkeysDeleteResponse204
  | passkeysDeleteResponse400
  | passkeysDeleteResponse401
  | passkeysDeleteResponse403
  | passkeysDeleteResponse404
  | passkeysDeleteResponse409
  | passkeysDeleteResponse500;

export type passkeysDeleteResponse = passkeysDeleteResponseComposite & {
  headers: Headers;
};

export const getPasskeysDeleteUrl = (id: string) => {
  return `/v1/auth/passkeys/${id}`;
};

export const passkeysDelete = async (
  id: string,
  options?: RequestInit,
): Promise<passkeysDeleteResponse> => {
  return customInstance<passkeysDeleteResponse>(getPasskeysDeleteUrl(id), {
    ...options,
    method: "DELETE",
  });
};

/**
 * Update passkey
 * @summary update passkeys
 */
export type passkeysUpdateResponse200 = {
  data: SendResponseBody;
  status: 200;
};

export type passkeysUpdateResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type passkeysUpdateResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type passkeysUpdateResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type passkeysUpdateResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type passkeysUpdateResponse409 = {
  data: ConflictError;
  status: 409;
};

export type passkeysUpdateResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type passkeysUpdateResponseComposite =
  | passkeysUpdateResponse200
  | passkeysUpdateResponse400
  | passkeysUpdateResponse401
  | passkeysUpdateResponse403
  | passkeysUpdateResponse404
  | passkeysUpdateResponse409
  | passkeysUpdateResponse500;

export type passkeysUpdateResponse = passkeysUpdateResponseComposite & {
  headers: Headers;
};

export const getPasskeysUpdateUrl = (id: string) => {
  return `/v1/auth/passkeys/${id}`;
};

export const passkeysUpdate = async (
  id: string,
  updateRequestBody3: UpdateRequestBody3,
  options?: RequestInit,
): Promise<passkeysUpdateResponse> => {
  return customInstance<passkeysUpdateResponse>(getPasskeysUpdateUrl(id), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(updateRequestBody3),
  });
};
