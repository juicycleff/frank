/**
 * Generated by orval v7.7.0 🍺
 * Do not edit manually.
 * Frank Authentication Server
 * A comprehensive authentication server with OAuth2, MFA, Passkeys, SSO, and more
 * OpenAPI spec version: 1.0.0
 */
import type {
  AddRolePermissionRequestBody,
  BadRequestError,
  CheckPermissionResponseBody,
  CheckRoleResponseBody,
  ConflictError,
  CreatePermissionRequestBody,
  CreateRoleRequestBody,
  ForbiddenError,
  InternalServerError,
  ListPermissionsResponse,
  ListRolePermissionsResponseBody,
  ListRolesResponseBody,
  NotFoundError,
  PermissionResponse,
  RbacCheckPermissionParams,
  RbacCheckRoleParams,
  RbacListPermissionsParams,
  RbacListRolesParams,
  RoleResponse,
  SendResponseBody,
  UnauthorizedError,
  UpdatePermissionRequestBody,
  UpdateRoleRequestBody,
} from "../../model";

import { customInstance } from "../../mutator/custom-instance";

/**
 * Check if user has a permission
 * @summary check_permission rbac
 */
export type rbacCheckPermissionResponse200 = {
  data: CheckPermissionResponseBody;
  status: 200;
};

export type rbacCheckPermissionResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type rbacCheckPermissionResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type rbacCheckPermissionResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type rbacCheckPermissionResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type rbacCheckPermissionResponse409 = {
  data: ConflictError;
  status: 409;
};

export type rbacCheckPermissionResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type rbacCheckPermissionResponseComposite =
  | rbacCheckPermissionResponse200
  | rbacCheckPermissionResponse400
  | rbacCheckPermissionResponse401
  | rbacCheckPermissionResponse403
  | rbacCheckPermissionResponse404
  | rbacCheckPermissionResponse409
  | rbacCheckPermissionResponse500;

export type rbacCheckPermissionResponse =
  rbacCheckPermissionResponseComposite & {
    headers: Headers;
  };

export const getRbacCheckPermissionUrl = (
  params: RbacCheckPermissionParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/v1/access/check?${stringifiedParams}`
    : `/v1/access/check`;
};

export const rbacCheckPermission = async (
  params: RbacCheckPermissionParams,
  options?: RequestInit,
): Promise<rbacCheckPermissionResponse> => {
  return customInstance<rbacCheckPermissionResponse>(
    getRbacCheckPermissionUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * Check if user has a role
 * @summary check_role rbac
 */
export type rbacCheckRoleResponse200 = {
  data: CheckRoleResponseBody;
  status: 200;
};

export type rbacCheckRoleResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type rbacCheckRoleResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type rbacCheckRoleResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type rbacCheckRoleResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type rbacCheckRoleResponse409 = {
  data: ConflictError;
  status: 409;
};

export type rbacCheckRoleResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type rbacCheckRoleResponseComposite =
  | rbacCheckRoleResponse200
  | rbacCheckRoleResponse400
  | rbacCheckRoleResponse401
  | rbacCheckRoleResponse403
  | rbacCheckRoleResponse404
  | rbacCheckRoleResponse409
  | rbacCheckRoleResponse500;

export type rbacCheckRoleResponse = rbacCheckRoleResponseComposite & {
  headers: Headers;
};

export const getRbacCheckRoleUrl = (params: RbacCheckRoleParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/v1/access/check-role?${stringifiedParams}`
    : `/v1/access/check-role`;
};

export const rbacCheckRole = async (
  params: RbacCheckRoleParams,
  options?: RequestInit,
): Promise<rbacCheckRoleResponse> => {
  return customInstance<rbacCheckRoleResponse>(getRbacCheckRoleUrl(params), {
    ...options,
    method: "GET",
  });
};

/**
 * List permissions
 * @summary list_permissions rbac
 */
export type rbacListPermissionsResponse200 = {
  data: ListPermissionsResponse;
  status: 200;
};

export type rbacListPermissionsResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type rbacListPermissionsResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type rbacListPermissionsResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type rbacListPermissionsResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type rbacListPermissionsResponse409 = {
  data: ConflictError;
  status: 409;
};

export type rbacListPermissionsResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type rbacListPermissionsResponseComposite =
  | rbacListPermissionsResponse200
  | rbacListPermissionsResponse400
  | rbacListPermissionsResponse401
  | rbacListPermissionsResponse403
  | rbacListPermissionsResponse404
  | rbacListPermissionsResponse409
  | rbacListPermissionsResponse500;

export type rbacListPermissionsResponse =
  rbacListPermissionsResponseComposite & {
    headers: Headers;
  };

export const getRbacListPermissionsUrl = (
  params?: RbacListPermissionsParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/v1/permissions?${stringifiedParams}`
    : `/v1/permissions`;
};

export const rbacListPermissions = async (
  params?: RbacListPermissionsParams,
  options?: RequestInit,
): Promise<rbacListPermissionsResponse> => {
  return customInstance<rbacListPermissionsResponse>(
    getRbacListPermissionsUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * Create a new permission
 * @summary create_permission rbac
 */
export type rbacCreatePermissionResponse201 = {
  data: PermissionResponse;
  status: 201;
};

export type rbacCreatePermissionResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type rbacCreatePermissionResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type rbacCreatePermissionResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type rbacCreatePermissionResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type rbacCreatePermissionResponse409 = {
  data: ConflictError;
  status: 409;
};

export type rbacCreatePermissionResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type rbacCreatePermissionResponseComposite =
  | rbacCreatePermissionResponse201
  | rbacCreatePermissionResponse400
  | rbacCreatePermissionResponse401
  | rbacCreatePermissionResponse403
  | rbacCreatePermissionResponse404
  | rbacCreatePermissionResponse409
  | rbacCreatePermissionResponse500;

export type rbacCreatePermissionResponse =
  rbacCreatePermissionResponseComposite & {
    headers: Headers;
  };

export const getRbacCreatePermissionUrl = () => {
  return `/v1/permissions`;
};

export const rbacCreatePermission = async (
  createPermissionRequestBody: CreatePermissionRequestBody,
  options?: RequestInit,
): Promise<rbacCreatePermissionResponse> => {
  return customInstance<rbacCreatePermissionResponse>(
    getRbacCreatePermissionUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(createPermissionRequestBody),
    },
  );
};

/**
 * Delete permission
 * @summary delete_permission rbac
 */
export type rbacDeletePermissionResponse204 = {
  data: void;
  status: 204;
};

export type rbacDeletePermissionResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type rbacDeletePermissionResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type rbacDeletePermissionResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type rbacDeletePermissionResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type rbacDeletePermissionResponse409 = {
  data: ConflictError;
  status: 409;
};

export type rbacDeletePermissionResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type rbacDeletePermissionResponseComposite =
  | rbacDeletePermissionResponse204
  | rbacDeletePermissionResponse400
  | rbacDeletePermissionResponse401
  | rbacDeletePermissionResponse403
  | rbacDeletePermissionResponse404
  | rbacDeletePermissionResponse409
  | rbacDeletePermissionResponse500;

export type rbacDeletePermissionResponse =
  rbacDeletePermissionResponseComposite & {
    headers: Headers;
  };

export const getRbacDeletePermissionUrl = (id: string) => {
  return `/v1/permissions/${id}`;
};

export const rbacDeletePermission = async (
  id: string,
  options?: RequestInit,
): Promise<rbacDeletePermissionResponse> => {
  return customInstance<rbacDeletePermissionResponse>(
    getRbacDeletePermissionUrl(id),
    {
      ...options,
      method: "DELETE",
    },
  );
};

/**
 * Get permission by ID
 * @summary get_permission rbac
 */
export type rbacGetPermissionResponse200 = {
  data: PermissionResponse;
  status: 200;
};

export type rbacGetPermissionResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type rbacGetPermissionResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type rbacGetPermissionResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type rbacGetPermissionResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type rbacGetPermissionResponse409 = {
  data: ConflictError;
  status: 409;
};

export type rbacGetPermissionResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type rbacGetPermissionResponseComposite =
  | rbacGetPermissionResponse200
  | rbacGetPermissionResponse400
  | rbacGetPermissionResponse401
  | rbacGetPermissionResponse403
  | rbacGetPermissionResponse404
  | rbacGetPermissionResponse409
  | rbacGetPermissionResponse500;

export type rbacGetPermissionResponse = rbacGetPermissionResponseComposite & {
  headers: Headers;
};

export const getRbacGetPermissionUrl = (id: string) => {
  return `/v1/permissions/${id}`;
};

export const rbacGetPermission = async (
  id: string,
  options?: RequestInit,
): Promise<rbacGetPermissionResponse> => {
  return customInstance<rbacGetPermissionResponse>(
    getRbacGetPermissionUrl(id),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * Update permission
 * @summary update_permission rbac
 */
export type rbacUpdatePermissionResponse200 = {
  data: PermissionResponse;
  status: 200;
};

export type rbacUpdatePermissionResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type rbacUpdatePermissionResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type rbacUpdatePermissionResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type rbacUpdatePermissionResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type rbacUpdatePermissionResponse409 = {
  data: ConflictError;
  status: 409;
};

export type rbacUpdatePermissionResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type rbacUpdatePermissionResponseComposite =
  | rbacUpdatePermissionResponse200
  | rbacUpdatePermissionResponse400
  | rbacUpdatePermissionResponse401
  | rbacUpdatePermissionResponse403
  | rbacUpdatePermissionResponse404
  | rbacUpdatePermissionResponse409
  | rbacUpdatePermissionResponse500;

export type rbacUpdatePermissionResponse =
  rbacUpdatePermissionResponseComposite & {
    headers: Headers;
  };

export const getRbacUpdatePermissionUrl = (id: string) => {
  return `/v1/permissions/${id}`;
};

export const rbacUpdatePermission = async (
  id: string,
  updatePermissionRequestBody: UpdatePermissionRequestBody,
  options?: RequestInit,
): Promise<rbacUpdatePermissionResponse> => {
  return customInstance<rbacUpdatePermissionResponse>(
    getRbacUpdatePermissionUrl(id),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(updatePermissionRequestBody),
    },
  );
};

/**
 * List roles
 * @summary list_roles rbac
 */
export type rbacListRolesResponse200 = {
  data: ListRolesResponseBody;
  status: 200;
};

export type rbacListRolesResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type rbacListRolesResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type rbacListRolesResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type rbacListRolesResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type rbacListRolesResponse409 = {
  data: ConflictError;
  status: 409;
};

export type rbacListRolesResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type rbacListRolesResponseComposite =
  | rbacListRolesResponse200
  | rbacListRolesResponse400
  | rbacListRolesResponse401
  | rbacListRolesResponse403
  | rbacListRolesResponse404
  | rbacListRolesResponse409
  | rbacListRolesResponse500;

export type rbacListRolesResponse = rbacListRolesResponseComposite & {
  headers: Headers;
};

export const getRbacListRolesUrl = (params?: RbacListRolesParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/v1/roles?${stringifiedParams}`
    : `/v1/roles`;
};

export const rbacListRoles = async (
  params?: RbacListRolesParams,
  options?: RequestInit,
): Promise<rbacListRolesResponse> => {
  return customInstance<rbacListRolesResponse>(getRbacListRolesUrl(params), {
    ...options,
    method: "GET",
  });
};

/**
 * Create a new role
 * @summary create_role rbac
 */
export type rbacCreateRoleResponse201 = {
  data: RoleResponse;
  status: 201;
};

export type rbacCreateRoleResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type rbacCreateRoleResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type rbacCreateRoleResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type rbacCreateRoleResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type rbacCreateRoleResponse409 = {
  data: ConflictError;
  status: 409;
};

export type rbacCreateRoleResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type rbacCreateRoleResponseComposite =
  | rbacCreateRoleResponse201
  | rbacCreateRoleResponse400
  | rbacCreateRoleResponse401
  | rbacCreateRoleResponse403
  | rbacCreateRoleResponse404
  | rbacCreateRoleResponse409
  | rbacCreateRoleResponse500;

export type rbacCreateRoleResponse = rbacCreateRoleResponseComposite & {
  headers: Headers;
};

export const getRbacCreateRoleUrl = () => {
  return `/v1/roles`;
};

export const rbacCreateRole = async (
  createRoleRequestBody: CreateRoleRequestBody,
  options?: RequestInit,
): Promise<rbacCreateRoleResponse> => {
  return customInstance<rbacCreateRoleResponse>(getRbacCreateRoleUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(createRoleRequestBody),
  });
};

/**
 * Delete role
 * @summary delete_role rbac
 */
export type rbacDeleteRoleResponse204 = {
  data: void;
  status: 204;
};

export type rbacDeleteRoleResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type rbacDeleteRoleResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type rbacDeleteRoleResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type rbacDeleteRoleResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type rbacDeleteRoleResponse409 = {
  data: ConflictError;
  status: 409;
};

export type rbacDeleteRoleResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type rbacDeleteRoleResponseComposite =
  | rbacDeleteRoleResponse204
  | rbacDeleteRoleResponse400
  | rbacDeleteRoleResponse401
  | rbacDeleteRoleResponse403
  | rbacDeleteRoleResponse404
  | rbacDeleteRoleResponse409
  | rbacDeleteRoleResponse500;

export type rbacDeleteRoleResponse = rbacDeleteRoleResponseComposite & {
  headers: Headers;
};

export const getRbacDeleteRoleUrl = (id: string) => {
  return `/v1/roles/${id}`;
};

export const rbacDeleteRole = async (
  id: string,
  options?: RequestInit,
): Promise<rbacDeleteRoleResponse> => {
  return customInstance<rbacDeleteRoleResponse>(getRbacDeleteRoleUrl(id), {
    ...options,
    method: "DELETE",
  });
};

/**
 * Get role by ID
 * @summary get_role rbac
 */
export type rbacGetRoleResponse200 = {
  data: RoleResponse;
  status: 200;
};

export type rbacGetRoleResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type rbacGetRoleResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type rbacGetRoleResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type rbacGetRoleResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type rbacGetRoleResponse409 = {
  data: ConflictError;
  status: 409;
};

export type rbacGetRoleResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type rbacGetRoleResponseComposite =
  | rbacGetRoleResponse200
  | rbacGetRoleResponse400
  | rbacGetRoleResponse401
  | rbacGetRoleResponse403
  | rbacGetRoleResponse404
  | rbacGetRoleResponse409
  | rbacGetRoleResponse500;

export type rbacGetRoleResponse = rbacGetRoleResponseComposite & {
  headers: Headers;
};

export const getRbacGetRoleUrl = (id: string) => {
  return `/v1/roles/${id}`;
};

export const rbacGetRole = async (
  id: string,
  options?: RequestInit,
): Promise<rbacGetRoleResponse> => {
  return customInstance<rbacGetRoleResponse>(getRbacGetRoleUrl(id), {
    ...options,
    method: "GET",
  });
};

/**
 * Update role
 * @summary update_role rbac
 */
export type rbacUpdateRoleResponse200 = {
  data: RoleResponse;
  status: 200;
};

export type rbacUpdateRoleResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type rbacUpdateRoleResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type rbacUpdateRoleResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type rbacUpdateRoleResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type rbacUpdateRoleResponse409 = {
  data: ConflictError;
  status: 409;
};

export type rbacUpdateRoleResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type rbacUpdateRoleResponseComposite =
  | rbacUpdateRoleResponse200
  | rbacUpdateRoleResponse400
  | rbacUpdateRoleResponse401
  | rbacUpdateRoleResponse403
  | rbacUpdateRoleResponse404
  | rbacUpdateRoleResponse409
  | rbacUpdateRoleResponse500;

export type rbacUpdateRoleResponse = rbacUpdateRoleResponseComposite & {
  headers: Headers;
};

export const getRbacUpdateRoleUrl = (id: string) => {
  return `/v1/roles/${id}`;
};

export const rbacUpdateRole = async (
  id: string,
  updateRoleRequestBody: UpdateRoleRequestBody,
  options?: RequestInit,
): Promise<rbacUpdateRoleResponse> => {
  return customInstance<rbacUpdateRoleResponse>(getRbacUpdateRoleUrl(id), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(updateRoleRequestBody),
  });
};

/**
 * List role permissions
 * @summary list_role_permissions rbac
 */
export type rbacListRolePermissionsResponse200 = {
  data: ListRolePermissionsResponseBody;
  status: 200;
};

export type rbacListRolePermissionsResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type rbacListRolePermissionsResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type rbacListRolePermissionsResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type rbacListRolePermissionsResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type rbacListRolePermissionsResponse409 = {
  data: ConflictError;
  status: 409;
};

export type rbacListRolePermissionsResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type rbacListRolePermissionsResponseComposite =
  | rbacListRolePermissionsResponse200
  | rbacListRolePermissionsResponse400
  | rbacListRolePermissionsResponse401
  | rbacListRolePermissionsResponse403
  | rbacListRolePermissionsResponse404
  | rbacListRolePermissionsResponse409
  | rbacListRolePermissionsResponse500;

export type rbacListRolePermissionsResponse =
  rbacListRolePermissionsResponseComposite & {
    headers: Headers;
  };

export const getRbacListRolePermissionsUrl = (id: string) => {
  return `/v1/roles/${id}/permissions`;
};

export const rbacListRolePermissions = async (
  id: string,
  options?: RequestInit,
): Promise<rbacListRolePermissionsResponse> => {
  return customInstance<rbacListRolePermissionsResponse>(
    getRbacListRolePermissionsUrl(id),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * Add permission to role
 * @summary add_role_permission rbac
 */
export type rbacAddRolePermissionResponse200 = {
  data: SendResponseBody;
  status: 200;
};

export type rbacAddRolePermissionResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type rbacAddRolePermissionResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type rbacAddRolePermissionResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type rbacAddRolePermissionResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type rbacAddRolePermissionResponse409 = {
  data: ConflictError;
  status: 409;
};

export type rbacAddRolePermissionResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type rbacAddRolePermissionResponseComposite =
  | rbacAddRolePermissionResponse200
  | rbacAddRolePermissionResponse400
  | rbacAddRolePermissionResponse401
  | rbacAddRolePermissionResponse403
  | rbacAddRolePermissionResponse404
  | rbacAddRolePermissionResponse409
  | rbacAddRolePermissionResponse500;

export type rbacAddRolePermissionResponse =
  rbacAddRolePermissionResponseComposite & {
    headers: Headers;
  };

export const getRbacAddRolePermissionUrl = (id: string) => {
  return `/v1/roles/${id}/permissions`;
};

export const rbacAddRolePermission = async (
  id: string,
  addRolePermissionRequestBody: AddRolePermissionRequestBody,
  options?: RequestInit,
): Promise<rbacAddRolePermissionResponse> => {
  return customInstance<rbacAddRolePermissionResponse>(
    getRbacAddRolePermissionUrl(id),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(addRolePermissionRequestBody),
    },
  );
};

/**
 * Remove permission from role
 * @summary remove_role_permission rbac
 */
export type rbacRemoveRolePermissionResponse204 = {
  data: void;
  status: 204;
};

export type rbacRemoveRolePermissionResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type rbacRemoveRolePermissionResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type rbacRemoveRolePermissionResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type rbacRemoveRolePermissionResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type rbacRemoveRolePermissionResponse409 = {
  data: ConflictError;
  status: 409;
};

export type rbacRemoveRolePermissionResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type rbacRemoveRolePermissionResponseComposite =
  | rbacRemoveRolePermissionResponse204
  | rbacRemoveRolePermissionResponse400
  | rbacRemoveRolePermissionResponse401
  | rbacRemoveRolePermissionResponse403
  | rbacRemoveRolePermissionResponse404
  | rbacRemoveRolePermissionResponse409
  | rbacRemoveRolePermissionResponse500;

export type rbacRemoveRolePermissionResponse =
  rbacRemoveRolePermissionResponseComposite & {
    headers: Headers;
  };

export const getRbacRemoveRolePermissionUrl = (
  id: string,
  permissionId: string,
) => {
  return `/v1/roles/${id}/permissions/${permissionId}`;
};

export const rbacRemoveRolePermission = async (
  id: string,
  permissionId: string,
  options?: RequestInit,
): Promise<rbacRemoveRolePermissionResponse> => {
  return customInstance<rbacRemoveRolePermissionResponse>(
    getRbacRemoveRolePermissionUrl(id, permissionId),
    {
      ...options,
      method: "DELETE",
    },
  );
};
