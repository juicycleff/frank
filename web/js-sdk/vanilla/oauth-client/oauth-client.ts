/**
 * Generated by orval v7.7.0 🍺
 * Do not edit manually.
 * Frank Authentication Server
 * A comprehensive authentication server with OAuth2, MFA, Passkeys, SSO, and more
 * OpenAPI spec version: 1.0.0
 */
import type {
  BadRequestError,
  ForbiddenError,
  InternalServerError,
  ListProvidersResponseBody,
  NotFoundError,
  OauthClientProviderAuthParams,
  OauthClientProviderCallbackParams,
  ProviderCallbackResponseBody,
  UnauthorizedError,
} from "../../model";

import { customInstance } from "../../mutator/custom-instance";

/**
 * Handle OAuth provider callback
 * @summary provider_callback oauth_client
 */
export type oauthClientProviderCallbackResponse200 = {
  data: ProviderCallbackResponseBody;
  status: 200;
};

export type oauthClientProviderCallbackResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type oauthClientProviderCallbackResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type oauthClientProviderCallbackResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type oauthClientProviderCallbackResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type oauthClientProviderCallbackResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type oauthClientProviderCallbackResponseComposite =
  | oauthClientProviderCallbackResponse200
  | oauthClientProviderCallbackResponse400
  | oauthClientProviderCallbackResponse401
  | oauthClientProviderCallbackResponse403
  | oauthClientProviderCallbackResponse404
  | oauthClientProviderCallbackResponse500;

export type oauthClientProviderCallbackResponse =
  oauthClientProviderCallbackResponseComposite & {
    headers: Headers;
  };

export const getOauthClientProviderCallbackUrl = (
  provider: string,
  params?: OauthClientProviderCallbackParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/v1/auth/oauth/callback/${provider}?${stringifiedParams}`
    : `/v1/auth/oauth/callback/${provider}`;
};

export const oauthClientProviderCallback = async (
  provider: string,
  params?: OauthClientProviderCallbackParams,
  options?: RequestInit,
): Promise<oauthClientProviderCallbackResponse> => {
  return customInstance<oauthClientProviderCallbackResponse>(
    getOauthClientProviderCallbackUrl(provider, params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * List available OAuth providers
 * @summary list_providers oauth_client
 */
export type oauthClientListProvidersResponse200 = {
  data: ListProvidersResponseBody;
  status: 200;
};

export type oauthClientListProvidersResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type oauthClientListProvidersResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type oauthClientListProvidersResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type oauthClientListProvidersResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type oauthClientListProvidersResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type oauthClientListProvidersResponseComposite =
  | oauthClientListProvidersResponse200
  | oauthClientListProvidersResponse400
  | oauthClientListProvidersResponse401
  | oauthClientListProvidersResponse403
  | oauthClientListProvidersResponse404
  | oauthClientListProvidersResponse500;

export type oauthClientListProvidersResponse =
  oauthClientListProvidersResponseComposite & {
    headers: Headers;
  };

export const getOauthClientListProvidersUrl = () => {
  return `/v1/auth/oauth/providers`;
};

export const oauthClientListProviders = async (
  options?: RequestInit,
): Promise<oauthClientListProvidersResponse> => {
  return customInstance<oauthClientListProvidersResponse>(
    getOauthClientListProvidersUrl(),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * Initiate authentication with an OAuth provider
 * @summary provider_auth oauth_client
 */
export type oauthClientProviderAuthResponse302 = {
  data: void;
  status: 302;
};

export type oauthClientProviderAuthResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type oauthClientProviderAuthResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type oauthClientProviderAuthResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type oauthClientProviderAuthResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type oauthClientProviderAuthResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type oauthClientProviderAuthResponseComposite =
  | oauthClientProviderAuthResponse302
  | oauthClientProviderAuthResponse400
  | oauthClientProviderAuthResponse401
  | oauthClientProviderAuthResponse403
  | oauthClientProviderAuthResponse404
  | oauthClientProviderAuthResponse500;

export type oauthClientProviderAuthResponse =
  oauthClientProviderAuthResponseComposite & {
    headers: Headers;
  };

export const getOauthClientProviderAuthUrl = (
  provider: string,
  params?: OauthClientProviderAuthParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/v1/auth/oauth/providers/${provider}?${stringifiedParams}`
    : `/v1/auth/oauth/providers/${provider}`;
};

export const oauthClientProviderAuth = async (
  provider: string,
  params?: OauthClientProviderAuthParams,
  options?: RequestInit,
): Promise<oauthClientProviderAuthResponse> => {
  return customInstance<oauthClientProviderAuthResponse>(
    getOauthClientProviderAuthUrl(provider, params),
    {
      ...options,
      method: "GET",
    },
  );
};
