/**
 * Generated by orval v7.7.0 🍺
 * Do not edit manually.
 * Frank Authentication Server
 * A comprehensive authentication server with OAuth2, MFA, Passkeys, SSO, and more
 * OpenAPI spec version: 1.0.0
 */
import type {
  APIKeyResponse,
  APIKeyWithSecretResponse,
  ApiKeysListParams,
  ApiKeysValidateParams,
  BadRequestError,
  CreateRequestBody,
  ForbiddenError,
  InternalServerError,
  ListResponseBody,
  NotFoundError,
  UnauthorizedError,
  UpdateRequestBody,
  ValidateResponseBody,
} from "../../model";

import { customInstance } from "../../mutator/custom-instance";

/**
 * List API keys
 * @summary list api_keys
 */
export type apiKeysListResponse200 = {
  data: ListResponseBody;
  status: 200;
};

export type apiKeysListResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type apiKeysListResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type apiKeysListResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type apiKeysListResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type apiKeysListResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type apiKeysListResponseComposite =
  | apiKeysListResponse200
  | apiKeysListResponse400
  | apiKeysListResponse401
  | apiKeysListResponse403
  | apiKeysListResponse404
  | apiKeysListResponse500;

export type apiKeysListResponse = apiKeysListResponseComposite & {
  headers: Headers;
};

export const getApiKeysListUrl = (params?: ApiKeysListParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/v1/api-keys?${stringifiedParams}`
    : `/v1/api-keys`;
};

export const apiKeysList = async (
  params?: ApiKeysListParams,
  options?: RequestInit,
): Promise<apiKeysListResponse> => {
  return customInstance<apiKeysListResponse>(getApiKeysListUrl(params), {
    ...options,
    method: "GET",
  });
};

/**
 * Create a new API key
 * @summary create api_keys
 */
export type apiKeysCreateResponse201 = {
  data: APIKeyWithSecretResponse;
  status: 201;
};

export type apiKeysCreateResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type apiKeysCreateResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type apiKeysCreateResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type apiKeysCreateResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type apiKeysCreateResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type apiKeysCreateResponseComposite =
  | apiKeysCreateResponse201
  | apiKeysCreateResponse400
  | apiKeysCreateResponse401
  | apiKeysCreateResponse403
  | apiKeysCreateResponse404
  | apiKeysCreateResponse500;

export type apiKeysCreateResponse = apiKeysCreateResponseComposite & {
  headers: Headers;
};

export const getApiKeysCreateUrl = () => {
  return `/v1/api-keys`;
};

export const apiKeysCreate = async (
  createRequestBody: CreateRequestBody,
  options?: RequestInit,
): Promise<apiKeysCreateResponse> => {
  return customInstance<apiKeysCreateResponse>(getApiKeysCreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(createRequestBody),
  });
};

/**
 * Validate API key
 * @summary validate api_keys
 */
export type apiKeysValidateResponse200 = {
  data: ValidateResponseBody;
  status: 200;
};

export type apiKeysValidateResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type apiKeysValidateResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type apiKeysValidateResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type apiKeysValidateResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type apiKeysValidateResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type apiKeysValidateResponseComposite =
  | apiKeysValidateResponse200
  | apiKeysValidateResponse400
  | apiKeysValidateResponse401
  | apiKeysValidateResponse403
  | apiKeysValidateResponse404
  | apiKeysValidateResponse500;

export type apiKeysValidateResponse = apiKeysValidateResponseComposite & {
  headers: Headers;
};

export const getApiKeysValidateUrl = (params: ApiKeysValidateParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/v1/api-keys/validate?${stringifiedParams}`
    : `/v1/api-keys/validate`;
};

export const apiKeysValidate = async (
  params: ApiKeysValidateParams,
  options?: RequestInit,
): Promise<apiKeysValidateResponse> => {
  return customInstance<apiKeysValidateResponse>(
    getApiKeysValidateUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * Delete API key
 * @summary delete api_keys
 */
export type apiKeysDeleteResponse204 = {
  data: void;
  status: 204;
};

export type apiKeysDeleteResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type apiKeysDeleteResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type apiKeysDeleteResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type apiKeysDeleteResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type apiKeysDeleteResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type apiKeysDeleteResponseComposite =
  | apiKeysDeleteResponse204
  | apiKeysDeleteResponse400
  | apiKeysDeleteResponse401
  | apiKeysDeleteResponse403
  | apiKeysDeleteResponse404
  | apiKeysDeleteResponse500;

export type apiKeysDeleteResponse = apiKeysDeleteResponseComposite & {
  headers: Headers;
};

export const getApiKeysDeleteUrl = (id: string) => {
  return `/v1/api-keys/${id}`;
};

export const apiKeysDelete = async (
  id: string,
  options?: RequestInit,
): Promise<apiKeysDeleteResponse> => {
  return customInstance<apiKeysDeleteResponse>(getApiKeysDeleteUrl(id), {
    ...options,
    method: "DELETE",
  });
};

/**
 * Get API key by ID
 * @summary get api_keys
 */
export type apiKeysGetResponse200 = {
  data: APIKeyResponse;
  status: 200;
};

export type apiKeysGetResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type apiKeysGetResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type apiKeysGetResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type apiKeysGetResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type apiKeysGetResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type apiKeysGetResponseComposite =
  | apiKeysGetResponse200
  | apiKeysGetResponse400
  | apiKeysGetResponse401
  | apiKeysGetResponse403
  | apiKeysGetResponse404
  | apiKeysGetResponse500;

export type apiKeysGetResponse = apiKeysGetResponseComposite & {
  headers: Headers;
};

export const getApiKeysGetUrl = (id: string) => {
  return `/v1/api-keys/${id}`;
};

export const apiKeysGet = async (
  id: string,
  options?: RequestInit,
): Promise<apiKeysGetResponse> => {
  return customInstance<apiKeysGetResponse>(getApiKeysGetUrl(id), {
    ...options,
    method: "GET",
  });
};

/**
 * Update API key
 * @summary update api_keys
 */
export type apiKeysUpdateResponse200 = {
  data: APIKeyResponse;
  status: 200;
};

export type apiKeysUpdateResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type apiKeysUpdateResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type apiKeysUpdateResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type apiKeysUpdateResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type apiKeysUpdateResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type apiKeysUpdateResponseComposite =
  | apiKeysUpdateResponse200
  | apiKeysUpdateResponse400
  | apiKeysUpdateResponse401
  | apiKeysUpdateResponse403
  | apiKeysUpdateResponse404
  | apiKeysUpdateResponse500;

export type apiKeysUpdateResponse = apiKeysUpdateResponseComposite & {
  headers: Headers;
};

export const getApiKeysUpdateUrl = (id: string) => {
  return `/v1/api-keys/${id}`;
};

export const apiKeysUpdate = async (
  id: string,
  updateRequestBody: UpdateRequestBody,
  options?: RequestInit,
): Promise<apiKeysUpdateResponse> => {
  return customInstance<apiKeysUpdateResponse>(getApiKeysUpdateUrl(id), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(updateRequestBody),
  });
};
