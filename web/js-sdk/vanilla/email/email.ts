/**
 * Generated by orval v7.7.0 🍺
 * Do not edit manually.
 * Frank Authentication Server
 * A comprehensive authentication server with OAuth2, MFA, Passkeys, SSO, and more
 * OpenAPI spec version: 1.0.0
 */
import type {
  BadRequestError,
  CreateEmailTemplateRequest,
  EmailGetTemplateByTypeParams,
  EmailListTemplatesParams,
  EmailTemplateResponse,
  ForbiddenError,
  InternalServerError,
  ListTemplatesResponseBody,
  NotFoundError,
  SendEmailRequest,
  SendResponseBody,
  SendTemplateEmailRequest,
  UnauthorizedError,
  UpdateTemplateRequestBody,
} from "../../model";

import { customInstance } from "../../mutator/custom-instance";

/**
 * Send email
 * @summary send email
 */
export type emailSendResponse200 = {
  data: SendResponseBody;
  status: 200;
};

export type emailSendResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type emailSendResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type emailSendResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type emailSendResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type emailSendResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type emailSendResponseComposite =
  | emailSendResponse200
  | emailSendResponse400
  | emailSendResponse401
  | emailSendResponse403
  | emailSendResponse404
  | emailSendResponse500;

export type emailSendResponse = emailSendResponseComposite & {
  headers: Headers;
};

export const getEmailSendUrl = () => {
  return `/v1/email/send`;
};

export const emailSend = async (
  sendEmailRequest: SendEmailRequest,
  options?: RequestInit,
): Promise<emailSendResponse> => {
  return customInstance<emailSendResponse>(getEmailSendUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(sendEmailRequest),
  });
};

/**
 * Send email using a template
 * @summary send_template email
 */
export type emailSendTemplateResponse200 = {
  data: SendResponseBody;
  status: 200;
};

export type emailSendTemplateResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type emailSendTemplateResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type emailSendTemplateResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type emailSendTemplateResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type emailSendTemplateResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type emailSendTemplateResponseComposite =
  | emailSendTemplateResponse200
  | emailSendTemplateResponse400
  | emailSendTemplateResponse401
  | emailSendTemplateResponse403
  | emailSendTemplateResponse404
  | emailSendTemplateResponse500;

export type emailSendTemplateResponse = emailSendTemplateResponseComposite & {
  headers: Headers;
};

export const getEmailSendTemplateUrl = () => {
  return `/v1/email/send-template`;
};

export const emailSendTemplate = async (
  sendTemplateEmailRequest: SendTemplateEmailRequest,
  options?: RequestInit,
): Promise<emailSendTemplateResponse> => {
  return customInstance<emailSendTemplateResponse>(getEmailSendTemplateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(sendTemplateEmailRequest),
  });
};

/**
 * List email templates
 * @summary list_templates email
 */
export type emailListTemplatesResponse200 = {
  data: ListTemplatesResponseBody;
  status: 200;
};

export type emailListTemplatesResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type emailListTemplatesResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type emailListTemplatesResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type emailListTemplatesResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type emailListTemplatesResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type emailListTemplatesResponseComposite =
  | emailListTemplatesResponse200
  | emailListTemplatesResponse400
  | emailListTemplatesResponse401
  | emailListTemplatesResponse403
  | emailListTemplatesResponse404
  | emailListTemplatesResponse500;

export type emailListTemplatesResponse = emailListTemplatesResponseComposite & {
  headers: Headers;
};

export const getEmailListTemplatesUrl = (params?: EmailListTemplatesParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/v1/email/templates?${stringifiedParams}`
    : `/v1/email/templates`;
};

export const emailListTemplates = async (
  params?: EmailListTemplatesParams,
  options?: RequestInit,
): Promise<emailListTemplatesResponse> => {
  return customInstance<emailListTemplatesResponse>(
    getEmailListTemplatesUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * Create a new email template
 * @summary create_template email
 */
export type emailCreateTemplateResponse201 = {
  data: EmailTemplateResponse;
  status: 201;
};

export type emailCreateTemplateResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type emailCreateTemplateResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type emailCreateTemplateResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type emailCreateTemplateResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type emailCreateTemplateResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type emailCreateTemplateResponseComposite =
  | emailCreateTemplateResponse201
  | emailCreateTemplateResponse400
  | emailCreateTemplateResponse401
  | emailCreateTemplateResponse403
  | emailCreateTemplateResponse404
  | emailCreateTemplateResponse500;

export type emailCreateTemplateResponse =
  emailCreateTemplateResponseComposite & {
    headers: Headers;
  };

export const getEmailCreateTemplateUrl = () => {
  return `/v1/email/templates`;
};

export const emailCreateTemplate = async (
  createEmailTemplateRequest: CreateEmailTemplateRequest,
  options?: RequestInit,
): Promise<emailCreateTemplateResponse> => {
  return customInstance<emailCreateTemplateResponse>(
    getEmailCreateTemplateUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(createEmailTemplateRequest),
    },
  );
};

/**
 * Get email template by type
 * @summary get_template_by_type email
 */
export type emailGetTemplateByTypeResponse200 = {
  data: EmailTemplateResponse;
  status: 200;
};

export type emailGetTemplateByTypeResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type emailGetTemplateByTypeResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type emailGetTemplateByTypeResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type emailGetTemplateByTypeResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type emailGetTemplateByTypeResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type emailGetTemplateByTypeResponseComposite =
  | emailGetTemplateByTypeResponse200
  | emailGetTemplateByTypeResponse400
  | emailGetTemplateByTypeResponse401
  | emailGetTemplateByTypeResponse403
  | emailGetTemplateByTypeResponse404
  | emailGetTemplateByTypeResponse500;

export type emailGetTemplateByTypeResponse =
  emailGetTemplateByTypeResponseComposite & {
    headers: Headers;
  };

export const getEmailGetTemplateByTypeUrl = (
  type: string,
  params?: EmailGetTemplateByTypeParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/v1/email/templates/by-type/${type}?${stringifiedParams}`
    : `/v1/email/templates/by-type/${type}`;
};

export const emailGetTemplateByType = async (
  type: string,
  params?: EmailGetTemplateByTypeParams,
  options?: RequestInit,
): Promise<emailGetTemplateByTypeResponse> => {
  return customInstance<emailGetTemplateByTypeResponse>(
    getEmailGetTemplateByTypeUrl(type, params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * Delete email template
 * @summary delete_template email
 */
export type emailDeleteTemplateResponse204 = {
  data: void;
  status: 204;
};

export type emailDeleteTemplateResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type emailDeleteTemplateResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type emailDeleteTemplateResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type emailDeleteTemplateResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type emailDeleteTemplateResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type emailDeleteTemplateResponseComposite =
  | emailDeleteTemplateResponse204
  | emailDeleteTemplateResponse400
  | emailDeleteTemplateResponse401
  | emailDeleteTemplateResponse403
  | emailDeleteTemplateResponse404
  | emailDeleteTemplateResponse500;

export type emailDeleteTemplateResponse =
  emailDeleteTemplateResponseComposite & {
    headers: Headers;
  };

export const getEmailDeleteTemplateUrl = (id: string) => {
  return `/v1/email/templates/${id}`;
};

export const emailDeleteTemplate = async (
  id: string,
  options?: RequestInit,
): Promise<emailDeleteTemplateResponse> => {
  return customInstance<emailDeleteTemplateResponse>(
    getEmailDeleteTemplateUrl(id),
    {
      ...options,
      method: "DELETE",
    },
  );
};

/**
 * Get email template by ID
 * @summary get_template email
 */
export type emailGetTemplateResponse200 = {
  data: EmailTemplateResponse;
  status: 200;
};

export type emailGetTemplateResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type emailGetTemplateResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type emailGetTemplateResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type emailGetTemplateResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type emailGetTemplateResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type emailGetTemplateResponseComposite =
  | emailGetTemplateResponse200
  | emailGetTemplateResponse400
  | emailGetTemplateResponse401
  | emailGetTemplateResponse403
  | emailGetTemplateResponse404
  | emailGetTemplateResponse500;

export type emailGetTemplateResponse = emailGetTemplateResponseComposite & {
  headers: Headers;
};

export const getEmailGetTemplateUrl = (id: string) => {
  return `/v1/email/templates/${id}`;
};

export const emailGetTemplate = async (
  id: string,
  options?: RequestInit,
): Promise<emailGetTemplateResponse> => {
  return customInstance<emailGetTemplateResponse>(getEmailGetTemplateUrl(id), {
    ...options,
    method: "GET",
  });
};

/**
 * Update email template
 * @summary update_template email
 */
export type emailUpdateTemplateResponse200 = {
  data: EmailTemplateResponse;
  status: 200;
};

export type emailUpdateTemplateResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type emailUpdateTemplateResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type emailUpdateTemplateResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type emailUpdateTemplateResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type emailUpdateTemplateResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type emailUpdateTemplateResponseComposite =
  | emailUpdateTemplateResponse200
  | emailUpdateTemplateResponse400
  | emailUpdateTemplateResponse401
  | emailUpdateTemplateResponse403
  | emailUpdateTemplateResponse404
  | emailUpdateTemplateResponse500;

export type emailUpdateTemplateResponse =
  emailUpdateTemplateResponseComposite & {
    headers: Headers;
  };

export const getEmailUpdateTemplateUrl = (id: string) => {
  return `/v1/email/templates/${id}`;
};

export const emailUpdateTemplate = async (
  id: string,
  updateTemplateRequestBody: UpdateTemplateRequestBody,
  options?: RequestInit,
): Promise<emailUpdateTemplateResponse> => {
  return customInstance<emailUpdateTemplateResponse>(
    getEmailUpdateTemplateUrl(id),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(updateTemplateRequestBody),
    },
  );
};
