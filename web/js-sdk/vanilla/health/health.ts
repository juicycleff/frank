/**
 * Generated by orval v7.7.0 🍺
 * Do not edit manually.
 * Frank Authentication Server
 * A comprehensive authentication server with OAuth2, MFA, Passkeys, SSO, and more
 * OpenAPI spec version: 1.0.0
 */
import type {
  HealthResponse,
  MetricsResponseBody,
  ReadyResponse,
  VersionResponseBody,
} from "../../model";

import { customInstance } from "../../mutator/custom-instance";

/**
 * Debug information (only available in development mode)
 * @summary debug health
 */
export type healthDebugResponse200 = {
  data: unknown;
  status: 200;
};

export type healthDebugResponseComposite = healthDebugResponse200;

export type healthDebugResponse = healthDebugResponseComposite & {
  headers: Headers;
};

export const getHealthDebugUrl = () => {
  return `/__debug`;
};

export const healthDebug = async (
  options?: RequestInit,
): Promise<healthDebugResponse> => {
  return customInstance<healthDebugResponse>(getHealthDebugUrl(), {
    ...options,
    method: "GET",
  });
};

/**
 * Check system health
 * @summary check health
 */
export type healthCheckResponse200 = {
  data: HealthResponse;
  status: 200;
};

export type healthCheckResponse503 = {
  data: HealthResponse;
  status: 503;
};

export type healthCheckResponseComposite =
  | healthCheckResponse200
  | healthCheckResponse503;

export type healthCheckResponse = healthCheckResponseComposite & {
  headers: Headers;
};

export const getHealthCheckUrl = () => {
  return `/__health`;
};

export const healthCheck = async (
  options?: RequestInit,
): Promise<healthCheckResponse> => {
  return customInstance<healthCheckResponse>(getHealthCheckUrl(), {
    ...options,
    method: "GET",
  });
};

/**
 * Get system metrics
 * @summary metrics health
 */
export type healthMetricsResponse200 = {
  data: MetricsResponseBody;
  status: 200;
};

export type healthMetricsResponseComposite = healthMetricsResponse200;

export type healthMetricsResponse = healthMetricsResponseComposite & {
  headers: Headers;
};

export const getHealthMetricsUrl = () => {
  return `/__metrics`;
};

export const healthMetrics = async (
  options?: RequestInit,
): Promise<healthMetricsResponse> => {
  return customInstance<healthMetricsResponse>(getHealthMetricsUrl(), {
    ...options,
    method: "GET",
  });
};

/**
 * Check if the system is ready to receive traffic
 * @summary ready health
 */
export type healthReadyResponse200 = {
  data: ReadyResponse;
  status: 200;
};

export type healthReadyResponse503 = {
  data: ReadyResponse;
  status: 503;
};

export type healthReadyResponseComposite =
  | healthReadyResponse200
  | healthReadyResponse503;

export type healthReadyResponse = healthReadyResponseComposite & {
  headers: Headers;
};

export const getHealthReadyUrl = () => {
  return `/__ready`;
};

export const healthReady = async (
  options?: RequestInit,
): Promise<healthReadyResponse> => {
  return customInstance<healthReadyResponse>(getHealthReadyUrl(), {
    ...options,
    method: "GET",
  });
};

/**
 * Get system version information
 * @summary version health
 */
export type healthVersionResponse200 = {
  data: VersionResponseBody;
  status: 200;
};

export type healthVersionResponseComposite = healthVersionResponse200;

export type healthVersionResponse = healthVersionResponseComposite & {
  headers: Headers;
};

export const getHealthVersionUrl = () => {
  return `/__version`;
};

export const healthVersion = async (
  options?: RequestInit,
): Promise<healthVersionResponse> => {
  return customInstance<healthVersionResponse>(getHealthVersionUrl(), {
    ...options,
    method: "GET",
  });
};
