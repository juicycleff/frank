/**
 * Generated by orval v7.7.0 🍺
 * Do not edit manually.
 * Frank Authentication Server
 * A comprehensive authentication server with OAuth2, MFA, Passkeys, SSO, and more
 * OpenAPI spec version: 1.0.0
 */
import type {
  BadRequestError,
  EmailResponseBody,
  ForbiddenError,
  InternalServerError,
  MagicLinkRequest,
  MagicLinkResponseBody,
  MethodsResponseBody2,
  NotFoundError,
  PasswordlessEmailRequest,
  PasswordlessSMSRequest,
  PasswordlessVerifyRequest,
  UnauthorizedError,
  VerifyResponseBody2,
} from "../../model";

import { customInstance } from "../../mutator/custom-instance";

/**
 * Initiate passwordless email authentication
 * @summary email passwordless
 */
export type passwordlessEmailResponse200 = {
  data: EmailResponseBody;
  status: 200;
};

export type passwordlessEmailResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type passwordlessEmailResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type passwordlessEmailResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type passwordlessEmailResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type passwordlessEmailResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type passwordlessEmailResponseComposite =
  | passwordlessEmailResponse200
  | passwordlessEmailResponse400
  | passwordlessEmailResponse401
  | passwordlessEmailResponse403
  | passwordlessEmailResponse404
  | passwordlessEmailResponse500;

export type passwordlessEmailResponse = passwordlessEmailResponseComposite & {
  headers: Headers;
};

export const getPasswordlessEmailUrl = () => {
  return `/v1/auth/passwordless/email`;
};

export const passwordlessEmail = async (
  passwordlessEmailRequest: PasswordlessEmailRequest,
  options?: RequestInit,
): Promise<passwordlessEmailResponse> => {
  return customInstance<passwordlessEmailResponse>(getPasswordlessEmailUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(passwordlessEmailRequest),
  });
};

/**
 * Generate magic link for passwordless login
 * @summary magic_link passwordless
 */
export type passwordlessMagicLinkResponse200 = {
  data: MagicLinkResponseBody;
  status: 200;
};

export type passwordlessMagicLinkResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type passwordlessMagicLinkResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type passwordlessMagicLinkResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type passwordlessMagicLinkResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type passwordlessMagicLinkResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type passwordlessMagicLinkResponseComposite =
  | passwordlessMagicLinkResponse200
  | passwordlessMagicLinkResponse400
  | passwordlessMagicLinkResponse401
  | passwordlessMagicLinkResponse403
  | passwordlessMagicLinkResponse404
  | passwordlessMagicLinkResponse500;

export type passwordlessMagicLinkResponse =
  passwordlessMagicLinkResponseComposite & {
    headers: Headers;
  };

export const getPasswordlessMagicLinkUrl = () => {
  return `/v1/auth/passwordless/magic-link`;
};

export const passwordlessMagicLink = async (
  magicLinkRequest: MagicLinkRequest,
  options?: RequestInit,
): Promise<passwordlessMagicLinkResponse> => {
  return customInstance<passwordlessMagicLinkResponse>(
    getPasswordlessMagicLinkUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(magicLinkRequest),
    },
  );
};

/**
 * Get available passwordless authentication methods
 * @summary methods passwordless
 */
export type passwordlessMethodsResponse200 = {
  data: MethodsResponseBody2;
  status: 200;
};

export type passwordlessMethodsResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type passwordlessMethodsResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type passwordlessMethodsResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type passwordlessMethodsResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type passwordlessMethodsResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type passwordlessMethodsResponseComposite =
  | passwordlessMethodsResponse200
  | passwordlessMethodsResponse400
  | passwordlessMethodsResponse401
  | passwordlessMethodsResponse403
  | passwordlessMethodsResponse404
  | passwordlessMethodsResponse500;

export type passwordlessMethodsResponse =
  passwordlessMethodsResponseComposite & {
    headers: Headers;
  };

export const getPasswordlessMethodsUrl = () => {
  return `/v1/auth/passwordless/methods`;
};

export const passwordlessMethods = async (
  options?: RequestInit,
): Promise<passwordlessMethodsResponse> => {
  return customInstance<passwordlessMethodsResponse>(
    getPasswordlessMethodsUrl(),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * Initiate passwordless SMS authentication
 * @summary sms passwordless
 */
export type passwordlessSmsResponse200 = {
  data: EmailResponseBody;
  status: 200;
};

export type passwordlessSmsResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type passwordlessSmsResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type passwordlessSmsResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type passwordlessSmsResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type passwordlessSmsResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type passwordlessSmsResponseComposite =
  | passwordlessSmsResponse200
  | passwordlessSmsResponse400
  | passwordlessSmsResponse401
  | passwordlessSmsResponse403
  | passwordlessSmsResponse404
  | passwordlessSmsResponse500;

export type passwordlessSmsResponse = passwordlessSmsResponseComposite & {
  headers: Headers;
};

export const getPasswordlessSmsUrl = () => {
  return `/v1/auth/passwordless/sms`;
};

export const passwordlessSms = async (
  passwordlessSMSRequest: PasswordlessSMSRequest,
  options?: RequestInit,
): Promise<passwordlessSmsResponse> => {
  return customInstance<passwordlessSmsResponse>(getPasswordlessSmsUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(passwordlessSMSRequest),
  });
};

/**
 * Verify passwordless authentication
 * @summary verify passwordless
 */
export type passwordlessVerifyResponse200 = {
  data: VerifyResponseBody2;
  status: 200;
};

export type passwordlessVerifyResponse400 = {
  data: BadRequestError;
  status: 400;
};

export type passwordlessVerifyResponse401 = {
  data: UnauthorizedError;
  status: 401;
};

export type passwordlessVerifyResponse403 = {
  data: ForbiddenError;
  status: 403;
};

export type passwordlessVerifyResponse404 = {
  data: NotFoundError;
  status: 404;
};

export type passwordlessVerifyResponse500 = {
  data: InternalServerError;
  status: 500;
};

export type passwordlessVerifyResponseComposite =
  | passwordlessVerifyResponse200
  | passwordlessVerifyResponse400
  | passwordlessVerifyResponse401
  | passwordlessVerifyResponse403
  | passwordlessVerifyResponse404
  | passwordlessVerifyResponse500;

export type passwordlessVerifyResponse = passwordlessVerifyResponseComposite & {
  headers: Headers;
};

export const getPasswordlessVerifyUrl = () => {
  return `/v1/auth/passwordless/verify`;
};

export const passwordlessVerify = async (
  passwordlessVerifyRequest: PasswordlessVerifyRequest,
  options?: RequestInit,
): Promise<passwordlessVerifyResponse> => {
  return customInstance<passwordlessVerifyResponse>(
    getPasswordlessVerifyUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(passwordlessVerifyRequest),
    },
  );
};
