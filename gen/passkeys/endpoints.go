// Code generated by goa v3.20.0, DO NOT EDIT.
//
// passkeys endpoints
//
// Command:
// $ goa gen github.com/juicycleff/frank/design -o .

package passkeys

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Endpoints wraps the "passkeys" service endpoints.
type Endpoints struct {
	RegisterBegin    goa.Endpoint
	RegisterComplete goa.Endpoint
	LoginBegin       goa.Endpoint
	LoginComplete    goa.Endpoint
	List             goa.Endpoint
	Update           goa.Endpoint
	Delete           goa.Endpoint
}

// NewEndpoints wraps the methods of the "passkeys" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	// Casting service to Auther interface
	a := s.(Auther)
	return &Endpoints{
		RegisterBegin:    NewRegisterBeginEndpoint(s, a.JWTAuth),
		RegisterComplete: NewRegisterCompleteEndpoint(s, a.JWTAuth),
		LoginBegin:       NewLoginBeginEndpoint(s, a.OAuth2Auth, a.APIKeyAuth, a.JWTAuth),
		LoginComplete:    NewLoginCompleteEndpoint(s, a.OAuth2Auth, a.APIKeyAuth, a.JWTAuth),
		List:             NewListEndpoint(s, a.JWTAuth),
		Update:           NewUpdateEndpoint(s, a.JWTAuth),
		Delete:           NewDeleteEndpoint(s, a.JWTAuth),
	}
}

// Use applies the given middleware to all the "passkeys" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.RegisterBegin = m(e.RegisterBegin)
	e.RegisterComplete = m(e.RegisterComplete)
	e.LoginBegin = m(e.LoginBegin)
	e.LoginComplete = m(e.LoginComplete)
	e.List = m(e.List)
	e.Update = m(e.Update)
	e.Delete = m(e.Delete)
}

// NewRegisterBeginEndpoint returns an endpoint function that calls the method
// "register_begin" of service "passkeys".
func NewRegisterBeginEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*RegisterBeginPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{},
		}
		var token string
		if p.JWT != nil {
			token = *p.JWT
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.RegisterBegin(ctx, p)
	}
}

// NewRegisterCompleteEndpoint returns an endpoint function that calls the
// method "register_complete" of service "passkeys".
func NewRegisterCompleteEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*RegisterCompletePayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{},
		}
		var token string
		if p.JWT != nil {
			token = *p.JWT
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.RegisterComplete(ctx, p)
	}
}

// NewLoginBeginEndpoint returns an endpoint function that calls the method
// "login_begin" of service "passkeys".
func NewLoginBeginEndpoint(s Service, authOAuth2Fn security.AuthOAuth2Func, authAPIKeyFn security.AuthAPIKeyFunc, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*LoginBeginPayload)
		var err error
		sc := security.OAuth2Scheme{
			Name:           "oauth2",
			Scopes:         []string{"profile", "email", "openid", "offline_access", "api"},
			RequiredScopes: []string{},
			Flows: []*security.OAuthFlow{
				&security.OAuthFlow{
					Type:             "authorization_code",
					AuthorizationURL: "/v1/oauth/authorize",
					TokenURL:         "/v1/oauth/token",
					RefreshURL:       "/v1/oauth/refresh",
				},
			},
		}
		var token string
		if p.Oauth2 != nil {
			token = *p.Oauth2
		}
		ctx, err = authOAuth2Fn(ctx, token, &sc)
		if err == nil {
			sc := security.APIKeyScheme{
				Name:           "api_key",
				Scopes:         []string{},
				RequiredScopes: []string{},
			}
			var key string
			if p.XAPIKey != nil {
				key = *p.XAPIKey
			}
			ctx, err = authAPIKeyFn(ctx, key, &sc)
		}
		if err == nil {
			sc := security.JWTScheme{
				Name:           "jwt",
				Scopes:         []string{"api:read", "api:write"},
				RequiredScopes: []string{},
			}
			var token string
			if p.JWT != nil {
				token = *p.JWT
			}
			ctx, err = authJWTFn(ctx, token, &sc)
		}
		if err != nil {
			return nil, err
		}
		return s.LoginBegin(ctx, p)
	}
}

// NewLoginCompleteEndpoint returns an endpoint function that calls the method
// "login_complete" of service "passkeys".
func NewLoginCompleteEndpoint(s Service, authOAuth2Fn security.AuthOAuth2Func, authAPIKeyFn security.AuthAPIKeyFunc, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*LoginCompletePayload)
		var err error
		sc := security.OAuth2Scheme{
			Name:           "oauth2",
			Scopes:         []string{"profile", "email", "openid", "offline_access", "api"},
			RequiredScopes: []string{},
			Flows: []*security.OAuthFlow{
				&security.OAuthFlow{
					Type:             "authorization_code",
					AuthorizationURL: "/v1/oauth/authorize",
					TokenURL:         "/v1/oauth/token",
					RefreshURL:       "/v1/oauth/refresh",
				},
			},
		}
		var token string
		if p.Oauth2 != nil {
			token = *p.Oauth2
		}
		ctx, err = authOAuth2Fn(ctx, token, &sc)
		if err == nil {
			sc := security.APIKeyScheme{
				Name:           "api_key",
				Scopes:         []string{},
				RequiredScopes: []string{},
			}
			var key string
			if p.XAPIKey != nil {
				key = *p.XAPIKey
			}
			ctx, err = authAPIKeyFn(ctx, key, &sc)
		}
		if err == nil {
			sc := security.JWTScheme{
				Name:           "jwt",
				Scopes:         []string{"api:read", "api:write"},
				RequiredScopes: []string{},
			}
			var token string
			if p.JWT != nil {
				token = *p.JWT
			}
			ctx, err = authJWTFn(ctx, token, &sc)
		}
		if err != nil {
			return nil, err
		}
		return s.LoginComplete(ctx, p)
	}
}

// NewListEndpoint returns an endpoint function that calls the method "list" of
// service "passkeys".
func NewListEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*ListPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{},
		}
		var token string
		if p.JWT != nil {
			token = *p.JWT
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.List(ctx, p)
	}
}

// NewUpdateEndpoint returns an endpoint function that calls the method
// "update" of service "passkeys".
func NewUpdateEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*UpdatePayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{},
		}
		var token string
		if p.JWT != nil {
			token = *p.JWT
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.Update(ctx, p)
	}
}

// NewDeleteEndpoint returns an endpoint function that calls the method
// "delete" of service "passkeys".
func NewDeleteEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*DeletePayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{},
		}
		var token string
		if p.JWT != nil {
			token = *p.JWT
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return nil, s.Delete(ctx, p)
	}
}
