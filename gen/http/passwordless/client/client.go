// Code generated by goa v3.20.0, DO NOT EDIT.
//
// passwordless client HTTP transport
//
// Command:
// $ goa gen github.com/juicycleff/frank/design -o .

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the passwordless service endpoint HTTP clients.
type Client struct {
	// Email Doer is the HTTP client used to make requests to the email endpoint.
	EmailDoer goahttp.Doer

	// Sms Doer is the HTTP client used to make requests to the sms endpoint.
	SmsDoer goahttp.Doer

	// Verify Doer is the HTTP client used to make requests to the verify endpoint.
	VerifyDoer goahttp.Doer

	// Methods Doer is the HTTP client used to make requests to the methods
	// endpoint.
	MethodsDoer goahttp.Doer

	// MagicLink Doer is the HTTP client used to make requests to the magic_link
	// endpoint.
	MagicLinkDoer goahttp.Doer

	// CORS Doer is the HTTP client used to make requests to the  endpoint.
	CORSDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the passwordless service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		EmailDoer:           doer,
		SmsDoer:             doer,
		VerifyDoer:          doer,
		MethodsDoer:         doer,
		MagicLinkDoer:       doer,
		CORSDoer:            doer,
		RestoreResponseBody: restoreBody,
		scheme:              scheme,
		host:                host,
		decoder:             dec,
		encoder:             enc,
	}
}

// Email returns an endpoint that makes HTTP requests to the passwordless
// service email server.
func (c *Client) Email() goa.Endpoint {
	var (
		encodeRequest  = EncodeEmailRequest(c.encoder)
		decodeResponse = DecodeEmailResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildEmailRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.EmailDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("passwordless", "email", err)
		}
		return decodeResponse(resp)
	}
}

// Sms returns an endpoint that makes HTTP requests to the passwordless service
// sms server.
func (c *Client) Sms() goa.Endpoint {
	var (
		encodeRequest  = EncodeSmsRequest(c.encoder)
		decodeResponse = DecodeSmsResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildSmsRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.SmsDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("passwordless", "sms", err)
		}
		return decodeResponse(resp)
	}
}

// Verify returns an endpoint that makes HTTP requests to the passwordless
// service verify server.
func (c *Client) Verify() goa.Endpoint {
	var (
		encodeRequest  = EncodeVerifyRequest(c.encoder)
		decodeResponse = DecodeVerifyResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildVerifyRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.VerifyDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("passwordless", "verify", err)
		}
		return decodeResponse(resp)
	}
}

// Methods returns an endpoint that makes HTTP requests to the passwordless
// service methods server.
func (c *Client) Methods() goa.Endpoint {
	var (
		encodeRequest  = EncodeMethodsRequest(c.encoder)
		decodeResponse = DecodeMethodsResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildMethodsRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.MethodsDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("passwordless", "methods", err)
		}
		return decodeResponse(resp)
	}
}

// MagicLink returns an endpoint that makes HTTP requests to the passwordless
// service magic_link server.
func (c *Client) MagicLink() goa.Endpoint {
	var (
		encodeRequest  = EncodeMagicLinkRequest(c.encoder)
		decodeResponse = DecodeMagicLinkResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildMagicLinkRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.MagicLinkDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("passwordless", "magic_link", err)
		}
		return decodeResponse(resp)
	}
}
