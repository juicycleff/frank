// Code generated by goa v3.20.0, DO NOT EDIT.
//
// passwordless HTTP client types
//
// Command:
// $ goa gen github.com/juicycleff/frank/design -o .

package client

import (
	passwordless "github.com/juicycleff/frank/gen/passwordless"
	goa "goa.design/goa/v3/pkg"
)

// EmailRequestBody is the type of the "passwordless" service "email" endpoint
// HTTP request body.
type EmailRequestBody struct {
	// User email
	Email string `form:"email" json:"email" xml:"email"`
	// URL to redirect after successful authentication
	RedirectURL *string `form:"redirect_url,omitempty" json:"redirect_url,omitempty" xml:"redirect_url,omitempty"`
}

// SmsRequestBody is the type of the "passwordless" service "sms" endpoint HTTP
// request body.
type SmsRequestBody struct {
	// User phone number
	PhoneNumber string `form:"phone_number" json:"phone_number" xml:"phone_number"`
	// URL to redirect after successful authentication
	RedirectURL *string `form:"redirect_url,omitempty" json:"redirect_url,omitempty" xml:"redirect_url,omitempty"`
}

// VerifyRequestBody is the type of the "passwordless" service "verify"
// endpoint HTTP request body.
type VerifyRequestBody struct {
	// Verification token for email authentication
	Token *string `form:"token,omitempty" json:"token,omitempty" xml:"token,omitempty"`
	// Phone number for SMS authentication
	PhoneNumber *string `form:"phone_number,omitempty" json:"phone_number,omitempty" xml:"phone_number,omitempty"`
	// Verification code for SMS authentication
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Authentication type
	AuthType string `form:"auth_type" json:"auth_type" xml:"auth_type"`
}

// MagicLinkRequestBody is the type of the "passwordless" service "magic_link"
// endpoint HTTP request body.
type MagicLinkRequestBody struct {
	// User email
	Email string `form:"email" json:"email" xml:"email"`
	// User ID
	UserID string `form:"user_id" json:"user_id" xml:"user_id"`
	// URL to redirect after authentication
	RedirectURL string `form:"redirect_url" json:"redirect_url" xml:"redirect_url"`
	// Link expiry in seconds
	ExpiresIn int `form:"expires_in" json:"expires_in" xml:"expires_in"`
}

// EmailResponseBody is the type of the "passwordless" service "email" endpoint
// HTTP response body.
type EmailResponseBody struct {
	// Success message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Verification ID
	VerificationID *string `form:"verification_id,omitempty" json:"verification_id,omitempty" xml:"verification_id,omitempty"`
}

// SmsResponseBody is the type of the "passwordless" service "sms" endpoint
// HTTP response body.
type SmsResponseBody struct {
	// Success message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Verification ID
	VerificationID *string `form:"verification_id,omitempty" json:"verification_id,omitempty" xml:"verification_id,omitempty"`
}

// VerifyResponseBody is the type of the "passwordless" service "verify"
// endpoint HTTP response body.
type VerifyResponseBody struct {
	// Whether authentication was successful
	Authenticated *bool `form:"authenticated,omitempty" json:"authenticated,omitempty" xml:"authenticated,omitempty"`
	// User ID
	UserID *string `form:"user_id,omitempty" json:"user_id,omitempty" xml:"user_id,omitempty"`
	// User email
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// User data if authentication successful
	User *UserResponseBody `form:"user,omitempty" json:"user,omitempty" xml:"user,omitempty"`
}

// MethodsResponseBody is the type of the "passwordless" service "methods"
// endpoint HTTP response body.
type MethodsResponseBody struct {
	// Whether passwordless auth is enabled
	Enabled *bool `form:"enabled,omitempty" json:"enabled,omitempty" xml:"enabled,omitempty"`
	// Available methods
	Methods []string `form:"methods,omitempty" json:"methods,omitempty" xml:"methods,omitempty"`
}

// MagicLinkResponseBody is the type of the "passwordless" service "magic_link"
// endpoint HTTP response body.
type MagicLinkResponseBody struct {
	// Generated magic link
	MagicLink *string `form:"magic_link,omitempty" json:"magic_link,omitempty" xml:"magic_link,omitempty"`
	// Expiry in seconds
	ExpiresIn *int `form:"expires_in,omitempty" json:"expires_in,omitempty" xml:"expires_in,omitempty"`
}

// EmailBadRequestResponseBody is the type of the "passwordless" service
// "email" endpoint HTTP response body for the "bad_request" error.
type EmailBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// EmailForbiddenResponseBody is the type of the "passwordless" service "email"
// endpoint HTTP response body for the "forbidden" error.
type EmailForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// EmailInternalErrorResponseBody is the type of the "passwordless" service
// "email" endpoint HTTP response body for the "internal_error" error.
type EmailInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// EmailNotFoundResponseBody is the type of the "passwordless" service "email"
// endpoint HTTP response body for the "not_found" error.
type EmailNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// EmailUnauthorizedResponseBody is the type of the "passwordless" service
// "email" endpoint HTTP response body for the "unauthorized" error.
type EmailUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// SmsBadRequestResponseBody is the type of the "passwordless" service "sms"
// endpoint HTTP response body for the "bad_request" error.
type SmsBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// SmsForbiddenResponseBody is the type of the "passwordless" service "sms"
// endpoint HTTP response body for the "forbidden" error.
type SmsForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// SmsInternalErrorResponseBody is the type of the "passwordless" service "sms"
// endpoint HTTP response body for the "internal_error" error.
type SmsInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// SmsNotFoundResponseBody is the type of the "passwordless" service "sms"
// endpoint HTTP response body for the "not_found" error.
type SmsNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// SmsUnauthorizedResponseBody is the type of the "passwordless" service "sms"
// endpoint HTTP response body for the "unauthorized" error.
type SmsUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// VerifyBadRequestResponseBody is the type of the "passwordless" service
// "verify" endpoint HTTP response body for the "bad_request" error.
type VerifyBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// VerifyForbiddenResponseBody is the type of the "passwordless" service
// "verify" endpoint HTTP response body for the "forbidden" error.
type VerifyForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// VerifyInternalErrorResponseBody is the type of the "passwordless" service
// "verify" endpoint HTTP response body for the "internal_error" error.
type VerifyInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// VerifyNotFoundResponseBody is the type of the "passwordless" service
// "verify" endpoint HTTP response body for the "not_found" error.
type VerifyNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// VerifyUnauthorizedResponseBody is the type of the "passwordless" service
// "verify" endpoint HTTP response body for the "unauthorized" error.
type VerifyUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// MethodsBadRequestResponseBody is the type of the "passwordless" service
// "methods" endpoint HTTP response body for the "bad_request" error.
type MethodsBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// MethodsForbiddenResponseBody is the type of the "passwordless" service
// "methods" endpoint HTTP response body for the "forbidden" error.
type MethodsForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// MethodsInternalErrorResponseBody is the type of the "passwordless" service
// "methods" endpoint HTTP response body for the "internal_error" error.
type MethodsInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// MethodsNotFoundResponseBody is the type of the "passwordless" service
// "methods" endpoint HTTP response body for the "not_found" error.
type MethodsNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// MethodsUnauthorizedResponseBody is the type of the "passwordless" service
// "methods" endpoint HTTP response body for the "unauthorized" error.
type MethodsUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// MagicLinkBadRequestResponseBody is the type of the "passwordless" service
// "magic_link" endpoint HTTP response body for the "bad_request" error.
type MagicLinkBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// MagicLinkForbiddenResponseBody is the type of the "passwordless" service
// "magic_link" endpoint HTTP response body for the "forbidden" error.
type MagicLinkForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// MagicLinkInternalErrorResponseBody is the type of the "passwordless" service
// "magic_link" endpoint HTTP response body for the "internal_error" error.
type MagicLinkInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// MagicLinkNotFoundResponseBody is the type of the "passwordless" service
// "magic_link" endpoint HTTP response body for the "not_found" error.
type MagicLinkNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// MagicLinkUnauthorizedResponseBody is the type of the "passwordless" service
// "magic_link" endpoint HTTP response body for the "unauthorized" error.
type MagicLinkUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UserResponseBody is used to define fields on response body types.
type UserResponseBody struct {
	// Whether account is active
	Active *bool `form:"active,omitempty" json:"active,omitempty" xml:"active,omitempty"`
	// Whether email is verified
	EmailVerified *bool `json:"email_verified,emailVerified"`
	// Whether phone is verified
	PhoneVerified *bool `json:"phone_verified,phoneVerified"`
	// URL to user's profile image
	ProfileImageURL *string `json:"profile_image_url,profileImageUrl"`
	// User first name
	FirstName *string `json:"first_name,firstName"`
	// User last name
	LastName *string `json:"last_name,lastName"`
	// ID of the entity
	ID *string `json:"id"`
	// User phone number
	PhoneNumber *string `json:"phone_number,phoneNumber"`
	// User metadata
	Metadata map[string]any `json:"metadata"`
	// User locale
	Locale *string `json:"locale"`
	// Email address
	Email *string `json:"email"`
}

// NewEmailRequestBody builds the HTTP request body from the payload of the
// "email" endpoint of the "passwordless" service.
func NewEmailRequestBody(p *passwordless.EmailPayload) *EmailRequestBody {
	body := &EmailRequestBody{
		Email:       p.Email,
		RedirectURL: p.RedirectURL,
	}
	return body
}

// NewSmsRequestBody builds the HTTP request body from the payload of the "sms"
// endpoint of the "passwordless" service.
func NewSmsRequestBody(p *passwordless.SmsPayload) *SmsRequestBody {
	body := &SmsRequestBody{
		PhoneNumber: p.PhoneNumber,
		RedirectURL: p.RedirectURL,
	}
	return body
}

// NewVerifyRequestBody builds the HTTP request body from the payload of the
// "verify" endpoint of the "passwordless" service.
func NewVerifyRequestBody(p *passwordless.VerifyPayload) *VerifyRequestBody {
	body := &VerifyRequestBody{
		Token:       p.Token,
		PhoneNumber: p.PhoneNumber,
		Code:        p.Code,
		AuthType:    p.AuthType,
	}
	return body
}

// NewMagicLinkRequestBody builds the HTTP request body from the payload of the
// "magic_link" endpoint of the "passwordless" service.
func NewMagicLinkRequestBody(p *passwordless.MagicLinkPayload) *MagicLinkRequestBody {
	body := &MagicLinkRequestBody{
		Email:       p.Email,
		UserID:      p.UserID,
		RedirectURL: p.RedirectURL,
		ExpiresIn:   p.ExpiresIn,
	}
	{
		var zero int
		if body.ExpiresIn == zero {
			body.ExpiresIn = 86400
		}
	}
	return body
}

// NewEmailResultOK builds a "passwordless" service "email" endpoint result
// from a HTTP "OK" response.
func NewEmailResultOK(body *EmailResponseBody) *passwordless.EmailResult {
	v := &passwordless.EmailResult{
		Message:        *body.Message,
		VerificationID: *body.VerificationID,
	}

	return v
}

// NewEmailBadRequest builds a passwordless service email endpoint bad_request
// error.
func NewEmailBadRequest(body *EmailBadRequestResponseBody) *passwordless.BadRequestError {
	v := &passwordless.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewEmailForbidden builds a passwordless service email endpoint forbidden
// error.
func NewEmailForbidden(body *EmailForbiddenResponseBody) *passwordless.ForbiddenError {
	v := &passwordless.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewEmailInternalError builds a passwordless service email endpoint
// internal_error error.
func NewEmailInternalError(body *EmailInternalErrorResponseBody) *passwordless.InternalServerError {
	v := &passwordless.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewEmailNotFound builds a passwordless service email endpoint not_found
// error.
func NewEmailNotFound(body *EmailNotFoundResponseBody) *passwordless.NotFoundError {
	v := &passwordless.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewEmailUnauthorized builds a passwordless service email endpoint
// unauthorized error.
func NewEmailUnauthorized(body *EmailUnauthorizedResponseBody) *passwordless.UnauthorizedError {
	v := &passwordless.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewSmsResultOK builds a "passwordless" service "sms" endpoint result from a
// HTTP "OK" response.
func NewSmsResultOK(body *SmsResponseBody) *passwordless.SmsResult {
	v := &passwordless.SmsResult{
		Message:        *body.Message,
		VerificationID: *body.VerificationID,
	}

	return v
}

// NewSmsBadRequest builds a passwordless service sms endpoint bad_request
// error.
func NewSmsBadRequest(body *SmsBadRequestResponseBody) *passwordless.BadRequestError {
	v := &passwordless.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewSmsForbidden builds a passwordless service sms endpoint forbidden error.
func NewSmsForbidden(body *SmsForbiddenResponseBody) *passwordless.ForbiddenError {
	v := &passwordless.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewSmsInternalError builds a passwordless service sms endpoint
// internal_error error.
func NewSmsInternalError(body *SmsInternalErrorResponseBody) *passwordless.InternalServerError {
	v := &passwordless.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewSmsNotFound builds a passwordless service sms endpoint not_found error.
func NewSmsNotFound(body *SmsNotFoundResponseBody) *passwordless.NotFoundError {
	v := &passwordless.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewSmsUnauthorized builds a passwordless service sms endpoint unauthorized
// error.
func NewSmsUnauthorized(body *SmsUnauthorizedResponseBody) *passwordless.UnauthorizedError {
	v := &passwordless.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewVerifyResultOK builds a "passwordless" service "verify" endpoint result
// from a HTTP "OK" response.
func NewVerifyResultOK(body *VerifyResponseBody) *passwordless.VerifyResult {
	v := &passwordless.VerifyResult{
		Authenticated: *body.Authenticated,
		UserID:        *body.UserID,
		Email:         body.Email,
	}
	if body.User != nil {
		v.User = unmarshalUserResponseBodyToDesigntypesUser(body.User)
	}

	return v
}

// NewVerifyBadRequest builds a passwordless service verify endpoint
// bad_request error.
func NewVerifyBadRequest(body *VerifyBadRequestResponseBody) *passwordless.BadRequestError {
	v := &passwordless.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewVerifyForbidden builds a passwordless service verify endpoint forbidden
// error.
func NewVerifyForbidden(body *VerifyForbiddenResponseBody) *passwordless.ForbiddenError {
	v := &passwordless.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewVerifyInternalError builds a passwordless service verify endpoint
// internal_error error.
func NewVerifyInternalError(body *VerifyInternalErrorResponseBody) *passwordless.InternalServerError {
	v := &passwordless.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewVerifyNotFound builds a passwordless service verify endpoint not_found
// error.
func NewVerifyNotFound(body *VerifyNotFoundResponseBody) *passwordless.NotFoundError {
	v := &passwordless.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewVerifyUnauthorized builds a passwordless service verify endpoint
// unauthorized error.
func NewVerifyUnauthorized(body *VerifyUnauthorizedResponseBody) *passwordless.UnauthorizedError {
	v := &passwordless.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewMethodsResultOK builds a "passwordless" service "methods" endpoint result
// from a HTTP "OK" response.
func NewMethodsResultOK(body *MethodsResponseBody) *passwordless.MethodsResult {
	v := &passwordless.MethodsResult{
		Enabled: *body.Enabled,
	}
	v.Methods = make([]string, len(body.Methods))
	for i, val := range body.Methods {
		v.Methods[i] = val
	}

	return v
}

// NewMethodsBadRequest builds a passwordless service methods endpoint
// bad_request error.
func NewMethodsBadRequest(body *MethodsBadRequestResponseBody) *passwordless.BadRequestError {
	v := &passwordless.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewMethodsForbidden builds a passwordless service methods endpoint forbidden
// error.
func NewMethodsForbidden(body *MethodsForbiddenResponseBody) *passwordless.ForbiddenError {
	v := &passwordless.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewMethodsInternalError builds a passwordless service methods endpoint
// internal_error error.
func NewMethodsInternalError(body *MethodsInternalErrorResponseBody) *passwordless.InternalServerError {
	v := &passwordless.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewMethodsNotFound builds a passwordless service methods endpoint not_found
// error.
func NewMethodsNotFound(body *MethodsNotFoundResponseBody) *passwordless.NotFoundError {
	v := &passwordless.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewMethodsUnauthorized builds a passwordless service methods endpoint
// unauthorized error.
func NewMethodsUnauthorized(body *MethodsUnauthorizedResponseBody) *passwordless.UnauthorizedError {
	v := &passwordless.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewMagicLinkResultOK builds a "passwordless" service "magic_link" endpoint
// result from a HTTP "OK" response.
func NewMagicLinkResultOK(body *MagicLinkResponseBody) *passwordless.MagicLinkResult {
	v := &passwordless.MagicLinkResult{
		MagicLink: *body.MagicLink,
		ExpiresIn: *body.ExpiresIn,
	}

	return v
}

// NewMagicLinkBadRequest builds a passwordless service magic_link endpoint
// bad_request error.
func NewMagicLinkBadRequest(body *MagicLinkBadRequestResponseBody) *passwordless.BadRequestError {
	v := &passwordless.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewMagicLinkForbidden builds a passwordless service magic_link endpoint
// forbidden error.
func NewMagicLinkForbidden(body *MagicLinkForbiddenResponseBody) *passwordless.ForbiddenError {
	v := &passwordless.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewMagicLinkInternalError builds a passwordless service magic_link endpoint
// internal_error error.
func NewMagicLinkInternalError(body *MagicLinkInternalErrorResponseBody) *passwordless.InternalServerError {
	v := &passwordless.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewMagicLinkNotFound builds a passwordless service magic_link endpoint
// not_found error.
func NewMagicLinkNotFound(body *MagicLinkNotFoundResponseBody) *passwordless.NotFoundError {
	v := &passwordless.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewMagicLinkUnauthorized builds a passwordless service magic_link endpoint
// unauthorized error.
func NewMagicLinkUnauthorized(body *MagicLinkUnauthorizedResponseBody) *passwordless.UnauthorizedError {
	v := &passwordless.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// ValidateEmailResponseBody runs the validations defined on EmailResponseBody
func ValidateEmailResponseBody(body *EmailResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.VerificationID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("verification_id", "body"))
	}
	return
}

// ValidateSmsResponseBody runs the validations defined on SmsResponseBody
func ValidateSmsResponseBody(body *SmsResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.VerificationID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("verification_id", "body"))
	}
	return
}

// ValidateVerifyResponseBody runs the validations defined on VerifyResponseBody
func ValidateVerifyResponseBody(body *VerifyResponseBody) (err error) {
	if body.Authenticated == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("authenticated", "body"))
	}
	if body.UserID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("user_id", "body"))
	}
	if body.User != nil {
		if err2 := ValidateUserResponseBody(body.User); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateMethodsResponseBody runs the validations defined on
// MethodsResponseBody
func ValidateMethodsResponseBody(body *MethodsResponseBody) (err error) {
	if body.Enabled == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("enabled", "body"))
	}
	if body.Methods == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("methods", "body"))
	}
	return
}

// ValidateMagicLinkResponseBody runs the validations defined on
// magic_link_response_body
func ValidateMagicLinkResponseBody(body *MagicLinkResponseBody) (err error) {
	if body.MagicLink == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("magic_link", "body"))
	}
	if body.ExpiresIn == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("expires_in", "body"))
	}
	return
}

// ValidateEmailBadRequestResponseBody runs the validations defined on
// email_bad_request_response_body
func ValidateEmailBadRequestResponseBody(body *EmailBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateEmailForbiddenResponseBody runs the validations defined on
// email_forbidden_response_body
func ValidateEmailForbiddenResponseBody(body *EmailForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateEmailInternalErrorResponseBody runs the validations defined on
// email_internal_error_response_body
func ValidateEmailInternalErrorResponseBody(body *EmailInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateEmailNotFoundResponseBody runs the validations defined on
// email_not_found_response_body
func ValidateEmailNotFoundResponseBody(body *EmailNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateEmailUnauthorizedResponseBody runs the validations defined on
// email_unauthorized_response_body
func ValidateEmailUnauthorizedResponseBody(body *EmailUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateSmsBadRequestResponseBody runs the validations defined on
// sms_bad_request_response_body
func ValidateSmsBadRequestResponseBody(body *SmsBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateSmsForbiddenResponseBody runs the validations defined on
// sms_forbidden_response_body
func ValidateSmsForbiddenResponseBody(body *SmsForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateSmsInternalErrorResponseBody runs the validations defined on
// sms_internal_error_response_body
func ValidateSmsInternalErrorResponseBody(body *SmsInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateSmsNotFoundResponseBody runs the validations defined on
// sms_not_found_response_body
func ValidateSmsNotFoundResponseBody(body *SmsNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateSmsUnauthorizedResponseBody runs the validations defined on
// sms_unauthorized_response_body
func ValidateSmsUnauthorizedResponseBody(body *SmsUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateVerifyBadRequestResponseBody runs the validations defined on
// verify_bad_request_response_body
func ValidateVerifyBadRequestResponseBody(body *VerifyBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateVerifyForbiddenResponseBody runs the validations defined on
// verify_forbidden_response_body
func ValidateVerifyForbiddenResponseBody(body *VerifyForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateVerifyInternalErrorResponseBody runs the validations defined on
// verify_internal_error_response_body
func ValidateVerifyInternalErrorResponseBody(body *VerifyInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateVerifyNotFoundResponseBody runs the validations defined on
// verify_not_found_response_body
func ValidateVerifyNotFoundResponseBody(body *VerifyNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateVerifyUnauthorizedResponseBody runs the validations defined on
// verify_unauthorized_response_body
func ValidateVerifyUnauthorizedResponseBody(body *VerifyUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateMethodsBadRequestResponseBody runs the validations defined on
// methods_bad_request_response_body
func ValidateMethodsBadRequestResponseBody(body *MethodsBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateMethodsForbiddenResponseBody runs the validations defined on
// methods_forbidden_response_body
func ValidateMethodsForbiddenResponseBody(body *MethodsForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateMethodsInternalErrorResponseBody runs the validations defined on
// methods_internal_error_response_body
func ValidateMethodsInternalErrorResponseBody(body *MethodsInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateMethodsNotFoundResponseBody runs the validations defined on
// methods_not_found_response_body
func ValidateMethodsNotFoundResponseBody(body *MethodsNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateMethodsUnauthorizedResponseBody runs the validations defined on
// methods_unauthorized_response_body
func ValidateMethodsUnauthorizedResponseBody(body *MethodsUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateMagicLinkBadRequestResponseBody runs the validations defined on
// magic_link_bad_request_response_body
func ValidateMagicLinkBadRequestResponseBody(body *MagicLinkBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateMagicLinkForbiddenResponseBody runs the validations defined on
// magic_link_forbidden_response_body
func ValidateMagicLinkForbiddenResponseBody(body *MagicLinkForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateMagicLinkInternalErrorResponseBody runs the validations defined on
// magic_link_internal_error_response_body
func ValidateMagicLinkInternalErrorResponseBody(body *MagicLinkInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateMagicLinkNotFoundResponseBody runs the validations defined on
// magic_link_not_found_response_body
func ValidateMagicLinkNotFoundResponseBody(body *MagicLinkNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateMagicLinkUnauthorizedResponseBody runs the validations defined on
// magic_link_unauthorized_response_body
func ValidateMagicLinkUnauthorizedResponseBody(body *MagicLinkUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUserResponseBody runs the validations defined on UserResponseBody
func ValidateUserResponseBody(body *UserResponseBody) (err error) {
	if body.Active == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("active", "body"))
	}
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.EmailVerified == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email_verified", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Email != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", *body.Email, goa.FormatEmail))
	}
	return
}
