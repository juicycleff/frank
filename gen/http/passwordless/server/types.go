// Code generated by goa v3.20.0, DO NOT EDIT.
//
// passwordless HTTP server types
//
// Command:
// $ goa gen github.com/juicycleff/frank/design -o .

package server

import (
	passwordless "github.com/juicycleff/frank/gen/passwordless"
	goa "goa.design/goa/v3/pkg"
)

// EmailRequestBody is the type of the "passwordless" service "email" endpoint
// HTTP request body.
type EmailRequestBody struct {
	// User email
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// URL to redirect after successful authentication
	RedirectURL *string `form:"redirect_url,omitempty" json:"redirect_url,omitempty" xml:"redirect_url,omitempty"`
}

// SmsRequestBody is the type of the "passwordless" service "sms" endpoint HTTP
// request body.
type SmsRequestBody struct {
	// User phone number
	PhoneNumber *string `form:"phone_number,omitempty" json:"phone_number,omitempty" xml:"phone_number,omitempty"`
	// URL to redirect after successful authentication
	RedirectURL *string `form:"redirect_url,omitempty" json:"redirect_url,omitempty" xml:"redirect_url,omitempty"`
}

// VerifyRequestBody is the type of the "passwordless" service "verify"
// endpoint HTTP request body.
type VerifyRequestBody struct {
	// Verification token for email authentication
	Token *string `form:"token,omitempty" json:"token,omitempty" xml:"token,omitempty"`
	// Phone number for SMS authentication
	PhoneNumber *string `form:"phone_number,omitempty" json:"phone_number,omitempty" xml:"phone_number,omitempty"`
	// Verification code for SMS authentication
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Authentication type
	AuthType *string `form:"auth_type,omitempty" json:"auth_type,omitempty" xml:"auth_type,omitempty"`
}

// MagicLinkRequestBody is the type of the "passwordless" service "magic_link"
// endpoint HTTP request body.
type MagicLinkRequestBody struct {
	// User email
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// User ID
	UserID *string `form:"user_id,omitempty" json:"user_id,omitempty" xml:"user_id,omitempty"`
	// URL to redirect after authentication
	RedirectURL *string `form:"redirect_url,omitempty" json:"redirect_url,omitempty" xml:"redirect_url,omitempty"`
	// Link expiry in seconds
	ExpiresIn *int `form:"expires_in,omitempty" json:"expires_in,omitempty" xml:"expires_in,omitempty"`
}

// EmailResponseBody is the type of the "passwordless" service "email" endpoint
// HTTP response body.
type EmailResponseBody struct {
	// Success message
	Message string `form:"message" json:"message" xml:"message"`
	// Verification ID
	VerificationID string `form:"verification_id" json:"verification_id" xml:"verification_id"`
}

// SmsResponseBody is the type of the "passwordless" service "sms" endpoint
// HTTP response body.
type SmsResponseBody struct {
	// Success message
	Message string `form:"message" json:"message" xml:"message"`
	// Verification ID
	VerificationID string `form:"verification_id" json:"verification_id" xml:"verification_id"`
}

// VerifyResponseBody is the type of the "passwordless" service "verify"
// endpoint HTTP response body.
type VerifyResponseBody struct {
	// Whether authentication was successful
	Authenticated bool `form:"authenticated" json:"authenticated" xml:"authenticated"`
	// User ID
	UserID string `form:"user_id" json:"user_id" xml:"user_id"`
	// User email
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// User data if authentication successful
	User *UserResponseBody `form:"user,omitempty" json:"user,omitempty" xml:"user,omitempty"`
}

// MethodsResponseBody is the type of the "passwordless" service "methods"
// endpoint HTTP response body.
type MethodsResponseBody struct {
	// Whether passwordless auth is enabled
	Enabled bool `form:"enabled" json:"enabled" xml:"enabled"`
	// Available methods
	Methods []string `form:"methods" json:"methods" xml:"methods"`
}

// MagicLinkResponseBody is the type of the "passwordless" service "magic_link"
// endpoint HTTP response body.
type MagicLinkResponseBody struct {
	// Generated magic link
	MagicLink string `form:"magic_link" json:"magic_link" xml:"magic_link"`
	// Expiry in seconds
	ExpiresIn int `form:"expires_in" json:"expires_in" xml:"expires_in"`
}

// EmailBadRequestResponseBody is the type of the "passwordless" service
// "email" endpoint HTTP response body for the "bad_request" error.
type EmailBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// EmailForbiddenResponseBody is the type of the "passwordless" service "email"
// endpoint HTTP response body for the "forbidden" error.
type EmailForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// EmailInternalErrorResponseBody is the type of the "passwordless" service
// "email" endpoint HTTP response body for the "internal_error" error.
type EmailInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// EmailNotFoundResponseBody is the type of the "passwordless" service "email"
// endpoint HTTP response body for the "not_found" error.
type EmailNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// EmailUnauthorizedResponseBody is the type of the "passwordless" service
// "email" endpoint HTTP response body for the "unauthorized" error.
type EmailUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// SmsBadRequestResponseBody is the type of the "passwordless" service "sms"
// endpoint HTTP response body for the "bad_request" error.
type SmsBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// SmsForbiddenResponseBody is the type of the "passwordless" service "sms"
// endpoint HTTP response body for the "forbidden" error.
type SmsForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// SmsInternalErrorResponseBody is the type of the "passwordless" service "sms"
// endpoint HTTP response body for the "internal_error" error.
type SmsInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// SmsNotFoundResponseBody is the type of the "passwordless" service "sms"
// endpoint HTTP response body for the "not_found" error.
type SmsNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// SmsUnauthorizedResponseBody is the type of the "passwordless" service "sms"
// endpoint HTTP response body for the "unauthorized" error.
type SmsUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// VerifyBadRequestResponseBody is the type of the "passwordless" service
// "verify" endpoint HTTP response body for the "bad_request" error.
type VerifyBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// VerifyForbiddenResponseBody is the type of the "passwordless" service
// "verify" endpoint HTTP response body for the "forbidden" error.
type VerifyForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// VerifyInternalErrorResponseBody is the type of the "passwordless" service
// "verify" endpoint HTTP response body for the "internal_error" error.
type VerifyInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// VerifyNotFoundResponseBody is the type of the "passwordless" service
// "verify" endpoint HTTP response body for the "not_found" error.
type VerifyNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// VerifyUnauthorizedResponseBody is the type of the "passwordless" service
// "verify" endpoint HTTP response body for the "unauthorized" error.
type VerifyUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// MethodsBadRequestResponseBody is the type of the "passwordless" service
// "methods" endpoint HTTP response body for the "bad_request" error.
type MethodsBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// MethodsForbiddenResponseBody is the type of the "passwordless" service
// "methods" endpoint HTTP response body for the "forbidden" error.
type MethodsForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// MethodsInternalErrorResponseBody is the type of the "passwordless" service
// "methods" endpoint HTTP response body for the "internal_error" error.
type MethodsInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// MethodsNotFoundResponseBody is the type of the "passwordless" service
// "methods" endpoint HTTP response body for the "not_found" error.
type MethodsNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// MethodsUnauthorizedResponseBody is the type of the "passwordless" service
// "methods" endpoint HTTP response body for the "unauthorized" error.
type MethodsUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// MagicLinkBadRequestResponseBody is the type of the "passwordless" service
// "magic_link" endpoint HTTP response body for the "bad_request" error.
type MagicLinkBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// MagicLinkForbiddenResponseBody is the type of the "passwordless" service
// "magic_link" endpoint HTTP response body for the "forbidden" error.
type MagicLinkForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// MagicLinkInternalErrorResponseBody is the type of the "passwordless" service
// "magic_link" endpoint HTTP response body for the "internal_error" error.
type MagicLinkInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// MagicLinkNotFoundResponseBody is the type of the "passwordless" service
// "magic_link" endpoint HTTP response body for the "not_found" error.
type MagicLinkNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// MagicLinkUnauthorizedResponseBody is the type of the "passwordless" service
// "magic_link" endpoint HTTP response body for the "unauthorized" error.
type MagicLinkUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UserResponseBody is used to define fields on response body types.
type UserResponseBody struct {
	// User ID
	ID string `form:"id" json:"id" xml:"id"`
	// User email
	Email string `form:"email" json:"email" xml:"email"`
	// User first name
	FirstName *string `form:"first_name,omitempty" json:"first_name,omitempty" xml:"first_name,omitempty"`
	// User last name
	LastName *string `form:"last_name,omitempty" json:"last_name,omitempty" xml:"last_name,omitempty"`
	// Whether email is verified
	EmailVerified bool `form:"email_verified" json:"email_verified" xml:"email_verified"`
	// User phone number
	PhoneNumber *string `form:"phone_number,omitempty" json:"phone_number,omitempty" xml:"phone_number,omitempty"`
	// Whether phone is verified
	PhoneVerified *bool `form:"phone_verified,omitempty" json:"phone_verified,omitempty" xml:"phone_verified,omitempty"`
	// URL to user's profile image
	ProfileImageURL *string `form:"profile_image_url,omitempty" json:"profile_image_url,omitempty" xml:"profile_image_url,omitempty"`
	// User's locale preference
	Locale *string `form:"locale,omitempty" json:"locale,omitempty" xml:"locale,omitempty"`
	// User metadata
	Metadata map[string]any `form:"metadata,omitempty" json:"metadata,omitempty" xml:"metadata,omitempty"`
	// Whether account is active
	Active bool `form:"active" json:"active" xml:"active"`
	// Account creation timestamp
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// Account last update timestamp
	UpdatedAt string `form:"updated_at" json:"updated_at" xml:"updated_at"`
}

// NewEmailResponseBody builds the HTTP response body from the result of the
// "email" endpoint of the "passwordless" service.
func NewEmailResponseBody(res *passwordless.EmailResult) *EmailResponseBody {
	body := &EmailResponseBody{
		Message:        res.Message,
		VerificationID: res.VerificationID,
	}
	return body
}

// NewSmsResponseBody builds the HTTP response body from the result of the
// "sms" endpoint of the "passwordless" service.
func NewSmsResponseBody(res *passwordless.SmsResult) *SmsResponseBody {
	body := &SmsResponseBody{
		Message:        res.Message,
		VerificationID: res.VerificationID,
	}
	return body
}

// NewVerifyResponseBody builds the HTTP response body from the result of the
// "verify" endpoint of the "passwordless" service.
func NewVerifyResponseBody(res *passwordless.VerifyResult) *VerifyResponseBody {
	body := &VerifyResponseBody{
		Authenticated: res.Authenticated,
		UserID:        res.UserID,
		Email:         res.Email,
	}
	if res.User != nil {
		body.User = marshalPasswordlessUserToUserResponseBody(res.User)
	}
	return body
}

// NewMethodsResponseBody builds the HTTP response body from the result of the
// "methods" endpoint of the "passwordless" service.
func NewMethodsResponseBody(res *passwordless.MethodsResult) *MethodsResponseBody {
	body := &MethodsResponseBody{
		Enabled: res.Enabled,
	}
	if res.Methods != nil {
		body.Methods = make([]string, len(res.Methods))
		for i, val := range res.Methods {
			body.Methods[i] = val
		}
	} else {
		body.Methods = []string{}
	}
	return body
}

// NewMagicLinkResponseBody builds the HTTP response body from the result of
// the "magic_link" endpoint of the "passwordless" service.
func NewMagicLinkResponseBody(res *passwordless.MagicLinkResult) *MagicLinkResponseBody {
	body := &MagicLinkResponseBody{
		MagicLink: res.MagicLink,
		ExpiresIn: res.ExpiresIn,
	}
	return body
}

// NewEmailBadRequestResponseBody builds the HTTP response body from the result
// of the "email" endpoint of the "passwordless" service.
func NewEmailBadRequestResponseBody(res *passwordless.BadRequestError) *EmailBadRequestResponseBody {
	body := &EmailBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewEmailForbiddenResponseBody builds the HTTP response body from the result
// of the "email" endpoint of the "passwordless" service.
func NewEmailForbiddenResponseBody(res *passwordless.ForbiddenError) *EmailForbiddenResponseBody {
	body := &EmailForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewEmailInternalErrorResponseBody builds the HTTP response body from the
// result of the "email" endpoint of the "passwordless" service.
func NewEmailInternalErrorResponseBody(res *passwordless.InternalServerError) *EmailInternalErrorResponseBody {
	body := &EmailInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewEmailNotFoundResponseBody builds the HTTP response body from the result
// of the "email" endpoint of the "passwordless" service.
func NewEmailNotFoundResponseBody(res *passwordless.NotFoundError) *EmailNotFoundResponseBody {
	body := &EmailNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewEmailUnauthorizedResponseBody builds the HTTP response body from the
// result of the "email" endpoint of the "passwordless" service.
func NewEmailUnauthorizedResponseBody(res *passwordless.UnauthorizedError) *EmailUnauthorizedResponseBody {
	body := &EmailUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewSmsBadRequestResponseBody builds the HTTP response body from the result
// of the "sms" endpoint of the "passwordless" service.
func NewSmsBadRequestResponseBody(res *passwordless.BadRequestError) *SmsBadRequestResponseBody {
	body := &SmsBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewSmsForbiddenResponseBody builds the HTTP response body from the result of
// the "sms" endpoint of the "passwordless" service.
func NewSmsForbiddenResponseBody(res *passwordless.ForbiddenError) *SmsForbiddenResponseBody {
	body := &SmsForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewSmsInternalErrorResponseBody builds the HTTP response body from the
// result of the "sms" endpoint of the "passwordless" service.
func NewSmsInternalErrorResponseBody(res *passwordless.InternalServerError) *SmsInternalErrorResponseBody {
	body := &SmsInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewSmsNotFoundResponseBody builds the HTTP response body from the result of
// the "sms" endpoint of the "passwordless" service.
func NewSmsNotFoundResponseBody(res *passwordless.NotFoundError) *SmsNotFoundResponseBody {
	body := &SmsNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewSmsUnauthorizedResponseBody builds the HTTP response body from the result
// of the "sms" endpoint of the "passwordless" service.
func NewSmsUnauthorizedResponseBody(res *passwordless.UnauthorizedError) *SmsUnauthorizedResponseBody {
	body := &SmsUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewVerifyBadRequestResponseBody builds the HTTP response body from the
// result of the "verify" endpoint of the "passwordless" service.
func NewVerifyBadRequestResponseBody(res *passwordless.BadRequestError) *VerifyBadRequestResponseBody {
	body := &VerifyBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewVerifyForbiddenResponseBody builds the HTTP response body from the result
// of the "verify" endpoint of the "passwordless" service.
func NewVerifyForbiddenResponseBody(res *passwordless.ForbiddenError) *VerifyForbiddenResponseBody {
	body := &VerifyForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewVerifyInternalErrorResponseBody builds the HTTP response body from the
// result of the "verify" endpoint of the "passwordless" service.
func NewVerifyInternalErrorResponseBody(res *passwordless.InternalServerError) *VerifyInternalErrorResponseBody {
	body := &VerifyInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewVerifyNotFoundResponseBody builds the HTTP response body from the result
// of the "verify" endpoint of the "passwordless" service.
func NewVerifyNotFoundResponseBody(res *passwordless.NotFoundError) *VerifyNotFoundResponseBody {
	body := &VerifyNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewVerifyUnauthorizedResponseBody builds the HTTP response body from the
// result of the "verify" endpoint of the "passwordless" service.
func NewVerifyUnauthorizedResponseBody(res *passwordless.UnauthorizedError) *VerifyUnauthorizedResponseBody {
	body := &VerifyUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewMethodsBadRequestResponseBody builds the HTTP response body from the
// result of the "methods" endpoint of the "passwordless" service.
func NewMethodsBadRequestResponseBody(res *passwordless.BadRequestError) *MethodsBadRequestResponseBody {
	body := &MethodsBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewMethodsForbiddenResponseBody builds the HTTP response body from the
// result of the "methods" endpoint of the "passwordless" service.
func NewMethodsForbiddenResponseBody(res *passwordless.ForbiddenError) *MethodsForbiddenResponseBody {
	body := &MethodsForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewMethodsInternalErrorResponseBody builds the HTTP response body from the
// result of the "methods" endpoint of the "passwordless" service.
func NewMethodsInternalErrorResponseBody(res *passwordless.InternalServerError) *MethodsInternalErrorResponseBody {
	body := &MethodsInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewMethodsNotFoundResponseBody builds the HTTP response body from the result
// of the "methods" endpoint of the "passwordless" service.
func NewMethodsNotFoundResponseBody(res *passwordless.NotFoundError) *MethodsNotFoundResponseBody {
	body := &MethodsNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewMethodsUnauthorizedResponseBody builds the HTTP response body from the
// result of the "methods" endpoint of the "passwordless" service.
func NewMethodsUnauthorizedResponseBody(res *passwordless.UnauthorizedError) *MethodsUnauthorizedResponseBody {
	body := &MethodsUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewMagicLinkBadRequestResponseBody builds the HTTP response body from the
// result of the "magic_link" endpoint of the "passwordless" service.
func NewMagicLinkBadRequestResponseBody(res *passwordless.BadRequestError) *MagicLinkBadRequestResponseBody {
	body := &MagicLinkBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewMagicLinkForbiddenResponseBody builds the HTTP response body from the
// result of the "magic_link" endpoint of the "passwordless" service.
func NewMagicLinkForbiddenResponseBody(res *passwordless.ForbiddenError) *MagicLinkForbiddenResponseBody {
	body := &MagicLinkForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewMagicLinkInternalErrorResponseBody builds the HTTP response body from the
// result of the "magic_link" endpoint of the "passwordless" service.
func NewMagicLinkInternalErrorResponseBody(res *passwordless.InternalServerError) *MagicLinkInternalErrorResponseBody {
	body := &MagicLinkInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewMagicLinkNotFoundResponseBody builds the HTTP response body from the
// result of the "magic_link" endpoint of the "passwordless" service.
func NewMagicLinkNotFoundResponseBody(res *passwordless.NotFoundError) *MagicLinkNotFoundResponseBody {
	body := &MagicLinkNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewMagicLinkUnauthorizedResponseBody builds the HTTP response body from the
// result of the "magic_link" endpoint of the "passwordless" service.
func NewMagicLinkUnauthorizedResponseBody(res *passwordless.UnauthorizedError) *MagicLinkUnauthorizedResponseBody {
	body := &MagicLinkUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewEmailPayload builds a passwordless service email endpoint payload.
func NewEmailPayload(body *EmailRequestBody, oauth2 *string, xAPIKey *string, jwt *string) *passwordless.EmailPayload {
	v := &passwordless.EmailPayload{
		Email:       *body.Email,
		RedirectURL: body.RedirectURL,
	}
	v.Oauth2 = oauth2
	v.XAPIKey = xAPIKey
	v.JWT = jwt

	return v
}

// NewSmsPayload builds a passwordless service sms endpoint payload.
func NewSmsPayload(body *SmsRequestBody, oauth2 *string, xAPIKey *string, jwt *string) *passwordless.SmsPayload {
	v := &passwordless.SmsPayload{
		PhoneNumber: *body.PhoneNumber,
		RedirectURL: body.RedirectURL,
	}
	v.Oauth2 = oauth2
	v.XAPIKey = xAPIKey
	v.JWT = jwt

	return v
}

// NewVerifyPayload builds a passwordless service verify endpoint payload.
func NewVerifyPayload(body *VerifyRequestBody, oauth2 *string, xAPIKey *string, jwt *string) *passwordless.VerifyPayload {
	v := &passwordless.VerifyPayload{
		Token:       body.Token,
		PhoneNumber: body.PhoneNumber,
		Code:        body.Code,
		AuthType:    *body.AuthType,
	}
	v.Oauth2 = oauth2
	v.XAPIKey = xAPIKey
	v.JWT = jwt

	return v
}

// NewMethodsPayload builds a passwordless service methods endpoint payload.
func NewMethodsPayload(oauth2 *string, xAPIKey *string, jwt *string) *passwordless.MethodsPayload {
	v := &passwordless.MethodsPayload{}
	v.Oauth2 = oauth2
	v.XAPIKey = xAPIKey
	v.JWT = jwt

	return v
}

// NewMagicLinkPayload builds a passwordless service magic_link endpoint
// payload.
func NewMagicLinkPayload(body *MagicLinkRequestBody, jwt *string) *passwordless.MagicLinkPayload {
	v := &passwordless.MagicLinkPayload{
		Email:       *body.Email,
		UserID:      *body.UserID,
		RedirectURL: *body.RedirectURL,
	}
	if body.ExpiresIn != nil {
		v.ExpiresIn = *body.ExpiresIn
	}
	if body.ExpiresIn == nil {
		v.ExpiresIn = 86400
	}
	v.JWT = jwt

	return v
}

// ValidateEmailRequestBody runs the validations defined on EmailRequestBody
func ValidateEmailRequestBody(body *EmailRequestBody) (err error) {
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Email != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", *body.Email, goa.FormatEmail))
	}
	return
}

// ValidateSmsRequestBody runs the validations defined on SmsRequestBody
func ValidateSmsRequestBody(body *SmsRequestBody) (err error) {
	if body.PhoneNumber == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("phone_number", "body"))
	}
	return
}

// ValidateVerifyRequestBody runs the validations defined on VerifyRequestBody
func ValidateVerifyRequestBody(body *VerifyRequestBody) (err error) {
	if body.AuthType == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("auth_type", "body"))
	}
	if body.AuthType != nil {
		if !(*body.AuthType == "email" || *body.AuthType == "sms") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.auth_type", *body.AuthType, []any{"email", "sms"}))
		}
	}
	return
}

// ValidateMagicLinkRequestBody runs the validations defined on
// magic_link_request_body
func ValidateMagicLinkRequestBody(body *MagicLinkRequestBody) (err error) {
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.UserID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("user_id", "body"))
	}
	if body.RedirectURL == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("redirect_url", "body"))
	}
	if body.Email != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", *body.Email, goa.FormatEmail))
	}
	if body.ExpiresIn != nil {
		if *body.ExpiresIn < 60 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.expires_in", *body.ExpiresIn, 60, true))
		}
	}
	if body.ExpiresIn != nil {
		if *body.ExpiresIn > 604800 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.expires_in", *body.ExpiresIn, 604800, false))
		}
	}
	return
}
