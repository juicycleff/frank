// Code generated by goa v3.20.0, DO NOT EDIT.
//
// api_keys HTTP server types
//
// Command:
// $ goa gen github.com/juicycleff/frank/design -o .

package server

import (
	apikeys "github.com/juicycleff/frank/gen/api_keys"
	goa "goa.design/goa/v3/pkg"
)

// CreateRequestBody is the type of the "api_keys" service "create" endpoint
// HTTP request body.
type CreateRequestBody struct {
	Key *CreateAPIKeyRequestRequestBody `form:"key,omitempty" json:"key,omitempty" xml:"key,omitempty"`
}

// UpdateRequestBody is the type of the "api_keys" service "update" endpoint
// HTTP request body.
type UpdateRequestBody struct {
	Key *UpdateAPIKeyRequestRequestBody `form:"key,omitempty" json:"key,omitempty" xml:"key,omitempty"`
}

// ListResponseBody is the type of the "api_keys" service "list" endpoint HTTP
// response body.
type ListResponseBody struct {
	Data []*APIKeyResponseResponseBody `form:"data" json:"data" xml:"data"`
	// Total number of keys
	Total      int                             `form:"total" json:"total" xml:"total"`
	Pagination *PaginationResponseResponseBody `form:"pagination" json:"pagination" xml:"pagination"`
}

// CreateResponseBody is the type of the "api_keys" service "create" endpoint
// HTTP response body.
type CreateResponseBody struct {
	// API key secret
	Key string `form:"key" json:"key" xml:"key"`
	// API key ID
	ID string `form:"id" json:"id" xml:"id"`
	// API key name
	Name string `form:"name" json:"name" xml:"name"`
	// User ID who owns the key
	UserID *string `form:"user_id,omitempty" json:"user_id,omitempty" xml:"user_id,omitempty"`
	// Organization ID
	OrganizationID *string `form:"organization_id,omitempty" json:"organization_id,omitempty" xml:"organization_id,omitempty"`
	// API key type (client/server)
	Type string `form:"type" json:"type" xml:"type"`
	// Whether API key is active
	Active bool `form:"active" json:"active" xml:"active"`
	// Key permissions
	Permissions []string `form:"permissions,omitempty" json:"permissions,omitempty" xml:"permissions,omitempty"`
	// Key scopes
	Scopes []string `form:"scopes,omitempty" json:"scopes,omitempty" xml:"scopes,omitempty"`
	// Key metadata
	Metadata map[string]any `form:"metadata,omitempty" json:"metadata,omitempty" xml:"metadata,omitempty"`
	// Last used timestamp
	LastUsed *string `form:"last_used,omitempty" json:"last_used,omitempty" xml:"last_used,omitempty"`
	// Expiry timestamp
	ExpiresAt *string `form:"expires_at,omitempty" json:"expires_at,omitempty" xml:"expires_at,omitempty"`
	// Creation timestamp
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// Last update timestamp
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// GetResponseBody is the type of the "api_keys" service "get" endpoint HTTP
// response body.
type GetResponseBody struct {
	// API key ID
	ID string `form:"id" json:"id" xml:"id"`
	// API key name
	Name string `form:"name" json:"name" xml:"name"`
	// User ID who owns the key
	UserID *string `form:"user_id,omitempty" json:"user_id,omitempty" xml:"user_id,omitempty"`
	// Organization ID
	OrganizationID *string `form:"organization_id,omitempty" json:"organization_id,omitempty" xml:"organization_id,omitempty"`
	// API key type (client/server)
	Type string `form:"type" json:"type" xml:"type"`
	// Whether API key is active
	Active bool `form:"active" json:"active" xml:"active"`
	// Key permissions
	Permissions []string `form:"permissions,omitempty" json:"permissions,omitempty" xml:"permissions,omitempty"`
	// Key scopes
	Scopes []string `form:"scopes,omitempty" json:"scopes,omitempty" xml:"scopes,omitempty"`
	// Key metadata
	Metadata map[string]any `form:"metadata,omitempty" json:"metadata,omitempty" xml:"metadata,omitempty"`
	// Last used timestamp
	LastUsed *string `form:"last_used,omitempty" json:"last_used,omitempty" xml:"last_used,omitempty"`
	// Expiry timestamp
	ExpiresAt *string `form:"expires_at,omitempty" json:"expires_at,omitempty" xml:"expires_at,omitempty"`
	// Creation timestamp
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// Last update timestamp
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// UpdateResponseBody is the type of the "api_keys" service "update" endpoint
// HTTP response body.
type UpdateResponseBody struct {
	// API key ID
	ID string `form:"id" json:"id" xml:"id"`
	// API key name
	Name string `form:"name" json:"name" xml:"name"`
	// User ID who owns the key
	UserID *string `form:"user_id,omitempty" json:"user_id,omitempty" xml:"user_id,omitempty"`
	// Organization ID
	OrganizationID *string `form:"organization_id,omitempty" json:"organization_id,omitempty" xml:"organization_id,omitempty"`
	// API key type (client/server)
	Type string `form:"type" json:"type" xml:"type"`
	// Whether API key is active
	Active bool `form:"active" json:"active" xml:"active"`
	// Key permissions
	Permissions []string `form:"permissions,omitempty" json:"permissions,omitempty" xml:"permissions,omitempty"`
	// Key scopes
	Scopes []string `form:"scopes,omitempty" json:"scopes,omitempty" xml:"scopes,omitempty"`
	// Key metadata
	Metadata map[string]any `form:"metadata,omitempty" json:"metadata,omitempty" xml:"metadata,omitempty"`
	// Last used timestamp
	LastUsed *string `form:"last_used,omitempty" json:"last_used,omitempty" xml:"last_used,omitempty"`
	// Expiry timestamp
	ExpiresAt *string `form:"expires_at,omitempty" json:"expires_at,omitempty" xml:"expires_at,omitempty"`
	// Creation timestamp
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// Last update timestamp
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// ValidateResponseBody is the type of the "api_keys" service "validate"
// endpoint HTTP response body.
type ValidateResponseBody struct {
	// Whether key is valid
	Valid bool `form:"valid" json:"valid" xml:"valid"`
	// Key details if valid
	Key *APIKeyResponseResponseBody `form:"key,omitempty" json:"key,omitempty" xml:"key,omitempty"`
}

// ListBadRequestResponseBody is the type of the "api_keys" service "list"
// endpoint HTTP response body for the "bad_request" error.
type ListBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListForbiddenResponseBody is the type of the "api_keys" service "list"
// endpoint HTTP response body for the "forbidden" error.
type ListForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListInternalErrorResponseBody is the type of the "api_keys" service "list"
// endpoint HTTP response body for the "internal_error" error.
type ListInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListNotFoundResponseBody is the type of the "api_keys" service "list"
// endpoint HTTP response body for the "not_found" error.
type ListNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListUnauthorizedResponseBody is the type of the "api_keys" service "list"
// endpoint HTTP response body for the "unauthorized" error.
type ListUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreateBadRequestResponseBody is the type of the "api_keys" service "create"
// endpoint HTTP response body for the "bad_request" error.
type CreateBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreateForbiddenResponseBody is the type of the "api_keys" service "create"
// endpoint HTTP response body for the "forbidden" error.
type CreateForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreateInternalErrorResponseBody is the type of the "api_keys" service
// "create" endpoint HTTP response body for the "internal_error" error.
type CreateInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreateNotFoundResponseBody is the type of the "api_keys" service "create"
// endpoint HTTP response body for the "not_found" error.
type CreateNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreateUnauthorizedResponseBody is the type of the "api_keys" service
// "create" endpoint HTTP response body for the "unauthorized" error.
type CreateUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetBadRequestResponseBody is the type of the "api_keys" service "get"
// endpoint HTTP response body for the "bad_request" error.
type GetBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetForbiddenResponseBody is the type of the "api_keys" service "get"
// endpoint HTTP response body for the "forbidden" error.
type GetForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetInternalErrorResponseBody is the type of the "api_keys" service "get"
// endpoint HTTP response body for the "internal_error" error.
type GetInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetNotFoundResponseBody is the type of the "api_keys" service "get" endpoint
// HTTP response body for the "not_found" error.
type GetNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetUnauthorizedResponseBody is the type of the "api_keys" service "get"
// endpoint HTTP response body for the "unauthorized" error.
type GetUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateBadRequestResponseBody is the type of the "api_keys" service "update"
// endpoint HTTP response body for the "bad_request" error.
type UpdateBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateForbiddenResponseBody is the type of the "api_keys" service "update"
// endpoint HTTP response body for the "forbidden" error.
type UpdateForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateInternalErrorResponseBody is the type of the "api_keys" service
// "update" endpoint HTTP response body for the "internal_error" error.
type UpdateInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateNotFoundResponseBody is the type of the "api_keys" service "update"
// endpoint HTTP response body for the "not_found" error.
type UpdateNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateUnauthorizedResponseBody is the type of the "api_keys" service
// "update" endpoint HTTP response body for the "unauthorized" error.
type UpdateUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteBadRequestResponseBody is the type of the "api_keys" service "delete"
// endpoint HTTP response body for the "bad_request" error.
type DeleteBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteForbiddenResponseBody is the type of the "api_keys" service "delete"
// endpoint HTTP response body for the "forbidden" error.
type DeleteForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteInternalErrorResponseBody is the type of the "api_keys" service
// "delete" endpoint HTTP response body for the "internal_error" error.
type DeleteInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteNotFoundResponseBody is the type of the "api_keys" service "delete"
// endpoint HTTP response body for the "not_found" error.
type DeleteNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteUnauthorizedResponseBody is the type of the "api_keys" service
// "delete" endpoint HTTP response body for the "unauthorized" error.
type DeleteUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ValidateBadRequestResponseBody is the type of the "api_keys" service
// "validate" endpoint HTTP response body for the "bad_request" error.
type ValidateBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ValidateForbiddenResponseBody is the type of the "api_keys" service
// "validate" endpoint HTTP response body for the "forbidden" error.
type ValidateForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ValidateInternalErrorResponseBody is the type of the "api_keys" service
// "validate" endpoint HTTP response body for the "internal_error" error.
type ValidateInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ValidateNotFoundResponseBody is the type of the "api_keys" service
// "validate" endpoint HTTP response body for the "not_found" error.
type ValidateNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ValidateUnauthorizedResponseBody is the type of the "api_keys" service
// "validate" endpoint HTTP response body for the "unauthorized" error.
type ValidateUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// APIKeyResponseResponseBody is used to define fields on response body types.
type APIKeyResponseResponseBody struct {
	// API key ID
	ID string `form:"id" json:"id" xml:"id"`
	// API key name
	Name string `form:"name" json:"name" xml:"name"`
	// User ID who owns the key
	UserID *string `form:"user_id,omitempty" json:"user_id,omitempty" xml:"user_id,omitempty"`
	// Organization ID
	OrganizationID *string `form:"organization_id,omitempty" json:"organization_id,omitempty" xml:"organization_id,omitempty"`
	// API key type (client/server)
	Type string `form:"type" json:"type" xml:"type"`
	// Whether API key is active
	Active bool `form:"active" json:"active" xml:"active"`
	// Key permissions
	Permissions []string `form:"permissions,omitempty" json:"permissions,omitempty" xml:"permissions,omitempty"`
	// Key scopes
	Scopes []string `form:"scopes,omitempty" json:"scopes,omitempty" xml:"scopes,omitempty"`
	// Key metadata
	Metadata map[string]any `form:"metadata,omitempty" json:"metadata,omitempty" xml:"metadata,omitempty"`
	// Last used timestamp
	LastUsed *string `form:"last_used,omitempty" json:"last_used,omitempty" xml:"last_used,omitempty"`
	// Expiry timestamp
	ExpiresAt *string `form:"expires_at,omitempty" json:"expires_at,omitempty" xml:"expires_at,omitempty"`
	// Creation timestamp
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// Last update timestamp
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// PaginationResponseResponseBody is used to define fields on response body
// types.
type PaginationResponseResponseBody struct {
	// Total number of items
	Total int `form:"total" json:"total" xml:"total"`
	// Current offset
	Offset int `form:"offset" json:"offset" xml:"offset"`
	// Current limit
	Limit int `form:"limit" json:"limit" xml:"limit"`
}

// CreateAPIKeyRequestRequestBody is used to define fields on request body
// types.
type CreateAPIKeyRequestRequestBody struct {
	// API key name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// API key type
	Type *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	// Key permissions
	Permissions []string `form:"permissions,omitempty" json:"permissions,omitempty" xml:"permissions,omitempty"`
	// Key scopes
	Scopes []string `form:"scopes,omitempty" json:"scopes,omitempty" xml:"scopes,omitempty"`
	// Key metadata
	Metadata map[string]any `form:"metadata,omitempty" json:"metadata,omitempty" xml:"metadata,omitempty"`
	// Expiry in seconds
	ExpiresIn *int `form:"expires_in,omitempty" json:"expires_in,omitempty" xml:"expires_in,omitempty"`
}

// UpdateAPIKeyRequestRequestBody is used to define fields on request body
// types.
type UpdateAPIKeyRequestRequestBody struct {
	// API key name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Whether API key is active
	Active *bool `form:"active,omitempty" json:"active,omitempty" xml:"active,omitempty"`
	// Key permissions
	Permissions []string `form:"permissions,omitempty" json:"permissions,omitempty" xml:"permissions,omitempty"`
	// Key scopes
	Scopes []string `form:"scopes,omitempty" json:"scopes,omitempty" xml:"scopes,omitempty"`
	// Key metadata
	Metadata map[string]any `form:"metadata,omitempty" json:"metadata,omitempty" xml:"metadata,omitempty"`
	// Expiry timestamp
	ExpiresAt *string `form:"expires_at,omitempty" json:"expires_at,omitempty" xml:"expires_at,omitempty"`
}

// NewListResponseBody builds the HTTP response body from the result of the
// "list" endpoint of the "api_keys" service.
func NewListResponseBody(res *apikeys.ListResult) *ListResponseBody {
	body := &ListResponseBody{
		Total: res.Total,
	}
	if res.Data != nil {
		body.Data = make([]*APIKeyResponseResponseBody, len(res.Data))
		for i, val := range res.Data {
			body.Data[i] = marshalApikeysAPIKeyResponseToAPIKeyResponseResponseBody(val)
		}
	} else {
		body.Data = []*APIKeyResponseResponseBody{}
	}
	if res.Pagination != nil {
		body.Pagination = marshalDesigntypesPaginationResponseToPaginationResponseResponseBody(res.Pagination)
	}
	return body
}

// NewCreateResponseBody builds the HTTP response body from the result of the
// "create" endpoint of the "api_keys" service.
func NewCreateResponseBody(res *apikeys.APIKeyWithSecretResponse) *CreateResponseBody {
	body := &CreateResponseBody{
		Key:            res.Key,
		ID:             res.ID,
		Name:           res.Name,
		UserID:         res.UserID,
		OrganizationID: res.OrganizationID,
		Type:           res.Type,
		Active:         res.Active,
		LastUsed:       res.LastUsed,
		ExpiresAt:      res.ExpiresAt,
		CreatedAt:      res.CreatedAt,
		UpdatedAt:      res.UpdatedAt,
	}
	if res.Permissions != nil {
		body.Permissions = make([]string, len(res.Permissions))
		for i, val := range res.Permissions {
			body.Permissions[i] = val
		}
	}
	if res.Scopes != nil {
		body.Scopes = make([]string, len(res.Scopes))
		for i, val := range res.Scopes {
			body.Scopes[i] = val
		}
	}
	if res.Metadata != nil {
		body.Metadata = make(map[string]any, len(res.Metadata))
		for key, val := range res.Metadata {
			tk := key
			tv := val
			body.Metadata[tk] = tv
		}
	}
	return body
}

// NewGetResponseBody builds the HTTP response body from the result of the
// "get" endpoint of the "api_keys" service.
func NewGetResponseBody(res *apikeys.APIKeyResponse) *GetResponseBody {
	body := &GetResponseBody{
		ID:             res.ID,
		Name:           res.Name,
		UserID:         res.UserID,
		OrganizationID: res.OrganizationID,
		Type:           res.Type,
		Active:         res.Active,
		LastUsed:       res.LastUsed,
		ExpiresAt:      res.ExpiresAt,
		CreatedAt:      res.CreatedAt,
		UpdatedAt:      res.UpdatedAt,
	}
	if res.Permissions != nil {
		body.Permissions = make([]string, len(res.Permissions))
		for i, val := range res.Permissions {
			body.Permissions[i] = val
		}
	}
	if res.Scopes != nil {
		body.Scopes = make([]string, len(res.Scopes))
		for i, val := range res.Scopes {
			body.Scopes[i] = val
		}
	}
	if res.Metadata != nil {
		body.Metadata = make(map[string]any, len(res.Metadata))
		for key, val := range res.Metadata {
			tk := key
			tv := val
			body.Metadata[tk] = tv
		}
	}
	return body
}

// NewUpdateResponseBody builds the HTTP response body from the result of the
// "update" endpoint of the "api_keys" service.
func NewUpdateResponseBody(res *apikeys.APIKeyResponse) *UpdateResponseBody {
	body := &UpdateResponseBody{
		ID:             res.ID,
		Name:           res.Name,
		UserID:         res.UserID,
		OrganizationID: res.OrganizationID,
		Type:           res.Type,
		Active:         res.Active,
		LastUsed:       res.LastUsed,
		ExpiresAt:      res.ExpiresAt,
		CreatedAt:      res.CreatedAt,
		UpdatedAt:      res.UpdatedAt,
	}
	if res.Permissions != nil {
		body.Permissions = make([]string, len(res.Permissions))
		for i, val := range res.Permissions {
			body.Permissions[i] = val
		}
	}
	if res.Scopes != nil {
		body.Scopes = make([]string, len(res.Scopes))
		for i, val := range res.Scopes {
			body.Scopes[i] = val
		}
	}
	if res.Metadata != nil {
		body.Metadata = make(map[string]any, len(res.Metadata))
		for key, val := range res.Metadata {
			tk := key
			tv := val
			body.Metadata[tk] = tv
		}
	}
	return body
}

// NewValidateResponseBody builds the HTTP response body from the result of the
// "validate" endpoint of the "api_keys" service.
func NewValidateResponseBody(res *apikeys.ValidateResult) *ValidateResponseBody {
	body := &ValidateResponseBody{
		Valid: res.Valid,
	}
	if res.Key != nil {
		body.Key = marshalApikeysAPIKeyResponseToAPIKeyResponseResponseBody(res.Key)
	}
	return body
}

// NewListBadRequestResponseBody builds the HTTP response body from the result
// of the "list" endpoint of the "api_keys" service.
func NewListBadRequestResponseBody(res *apikeys.BadRequestError) *ListBadRequestResponseBody {
	body := &ListBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewListForbiddenResponseBody builds the HTTP response body from the result
// of the "list" endpoint of the "api_keys" service.
func NewListForbiddenResponseBody(res *apikeys.ForbiddenError) *ListForbiddenResponseBody {
	body := &ListForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewListInternalErrorResponseBody builds the HTTP response body from the
// result of the "list" endpoint of the "api_keys" service.
func NewListInternalErrorResponseBody(res *apikeys.InternalServerError) *ListInternalErrorResponseBody {
	body := &ListInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewListNotFoundResponseBody builds the HTTP response body from the result of
// the "list" endpoint of the "api_keys" service.
func NewListNotFoundResponseBody(res *apikeys.NotFoundError) *ListNotFoundResponseBody {
	body := &ListNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewListUnauthorizedResponseBody builds the HTTP response body from the
// result of the "list" endpoint of the "api_keys" service.
func NewListUnauthorizedResponseBody(res *apikeys.UnauthorizedError) *ListUnauthorizedResponseBody {
	body := &ListUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewCreateBadRequestResponseBody builds the HTTP response body from the
// result of the "create" endpoint of the "api_keys" service.
func NewCreateBadRequestResponseBody(res *apikeys.BadRequestError) *CreateBadRequestResponseBody {
	body := &CreateBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewCreateForbiddenResponseBody builds the HTTP response body from the result
// of the "create" endpoint of the "api_keys" service.
func NewCreateForbiddenResponseBody(res *apikeys.ForbiddenError) *CreateForbiddenResponseBody {
	body := &CreateForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewCreateInternalErrorResponseBody builds the HTTP response body from the
// result of the "create" endpoint of the "api_keys" service.
func NewCreateInternalErrorResponseBody(res *apikeys.InternalServerError) *CreateInternalErrorResponseBody {
	body := &CreateInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewCreateNotFoundResponseBody builds the HTTP response body from the result
// of the "create" endpoint of the "api_keys" service.
func NewCreateNotFoundResponseBody(res *apikeys.NotFoundError) *CreateNotFoundResponseBody {
	body := &CreateNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewCreateUnauthorizedResponseBody builds the HTTP response body from the
// result of the "create" endpoint of the "api_keys" service.
func NewCreateUnauthorizedResponseBody(res *apikeys.UnauthorizedError) *CreateUnauthorizedResponseBody {
	body := &CreateUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewGetBadRequestResponseBody builds the HTTP response body from the result
// of the "get" endpoint of the "api_keys" service.
func NewGetBadRequestResponseBody(res *apikeys.BadRequestError) *GetBadRequestResponseBody {
	body := &GetBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewGetForbiddenResponseBody builds the HTTP response body from the result of
// the "get" endpoint of the "api_keys" service.
func NewGetForbiddenResponseBody(res *apikeys.ForbiddenError) *GetForbiddenResponseBody {
	body := &GetForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewGetInternalErrorResponseBody builds the HTTP response body from the
// result of the "get" endpoint of the "api_keys" service.
func NewGetInternalErrorResponseBody(res *apikeys.InternalServerError) *GetInternalErrorResponseBody {
	body := &GetInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewGetNotFoundResponseBody builds the HTTP response body from the result of
// the "get" endpoint of the "api_keys" service.
func NewGetNotFoundResponseBody(res *apikeys.NotFoundError) *GetNotFoundResponseBody {
	body := &GetNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewGetUnauthorizedResponseBody builds the HTTP response body from the result
// of the "get" endpoint of the "api_keys" service.
func NewGetUnauthorizedResponseBody(res *apikeys.UnauthorizedError) *GetUnauthorizedResponseBody {
	body := &GetUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewUpdateBadRequestResponseBody builds the HTTP response body from the
// result of the "update" endpoint of the "api_keys" service.
func NewUpdateBadRequestResponseBody(res *apikeys.BadRequestError) *UpdateBadRequestResponseBody {
	body := &UpdateBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewUpdateForbiddenResponseBody builds the HTTP response body from the result
// of the "update" endpoint of the "api_keys" service.
func NewUpdateForbiddenResponseBody(res *apikeys.ForbiddenError) *UpdateForbiddenResponseBody {
	body := &UpdateForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewUpdateInternalErrorResponseBody builds the HTTP response body from the
// result of the "update" endpoint of the "api_keys" service.
func NewUpdateInternalErrorResponseBody(res *apikeys.InternalServerError) *UpdateInternalErrorResponseBody {
	body := &UpdateInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewUpdateNotFoundResponseBody builds the HTTP response body from the result
// of the "update" endpoint of the "api_keys" service.
func NewUpdateNotFoundResponseBody(res *apikeys.NotFoundError) *UpdateNotFoundResponseBody {
	body := &UpdateNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewUpdateUnauthorizedResponseBody builds the HTTP response body from the
// result of the "update" endpoint of the "api_keys" service.
func NewUpdateUnauthorizedResponseBody(res *apikeys.UnauthorizedError) *UpdateUnauthorizedResponseBody {
	body := &UpdateUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewDeleteBadRequestResponseBody builds the HTTP response body from the
// result of the "delete" endpoint of the "api_keys" service.
func NewDeleteBadRequestResponseBody(res *apikeys.BadRequestError) *DeleteBadRequestResponseBody {
	body := &DeleteBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewDeleteForbiddenResponseBody builds the HTTP response body from the result
// of the "delete" endpoint of the "api_keys" service.
func NewDeleteForbiddenResponseBody(res *apikeys.ForbiddenError) *DeleteForbiddenResponseBody {
	body := &DeleteForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewDeleteInternalErrorResponseBody builds the HTTP response body from the
// result of the "delete" endpoint of the "api_keys" service.
func NewDeleteInternalErrorResponseBody(res *apikeys.InternalServerError) *DeleteInternalErrorResponseBody {
	body := &DeleteInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewDeleteNotFoundResponseBody builds the HTTP response body from the result
// of the "delete" endpoint of the "api_keys" service.
func NewDeleteNotFoundResponseBody(res *apikeys.NotFoundError) *DeleteNotFoundResponseBody {
	body := &DeleteNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewDeleteUnauthorizedResponseBody builds the HTTP response body from the
// result of the "delete" endpoint of the "api_keys" service.
func NewDeleteUnauthorizedResponseBody(res *apikeys.UnauthorizedError) *DeleteUnauthorizedResponseBody {
	body := &DeleteUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewValidateBadRequestResponseBody builds the HTTP response body from the
// result of the "validate" endpoint of the "api_keys" service.
func NewValidateBadRequestResponseBody(res *apikeys.BadRequestError) *ValidateBadRequestResponseBody {
	body := &ValidateBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewValidateForbiddenResponseBody builds the HTTP response body from the
// result of the "validate" endpoint of the "api_keys" service.
func NewValidateForbiddenResponseBody(res *apikeys.ForbiddenError) *ValidateForbiddenResponseBody {
	body := &ValidateForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewValidateInternalErrorResponseBody builds the HTTP response body from the
// result of the "validate" endpoint of the "api_keys" service.
func NewValidateInternalErrorResponseBody(res *apikeys.InternalServerError) *ValidateInternalErrorResponseBody {
	body := &ValidateInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewValidateNotFoundResponseBody builds the HTTP response body from the
// result of the "validate" endpoint of the "api_keys" service.
func NewValidateNotFoundResponseBody(res *apikeys.NotFoundError) *ValidateNotFoundResponseBody {
	body := &ValidateNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewValidateUnauthorizedResponseBody builds the HTTP response body from the
// result of the "validate" endpoint of the "api_keys" service.
func NewValidateUnauthorizedResponseBody(res *apikeys.UnauthorizedError) *ValidateUnauthorizedResponseBody {
	body := &ValidateUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewListPayload builds a api_keys service list endpoint payload.
func NewListPayload(offset int, limit int, type_ *string, organizationID *string, jwt *string) *apikeys.ListPayload {
	v := &apikeys.ListPayload{}
	v.Offset = offset
	v.Limit = limit
	v.Type = type_
	v.OrganizationID = organizationID
	v.JWT = jwt

	return v
}

// NewCreatePayload builds a api_keys service create endpoint payload.
func NewCreatePayload(body *CreateRequestBody, jwt *string) *apikeys.CreatePayload {
	v := &apikeys.CreatePayload{}
	v.Key = unmarshalCreateAPIKeyRequestRequestBodyToApikeysCreateAPIKeyRequest(body.Key)
	v.JWT = jwt

	return v
}

// NewGetPayload builds a api_keys service get endpoint payload.
func NewGetPayload(id string, jwt *string) *apikeys.GetPayload {
	v := &apikeys.GetPayload{}
	v.ID = id
	v.JWT = jwt

	return v
}

// NewUpdatePayload builds a api_keys service update endpoint payload.
func NewUpdatePayload(body *UpdateRequestBody, id string, jwt *string) *apikeys.UpdatePayload {
	v := &apikeys.UpdatePayload{}
	v.Key = unmarshalUpdateAPIKeyRequestRequestBodyToApikeysUpdateAPIKeyRequest(body.Key)
	v.ID = id
	v.JWT = jwt

	return v
}

// NewDeletePayload builds a api_keys service delete endpoint payload.
func NewDeletePayload(id string, jwt *string) *apikeys.DeletePayload {
	v := &apikeys.DeletePayload{}
	v.ID = id
	v.JWT = jwt

	return v
}

// NewValidatePayload builds a api_keys service validate endpoint payload.
func NewValidatePayload(apiKey string) *apikeys.ValidatePayload {
	v := &apikeys.ValidatePayload{}
	v.APIKey = apiKey

	return v
}

// ValidateCreateRequestBody runs the validations defined on CreateRequestBody
func ValidateCreateRequestBody(body *CreateRequestBody) (err error) {
	if body.Key == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("key", "body"))
	}
	if body.Key != nil {
		if err2 := ValidateCreateAPIKeyRequestRequestBody(body.Key); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateUpdateRequestBody runs the validations defined on UpdateRequestBody
func ValidateUpdateRequestBody(body *UpdateRequestBody) (err error) {
	if body.Key == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("key", "body"))
	}
	return
}

// ValidateCreateAPIKeyRequestRequestBody runs the validations defined on
// CreateAPIKeyRequestRequestBody
func ValidateCreateAPIKeyRequestRequestBody(body *CreateAPIKeyRequestRequestBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Type != nil {
		if !(*body.Type == "client" || *body.Type == "server") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.type", *body.Type, []any{"client", "server"}))
		}
	}
	return
}
