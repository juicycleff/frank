// Code generated by goa v3.20.0, DO NOT EDIT.
//
// api_keys HTTP client CLI support package
//
// Command:
// $ goa gen github.com/juicycleff/frank/design -o .

package client

import (
	"encoding/json"
	"fmt"
	"strconv"

	apikeys "github.com/juicycleff/frank/gen/api_keys"
	goa "goa.design/goa/v3/pkg"
)

// BuildListPayload builds the payload for the api_keys list endpoint from CLI
// flags.
func BuildListPayload(apiKeysListOffset string, apiKeysListLimit string, apiKeysListType string, apiKeysListOrganizationID string, apiKeysListJWT string) (*apikeys.ListPayload, error) {
	var err error
	var offset int
	{
		if apiKeysListOffset != "" {
			var v int64
			v, err = strconv.ParseInt(apiKeysListOffset, 10, strconv.IntSize)
			offset = int(v)
			if err != nil {
				return nil, fmt.Errorf("invalid value for offset, must be INT")
			}
			if offset < 0 {
				err = goa.MergeErrors(err, goa.InvalidRangeError("offset", offset, 0, true))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var limit int
	{
		if apiKeysListLimit != "" {
			var v int64
			v, err = strconv.ParseInt(apiKeysListLimit, 10, strconv.IntSize)
			limit = int(v)
			if err != nil {
				return nil, fmt.Errorf("invalid value for limit, must be INT")
			}
			if limit < 1 {
				err = goa.MergeErrors(err, goa.InvalidRangeError("limit", limit, 1, true))
			}
			if limit > 100 {
				err = goa.MergeErrors(err, goa.InvalidRangeError("limit", limit, 100, false))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var type_ *string
	{
		if apiKeysListType != "" {
			type_ = &apiKeysListType
			if !(*type_ == "client" || *type_ == "server") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("type", *type_, []any{"client", "server"}))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var organizationID *string
	{
		if apiKeysListOrganizationID != "" {
			organizationID = &apiKeysListOrganizationID
		}
	}
	var jwt *string
	{
		if apiKeysListJWT != "" {
			jwt = &apiKeysListJWT
		}
	}
	v := &apikeys.ListPayload{}
	v.Offset = offset
	v.Limit = limit
	v.Type = type_
	v.OrganizationID = organizationID
	v.JWT = jwt

	return v, nil
}

// BuildCreatePayload builds the payload for the api_keys create endpoint from
// CLI flags.
func BuildCreatePayload(apiKeysCreateBody string, apiKeysCreateJWT string) (*apikeys.CreatePayload, error) {
	var err error
	var body CreateRequestBody
	{
		err = json.Unmarshal([]byte(apiKeysCreateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"key\": {\n         \"expires_in\": 2592000,\n         \"metadata\": {\n            \"Voluptatum sint.\": \"Hic quasi dolores iure dolorem iusto.\"\n         },\n         \"name\": \"My API Key\",\n         \"permissions\": [\n            \"read:users\",\n            \"write:organizations\"\n         ],\n         \"scopes\": [\n            \"api:access\"\n         ],\n         \"type\": \"server\"\n      }\n   }'")
		}
		if body.Key == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("key", "body"))
		}
		if body.Key != nil {
			if err2 := ValidateCreateAPIKeyRequestRequestBody(body.Key); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
		if err != nil {
			return nil, err
		}
	}
	var jwt *string
	{
		if apiKeysCreateJWT != "" {
			jwt = &apiKeysCreateJWT
		}
	}
	v := &apikeys.CreatePayload{}
	if body.Key != nil {
		v.Key = marshalCreateAPIKeyRequestRequestBodyToApikeysCreateAPIKeyRequest(body.Key)
	}
	v.JWT = jwt

	return v, nil
}

// BuildGetPayload builds the payload for the api_keys get endpoint from CLI
// flags.
func BuildGetPayload(apiKeysGetID string, apiKeysGetJWT string) (*apikeys.GetPayload, error) {
	var id string
	{
		id = apiKeysGetID
	}
	var jwt *string
	{
		if apiKeysGetJWT != "" {
			jwt = &apiKeysGetJWT
		}
	}
	v := &apikeys.GetPayload{}
	v.ID = id
	v.JWT = jwt

	return v, nil
}

// BuildUpdatePayload builds the payload for the api_keys update endpoint from
// CLI flags.
func BuildUpdatePayload(apiKeysUpdateBody string, apiKeysUpdateID string, apiKeysUpdateJWT string) (*apikeys.UpdatePayload, error) {
	var err error
	var body UpdateRequestBody
	{
		err = json.Unmarshal([]byte(apiKeysUpdateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"key\": {\n         \"active\": true,\n         \"expires_at\": \"At sit consequatur quia recusandae fugit.\",\n         \"metadata\": {\n            \"Animi consequatur consequatur rerum fugit.\": \"Cum modi neque quis necessitatibus repudiandae.\",\n            \"Odio provident quibusdam.\": \"Consectetur at.\"\n         },\n         \"name\": \"Esse velit eum.\",\n         \"permissions\": [\n            \"Quis reiciendis quo cupiditate quos dolores ratione.\",\n            \"Autem neque quo facere velit neque.\"\n         ],\n         \"scopes\": [\n            \"Modi qui doloribus est et non.\",\n            \"Eius eius ut quia est.\"\n         ]\n      }\n   }'")
		}
		if body.Key == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("key", "body"))
		}
		if err != nil {
			return nil, err
		}
	}
	var id string
	{
		id = apiKeysUpdateID
	}
	var jwt *string
	{
		if apiKeysUpdateJWT != "" {
			jwt = &apiKeysUpdateJWT
		}
	}
	v := &apikeys.UpdatePayload{}
	if body.Key != nil {
		v.Key = marshalUpdateAPIKeyRequestRequestBodyToApikeysUpdateAPIKeyRequest(body.Key)
	}
	v.ID = id
	v.JWT = jwt

	return v, nil
}

// BuildDeletePayload builds the payload for the api_keys delete endpoint from
// CLI flags.
func BuildDeletePayload(apiKeysDeleteID string, apiKeysDeleteJWT string) (*apikeys.DeletePayload, error) {
	var id string
	{
		id = apiKeysDeleteID
	}
	var jwt *string
	{
		if apiKeysDeleteJWT != "" {
			jwt = &apiKeysDeleteJWT
		}
	}
	v := &apikeys.DeletePayload{}
	v.ID = id
	v.JWT = jwt

	return v, nil
}

// BuildValidatePayload builds the payload for the api_keys validate endpoint
// from CLI flags.
func BuildValidatePayload(apiKeysValidateAPIKey string) (*apikeys.ValidatePayload, error) {
	var apiKey string
	{
		apiKey = apiKeysValidateAPIKey
	}
	v := &apikeys.ValidatePayload{}
	v.APIKey = apiKey

	return v, nil
}
