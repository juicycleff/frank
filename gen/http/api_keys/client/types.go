// Code generated by goa v3.20.0, DO NOT EDIT.
//
// api_keys HTTP client types
//
// Command:
// $ goa gen github.com/juicycleff/frank/design -o .

package client

import (
	apikeys "github.com/juicycleff/frank/gen/api_keys"
	goa "goa.design/goa/v3/pkg"
)

// CreateRequestBody is the type of the "api_keys" service "create" endpoint
// HTTP request body.
type CreateRequestBody struct {
	Key *CreateAPIKeyRequestRequestBody `form:"key" json:"key" xml:"key"`
}

// UpdateRequestBody is the type of the "api_keys" service "update" endpoint
// HTTP request body.
type UpdateRequestBody struct {
	Key *UpdateAPIKeyRequestRequestBody `form:"key" json:"key" xml:"key"`
}

// ListResponseBody is the type of the "api_keys" service "list" endpoint HTTP
// response body.
type ListResponseBody struct {
	Data []*APIKeyResponseResponseBody `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	// Total number of keys
	Total      *int                            `form:"total,omitempty" json:"total,omitempty" xml:"total,omitempty"`
	Pagination *PaginationResponseResponseBody `form:"pagination,omitempty" json:"pagination,omitempty" xml:"pagination,omitempty"`
}

// CreateResponseBody is the type of the "api_keys" service "create" endpoint
// HTTP response body.
type CreateResponseBody struct {
	// API key secret
	Key *string `form:"key,omitempty" json:"key,omitempty" xml:"key,omitempty"`
	// API key ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// API key name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// User ID who owns the key
	UserID *string `form:"user_id,omitempty" json:"user_id,omitempty" xml:"user_id,omitempty"`
	// Organization ID
	OrganizationID *string `form:"organization_id,omitempty" json:"organization_id,omitempty" xml:"organization_id,omitempty"`
	// API key type (client/server)
	Type *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	// Whether API key is active
	Active *bool `form:"active,omitempty" json:"active,omitempty" xml:"active,omitempty"`
	// Key permissions
	Permissions []string `form:"permissions,omitempty" json:"permissions,omitempty" xml:"permissions,omitempty"`
	// Key scopes
	Scopes []string `form:"scopes,omitempty" json:"scopes,omitempty" xml:"scopes,omitempty"`
	// Key metadata
	Metadata map[string]any `form:"metadata,omitempty" json:"metadata,omitempty" xml:"metadata,omitempty"`
	// Last used timestamp
	LastUsed *string `form:"last_used,omitempty" json:"last_used,omitempty" xml:"last_used,omitempty"`
	// Expiry timestamp
	ExpiresAt *string `form:"expires_at,omitempty" json:"expires_at,omitempty" xml:"expires_at,omitempty"`
	// Creation timestamp
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// Last update timestamp
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// GetResponseBody is the type of the "api_keys" service "get" endpoint HTTP
// response body.
type GetResponseBody struct {
	// API key ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// API key name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// User ID who owns the key
	UserID *string `form:"user_id,omitempty" json:"user_id,omitempty" xml:"user_id,omitempty"`
	// Organization ID
	OrganizationID *string `form:"organization_id,omitempty" json:"organization_id,omitempty" xml:"organization_id,omitempty"`
	// API key type (client/server)
	Type *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	// Whether API key is active
	Active *bool `form:"active,omitempty" json:"active,omitempty" xml:"active,omitempty"`
	// Key permissions
	Permissions []string `form:"permissions,omitempty" json:"permissions,omitempty" xml:"permissions,omitempty"`
	// Key scopes
	Scopes []string `form:"scopes,omitempty" json:"scopes,omitempty" xml:"scopes,omitempty"`
	// Key metadata
	Metadata map[string]any `form:"metadata,omitempty" json:"metadata,omitempty" xml:"metadata,omitempty"`
	// Last used timestamp
	LastUsed *string `form:"last_used,omitempty" json:"last_used,omitempty" xml:"last_used,omitempty"`
	// Expiry timestamp
	ExpiresAt *string `form:"expires_at,omitempty" json:"expires_at,omitempty" xml:"expires_at,omitempty"`
	// Creation timestamp
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// Last update timestamp
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// UpdateResponseBody is the type of the "api_keys" service "update" endpoint
// HTTP response body.
type UpdateResponseBody struct {
	// API key ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// API key name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// User ID who owns the key
	UserID *string `form:"user_id,omitempty" json:"user_id,omitempty" xml:"user_id,omitempty"`
	// Organization ID
	OrganizationID *string `form:"organization_id,omitempty" json:"organization_id,omitempty" xml:"organization_id,omitempty"`
	// API key type (client/server)
	Type *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	// Whether API key is active
	Active *bool `form:"active,omitempty" json:"active,omitempty" xml:"active,omitempty"`
	// Key permissions
	Permissions []string `form:"permissions,omitempty" json:"permissions,omitempty" xml:"permissions,omitempty"`
	// Key scopes
	Scopes []string `form:"scopes,omitempty" json:"scopes,omitempty" xml:"scopes,omitempty"`
	// Key metadata
	Metadata map[string]any `form:"metadata,omitempty" json:"metadata,omitempty" xml:"metadata,omitempty"`
	// Last used timestamp
	LastUsed *string `form:"last_used,omitempty" json:"last_used,omitempty" xml:"last_used,omitempty"`
	// Expiry timestamp
	ExpiresAt *string `form:"expires_at,omitempty" json:"expires_at,omitempty" xml:"expires_at,omitempty"`
	// Creation timestamp
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// Last update timestamp
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// ValidateResponseBody is the type of the "api_keys" service "validate"
// endpoint HTTP response body.
type ValidateResponseBody struct {
	// Whether key is valid
	Valid *bool `form:"valid,omitempty" json:"valid,omitempty" xml:"valid,omitempty"`
	// Key details if valid
	Key *APIKeyResponseResponseBody `form:"key,omitempty" json:"key,omitempty" xml:"key,omitempty"`
}

// ListBadRequestResponseBody is the type of the "api_keys" service "list"
// endpoint HTTP response body for the "bad_request" error.
type ListBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListForbiddenResponseBody is the type of the "api_keys" service "list"
// endpoint HTTP response body for the "forbidden" error.
type ListForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListInternalErrorResponseBody is the type of the "api_keys" service "list"
// endpoint HTTP response body for the "internal_error" error.
type ListInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListNotFoundResponseBody is the type of the "api_keys" service "list"
// endpoint HTTP response body for the "not_found" error.
type ListNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListUnauthorizedResponseBody is the type of the "api_keys" service "list"
// endpoint HTTP response body for the "unauthorized" error.
type ListUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreateBadRequestResponseBody is the type of the "api_keys" service "create"
// endpoint HTTP response body for the "bad_request" error.
type CreateBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreateForbiddenResponseBody is the type of the "api_keys" service "create"
// endpoint HTTP response body for the "forbidden" error.
type CreateForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreateInternalErrorResponseBody is the type of the "api_keys" service
// "create" endpoint HTTP response body for the "internal_error" error.
type CreateInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreateNotFoundResponseBody is the type of the "api_keys" service "create"
// endpoint HTTP response body for the "not_found" error.
type CreateNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreateUnauthorizedResponseBody is the type of the "api_keys" service
// "create" endpoint HTTP response body for the "unauthorized" error.
type CreateUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetBadRequestResponseBody is the type of the "api_keys" service "get"
// endpoint HTTP response body for the "bad_request" error.
type GetBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetForbiddenResponseBody is the type of the "api_keys" service "get"
// endpoint HTTP response body for the "forbidden" error.
type GetForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetInternalErrorResponseBody is the type of the "api_keys" service "get"
// endpoint HTTP response body for the "internal_error" error.
type GetInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetNotFoundResponseBody is the type of the "api_keys" service "get" endpoint
// HTTP response body for the "not_found" error.
type GetNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetUnauthorizedResponseBody is the type of the "api_keys" service "get"
// endpoint HTTP response body for the "unauthorized" error.
type GetUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateBadRequestResponseBody is the type of the "api_keys" service "update"
// endpoint HTTP response body for the "bad_request" error.
type UpdateBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateForbiddenResponseBody is the type of the "api_keys" service "update"
// endpoint HTTP response body for the "forbidden" error.
type UpdateForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateInternalErrorResponseBody is the type of the "api_keys" service
// "update" endpoint HTTP response body for the "internal_error" error.
type UpdateInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateNotFoundResponseBody is the type of the "api_keys" service "update"
// endpoint HTTP response body for the "not_found" error.
type UpdateNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateUnauthorizedResponseBody is the type of the "api_keys" service
// "update" endpoint HTTP response body for the "unauthorized" error.
type UpdateUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteBadRequestResponseBody is the type of the "api_keys" service "delete"
// endpoint HTTP response body for the "bad_request" error.
type DeleteBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteForbiddenResponseBody is the type of the "api_keys" service "delete"
// endpoint HTTP response body for the "forbidden" error.
type DeleteForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteInternalErrorResponseBody is the type of the "api_keys" service
// "delete" endpoint HTTP response body for the "internal_error" error.
type DeleteInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteNotFoundResponseBody is the type of the "api_keys" service "delete"
// endpoint HTTP response body for the "not_found" error.
type DeleteNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteUnauthorizedResponseBody is the type of the "api_keys" service
// "delete" endpoint HTTP response body for the "unauthorized" error.
type DeleteUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ValidateBadRequestResponseBody is the type of the "api_keys" service
// "validate" endpoint HTTP response body for the "bad_request" error.
type ValidateBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ValidateForbiddenResponseBody is the type of the "api_keys" service
// "validate" endpoint HTTP response body for the "forbidden" error.
type ValidateForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ValidateInternalErrorResponseBody is the type of the "api_keys" service
// "validate" endpoint HTTP response body for the "internal_error" error.
type ValidateInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ValidateNotFoundResponseBody is the type of the "api_keys" service
// "validate" endpoint HTTP response body for the "not_found" error.
type ValidateNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ValidateUnauthorizedResponseBody is the type of the "api_keys" service
// "validate" endpoint HTTP response body for the "unauthorized" error.
type ValidateUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// APIKeyResponseResponseBody is used to define fields on response body types.
type APIKeyResponseResponseBody struct {
	// API key ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// API key name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// User ID who owns the key
	UserID *string `form:"user_id,omitempty" json:"user_id,omitempty" xml:"user_id,omitempty"`
	// Organization ID
	OrganizationID *string `form:"organization_id,omitempty" json:"organization_id,omitempty" xml:"organization_id,omitempty"`
	// API key type (client/server)
	Type *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	// Whether API key is active
	Active *bool `form:"active,omitempty" json:"active,omitempty" xml:"active,omitempty"`
	// Key permissions
	Permissions []string `form:"permissions,omitempty" json:"permissions,omitempty" xml:"permissions,omitempty"`
	// Key scopes
	Scopes []string `form:"scopes,omitempty" json:"scopes,omitempty" xml:"scopes,omitempty"`
	// Key metadata
	Metadata map[string]any `form:"metadata,omitempty" json:"metadata,omitempty" xml:"metadata,omitempty"`
	// Last used timestamp
	LastUsed *string `form:"last_used,omitempty" json:"last_used,omitempty" xml:"last_used,omitempty"`
	// Expiry timestamp
	ExpiresAt *string `form:"expires_at,omitempty" json:"expires_at,omitempty" xml:"expires_at,omitempty"`
	// Creation timestamp
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// Last update timestamp
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// PaginationResponseResponseBody is used to define fields on response body
// types.
type PaginationResponseResponseBody struct {
	// Total number of items
	Total *int `form:"total,omitempty" json:"total,omitempty" xml:"total,omitempty"`
	// Current offset
	Offset *int `form:"offset,omitempty" json:"offset,omitempty" xml:"offset,omitempty"`
	// Current limit
	Limit *int `form:"limit,omitempty" json:"limit,omitempty" xml:"limit,omitempty"`
}

// CreateAPIKeyRequestRequestBody is used to define fields on request body
// types.
type CreateAPIKeyRequestRequestBody struct {
	// API key name
	Name string `form:"name" json:"name" xml:"name"`
	// API key type
	Type string `form:"type" json:"type" xml:"type"`
	// Key permissions
	Permissions []string `form:"permissions,omitempty" json:"permissions,omitempty" xml:"permissions,omitempty"`
	// Key scopes
	Scopes []string `form:"scopes,omitempty" json:"scopes,omitempty" xml:"scopes,omitempty"`
	// Key metadata
	Metadata map[string]any `form:"metadata,omitempty" json:"metadata,omitempty" xml:"metadata,omitempty"`
	// Expiry in seconds
	ExpiresIn *int `form:"expires_in,omitempty" json:"expires_in,omitempty" xml:"expires_in,omitempty"`
}

// UpdateAPIKeyRequestRequestBody is used to define fields on request body
// types.
type UpdateAPIKeyRequestRequestBody struct {
	// API key name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Whether API key is active
	Active *bool `form:"active,omitempty" json:"active,omitempty" xml:"active,omitempty"`
	// Key permissions
	Permissions []string `form:"permissions,omitempty" json:"permissions,omitempty" xml:"permissions,omitempty"`
	// Key scopes
	Scopes []string `form:"scopes,omitempty" json:"scopes,omitempty" xml:"scopes,omitempty"`
	// Key metadata
	Metadata map[string]any `form:"metadata,omitempty" json:"metadata,omitempty" xml:"metadata,omitempty"`
	// Expiry timestamp
	ExpiresAt *string `form:"expires_at,omitempty" json:"expires_at,omitempty" xml:"expires_at,omitempty"`
}

// NewCreateRequestBody builds the HTTP request body from the payload of the
// "create" endpoint of the "api_keys" service.
func NewCreateRequestBody(p *apikeys.CreatePayload) *CreateRequestBody {
	body := &CreateRequestBody{}
	if p.Key != nil {
		body.Key = marshalApikeysCreateAPIKeyRequestToCreateAPIKeyRequestRequestBody(p.Key)
	}
	return body
}

// NewUpdateRequestBody builds the HTTP request body from the payload of the
// "update" endpoint of the "api_keys" service.
func NewUpdateRequestBody(p *apikeys.UpdatePayload) *UpdateRequestBody {
	body := &UpdateRequestBody{}
	if p.Key != nil {
		body.Key = marshalApikeysUpdateAPIKeyRequestToUpdateAPIKeyRequestRequestBody(p.Key)
	}
	return body
}

// NewListResultOK builds a "api_keys" service "list" endpoint result from a
// HTTP "OK" response.
func NewListResultOK(body *ListResponseBody) *apikeys.ListResult {
	v := &apikeys.ListResult{
		Total: *body.Total,
	}
	v.Data = make([]*apikeys.APIKeyResponse, len(body.Data))
	for i, val := range body.Data {
		v.Data[i] = unmarshalAPIKeyResponseResponseBodyToApikeysAPIKeyResponse(val)
	}
	v.Pagination = unmarshalPaginationResponseResponseBodyToDesigntypesPaginationResponse(body.Pagination)

	return v
}

// NewListBadRequest builds a api_keys service list endpoint bad_request error.
func NewListBadRequest(body *ListBadRequestResponseBody) *apikeys.BadRequestError {
	v := &apikeys.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewListForbidden builds a api_keys service list endpoint forbidden error.
func NewListForbidden(body *ListForbiddenResponseBody) *apikeys.ForbiddenError {
	v := &apikeys.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewListInternalError builds a api_keys service list endpoint internal_error
// error.
func NewListInternalError(body *ListInternalErrorResponseBody) *apikeys.InternalServerError {
	v := &apikeys.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewListNotFound builds a api_keys service list endpoint not_found error.
func NewListNotFound(body *ListNotFoundResponseBody) *apikeys.NotFoundError {
	v := &apikeys.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewListUnauthorized builds a api_keys service list endpoint unauthorized
// error.
func NewListUnauthorized(body *ListUnauthorizedResponseBody) *apikeys.UnauthorizedError {
	v := &apikeys.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewCreateAPIKeyWithSecretResponseCreated builds a "api_keys" service
// "create" endpoint result from a HTTP "Created" response.
func NewCreateAPIKeyWithSecretResponseCreated(body *CreateResponseBody) *apikeys.APIKeyWithSecretResponse {
	v := &apikeys.APIKeyWithSecretResponse{
		Key:            *body.Key,
		ID:             *body.ID,
		Name:           *body.Name,
		UserID:         body.UserID,
		OrganizationID: body.OrganizationID,
		Type:           *body.Type,
		Active:         *body.Active,
		LastUsed:       body.LastUsed,
		ExpiresAt:      body.ExpiresAt,
		CreatedAt:      *body.CreatedAt,
		UpdatedAt:      body.UpdatedAt,
	}
	if body.Permissions != nil {
		v.Permissions = make([]string, len(body.Permissions))
		for i, val := range body.Permissions {
			v.Permissions[i] = val
		}
	}
	if body.Scopes != nil {
		v.Scopes = make([]string, len(body.Scopes))
		for i, val := range body.Scopes {
			v.Scopes[i] = val
		}
	}
	if body.Metadata != nil {
		v.Metadata = make(map[string]any, len(body.Metadata))
		for key, val := range body.Metadata {
			tk := key
			tv := val
			v.Metadata[tk] = tv
		}
	}

	return v
}

// NewCreateBadRequest builds a api_keys service create endpoint bad_request
// error.
func NewCreateBadRequest(body *CreateBadRequestResponseBody) *apikeys.BadRequestError {
	v := &apikeys.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewCreateForbidden builds a api_keys service create endpoint forbidden error.
func NewCreateForbidden(body *CreateForbiddenResponseBody) *apikeys.ForbiddenError {
	v := &apikeys.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewCreateInternalError builds a api_keys service create endpoint
// internal_error error.
func NewCreateInternalError(body *CreateInternalErrorResponseBody) *apikeys.InternalServerError {
	v := &apikeys.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewCreateNotFound builds a api_keys service create endpoint not_found error.
func NewCreateNotFound(body *CreateNotFoundResponseBody) *apikeys.NotFoundError {
	v := &apikeys.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewCreateUnauthorized builds a api_keys service create endpoint unauthorized
// error.
func NewCreateUnauthorized(body *CreateUnauthorizedResponseBody) *apikeys.UnauthorizedError {
	v := &apikeys.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewGetAPIKeyResponseOK builds a "api_keys" service "get" endpoint result
// from a HTTP "OK" response.
func NewGetAPIKeyResponseOK(body *GetResponseBody) *apikeys.APIKeyResponse {
	v := &apikeys.APIKeyResponse{
		ID:             *body.ID,
		Name:           *body.Name,
		UserID:         body.UserID,
		OrganizationID: body.OrganizationID,
		Type:           *body.Type,
		Active:         *body.Active,
		LastUsed:       body.LastUsed,
		ExpiresAt:      body.ExpiresAt,
		CreatedAt:      *body.CreatedAt,
		UpdatedAt:      body.UpdatedAt,
	}
	if body.Permissions != nil {
		v.Permissions = make([]string, len(body.Permissions))
		for i, val := range body.Permissions {
			v.Permissions[i] = val
		}
	}
	if body.Scopes != nil {
		v.Scopes = make([]string, len(body.Scopes))
		for i, val := range body.Scopes {
			v.Scopes[i] = val
		}
	}
	if body.Metadata != nil {
		v.Metadata = make(map[string]any, len(body.Metadata))
		for key, val := range body.Metadata {
			tk := key
			tv := val
			v.Metadata[tk] = tv
		}
	}

	return v
}

// NewGetBadRequest builds a api_keys service get endpoint bad_request error.
func NewGetBadRequest(body *GetBadRequestResponseBody) *apikeys.BadRequestError {
	v := &apikeys.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewGetForbidden builds a api_keys service get endpoint forbidden error.
func NewGetForbidden(body *GetForbiddenResponseBody) *apikeys.ForbiddenError {
	v := &apikeys.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewGetInternalError builds a api_keys service get endpoint internal_error
// error.
func NewGetInternalError(body *GetInternalErrorResponseBody) *apikeys.InternalServerError {
	v := &apikeys.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewGetNotFound builds a api_keys service get endpoint not_found error.
func NewGetNotFound(body *GetNotFoundResponseBody) *apikeys.NotFoundError {
	v := &apikeys.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewGetUnauthorized builds a api_keys service get endpoint unauthorized error.
func NewGetUnauthorized(body *GetUnauthorizedResponseBody) *apikeys.UnauthorizedError {
	v := &apikeys.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewUpdateAPIKeyResponseOK builds a "api_keys" service "update" endpoint
// result from a HTTP "OK" response.
func NewUpdateAPIKeyResponseOK(body *UpdateResponseBody) *apikeys.APIKeyResponse {
	v := &apikeys.APIKeyResponse{
		ID:             *body.ID,
		Name:           *body.Name,
		UserID:         body.UserID,
		OrganizationID: body.OrganizationID,
		Type:           *body.Type,
		Active:         *body.Active,
		LastUsed:       body.LastUsed,
		ExpiresAt:      body.ExpiresAt,
		CreatedAt:      *body.CreatedAt,
		UpdatedAt:      body.UpdatedAt,
	}
	if body.Permissions != nil {
		v.Permissions = make([]string, len(body.Permissions))
		for i, val := range body.Permissions {
			v.Permissions[i] = val
		}
	}
	if body.Scopes != nil {
		v.Scopes = make([]string, len(body.Scopes))
		for i, val := range body.Scopes {
			v.Scopes[i] = val
		}
	}
	if body.Metadata != nil {
		v.Metadata = make(map[string]any, len(body.Metadata))
		for key, val := range body.Metadata {
			tk := key
			tv := val
			v.Metadata[tk] = tv
		}
	}

	return v
}

// NewUpdateBadRequest builds a api_keys service update endpoint bad_request
// error.
func NewUpdateBadRequest(body *UpdateBadRequestResponseBody) *apikeys.BadRequestError {
	v := &apikeys.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewUpdateForbidden builds a api_keys service update endpoint forbidden error.
func NewUpdateForbidden(body *UpdateForbiddenResponseBody) *apikeys.ForbiddenError {
	v := &apikeys.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewUpdateInternalError builds a api_keys service update endpoint
// internal_error error.
func NewUpdateInternalError(body *UpdateInternalErrorResponseBody) *apikeys.InternalServerError {
	v := &apikeys.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewUpdateNotFound builds a api_keys service update endpoint not_found error.
func NewUpdateNotFound(body *UpdateNotFoundResponseBody) *apikeys.NotFoundError {
	v := &apikeys.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewUpdateUnauthorized builds a api_keys service update endpoint unauthorized
// error.
func NewUpdateUnauthorized(body *UpdateUnauthorizedResponseBody) *apikeys.UnauthorizedError {
	v := &apikeys.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewDeleteBadRequest builds a api_keys service delete endpoint bad_request
// error.
func NewDeleteBadRequest(body *DeleteBadRequestResponseBody) *apikeys.BadRequestError {
	v := &apikeys.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewDeleteForbidden builds a api_keys service delete endpoint forbidden error.
func NewDeleteForbidden(body *DeleteForbiddenResponseBody) *apikeys.ForbiddenError {
	v := &apikeys.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewDeleteInternalError builds a api_keys service delete endpoint
// internal_error error.
func NewDeleteInternalError(body *DeleteInternalErrorResponseBody) *apikeys.InternalServerError {
	v := &apikeys.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewDeleteNotFound builds a api_keys service delete endpoint not_found error.
func NewDeleteNotFound(body *DeleteNotFoundResponseBody) *apikeys.NotFoundError {
	v := &apikeys.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewDeleteUnauthorized builds a api_keys service delete endpoint unauthorized
// error.
func NewDeleteUnauthorized(body *DeleteUnauthorizedResponseBody) *apikeys.UnauthorizedError {
	v := &apikeys.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewValidateResultOK builds a "api_keys" service "validate" endpoint result
// from a HTTP "OK" response.
func NewValidateResultOK(body *ValidateResponseBody) *apikeys.ValidateResult {
	v := &apikeys.ValidateResult{
		Valid: *body.Valid,
	}
	if body.Key != nil {
		v.Key = unmarshalAPIKeyResponseResponseBodyToApikeysAPIKeyResponse(body.Key)
	}

	return v
}

// NewValidateBadRequest builds a api_keys service validate endpoint
// bad_request error.
func NewValidateBadRequest(body *ValidateBadRequestResponseBody) *apikeys.BadRequestError {
	v := &apikeys.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewValidateForbidden builds a api_keys service validate endpoint forbidden
// error.
func NewValidateForbidden(body *ValidateForbiddenResponseBody) *apikeys.ForbiddenError {
	v := &apikeys.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewValidateInternalError builds a api_keys service validate endpoint
// internal_error error.
func NewValidateInternalError(body *ValidateInternalErrorResponseBody) *apikeys.InternalServerError {
	v := &apikeys.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewValidateNotFound builds a api_keys service validate endpoint not_found
// error.
func NewValidateNotFound(body *ValidateNotFoundResponseBody) *apikeys.NotFoundError {
	v := &apikeys.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewValidateUnauthorized builds a api_keys service validate endpoint
// unauthorized error.
func NewValidateUnauthorized(body *ValidateUnauthorizedResponseBody) *apikeys.UnauthorizedError {
	v := &apikeys.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// ValidateListResponseBody runs the validations defined on ListResponseBody
func ValidateListResponseBody(body *ListResponseBody) (err error) {
	if body.Data == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("data", "body"))
	}
	if body.Pagination == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("pagination", "body"))
	}
	if body.Total == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total", "body"))
	}
	for _, e := range body.Data {
		if e != nil {
			if err2 := ValidateAPIKeyResponseResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if body.Pagination != nil {
		if err2 := ValidatePaginationResponseResponseBody(body.Pagination); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateCreateResponseBody runs the validations defined on CreateResponseBody
func ValidateCreateResponseBody(body *CreateResponseBody) (err error) {
	if body.Key == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("key", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "body"))
	}
	if body.Active == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("active", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	return
}

// ValidateGetResponseBody runs the validations defined on GetResponseBody
func ValidateGetResponseBody(body *GetResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "body"))
	}
	if body.Active == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("active", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	return
}

// ValidateUpdateResponseBody runs the validations defined on UpdateResponseBody
func ValidateUpdateResponseBody(body *UpdateResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "body"))
	}
	if body.Active == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("active", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	return
}

// ValidateValidateResponseBody runs the validations defined on
// ValidateResponseBody
func ValidateValidateResponseBody(body *ValidateResponseBody) (err error) {
	if body.Valid == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("valid", "body"))
	}
	if body.Key != nil {
		if err2 := ValidateAPIKeyResponseResponseBody(body.Key); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateListBadRequestResponseBody runs the validations defined on
// list_bad_request_response_body
func ValidateListBadRequestResponseBody(body *ListBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateListForbiddenResponseBody runs the validations defined on
// list_forbidden_response_body
func ValidateListForbiddenResponseBody(body *ListForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateListInternalErrorResponseBody runs the validations defined on
// list_internal_error_response_body
func ValidateListInternalErrorResponseBody(body *ListInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateListNotFoundResponseBody runs the validations defined on
// list_not_found_response_body
func ValidateListNotFoundResponseBody(body *ListNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateListUnauthorizedResponseBody runs the validations defined on
// list_unauthorized_response_body
func ValidateListUnauthorizedResponseBody(body *ListUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateBadRequestResponseBody runs the validations defined on
// create_bad_request_response_body
func ValidateCreateBadRequestResponseBody(body *CreateBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateForbiddenResponseBody runs the validations defined on
// create_forbidden_response_body
func ValidateCreateForbiddenResponseBody(body *CreateForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateInternalErrorResponseBody runs the validations defined on
// create_internal_error_response_body
func ValidateCreateInternalErrorResponseBody(body *CreateInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateNotFoundResponseBody runs the validations defined on
// create_not_found_response_body
func ValidateCreateNotFoundResponseBody(body *CreateNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateUnauthorizedResponseBody runs the validations defined on
// create_unauthorized_response_body
func ValidateCreateUnauthorizedResponseBody(body *CreateUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetBadRequestResponseBody runs the validations defined on
// get_bad_request_response_body
func ValidateGetBadRequestResponseBody(body *GetBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetForbiddenResponseBody runs the validations defined on
// get_forbidden_response_body
func ValidateGetForbiddenResponseBody(body *GetForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetInternalErrorResponseBody runs the validations defined on
// get_internal_error_response_body
func ValidateGetInternalErrorResponseBody(body *GetInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetNotFoundResponseBody runs the validations defined on
// get_not_found_response_body
func ValidateGetNotFoundResponseBody(body *GetNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetUnauthorizedResponseBody runs the validations defined on
// get_unauthorized_response_body
func ValidateGetUnauthorizedResponseBody(body *GetUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateBadRequestResponseBody runs the validations defined on
// update_bad_request_response_body
func ValidateUpdateBadRequestResponseBody(body *UpdateBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateForbiddenResponseBody runs the validations defined on
// update_forbidden_response_body
func ValidateUpdateForbiddenResponseBody(body *UpdateForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateInternalErrorResponseBody runs the validations defined on
// update_internal_error_response_body
func ValidateUpdateInternalErrorResponseBody(body *UpdateInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateNotFoundResponseBody runs the validations defined on
// update_not_found_response_body
func ValidateUpdateNotFoundResponseBody(body *UpdateNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateUnauthorizedResponseBody runs the validations defined on
// update_unauthorized_response_body
func ValidateUpdateUnauthorizedResponseBody(body *UpdateUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteBadRequestResponseBody runs the validations defined on
// delete_bad_request_response_body
func ValidateDeleteBadRequestResponseBody(body *DeleteBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteForbiddenResponseBody runs the validations defined on
// delete_forbidden_response_body
func ValidateDeleteForbiddenResponseBody(body *DeleteForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteInternalErrorResponseBody runs the validations defined on
// delete_internal_error_response_body
func ValidateDeleteInternalErrorResponseBody(body *DeleteInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteNotFoundResponseBody runs the validations defined on
// delete_not_found_response_body
func ValidateDeleteNotFoundResponseBody(body *DeleteNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteUnauthorizedResponseBody runs the validations defined on
// delete_unauthorized_response_body
func ValidateDeleteUnauthorizedResponseBody(body *DeleteUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateValidateBadRequestResponseBody runs the validations defined on
// validate_bad_request_response_body
func ValidateValidateBadRequestResponseBody(body *ValidateBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateValidateForbiddenResponseBody runs the validations defined on
// validate_forbidden_response_body
func ValidateValidateForbiddenResponseBody(body *ValidateForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateValidateInternalErrorResponseBody runs the validations defined on
// validate_internal_error_response_body
func ValidateValidateInternalErrorResponseBody(body *ValidateInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateValidateNotFoundResponseBody runs the validations defined on
// validate_not_found_response_body
func ValidateValidateNotFoundResponseBody(body *ValidateNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateValidateUnauthorizedResponseBody runs the validations defined on
// validate_unauthorized_response_body
func ValidateValidateUnauthorizedResponseBody(body *ValidateUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateAPIKeyResponseResponseBody runs the validations defined on
// APIKeyResponseResponseBody
func ValidateAPIKeyResponseResponseBody(body *APIKeyResponseResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "body"))
	}
	if body.Active == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("active", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	return
}

// ValidatePaginationResponseResponseBody runs the validations defined on
// PaginationResponseResponseBody
func ValidatePaginationResponseResponseBody(body *PaginationResponseResponseBody) (err error) {
	if body.Total == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total", "body"))
	}
	if body.Offset == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("offset", "body"))
	}
	if body.Limit == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("limit", "body"))
	}
	return
}

// ValidateCreateAPIKeyRequestRequestBody runs the validations defined on
// CreateAPIKeyRequestRequestBody
func ValidateCreateAPIKeyRequestRequestBody(body *CreateAPIKeyRequestRequestBody) (err error) {
	if !(body.Type == "client" || body.Type == "server") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.type", body.Type, []any{"client", "server"}))
	}
	return
}
