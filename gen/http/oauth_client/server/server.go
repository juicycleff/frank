// Code generated by goa v3.20.0, DO NOT EDIT.
//
// oauth_client HTTP server
//
// Command:
// $ goa gen github.com/juicycleff/frank/design -o .

package server

import (
	"context"
	"net/http"
	"regexp"

	oauthclient "github.com/juicycleff/frank/gen/oauth_client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
	"goa.design/plugins/v3/cors"
)

// Server lists the oauth_client service endpoint HTTP handlers.
type Server struct {
	Mounts           []*MountPoint
	ListProviders    http.Handler
	ProviderAuth     http.Handler
	ProviderCallback http.Handler
	CORS             http.Handler
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the oauth_client service endpoints
// using the provided encoder and decoder. The handlers are mounted on the
// given mux using the HTTP verb and path defined in the design. errhandler is
// called whenever a response fails to be encoded. formatter is used to format
// errors returned by the service methods prior to encoding. Both errhandler
// and formatter are optional and can be nil.
func New(
	e *oauthclient.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"ListProviders", "GET", "/v1/auth/oauth/providers"},
			{"ProviderAuth", "GET", "/v1/auth/oauth/providers/{provider}"},
			{"ProviderCallback", "GET", "/v1/auth/oauth/callback/{provider}"},
			{"CORS", "OPTIONS", "/v1/auth/oauth/providers"},
			{"CORS", "OPTIONS", "/v1/auth/oauth/providers/{provider}"},
			{"CORS", "OPTIONS", "/v1/auth/oauth/callback/{provider}"},
		},
		ListProviders:    NewListProvidersHandler(e.ListProviders, mux, decoder, encoder, errhandler, formatter),
		ProviderAuth:     NewProviderAuthHandler(e.ProviderAuth, mux, decoder, encoder, errhandler, formatter),
		ProviderCallback: NewProviderCallbackHandler(e.ProviderCallback, mux, decoder, encoder, errhandler, formatter),
		CORS:             NewCORSHandler(),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "oauth_client" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.ListProviders = m(s.ListProviders)
	s.ProviderAuth = m(s.ProviderAuth)
	s.ProviderCallback = m(s.ProviderCallback)
	s.CORS = m(s.CORS)
}

// MethodNames returns the methods served.
func (s *Server) MethodNames() []string { return oauthclient.MethodNames[:] }

// Mount configures the mux to serve the oauth_client endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountListProvidersHandler(mux, h.ListProviders)
	MountProviderAuthHandler(mux, h.ProviderAuth)
	MountProviderCallbackHandler(mux, h.ProviderCallback)
	MountCORSHandler(mux, h.CORS)
}

// Mount configures the mux to serve the oauth_client endpoints.
func (s *Server) Mount(mux goahttp.Muxer) {
	Mount(mux, s)
}

// MountListProvidersHandler configures the mux to serve the "oauth_client"
// service "list_providers" endpoint.
func MountListProvidersHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleOauthClientOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/v1/auth/oauth/providers", f)
}

// NewListProvidersHandler creates a HTTP handler which loads the HTTP request
// and calls the "oauth_client" service "list_providers" endpoint.
func NewListProvidersHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeListProvidersRequest(mux, decoder)
		encodeResponse = EncodeListProvidersResponse(encoder)
		encodeError    = EncodeListProvidersError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "list_providers")
		ctx = context.WithValue(ctx, goa.ServiceKey, "oauth_client")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountProviderAuthHandler configures the mux to serve the "oauth_client"
// service "provider_auth" endpoint.
func MountProviderAuthHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleOauthClientOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/v1/auth/oauth/providers/{provider}", f)
}

// NewProviderAuthHandler creates a HTTP handler which loads the HTTP request
// and calls the "oauth_client" service "provider_auth" endpoint.
func NewProviderAuthHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeProviderAuthRequest(mux, decoder)
		encodeResponse = EncodeProviderAuthResponse(encoder)
		encodeError    = EncodeProviderAuthError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "provider_auth")
		ctx = context.WithValue(ctx, goa.ServiceKey, "oauth_client")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountProviderCallbackHandler configures the mux to serve the "oauth_client"
// service "provider_callback" endpoint.
func MountProviderCallbackHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleOauthClientOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/v1/auth/oauth/callback/{provider}", f)
}

// NewProviderCallbackHandler creates a HTTP handler which loads the HTTP
// request and calls the "oauth_client" service "provider_callback" endpoint.
func NewProviderCallbackHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeProviderCallbackRequest(mux, decoder)
		encodeResponse = EncodeProviderCallbackResponse(encoder)
		encodeError    = EncodeProviderCallbackError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "provider_callback")
		ctx = context.WithValue(ctx, goa.ServiceKey, "oauth_client")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountCORSHandler configures the mux to serve the CORS endpoints for the
// service oauth_client.
func MountCORSHandler(mux goahttp.Muxer, h http.Handler) {
	h = HandleOauthClientOrigin(h)
	mux.Handle("OPTIONS", "/v1/auth/oauth/providers", h.ServeHTTP)
	mux.Handle("OPTIONS", "/v1/auth/oauth/providers/{provider}", h.ServeHTTP)
	mux.Handle("OPTIONS", "/v1/auth/oauth/callback/{provider}", h.ServeHTTP)
}

// NewCORSHandler creates a HTTP handler which returns a simple 204 response.
func NewCORSHandler() http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		w.WriteHeader(204)
	})
}

// HandleOauthClientOrigin applies the CORS response headers corresponding to
// the origin for the service oauth_client.
func HandleOauthClientOrigin(h http.Handler) http.Handler {
	spec1 := regexp.MustCompile(".*localhost.*")
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		origin := r.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			h.ServeHTTP(w, r)
			return
		}
		if cors.MatchOrigin(origin, "*.frank.com") {
			w.Header().Set("Access-Control-Allow-Origin", origin)
			w.Header().Set("Vary", "Origin")
			w.Header().Set("Access-Control-Max-Age", "100")
			w.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := r.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				w.Header().Set("Access-Control-Allow-Headers", "X-Shared-Secret, X-Api-Version")
				w.WriteHeader(204)
				return
			}
			h.ServeHTTP(w, r)
			return
		}
		if cors.MatchOriginRegexp(origin, spec1) {
			w.Header().Set("Access-Control-Allow-Origin", origin)
			w.Header().Set("Vary", "Origin")
			w.Header().Set("Access-Control-Expose-Headers", "X-Request-Id")
			w.Header().Set("Access-Control-Max-Age", "600")
			w.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := r.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				w.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS")
				w.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
				w.WriteHeader(204)
				return
			}
			h.ServeHTTP(w, r)
			return
		}
		if cors.MatchOrigin(origin, "localhost") {
			w.Header().Set("Access-Control-Allow-Origin", origin)
			w.Header().Set("Vary", "Origin")
			if acrm := r.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				w.WriteHeader(204)
				return
			}
			h.ServeHTTP(w, r)
			return
		}
		h.ServeHTTP(w, r)
		return
	})
}
