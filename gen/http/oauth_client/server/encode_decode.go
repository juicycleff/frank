// Code generated by goa v3.20.0, DO NOT EDIT.
//
// oauth_client HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/juicycleff/frank/design -o .

package server

import (
	"context"
	"errors"
	"net/http"
	"strings"

	designtypes "github.com/juicycleff/frank/gen/designtypes"
	oauthclient "github.com/juicycleff/frank/gen/oauth_client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeListProvidersResponse returns an encoder for responses returned by the
// oauth_client list_providers endpoint.
func EncodeListProvidersResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*oauthclient.ListProvidersResult)
		enc := encoder(ctx, w)
		body := NewListProvidersResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeListProvidersRequest returns a decoder for requests sent to the
// oauth_client list_providers endpoint.
func DecodeListProvidersRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			oauth2  *string
			xAPIKey *string
			jwt     *string
		)
		oauth2Raw := r.Header.Get("Authorization")
		if oauth2Raw != "" {
			oauth2 = &oauth2Raw
		}
		xAPIKeyRaw := r.Header.Get("Authorization")
		if xAPIKeyRaw != "" {
			xAPIKey = &xAPIKeyRaw
		}
		jwtRaw := r.Header.Get("Authorization")
		if jwtRaw != "" {
			jwt = &jwtRaw
		}
		payload := NewListProvidersPayload(oauth2, xAPIKey, jwt)
		if payload.Oauth2 != nil {
			if strings.Contains(*payload.Oauth2, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.Oauth2, " ", 2)[1]
				payload.Oauth2 = &cred
			}
		}
		if payload.XAPIKey != nil {
			if strings.Contains(*payload.XAPIKey, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.XAPIKey, " ", 2)[1]
				payload.XAPIKey = &cred
			}
		}
		if payload.JWT != nil {
			if strings.Contains(*payload.JWT, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.JWT, " ", 2)[1]
				payload.JWT = &cred
			}
		}

		return payload, nil
	}
}

// EncodeListProvidersError returns an encoder for errors returned by the
// list_providers oauth_client endpoint.
func EncodeListProvidersError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "bad_request":
			var res *oauthclient.BadRequestError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewListProvidersBadRequestResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "forbidden":
			var res *oauthclient.ForbiddenError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewListProvidersForbiddenResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusForbidden)
			return enc.Encode(body)
		case "internal_error":
			var res *oauthclient.InternalServerError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewListProvidersInternalErrorResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "not_found":
			var res *oauthclient.NotFoundError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewListProvidersNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "unauthorized":
			var res *oauthclient.UnauthorizedError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewListProvidersUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeProviderAuthResponse returns an encoder for responses returned by the
// oauth_client provider_auth endpoint.
func EncodeProviderAuthResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		w.WriteHeader(http.StatusFound)
		return nil
	}
}

// DecodeProviderAuthRequest returns a decoder for requests sent to the
// oauth_client provider_auth endpoint.
func DecodeProviderAuthRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			provider    string
			redirectURI *string
			oauth2      *string
			xAPIKey     *string
			jwt         *string

			params = mux.Vars(r)
		)
		provider = params["provider"]
		redirectURIRaw := r.URL.Query().Get("redirect_uri")
		if redirectURIRaw != "" {
			redirectURI = &redirectURIRaw
		}
		oauth2Raw := r.Header.Get("Authorization")
		if oauth2Raw != "" {
			oauth2 = &oauth2Raw
		}
		xAPIKeyRaw := r.Header.Get("Authorization")
		if xAPIKeyRaw != "" {
			xAPIKey = &xAPIKeyRaw
		}
		jwtRaw := r.Header.Get("Authorization")
		if jwtRaw != "" {
			jwt = &jwtRaw
		}
		payload := NewProviderAuthPayload(provider, redirectURI, oauth2, xAPIKey, jwt)
		if payload.Oauth2 != nil {
			if strings.Contains(*payload.Oauth2, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.Oauth2, " ", 2)[1]
				payload.Oauth2 = &cred
			}
		}
		if payload.XAPIKey != nil {
			if strings.Contains(*payload.XAPIKey, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.XAPIKey, " ", 2)[1]
				payload.XAPIKey = &cred
			}
		}
		if payload.JWT != nil {
			if strings.Contains(*payload.JWT, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.JWT, " ", 2)[1]
				payload.JWT = &cred
			}
		}

		return payload, nil
	}
}

// EncodeProviderAuthError returns an encoder for errors returned by the
// provider_auth oauth_client endpoint.
func EncodeProviderAuthError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "bad_request":
			var res *oauthclient.BadRequestError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewProviderAuthBadRequestResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "forbidden":
			var res *oauthclient.ForbiddenError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewProviderAuthForbiddenResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusForbidden)
			return enc.Encode(body)
		case "internal_error":
			var res *oauthclient.InternalServerError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewProviderAuthInternalErrorResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "not_found":
			var res *oauthclient.NotFoundError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewProviderAuthNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "unauthorized":
			var res *oauthclient.UnauthorizedError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewProviderAuthUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeProviderCallbackResponse returns an encoder for responses returned by
// the oauth_client provider_callback endpoint.
func EncodeProviderCallbackResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*oauthclient.ProviderCallbackResult)
		enc := encoder(ctx, w)
		body := NewProviderCallbackResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeProviderCallbackRequest returns a decoder for requests sent to the
// oauth_client provider_callback endpoint.
func DecodeProviderCallbackRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			provider string
			code     *string
			state    *string
			oauth2   *string
			xAPIKey  *string
			jwt      *string

			params = mux.Vars(r)
		)
		provider = params["provider"]
		qp := r.URL.Query()
		codeRaw := qp.Get("code")
		if codeRaw != "" {
			code = &codeRaw
		}
		stateRaw := qp.Get("state")
		if stateRaw != "" {
			state = &stateRaw
		}
		oauth2Raw := r.Header.Get("Authorization")
		if oauth2Raw != "" {
			oauth2 = &oauth2Raw
		}
		xAPIKeyRaw := r.Header.Get("Authorization")
		if xAPIKeyRaw != "" {
			xAPIKey = &xAPIKeyRaw
		}
		jwtRaw := r.Header.Get("Authorization")
		if jwtRaw != "" {
			jwt = &jwtRaw
		}
		payload := NewProviderCallbackPayload(provider, code, state, oauth2, xAPIKey, jwt)
		if payload.Oauth2 != nil {
			if strings.Contains(*payload.Oauth2, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.Oauth2, " ", 2)[1]
				payload.Oauth2 = &cred
			}
		}
		if payload.XAPIKey != nil {
			if strings.Contains(*payload.XAPIKey, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.XAPIKey, " ", 2)[1]
				payload.XAPIKey = &cred
			}
		}
		if payload.JWT != nil {
			if strings.Contains(*payload.JWT, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.JWT, " ", 2)[1]
				payload.JWT = &cred
			}
		}

		return payload, nil
	}
}

// EncodeProviderCallbackError returns an encoder for errors returned by the
// provider_callback oauth_client endpoint.
func EncodeProviderCallbackError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "bad_request":
			var res *oauthclient.BadRequestError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewProviderCallbackBadRequestResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "forbidden":
			var res *oauthclient.ForbiddenError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewProviderCallbackForbiddenResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusForbidden)
			return enc.Encode(body)
		case "internal_error":
			var res *oauthclient.InternalServerError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewProviderCallbackInternalErrorResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "not_found":
			var res *oauthclient.NotFoundError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewProviderCallbackNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "unauthorized":
			var res *oauthclient.UnauthorizedError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewProviderCallbackUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// marshalOauthclientSSOProviderToSSOProviderResponseBody builds a value of
// type *SSOProviderResponseBody from a value of type *oauthclient.SSOProvider.
func marshalOauthclientSSOProviderToSSOProviderResponseBody(v *oauthclient.SSOProvider) *SSOProviderResponseBody {
	res := &SSOProviderResponseBody{
		ID:      v.ID,
		Name:    v.Name,
		Type:    v.Type,
		IconURL: v.IconURL,
	}

	return res
}

// marshalDesigntypesUserToUserResponseBody builds a value of type
// *UserResponseBody from a value of type *designtypes.User.
func marshalDesigntypesUserToUserResponseBody(v *designtypes.User) *UserResponseBody {
	if v == nil {
		return nil
	}
	res := &UserResponseBody{
		Active:          v.Active,
		EmailVerified:   v.EmailVerified,
		PhoneVerified:   v.PhoneVerified,
		ProfileImageURL: v.ProfileImageURL,
		FirstName:       v.FirstName,
		LastName:        v.LastName,
		PhoneNumber:     v.PhoneNumber,
		Locale:          v.Locale,
		Email:           v.Email,
	}
	if v.Metadata != nil {
		res.Metadata = make(map[string]any, len(v.Metadata))
		for key, val := range v.Metadata {
			tk := key
			tv := val
			res.Metadata[tk] = tv
		}
	}
	{
		var zero string
		if res.Locale == zero {
			res.Locale = "en"
		}
	}

	return res
}
