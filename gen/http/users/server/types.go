// Code generated by goa v3.20.0, DO NOT EDIT.
//
// users HTTP server types
//
// Command:
// $ goa gen github.com/juicycleff/frank/design -o .

package server

import (
	"unicode/utf8"

	designtypes "github.com/juicycleff/frank/gen/designtypes"
	users "github.com/juicycleff/frank/gen/users"
	goa "goa.design/goa/v3/pkg"
)

// CreateRequestBody is the type of the "users" service "create" endpoint HTTP
// request body.
type CreateRequestBody struct {
	// User password
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
	// Organization ID to add user to
	OrganizationID *string `form:"organization_id,omitempty" json:"organization_id,omitempty" xml:"organization_id,omitempty"`
	// User first name
	FirstName *string `json:"first_name,firstName"`
	// User last name
	LastName *string `json:"last_name,lastName"`
	// User phone number
	PhoneNumber *string `json:"phone_number,phoneNumber"`
	// URL to user's profile image
	ProfileImageURL *string `json:"profile_image_url,profileImageUrl"`
	// User metadata
	Metadata map[string]any `json:"metadata"`
	// User locale
	Locale *string `json:"locale"`
	// Email address
	Email *string `json:"email"`
}

// UpdateRequestBody is the type of the "users" service "update" endpoint HTTP
// request body.
type UpdateRequestBody struct {
	User *UpdateUserRequestRequestBody `form:"user,omitempty" json:"user,omitempty" xml:"user,omitempty"`
}

// UpdateMeRequestBody is the type of the "users" service "update_me" endpoint
// HTTP request body.
type UpdateMeRequestBody struct {
	// User phone number
	PhoneNumber *string `form:"phone_number,omitempty" json:"phone_number,omitempty" xml:"phone_number,omitempty"`
	// User first name
	FirstName *string `form:"first_name,omitempty" json:"first_name,omitempty" xml:"first_name,omitempty"`
	// User last name
	LastName *string `form:"last_name,omitempty" json:"last_name,omitempty" xml:"last_name,omitempty"`
	// User metadata
	Metadata map[string]any `form:"metadata,omitempty" json:"metadata,omitempty" xml:"metadata,omitempty"`
	// Profile image URL
	ProfileImageURL *string `form:"profile_image_url,omitempty" json:"profile_image_url,omitempty" xml:"profile_image_url,omitempty"`
	// User locale
	Locale *string `form:"locale,omitempty" json:"locale,omitempty" xml:"locale,omitempty"`
	// Whether user is active
	Active *bool `form:"active,omitempty" json:"active,omitempty" xml:"active,omitempty"`
	// Primary organization ID
	PrimaryOrganizationID *string `form:"primary_organization_id,omitempty" json:"primary_organization_id,omitempty" xml:"primary_organization_id,omitempty"`
}

// UpdatePasswordRequestBody is the type of the "users" service
// "update_password" endpoint HTTP request body.
type UpdatePasswordRequestBody struct {
	// Current password
	CurrentPassword *string `form:"current_password,omitempty" json:"current_password,omitempty" xml:"current_password,omitempty"`
	// New password
	NewPassword *string `form:"new_password,omitempty" json:"new_password,omitempty" xml:"new_password,omitempty"`
}

// ListResponseBody is the type of the "users" service "list" endpoint HTTP
// response body.
type ListResponseBody struct {
	Data       []*UserResponseBody     `form:"data" json:"data" xml:"data"`
	Pagination *PaginationResponseBody `form:"pagination" json:"pagination" xml:"pagination"`
}

// CreateResponseBody is the type of the "users" service "create" endpoint HTTP
// response body.
type CreateResponseBody struct {
	// Whether account is active
	Active bool `form:"active" json:"active" xml:"active"`
	// Whether email is verified
	EmailVerified bool `json:"email_verified,emailVerified"`
	// Whether phone is verified
	PhoneVerified *bool `json:"phone_verified,phoneVerified"`
	// URL to user's profile image
	ProfileImageURL *string `json:"profile_image_url,profileImageUrl"`
	// User first name
	FirstName *string `json:"first_name,firstName"`
	// User last name
	LastName *string `json:"last_name,lastName"`
	// User phone number
	PhoneNumber *string `json:"phone_number,phoneNumber"`
	// User metadata
	Metadata map[string]any `json:"metadata"`
	// User locale
	Locale string `json:"locale"`
	// Email address
	Email string `json:"email"`
}

// GetResponseBody is the type of the "users" service "get" endpoint HTTP
// response body.
type GetResponseBody struct {
	// Whether account is active
	Active bool `form:"active" json:"active" xml:"active"`
	// Whether email is verified
	EmailVerified bool `json:"email_verified,emailVerified"`
	// Whether phone is verified
	PhoneVerified *bool `json:"phone_verified,phoneVerified"`
	// URL to user's profile image
	ProfileImageURL *string `json:"profile_image_url,profileImageUrl"`
	// User first name
	FirstName *string `json:"first_name,firstName"`
	// User last name
	LastName *string `json:"last_name,lastName"`
	// User phone number
	PhoneNumber *string `json:"phone_number,phoneNumber"`
	// User metadata
	Metadata map[string]any `json:"metadata"`
	// User locale
	Locale string `json:"locale"`
	// Email address
	Email string `json:"email"`
}

// UpdateResponseBody is the type of the "users" service "update" endpoint HTTP
// response body.
type UpdateResponseBody struct {
	// Whether account is active
	Active bool `form:"active" json:"active" xml:"active"`
	// Whether email is verified
	EmailVerified bool `json:"email_verified,emailVerified"`
	// Whether phone is verified
	PhoneVerified *bool `json:"phone_verified,phoneVerified"`
	// URL to user's profile image
	ProfileImageURL *string `json:"profile_image_url,profileImageUrl"`
	// User first name
	FirstName *string `json:"first_name,firstName"`
	// User last name
	LastName *string `json:"last_name,lastName"`
	// User phone number
	PhoneNumber *string `json:"phone_number,phoneNumber"`
	// User metadata
	Metadata map[string]any `json:"metadata"`
	// User locale
	Locale string `json:"locale"`
	// Email address
	Email string `json:"email"`
}

// UpdateMeResponseBody is the type of the "users" service "update_me" endpoint
// HTTP response body.
type UpdateMeResponseBody struct {
	// Whether account is active
	Active bool `form:"active" json:"active" xml:"active"`
	// Whether email is verified
	EmailVerified bool `json:"email_verified,emailVerified"`
	// Whether phone is verified
	PhoneVerified *bool `json:"phone_verified,phoneVerified"`
	// URL to user's profile image
	ProfileImageURL *string `json:"profile_image_url,profileImageUrl"`
	// User first name
	FirstName *string `json:"first_name,firstName"`
	// User last name
	LastName *string `json:"last_name,lastName"`
	// User phone number
	PhoneNumber *string `json:"phone_number,phoneNumber"`
	// User metadata
	Metadata map[string]any `json:"metadata"`
	// User locale
	Locale string `json:"locale"`
	// Email address
	Email string `json:"email"`
}

// UpdatePasswordResponseBody is the type of the "users" service
// "update_password" endpoint HTTP response body.
type UpdatePasswordResponseBody struct {
	// Success message
	Message string `form:"message" json:"message" xml:"message"`
}

// GetSessionsResponseBody is the type of the "users" service "get_sessions"
// endpoint HTTP response body.
type GetSessionsResponseBody struct {
	// User sessions
	Data []*SessionResponseBody `form:"data" json:"data" xml:"data"`
	// Pagination params
	Pagination *PaginationResponseBody `json:"pagination"`
}

// GetOrganizationsResponseBody is the type of the "users" service
// "get_organizations" endpoint HTTP response body.
type GetOrganizationsResponseBody struct {
	Organizations []*OrganizationResponseBody `form:"organizations" json:"organizations" xml:"organizations"`
}

// ListBadRequestResponseBody is the type of the "users" service "list"
// endpoint HTTP response body for the "bad_request" error.
type ListBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListConflictResponseBody is the type of the "users" service "list" endpoint
// HTTP response body for the "conflict" error.
type ListConflictResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListForbiddenResponseBody is the type of the "users" service "list" endpoint
// HTTP response body for the "forbidden" error.
type ListForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListInternalErrorResponseBody is the type of the "users" service "list"
// endpoint HTTP response body for the "internal_error" error.
type ListInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListNotFoundResponseBody is the type of the "users" service "list" endpoint
// HTTP response body for the "not_found" error.
type ListNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListUnauthorizedResponseBody is the type of the "users" service "list"
// endpoint HTTP response body for the "unauthorized" error.
type ListUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreateBadRequestResponseBody is the type of the "users" service "create"
// endpoint HTTP response body for the "bad_request" error.
type CreateBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreateConflictResponseBody is the type of the "users" service "create"
// endpoint HTTP response body for the "conflict" error.
type CreateConflictResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreateForbiddenResponseBody is the type of the "users" service "create"
// endpoint HTTP response body for the "forbidden" error.
type CreateForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreateInternalErrorResponseBody is the type of the "users" service "create"
// endpoint HTTP response body for the "internal_error" error.
type CreateInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreateNotFoundResponseBody is the type of the "users" service "create"
// endpoint HTTP response body for the "not_found" error.
type CreateNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreateUnauthorizedResponseBody is the type of the "users" service "create"
// endpoint HTTP response body for the "unauthorized" error.
type CreateUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetBadRequestResponseBody is the type of the "users" service "get" endpoint
// HTTP response body for the "bad_request" error.
type GetBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetConflictResponseBody is the type of the "users" service "get" endpoint
// HTTP response body for the "conflict" error.
type GetConflictResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetForbiddenResponseBody is the type of the "users" service "get" endpoint
// HTTP response body for the "forbidden" error.
type GetForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetInternalErrorResponseBody is the type of the "users" service "get"
// endpoint HTTP response body for the "internal_error" error.
type GetInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetNotFoundResponseBody is the type of the "users" service "get" endpoint
// HTTP response body for the "not_found" error.
type GetNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetUnauthorizedResponseBody is the type of the "users" service "get"
// endpoint HTTP response body for the "unauthorized" error.
type GetUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateBadRequestResponseBody is the type of the "users" service "update"
// endpoint HTTP response body for the "bad_request" error.
type UpdateBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateConflictResponseBody is the type of the "users" service "update"
// endpoint HTTP response body for the "conflict" error.
type UpdateConflictResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateForbiddenResponseBody is the type of the "users" service "update"
// endpoint HTTP response body for the "forbidden" error.
type UpdateForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateInternalErrorResponseBody is the type of the "users" service "update"
// endpoint HTTP response body for the "internal_error" error.
type UpdateInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateNotFoundResponseBody is the type of the "users" service "update"
// endpoint HTTP response body for the "not_found" error.
type UpdateNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateUnauthorizedResponseBody is the type of the "users" service "update"
// endpoint HTTP response body for the "unauthorized" error.
type UpdateUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteBadRequestResponseBody is the type of the "users" service "delete"
// endpoint HTTP response body for the "bad_request" error.
type DeleteBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteConflictResponseBody is the type of the "users" service "delete"
// endpoint HTTP response body for the "conflict" error.
type DeleteConflictResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteForbiddenResponseBody is the type of the "users" service "delete"
// endpoint HTTP response body for the "forbidden" error.
type DeleteForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteInternalErrorResponseBody is the type of the "users" service "delete"
// endpoint HTTP response body for the "internal_error" error.
type DeleteInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteNotFoundResponseBody is the type of the "users" service "delete"
// endpoint HTTP response body for the "not_found" error.
type DeleteNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteUnauthorizedResponseBody is the type of the "users" service "delete"
// endpoint HTTP response body for the "unauthorized" error.
type DeleteUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateMeBadRequestResponseBody is the type of the "users" service
// "update_me" endpoint HTTP response body for the "bad_request" error.
type UpdateMeBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateMeConflictResponseBody is the type of the "users" service "update_me"
// endpoint HTTP response body for the "conflict" error.
type UpdateMeConflictResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateMeForbiddenResponseBody is the type of the "users" service "update_me"
// endpoint HTTP response body for the "forbidden" error.
type UpdateMeForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateMeInternalErrorResponseBody is the type of the "users" service
// "update_me" endpoint HTTP response body for the "internal_error" error.
type UpdateMeInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateMeNotFoundResponseBody is the type of the "users" service "update_me"
// endpoint HTTP response body for the "not_found" error.
type UpdateMeNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateMeUnauthorizedResponseBody is the type of the "users" service
// "update_me" endpoint HTTP response body for the "unauthorized" error.
type UpdateMeUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdatePasswordBadRequestResponseBody is the type of the "users" service
// "update_password" endpoint HTTP response body for the "bad_request" error.
type UpdatePasswordBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdatePasswordConflictResponseBody is the type of the "users" service
// "update_password" endpoint HTTP response body for the "conflict" error.
type UpdatePasswordConflictResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdatePasswordForbiddenResponseBody is the type of the "users" service
// "update_password" endpoint HTTP response body for the "forbidden" error.
type UpdatePasswordForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdatePasswordInternalErrorResponseBody is the type of the "users" service
// "update_password" endpoint HTTP response body for the "internal_error" error.
type UpdatePasswordInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdatePasswordNotFoundResponseBody is the type of the "users" service
// "update_password" endpoint HTTP response body for the "not_found" error.
type UpdatePasswordNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdatePasswordUnauthorizedResponseBody is the type of the "users" service
// "update_password" endpoint HTTP response body for the "unauthorized" error.
type UpdatePasswordUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetSessionsBadRequestResponseBody is the type of the "users" service
// "get_sessions" endpoint HTTP response body for the "bad_request" error.
type GetSessionsBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetSessionsConflictResponseBody is the type of the "users" service
// "get_sessions" endpoint HTTP response body for the "conflict" error.
type GetSessionsConflictResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetSessionsForbiddenResponseBody is the type of the "users" service
// "get_sessions" endpoint HTTP response body for the "forbidden" error.
type GetSessionsForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetSessionsInternalErrorResponseBody is the type of the "users" service
// "get_sessions" endpoint HTTP response body for the "internal_error" error.
type GetSessionsInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetSessionsNotFoundResponseBody is the type of the "users" service
// "get_sessions" endpoint HTTP response body for the "not_found" error.
type GetSessionsNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetSessionsUnauthorizedResponseBody is the type of the "users" service
// "get_sessions" endpoint HTTP response body for the "unauthorized" error.
type GetSessionsUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteSessionBadRequestResponseBody is the type of the "users" service
// "delete_session" endpoint HTTP response body for the "bad_request" error.
type DeleteSessionBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteSessionConflictResponseBody is the type of the "users" service
// "delete_session" endpoint HTTP response body for the "conflict" error.
type DeleteSessionConflictResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteSessionForbiddenResponseBody is the type of the "users" service
// "delete_session" endpoint HTTP response body for the "forbidden" error.
type DeleteSessionForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteSessionInternalErrorResponseBody is the type of the "users" service
// "delete_session" endpoint HTTP response body for the "internal_error" error.
type DeleteSessionInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteSessionNotFoundResponseBody is the type of the "users" service
// "delete_session" endpoint HTTP response body for the "not_found" error.
type DeleteSessionNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteSessionUnauthorizedResponseBody is the type of the "users" service
// "delete_session" endpoint HTTP response body for the "unauthorized" error.
type DeleteSessionUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetOrganizationsBadRequestResponseBody is the type of the "users" service
// "get_organizations" endpoint HTTP response body for the "bad_request" error.
type GetOrganizationsBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetOrganizationsConflictResponseBody is the type of the "users" service
// "get_organizations" endpoint HTTP response body for the "conflict" error.
type GetOrganizationsConflictResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetOrganizationsForbiddenResponseBody is the type of the "users" service
// "get_organizations" endpoint HTTP response body for the "forbidden" error.
type GetOrganizationsForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetOrganizationsInternalErrorResponseBody is the type of the "users" service
// "get_organizations" endpoint HTTP response body for the "internal_error"
// error.
type GetOrganizationsInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetOrganizationsNotFoundResponseBody is the type of the "users" service
// "get_organizations" endpoint HTTP response body for the "not_found" error.
type GetOrganizationsNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetOrganizationsUnauthorizedResponseBody is the type of the "users" service
// "get_organizations" endpoint HTTP response body for the "unauthorized" error.
type GetOrganizationsUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UserResponseBody is used to define fields on response body types.
type UserResponseBody struct {
	// Whether account is active
	Active bool `form:"active" json:"active" xml:"active"`
	// Whether email is verified
	EmailVerified bool `json:"email_verified,emailVerified"`
	// Whether phone is verified
	PhoneVerified *bool `json:"phone_verified,phoneVerified"`
	// URL to user's profile image
	ProfileImageURL *string `json:"profile_image_url,profileImageUrl"`
	// User first name
	FirstName *string `json:"first_name,firstName"`
	// User last name
	LastName *string `json:"last_name,lastName"`
	// User phone number
	PhoneNumber *string `json:"phone_number,phoneNumber"`
	// User metadata
	Metadata map[string]any `json:"metadata"`
	// User locale
	Locale string `json:"locale"`
	// Email address
	Email string `json:"email"`
}

// PaginationResponseBody is used to define fields on response body types.
type PaginationResponseBody struct {
	// Offset
	Offset int `json:"offset"`
	// Limit
	Limit int `json:"limit"`
	// Total number of items
	Total int `json:"total"`
	// Total number of pages
	TotalPages int `json:"total_pages,totalPages"`
	// Current page number
	CurrentPage int `json:"current_page,currentPage"`
	// Has next page
	HasNext bool `json:"has_next,hasNext"`
	// Has previous page
	HasPrevious bool `json:"has_previous,hasPrevious"`
}

// SessionResponseBody is used to define fields on response body types.
type SessionResponseBody struct {
	// User ID
	UserID *string `json:"user_id,userId"`
	// Device ID
	DeviceID *string `json:"device_id,deviceId"`
	// IP address
	IPAddress *string `json:"ip_address,ipAddress"`
	// User agent string
	UserAgent *string `json:"user_agent,userAgent"`
	// Location
	Location *string `json:"location"`
	// Session token
	Token *string `json:"token"`
	// Organization ID
	OrganizationID *string `json:"organization_id,organizationId"`
	// Session is active
	IsActive *bool `json:"is_active,isActive"`
	// Session metadata
	Metadata map[string]any `json:"metadata"`
	// Last activity timestamp
	LastActiveAt *string `json:"last_active_at,lastActiveAt"`
	// Expiry timestamp
	ExpiresAt string `json:"expires_at,expiresAt"`
	// Created At
	ID string `json:"id"`
	// Created At
	CreatedAt string `json:"created_at,createdAt"`
	// Updated At
	UpdatedAt string `json:"updated_at,updatedAt"`
}

// OrganizationResponseBody is used to define fields on response body types.
type OrganizationResponseBody struct {
	// Organization ID
	ID string `form:"id" json:"id" xml:"id"`
	// Organization name
	Name string `form:"name" json:"name" xml:"name"`
	// Organization slug
	Slug string `form:"slug" json:"slug" xml:"slug"`
	// Organization domain
	Domain *string `form:"domain,omitempty" json:"domain,omitempty" xml:"domain,omitempty"`
	// Organization logo URL
	LogoURL *string `form:"logo_url,omitempty" json:"logo_url,omitempty" xml:"logo_url,omitempty"`
	// Organization plan
	Plan *string `form:"plan,omitempty" json:"plan,omitempty" xml:"plan,omitempty"`
	// Whether organization is active
	Active bool `form:"active" json:"active" xml:"active"`
	// Organization metadata
	Metadata map[string]any `form:"metadata,omitempty" json:"metadata,omitempty" xml:"metadata,omitempty"`
	// Trial end date
	TrialEndsAt *string `form:"trial_ends_at,omitempty" json:"trial_ends_at,omitempty" xml:"trial_ends_at,omitempty"`
	// Whether trial has been used
	TrialUsed *bool `form:"trial_used,omitempty" json:"trial_used,omitempty" xml:"trial_used,omitempty"`
	// Creation timestamp
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// Last update timestamp
	UpdatedAt string `form:"updated_at" json:"updated_at" xml:"updated_at"`
	// Organization settings
	Settings *OrganizationSettingsResponseBody `json:"settings"`
}

// OrganizationSettingsResponseBody is used to define fields on response body
// types.
type OrganizationSettingsResponseBody struct {
	// Signup fields
	SignupFields []*FormFieldResponseBody `json:"signupFields"`
	// Signup fields
	Verification []*OrganizationVerificationConfigResponseBody `json:"verification"`
}

// FormFieldResponseBody is used to define fields on response body types.
type FormFieldResponseBody struct {
	// Field identifier name
	Name string `json:"name" mapstructure:"name" yaml:"name"`
	// Display label for the field
	Label string `json:"label" mapstructure:"label" yaml:"label"`
	// Type of form field
	Type string `json:"type" mapstructure:"type" yaml:"type"`
	// Placeholder text
	Placeholder *string `json:"placeholder" mapstructure:"placeholder" yaml:"placeholder"`
	// Whether the field is required
	Required bool `json:"required" mapstructure:"required" yaml:"required"`
	// Indicates if field represents a first name
	IsFirstName bool `json:"isFirstName" mapstructure:"isFirstName" yaml:"isFirstName"`
	// Indicates if field represents a last name
	IsLastName bool `json:"isLastName" mapstructure:"isLastName" yaml:"isLastName"`
	// Indicates if field represents an email
	IsEmail bool `json:"isEmail" mapstructure:"isEmail" yaml:"isEmail"`
	// Options for select fields
	Options []*FormFieldSelectOptionResponseBody `json:"options" mapstructure:"options" yaml:"options"`
	// Validation rules for the field
	Validation *FormFieldValidationRulesResponseBody `json:"validation" mapstructure:"validation" yaml:"validation"`
	// Row position identifier (string or number)
	Row any `json:"row" mapstructure:"row" yaml:"row"`
	// Width of the field
	Width string `json:"width" mapstructure:"width" yaml:"width"`
}

// FormFieldSelectOptionResponseBody is used to define fields on response body
// types.
type FormFieldSelectOptionResponseBody struct {
	// Option value
	Value string `json:"value" mapstructure:"value" yaml:"value"`
	// Option display label
	Label string `json:"label" mapstructure:"label" yaml:"label"`
}

// FormFieldValidationRulesResponseBody is used to define fields on response
// body types.
type FormFieldValidationRulesResponseBody struct {
	// Regex pattern for validation
	Pattern *string `json:"pattern" mapstructure:"pattern" yaml:"pattern"`
	// Minimum length
	MinLength *int `json:"minLength" mapstructure:"minLength" yaml:"minLength"`
	// Maximum length
	MaxLength *int `json:"maxLength" mapstructure:"maxLength" yaml:"maxLength"`
	// Minimum value
	Min *float32 `json:"min" mapstructure:"min" yaml:"min"`
	// Maximum value
	Max *float32 `json:"max" mapstructure:"max" yaml:"max"`
}

// OrganizationVerificationConfigResponseBody is used to define fields on
// response body types.
type OrganizationVerificationConfigResponseBody struct {
	// Length of verification code
	CodeLength int `form:"code_length" json:"code_length" xml:"code_length"`
	// Method used for verification
	Method string `form:"method" json:"method" xml:"method"`
}

// UpdateUserRequestRequestBody is used to define fields on request body types.
type UpdateUserRequestRequestBody struct {
	// User phone number
	PhoneNumber *string `form:"phone_number,omitempty" json:"phone_number,omitempty" xml:"phone_number,omitempty"`
	// User first name
	FirstName *string `form:"first_name,omitempty" json:"first_name,omitempty" xml:"first_name,omitempty"`
	// User last name
	LastName *string `form:"last_name,omitempty" json:"last_name,omitempty" xml:"last_name,omitempty"`
	// User metadata
	Metadata map[string]any `form:"metadata,omitempty" json:"metadata,omitempty" xml:"metadata,omitempty"`
	// Profile image URL
	ProfileImageURL *string `form:"profile_image_url,omitempty" json:"profile_image_url,omitempty" xml:"profile_image_url,omitempty"`
	// User locale
	Locale *string `form:"locale,omitempty" json:"locale,omitempty" xml:"locale,omitempty"`
	// Whether user is active
	Active *bool `form:"active,omitempty" json:"active,omitempty" xml:"active,omitempty"`
	// Primary organization ID
	PrimaryOrganizationID *string `form:"primary_organization_id,omitempty" json:"primary_organization_id,omitempty" xml:"primary_organization_id,omitempty"`
}

// NewListResponseBody builds the HTTP response body from the result of the
// "list" endpoint of the "users" service.
func NewListResponseBody(res *users.ListResult) *ListResponseBody {
	body := &ListResponseBody{}
	if res.Data != nil {
		body.Data = make([]*UserResponseBody, len(res.Data))
		for i, val := range res.Data {
			body.Data[i] = marshalDesigntypesUserToUserResponseBody(val)
		}
	} else {
		body.Data = []*UserResponseBody{}
	}
	if res.Pagination != nil {
		body.Pagination = marshalDesigntypesPaginationToPaginationResponseBody(res.Pagination)
	}
	return body
}

// NewCreateResponseBody builds the HTTP response body from the result of the
// "create" endpoint of the "users" service.
func NewCreateResponseBody(res *designtypes.User) *CreateResponseBody {
	body := &CreateResponseBody{
		Active:          res.Active,
		EmailVerified:   res.EmailVerified,
		PhoneVerified:   res.PhoneVerified,
		ProfileImageURL: res.ProfileImageURL,
		FirstName:       res.FirstName,
		LastName:        res.LastName,
		PhoneNumber:     res.PhoneNumber,
		Locale:          res.Locale,
		Email:           res.Email,
	}
	if res.Metadata != nil {
		body.Metadata = make(map[string]any, len(res.Metadata))
		for key, val := range res.Metadata {
			tk := key
			tv := val
			body.Metadata[tk] = tv
		}
	}
	{
		var zero string
		if body.Locale == zero {
			body.Locale = "en"
		}
	}
	return body
}

// NewGetResponseBody builds the HTTP response body from the result of the
// "get" endpoint of the "users" service.
func NewGetResponseBody(res *designtypes.User) *GetResponseBody {
	body := &GetResponseBody{
		Active:          res.Active,
		EmailVerified:   res.EmailVerified,
		PhoneVerified:   res.PhoneVerified,
		ProfileImageURL: res.ProfileImageURL,
		FirstName:       res.FirstName,
		LastName:        res.LastName,
		PhoneNumber:     res.PhoneNumber,
		Locale:          res.Locale,
		Email:           res.Email,
	}
	if res.Metadata != nil {
		body.Metadata = make(map[string]any, len(res.Metadata))
		for key, val := range res.Metadata {
			tk := key
			tv := val
			body.Metadata[tk] = tv
		}
	}
	{
		var zero string
		if body.Locale == zero {
			body.Locale = "en"
		}
	}
	return body
}

// NewUpdateResponseBody builds the HTTP response body from the result of the
// "update" endpoint of the "users" service.
func NewUpdateResponseBody(res *designtypes.User) *UpdateResponseBody {
	body := &UpdateResponseBody{
		Active:          res.Active,
		EmailVerified:   res.EmailVerified,
		PhoneVerified:   res.PhoneVerified,
		ProfileImageURL: res.ProfileImageURL,
		FirstName:       res.FirstName,
		LastName:        res.LastName,
		PhoneNumber:     res.PhoneNumber,
		Locale:          res.Locale,
		Email:           res.Email,
	}
	if res.Metadata != nil {
		body.Metadata = make(map[string]any, len(res.Metadata))
		for key, val := range res.Metadata {
			tk := key
			tv := val
			body.Metadata[tk] = tv
		}
	}
	{
		var zero string
		if body.Locale == zero {
			body.Locale = "en"
		}
	}
	return body
}

// NewUpdateMeResponseBody builds the HTTP response body from the result of the
// "update_me" endpoint of the "users" service.
func NewUpdateMeResponseBody(res *designtypes.User) *UpdateMeResponseBody {
	body := &UpdateMeResponseBody{
		Active:          res.Active,
		EmailVerified:   res.EmailVerified,
		PhoneVerified:   res.PhoneVerified,
		ProfileImageURL: res.ProfileImageURL,
		FirstName:       res.FirstName,
		LastName:        res.LastName,
		PhoneNumber:     res.PhoneNumber,
		Locale:          res.Locale,
		Email:           res.Email,
	}
	if res.Metadata != nil {
		body.Metadata = make(map[string]any, len(res.Metadata))
		for key, val := range res.Metadata {
			tk := key
			tv := val
			body.Metadata[tk] = tv
		}
	}
	{
		var zero string
		if body.Locale == zero {
			body.Locale = "en"
		}
	}
	return body
}

// NewUpdatePasswordResponseBody builds the HTTP response body from the result
// of the "update_password" endpoint of the "users" service.
func NewUpdatePasswordResponseBody(res *users.UpdatePasswordResult) *UpdatePasswordResponseBody {
	body := &UpdatePasswordResponseBody{
		Message: res.Message,
	}
	return body
}

// NewGetSessionsResponseBody builds the HTTP response body from the result of
// the "get_sessions" endpoint of the "users" service.
func NewGetSessionsResponseBody(res *users.GetUserSessionResponse) *GetSessionsResponseBody {
	body := &GetSessionsResponseBody{}
	if res.Data != nil {
		body.Data = make([]*SessionResponseBody, len(res.Data))
		for i, val := range res.Data {
			body.Data[i] = marshalDesigntypesSessionToSessionResponseBody(val)
		}
	} else {
		body.Data = []*SessionResponseBody{}
	}
	if res.Pagination != nil {
		body.Pagination = marshalDesigntypesPaginationToPaginationResponseBody(res.Pagination)
	}
	return body
}

// NewGetOrganizationsResponseBody builds the HTTP response body from the
// result of the "get_organizations" endpoint of the "users" service.
func NewGetOrganizationsResponseBody(res *users.GetOrganizationsResult) *GetOrganizationsResponseBody {
	body := &GetOrganizationsResponseBody{}
	if res.Organizations != nil {
		body.Organizations = make([]*OrganizationResponseBody, len(res.Organizations))
		for i, val := range res.Organizations {
			body.Organizations[i] = marshalDesigntypesOrganizationToOrganizationResponseBody(val)
		}
	} else {
		body.Organizations = []*OrganizationResponseBody{}
	}
	return body
}

// NewListBadRequestResponseBody builds the HTTP response body from the result
// of the "list" endpoint of the "users" service.
func NewListBadRequestResponseBody(res *users.BadRequestError) *ListBadRequestResponseBody {
	body := &ListBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewListConflictResponseBody builds the HTTP response body from the result of
// the "list" endpoint of the "users" service.
func NewListConflictResponseBody(res *users.ConflictError) *ListConflictResponseBody {
	body := &ListConflictResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewListForbiddenResponseBody builds the HTTP response body from the result
// of the "list" endpoint of the "users" service.
func NewListForbiddenResponseBody(res *users.ForbiddenError) *ListForbiddenResponseBody {
	body := &ListForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewListInternalErrorResponseBody builds the HTTP response body from the
// result of the "list" endpoint of the "users" service.
func NewListInternalErrorResponseBody(res *users.InternalServerError) *ListInternalErrorResponseBody {
	body := &ListInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewListNotFoundResponseBody builds the HTTP response body from the result of
// the "list" endpoint of the "users" service.
func NewListNotFoundResponseBody(res *users.NotFoundError) *ListNotFoundResponseBody {
	body := &ListNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewListUnauthorizedResponseBody builds the HTTP response body from the
// result of the "list" endpoint of the "users" service.
func NewListUnauthorizedResponseBody(res *users.UnauthorizedError) *ListUnauthorizedResponseBody {
	body := &ListUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewCreateBadRequestResponseBody builds the HTTP response body from the
// result of the "create" endpoint of the "users" service.
func NewCreateBadRequestResponseBody(res *users.BadRequestError) *CreateBadRequestResponseBody {
	body := &CreateBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewCreateConflictResponseBody builds the HTTP response body from the result
// of the "create" endpoint of the "users" service.
func NewCreateConflictResponseBody(res *users.ConflictError) *CreateConflictResponseBody {
	body := &CreateConflictResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewCreateForbiddenResponseBody builds the HTTP response body from the result
// of the "create" endpoint of the "users" service.
func NewCreateForbiddenResponseBody(res *users.ForbiddenError) *CreateForbiddenResponseBody {
	body := &CreateForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewCreateInternalErrorResponseBody builds the HTTP response body from the
// result of the "create" endpoint of the "users" service.
func NewCreateInternalErrorResponseBody(res *users.InternalServerError) *CreateInternalErrorResponseBody {
	body := &CreateInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewCreateNotFoundResponseBody builds the HTTP response body from the result
// of the "create" endpoint of the "users" service.
func NewCreateNotFoundResponseBody(res *users.NotFoundError) *CreateNotFoundResponseBody {
	body := &CreateNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewCreateUnauthorizedResponseBody builds the HTTP response body from the
// result of the "create" endpoint of the "users" service.
func NewCreateUnauthorizedResponseBody(res *users.UnauthorizedError) *CreateUnauthorizedResponseBody {
	body := &CreateUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewGetBadRequestResponseBody builds the HTTP response body from the result
// of the "get" endpoint of the "users" service.
func NewGetBadRequestResponseBody(res *users.BadRequestError) *GetBadRequestResponseBody {
	body := &GetBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewGetConflictResponseBody builds the HTTP response body from the result of
// the "get" endpoint of the "users" service.
func NewGetConflictResponseBody(res *users.ConflictError) *GetConflictResponseBody {
	body := &GetConflictResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewGetForbiddenResponseBody builds the HTTP response body from the result of
// the "get" endpoint of the "users" service.
func NewGetForbiddenResponseBody(res *users.ForbiddenError) *GetForbiddenResponseBody {
	body := &GetForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewGetInternalErrorResponseBody builds the HTTP response body from the
// result of the "get" endpoint of the "users" service.
func NewGetInternalErrorResponseBody(res *users.InternalServerError) *GetInternalErrorResponseBody {
	body := &GetInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewGetNotFoundResponseBody builds the HTTP response body from the result of
// the "get" endpoint of the "users" service.
func NewGetNotFoundResponseBody(res *users.NotFoundError) *GetNotFoundResponseBody {
	body := &GetNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewGetUnauthorizedResponseBody builds the HTTP response body from the result
// of the "get" endpoint of the "users" service.
func NewGetUnauthorizedResponseBody(res *users.UnauthorizedError) *GetUnauthorizedResponseBody {
	body := &GetUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewUpdateBadRequestResponseBody builds the HTTP response body from the
// result of the "update" endpoint of the "users" service.
func NewUpdateBadRequestResponseBody(res *users.BadRequestError) *UpdateBadRequestResponseBody {
	body := &UpdateBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewUpdateConflictResponseBody builds the HTTP response body from the result
// of the "update" endpoint of the "users" service.
func NewUpdateConflictResponseBody(res *users.ConflictError) *UpdateConflictResponseBody {
	body := &UpdateConflictResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewUpdateForbiddenResponseBody builds the HTTP response body from the result
// of the "update" endpoint of the "users" service.
func NewUpdateForbiddenResponseBody(res *users.ForbiddenError) *UpdateForbiddenResponseBody {
	body := &UpdateForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewUpdateInternalErrorResponseBody builds the HTTP response body from the
// result of the "update" endpoint of the "users" service.
func NewUpdateInternalErrorResponseBody(res *users.InternalServerError) *UpdateInternalErrorResponseBody {
	body := &UpdateInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewUpdateNotFoundResponseBody builds the HTTP response body from the result
// of the "update" endpoint of the "users" service.
func NewUpdateNotFoundResponseBody(res *users.NotFoundError) *UpdateNotFoundResponseBody {
	body := &UpdateNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewUpdateUnauthorizedResponseBody builds the HTTP response body from the
// result of the "update" endpoint of the "users" service.
func NewUpdateUnauthorizedResponseBody(res *users.UnauthorizedError) *UpdateUnauthorizedResponseBody {
	body := &UpdateUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewDeleteBadRequestResponseBody builds the HTTP response body from the
// result of the "delete" endpoint of the "users" service.
func NewDeleteBadRequestResponseBody(res *users.BadRequestError) *DeleteBadRequestResponseBody {
	body := &DeleteBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewDeleteConflictResponseBody builds the HTTP response body from the result
// of the "delete" endpoint of the "users" service.
func NewDeleteConflictResponseBody(res *users.ConflictError) *DeleteConflictResponseBody {
	body := &DeleteConflictResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewDeleteForbiddenResponseBody builds the HTTP response body from the result
// of the "delete" endpoint of the "users" service.
func NewDeleteForbiddenResponseBody(res *users.ForbiddenError) *DeleteForbiddenResponseBody {
	body := &DeleteForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewDeleteInternalErrorResponseBody builds the HTTP response body from the
// result of the "delete" endpoint of the "users" service.
func NewDeleteInternalErrorResponseBody(res *users.InternalServerError) *DeleteInternalErrorResponseBody {
	body := &DeleteInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewDeleteNotFoundResponseBody builds the HTTP response body from the result
// of the "delete" endpoint of the "users" service.
func NewDeleteNotFoundResponseBody(res *users.NotFoundError) *DeleteNotFoundResponseBody {
	body := &DeleteNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewDeleteUnauthorizedResponseBody builds the HTTP response body from the
// result of the "delete" endpoint of the "users" service.
func NewDeleteUnauthorizedResponseBody(res *users.UnauthorizedError) *DeleteUnauthorizedResponseBody {
	body := &DeleteUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewUpdateMeBadRequestResponseBody builds the HTTP response body from the
// result of the "update_me" endpoint of the "users" service.
func NewUpdateMeBadRequestResponseBody(res *users.BadRequestError) *UpdateMeBadRequestResponseBody {
	body := &UpdateMeBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewUpdateMeConflictResponseBody builds the HTTP response body from the
// result of the "update_me" endpoint of the "users" service.
func NewUpdateMeConflictResponseBody(res *users.ConflictError) *UpdateMeConflictResponseBody {
	body := &UpdateMeConflictResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewUpdateMeForbiddenResponseBody builds the HTTP response body from the
// result of the "update_me" endpoint of the "users" service.
func NewUpdateMeForbiddenResponseBody(res *users.ForbiddenError) *UpdateMeForbiddenResponseBody {
	body := &UpdateMeForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewUpdateMeInternalErrorResponseBody builds the HTTP response body from the
// result of the "update_me" endpoint of the "users" service.
func NewUpdateMeInternalErrorResponseBody(res *users.InternalServerError) *UpdateMeInternalErrorResponseBody {
	body := &UpdateMeInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewUpdateMeNotFoundResponseBody builds the HTTP response body from the
// result of the "update_me" endpoint of the "users" service.
func NewUpdateMeNotFoundResponseBody(res *users.NotFoundError) *UpdateMeNotFoundResponseBody {
	body := &UpdateMeNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewUpdateMeUnauthorizedResponseBody builds the HTTP response body from the
// result of the "update_me" endpoint of the "users" service.
func NewUpdateMeUnauthorizedResponseBody(res *users.UnauthorizedError) *UpdateMeUnauthorizedResponseBody {
	body := &UpdateMeUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewUpdatePasswordBadRequestResponseBody builds the HTTP response body from
// the result of the "update_password" endpoint of the "users" service.
func NewUpdatePasswordBadRequestResponseBody(res *users.BadRequestError) *UpdatePasswordBadRequestResponseBody {
	body := &UpdatePasswordBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewUpdatePasswordConflictResponseBody builds the HTTP response body from the
// result of the "update_password" endpoint of the "users" service.
func NewUpdatePasswordConflictResponseBody(res *users.ConflictError) *UpdatePasswordConflictResponseBody {
	body := &UpdatePasswordConflictResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewUpdatePasswordForbiddenResponseBody builds the HTTP response body from
// the result of the "update_password" endpoint of the "users" service.
func NewUpdatePasswordForbiddenResponseBody(res *users.ForbiddenError) *UpdatePasswordForbiddenResponseBody {
	body := &UpdatePasswordForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewUpdatePasswordInternalErrorResponseBody builds the HTTP response body
// from the result of the "update_password" endpoint of the "users" service.
func NewUpdatePasswordInternalErrorResponseBody(res *users.InternalServerError) *UpdatePasswordInternalErrorResponseBody {
	body := &UpdatePasswordInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewUpdatePasswordNotFoundResponseBody builds the HTTP response body from the
// result of the "update_password" endpoint of the "users" service.
func NewUpdatePasswordNotFoundResponseBody(res *users.NotFoundError) *UpdatePasswordNotFoundResponseBody {
	body := &UpdatePasswordNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewUpdatePasswordUnauthorizedResponseBody builds the HTTP response body from
// the result of the "update_password" endpoint of the "users" service.
func NewUpdatePasswordUnauthorizedResponseBody(res *users.UnauthorizedError) *UpdatePasswordUnauthorizedResponseBody {
	body := &UpdatePasswordUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewGetSessionsBadRequestResponseBody builds the HTTP response body from the
// result of the "get_sessions" endpoint of the "users" service.
func NewGetSessionsBadRequestResponseBody(res *users.BadRequestError) *GetSessionsBadRequestResponseBody {
	body := &GetSessionsBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewGetSessionsConflictResponseBody builds the HTTP response body from the
// result of the "get_sessions" endpoint of the "users" service.
func NewGetSessionsConflictResponseBody(res *users.ConflictError) *GetSessionsConflictResponseBody {
	body := &GetSessionsConflictResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewGetSessionsForbiddenResponseBody builds the HTTP response body from the
// result of the "get_sessions" endpoint of the "users" service.
func NewGetSessionsForbiddenResponseBody(res *users.ForbiddenError) *GetSessionsForbiddenResponseBody {
	body := &GetSessionsForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewGetSessionsInternalErrorResponseBody builds the HTTP response body from
// the result of the "get_sessions" endpoint of the "users" service.
func NewGetSessionsInternalErrorResponseBody(res *users.InternalServerError) *GetSessionsInternalErrorResponseBody {
	body := &GetSessionsInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewGetSessionsNotFoundResponseBody builds the HTTP response body from the
// result of the "get_sessions" endpoint of the "users" service.
func NewGetSessionsNotFoundResponseBody(res *users.NotFoundError) *GetSessionsNotFoundResponseBody {
	body := &GetSessionsNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewGetSessionsUnauthorizedResponseBody builds the HTTP response body from
// the result of the "get_sessions" endpoint of the "users" service.
func NewGetSessionsUnauthorizedResponseBody(res *users.UnauthorizedError) *GetSessionsUnauthorizedResponseBody {
	body := &GetSessionsUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewDeleteSessionBadRequestResponseBody builds the HTTP response body from
// the result of the "delete_session" endpoint of the "users" service.
func NewDeleteSessionBadRequestResponseBody(res *users.BadRequestError) *DeleteSessionBadRequestResponseBody {
	body := &DeleteSessionBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewDeleteSessionConflictResponseBody builds the HTTP response body from the
// result of the "delete_session" endpoint of the "users" service.
func NewDeleteSessionConflictResponseBody(res *users.ConflictError) *DeleteSessionConflictResponseBody {
	body := &DeleteSessionConflictResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewDeleteSessionForbiddenResponseBody builds the HTTP response body from the
// result of the "delete_session" endpoint of the "users" service.
func NewDeleteSessionForbiddenResponseBody(res *users.ForbiddenError) *DeleteSessionForbiddenResponseBody {
	body := &DeleteSessionForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewDeleteSessionInternalErrorResponseBody builds the HTTP response body from
// the result of the "delete_session" endpoint of the "users" service.
func NewDeleteSessionInternalErrorResponseBody(res *users.InternalServerError) *DeleteSessionInternalErrorResponseBody {
	body := &DeleteSessionInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewDeleteSessionNotFoundResponseBody builds the HTTP response body from the
// result of the "delete_session" endpoint of the "users" service.
func NewDeleteSessionNotFoundResponseBody(res *users.NotFoundError) *DeleteSessionNotFoundResponseBody {
	body := &DeleteSessionNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewDeleteSessionUnauthorizedResponseBody builds the HTTP response body from
// the result of the "delete_session" endpoint of the "users" service.
func NewDeleteSessionUnauthorizedResponseBody(res *users.UnauthorizedError) *DeleteSessionUnauthorizedResponseBody {
	body := &DeleteSessionUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewGetOrganizationsBadRequestResponseBody builds the HTTP response body from
// the result of the "get_organizations" endpoint of the "users" service.
func NewGetOrganizationsBadRequestResponseBody(res *users.BadRequestError) *GetOrganizationsBadRequestResponseBody {
	body := &GetOrganizationsBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewGetOrganizationsConflictResponseBody builds the HTTP response body from
// the result of the "get_organizations" endpoint of the "users" service.
func NewGetOrganizationsConflictResponseBody(res *users.ConflictError) *GetOrganizationsConflictResponseBody {
	body := &GetOrganizationsConflictResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewGetOrganizationsForbiddenResponseBody builds the HTTP response body from
// the result of the "get_organizations" endpoint of the "users" service.
func NewGetOrganizationsForbiddenResponseBody(res *users.ForbiddenError) *GetOrganizationsForbiddenResponseBody {
	body := &GetOrganizationsForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewGetOrganizationsInternalErrorResponseBody builds the HTTP response body
// from the result of the "get_organizations" endpoint of the "users" service.
func NewGetOrganizationsInternalErrorResponseBody(res *users.InternalServerError) *GetOrganizationsInternalErrorResponseBody {
	body := &GetOrganizationsInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewGetOrganizationsNotFoundResponseBody builds the HTTP response body from
// the result of the "get_organizations" endpoint of the "users" service.
func NewGetOrganizationsNotFoundResponseBody(res *users.NotFoundError) *GetOrganizationsNotFoundResponseBody {
	body := &GetOrganizationsNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewGetOrganizationsUnauthorizedResponseBody builds the HTTP response body
// from the result of the "get_organizations" endpoint of the "users" service.
func NewGetOrganizationsUnauthorizedResponseBody(res *users.UnauthorizedError) *GetOrganizationsUnauthorizedResponseBody {
	body := &GetOrganizationsUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewListPayload builds a users service list endpoint payload.
func NewListPayload(offset int, limit int, search *string, organizationID *string, jwt *string) *users.ListPayload {
	v := &users.ListPayload{}
	v.Offset = offset
	v.Limit = limit
	v.Search = search
	v.OrganizationID = organizationID
	v.JWT = jwt

	return v
}

// NewCreatePayload builds a users service create endpoint payload.
func NewCreatePayload(body *CreateRequestBody, jwt *string) *users.CreatePayload {
	v := &users.CreatePayload{
		Password:        body.Password,
		OrganizationID:  body.OrganizationID,
		FirstName:       body.FirstName,
		LastName:        body.LastName,
		PhoneNumber:     body.PhoneNumber,
		ProfileImageURL: body.ProfileImageURL,
		Email:           *body.Email,
	}
	if body.Locale != nil {
		v.Locale = *body.Locale
	}
	if body.Metadata != nil {
		v.Metadata = make(map[string]any, len(body.Metadata))
		for key, val := range body.Metadata {
			tk := key
			tv := val
			v.Metadata[tk] = tv
		}
	}
	if body.Locale == nil {
		v.Locale = "en"
	}
	v.JWT = jwt

	return v
}

// NewGetPayload builds a users service get endpoint payload.
func NewGetPayload(id string, jwt *string) *users.GetPayload {
	v := &users.GetPayload{}
	v.ID = id
	v.JWT = jwt

	return v
}

// NewUpdatePayload builds a users service update endpoint payload.
func NewUpdatePayload(body *UpdateRequestBody, id string, jwt *string) *users.UpdatePayload {
	v := &users.UpdatePayload{}
	v.User = unmarshalUpdateUserRequestRequestBodyToDesigntypesUpdateUserRequest(body.User)
	v.ID = id
	v.JWT = jwt

	return v
}

// NewDeletePayload builds a users service delete endpoint payload.
func NewDeletePayload(id string, jwt *string) *users.DeletePayload {
	v := &users.DeletePayload{}
	v.ID = id
	v.JWT = jwt

	return v
}

// NewUpdateMePayload builds a users service update_me endpoint payload.
func NewUpdateMePayload(body *UpdateMeRequestBody, jwt *string) *users.UpdateMePayload {
	v := &users.UpdateMePayload{
		PhoneNumber:           body.PhoneNumber,
		FirstName:             body.FirstName,
		LastName:              body.LastName,
		ProfileImageURL:       body.ProfileImageURL,
		Locale:                body.Locale,
		Active:                body.Active,
		PrimaryOrganizationID: body.PrimaryOrganizationID,
	}
	if body.Metadata != nil {
		v.Metadata = make(map[string]any, len(body.Metadata))
		for key, val := range body.Metadata {
			tk := key
			tv := val
			v.Metadata[tk] = tv
		}
	}
	v.JWT = jwt

	return v
}

// NewUpdatePasswordPayload builds a users service update_password endpoint
// payload.
func NewUpdatePasswordPayload(body *UpdatePasswordRequestBody, jwt *string) *users.UpdatePasswordPayload {
	v := &users.UpdatePasswordPayload{
		CurrentPassword: *body.CurrentPassword,
		NewPassword:     *body.NewPassword,
	}
	v.JWT = jwt

	return v
}

// NewGetSessionsPayload builds a users service get_sessions endpoint payload.
func NewGetSessionsPayload(jwt *string) *users.GetSessionsPayload {
	v := &users.GetSessionsPayload{}
	v.JWT = jwt

	return v
}

// NewDeleteSessionPayload builds a users service delete_session endpoint
// payload.
func NewDeleteSessionPayload(sessionID string, jwt *string) *users.DeleteSessionPayload {
	v := &users.DeleteSessionPayload{}
	v.SessionID = sessionID
	v.JWT = jwt

	return v
}

// NewGetOrganizationsPayload builds a users service get_organizations endpoint
// payload.
func NewGetOrganizationsPayload(id string, jwt *string) *users.GetOrganizationsPayload {
	v := &users.GetOrganizationsPayload{}
	v.ID = id
	v.JWT = jwt

	return v
}

// ValidateCreateRequestBody runs the validations defined on CreateRequestBody
func ValidateCreateRequestBody(body *CreateRequestBody) (err error) {
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Password != nil {
		if utf8.RuneCountInString(*body.Password) < 8 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.password", *body.Password, utf8.RuneCountInString(*body.Password), 8, true))
		}
	}
	if body.Email != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", *body.Email, goa.FormatEmail))
	}
	return
}

// ValidateUpdateRequestBody runs the validations defined on UpdateRequestBody
func ValidateUpdateRequestBody(body *UpdateRequestBody) (err error) {
	if body.User == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("user", "body"))
	}
	return
}

// ValidateUpdatePasswordRequestBody runs the validations defined on
// update_password_request_body
func ValidateUpdatePasswordRequestBody(body *UpdatePasswordRequestBody) (err error) {
	if body.CurrentPassword == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("current_password", "body"))
	}
	if body.NewPassword == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("new_password", "body"))
	}
	if body.NewPassword != nil {
		if utf8.RuneCountInString(*body.NewPassword) < 8 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.new_password", *body.NewPassword, utf8.RuneCountInString(*body.NewPassword), 8, true))
		}
	}
	return
}
