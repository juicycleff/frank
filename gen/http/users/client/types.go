// Code generated by goa v3.20.0, DO NOT EDIT.
//
// users HTTP client types
//
// Command:
// $ goa gen github.com/juicycleff/frank/design -o .

package client

import (
	designtypes "github.com/juicycleff/frank/gen/designtypes"
	users "github.com/juicycleff/frank/gen/users"
	goa "goa.design/goa/v3/pkg"
)

// CreateRequestBody is the type of the "users" service "create" endpoint HTTP
// request body.
type CreateRequestBody struct {
	// User password
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
	// Organization ID to add user to
	OrganizationID *string `form:"organization_id,omitempty" json:"organization_id,omitempty" xml:"organization_id,omitempty"`
	// User first name
	FirstName *string `json:"first_name,firstName"`
	// User last name
	LastName *string `json:"last_name,lastName"`
	// ID of the entity
	ID *string `json:"id"`
	// User phone number
	PhoneNumber *string `json:"phone_number,phoneNumber"`
	// URL to user's profile image
	ProfileImageURL *string `json:"profile_image_url,profileImageUrl"`
	// User metadata
	Metadata map[string]any `json:"metadata"`
	// User locale
	Locale string `json:"locale"`
	// Email address
	Email string `json:"email"`
}

// UpdateRequestBody is the type of the "users" service "update" endpoint HTTP
// request body.
type UpdateRequestBody struct {
	User *UpdateUserRequestRequestBody `form:"user" json:"user" xml:"user"`
}

// UpdateMeRequestBody is the type of the "users" service "update_me" endpoint
// HTTP request body.
type UpdateMeRequestBody struct {
	// User phone number
	PhoneNumber *string `form:"phone_number,omitempty" json:"phone_number,omitempty" xml:"phone_number,omitempty"`
	// User first name
	FirstName *string `form:"first_name,omitempty" json:"first_name,omitempty" xml:"first_name,omitempty"`
	// User last name
	LastName *string `form:"last_name,omitempty" json:"last_name,omitempty" xml:"last_name,omitempty"`
	// User metadata
	Metadata map[string]any `form:"metadata,omitempty" json:"metadata,omitempty" xml:"metadata,omitempty"`
	// Profile image URL
	ProfileImageURL *string `form:"profile_image_url,omitempty" json:"profile_image_url,omitempty" xml:"profile_image_url,omitempty"`
	// User locale
	Locale *string `form:"locale,omitempty" json:"locale,omitempty" xml:"locale,omitempty"`
	// Whether user is active
	Active *bool `form:"active,omitempty" json:"active,omitempty" xml:"active,omitempty"`
	// Primary organization ID
	PrimaryOrganizationID *string `form:"primary_organization_id,omitempty" json:"primary_organization_id,omitempty" xml:"primary_organization_id,omitempty"`
}

// UpdatePasswordRequestBody is the type of the "users" service
// "update_password" endpoint HTTP request body.
type UpdatePasswordRequestBody struct {
	// Current password
	CurrentPassword string `form:"current_password" json:"current_password" xml:"current_password"`
	// New password
	NewPassword string `form:"new_password" json:"new_password" xml:"new_password"`
}

// ListResponseBody is the type of the "users" service "list" endpoint HTTP
// response body.
type ListResponseBody struct {
	Data       []*UserResponseBody     `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	Pagination *PaginationResponseBody `form:"pagination,omitempty" json:"pagination,omitempty" xml:"pagination,omitempty"`
}

// CreateResponseBody is the type of the "users" service "create" endpoint HTTP
// response body.
type CreateResponseBody struct {
	// Whether account is active
	Active *bool `form:"active,omitempty" json:"active,omitempty" xml:"active,omitempty"`
	// Whether email is verified
	EmailVerified *bool `json:"email_verified,emailVerified"`
	// Whether phone is verified
	PhoneVerified *bool `json:"phone_verified,phoneVerified"`
	// URL to user's profile image
	ProfileImageURL *string `json:"profile_image_url,profileImageUrl"`
	// User first name
	FirstName *string `json:"first_name,firstName"`
	// User last name
	LastName *string `json:"last_name,lastName"`
	// ID of the entity
	ID *string `json:"id"`
	// User phone number
	PhoneNumber *string `json:"phone_number,phoneNumber"`
	// User metadata
	Metadata map[string]any `json:"metadata"`
	// User locale
	Locale *string `json:"locale"`
	// Email address
	Email *string `json:"email"`
}

// GetResponseBody is the type of the "users" service "get" endpoint HTTP
// response body.
type GetResponseBody struct {
	// Whether account is active
	Active *bool `form:"active,omitempty" json:"active,omitempty" xml:"active,omitempty"`
	// Whether email is verified
	EmailVerified *bool `json:"email_verified,emailVerified"`
	// Whether phone is verified
	PhoneVerified *bool `json:"phone_verified,phoneVerified"`
	// URL to user's profile image
	ProfileImageURL *string `json:"profile_image_url,profileImageUrl"`
	// User first name
	FirstName *string `json:"first_name,firstName"`
	// User last name
	LastName *string `json:"last_name,lastName"`
	// ID of the entity
	ID *string `json:"id"`
	// User phone number
	PhoneNumber *string `json:"phone_number,phoneNumber"`
	// User metadata
	Metadata map[string]any `json:"metadata"`
	// User locale
	Locale *string `json:"locale"`
	// Email address
	Email *string `json:"email"`
}

// UpdateResponseBody is the type of the "users" service "update" endpoint HTTP
// response body.
type UpdateResponseBody struct {
	// Whether account is active
	Active *bool `form:"active,omitempty" json:"active,omitempty" xml:"active,omitempty"`
	// Whether email is verified
	EmailVerified *bool `json:"email_verified,emailVerified"`
	// Whether phone is verified
	PhoneVerified *bool `json:"phone_verified,phoneVerified"`
	// URL to user's profile image
	ProfileImageURL *string `json:"profile_image_url,profileImageUrl"`
	// User first name
	FirstName *string `json:"first_name,firstName"`
	// User last name
	LastName *string `json:"last_name,lastName"`
	// ID of the entity
	ID *string `json:"id"`
	// User phone number
	PhoneNumber *string `json:"phone_number,phoneNumber"`
	// User metadata
	Metadata map[string]any `json:"metadata"`
	// User locale
	Locale *string `json:"locale"`
	// Email address
	Email *string `json:"email"`
}

// UpdateMeResponseBody is the type of the "users" service "update_me" endpoint
// HTTP response body.
type UpdateMeResponseBody struct {
	// Whether account is active
	Active *bool `form:"active,omitempty" json:"active,omitempty" xml:"active,omitempty"`
	// Whether email is verified
	EmailVerified *bool `json:"email_verified,emailVerified"`
	// Whether phone is verified
	PhoneVerified *bool `json:"phone_verified,phoneVerified"`
	// URL to user's profile image
	ProfileImageURL *string `json:"profile_image_url,profileImageUrl"`
	// User first name
	FirstName *string `json:"first_name,firstName"`
	// User last name
	LastName *string `json:"last_name,lastName"`
	// ID of the entity
	ID *string `json:"id"`
	// User phone number
	PhoneNumber *string `json:"phone_number,phoneNumber"`
	// User metadata
	Metadata map[string]any `json:"metadata"`
	// User locale
	Locale *string `json:"locale"`
	// Email address
	Email *string `json:"email"`
}

// UpdatePasswordResponseBody is the type of the "users" service
// "update_password" endpoint HTTP response body.
type UpdatePasswordResponseBody struct {
	// Success message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetSessionsResponseBody is the type of the "users" service "get_sessions"
// endpoint HTTP response body.
type GetSessionsResponseBody struct {
	// User sessions
	Data []*SessionResponseBody `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	// Pagination params
	Pagination *PaginationResponseBody `json:"pagination"`
}

// GetOrganizationsResponseBody is the type of the "users" service
// "get_organizations" endpoint HTTP response body.
type GetOrganizationsResponseBody struct {
	Organizations []*OrganizationResponseBody `form:"organizations,omitempty" json:"organizations,omitempty" xml:"organizations,omitempty"`
}

// ListBadRequestResponseBody is the type of the "users" service "list"
// endpoint HTTP response body for the "bad_request" error.
type ListBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListConflictResponseBody is the type of the "users" service "list" endpoint
// HTTP response body for the "conflict" error.
type ListConflictResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListForbiddenResponseBody is the type of the "users" service "list" endpoint
// HTTP response body for the "forbidden" error.
type ListForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListInternalErrorResponseBody is the type of the "users" service "list"
// endpoint HTTP response body for the "internal_error" error.
type ListInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListNotFoundResponseBody is the type of the "users" service "list" endpoint
// HTTP response body for the "not_found" error.
type ListNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListUnauthorizedResponseBody is the type of the "users" service "list"
// endpoint HTTP response body for the "unauthorized" error.
type ListUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreateBadRequestResponseBody is the type of the "users" service "create"
// endpoint HTTP response body for the "bad_request" error.
type CreateBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreateConflictResponseBody is the type of the "users" service "create"
// endpoint HTTP response body for the "conflict" error.
type CreateConflictResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreateForbiddenResponseBody is the type of the "users" service "create"
// endpoint HTTP response body for the "forbidden" error.
type CreateForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreateInternalErrorResponseBody is the type of the "users" service "create"
// endpoint HTTP response body for the "internal_error" error.
type CreateInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreateNotFoundResponseBody is the type of the "users" service "create"
// endpoint HTTP response body for the "not_found" error.
type CreateNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreateUnauthorizedResponseBody is the type of the "users" service "create"
// endpoint HTTP response body for the "unauthorized" error.
type CreateUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetBadRequestResponseBody is the type of the "users" service "get" endpoint
// HTTP response body for the "bad_request" error.
type GetBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetConflictResponseBody is the type of the "users" service "get" endpoint
// HTTP response body for the "conflict" error.
type GetConflictResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetForbiddenResponseBody is the type of the "users" service "get" endpoint
// HTTP response body for the "forbidden" error.
type GetForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetInternalErrorResponseBody is the type of the "users" service "get"
// endpoint HTTP response body for the "internal_error" error.
type GetInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetNotFoundResponseBody is the type of the "users" service "get" endpoint
// HTTP response body for the "not_found" error.
type GetNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetUnauthorizedResponseBody is the type of the "users" service "get"
// endpoint HTTP response body for the "unauthorized" error.
type GetUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateBadRequestResponseBody is the type of the "users" service "update"
// endpoint HTTP response body for the "bad_request" error.
type UpdateBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateConflictResponseBody is the type of the "users" service "update"
// endpoint HTTP response body for the "conflict" error.
type UpdateConflictResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateForbiddenResponseBody is the type of the "users" service "update"
// endpoint HTTP response body for the "forbidden" error.
type UpdateForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateInternalErrorResponseBody is the type of the "users" service "update"
// endpoint HTTP response body for the "internal_error" error.
type UpdateInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateNotFoundResponseBody is the type of the "users" service "update"
// endpoint HTTP response body for the "not_found" error.
type UpdateNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateUnauthorizedResponseBody is the type of the "users" service "update"
// endpoint HTTP response body for the "unauthorized" error.
type UpdateUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteBadRequestResponseBody is the type of the "users" service "delete"
// endpoint HTTP response body for the "bad_request" error.
type DeleteBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteConflictResponseBody is the type of the "users" service "delete"
// endpoint HTTP response body for the "conflict" error.
type DeleteConflictResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteForbiddenResponseBody is the type of the "users" service "delete"
// endpoint HTTP response body for the "forbidden" error.
type DeleteForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteInternalErrorResponseBody is the type of the "users" service "delete"
// endpoint HTTP response body for the "internal_error" error.
type DeleteInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteNotFoundResponseBody is the type of the "users" service "delete"
// endpoint HTTP response body for the "not_found" error.
type DeleteNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteUnauthorizedResponseBody is the type of the "users" service "delete"
// endpoint HTTP response body for the "unauthorized" error.
type DeleteUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateMeBadRequestResponseBody is the type of the "users" service
// "update_me" endpoint HTTP response body for the "bad_request" error.
type UpdateMeBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateMeConflictResponseBody is the type of the "users" service "update_me"
// endpoint HTTP response body for the "conflict" error.
type UpdateMeConflictResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateMeForbiddenResponseBody is the type of the "users" service "update_me"
// endpoint HTTP response body for the "forbidden" error.
type UpdateMeForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateMeInternalErrorResponseBody is the type of the "users" service
// "update_me" endpoint HTTP response body for the "internal_error" error.
type UpdateMeInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateMeNotFoundResponseBody is the type of the "users" service "update_me"
// endpoint HTTP response body for the "not_found" error.
type UpdateMeNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateMeUnauthorizedResponseBody is the type of the "users" service
// "update_me" endpoint HTTP response body for the "unauthorized" error.
type UpdateMeUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdatePasswordBadRequestResponseBody is the type of the "users" service
// "update_password" endpoint HTTP response body for the "bad_request" error.
type UpdatePasswordBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdatePasswordConflictResponseBody is the type of the "users" service
// "update_password" endpoint HTTP response body for the "conflict" error.
type UpdatePasswordConflictResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdatePasswordForbiddenResponseBody is the type of the "users" service
// "update_password" endpoint HTTP response body for the "forbidden" error.
type UpdatePasswordForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdatePasswordInternalErrorResponseBody is the type of the "users" service
// "update_password" endpoint HTTP response body for the "internal_error" error.
type UpdatePasswordInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdatePasswordNotFoundResponseBody is the type of the "users" service
// "update_password" endpoint HTTP response body for the "not_found" error.
type UpdatePasswordNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdatePasswordUnauthorizedResponseBody is the type of the "users" service
// "update_password" endpoint HTTP response body for the "unauthorized" error.
type UpdatePasswordUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetSessionsBadRequestResponseBody is the type of the "users" service
// "get_sessions" endpoint HTTP response body for the "bad_request" error.
type GetSessionsBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetSessionsConflictResponseBody is the type of the "users" service
// "get_sessions" endpoint HTTP response body for the "conflict" error.
type GetSessionsConflictResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetSessionsForbiddenResponseBody is the type of the "users" service
// "get_sessions" endpoint HTTP response body for the "forbidden" error.
type GetSessionsForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetSessionsInternalErrorResponseBody is the type of the "users" service
// "get_sessions" endpoint HTTP response body for the "internal_error" error.
type GetSessionsInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetSessionsNotFoundResponseBody is the type of the "users" service
// "get_sessions" endpoint HTTP response body for the "not_found" error.
type GetSessionsNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetSessionsUnauthorizedResponseBody is the type of the "users" service
// "get_sessions" endpoint HTTP response body for the "unauthorized" error.
type GetSessionsUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteSessionBadRequestResponseBody is the type of the "users" service
// "delete_session" endpoint HTTP response body for the "bad_request" error.
type DeleteSessionBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteSessionConflictResponseBody is the type of the "users" service
// "delete_session" endpoint HTTP response body for the "conflict" error.
type DeleteSessionConflictResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteSessionForbiddenResponseBody is the type of the "users" service
// "delete_session" endpoint HTTP response body for the "forbidden" error.
type DeleteSessionForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteSessionInternalErrorResponseBody is the type of the "users" service
// "delete_session" endpoint HTTP response body for the "internal_error" error.
type DeleteSessionInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteSessionNotFoundResponseBody is the type of the "users" service
// "delete_session" endpoint HTTP response body for the "not_found" error.
type DeleteSessionNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteSessionUnauthorizedResponseBody is the type of the "users" service
// "delete_session" endpoint HTTP response body for the "unauthorized" error.
type DeleteSessionUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetOrganizationsBadRequestResponseBody is the type of the "users" service
// "get_organizations" endpoint HTTP response body for the "bad_request" error.
type GetOrganizationsBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetOrganizationsConflictResponseBody is the type of the "users" service
// "get_organizations" endpoint HTTP response body for the "conflict" error.
type GetOrganizationsConflictResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetOrganizationsForbiddenResponseBody is the type of the "users" service
// "get_organizations" endpoint HTTP response body for the "forbidden" error.
type GetOrganizationsForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetOrganizationsInternalErrorResponseBody is the type of the "users" service
// "get_organizations" endpoint HTTP response body for the "internal_error"
// error.
type GetOrganizationsInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetOrganizationsNotFoundResponseBody is the type of the "users" service
// "get_organizations" endpoint HTTP response body for the "not_found" error.
type GetOrganizationsNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetOrganizationsUnauthorizedResponseBody is the type of the "users" service
// "get_organizations" endpoint HTTP response body for the "unauthorized" error.
type GetOrganizationsUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UserResponseBody is used to define fields on response body types.
type UserResponseBody struct {
	// Whether account is active
	Active *bool `form:"active,omitempty" json:"active,omitempty" xml:"active,omitempty"`
	// Whether email is verified
	EmailVerified *bool `json:"email_verified,emailVerified"`
	// Whether phone is verified
	PhoneVerified *bool `json:"phone_verified,phoneVerified"`
	// URL to user's profile image
	ProfileImageURL *string `json:"profile_image_url,profileImageUrl"`
	// User first name
	FirstName *string `json:"first_name,firstName"`
	// User last name
	LastName *string `json:"last_name,lastName"`
	// ID of the entity
	ID *string `json:"id"`
	// User phone number
	PhoneNumber *string `json:"phone_number,phoneNumber"`
	// User metadata
	Metadata map[string]any `json:"metadata"`
	// User locale
	Locale *string `json:"locale"`
	// Email address
	Email *string `json:"email"`
}

// PaginationResponseBody is used to define fields on response body types.
type PaginationResponseBody struct {
	// Offset
	Offset *int `json:"offset"`
	// Limit
	Limit *int `json:"limit"`
	// Total number of items
	Total *int `json:"total"`
	// Total number of pages
	TotalPages *int `json:"total_pages,totalPages"`
	// Current page number
	CurrentPage *int `json:"current_page,currentPage"`
	// Has next page
	HasNext *bool `json:"has_next,hasNext"`
	// Has previous page
	HasPrevious *bool `json:"has_previous,hasPrevious"`
}

// UpdateUserRequestRequestBody is used to define fields on request body types.
type UpdateUserRequestRequestBody struct {
	// User phone number
	PhoneNumber *string `form:"phone_number,omitempty" json:"phone_number,omitempty" xml:"phone_number,omitempty"`
	// User first name
	FirstName *string `form:"first_name,omitempty" json:"first_name,omitempty" xml:"first_name,omitempty"`
	// User last name
	LastName *string `form:"last_name,omitempty" json:"last_name,omitempty" xml:"last_name,omitempty"`
	// User metadata
	Metadata map[string]any `form:"metadata,omitempty" json:"metadata,omitempty" xml:"metadata,omitempty"`
	// Profile image URL
	ProfileImageURL *string `form:"profile_image_url,omitempty" json:"profile_image_url,omitempty" xml:"profile_image_url,omitempty"`
	// User locale
	Locale *string `form:"locale,omitempty" json:"locale,omitempty" xml:"locale,omitempty"`
	// Whether user is active
	Active *bool `form:"active,omitempty" json:"active,omitempty" xml:"active,omitempty"`
	// Primary organization ID
	PrimaryOrganizationID *string `form:"primary_organization_id,omitempty" json:"primary_organization_id,omitempty" xml:"primary_organization_id,omitempty"`
}

// SessionResponseBody is used to define fields on response body types.
type SessionResponseBody struct {
	// User ID
	UserID *string `json:"user_id,userId"`
	// Device ID
	DeviceID *string `json:"device_id,deviceId"`
	// IP address
	IPAddress *string `json:"ip_address,ipAddress"`
	// User agent string
	UserAgent *string `json:"user_agent,userAgent"`
	// Location
	Location *string `json:"location"`
	// Session token
	Token *string `json:"token"`
	// Organization ID
	OrganizationID *string `json:"organization_id,organizationId"`
	// Session is active
	IsActive *bool `json:"is_active,isActive"`
	// Session metadata
	Metadata map[string]any `json:"metadata"`
	// Last activity timestamp
	LastActiveAt *string `json:"last_active_at,lastActiveAt"`
	// Expiry timestamp
	ExpiresAt *string `json:"expires_at,expiresAt"`
	// ID of the entity
	ID *string `json:"id"`
	// Created At
	CreatedAt *string `json:"created_at,createdAt"`
	// Updated At
	UpdatedAt *string `json:"updated_at,updatedAt"`
}

// OrganizationResponseBody is used to define fields on response body types.
type OrganizationResponseBody struct {
	// Organization ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Organization name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Organization slug
	Slug *string `form:"slug,omitempty" json:"slug,omitempty" xml:"slug,omitempty"`
	// Organization domain
	Domain *string `form:"domain,omitempty" json:"domain,omitempty" xml:"domain,omitempty"`
	// Organization logo URL
	LogoURL *string `form:"logo_url,omitempty" json:"logo_url,omitempty" xml:"logo_url,omitempty"`
	// Organization plan
	Plan *string `form:"plan,omitempty" json:"plan,omitempty" xml:"plan,omitempty"`
	// Whether organization is active
	Active *bool `form:"active,omitempty" json:"active,omitempty" xml:"active,omitempty"`
	// Organization metadata
	Metadata map[string]any `form:"metadata,omitempty" json:"metadata,omitempty" xml:"metadata,omitempty"`
	// Trial end date
	TrialEndsAt *string `form:"trial_ends_at,omitempty" json:"trial_ends_at,omitempty" xml:"trial_ends_at,omitempty"`
	// Whether trial has been used
	TrialUsed *bool `form:"trial_used,omitempty" json:"trial_used,omitempty" xml:"trial_used,omitempty"`
	// Creation timestamp
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// Last update timestamp
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
	// Organization settings
	Settings *OrganizationSettingsResponseBody `json:"settings"`
}

// OrganizationSettingsResponseBody is used to define fields on response body
// types.
type OrganizationSettingsResponseBody struct {
	// Signup fields
	SignupFields []*FormFieldResponseBody `json:"signupFields"`
	// Signup fields
	Verification []*OrganizationVerificationConfigResponseBody `json:"verification"`
}

// FormFieldResponseBody is used to define fields on response body types.
type FormFieldResponseBody struct {
	// Field identifier name
	Name *string `json:"name" mapstructure:"name" yaml:"name"`
	// Display label for the field
	Label *string `json:"label" mapstructure:"label" yaml:"label"`
	// Type of form field
	Type *string `json:"type" mapstructure:"type" yaml:"type"`
	// Placeholder text
	Placeholder *string `json:"placeholder" mapstructure:"placeholder" yaml:"placeholder"`
	// Whether the field is required
	Required *bool `json:"required" mapstructure:"required" yaml:"required"`
	// Indicates if field represents a first name
	IsFirstName *bool `json:"isFirstName" mapstructure:"isFirstName" yaml:"isFirstName"`
	// Indicates if field represents a last name
	IsLastName *bool `json:"isLastName" mapstructure:"isLastName" yaml:"isLastName"`
	// Indicates if field represents an email
	IsEmail *bool `json:"isEmail" mapstructure:"isEmail" yaml:"isEmail"`
	// Options for select fields
	Options []*FormFieldSelectOptionResponseBody `json:"options" mapstructure:"options" yaml:"options"`
	// Validation rules for the field
	Validation *FormFieldValidationRulesResponseBody `json:"validation" mapstructure:"validation" yaml:"validation"`
	// Row position identifier (string or number)
	Row any `json:"row" mapstructure:"row" yaml:"row"`
	// Width of the field
	Width *string `json:"width" mapstructure:"width" yaml:"width"`
}

// FormFieldSelectOptionResponseBody is used to define fields on response body
// types.
type FormFieldSelectOptionResponseBody struct {
	// Option value
	Value *string `json:"value" mapstructure:"value" yaml:"value"`
	// Option display label
	Label *string `json:"label" mapstructure:"label" yaml:"label"`
}

// FormFieldValidationRulesResponseBody is used to define fields on response
// body types.
type FormFieldValidationRulesResponseBody struct {
	// Regex pattern for validation
	Pattern *string `json:"pattern" mapstructure:"pattern" yaml:"pattern"`
	// Minimum length
	MinLength *int `json:"minLength" mapstructure:"minLength" yaml:"minLength"`
	// Maximum length
	MaxLength *int `json:"maxLength" mapstructure:"maxLength" yaml:"maxLength"`
	// Minimum value
	Min *float32 `json:"min" mapstructure:"min" yaml:"min"`
	// Maximum value
	Max *float32 `json:"max" mapstructure:"max" yaml:"max"`
}

// OrganizationVerificationConfigResponseBody is used to define fields on
// response body types.
type OrganizationVerificationConfigResponseBody struct {
	// Length of verification code
	CodeLength *int `form:"code_length,omitempty" json:"code_length,omitempty" xml:"code_length,omitempty"`
	// Method used for verification
	Method *string `form:"method,omitempty" json:"method,omitempty" xml:"method,omitempty"`
}

// NewCreateRequestBody builds the HTTP request body from the payload of the
// "create" endpoint of the "users" service.
func NewCreateRequestBody(p *users.CreatePayload) *CreateRequestBody {
	body := &CreateRequestBody{
		Password:        p.Password,
		OrganizationID:  p.OrganizationID,
		FirstName:       p.FirstName,
		LastName:        p.LastName,
		ID:              p.ID,
		PhoneNumber:     p.PhoneNumber,
		ProfileImageURL: p.ProfileImageURL,
		Locale:          p.Locale,
		Email:           p.Email,
	}
	if p.Metadata != nil {
		body.Metadata = make(map[string]any, len(p.Metadata))
		for key, val := range p.Metadata {
			tk := key
			tv := val
			body.Metadata[tk] = tv
		}
	}
	{
		var zero string
		if body.Locale == zero {
			body.Locale = "en"
		}
	}
	return body
}

// NewUpdateRequestBody builds the HTTP request body from the payload of the
// "update" endpoint of the "users" service.
func NewUpdateRequestBody(p *users.UpdatePayload) *UpdateRequestBody {
	body := &UpdateRequestBody{}
	if p.User != nil {
		body.User = marshalDesigntypesUpdateUserRequestToUpdateUserRequestRequestBody(p.User)
	}
	return body
}

// NewUpdateMeRequestBody builds the HTTP request body from the payload of the
// "update_me" endpoint of the "users" service.
func NewUpdateMeRequestBody(p *users.UpdateMePayload) *UpdateMeRequestBody {
	body := &UpdateMeRequestBody{
		PhoneNumber:           p.PhoneNumber,
		FirstName:             p.FirstName,
		LastName:              p.LastName,
		ProfileImageURL:       p.ProfileImageURL,
		Locale:                p.Locale,
		Active:                p.Active,
		PrimaryOrganizationID: p.PrimaryOrganizationID,
	}
	if p.Metadata != nil {
		body.Metadata = make(map[string]any, len(p.Metadata))
		for key, val := range p.Metadata {
			tk := key
			tv := val
			body.Metadata[tk] = tv
		}
	}
	return body
}

// NewUpdatePasswordRequestBody builds the HTTP request body from the payload
// of the "update_password" endpoint of the "users" service.
func NewUpdatePasswordRequestBody(p *users.UpdatePasswordPayload) *UpdatePasswordRequestBody {
	body := &UpdatePasswordRequestBody{
		CurrentPassword: p.CurrentPassword,
		NewPassword:     p.NewPassword,
	}
	return body
}

// NewListResultOK builds a "users" service "list" endpoint result from a HTTP
// "OK" response.
func NewListResultOK(body *ListResponseBody) *users.ListResult {
	v := &users.ListResult{}
	v.Data = make([]*designtypes.User, len(body.Data))
	for i, val := range body.Data {
		v.Data[i] = unmarshalUserResponseBodyToDesigntypesUser(val)
	}
	v.Pagination = unmarshalPaginationResponseBodyToDesigntypesPagination(body.Pagination)

	return v
}

// NewListBadRequest builds a users service list endpoint bad_request error.
func NewListBadRequest(body *ListBadRequestResponseBody) *users.BadRequestError {
	v := &users.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewListConflict builds a users service list endpoint conflict error.
func NewListConflict(body *ListConflictResponseBody) *users.ConflictError {
	v := &users.ConflictError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewListForbidden builds a users service list endpoint forbidden error.
func NewListForbidden(body *ListForbiddenResponseBody) *users.ForbiddenError {
	v := &users.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewListInternalError builds a users service list endpoint internal_error
// error.
func NewListInternalError(body *ListInternalErrorResponseBody) *users.InternalServerError {
	v := &users.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewListNotFound builds a users service list endpoint not_found error.
func NewListNotFound(body *ListNotFoundResponseBody) *users.NotFoundError {
	v := &users.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewListUnauthorized builds a users service list endpoint unauthorized error.
func NewListUnauthorized(body *ListUnauthorizedResponseBody) *users.UnauthorizedError {
	v := &users.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewCreateUserCreated builds a "users" service "create" endpoint result from
// a HTTP "Created" response.
func NewCreateUserCreated(body *CreateResponseBody) *designtypes.User {
	v := &designtypes.User{
		Active:          *body.Active,
		EmailVerified:   *body.EmailVerified,
		PhoneVerified:   body.PhoneVerified,
		ProfileImageURL: body.ProfileImageURL,
		FirstName:       body.FirstName,
		LastName:        body.LastName,
		ID:              body.ID,
		PhoneNumber:     body.PhoneNumber,
		Email:           *body.Email,
	}
	if body.Locale != nil {
		v.Locale = *body.Locale
	}
	if body.Metadata != nil {
		v.Metadata = make(map[string]any, len(body.Metadata))
		for key, val := range body.Metadata {
			tk := key
			tv := val
			v.Metadata[tk] = tv
		}
	}
	if body.Locale == nil {
		v.Locale = "en"
	}

	return v
}

// NewCreateBadRequest builds a users service create endpoint bad_request error.
func NewCreateBadRequest(body *CreateBadRequestResponseBody) *users.BadRequestError {
	v := &users.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewCreateConflict builds a users service create endpoint conflict error.
func NewCreateConflict(body *CreateConflictResponseBody) *users.ConflictError {
	v := &users.ConflictError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewCreateForbidden builds a users service create endpoint forbidden error.
func NewCreateForbidden(body *CreateForbiddenResponseBody) *users.ForbiddenError {
	v := &users.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewCreateInternalError builds a users service create endpoint internal_error
// error.
func NewCreateInternalError(body *CreateInternalErrorResponseBody) *users.InternalServerError {
	v := &users.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewCreateNotFound builds a users service create endpoint not_found error.
func NewCreateNotFound(body *CreateNotFoundResponseBody) *users.NotFoundError {
	v := &users.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewCreateUnauthorized builds a users service create endpoint unauthorized
// error.
func NewCreateUnauthorized(body *CreateUnauthorizedResponseBody) *users.UnauthorizedError {
	v := &users.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewGetUserOK builds a "users" service "get" endpoint result from a HTTP "OK"
// response.
func NewGetUserOK(body *GetResponseBody) *designtypes.User {
	v := &designtypes.User{
		Active:          *body.Active,
		EmailVerified:   *body.EmailVerified,
		PhoneVerified:   body.PhoneVerified,
		ProfileImageURL: body.ProfileImageURL,
		FirstName:       body.FirstName,
		LastName:        body.LastName,
		ID:              body.ID,
		PhoneNumber:     body.PhoneNumber,
		Email:           *body.Email,
	}
	if body.Locale != nil {
		v.Locale = *body.Locale
	}
	if body.Metadata != nil {
		v.Metadata = make(map[string]any, len(body.Metadata))
		for key, val := range body.Metadata {
			tk := key
			tv := val
			v.Metadata[tk] = tv
		}
	}
	if body.Locale == nil {
		v.Locale = "en"
	}

	return v
}

// NewGetBadRequest builds a users service get endpoint bad_request error.
func NewGetBadRequest(body *GetBadRequestResponseBody) *users.BadRequestError {
	v := &users.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewGetConflict builds a users service get endpoint conflict error.
func NewGetConflict(body *GetConflictResponseBody) *users.ConflictError {
	v := &users.ConflictError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewGetForbidden builds a users service get endpoint forbidden error.
func NewGetForbidden(body *GetForbiddenResponseBody) *users.ForbiddenError {
	v := &users.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewGetInternalError builds a users service get endpoint internal_error error.
func NewGetInternalError(body *GetInternalErrorResponseBody) *users.InternalServerError {
	v := &users.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewGetNotFound builds a users service get endpoint not_found error.
func NewGetNotFound(body *GetNotFoundResponseBody) *users.NotFoundError {
	v := &users.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewGetUnauthorized builds a users service get endpoint unauthorized error.
func NewGetUnauthorized(body *GetUnauthorizedResponseBody) *users.UnauthorizedError {
	v := &users.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewUpdateUserOK builds a "users" service "update" endpoint result from a
// HTTP "OK" response.
func NewUpdateUserOK(body *UpdateResponseBody) *designtypes.User {
	v := &designtypes.User{
		Active:          *body.Active,
		EmailVerified:   *body.EmailVerified,
		PhoneVerified:   body.PhoneVerified,
		ProfileImageURL: body.ProfileImageURL,
		FirstName:       body.FirstName,
		LastName:        body.LastName,
		ID:              body.ID,
		PhoneNumber:     body.PhoneNumber,
		Email:           *body.Email,
	}
	if body.Locale != nil {
		v.Locale = *body.Locale
	}
	if body.Metadata != nil {
		v.Metadata = make(map[string]any, len(body.Metadata))
		for key, val := range body.Metadata {
			tk := key
			tv := val
			v.Metadata[tk] = tv
		}
	}
	if body.Locale == nil {
		v.Locale = "en"
	}

	return v
}

// NewUpdateBadRequest builds a users service update endpoint bad_request error.
func NewUpdateBadRequest(body *UpdateBadRequestResponseBody) *users.BadRequestError {
	v := &users.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewUpdateConflict builds a users service update endpoint conflict error.
func NewUpdateConflict(body *UpdateConflictResponseBody) *users.ConflictError {
	v := &users.ConflictError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewUpdateForbidden builds a users service update endpoint forbidden error.
func NewUpdateForbidden(body *UpdateForbiddenResponseBody) *users.ForbiddenError {
	v := &users.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewUpdateInternalError builds a users service update endpoint internal_error
// error.
func NewUpdateInternalError(body *UpdateInternalErrorResponseBody) *users.InternalServerError {
	v := &users.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewUpdateNotFound builds a users service update endpoint not_found error.
func NewUpdateNotFound(body *UpdateNotFoundResponseBody) *users.NotFoundError {
	v := &users.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewUpdateUnauthorized builds a users service update endpoint unauthorized
// error.
func NewUpdateUnauthorized(body *UpdateUnauthorizedResponseBody) *users.UnauthorizedError {
	v := &users.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewDeleteBadRequest builds a users service delete endpoint bad_request error.
func NewDeleteBadRequest(body *DeleteBadRequestResponseBody) *users.BadRequestError {
	v := &users.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewDeleteConflict builds a users service delete endpoint conflict error.
func NewDeleteConflict(body *DeleteConflictResponseBody) *users.ConflictError {
	v := &users.ConflictError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewDeleteForbidden builds a users service delete endpoint forbidden error.
func NewDeleteForbidden(body *DeleteForbiddenResponseBody) *users.ForbiddenError {
	v := &users.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewDeleteInternalError builds a users service delete endpoint internal_error
// error.
func NewDeleteInternalError(body *DeleteInternalErrorResponseBody) *users.InternalServerError {
	v := &users.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewDeleteNotFound builds a users service delete endpoint not_found error.
func NewDeleteNotFound(body *DeleteNotFoundResponseBody) *users.NotFoundError {
	v := &users.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewDeleteUnauthorized builds a users service delete endpoint unauthorized
// error.
func NewDeleteUnauthorized(body *DeleteUnauthorizedResponseBody) *users.UnauthorizedError {
	v := &users.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewUpdateMeUserOK builds a "users" service "update_me" endpoint result from
// a HTTP "OK" response.
func NewUpdateMeUserOK(body *UpdateMeResponseBody) *designtypes.User {
	v := &designtypes.User{
		Active:          *body.Active,
		EmailVerified:   *body.EmailVerified,
		PhoneVerified:   body.PhoneVerified,
		ProfileImageURL: body.ProfileImageURL,
		FirstName:       body.FirstName,
		LastName:        body.LastName,
		ID:              body.ID,
		PhoneNumber:     body.PhoneNumber,
		Email:           *body.Email,
	}
	if body.Locale != nil {
		v.Locale = *body.Locale
	}
	if body.Metadata != nil {
		v.Metadata = make(map[string]any, len(body.Metadata))
		for key, val := range body.Metadata {
			tk := key
			tv := val
			v.Metadata[tk] = tv
		}
	}
	if body.Locale == nil {
		v.Locale = "en"
	}

	return v
}

// NewUpdateMeBadRequest builds a users service update_me endpoint bad_request
// error.
func NewUpdateMeBadRequest(body *UpdateMeBadRequestResponseBody) *users.BadRequestError {
	v := &users.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewUpdateMeConflict builds a users service update_me endpoint conflict error.
func NewUpdateMeConflict(body *UpdateMeConflictResponseBody) *users.ConflictError {
	v := &users.ConflictError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewUpdateMeForbidden builds a users service update_me endpoint forbidden
// error.
func NewUpdateMeForbidden(body *UpdateMeForbiddenResponseBody) *users.ForbiddenError {
	v := &users.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewUpdateMeInternalError builds a users service update_me endpoint
// internal_error error.
func NewUpdateMeInternalError(body *UpdateMeInternalErrorResponseBody) *users.InternalServerError {
	v := &users.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewUpdateMeNotFound builds a users service update_me endpoint not_found
// error.
func NewUpdateMeNotFound(body *UpdateMeNotFoundResponseBody) *users.NotFoundError {
	v := &users.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewUpdateMeUnauthorized builds a users service update_me endpoint
// unauthorized error.
func NewUpdateMeUnauthorized(body *UpdateMeUnauthorizedResponseBody) *users.UnauthorizedError {
	v := &users.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewUpdatePasswordResultOK builds a "users" service "update_password"
// endpoint result from a HTTP "OK" response.
func NewUpdatePasswordResultOK(body *UpdatePasswordResponseBody) *users.UpdatePasswordResult {
	v := &users.UpdatePasswordResult{
		Message: *body.Message,
	}

	return v
}

// NewUpdatePasswordBadRequest builds a users service update_password endpoint
// bad_request error.
func NewUpdatePasswordBadRequest(body *UpdatePasswordBadRequestResponseBody) *users.BadRequestError {
	v := &users.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewUpdatePasswordConflict builds a users service update_password endpoint
// conflict error.
func NewUpdatePasswordConflict(body *UpdatePasswordConflictResponseBody) *users.ConflictError {
	v := &users.ConflictError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewUpdatePasswordForbidden builds a users service update_password endpoint
// forbidden error.
func NewUpdatePasswordForbidden(body *UpdatePasswordForbiddenResponseBody) *users.ForbiddenError {
	v := &users.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewUpdatePasswordInternalError builds a users service update_password
// endpoint internal_error error.
func NewUpdatePasswordInternalError(body *UpdatePasswordInternalErrorResponseBody) *users.InternalServerError {
	v := &users.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewUpdatePasswordNotFound builds a users service update_password endpoint
// not_found error.
func NewUpdatePasswordNotFound(body *UpdatePasswordNotFoundResponseBody) *users.NotFoundError {
	v := &users.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewUpdatePasswordUnauthorized builds a users service update_password
// endpoint unauthorized error.
func NewUpdatePasswordUnauthorized(body *UpdatePasswordUnauthorizedResponseBody) *users.UnauthorizedError {
	v := &users.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewGetSessionsGetUserSessionResponseOK builds a "users" service
// "get_sessions" endpoint result from a HTTP "OK" response.
func NewGetSessionsGetUserSessionResponseOK(body *GetSessionsResponseBody) *users.GetUserSessionResponse {
	v := &users.GetUserSessionResponse{}
	v.Data = make([]*designtypes.Session, len(body.Data))
	for i, val := range body.Data {
		v.Data[i] = unmarshalSessionResponseBodyToDesigntypesSession(val)
	}
	v.Pagination = unmarshalPaginationResponseBodyToDesigntypesPagination(body.Pagination)

	return v
}

// NewGetSessionsBadRequest builds a users service get_sessions endpoint
// bad_request error.
func NewGetSessionsBadRequest(body *GetSessionsBadRequestResponseBody) *users.BadRequestError {
	v := &users.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewGetSessionsConflict builds a users service get_sessions endpoint conflict
// error.
func NewGetSessionsConflict(body *GetSessionsConflictResponseBody) *users.ConflictError {
	v := &users.ConflictError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewGetSessionsForbidden builds a users service get_sessions endpoint
// forbidden error.
func NewGetSessionsForbidden(body *GetSessionsForbiddenResponseBody) *users.ForbiddenError {
	v := &users.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewGetSessionsInternalError builds a users service get_sessions endpoint
// internal_error error.
func NewGetSessionsInternalError(body *GetSessionsInternalErrorResponseBody) *users.InternalServerError {
	v := &users.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewGetSessionsNotFound builds a users service get_sessions endpoint
// not_found error.
func NewGetSessionsNotFound(body *GetSessionsNotFoundResponseBody) *users.NotFoundError {
	v := &users.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewGetSessionsUnauthorized builds a users service get_sessions endpoint
// unauthorized error.
func NewGetSessionsUnauthorized(body *GetSessionsUnauthorizedResponseBody) *users.UnauthorizedError {
	v := &users.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewDeleteSessionBadRequest builds a users service delete_session endpoint
// bad_request error.
func NewDeleteSessionBadRequest(body *DeleteSessionBadRequestResponseBody) *users.BadRequestError {
	v := &users.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewDeleteSessionConflict builds a users service delete_session endpoint
// conflict error.
func NewDeleteSessionConflict(body *DeleteSessionConflictResponseBody) *users.ConflictError {
	v := &users.ConflictError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewDeleteSessionForbidden builds a users service delete_session endpoint
// forbidden error.
func NewDeleteSessionForbidden(body *DeleteSessionForbiddenResponseBody) *users.ForbiddenError {
	v := &users.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewDeleteSessionInternalError builds a users service delete_session endpoint
// internal_error error.
func NewDeleteSessionInternalError(body *DeleteSessionInternalErrorResponseBody) *users.InternalServerError {
	v := &users.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewDeleteSessionNotFound builds a users service delete_session endpoint
// not_found error.
func NewDeleteSessionNotFound(body *DeleteSessionNotFoundResponseBody) *users.NotFoundError {
	v := &users.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewDeleteSessionUnauthorized builds a users service delete_session endpoint
// unauthorized error.
func NewDeleteSessionUnauthorized(body *DeleteSessionUnauthorizedResponseBody) *users.UnauthorizedError {
	v := &users.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewGetOrganizationsResultOK builds a "users" service "get_organizations"
// endpoint result from a HTTP "OK" response.
func NewGetOrganizationsResultOK(body *GetOrganizationsResponseBody) *users.GetOrganizationsResult {
	v := &users.GetOrganizationsResult{}
	v.Organizations = make([]*designtypes.Organization, len(body.Organizations))
	for i, val := range body.Organizations {
		v.Organizations[i] = unmarshalOrganizationResponseBodyToDesigntypesOrganization(val)
	}

	return v
}

// NewGetOrganizationsBadRequest builds a users service get_organizations
// endpoint bad_request error.
func NewGetOrganizationsBadRequest(body *GetOrganizationsBadRequestResponseBody) *users.BadRequestError {
	v := &users.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewGetOrganizationsConflict builds a users service get_organizations
// endpoint conflict error.
func NewGetOrganizationsConflict(body *GetOrganizationsConflictResponseBody) *users.ConflictError {
	v := &users.ConflictError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewGetOrganizationsForbidden builds a users service get_organizations
// endpoint forbidden error.
func NewGetOrganizationsForbidden(body *GetOrganizationsForbiddenResponseBody) *users.ForbiddenError {
	v := &users.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewGetOrganizationsInternalError builds a users service get_organizations
// endpoint internal_error error.
func NewGetOrganizationsInternalError(body *GetOrganizationsInternalErrorResponseBody) *users.InternalServerError {
	v := &users.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewGetOrganizationsNotFound builds a users service get_organizations
// endpoint not_found error.
func NewGetOrganizationsNotFound(body *GetOrganizationsNotFoundResponseBody) *users.NotFoundError {
	v := &users.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewGetOrganizationsUnauthorized builds a users service get_organizations
// endpoint unauthorized error.
func NewGetOrganizationsUnauthorized(body *GetOrganizationsUnauthorizedResponseBody) *users.UnauthorizedError {
	v := &users.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// ValidateListResponseBody runs the validations defined on ListResponseBody
func ValidateListResponseBody(body *ListResponseBody) (err error) {
	if body.Data == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("data", "body"))
	}
	if body.Pagination == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("pagination", "body"))
	}
	for _, e := range body.Data {
		if e != nil {
			if err2 := ValidateUserResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if body.Pagination != nil {
		if err2 := ValidatePaginationResponseBody(body.Pagination); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateCreateResponseBody runs the validations defined on CreateResponseBody
func ValidateCreateResponseBody(body *CreateResponseBody) (err error) {
	if body.Active == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("active", "body"))
	}
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.EmailVerified == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email_verified", "body"))
	}
	if body.Email != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", *body.Email, goa.FormatEmail))
	}
	return
}

// ValidateGetResponseBody runs the validations defined on GetResponseBody
func ValidateGetResponseBody(body *GetResponseBody) (err error) {
	if body.Active == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("active", "body"))
	}
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.EmailVerified == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email_verified", "body"))
	}
	if body.Email != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", *body.Email, goa.FormatEmail))
	}
	return
}

// ValidateUpdateResponseBody runs the validations defined on UpdateResponseBody
func ValidateUpdateResponseBody(body *UpdateResponseBody) (err error) {
	if body.Active == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("active", "body"))
	}
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.EmailVerified == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email_verified", "body"))
	}
	if body.Email != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", *body.Email, goa.FormatEmail))
	}
	return
}

// ValidateUpdateMeResponseBody runs the validations defined on
// update_me_response_body
func ValidateUpdateMeResponseBody(body *UpdateMeResponseBody) (err error) {
	if body.Active == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("active", "body"))
	}
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.EmailVerified == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email_verified", "body"))
	}
	if body.Email != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", *body.Email, goa.FormatEmail))
	}
	return
}

// ValidateUpdatePasswordResponseBody runs the validations defined on
// update_password_response_body
func ValidateUpdatePasswordResponseBody(body *UpdatePasswordResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetSessionsResponseBody runs the validations defined on
// get_sessions_response_body
func ValidateGetSessionsResponseBody(body *GetSessionsResponseBody) (err error) {
	if body.Data == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("data", "body"))
	}
	if body.Pagination == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("pagination", "body"))
	}
	for _, e := range body.Data {
		if e != nil {
			if err2 := ValidateSessionResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if body.Pagination != nil {
		if err2 := ValidatePaginationResponseBody(body.Pagination); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateGetOrganizationsResponseBody runs the validations defined on
// get_organizations_response_body
func ValidateGetOrganizationsResponseBody(body *GetOrganizationsResponseBody) (err error) {
	if body.Organizations == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("organizations", "body"))
	}
	for _, e := range body.Organizations {
		if e != nil {
			if err2 := ValidateOrganizationResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateListBadRequestResponseBody runs the validations defined on
// list_bad_request_response_body
func ValidateListBadRequestResponseBody(body *ListBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateListConflictResponseBody runs the validations defined on
// list_conflict_response_body
func ValidateListConflictResponseBody(body *ListConflictResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateListForbiddenResponseBody runs the validations defined on
// list_forbidden_response_body
func ValidateListForbiddenResponseBody(body *ListForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateListInternalErrorResponseBody runs the validations defined on
// list_internal_error_response_body
func ValidateListInternalErrorResponseBody(body *ListInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateListNotFoundResponseBody runs the validations defined on
// list_not_found_response_body
func ValidateListNotFoundResponseBody(body *ListNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateListUnauthorizedResponseBody runs the validations defined on
// list_unauthorized_response_body
func ValidateListUnauthorizedResponseBody(body *ListUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateBadRequestResponseBody runs the validations defined on
// create_bad_request_response_body
func ValidateCreateBadRequestResponseBody(body *CreateBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateConflictResponseBody runs the validations defined on
// create_conflict_response_body
func ValidateCreateConflictResponseBody(body *CreateConflictResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateForbiddenResponseBody runs the validations defined on
// create_forbidden_response_body
func ValidateCreateForbiddenResponseBody(body *CreateForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateInternalErrorResponseBody runs the validations defined on
// create_internal_error_response_body
func ValidateCreateInternalErrorResponseBody(body *CreateInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateNotFoundResponseBody runs the validations defined on
// create_not_found_response_body
func ValidateCreateNotFoundResponseBody(body *CreateNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateUnauthorizedResponseBody runs the validations defined on
// create_unauthorized_response_body
func ValidateCreateUnauthorizedResponseBody(body *CreateUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetBadRequestResponseBody runs the validations defined on
// get_bad_request_response_body
func ValidateGetBadRequestResponseBody(body *GetBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetConflictResponseBody runs the validations defined on
// get_conflict_response_body
func ValidateGetConflictResponseBody(body *GetConflictResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetForbiddenResponseBody runs the validations defined on
// get_forbidden_response_body
func ValidateGetForbiddenResponseBody(body *GetForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetInternalErrorResponseBody runs the validations defined on
// get_internal_error_response_body
func ValidateGetInternalErrorResponseBody(body *GetInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetNotFoundResponseBody runs the validations defined on
// get_not_found_response_body
func ValidateGetNotFoundResponseBody(body *GetNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetUnauthorizedResponseBody runs the validations defined on
// get_unauthorized_response_body
func ValidateGetUnauthorizedResponseBody(body *GetUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateBadRequestResponseBody runs the validations defined on
// update_bad_request_response_body
func ValidateUpdateBadRequestResponseBody(body *UpdateBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateConflictResponseBody runs the validations defined on
// update_conflict_response_body
func ValidateUpdateConflictResponseBody(body *UpdateConflictResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateForbiddenResponseBody runs the validations defined on
// update_forbidden_response_body
func ValidateUpdateForbiddenResponseBody(body *UpdateForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateInternalErrorResponseBody runs the validations defined on
// update_internal_error_response_body
func ValidateUpdateInternalErrorResponseBody(body *UpdateInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateNotFoundResponseBody runs the validations defined on
// update_not_found_response_body
func ValidateUpdateNotFoundResponseBody(body *UpdateNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateUnauthorizedResponseBody runs the validations defined on
// update_unauthorized_response_body
func ValidateUpdateUnauthorizedResponseBody(body *UpdateUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteBadRequestResponseBody runs the validations defined on
// delete_bad_request_response_body
func ValidateDeleteBadRequestResponseBody(body *DeleteBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteConflictResponseBody runs the validations defined on
// delete_conflict_response_body
func ValidateDeleteConflictResponseBody(body *DeleteConflictResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteForbiddenResponseBody runs the validations defined on
// delete_forbidden_response_body
func ValidateDeleteForbiddenResponseBody(body *DeleteForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteInternalErrorResponseBody runs the validations defined on
// delete_internal_error_response_body
func ValidateDeleteInternalErrorResponseBody(body *DeleteInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteNotFoundResponseBody runs the validations defined on
// delete_not_found_response_body
func ValidateDeleteNotFoundResponseBody(body *DeleteNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteUnauthorizedResponseBody runs the validations defined on
// delete_unauthorized_response_body
func ValidateDeleteUnauthorizedResponseBody(body *DeleteUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateMeBadRequestResponseBody runs the validations defined on
// update_me_bad_request_response_body
func ValidateUpdateMeBadRequestResponseBody(body *UpdateMeBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateMeConflictResponseBody runs the validations defined on
// update_me_conflict_response_body
func ValidateUpdateMeConflictResponseBody(body *UpdateMeConflictResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateMeForbiddenResponseBody runs the validations defined on
// update_me_forbidden_response_body
func ValidateUpdateMeForbiddenResponseBody(body *UpdateMeForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateMeInternalErrorResponseBody runs the validations defined on
// update_me_internal_error_response_body
func ValidateUpdateMeInternalErrorResponseBody(body *UpdateMeInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateMeNotFoundResponseBody runs the validations defined on
// update_me_not_found_response_body
func ValidateUpdateMeNotFoundResponseBody(body *UpdateMeNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateMeUnauthorizedResponseBody runs the validations defined on
// update_me_unauthorized_response_body
func ValidateUpdateMeUnauthorizedResponseBody(body *UpdateMeUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdatePasswordBadRequestResponseBody runs the validations defined on
// update_password_bad_request_response_body
func ValidateUpdatePasswordBadRequestResponseBody(body *UpdatePasswordBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdatePasswordConflictResponseBody runs the validations defined on
// update_password_conflict_response_body
func ValidateUpdatePasswordConflictResponseBody(body *UpdatePasswordConflictResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdatePasswordForbiddenResponseBody runs the validations defined on
// update_password_forbidden_response_body
func ValidateUpdatePasswordForbiddenResponseBody(body *UpdatePasswordForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdatePasswordInternalErrorResponseBody runs the validations defined
// on update_password_internal_error_response_body
func ValidateUpdatePasswordInternalErrorResponseBody(body *UpdatePasswordInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdatePasswordNotFoundResponseBody runs the validations defined on
// update_password_not_found_response_body
func ValidateUpdatePasswordNotFoundResponseBody(body *UpdatePasswordNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdatePasswordUnauthorizedResponseBody runs the validations defined
// on update_password_unauthorized_response_body
func ValidateUpdatePasswordUnauthorizedResponseBody(body *UpdatePasswordUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetSessionsBadRequestResponseBody runs the validations defined on
// get_sessions_bad_request_response_body
func ValidateGetSessionsBadRequestResponseBody(body *GetSessionsBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetSessionsConflictResponseBody runs the validations defined on
// get_sessions_conflict_response_body
func ValidateGetSessionsConflictResponseBody(body *GetSessionsConflictResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetSessionsForbiddenResponseBody runs the validations defined on
// get_sessions_forbidden_response_body
func ValidateGetSessionsForbiddenResponseBody(body *GetSessionsForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetSessionsInternalErrorResponseBody runs the validations defined on
// get_sessions_internal_error_response_body
func ValidateGetSessionsInternalErrorResponseBody(body *GetSessionsInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetSessionsNotFoundResponseBody runs the validations defined on
// get_sessions_not_found_response_body
func ValidateGetSessionsNotFoundResponseBody(body *GetSessionsNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetSessionsUnauthorizedResponseBody runs the validations defined on
// get_sessions_unauthorized_response_body
func ValidateGetSessionsUnauthorizedResponseBody(body *GetSessionsUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteSessionBadRequestResponseBody runs the validations defined on
// delete_session_bad_request_response_body
func ValidateDeleteSessionBadRequestResponseBody(body *DeleteSessionBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteSessionConflictResponseBody runs the validations defined on
// delete_session_conflict_response_body
func ValidateDeleteSessionConflictResponseBody(body *DeleteSessionConflictResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteSessionForbiddenResponseBody runs the validations defined on
// delete_session_forbidden_response_body
func ValidateDeleteSessionForbiddenResponseBody(body *DeleteSessionForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteSessionInternalErrorResponseBody runs the validations defined
// on delete_session_internal_error_response_body
func ValidateDeleteSessionInternalErrorResponseBody(body *DeleteSessionInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteSessionNotFoundResponseBody runs the validations defined on
// delete_session_not_found_response_body
func ValidateDeleteSessionNotFoundResponseBody(body *DeleteSessionNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteSessionUnauthorizedResponseBody runs the validations defined
// on delete_session_unauthorized_response_body
func ValidateDeleteSessionUnauthorizedResponseBody(body *DeleteSessionUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetOrganizationsBadRequestResponseBody runs the validations defined
// on get_organizations_bad_request_response_body
func ValidateGetOrganizationsBadRequestResponseBody(body *GetOrganizationsBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetOrganizationsConflictResponseBody runs the validations defined on
// get_organizations_conflict_response_body
func ValidateGetOrganizationsConflictResponseBody(body *GetOrganizationsConflictResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetOrganizationsForbiddenResponseBody runs the validations defined
// on get_organizations_forbidden_response_body
func ValidateGetOrganizationsForbiddenResponseBody(body *GetOrganizationsForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetOrganizationsInternalErrorResponseBody runs the validations
// defined on get_organizations_internal_error_response_body
func ValidateGetOrganizationsInternalErrorResponseBody(body *GetOrganizationsInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetOrganizationsNotFoundResponseBody runs the validations defined on
// get_organizations_not_found_response_body
func ValidateGetOrganizationsNotFoundResponseBody(body *GetOrganizationsNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetOrganizationsUnauthorizedResponseBody runs the validations
// defined on get_organizations_unauthorized_response_body
func ValidateGetOrganizationsUnauthorizedResponseBody(body *GetOrganizationsUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUserResponseBody runs the validations defined on UserResponseBody
func ValidateUserResponseBody(body *UserResponseBody) (err error) {
	if body.Active == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("active", "body"))
	}
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.EmailVerified == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email_verified", "body"))
	}
	if body.Email != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", *body.Email, goa.FormatEmail))
	}
	return
}

// ValidatePaginationResponseBody runs the validations defined on
// PaginationResponseBody
func ValidatePaginationResponseBody(body *PaginationResponseBody) (err error) {
	if body.Total == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total", "body"))
	}
	if body.Offset == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("offset", "body"))
	}
	if body.Limit == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("limit", "body"))
	}
	if body.TotalPages == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total_pages", "body"))
	}
	if body.CurrentPage == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("current_page", "body"))
	}
	if body.HasNext == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("has_next", "body"))
	}
	if body.HasPrevious == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("has_previous", "body"))
	}
	if body.Offset != nil {
		if *body.Offset < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.offset", *body.Offset, 0, true))
		}
	}
	if body.Limit != nil {
		if *body.Limit < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.limit", *body.Limit, 1, true))
		}
	}
	if body.Limit != nil {
		if *body.Limit > 100 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.limit", *body.Limit, 100, false))
		}
	}
	return
}

// ValidateSessionResponseBody runs the validations defined on
// SessionResponseBody
func ValidateSessionResponseBody(body *SessionResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	if body.ExpiresAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("expires_at", "body"))
	}
	if body.UpdatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("updated_at", "body"))
	}
	if body.LastActiveAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.last_active_at", *body.LastActiveAt, goa.FormatDateTime))
	}
	if body.ExpiresAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.expires_at", *body.ExpiresAt, goa.FormatDateTime))
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updated_at", *body.UpdatedAt, goa.FormatDateTime))
	}
	return
}

// ValidateOrganizationResponseBody runs the validations defined on
// OrganizationResponseBody
func ValidateOrganizationResponseBody(body *OrganizationResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Slug == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("slug", "body"))
	}
	if body.Active == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("active", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	if body.UpdatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("updated_at", "body"))
	}
	if body.Settings != nil {
		if err2 := ValidateOrganizationSettingsResponseBody(body.Settings); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateOrganizationSettingsResponseBody runs the validations defined on
// OrganizationSettingsResponseBody
func ValidateOrganizationSettingsResponseBody(body *OrganizationSettingsResponseBody) (err error) {
	for _, e := range body.SignupFields {
		if e != nil {
			if err2 := ValidateFormFieldResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	for _, e := range body.Verification {
		if e != nil {
			if err2 := ValidateOrganizationVerificationConfigResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateFormFieldResponseBody runs the validations defined on
// FormFieldResponseBody
func ValidateFormFieldResponseBody(body *FormFieldResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Label == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("label", "body"))
	}
	if body.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "body"))
	}
	if body.Type != nil {
		if !(*body.Type == "text" || *body.Type == "select" || *body.Type == "checkbox" || *body.Type == "number") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.type", *body.Type, []any{"text", "select", "checkbox", "number"}))
		}
	}
	for _, e := range body.Options {
		if e != nil {
			if err2 := ValidateFormFieldSelectOptionResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if body.Validation != nil {
		if err2 := ValidateFormFieldValidationRulesResponseBody(body.Validation); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Width != nil {
		if !(*body.Width == "full" || *body.Width == "half" || *body.Width == "third") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.width", *body.Width, []any{"full", "half", "third"}))
		}
	}
	return
}

// ValidateFormFieldSelectOptionResponseBody runs the validations defined on
// FormFieldSelectOptionResponseBody
func ValidateFormFieldSelectOptionResponseBody(body *FormFieldSelectOptionResponseBody) (err error) {
	if body.Label == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("label", "body"))
	}
	if body.Value == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("value", "body"))
	}
	return
}

// ValidateFormFieldValidationRulesResponseBody runs the validations defined on
// FormFieldValidationRulesResponseBody
func ValidateFormFieldValidationRulesResponseBody(body *FormFieldValidationRulesResponseBody) (err error) {
	if body.MinLength != nil {
		if *body.MinLength < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.minLength", *body.MinLength, 0, true))
		}
	}
	if body.MaxLength != nil {
		if *body.MaxLength < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.maxLength", *body.MaxLength, 1, true))
		}
	}
	return
}

// ValidateOrganizationVerificationConfigResponseBody runs the validations
// defined on OrganizationVerificationConfigResponseBody
func ValidateOrganizationVerificationConfigResponseBody(body *OrganizationVerificationConfigResponseBody) (err error) {
	if body.Method != nil {
		if !(*body.Method == "email" || *body.Method == "sms" || *body.Method == "phone") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.method", *body.Method, []any{"email", "sms", "phone"}))
		}
	}
	return
}
