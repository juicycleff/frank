// Code generated by goa v3.20.0, DO NOT EDIT.
//
// users HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/juicycleff/frank/design -o .

package client

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	designtypes "github.com/juicycleff/frank/gen/designtypes"
	users "github.com/juicycleff/frank/gen/users"
	goahttp "goa.design/goa/v3/http"
)

// BuildListRequest instantiates a HTTP request object with method and path set
// to call the "users" service "list" endpoint
func (c *Client) BuildListRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListUsersPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("users", "list", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeListRequest returns an encoder for requests sent to the users list
// server.
func EncodeListRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*users.ListPayload)
		if !ok {
			return goahttp.ErrInvalidType("users", "list", "*users.ListPayload", v)
		}
		if p.JWT != nil {
			head := *p.JWT
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		values := req.URL.Query()
		values.Add("offset", fmt.Sprintf("%v", p.Offset))
		values.Add("limit", fmt.Sprintf("%v", p.Limit))
		if p.Search != nil {
			values.Add("search", *p.Search)
		}
		if p.OrganizationID != nil {
			values.Add("organization_id", *p.OrganizationID)
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeListResponse returns a decoder for responses returned by the users
// list endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeListResponse may return the following errors:
//   - "bad_request" (type *users.BadRequestError): http.StatusBadRequest
//   - "conflict" (type *users.ConflictError): http.StatusConflict
//   - "forbidden" (type *users.ForbiddenError): http.StatusForbidden
//   - "internal_error" (type *users.InternalServerError): http.StatusInternalServerError
//   - "not_found" (type *users.NotFoundError): http.StatusNotFound
//   - "unauthorized" (type *users.UnauthorizedError): http.StatusUnauthorized
//   - error: internal error
func DecodeListResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "list", err)
			}
			err = ValidateListResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "list", err)
			}
			res := NewListResultOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body ListBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "list", err)
			}
			err = ValidateListBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "list", err)
			}
			return nil, NewListBadRequest(&body)
		case http.StatusConflict:
			var (
				body ListConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "list", err)
			}
			err = ValidateListConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "list", err)
			}
			return nil, NewListConflict(&body)
		case http.StatusForbidden:
			var (
				body ListForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "list", err)
			}
			err = ValidateListForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "list", err)
			}
			return nil, NewListForbidden(&body)
		case http.StatusInternalServerError:
			var (
				body ListInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "list", err)
			}
			err = ValidateListInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "list", err)
			}
			return nil, NewListInternalError(&body)
		case http.StatusNotFound:
			var (
				body ListNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "list", err)
			}
			err = ValidateListNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "list", err)
			}
			return nil, NewListNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body ListUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "list", err)
			}
			err = ValidateListUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "list", err)
			}
			return nil, NewListUnauthorized(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("users", "list", resp.StatusCode, string(body))
		}
	}
}

// BuildCreateRequest instantiates a HTTP request object with method and path
// set to call the "users" service "create" endpoint
func (c *Client) BuildCreateRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateUsersPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("users", "create", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateRequest returns an encoder for requests sent to the users create
// server.
func EncodeCreateRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*users.CreatePayload)
		if !ok {
			return goahttp.ErrInvalidType("users", "create", "*users.CreatePayload", v)
		}
		if p.JWT != nil {
			head := *p.JWT
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		body := NewCreateRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("users", "create", err)
		}
		return nil
	}
}

// DecodeCreateResponse returns a decoder for responses returned by the users
// create endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeCreateResponse may return the following errors:
//   - "bad_request" (type *users.BadRequestError): http.StatusBadRequest
//   - "conflict" (type *users.ConflictError): http.StatusConflict
//   - "forbidden" (type *users.ForbiddenError): http.StatusForbidden
//   - "internal_error" (type *users.InternalServerError): http.StatusInternalServerError
//   - "not_found" (type *users.NotFoundError): http.StatusNotFound
//   - "unauthorized" (type *users.UnauthorizedError): http.StatusUnauthorized
//   - error: internal error
func DecodeCreateResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body CreateResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "create", err)
			}
			err = ValidateCreateResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "create", err)
			}
			res := NewCreateUserCreated(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body CreateBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "create", err)
			}
			err = ValidateCreateBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "create", err)
			}
			return nil, NewCreateBadRequest(&body)
		case http.StatusConflict:
			var (
				body CreateConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "create", err)
			}
			err = ValidateCreateConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "create", err)
			}
			return nil, NewCreateConflict(&body)
		case http.StatusForbidden:
			var (
				body CreateForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "create", err)
			}
			err = ValidateCreateForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "create", err)
			}
			return nil, NewCreateForbidden(&body)
		case http.StatusInternalServerError:
			var (
				body CreateInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "create", err)
			}
			err = ValidateCreateInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "create", err)
			}
			return nil, NewCreateInternalError(&body)
		case http.StatusNotFound:
			var (
				body CreateNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "create", err)
			}
			err = ValidateCreateNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "create", err)
			}
			return nil, NewCreateNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body CreateUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "create", err)
			}
			err = ValidateCreateUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "create", err)
			}
			return nil, NewCreateUnauthorized(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("users", "create", resp.StatusCode, string(body))
		}
	}
}

// BuildGetRequest instantiates a HTTP request object with method and path set
// to call the "users" service "get" endpoint
func (c *Client) BuildGetRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(*users.GetPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("users", "get", "*users.GetPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetUsersPath(id)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("users", "get", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetRequest returns an encoder for requests sent to the users get
// server.
func EncodeGetRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*users.GetPayload)
		if !ok {
			return goahttp.ErrInvalidType("users", "get", "*users.GetPayload", v)
		}
		if p.JWT != nil {
			head := *p.JWT
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeGetResponse returns a decoder for responses returned by the users get
// endpoint. restoreBody controls whether the response body should be restored
// after having been read.
// DecodeGetResponse may return the following errors:
//   - "bad_request" (type *users.BadRequestError): http.StatusBadRequest
//   - "conflict" (type *users.ConflictError): http.StatusConflict
//   - "forbidden" (type *users.ForbiddenError): http.StatusForbidden
//   - "internal_error" (type *users.InternalServerError): http.StatusInternalServerError
//   - "not_found" (type *users.NotFoundError): http.StatusNotFound
//   - "unauthorized" (type *users.UnauthorizedError): http.StatusUnauthorized
//   - error: internal error
func DecodeGetResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "get", err)
			}
			err = ValidateGetResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "get", err)
			}
			res := NewGetUserOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body GetBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "get", err)
			}
			err = ValidateGetBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "get", err)
			}
			return nil, NewGetBadRequest(&body)
		case http.StatusConflict:
			var (
				body GetConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "get", err)
			}
			err = ValidateGetConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "get", err)
			}
			return nil, NewGetConflict(&body)
		case http.StatusForbidden:
			var (
				body GetForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "get", err)
			}
			err = ValidateGetForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "get", err)
			}
			return nil, NewGetForbidden(&body)
		case http.StatusInternalServerError:
			var (
				body GetInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "get", err)
			}
			err = ValidateGetInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "get", err)
			}
			return nil, NewGetInternalError(&body)
		case http.StatusNotFound:
			var (
				body GetNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "get", err)
			}
			err = ValidateGetNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "get", err)
			}
			return nil, NewGetNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body GetUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "get", err)
			}
			err = ValidateGetUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "get", err)
			}
			return nil, NewGetUnauthorized(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("users", "get", resp.StatusCode, string(body))
		}
	}
}

// BuildUpdateRequest instantiates a HTTP request object with method and path
// set to call the "users" service "update" endpoint
func (c *Client) BuildUpdateRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(*users.UpdatePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("users", "update", "*users.UpdatePayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpdateUsersPath(id)}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("users", "update", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpdateRequest returns an encoder for requests sent to the users update
// server.
func EncodeUpdateRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*users.UpdatePayload)
		if !ok {
			return goahttp.ErrInvalidType("users", "update", "*users.UpdatePayload", v)
		}
		if p.JWT != nil {
			head := *p.JWT
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		body := NewUpdateRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("users", "update", err)
		}
		return nil
	}
}

// DecodeUpdateResponse returns a decoder for responses returned by the users
// update endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeUpdateResponse may return the following errors:
//   - "bad_request" (type *users.BadRequestError): http.StatusBadRequest
//   - "conflict" (type *users.ConflictError): http.StatusConflict
//   - "forbidden" (type *users.ForbiddenError): http.StatusForbidden
//   - "internal_error" (type *users.InternalServerError): http.StatusInternalServerError
//   - "not_found" (type *users.NotFoundError): http.StatusNotFound
//   - "unauthorized" (type *users.UnauthorizedError): http.StatusUnauthorized
//   - error: internal error
func DecodeUpdateResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body UpdateResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "update", err)
			}
			err = ValidateUpdateResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "update", err)
			}
			res := NewUpdateUserOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body UpdateBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "update", err)
			}
			err = ValidateUpdateBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "update", err)
			}
			return nil, NewUpdateBadRequest(&body)
		case http.StatusConflict:
			var (
				body UpdateConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "update", err)
			}
			err = ValidateUpdateConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "update", err)
			}
			return nil, NewUpdateConflict(&body)
		case http.StatusForbidden:
			var (
				body UpdateForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "update", err)
			}
			err = ValidateUpdateForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "update", err)
			}
			return nil, NewUpdateForbidden(&body)
		case http.StatusInternalServerError:
			var (
				body UpdateInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "update", err)
			}
			err = ValidateUpdateInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "update", err)
			}
			return nil, NewUpdateInternalError(&body)
		case http.StatusNotFound:
			var (
				body UpdateNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "update", err)
			}
			err = ValidateUpdateNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "update", err)
			}
			return nil, NewUpdateNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body UpdateUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "update", err)
			}
			err = ValidateUpdateUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "update", err)
			}
			return nil, NewUpdateUnauthorized(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("users", "update", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteRequest instantiates a HTTP request object with method and path
// set to call the "users" service "delete" endpoint
func (c *Client) BuildDeleteRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(*users.DeletePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("users", "delete", "*users.DeletePayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteUsersPath(id)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("users", "delete", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDeleteRequest returns an encoder for requests sent to the users delete
// server.
func EncodeDeleteRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*users.DeletePayload)
		if !ok {
			return goahttp.ErrInvalidType("users", "delete", "*users.DeletePayload", v)
		}
		if p.JWT != nil {
			head := *p.JWT
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeDeleteResponse returns a decoder for responses returned by the users
// delete endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeDeleteResponse may return the following errors:
//   - "bad_request" (type *users.BadRequestError): http.StatusBadRequest
//   - "conflict" (type *users.ConflictError): http.StatusConflict
//   - "forbidden" (type *users.ForbiddenError): http.StatusForbidden
//   - "internal_error" (type *users.InternalServerError): http.StatusInternalServerError
//   - "not_found" (type *users.NotFoundError): http.StatusNotFound
//   - "unauthorized" (type *users.UnauthorizedError): http.StatusUnauthorized
//   - error: internal error
func DecodeDeleteResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			return nil, nil
		case http.StatusBadRequest:
			var (
				body DeleteBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "delete", err)
			}
			err = ValidateDeleteBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "delete", err)
			}
			return nil, NewDeleteBadRequest(&body)
		case http.StatusConflict:
			var (
				body DeleteConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "delete", err)
			}
			err = ValidateDeleteConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "delete", err)
			}
			return nil, NewDeleteConflict(&body)
		case http.StatusForbidden:
			var (
				body DeleteForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "delete", err)
			}
			err = ValidateDeleteForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "delete", err)
			}
			return nil, NewDeleteForbidden(&body)
		case http.StatusInternalServerError:
			var (
				body DeleteInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "delete", err)
			}
			err = ValidateDeleteInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "delete", err)
			}
			return nil, NewDeleteInternalError(&body)
		case http.StatusNotFound:
			var (
				body DeleteNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "delete", err)
			}
			err = ValidateDeleteNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "delete", err)
			}
			return nil, NewDeleteNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body DeleteUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "delete", err)
			}
			err = ValidateDeleteUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "delete", err)
			}
			return nil, NewDeleteUnauthorized(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("users", "delete", resp.StatusCode, string(body))
		}
	}
}

// BuildUpdateMeRequest instantiates a HTTP request object with method and path
// set to call the "users" service "update_me" endpoint
func (c *Client) BuildUpdateMeRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpdateMeUsersPath()}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("users", "update_me", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpdateMeRequest returns an encoder for requests sent to the users
// update_me server.
func EncodeUpdateMeRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*users.UpdateMePayload)
		if !ok {
			return goahttp.ErrInvalidType("users", "update_me", "*users.UpdateMePayload", v)
		}
		if p.JWT != nil {
			head := *p.JWT
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		body := NewUpdateMeRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("users", "update_me", err)
		}
		return nil
	}
}

// DecodeUpdateMeResponse returns a decoder for responses returned by the users
// update_me endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeUpdateMeResponse may return the following errors:
//   - "bad_request" (type *users.BadRequestError): http.StatusBadRequest
//   - "conflict" (type *users.ConflictError): http.StatusConflict
//   - "forbidden" (type *users.ForbiddenError): http.StatusForbidden
//   - "internal_error" (type *users.InternalServerError): http.StatusInternalServerError
//   - "not_found" (type *users.NotFoundError): http.StatusNotFound
//   - "unauthorized" (type *users.UnauthorizedError): http.StatusUnauthorized
//   - error: internal error
func DecodeUpdateMeResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body UpdateMeResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "update_me", err)
			}
			err = ValidateUpdateMeResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "update_me", err)
			}
			res := NewUpdateMeUserOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body UpdateMeBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "update_me", err)
			}
			err = ValidateUpdateMeBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "update_me", err)
			}
			return nil, NewUpdateMeBadRequest(&body)
		case http.StatusConflict:
			var (
				body UpdateMeConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "update_me", err)
			}
			err = ValidateUpdateMeConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "update_me", err)
			}
			return nil, NewUpdateMeConflict(&body)
		case http.StatusForbidden:
			var (
				body UpdateMeForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "update_me", err)
			}
			err = ValidateUpdateMeForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "update_me", err)
			}
			return nil, NewUpdateMeForbidden(&body)
		case http.StatusInternalServerError:
			var (
				body UpdateMeInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "update_me", err)
			}
			err = ValidateUpdateMeInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "update_me", err)
			}
			return nil, NewUpdateMeInternalError(&body)
		case http.StatusNotFound:
			var (
				body UpdateMeNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "update_me", err)
			}
			err = ValidateUpdateMeNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "update_me", err)
			}
			return nil, NewUpdateMeNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body UpdateMeUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "update_me", err)
			}
			err = ValidateUpdateMeUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "update_me", err)
			}
			return nil, NewUpdateMeUnauthorized(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("users", "update_me", resp.StatusCode, string(body))
		}
	}
}

// BuildUpdatePasswordRequest instantiates a HTTP request object with method
// and path set to call the "users" service "update_password" endpoint
func (c *Client) BuildUpdatePasswordRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpdatePasswordUsersPath()}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("users", "update_password", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpdatePasswordRequest returns an encoder for requests sent to the
// users update_password server.
func EncodeUpdatePasswordRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*users.UpdatePasswordPayload)
		if !ok {
			return goahttp.ErrInvalidType("users", "update_password", "*users.UpdatePasswordPayload", v)
		}
		if p.JWT != nil {
			head := *p.JWT
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		body := NewUpdatePasswordRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("users", "update_password", err)
		}
		return nil
	}
}

// DecodeUpdatePasswordResponse returns a decoder for responses returned by the
// users update_password endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeUpdatePasswordResponse may return the following errors:
//   - "bad_request" (type *users.BadRequestError): http.StatusBadRequest
//   - "conflict" (type *users.ConflictError): http.StatusConflict
//   - "forbidden" (type *users.ForbiddenError): http.StatusForbidden
//   - "internal_error" (type *users.InternalServerError): http.StatusInternalServerError
//   - "not_found" (type *users.NotFoundError): http.StatusNotFound
//   - "unauthorized" (type *users.UnauthorizedError): http.StatusUnauthorized
//   - error: internal error
func DecodeUpdatePasswordResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body UpdatePasswordResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "update_password", err)
			}
			err = ValidateUpdatePasswordResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "update_password", err)
			}
			res := NewUpdatePasswordResultOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body UpdatePasswordBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "update_password", err)
			}
			err = ValidateUpdatePasswordBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "update_password", err)
			}
			return nil, NewUpdatePasswordBadRequest(&body)
		case http.StatusConflict:
			var (
				body UpdatePasswordConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "update_password", err)
			}
			err = ValidateUpdatePasswordConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "update_password", err)
			}
			return nil, NewUpdatePasswordConflict(&body)
		case http.StatusForbidden:
			var (
				body UpdatePasswordForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "update_password", err)
			}
			err = ValidateUpdatePasswordForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "update_password", err)
			}
			return nil, NewUpdatePasswordForbidden(&body)
		case http.StatusInternalServerError:
			var (
				body UpdatePasswordInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "update_password", err)
			}
			err = ValidateUpdatePasswordInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "update_password", err)
			}
			return nil, NewUpdatePasswordInternalError(&body)
		case http.StatusNotFound:
			var (
				body UpdatePasswordNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "update_password", err)
			}
			err = ValidateUpdatePasswordNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "update_password", err)
			}
			return nil, NewUpdatePasswordNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body UpdatePasswordUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "update_password", err)
			}
			err = ValidateUpdatePasswordUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "update_password", err)
			}
			return nil, NewUpdatePasswordUnauthorized(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("users", "update_password", resp.StatusCode, string(body))
		}
	}
}

// BuildGetSessionsRequest instantiates a HTTP request object with method and
// path set to call the "users" service "get_sessions" endpoint
func (c *Client) BuildGetSessionsRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetSessionsUsersPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("users", "get_sessions", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetSessionsRequest returns an encoder for requests sent to the users
// get_sessions server.
func EncodeGetSessionsRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*users.GetSessionsPayload)
		if !ok {
			return goahttp.ErrInvalidType("users", "get_sessions", "*users.GetSessionsPayload", v)
		}
		if p.JWT != nil {
			head := *p.JWT
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeGetSessionsResponse returns a decoder for responses returned by the
// users get_sessions endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeGetSessionsResponse may return the following errors:
//   - "bad_request" (type *users.BadRequestError): http.StatusBadRequest
//   - "conflict" (type *users.ConflictError): http.StatusConflict
//   - "forbidden" (type *users.ForbiddenError): http.StatusForbidden
//   - "internal_error" (type *users.InternalServerError): http.StatusInternalServerError
//   - "not_found" (type *users.NotFoundError): http.StatusNotFound
//   - "unauthorized" (type *users.UnauthorizedError): http.StatusUnauthorized
//   - error: internal error
func DecodeGetSessionsResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetSessionsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "get_sessions", err)
			}
			err = ValidateGetSessionsResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "get_sessions", err)
			}
			res := NewGetSessionsGetUserSessionResponseOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body GetSessionsBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "get_sessions", err)
			}
			err = ValidateGetSessionsBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "get_sessions", err)
			}
			return nil, NewGetSessionsBadRequest(&body)
		case http.StatusConflict:
			var (
				body GetSessionsConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "get_sessions", err)
			}
			err = ValidateGetSessionsConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "get_sessions", err)
			}
			return nil, NewGetSessionsConflict(&body)
		case http.StatusForbidden:
			var (
				body GetSessionsForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "get_sessions", err)
			}
			err = ValidateGetSessionsForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "get_sessions", err)
			}
			return nil, NewGetSessionsForbidden(&body)
		case http.StatusInternalServerError:
			var (
				body GetSessionsInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "get_sessions", err)
			}
			err = ValidateGetSessionsInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "get_sessions", err)
			}
			return nil, NewGetSessionsInternalError(&body)
		case http.StatusNotFound:
			var (
				body GetSessionsNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "get_sessions", err)
			}
			err = ValidateGetSessionsNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "get_sessions", err)
			}
			return nil, NewGetSessionsNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body GetSessionsUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "get_sessions", err)
			}
			err = ValidateGetSessionsUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "get_sessions", err)
			}
			return nil, NewGetSessionsUnauthorized(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("users", "get_sessions", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteSessionRequest instantiates a HTTP request object with method and
// path set to call the "users" service "delete_session" endpoint
func (c *Client) BuildDeleteSessionRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		sessionID string
	)
	{
		p, ok := v.(*users.DeleteSessionPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("users", "delete_session", "*users.DeleteSessionPayload", v)
		}
		sessionID = p.SessionID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteSessionUsersPath(sessionID)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("users", "delete_session", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDeleteSessionRequest returns an encoder for requests sent to the users
// delete_session server.
func EncodeDeleteSessionRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*users.DeleteSessionPayload)
		if !ok {
			return goahttp.ErrInvalidType("users", "delete_session", "*users.DeleteSessionPayload", v)
		}
		if p.JWT != nil {
			head := *p.JWT
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeDeleteSessionResponse returns a decoder for responses returned by the
// users delete_session endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeDeleteSessionResponse may return the following errors:
//   - "bad_request" (type *users.BadRequestError): http.StatusBadRequest
//   - "conflict" (type *users.ConflictError): http.StatusConflict
//   - "forbidden" (type *users.ForbiddenError): http.StatusForbidden
//   - "internal_error" (type *users.InternalServerError): http.StatusInternalServerError
//   - "not_found" (type *users.NotFoundError): http.StatusNotFound
//   - "unauthorized" (type *users.UnauthorizedError): http.StatusUnauthorized
//   - error: internal error
func DecodeDeleteSessionResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			return nil, nil
		case http.StatusBadRequest:
			var (
				body DeleteSessionBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "delete_session", err)
			}
			err = ValidateDeleteSessionBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "delete_session", err)
			}
			return nil, NewDeleteSessionBadRequest(&body)
		case http.StatusConflict:
			var (
				body DeleteSessionConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "delete_session", err)
			}
			err = ValidateDeleteSessionConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "delete_session", err)
			}
			return nil, NewDeleteSessionConflict(&body)
		case http.StatusForbidden:
			var (
				body DeleteSessionForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "delete_session", err)
			}
			err = ValidateDeleteSessionForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "delete_session", err)
			}
			return nil, NewDeleteSessionForbidden(&body)
		case http.StatusInternalServerError:
			var (
				body DeleteSessionInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "delete_session", err)
			}
			err = ValidateDeleteSessionInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "delete_session", err)
			}
			return nil, NewDeleteSessionInternalError(&body)
		case http.StatusNotFound:
			var (
				body DeleteSessionNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "delete_session", err)
			}
			err = ValidateDeleteSessionNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "delete_session", err)
			}
			return nil, NewDeleteSessionNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body DeleteSessionUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "delete_session", err)
			}
			err = ValidateDeleteSessionUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "delete_session", err)
			}
			return nil, NewDeleteSessionUnauthorized(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("users", "delete_session", resp.StatusCode, string(body))
		}
	}
}

// BuildGetOrganizationsRequest instantiates a HTTP request object with method
// and path set to call the "users" service "get_organizations" endpoint
func (c *Client) BuildGetOrganizationsRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(*users.GetOrganizationsPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("users", "get_organizations", "*users.GetOrganizationsPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetOrganizationsUsersPath(id)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("users", "get_organizations", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetOrganizationsRequest returns an encoder for requests sent to the
// users get_organizations server.
func EncodeGetOrganizationsRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*users.GetOrganizationsPayload)
		if !ok {
			return goahttp.ErrInvalidType("users", "get_organizations", "*users.GetOrganizationsPayload", v)
		}
		if p.JWT != nil {
			head := *p.JWT
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeGetOrganizationsResponse returns a decoder for responses returned by
// the users get_organizations endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeGetOrganizationsResponse may return the following errors:
//   - "bad_request" (type *users.BadRequestError): http.StatusBadRequest
//   - "conflict" (type *users.ConflictError): http.StatusConflict
//   - "forbidden" (type *users.ForbiddenError): http.StatusForbidden
//   - "internal_error" (type *users.InternalServerError): http.StatusInternalServerError
//   - "not_found" (type *users.NotFoundError): http.StatusNotFound
//   - "unauthorized" (type *users.UnauthorizedError): http.StatusUnauthorized
//   - error: internal error
func DecodeGetOrganizationsResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetOrganizationsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "get_organizations", err)
			}
			err = ValidateGetOrganizationsResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "get_organizations", err)
			}
			res := NewGetOrganizationsResultOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body GetOrganizationsBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "get_organizations", err)
			}
			err = ValidateGetOrganizationsBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "get_organizations", err)
			}
			return nil, NewGetOrganizationsBadRequest(&body)
		case http.StatusConflict:
			var (
				body GetOrganizationsConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "get_organizations", err)
			}
			err = ValidateGetOrganizationsConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "get_organizations", err)
			}
			return nil, NewGetOrganizationsConflict(&body)
		case http.StatusForbidden:
			var (
				body GetOrganizationsForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "get_organizations", err)
			}
			err = ValidateGetOrganizationsForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "get_organizations", err)
			}
			return nil, NewGetOrganizationsForbidden(&body)
		case http.StatusInternalServerError:
			var (
				body GetOrganizationsInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "get_organizations", err)
			}
			err = ValidateGetOrganizationsInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "get_organizations", err)
			}
			return nil, NewGetOrganizationsInternalError(&body)
		case http.StatusNotFound:
			var (
				body GetOrganizationsNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "get_organizations", err)
			}
			err = ValidateGetOrganizationsNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "get_organizations", err)
			}
			return nil, NewGetOrganizationsNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body GetOrganizationsUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "get_organizations", err)
			}
			err = ValidateGetOrganizationsUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "get_organizations", err)
			}
			return nil, NewGetOrganizationsUnauthorized(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("users", "get_organizations", resp.StatusCode, string(body))
		}
	}
}

// unmarshalUserResponseBodyToDesigntypesUser builds a value of type
// *designtypes.User from a value of type *UserResponseBody.
func unmarshalUserResponseBodyToDesigntypesUser(v *UserResponseBody) *designtypes.User {
	res := &designtypes.User{
		Active:          *v.Active,
		EmailVerified:   *v.EmailVerified,
		PhoneVerified:   v.PhoneVerified,
		ProfileImageURL: v.ProfileImageURL,
		FirstName:       v.FirstName,
		LastName:        v.LastName,
		PhoneNumber:     v.PhoneNumber,
		Email:           *v.Email,
	}
	if v.Locale != nil {
		res.Locale = *v.Locale
	}
	if v.Metadata != nil {
		res.Metadata = make(map[string]any, len(v.Metadata))
		for key, val := range v.Metadata {
			tk := key
			tv := val
			res.Metadata[tk] = tv
		}
	}
	if v.Locale == nil {
		res.Locale = "en"
	}

	return res
}

// unmarshalPaginationResponseBodyToDesigntypesPagination builds a value of
// type *designtypes.Pagination from a value of type *PaginationResponseBody.
func unmarshalPaginationResponseBodyToDesigntypesPagination(v *PaginationResponseBody) *designtypes.Pagination {
	res := &designtypes.Pagination{
		Offset:      *v.Offset,
		Limit:       *v.Limit,
		Total:       *v.Total,
		TotalPages:  *v.TotalPages,
		CurrentPage: *v.CurrentPage,
		HasNext:     *v.HasNext,
		HasPrevious: *v.HasPrevious,
	}

	return res
}

// marshalDesigntypesUpdateUserRequestToUpdateUserRequestRequestBody builds a
// value of type *UpdateUserRequestRequestBody from a value of type
// *designtypes.UpdateUserRequest.
func marshalDesigntypesUpdateUserRequestToUpdateUserRequestRequestBody(v *designtypes.UpdateUserRequest) *UpdateUserRequestRequestBody {
	res := &UpdateUserRequestRequestBody{
		PhoneNumber:           v.PhoneNumber,
		FirstName:             v.FirstName,
		LastName:              v.LastName,
		ProfileImageURL:       v.ProfileImageURL,
		Locale:                v.Locale,
		Active:                v.Active,
		PrimaryOrganizationID: v.PrimaryOrganizationID,
	}
	if v.Metadata != nil {
		res.Metadata = make(map[string]any, len(v.Metadata))
		for key, val := range v.Metadata {
			tk := key
			tv := val
			res.Metadata[tk] = tv
		}
	}

	return res
}

// marshalUpdateUserRequestRequestBodyToDesigntypesUpdateUserRequest builds a
// value of type *designtypes.UpdateUserRequest from a value of type
// *UpdateUserRequestRequestBody.
func marshalUpdateUserRequestRequestBodyToDesigntypesUpdateUserRequest(v *UpdateUserRequestRequestBody) *designtypes.UpdateUserRequest {
	res := &designtypes.UpdateUserRequest{
		PhoneNumber:           v.PhoneNumber,
		FirstName:             v.FirstName,
		LastName:              v.LastName,
		ProfileImageURL:       v.ProfileImageURL,
		Locale:                v.Locale,
		Active:                v.Active,
		PrimaryOrganizationID: v.PrimaryOrganizationID,
	}
	if v.Metadata != nil {
		res.Metadata = make(map[string]any, len(v.Metadata))
		for key, val := range v.Metadata {
			tk := key
			tv := val
			res.Metadata[tk] = tv
		}
	}

	return res
}

// unmarshalSessionResponseBodyToDesigntypesSession builds a value of type
// *designtypes.Session from a value of type *SessionResponseBody.
func unmarshalSessionResponseBodyToDesigntypesSession(v *SessionResponseBody) *designtypes.Session {
	res := &designtypes.Session{
		UserID:         v.UserID,
		DeviceID:       v.DeviceID,
		IPAddress:      v.IPAddress,
		UserAgent:      v.UserAgent,
		Location:       v.Location,
		Token:          v.Token,
		OrganizationID: v.OrganizationID,
		IsActive:       v.IsActive,
		LastActiveAt:   v.LastActiveAt,
		ExpiresAt:      *v.ExpiresAt,
		ID:             *v.ID,
		CreatedAt:      *v.CreatedAt,
		UpdatedAt:      *v.UpdatedAt,
	}
	if v.Metadata != nil {
		res.Metadata = make(map[string]any, len(v.Metadata))
		for key, val := range v.Metadata {
			tk := key
			tv := val
			res.Metadata[tk] = tv
		}
	}

	return res
}

// unmarshalOrganizationResponseResponseBodyToUsersOrganizationResponse builds
// a value of type *users.OrganizationResponse from a value of type
// *OrganizationResponseResponseBody.
func unmarshalOrganizationResponseResponseBodyToUsersOrganizationResponse(v *OrganizationResponseResponseBody) *users.OrganizationResponse {
	res := &users.OrganizationResponse{
		ID:          *v.ID,
		Name:        *v.Name,
		Slug:        *v.Slug,
		Domain:      v.Domain,
		LogoURL:     v.LogoURL,
		Plan:        v.Plan,
		Active:      *v.Active,
		TrialEndsAt: v.TrialEndsAt,
		TrialUsed:   v.TrialUsed,
		CreatedAt:   *v.CreatedAt,
		UpdatedAt:   *v.UpdatedAt,
	}
	if v.Metadata != nil {
		res.Metadata = make(map[string]any, len(v.Metadata))
		for key, val := range v.Metadata {
			tk := key
			tv := val
			res.Metadata[tk] = tv
		}
	}

	return res
}
