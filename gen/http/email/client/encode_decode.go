// Code generated by goa v3.20.0, DO NOT EDIT.
//
// email HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/juicycleff/frank/design -o .

package client

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	designtypes "github.com/juicycleff/frank/gen/designtypes"
	email "github.com/juicycleff/frank/gen/email"
	goahttp "goa.design/goa/v3/http"
)

// BuildListTemplatesRequest instantiates a HTTP request object with method and
// path set to call the "email" service "list_templates" endpoint
func (c *Client) BuildListTemplatesRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListTemplatesEmailPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("email", "list_templates", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeListTemplatesRequest returns an encoder for requests sent to the email
// list_templates server.
func EncodeListTemplatesRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*email.ListTemplatesPayload)
		if !ok {
			return goahttp.ErrInvalidType("email", "list_templates", "*email.ListTemplatesPayload", v)
		}
		if p.JWT != nil {
			head := *p.JWT
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		values := req.URL.Query()
		values.Add("offset", fmt.Sprintf("%v", p.Offset))
		values.Add("limit", fmt.Sprintf("%v", p.Limit))
		if p.Type != nil {
			values.Add("type", *p.Type)
		}
		if p.OrganizationID != nil {
			values.Add("organization_id", *p.OrganizationID)
		}
		if p.Locale != nil {
			values.Add("locale", *p.Locale)
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeListTemplatesResponse returns a decoder for responses returned by the
// email list_templates endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeListTemplatesResponse may return the following errors:
//   - "bad_request" (type *email.BadRequestError): http.StatusBadRequest
//   - "forbidden" (type *email.ForbiddenError): http.StatusForbidden
//   - "internal_error" (type *email.InternalServerError): http.StatusInternalServerError
//   - "not_found" (type *email.NotFoundError): http.StatusNotFound
//   - "unauthorized" (type *email.UnauthorizedError): http.StatusUnauthorized
//   - error: internal error
func DecodeListTemplatesResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListTemplatesResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("email", "list_templates", err)
			}
			err = ValidateListTemplatesResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("email", "list_templates", err)
			}
			res := NewListTemplatesResultOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body ListTemplatesBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("email", "list_templates", err)
			}
			err = ValidateListTemplatesBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("email", "list_templates", err)
			}
			return nil, NewListTemplatesBadRequest(&body)
		case http.StatusForbidden:
			var (
				body ListTemplatesForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("email", "list_templates", err)
			}
			err = ValidateListTemplatesForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("email", "list_templates", err)
			}
			return nil, NewListTemplatesForbidden(&body)
		case http.StatusInternalServerError:
			var (
				body ListTemplatesInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("email", "list_templates", err)
			}
			err = ValidateListTemplatesInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("email", "list_templates", err)
			}
			return nil, NewListTemplatesInternalError(&body)
		case http.StatusNotFound:
			var (
				body ListTemplatesNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("email", "list_templates", err)
			}
			err = ValidateListTemplatesNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("email", "list_templates", err)
			}
			return nil, NewListTemplatesNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body ListTemplatesUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("email", "list_templates", err)
			}
			err = ValidateListTemplatesUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("email", "list_templates", err)
			}
			return nil, NewListTemplatesUnauthorized(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("email", "list_templates", resp.StatusCode, string(body))
		}
	}
}

// BuildCreateTemplateRequest instantiates a HTTP request object with method
// and path set to call the "email" service "create_template" endpoint
func (c *Client) BuildCreateTemplateRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateTemplateEmailPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("email", "create_template", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateTemplateRequest returns an encoder for requests sent to the
// email create_template server.
func EncodeCreateTemplateRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*email.CreateTemplatePayload)
		if !ok {
			return goahttp.ErrInvalidType("email", "create_template", "*email.CreateTemplatePayload", v)
		}
		if p.JWT != nil {
			head := *p.JWT
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		body := NewCreateTemplateRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("email", "create_template", err)
		}
		return nil
	}
}

// DecodeCreateTemplateResponse returns a decoder for responses returned by the
// email create_template endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeCreateTemplateResponse may return the following errors:
//   - "bad_request" (type *email.BadRequestError): http.StatusBadRequest
//   - "forbidden" (type *email.ForbiddenError): http.StatusForbidden
//   - "internal_error" (type *email.InternalServerError): http.StatusInternalServerError
//   - "not_found" (type *email.NotFoundError): http.StatusNotFound
//   - "unauthorized" (type *email.UnauthorizedError): http.StatusUnauthorized
//   - error: internal error
func DecodeCreateTemplateResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body CreateTemplateResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("email", "create_template", err)
			}
			err = ValidateCreateTemplateResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("email", "create_template", err)
			}
			res := NewCreateTemplateEmailTemplateResponseCreated(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body CreateTemplateBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("email", "create_template", err)
			}
			err = ValidateCreateTemplateBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("email", "create_template", err)
			}
			return nil, NewCreateTemplateBadRequest(&body)
		case http.StatusForbidden:
			var (
				body CreateTemplateForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("email", "create_template", err)
			}
			err = ValidateCreateTemplateForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("email", "create_template", err)
			}
			return nil, NewCreateTemplateForbidden(&body)
		case http.StatusInternalServerError:
			var (
				body CreateTemplateInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("email", "create_template", err)
			}
			err = ValidateCreateTemplateInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("email", "create_template", err)
			}
			return nil, NewCreateTemplateInternalError(&body)
		case http.StatusNotFound:
			var (
				body CreateTemplateNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("email", "create_template", err)
			}
			err = ValidateCreateTemplateNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("email", "create_template", err)
			}
			return nil, NewCreateTemplateNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body CreateTemplateUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("email", "create_template", err)
			}
			err = ValidateCreateTemplateUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("email", "create_template", err)
			}
			return nil, NewCreateTemplateUnauthorized(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("email", "create_template", resp.StatusCode, string(body))
		}
	}
}

// BuildGetTemplateRequest instantiates a HTTP request object with method and
// path set to call the "email" service "get_template" endpoint
func (c *Client) BuildGetTemplateRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(*email.GetTemplatePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("email", "get_template", "*email.GetTemplatePayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetTemplateEmailPath(id)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("email", "get_template", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetTemplateRequest returns an encoder for requests sent to the email
// get_template server.
func EncodeGetTemplateRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*email.GetTemplatePayload)
		if !ok {
			return goahttp.ErrInvalidType("email", "get_template", "*email.GetTemplatePayload", v)
		}
		if p.JWT != nil {
			head := *p.JWT
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeGetTemplateResponse returns a decoder for responses returned by the
// email get_template endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeGetTemplateResponse may return the following errors:
//   - "bad_request" (type *email.BadRequestError): http.StatusBadRequest
//   - "forbidden" (type *email.ForbiddenError): http.StatusForbidden
//   - "internal_error" (type *email.InternalServerError): http.StatusInternalServerError
//   - "not_found" (type *email.NotFoundError): http.StatusNotFound
//   - "unauthorized" (type *email.UnauthorizedError): http.StatusUnauthorized
//   - error: internal error
func DecodeGetTemplateResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetTemplateResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("email", "get_template", err)
			}
			err = ValidateGetTemplateResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("email", "get_template", err)
			}
			res := NewGetTemplateEmailTemplateResponseOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body GetTemplateBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("email", "get_template", err)
			}
			err = ValidateGetTemplateBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("email", "get_template", err)
			}
			return nil, NewGetTemplateBadRequest(&body)
		case http.StatusForbidden:
			var (
				body GetTemplateForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("email", "get_template", err)
			}
			err = ValidateGetTemplateForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("email", "get_template", err)
			}
			return nil, NewGetTemplateForbidden(&body)
		case http.StatusInternalServerError:
			var (
				body GetTemplateInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("email", "get_template", err)
			}
			err = ValidateGetTemplateInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("email", "get_template", err)
			}
			return nil, NewGetTemplateInternalError(&body)
		case http.StatusNotFound:
			var (
				body GetTemplateNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("email", "get_template", err)
			}
			err = ValidateGetTemplateNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("email", "get_template", err)
			}
			return nil, NewGetTemplateNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body GetTemplateUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("email", "get_template", err)
			}
			err = ValidateGetTemplateUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("email", "get_template", err)
			}
			return nil, NewGetTemplateUnauthorized(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("email", "get_template", resp.StatusCode, string(body))
		}
	}
}

// BuildGetTemplateByTypeRequest instantiates a HTTP request object with method
// and path set to call the "email" service "get_template_by_type" endpoint
func (c *Client) BuildGetTemplateByTypeRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		type_ string
	)
	{
		p, ok := v.(*email.GetTemplateByTypePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("email", "get_template_by_type", "*email.GetTemplateByTypePayload", v)
		}
		type_ = p.Type
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetTemplateByTypeEmailPath(type_)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("email", "get_template_by_type", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetTemplateByTypeRequest returns an encoder for requests sent to the
// email get_template_by_type server.
func EncodeGetTemplateByTypeRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*email.GetTemplateByTypePayload)
		if !ok {
			return goahttp.ErrInvalidType("email", "get_template_by_type", "*email.GetTemplateByTypePayload", v)
		}
		if p.JWT != nil {
			head := *p.JWT
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		values := req.URL.Query()
		if p.OrganizationID != nil {
			values.Add("organization_id", *p.OrganizationID)
		}
		values.Add("locale", p.Locale)
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeGetTemplateByTypeResponse returns a decoder for responses returned by
// the email get_template_by_type endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeGetTemplateByTypeResponse may return the following errors:
//   - "bad_request" (type *email.BadRequestError): http.StatusBadRequest
//   - "forbidden" (type *email.ForbiddenError): http.StatusForbidden
//   - "internal_error" (type *email.InternalServerError): http.StatusInternalServerError
//   - "not_found" (type *email.NotFoundError): http.StatusNotFound
//   - "unauthorized" (type *email.UnauthorizedError): http.StatusUnauthorized
//   - error: internal error
func DecodeGetTemplateByTypeResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetTemplateByTypeResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("email", "get_template_by_type", err)
			}
			err = ValidateGetTemplateByTypeResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("email", "get_template_by_type", err)
			}
			res := NewGetTemplateByTypeEmailTemplateResponseOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body GetTemplateByTypeBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("email", "get_template_by_type", err)
			}
			err = ValidateGetTemplateByTypeBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("email", "get_template_by_type", err)
			}
			return nil, NewGetTemplateByTypeBadRequest(&body)
		case http.StatusForbidden:
			var (
				body GetTemplateByTypeForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("email", "get_template_by_type", err)
			}
			err = ValidateGetTemplateByTypeForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("email", "get_template_by_type", err)
			}
			return nil, NewGetTemplateByTypeForbidden(&body)
		case http.StatusInternalServerError:
			var (
				body GetTemplateByTypeInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("email", "get_template_by_type", err)
			}
			err = ValidateGetTemplateByTypeInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("email", "get_template_by_type", err)
			}
			return nil, NewGetTemplateByTypeInternalError(&body)
		case http.StatusNotFound:
			var (
				body GetTemplateByTypeNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("email", "get_template_by_type", err)
			}
			err = ValidateGetTemplateByTypeNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("email", "get_template_by_type", err)
			}
			return nil, NewGetTemplateByTypeNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body GetTemplateByTypeUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("email", "get_template_by_type", err)
			}
			err = ValidateGetTemplateByTypeUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("email", "get_template_by_type", err)
			}
			return nil, NewGetTemplateByTypeUnauthorized(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("email", "get_template_by_type", resp.StatusCode, string(body))
		}
	}
}

// BuildUpdateTemplateRequest instantiates a HTTP request object with method
// and path set to call the "email" service "update_template" endpoint
func (c *Client) BuildUpdateTemplateRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(*email.UpdateTemplatePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("email", "update_template", "*email.UpdateTemplatePayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpdateTemplateEmailPath(id)}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("email", "update_template", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpdateTemplateRequest returns an encoder for requests sent to the
// email update_template server.
func EncodeUpdateTemplateRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*email.UpdateTemplatePayload)
		if !ok {
			return goahttp.ErrInvalidType("email", "update_template", "*email.UpdateTemplatePayload", v)
		}
		if p.JWT != nil {
			head := *p.JWT
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		body := NewUpdateTemplateRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("email", "update_template", err)
		}
		return nil
	}
}

// DecodeUpdateTemplateResponse returns a decoder for responses returned by the
// email update_template endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeUpdateTemplateResponse may return the following errors:
//   - "bad_request" (type *email.BadRequestError): http.StatusBadRequest
//   - "forbidden" (type *email.ForbiddenError): http.StatusForbidden
//   - "internal_error" (type *email.InternalServerError): http.StatusInternalServerError
//   - "not_found" (type *email.NotFoundError): http.StatusNotFound
//   - "unauthorized" (type *email.UnauthorizedError): http.StatusUnauthorized
//   - error: internal error
func DecodeUpdateTemplateResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body UpdateTemplateResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("email", "update_template", err)
			}
			err = ValidateUpdateTemplateResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("email", "update_template", err)
			}
			res := NewUpdateTemplateEmailTemplateResponseOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body UpdateTemplateBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("email", "update_template", err)
			}
			err = ValidateUpdateTemplateBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("email", "update_template", err)
			}
			return nil, NewUpdateTemplateBadRequest(&body)
		case http.StatusForbidden:
			var (
				body UpdateTemplateForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("email", "update_template", err)
			}
			err = ValidateUpdateTemplateForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("email", "update_template", err)
			}
			return nil, NewUpdateTemplateForbidden(&body)
		case http.StatusInternalServerError:
			var (
				body UpdateTemplateInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("email", "update_template", err)
			}
			err = ValidateUpdateTemplateInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("email", "update_template", err)
			}
			return nil, NewUpdateTemplateInternalError(&body)
		case http.StatusNotFound:
			var (
				body UpdateTemplateNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("email", "update_template", err)
			}
			err = ValidateUpdateTemplateNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("email", "update_template", err)
			}
			return nil, NewUpdateTemplateNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body UpdateTemplateUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("email", "update_template", err)
			}
			err = ValidateUpdateTemplateUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("email", "update_template", err)
			}
			return nil, NewUpdateTemplateUnauthorized(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("email", "update_template", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteTemplateRequest instantiates a HTTP request object with method
// and path set to call the "email" service "delete_template" endpoint
func (c *Client) BuildDeleteTemplateRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(*email.DeleteTemplatePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("email", "delete_template", "*email.DeleteTemplatePayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteTemplateEmailPath(id)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("email", "delete_template", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDeleteTemplateRequest returns an encoder for requests sent to the
// email delete_template server.
func EncodeDeleteTemplateRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*email.DeleteTemplatePayload)
		if !ok {
			return goahttp.ErrInvalidType("email", "delete_template", "*email.DeleteTemplatePayload", v)
		}
		if p.JWT != nil {
			head := *p.JWT
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeDeleteTemplateResponse returns a decoder for responses returned by the
// email delete_template endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeDeleteTemplateResponse may return the following errors:
//   - "bad_request" (type *email.BadRequestError): http.StatusBadRequest
//   - "forbidden" (type *email.ForbiddenError): http.StatusForbidden
//   - "internal_error" (type *email.InternalServerError): http.StatusInternalServerError
//   - "not_found" (type *email.NotFoundError): http.StatusNotFound
//   - "unauthorized" (type *email.UnauthorizedError): http.StatusUnauthorized
//   - error: internal error
func DecodeDeleteTemplateResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			return nil, nil
		case http.StatusBadRequest:
			var (
				body DeleteTemplateBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("email", "delete_template", err)
			}
			err = ValidateDeleteTemplateBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("email", "delete_template", err)
			}
			return nil, NewDeleteTemplateBadRequest(&body)
		case http.StatusForbidden:
			var (
				body DeleteTemplateForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("email", "delete_template", err)
			}
			err = ValidateDeleteTemplateForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("email", "delete_template", err)
			}
			return nil, NewDeleteTemplateForbidden(&body)
		case http.StatusInternalServerError:
			var (
				body DeleteTemplateInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("email", "delete_template", err)
			}
			err = ValidateDeleteTemplateInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("email", "delete_template", err)
			}
			return nil, NewDeleteTemplateInternalError(&body)
		case http.StatusNotFound:
			var (
				body DeleteTemplateNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("email", "delete_template", err)
			}
			err = ValidateDeleteTemplateNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("email", "delete_template", err)
			}
			return nil, NewDeleteTemplateNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body DeleteTemplateUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("email", "delete_template", err)
			}
			err = ValidateDeleteTemplateUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("email", "delete_template", err)
			}
			return nil, NewDeleteTemplateUnauthorized(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("email", "delete_template", resp.StatusCode, string(body))
		}
	}
}

// BuildSendRequest instantiates a HTTP request object with method and path set
// to call the "email" service "send" endpoint
func (c *Client) BuildSendRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: SendEmailPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("email", "send", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeSendRequest returns an encoder for requests sent to the email send
// server.
func EncodeSendRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*email.SendPayload)
		if !ok {
			return goahttp.ErrInvalidType("email", "send", "*email.SendPayload", v)
		}
		if p.JWT != nil {
			head := *p.JWT
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		body := NewSendRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("email", "send", err)
		}
		return nil
	}
}

// DecodeSendResponse returns a decoder for responses returned by the email
// send endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeSendResponse may return the following errors:
//   - "bad_request" (type *email.BadRequestError): http.StatusBadRequest
//   - "forbidden" (type *email.ForbiddenError): http.StatusForbidden
//   - "internal_error" (type *email.InternalServerError): http.StatusInternalServerError
//   - "not_found" (type *email.NotFoundError): http.StatusNotFound
//   - "unauthorized" (type *email.UnauthorizedError): http.StatusUnauthorized
//   - error: internal error
func DecodeSendResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body SendResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("email", "send", err)
			}
			err = ValidateSendResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("email", "send", err)
			}
			res := NewSendResultOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body SendBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("email", "send", err)
			}
			err = ValidateSendBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("email", "send", err)
			}
			return nil, NewSendBadRequest(&body)
		case http.StatusForbidden:
			var (
				body SendForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("email", "send", err)
			}
			err = ValidateSendForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("email", "send", err)
			}
			return nil, NewSendForbidden(&body)
		case http.StatusInternalServerError:
			var (
				body SendInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("email", "send", err)
			}
			err = ValidateSendInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("email", "send", err)
			}
			return nil, NewSendInternalError(&body)
		case http.StatusNotFound:
			var (
				body SendNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("email", "send", err)
			}
			err = ValidateSendNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("email", "send", err)
			}
			return nil, NewSendNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body SendUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("email", "send", err)
			}
			err = ValidateSendUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("email", "send", err)
			}
			return nil, NewSendUnauthorized(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("email", "send", resp.StatusCode, string(body))
		}
	}
}

// BuildSendTemplateRequest instantiates a HTTP request object with method and
// path set to call the "email" service "send_template" endpoint
func (c *Client) BuildSendTemplateRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: SendTemplateEmailPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("email", "send_template", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeSendTemplateRequest returns an encoder for requests sent to the email
// send_template server.
func EncodeSendTemplateRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*email.SendTemplatePayload)
		if !ok {
			return goahttp.ErrInvalidType("email", "send_template", "*email.SendTemplatePayload", v)
		}
		if p.JWT != nil {
			head := *p.JWT
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		body := NewSendTemplateRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("email", "send_template", err)
		}
		return nil
	}
}

// DecodeSendTemplateResponse returns a decoder for responses returned by the
// email send_template endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeSendTemplateResponse may return the following errors:
//   - "bad_request" (type *email.BadRequestError): http.StatusBadRequest
//   - "forbidden" (type *email.ForbiddenError): http.StatusForbidden
//   - "internal_error" (type *email.InternalServerError): http.StatusInternalServerError
//   - "not_found" (type *email.NotFoundError): http.StatusNotFound
//   - "unauthorized" (type *email.UnauthorizedError): http.StatusUnauthorized
//   - error: internal error
func DecodeSendTemplateResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body SendTemplateResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("email", "send_template", err)
			}
			err = ValidateSendTemplateResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("email", "send_template", err)
			}
			res := NewSendTemplateResultOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body SendTemplateBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("email", "send_template", err)
			}
			err = ValidateSendTemplateBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("email", "send_template", err)
			}
			return nil, NewSendTemplateBadRequest(&body)
		case http.StatusForbidden:
			var (
				body SendTemplateForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("email", "send_template", err)
			}
			err = ValidateSendTemplateForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("email", "send_template", err)
			}
			return nil, NewSendTemplateForbidden(&body)
		case http.StatusInternalServerError:
			var (
				body SendTemplateInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("email", "send_template", err)
			}
			err = ValidateSendTemplateInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("email", "send_template", err)
			}
			return nil, NewSendTemplateInternalError(&body)
		case http.StatusNotFound:
			var (
				body SendTemplateNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("email", "send_template", err)
			}
			err = ValidateSendTemplateNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("email", "send_template", err)
			}
			return nil, NewSendTemplateNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body SendTemplateUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("email", "send_template", err)
			}
			err = ValidateSendTemplateUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("email", "send_template", err)
			}
			return nil, NewSendTemplateUnauthorized(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("email", "send_template", resp.StatusCode, string(body))
		}
	}
}

// unmarshalEmailTemplateResponseResponseBodyToEmailEmailTemplateResponse
// builds a value of type *email.EmailTemplateResponse from a value of type
// *EmailTemplateResponseResponseBody.
func unmarshalEmailTemplateResponseResponseBodyToEmailEmailTemplateResponse(v *EmailTemplateResponseResponseBody) *email.EmailTemplateResponse {
	res := &email.EmailTemplateResponse{
		ID:             *v.ID,
		Name:           *v.Name,
		Subject:        *v.Subject,
		Type:           *v.Type,
		HTMLContent:    *v.HTMLContent,
		TextContent:    v.TextContent,
		OrganizationID: v.OrganizationID,
		Active:         *v.Active,
		System:         *v.System,
		Locale:         *v.Locale,
		CreatedAt:      *v.CreatedAt,
		UpdatedAt:      v.UpdatedAt,
	}
	if v.Metadata != nil {
		res.Metadata = make(map[string]any, len(v.Metadata))
		for key, val := range v.Metadata {
			tk := key
			tv := val
			res.Metadata[tk] = tv
		}
	}

	return res
}

// unmarshalPaginationResponseResponseBodyToDesigntypesPaginationResponse
// builds a value of type *designtypes.PaginationResponse from a value of type
// *PaginationResponseResponseBody.
func unmarshalPaginationResponseResponseBodyToDesigntypesPaginationResponse(v *PaginationResponseResponseBody) *designtypes.PaginationResponse {
	res := &designtypes.PaginationResponse{
		Total:  *v.Total,
		Offset: *v.Offset,
		Limit:  *v.Limit,
	}

	return res
}

// marshalEmailUpdateEmailTemplateRequestToUpdateEmailTemplateRequestRequestBody
// builds a value of type *UpdateEmailTemplateRequestRequestBody from a value
// of type *email.UpdateEmailTemplateRequest.
func marshalEmailUpdateEmailTemplateRequestToUpdateEmailTemplateRequestRequestBody(v *email.UpdateEmailTemplateRequest) *UpdateEmailTemplateRequestRequestBody {
	res := &UpdateEmailTemplateRequestRequestBody{
		Name:        v.Name,
		Subject:     v.Subject,
		HTMLContent: v.HTMLContent,
		TextContent: v.TextContent,
		Active:      v.Active,
		Locale:      v.Locale,
	}
	if v.Metadata != nil {
		res.Metadata = make(map[string]any, len(v.Metadata))
		for key, val := range v.Metadata {
			tk := key
			tv := val
			res.Metadata[tk] = tv
		}
	}

	return res
}

// marshalUpdateEmailTemplateRequestRequestBodyToEmailUpdateEmailTemplateRequest
// builds a value of type *email.UpdateEmailTemplateRequest from a value of
// type *UpdateEmailTemplateRequestRequestBody.
func marshalUpdateEmailTemplateRequestRequestBodyToEmailUpdateEmailTemplateRequest(v *UpdateEmailTemplateRequestRequestBody) *email.UpdateEmailTemplateRequest {
	res := &email.UpdateEmailTemplateRequest{
		Name:        v.Name,
		Subject:     v.Subject,
		HTMLContent: v.HTMLContent,
		TextContent: v.TextContent,
		Active:      v.Active,
		Locale:      v.Locale,
	}
	if v.Metadata != nil {
		res.Metadata = make(map[string]any, len(v.Metadata))
		for key, val := range v.Metadata {
			tk := key
			tv := val
			res.Metadata[tk] = tv
		}
	}

	return res
}
