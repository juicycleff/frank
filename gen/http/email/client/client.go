// Code generated by goa v3.20.0, DO NOT EDIT.
//
// email client HTTP transport
//
// Command:
// $ goa gen github.com/juicycleff/frank/design -o .

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the email service endpoint HTTP clients.
type Client struct {
	// ListTemplates Doer is the HTTP client used to make requests to the
	// list_templates endpoint.
	ListTemplatesDoer goahttp.Doer

	// CreateTemplate Doer is the HTTP client used to make requests to the
	// create_template endpoint.
	CreateTemplateDoer goahttp.Doer

	// GetTemplate Doer is the HTTP client used to make requests to the
	// get_template endpoint.
	GetTemplateDoer goahttp.Doer

	// GetTemplateByType Doer is the HTTP client used to make requests to the
	// get_template_by_type endpoint.
	GetTemplateByTypeDoer goahttp.Doer

	// UpdateTemplate Doer is the HTTP client used to make requests to the
	// update_template endpoint.
	UpdateTemplateDoer goahttp.Doer

	// DeleteTemplate Doer is the HTTP client used to make requests to the
	// delete_template endpoint.
	DeleteTemplateDoer goahttp.Doer

	// Send Doer is the HTTP client used to make requests to the send endpoint.
	SendDoer goahttp.Doer

	// SendTemplate Doer is the HTTP client used to make requests to the
	// send_template endpoint.
	SendTemplateDoer goahttp.Doer

	// CORS Doer is the HTTP client used to make requests to the  endpoint.
	CORSDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the email service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		ListTemplatesDoer:     doer,
		CreateTemplateDoer:    doer,
		GetTemplateDoer:       doer,
		GetTemplateByTypeDoer: doer,
		UpdateTemplateDoer:    doer,
		DeleteTemplateDoer:    doer,
		SendDoer:              doer,
		SendTemplateDoer:      doer,
		CORSDoer:              doer,
		RestoreResponseBody:   restoreBody,
		scheme:                scheme,
		host:                  host,
		decoder:               dec,
		encoder:               enc,
	}
}

// ListTemplates returns an endpoint that makes HTTP requests to the email
// service list_templates server.
func (c *Client) ListTemplates() goa.Endpoint {
	var (
		encodeRequest  = EncodeListTemplatesRequest(c.encoder)
		decodeResponse = DecodeListTemplatesResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildListTemplatesRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ListTemplatesDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("email", "list_templates", err)
		}
		return decodeResponse(resp)
	}
}

// CreateTemplate returns an endpoint that makes HTTP requests to the email
// service create_template server.
func (c *Client) CreateTemplate() goa.Endpoint {
	var (
		encodeRequest  = EncodeCreateTemplateRequest(c.encoder)
		decodeResponse = DecodeCreateTemplateResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildCreateTemplateRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CreateTemplateDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("email", "create_template", err)
		}
		return decodeResponse(resp)
	}
}

// GetTemplate returns an endpoint that makes HTTP requests to the email
// service get_template server.
func (c *Client) GetTemplate() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetTemplateRequest(c.encoder)
		decodeResponse = DecodeGetTemplateResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGetTemplateRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetTemplateDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("email", "get_template", err)
		}
		return decodeResponse(resp)
	}
}

// GetTemplateByType returns an endpoint that makes HTTP requests to the email
// service get_template_by_type server.
func (c *Client) GetTemplateByType() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetTemplateByTypeRequest(c.encoder)
		decodeResponse = DecodeGetTemplateByTypeResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGetTemplateByTypeRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetTemplateByTypeDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("email", "get_template_by_type", err)
		}
		return decodeResponse(resp)
	}
}

// UpdateTemplate returns an endpoint that makes HTTP requests to the email
// service update_template server.
func (c *Client) UpdateTemplate() goa.Endpoint {
	var (
		encodeRequest  = EncodeUpdateTemplateRequest(c.encoder)
		decodeResponse = DecodeUpdateTemplateResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildUpdateTemplateRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UpdateTemplateDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("email", "update_template", err)
		}
		return decodeResponse(resp)
	}
}

// DeleteTemplate returns an endpoint that makes HTTP requests to the email
// service delete_template server.
func (c *Client) DeleteTemplate() goa.Endpoint {
	var (
		encodeRequest  = EncodeDeleteTemplateRequest(c.encoder)
		decodeResponse = DecodeDeleteTemplateResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildDeleteTemplateRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DeleteTemplateDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("email", "delete_template", err)
		}
		return decodeResponse(resp)
	}
}

// Send returns an endpoint that makes HTTP requests to the email service send
// server.
func (c *Client) Send() goa.Endpoint {
	var (
		encodeRequest  = EncodeSendRequest(c.encoder)
		decodeResponse = DecodeSendResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildSendRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.SendDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("email", "send", err)
		}
		return decodeResponse(resp)
	}
}

// SendTemplate returns an endpoint that makes HTTP requests to the email
// service send_template server.
func (c *Client) SendTemplate() goa.Endpoint {
	var (
		encodeRequest  = EncodeSendTemplateRequest(c.encoder)
		decodeResponse = DecodeSendTemplateResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildSendTemplateRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.SendTemplateDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("email", "send_template", err)
		}
		return decodeResponse(resp)
	}
}
