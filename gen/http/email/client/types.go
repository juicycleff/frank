// Code generated by goa v3.20.0, DO NOT EDIT.
//
// email HTTP client types
//
// Command:
// $ goa gen github.com/juicycleff/frank/design -o .

package client

import (
	email "github.com/juicycleff/frank/gen/email"
	goa "goa.design/goa/v3/pkg"
)

// CreateTemplateRequestBody is the type of the "email" service
// "create_template" endpoint HTTP request body.
type CreateTemplateRequestBody struct {
	// Template name
	Name string `form:"name" json:"name" xml:"name"`
	// Email subject
	Subject string `form:"subject" json:"subject" xml:"subject"`
	// Template type
	Type string `form:"type" json:"type" xml:"type"`
	// HTML content
	HTMLContent string `form:"html_content" json:"html_content" xml:"html_content"`
	// Text content
	TextContent *string `form:"text_content,omitempty" json:"text_content,omitempty" xml:"text_content,omitempty"`
	// Organization ID
	OrganizationID *string `form:"organization_id,omitempty" json:"organization_id,omitempty" xml:"organization_id,omitempty"`
	// Whether template is active
	Active bool `form:"active" json:"active" xml:"active"`
	// Whether this is a system template
	System bool `form:"system" json:"system" xml:"system"`
	// Template locale
	Locale string `form:"locale" json:"locale" xml:"locale"`
	// Template metadata
	Metadata map[string]any `form:"metadata,omitempty" json:"metadata,omitempty" xml:"metadata,omitempty"`
}

// UpdateTemplateRequestBody is the type of the "email" service
// "update_template" endpoint HTTP request body.
type UpdateTemplateRequestBody struct {
	Template *UpdateEmailTemplateRequestRequestBody `form:"template" json:"template" xml:"template"`
}

// SendRequestBody is the type of the "email" service "send" endpoint HTTP
// request body.
type SendRequestBody struct {
	// Recipients
	To []string `form:"to" json:"to" xml:"to"`
	// Sender email
	From *string `form:"from,omitempty" json:"from,omitempty" xml:"from,omitempty"`
	// Email subject
	Subject string `form:"subject" json:"subject" xml:"subject"`
	// HTML content
	HTMLContent *string `form:"html_content,omitempty" json:"html_content,omitempty" xml:"html_content,omitempty"`
	// Text content
	TextContent *string `form:"text_content,omitempty" json:"text_content,omitempty" xml:"text_content,omitempty"`
	// CC recipients
	Cc []string `form:"cc,omitempty" json:"cc,omitempty" xml:"cc,omitempty"`
	// BCC recipients
	Bcc []string `form:"bcc,omitempty" json:"bcc,omitempty" xml:"bcc,omitempty"`
	// Reply-to address
	ReplyTo *string `form:"reply_to,omitempty" json:"reply_to,omitempty" xml:"reply_to,omitempty"`
	// Custom headers
	Headers map[string]string `form:"headers,omitempty" json:"headers,omitempty" xml:"headers,omitempty"`
	// Email metadata
	Metadata map[string]any `form:"metadata,omitempty" json:"metadata,omitempty" xml:"metadata,omitempty"`
}

// SendTemplateRequestBody is the type of the "email" service "send_template"
// endpoint HTTP request body.
type SendTemplateRequestBody struct {
	// Recipients
	To []string `form:"to" json:"to" xml:"to"`
	// Sender email
	From *string `form:"from,omitempty" json:"from,omitempty" xml:"from,omitempty"`
	// Custom subject (overrides template subject)
	Subject *string `form:"subject,omitempty" json:"subject,omitempty" xml:"subject,omitempty"`
	// Template type
	TemplateType string `form:"template_type" json:"template_type" xml:"template_type"`
	// Template data
	TemplateData map[string]any `form:"template_data" json:"template_data" xml:"template_data"`
	// Organization ID
	OrganizationID *string `form:"organization_id,omitempty" json:"organization_id,omitempty" xml:"organization_id,omitempty"`
	// Template locale
	Locale string `form:"locale" json:"locale" xml:"locale"`
	// CC recipients
	Cc []string `form:"cc,omitempty" json:"cc,omitempty" xml:"cc,omitempty"`
	// BCC recipients
	Bcc []string `form:"bcc,omitempty" json:"bcc,omitempty" xml:"bcc,omitempty"`
	// Reply-to address
	ReplyTo *string `form:"reply_to,omitempty" json:"reply_to,omitempty" xml:"reply_to,omitempty"`
	// Custom headers
	Headers map[string]string `form:"headers,omitempty" json:"headers,omitempty" xml:"headers,omitempty"`
	// Email metadata
	Metadata map[string]any `form:"metadata,omitempty" json:"metadata,omitempty" xml:"metadata,omitempty"`
}

// ListTemplatesResponseBody is the type of the "email" service
// "list_templates" endpoint HTTP response body.
type ListTemplatesResponseBody struct {
	Data       []*EmailTemplateResponseResponseBody `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	Pagination *PaginationResponseBody              `form:"pagination,omitempty" json:"pagination,omitempty" xml:"pagination,omitempty"`
}

// CreateTemplateResponseBody is the type of the "email" service
// "create_template" endpoint HTTP response body.
type CreateTemplateResponseBody struct {
	// Template name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Email subject
	Subject *string `form:"subject,omitempty" json:"subject,omitempty" xml:"subject,omitempty"`
	// Template type
	Type *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	// HTML content
	HTMLContent *string `form:"html_content,omitempty" json:"html_content,omitempty" xml:"html_content,omitempty"`
	// Text content
	TextContent *string `form:"text_content,omitempty" json:"text_content,omitempty" xml:"text_content,omitempty"`
	// Organization ID
	OrganizationID *string `form:"organization_id,omitempty" json:"organization_id,omitempty" xml:"organization_id,omitempty"`
	// Whether template is active
	Active *bool `form:"active,omitempty" json:"active,omitempty" xml:"active,omitempty"`
	// Whether this is a system template
	System *bool `form:"system,omitempty" json:"system,omitempty" xml:"system,omitempty"`
	// Template locale
	Locale *string `form:"locale,omitempty" json:"locale,omitempty" xml:"locale,omitempty"`
	// Template metadata
	Metadata map[string]any `form:"metadata,omitempty" json:"metadata,omitempty" xml:"metadata,omitempty"`
	// ID of the entity
	ID *string `json:"id"`
	// Created At
	CreatedAt *string `json:"created_at,createdAt"`
	// Updated At
	UpdatedAt *string `json:"updated_at,updatedAt"`
}

// GetTemplateResponseBody is the type of the "email" service "get_template"
// endpoint HTTP response body.
type GetTemplateResponseBody struct {
	// Template name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Email subject
	Subject *string `form:"subject,omitempty" json:"subject,omitempty" xml:"subject,omitempty"`
	// Template type
	Type *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	// HTML content
	HTMLContent *string `form:"html_content,omitempty" json:"html_content,omitempty" xml:"html_content,omitempty"`
	// Text content
	TextContent *string `form:"text_content,omitempty" json:"text_content,omitempty" xml:"text_content,omitempty"`
	// Organization ID
	OrganizationID *string `form:"organization_id,omitempty" json:"organization_id,omitempty" xml:"organization_id,omitempty"`
	// Whether template is active
	Active *bool `form:"active,omitempty" json:"active,omitempty" xml:"active,omitempty"`
	// Whether this is a system template
	System *bool `form:"system,omitempty" json:"system,omitempty" xml:"system,omitempty"`
	// Template locale
	Locale *string `form:"locale,omitempty" json:"locale,omitempty" xml:"locale,omitempty"`
	// Template metadata
	Metadata map[string]any `form:"metadata,omitempty" json:"metadata,omitempty" xml:"metadata,omitempty"`
	// ID of the entity
	ID *string `json:"id"`
	// Created At
	CreatedAt *string `json:"created_at,createdAt"`
	// Updated At
	UpdatedAt *string `json:"updated_at,updatedAt"`
}

// GetTemplateByTypeResponseBody is the type of the "email" service
// "get_template_by_type" endpoint HTTP response body.
type GetTemplateByTypeResponseBody struct {
	// Template name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Email subject
	Subject *string `form:"subject,omitempty" json:"subject,omitempty" xml:"subject,omitempty"`
	// Template type
	Type *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	// HTML content
	HTMLContent *string `form:"html_content,omitempty" json:"html_content,omitempty" xml:"html_content,omitempty"`
	// Text content
	TextContent *string `form:"text_content,omitempty" json:"text_content,omitempty" xml:"text_content,omitempty"`
	// Organization ID
	OrganizationID *string `form:"organization_id,omitempty" json:"organization_id,omitempty" xml:"organization_id,omitempty"`
	// Whether template is active
	Active *bool `form:"active,omitempty" json:"active,omitempty" xml:"active,omitempty"`
	// Whether this is a system template
	System *bool `form:"system,omitempty" json:"system,omitempty" xml:"system,omitempty"`
	// Template locale
	Locale *string `form:"locale,omitempty" json:"locale,omitempty" xml:"locale,omitempty"`
	// Template metadata
	Metadata map[string]any `form:"metadata,omitempty" json:"metadata,omitempty" xml:"metadata,omitempty"`
	// ID of the entity
	ID *string `json:"id"`
	// Created At
	CreatedAt *string `json:"created_at,createdAt"`
	// Updated At
	UpdatedAt *string `json:"updated_at,updatedAt"`
}

// UpdateTemplateResponseBody is the type of the "email" service
// "update_template" endpoint HTTP response body.
type UpdateTemplateResponseBody struct {
	// Template name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Email subject
	Subject *string `form:"subject,omitempty" json:"subject,omitempty" xml:"subject,omitempty"`
	// Template type
	Type *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	// HTML content
	HTMLContent *string `form:"html_content,omitempty" json:"html_content,omitempty" xml:"html_content,omitempty"`
	// Text content
	TextContent *string `form:"text_content,omitempty" json:"text_content,omitempty" xml:"text_content,omitempty"`
	// Organization ID
	OrganizationID *string `form:"organization_id,omitempty" json:"organization_id,omitempty" xml:"organization_id,omitempty"`
	// Whether template is active
	Active *bool `form:"active,omitempty" json:"active,omitempty" xml:"active,omitempty"`
	// Whether this is a system template
	System *bool `form:"system,omitempty" json:"system,omitempty" xml:"system,omitempty"`
	// Template locale
	Locale *string `form:"locale,omitempty" json:"locale,omitempty" xml:"locale,omitempty"`
	// Template metadata
	Metadata map[string]any `form:"metadata,omitempty" json:"metadata,omitempty" xml:"metadata,omitempty"`
	// ID of the entity
	ID *string `json:"id"`
	// Created At
	CreatedAt *string `json:"created_at,createdAt"`
	// Updated At
	UpdatedAt *string `json:"updated_at,updatedAt"`
}

// SendResponseBody is the type of the "email" service "send" endpoint HTTP
// response body.
type SendResponseBody struct {
	// Success message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// SendTemplateResponseBody is the type of the "email" service "send_template"
// endpoint HTTP response body.
type SendTemplateResponseBody struct {
	// Success message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// ListTemplatesBadRequestResponseBody is the type of the "email" service
// "list_templates" endpoint HTTP response body for the "bad_request" error.
type ListTemplatesBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListTemplatesForbiddenResponseBody is the type of the "email" service
// "list_templates" endpoint HTTP response body for the "forbidden" error.
type ListTemplatesForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListTemplatesInternalErrorResponseBody is the type of the "email" service
// "list_templates" endpoint HTTP response body for the "internal_error" error.
type ListTemplatesInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListTemplatesNotFoundResponseBody is the type of the "email" service
// "list_templates" endpoint HTTP response body for the "not_found" error.
type ListTemplatesNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListTemplatesUnauthorizedResponseBody is the type of the "email" service
// "list_templates" endpoint HTTP response body for the "unauthorized" error.
type ListTemplatesUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreateTemplateBadRequestResponseBody is the type of the "email" service
// "create_template" endpoint HTTP response body for the "bad_request" error.
type CreateTemplateBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreateTemplateForbiddenResponseBody is the type of the "email" service
// "create_template" endpoint HTTP response body for the "forbidden" error.
type CreateTemplateForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreateTemplateInternalErrorResponseBody is the type of the "email" service
// "create_template" endpoint HTTP response body for the "internal_error" error.
type CreateTemplateInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreateTemplateNotFoundResponseBody is the type of the "email" service
// "create_template" endpoint HTTP response body for the "not_found" error.
type CreateTemplateNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreateTemplateUnauthorizedResponseBody is the type of the "email" service
// "create_template" endpoint HTTP response body for the "unauthorized" error.
type CreateTemplateUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetTemplateBadRequestResponseBody is the type of the "email" service
// "get_template" endpoint HTTP response body for the "bad_request" error.
type GetTemplateBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetTemplateForbiddenResponseBody is the type of the "email" service
// "get_template" endpoint HTTP response body for the "forbidden" error.
type GetTemplateForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetTemplateInternalErrorResponseBody is the type of the "email" service
// "get_template" endpoint HTTP response body for the "internal_error" error.
type GetTemplateInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetTemplateNotFoundResponseBody is the type of the "email" service
// "get_template" endpoint HTTP response body for the "not_found" error.
type GetTemplateNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetTemplateUnauthorizedResponseBody is the type of the "email" service
// "get_template" endpoint HTTP response body for the "unauthorized" error.
type GetTemplateUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetTemplateByTypeBadRequestResponseBody is the type of the "email" service
// "get_template_by_type" endpoint HTTP response body for the "bad_request"
// error.
type GetTemplateByTypeBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetTemplateByTypeForbiddenResponseBody is the type of the "email" service
// "get_template_by_type" endpoint HTTP response body for the "forbidden" error.
type GetTemplateByTypeForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetTemplateByTypeInternalErrorResponseBody is the type of the "email"
// service "get_template_by_type" endpoint HTTP response body for the
// "internal_error" error.
type GetTemplateByTypeInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetTemplateByTypeNotFoundResponseBody is the type of the "email" service
// "get_template_by_type" endpoint HTTP response body for the "not_found" error.
type GetTemplateByTypeNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetTemplateByTypeUnauthorizedResponseBody is the type of the "email" service
// "get_template_by_type" endpoint HTTP response body for the "unauthorized"
// error.
type GetTemplateByTypeUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateTemplateBadRequestResponseBody is the type of the "email" service
// "update_template" endpoint HTTP response body for the "bad_request" error.
type UpdateTemplateBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateTemplateForbiddenResponseBody is the type of the "email" service
// "update_template" endpoint HTTP response body for the "forbidden" error.
type UpdateTemplateForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateTemplateInternalErrorResponseBody is the type of the "email" service
// "update_template" endpoint HTTP response body for the "internal_error" error.
type UpdateTemplateInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateTemplateNotFoundResponseBody is the type of the "email" service
// "update_template" endpoint HTTP response body for the "not_found" error.
type UpdateTemplateNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateTemplateUnauthorizedResponseBody is the type of the "email" service
// "update_template" endpoint HTTP response body for the "unauthorized" error.
type UpdateTemplateUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteTemplateBadRequestResponseBody is the type of the "email" service
// "delete_template" endpoint HTTP response body for the "bad_request" error.
type DeleteTemplateBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteTemplateForbiddenResponseBody is the type of the "email" service
// "delete_template" endpoint HTTP response body for the "forbidden" error.
type DeleteTemplateForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteTemplateInternalErrorResponseBody is the type of the "email" service
// "delete_template" endpoint HTTP response body for the "internal_error" error.
type DeleteTemplateInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteTemplateNotFoundResponseBody is the type of the "email" service
// "delete_template" endpoint HTTP response body for the "not_found" error.
type DeleteTemplateNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteTemplateUnauthorizedResponseBody is the type of the "email" service
// "delete_template" endpoint HTTP response body for the "unauthorized" error.
type DeleteTemplateUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// SendBadRequestResponseBody is the type of the "email" service "send"
// endpoint HTTP response body for the "bad_request" error.
type SendBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// SendForbiddenResponseBody is the type of the "email" service "send" endpoint
// HTTP response body for the "forbidden" error.
type SendForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// SendInternalErrorResponseBody is the type of the "email" service "send"
// endpoint HTTP response body for the "internal_error" error.
type SendInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// SendNotFoundResponseBody is the type of the "email" service "send" endpoint
// HTTP response body for the "not_found" error.
type SendNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// SendUnauthorizedResponseBody is the type of the "email" service "send"
// endpoint HTTP response body for the "unauthorized" error.
type SendUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// SendTemplateBadRequestResponseBody is the type of the "email" service
// "send_template" endpoint HTTP response body for the "bad_request" error.
type SendTemplateBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// SendTemplateForbiddenResponseBody is the type of the "email" service
// "send_template" endpoint HTTP response body for the "forbidden" error.
type SendTemplateForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// SendTemplateInternalErrorResponseBody is the type of the "email" service
// "send_template" endpoint HTTP response body for the "internal_error" error.
type SendTemplateInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// SendTemplateNotFoundResponseBody is the type of the "email" service
// "send_template" endpoint HTTP response body for the "not_found" error.
type SendTemplateNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// SendTemplateUnauthorizedResponseBody is the type of the "email" service
// "send_template" endpoint HTTP response body for the "unauthorized" error.
type SendTemplateUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// EmailTemplateResponseResponseBody is used to define fields on response body
// types.
type EmailTemplateResponseResponseBody struct {
	// Template name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Email subject
	Subject *string `form:"subject,omitempty" json:"subject,omitempty" xml:"subject,omitempty"`
	// Template type
	Type *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	// HTML content
	HTMLContent *string `form:"html_content,omitempty" json:"html_content,omitempty" xml:"html_content,omitempty"`
	// Text content
	TextContent *string `form:"text_content,omitempty" json:"text_content,omitempty" xml:"text_content,omitempty"`
	// Organization ID
	OrganizationID *string `form:"organization_id,omitempty" json:"organization_id,omitempty" xml:"organization_id,omitempty"`
	// Whether template is active
	Active *bool `form:"active,omitempty" json:"active,omitempty" xml:"active,omitempty"`
	// Whether this is a system template
	System *bool `form:"system,omitempty" json:"system,omitempty" xml:"system,omitempty"`
	// Template locale
	Locale *string `form:"locale,omitempty" json:"locale,omitempty" xml:"locale,omitempty"`
	// Template metadata
	Metadata map[string]any `form:"metadata,omitempty" json:"metadata,omitempty" xml:"metadata,omitempty"`
	// ID of the entity
	ID *string `json:"id"`
	// Created At
	CreatedAt *string `json:"created_at,createdAt"`
	// Updated At
	UpdatedAt *string `json:"updated_at,updatedAt"`
}

// PaginationResponseBody is used to define fields on response body types.
type PaginationResponseBody struct {
	// Offset
	Offset *int `json:"offset"`
	// Limit
	Limit *int `json:"limit"`
	// Total number of items
	Total *int `json:"total"`
	// Total number of pages
	TotalPages *int `json:"total_pages,totalPages"`
	// Current page number
	CurrentPage *int `json:"current_page,currentPage"`
	// Has next page
	HasNext *bool `json:"has_next,hasNext"`
	// Has previous page
	HasPrevious *bool `json:"has_previous,hasPrevious"`
}

// UpdateEmailTemplateRequestRequestBody is used to define fields on request
// body types.
type UpdateEmailTemplateRequestRequestBody struct {
	// Template name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Email subject
	Subject *string `form:"subject,omitempty" json:"subject,omitempty" xml:"subject,omitempty"`
	// HTML content
	HTMLContent *string `form:"html_content,omitempty" json:"html_content,omitempty" xml:"html_content,omitempty"`
	// Text content
	TextContent *string `form:"text_content,omitempty" json:"text_content,omitempty" xml:"text_content,omitempty"`
	// Whether template is active
	Active *bool `form:"active,omitempty" json:"active,omitempty" xml:"active,omitempty"`
	// Template locale
	Locale *string `form:"locale,omitempty" json:"locale,omitempty" xml:"locale,omitempty"`
	// Template metadata
	Metadata map[string]any `form:"metadata,omitempty" json:"metadata,omitempty" xml:"metadata,omitempty"`
}

// NewCreateTemplateRequestBody builds the HTTP request body from the payload
// of the "create_template" endpoint of the "email" service.
func NewCreateTemplateRequestBody(p *email.CreateTemplatePayload) *CreateTemplateRequestBody {
	body := &CreateTemplateRequestBody{
		Name:           p.Name,
		Subject:        p.Subject,
		Type:           p.Type,
		HTMLContent:    p.HTMLContent,
		TextContent:    p.TextContent,
		OrganizationID: p.OrganizationID,
		Active:         p.Active,
		System:         p.System,
		Locale:         p.Locale,
	}
	{
		var zero bool
		if body.Active == zero {
			body.Active = true
		}
	}
	{
		var zero bool
		if body.System == zero {
			body.System = false
		}
	}
	{
		var zero string
		if body.Locale == zero {
			body.Locale = "en"
		}
	}
	if p.Metadata != nil {
		body.Metadata = make(map[string]any, len(p.Metadata))
		for key, val := range p.Metadata {
			tk := key
			tv := val
			body.Metadata[tk] = tv
		}
	}
	return body
}

// NewUpdateTemplateRequestBody builds the HTTP request body from the payload
// of the "update_template" endpoint of the "email" service.
func NewUpdateTemplateRequestBody(p *email.UpdateTemplatePayload) *UpdateTemplateRequestBody {
	body := &UpdateTemplateRequestBody{}
	if p.Template != nil {
		body.Template = marshalEmailUpdateEmailTemplateRequestToUpdateEmailTemplateRequestRequestBody(p.Template)
	}
	return body
}

// NewSendRequestBody builds the HTTP request body from the payload of the
// "send" endpoint of the "email" service.
func NewSendRequestBody(p *email.SendPayload) *SendRequestBody {
	body := &SendRequestBody{
		From:        p.From,
		Subject:     p.Subject,
		HTMLContent: p.HTMLContent,
		TextContent: p.TextContent,
		ReplyTo:     p.ReplyTo,
	}
	if p.To != nil {
		body.To = make([]string, len(p.To))
		for i, val := range p.To {
			body.To[i] = val
		}
	} else {
		body.To = []string{}
	}
	if p.Cc != nil {
		body.Cc = make([]string, len(p.Cc))
		for i, val := range p.Cc {
			body.Cc[i] = val
		}
	}
	if p.Bcc != nil {
		body.Bcc = make([]string, len(p.Bcc))
		for i, val := range p.Bcc {
			body.Bcc[i] = val
		}
	}
	if p.Headers != nil {
		body.Headers = make(map[string]string, len(p.Headers))
		for key, val := range p.Headers {
			tk := key
			tv := val
			body.Headers[tk] = tv
		}
	}
	if p.Metadata != nil {
		body.Metadata = make(map[string]any, len(p.Metadata))
		for key, val := range p.Metadata {
			tk := key
			tv := val
			body.Metadata[tk] = tv
		}
	}
	return body
}

// NewSendTemplateRequestBody builds the HTTP request body from the payload of
// the "send_template" endpoint of the "email" service.
func NewSendTemplateRequestBody(p *email.SendTemplatePayload) *SendTemplateRequestBody {
	body := &SendTemplateRequestBody{
		From:           p.From,
		Subject:        p.Subject,
		TemplateType:   p.TemplateType,
		OrganizationID: p.OrganizationID,
		Locale:         p.Locale,
		ReplyTo:        p.ReplyTo,
	}
	if p.To != nil {
		body.To = make([]string, len(p.To))
		for i, val := range p.To {
			body.To[i] = val
		}
	} else {
		body.To = []string{}
	}
	if p.TemplateData != nil {
		body.TemplateData = make(map[string]any, len(p.TemplateData))
		for key, val := range p.TemplateData {
			tk := key
			tv := val
			body.TemplateData[tk] = tv
		}
	}
	{
		var zero string
		if body.Locale == zero {
			body.Locale = "en"
		}
	}
	if p.Cc != nil {
		body.Cc = make([]string, len(p.Cc))
		for i, val := range p.Cc {
			body.Cc[i] = val
		}
	}
	if p.Bcc != nil {
		body.Bcc = make([]string, len(p.Bcc))
		for i, val := range p.Bcc {
			body.Bcc[i] = val
		}
	}
	if p.Headers != nil {
		body.Headers = make(map[string]string, len(p.Headers))
		for key, val := range p.Headers {
			tk := key
			tv := val
			body.Headers[tk] = tv
		}
	}
	if p.Metadata != nil {
		body.Metadata = make(map[string]any, len(p.Metadata))
		for key, val := range p.Metadata {
			tk := key
			tv := val
			body.Metadata[tk] = tv
		}
	}
	return body
}

// NewListTemplatesResultOK builds a "email" service "list_templates" endpoint
// result from a HTTP "OK" response.
func NewListTemplatesResultOK(body *ListTemplatesResponseBody) *email.ListTemplatesResult {
	v := &email.ListTemplatesResult{}
	v.Data = make([]*email.EmailTemplateResponse, len(body.Data))
	for i, val := range body.Data {
		v.Data[i] = unmarshalEmailTemplateResponseResponseBodyToEmailEmailTemplateResponse(val)
	}
	v.Pagination = unmarshalPaginationResponseBodyToDesigntypesPagination(body.Pagination)

	return v
}

// NewListTemplatesBadRequest builds a email service list_templates endpoint
// bad_request error.
func NewListTemplatesBadRequest(body *ListTemplatesBadRequestResponseBody) *email.BadRequestError {
	v := &email.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewListTemplatesForbidden builds a email service list_templates endpoint
// forbidden error.
func NewListTemplatesForbidden(body *ListTemplatesForbiddenResponseBody) *email.ForbiddenError {
	v := &email.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewListTemplatesInternalError builds a email service list_templates endpoint
// internal_error error.
func NewListTemplatesInternalError(body *ListTemplatesInternalErrorResponseBody) *email.InternalServerError {
	v := &email.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewListTemplatesNotFound builds a email service list_templates endpoint
// not_found error.
func NewListTemplatesNotFound(body *ListTemplatesNotFoundResponseBody) *email.NotFoundError {
	v := &email.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewListTemplatesUnauthorized builds a email service list_templates endpoint
// unauthorized error.
func NewListTemplatesUnauthorized(body *ListTemplatesUnauthorizedResponseBody) *email.UnauthorizedError {
	v := &email.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewCreateTemplateEmailTemplateResponseCreated builds a "email" service
// "create_template" endpoint result from a HTTP "Created" response.
func NewCreateTemplateEmailTemplateResponseCreated(body *CreateTemplateResponseBody) *email.EmailTemplateResponse {
	v := &email.EmailTemplateResponse{
		Name:           *body.Name,
		Subject:        *body.Subject,
		Type:           *body.Type,
		HTMLContent:    *body.HTMLContent,
		TextContent:    body.TextContent,
		OrganizationID: body.OrganizationID,
		Active:         *body.Active,
		System:         *body.System,
		Locale:         *body.Locale,
		ID:             *body.ID,
		CreatedAt:      *body.CreatedAt,
		UpdatedAt:      *body.UpdatedAt,
	}
	if body.Metadata != nil {
		v.Metadata = make(map[string]any, len(body.Metadata))
		for key, val := range body.Metadata {
			tk := key
			tv := val
			v.Metadata[tk] = tv
		}
	}

	return v
}

// NewCreateTemplateBadRequest builds a email service create_template endpoint
// bad_request error.
func NewCreateTemplateBadRequest(body *CreateTemplateBadRequestResponseBody) *email.BadRequestError {
	v := &email.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewCreateTemplateForbidden builds a email service create_template endpoint
// forbidden error.
func NewCreateTemplateForbidden(body *CreateTemplateForbiddenResponseBody) *email.ForbiddenError {
	v := &email.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewCreateTemplateInternalError builds a email service create_template
// endpoint internal_error error.
func NewCreateTemplateInternalError(body *CreateTemplateInternalErrorResponseBody) *email.InternalServerError {
	v := &email.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewCreateTemplateNotFound builds a email service create_template endpoint
// not_found error.
func NewCreateTemplateNotFound(body *CreateTemplateNotFoundResponseBody) *email.NotFoundError {
	v := &email.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewCreateTemplateUnauthorized builds a email service create_template
// endpoint unauthorized error.
func NewCreateTemplateUnauthorized(body *CreateTemplateUnauthorizedResponseBody) *email.UnauthorizedError {
	v := &email.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewGetTemplateEmailTemplateResponseOK builds a "email" service
// "get_template" endpoint result from a HTTP "OK" response.
func NewGetTemplateEmailTemplateResponseOK(body *GetTemplateResponseBody) *email.EmailTemplateResponse {
	v := &email.EmailTemplateResponse{
		Name:           *body.Name,
		Subject:        *body.Subject,
		Type:           *body.Type,
		HTMLContent:    *body.HTMLContent,
		TextContent:    body.TextContent,
		OrganizationID: body.OrganizationID,
		Active:         *body.Active,
		System:         *body.System,
		Locale:         *body.Locale,
		ID:             *body.ID,
		CreatedAt:      *body.CreatedAt,
		UpdatedAt:      *body.UpdatedAt,
	}
	if body.Metadata != nil {
		v.Metadata = make(map[string]any, len(body.Metadata))
		for key, val := range body.Metadata {
			tk := key
			tv := val
			v.Metadata[tk] = tv
		}
	}

	return v
}

// NewGetTemplateBadRequest builds a email service get_template endpoint
// bad_request error.
func NewGetTemplateBadRequest(body *GetTemplateBadRequestResponseBody) *email.BadRequestError {
	v := &email.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewGetTemplateForbidden builds a email service get_template endpoint
// forbidden error.
func NewGetTemplateForbidden(body *GetTemplateForbiddenResponseBody) *email.ForbiddenError {
	v := &email.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewGetTemplateInternalError builds a email service get_template endpoint
// internal_error error.
func NewGetTemplateInternalError(body *GetTemplateInternalErrorResponseBody) *email.InternalServerError {
	v := &email.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewGetTemplateNotFound builds a email service get_template endpoint
// not_found error.
func NewGetTemplateNotFound(body *GetTemplateNotFoundResponseBody) *email.NotFoundError {
	v := &email.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewGetTemplateUnauthorized builds a email service get_template endpoint
// unauthorized error.
func NewGetTemplateUnauthorized(body *GetTemplateUnauthorizedResponseBody) *email.UnauthorizedError {
	v := &email.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewGetTemplateByTypeEmailTemplateResponseOK builds a "email" service
// "get_template_by_type" endpoint result from a HTTP "OK" response.
func NewGetTemplateByTypeEmailTemplateResponseOK(body *GetTemplateByTypeResponseBody) *email.EmailTemplateResponse {
	v := &email.EmailTemplateResponse{
		Name:           *body.Name,
		Subject:        *body.Subject,
		Type:           *body.Type,
		HTMLContent:    *body.HTMLContent,
		TextContent:    body.TextContent,
		OrganizationID: body.OrganizationID,
		Active:         *body.Active,
		System:         *body.System,
		Locale:         *body.Locale,
		ID:             *body.ID,
		CreatedAt:      *body.CreatedAt,
		UpdatedAt:      *body.UpdatedAt,
	}
	if body.Metadata != nil {
		v.Metadata = make(map[string]any, len(body.Metadata))
		for key, val := range body.Metadata {
			tk := key
			tv := val
			v.Metadata[tk] = tv
		}
	}

	return v
}

// NewGetTemplateByTypeBadRequest builds a email service get_template_by_type
// endpoint bad_request error.
func NewGetTemplateByTypeBadRequest(body *GetTemplateByTypeBadRequestResponseBody) *email.BadRequestError {
	v := &email.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewGetTemplateByTypeForbidden builds a email service get_template_by_type
// endpoint forbidden error.
func NewGetTemplateByTypeForbidden(body *GetTemplateByTypeForbiddenResponseBody) *email.ForbiddenError {
	v := &email.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewGetTemplateByTypeInternalError builds a email service
// get_template_by_type endpoint internal_error error.
func NewGetTemplateByTypeInternalError(body *GetTemplateByTypeInternalErrorResponseBody) *email.InternalServerError {
	v := &email.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewGetTemplateByTypeNotFound builds a email service get_template_by_type
// endpoint not_found error.
func NewGetTemplateByTypeNotFound(body *GetTemplateByTypeNotFoundResponseBody) *email.NotFoundError {
	v := &email.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewGetTemplateByTypeUnauthorized builds a email service get_template_by_type
// endpoint unauthorized error.
func NewGetTemplateByTypeUnauthorized(body *GetTemplateByTypeUnauthorizedResponseBody) *email.UnauthorizedError {
	v := &email.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewUpdateTemplateEmailTemplateResponseOK builds a "email" service
// "update_template" endpoint result from a HTTP "OK" response.
func NewUpdateTemplateEmailTemplateResponseOK(body *UpdateTemplateResponseBody) *email.EmailTemplateResponse {
	v := &email.EmailTemplateResponse{
		Name:           *body.Name,
		Subject:        *body.Subject,
		Type:           *body.Type,
		HTMLContent:    *body.HTMLContent,
		TextContent:    body.TextContent,
		OrganizationID: body.OrganizationID,
		Active:         *body.Active,
		System:         *body.System,
		Locale:         *body.Locale,
		ID:             *body.ID,
		CreatedAt:      *body.CreatedAt,
		UpdatedAt:      *body.UpdatedAt,
	}
	if body.Metadata != nil {
		v.Metadata = make(map[string]any, len(body.Metadata))
		for key, val := range body.Metadata {
			tk := key
			tv := val
			v.Metadata[tk] = tv
		}
	}

	return v
}

// NewUpdateTemplateBadRequest builds a email service update_template endpoint
// bad_request error.
func NewUpdateTemplateBadRequest(body *UpdateTemplateBadRequestResponseBody) *email.BadRequestError {
	v := &email.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewUpdateTemplateForbidden builds a email service update_template endpoint
// forbidden error.
func NewUpdateTemplateForbidden(body *UpdateTemplateForbiddenResponseBody) *email.ForbiddenError {
	v := &email.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewUpdateTemplateInternalError builds a email service update_template
// endpoint internal_error error.
func NewUpdateTemplateInternalError(body *UpdateTemplateInternalErrorResponseBody) *email.InternalServerError {
	v := &email.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewUpdateTemplateNotFound builds a email service update_template endpoint
// not_found error.
func NewUpdateTemplateNotFound(body *UpdateTemplateNotFoundResponseBody) *email.NotFoundError {
	v := &email.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewUpdateTemplateUnauthorized builds a email service update_template
// endpoint unauthorized error.
func NewUpdateTemplateUnauthorized(body *UpdateTemplateUnauthorizedResponseBody) *email.UnauthorizedError {
	v := &email.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewDeleteTemplateBadRequest builds a email service delete_template endpoint
// bad_request error.
func NewDeleteTemplateBadRequest(body *DeleteTemplateBadRequestResponseBody) *email.BadRequestError {
	v := &email.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewDeleteTemplateForbidden builds a email service delete_template endpoint
// forbidden error.
func NewDeleteTemplateForbidden(body *DeleteTemplateForbiddenResponseBody) *email.ForbiddenError {
	v := &email.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewDeleteTemplateInternalError builds a email service delete_template
// endpoint internal_error error.
func NewDeleteTemplateInternalError(body *DeleteTemplateInternalErrorResponseBody) *email.InternalServerError {
	v := &email.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewDeleteTemplateNotFound builds a email service delete_template endpoint
// not_found error.
func NewDeleteTemplateNotFound(body *DeleteTemplateNotFoundResponseBody) *email.NotFoundError {
	v := &email.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewDeleteTemplateUnauthorized builds a email service delete_template
// endpoint unauthorized error.
func NewDeleteTemplateUnauthorized(body *DeleteTemplateUnauthorizedResponseBody) *email.UnauthorizedError {
	v := &email.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewSendResultOK builds a "email" service "send" endpoint result from a HTTP
// "OK" response.
func NewSendResultOK(body *SendResponseBody) *email.SendResult {
	v := &email.SendResult{
		Message: *body.Message,
	}

	return v
}

// NewSendBadRequest builds a email service send endpoint bad_request error.
func NewSendBadRequest(body *SendBadRequestResponseBody) *email.BadRequestError {
	v := &email.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewSendForbidden builds a email service send endpoint forbidden error.
func NewSendForbidden(body *SendForbiddenResponseBody) *email.ForbiddenError {
	v := &email.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewSendInternalError builds a email service send endpoint internal_error
// error.
func NewSendInternalError(body *SendInternalErrorResponseBody) *email.InternalServerError {
	v := &email.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewSendNotFound builds a email service send endpoint not_found error.
func NewSendNotFound(body *SendNotFoundResponseBody) *email.NotFoundError {
	v := &email.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewSendUnauthorized builds a email service send endpoint unauthorized error.
func NewSendUnauthorized(body *SendUnauthorizedResponseBody) *email.UnauthorizedError {
	v := &email.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewSendTemplateResultOK builds a "email" service "send_template" endpoint
// result from a HTTP "OK" response.
func NewSendTemplateResultOK(body *SendTemplateResponseBody) *email.SendTemplateResult {
	v := &email.SendTemplateResult{
		Message: *body.Message,
	}

	return v
}

// NewSendTemplateBadRequest builds a email service send_template endpoint
// bad_request error.
func NewSendTemplateBadRequest(body *SendTemplateBadRequestResponseBody) *email.BadRequestError {
	v := &email.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewSendTemplateForbidden builds a email service send_template endpoint
// forbidden error.
func NewSendTemplateForbidden(body *SendTemplateForbiddenResponseBody) *email.ForbiddenError {
	v := &email.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewSendTemplateInternalError builds a email service send_template endpoint
// internal_error error.
func NewSendTemplateInternalError(body *SendTemplateInternalErrorResponseBody) *email.InternalServerError {
	v := &email.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewSendTemplateNotFound builds a email service send_template endpoint
// not_found error.
func NewSendTemplateNotFound(body *SendTemplateNotFoundResponseBody) *email.NotFoundError {
	v := &email.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewSendTemplateUnauthorized builds a email service send_template endpoint
// unauthorized error.
func NewSendTemplateUnauthorized(body *SendTemplateUnauthorizedResponseBody) *email.UnauthorizedError {
	v := &email.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// ValidateListTemplatesResponseBody runs the validations defined on
// list_templates_response_body
func ValidateListTemplatesResponseBody(body *ListTemplatesResponseBody) (err error) {
	if body.Data == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("data", "body"))
	}
	if body.Pagination == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("pagination", "body"))
	}
	for _, e := range body.Data {
		if e != nil {
			if err2 := ValidateEmailTemplateResponseResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if body.Pagination != nil {
		if err2 := ValidatePaginationResponseBody(body.Pagination); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateCreateTemplateResponseBody runs the validations defined on
// create_template_response_body
func ValidateCreateTemplateResponseBody(body *CreateTemplateResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Subject == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("subject", "body"))
	}
	if body.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "body"))
	}
	if body.HTMLContent == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("html_content", "body"))
	}
	if body.Active == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("active", "body"))
	}
	if body.System == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("system", "body"))
	}
	if body.Locale == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("locale", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	if body.UpdatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("updated_at", "body"))
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updated_at", *body.UpdatedAt, goa.FormatDateTime))
	}
	return
}

// ValidateGetTemplateResponseBody runs the validations defined on
// get_template_response_body
func ValidateGetTemplateResponseBody(body *GetTemplateResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Subject == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("subject", "body"))
	}
	if body.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "body"))
	}
	if body.HTMLContent == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("html_content", "body"))
	}
	if body.Active == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("active", "body"))
	}
	if body.System == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("system", "body"))
	}
	if body.Locale == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("locale", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	if body.UpdatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("updated_at", "body"))
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updated_at", *body.UpdatedAt, goa.FormatDateTime))
	}
	return
}

// ValidateGetTemplateByTypeResponseBody runs the validations defined on
// get_template_by_type_response_body
func ValidateGetTemplateByTypeResponseBody(body *GetTemplateByTypeResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Subject == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("subject", "body"))
	}
	if body.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "body"))
	}
	if body.HTMLContent == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("html_content", "body"))
	}
	if body.Active == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("active", "body"))
	}
	if body.System == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("system", "body"))
	}
	if body.Locale == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("locale", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	if body.UpdatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("updated_at", "body"))
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updated_at", *body.UpdatedAt, goa.FormatDateTime))
	}
	return
}

// ValidateUpdateTemplateResponseBody runs the validations defined on
// update_template_response_body
func ValidateUpdateTemplateResponseBody(body *UpdateTemplateResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Subject == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("subject", "body"))
	}
	if body.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "body"))
	}
	if body.HTMLContent == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("html_content", "body"))
	}
	if body.Active == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("active", "body"))
	}
	if body.System == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("system", "body"))
	}
	if body.Locale == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("locale", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	if body.UpdatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("updated_at", "body"))
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updated_at", *body.UpdatedAt, goa.FormatDateTime))
	}
	return
}

// ValidateSendResponseBody runs the validations defined on SendResponseBody
func ValidateSendResponseBody(body *SendResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateSendTemplateResponseBody runs the validations defined on
// send_template_response_body
func ValidateSendTemplateResponseBody(body *SendTemplateResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateListTemplatesBadRequestResponseBody runs the validations defined on
// list_templates_bad_request_response_body
func ValidateListTemplatesBadRequestResponseBody(body *ListTemplatesBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateListTemplatesForbiddenResponseBody runs the validations defined on
// list_templates_forbidden_response_body
func ValidateListTemplatesForbiddenResponseBody(body *ListTemplatesForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateListTemplatesInternalErrorResponseBody runs the validations defined
// on list_templates_internal_error_response_body
func ValidateListTemplatesInternalErrorResponseBody(body *ListTemplatesInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateListTemplatesNotFoundResponseBody runs the validations defined on
// list_templates_not_found_response_body
func ValidateListTemplatesNotFoundResponseBody(body *ListTemplatesNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateListTemplatesUnauthorizedResponseBody runs the validations defined
// on list_templates_unauthorized_response_body
func ValidateListTemplatesUnauthorizedResponseBody(body *ListTemplatesUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateTemplateBadRequestResponseBody runs the validations defined on
// create_template_bad_request_response_body
func ValidateCreateTemplateBadRequestResponseBody(body *CreateTemplateBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateTemplateForbiddenResponseBody runs the validations defined on
// create_template_forbidden_response_body
func ValidateCreateTemplateForbiddenResponseBody(body *CreateTemplateForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateTemplateInternalErrorResponseBody runs the validations defined
// on create_template_internal_error_response_body
func ValidateCreateTemplateInternalErrorResponseBody(body *CreateTemplateInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateTemplateNotFoundResponseBody runs the validations defined on
// create_template_not_found_response_body
func ValidateCreateTemplateNotFoundResponseBody(body *CreateTemplateNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateTemplateUnauthorizedResponseBody runs the validations defined
// on create_template_unauthorized_response_body
func ValidateCreateTemplateUnauthorizedResponseBody(body *CreateTemplateUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetTemplateBadRequestResponseBody runs the validations defined on
// get_template_bad_request_response_body
func ValidateGetTemplateBadRequestResponseBody(body *GetTemplateBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetTemplateForbiddenResponseBody runs the validations defined on
// get_template_forbidden_response_body
func ValidateGetTemplateForbiddenResponseBody(body *GetTemplateForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetTemplateInternalErrorResponseBody runs the validations defined on
// get_template_internal_error_response_body
func ValidateGetTemplateInternalErrorResponseBody(body *GetTemplateInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetTemplateNotFoundResponseBody runs the validations defined on
// get_template_not_found_response_body
func ValidateGetTemplateNotFoundResponseBody(body *GetTemplateNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetTemplateUnauthorizedResponseBody runs the validations defined on
// get_template_unauthorized_response_body
func ValidateGetTemplateUnauthorizedResponseBody(body *GetTemplateUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetTemplateByTypeBadRequestResponseBody runs the validations defined
// on get_template_by_type_bad_request_response_body
func ValidateGetTemplateByTypeBadRequestResponseBody(body *GetTemplateByTypeBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetTemplateByTypeForbiddenResponseBody runs the validations defined
// on get_template_by_type_forbidden_response_body
func ValidateGetTemplateByTypeForbiddenResponseBody(body *GetTemplateByTypeForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetTemplateByTypeInternalErrorResponseBody runs the validations
// defined on get_template_by_type_internal_error_response_body
func ValidateGetTemplateByTypeInternalErrorResponseBody(body *GetTemplateByTypeInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetTemplateByTypeNotFoundResponseBody runs the validations defined
// on get_template_by_type_not_found_response_body
func ValidateGetTemplateByTypeNotFoundResponseBody(body *GetTemplateByTypeNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetTemplateByTypeUnauthorizedResponseBody runs the validations
// defined on get_template_by_type_unauthorized_response_body
func ValidateGetTemplateByTypeUnauthorizedResponseBody(body *GetTemplateByTypeUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateTemplateBadRequestResponseBody runs the validations defined on
// update_template_bad_request_response_body
func ValidateUpdateTemplateBadRequestResponseBody(body *UpdateTemplateBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateTemplateForbiddenResponseBody runs the validations defined on
// update_template_forbidden_response_body
func ValidateUpdateTemplateForbiddenResponseBody(body *UpdateTemplateForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateTemplateInternalErrorResponseBody runs the validations defined
// on update_template_internal_error_response_body
func ValidateUpdateTemplateInternalErrorResponseBody(body *UpdateTemplateInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateTemplateNotFoundResponseBody runs the validations defined on
// update_template_not_found_response_body
func ValidateUpdateTemplateNotFoundResponseBody(body *UpdateTemplateNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateTemplateUnauthorizedResponseBody runs the validations defined
// on update_template_unauthorized_response_body
func ValidateUpdateTemplateUnauthorizedResponseBody(body *UpdateTemplateUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteTemplateBadRequestResponseBody runs the validations defined on
// delete_template_bad_request_response_body
func ValidateDeleteTemplateBadRequestResponseBody(body *DeleteTemplateBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteTemplateForbiddenResponseBody runs the validations defined on
// delete_template_forbidden_response_body
func ValidateDeleteTemplateForbiddenResponseBody(body *DeleteTemplateForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteTemplateInternalErrorResponseBody runs the validations defined
// on delete_template_internal_error_response_body
func ValidateDeleteTemplateInternalErrorResponseBody(body *DeleteTemplateInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteTemplateNotFoundResponseBody runs the validations defined on
// delete_template_not_found_response_body
func ValidateDeleteTemplateNotFoundResponseBody(body *DeleteTemplateNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteTemplateUnauthorizedResponseBody runs the validations defined
// on delete_template_unauthorized_response_body
func ValidateDeleteTemplateUnauthorizedResponseBody(body *DeleteTemplateUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateSendBadRequestResponseBody runs the validations defined on
// send_bad_request_response_body
func ValidateSendBadRequestResponseBody(body *SendBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateSendForbiddenResponseBody runs the validations defined on
// send_forbidden_response_body
func ValidateSendForbiddenResponseBody(body *SendForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateSendInternalErrorResponseBody runs the validations defined on
// send_internal_error_response_body
func ValidateSendInternalErrorResponseBody(body *SendInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateSendNotFoundResponseBody runs the validations defined on
// send_not_found_response_body
func ValidateSendNotFoundResponseBody(body *SendNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateSendUnauthorizedResponseBody runs the validations defined on
// send_unauthorized_response_body
func ValidateSendUnauthorizedResponseBody(body *SendUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateSendTemplateBadRequestResponseBody runs the validations defined on
// send_template_bad_request_response_body
func ValidateSendTemplateBadRequestResponseBody(body *SendTemplateBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateSendTemplateForbiddenResponseBody runs the validations defined on
// send_template_forbidden_response_body
func ValidateSendTemplateForbiddenResponseBody(body *SendTemplateForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateSendTemplateInternalErrorResponseBody runs the validations defined
// on send_template_internal_error_response_body
func ValidateSendTemplateInternalErrorResponseBody(body *SendTemplateInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateSendTemplateNotFoundResponseBody runs the validations defined on
// send_template_not_found_response_body
func ValidateSendTemplateNotFoundResponseBody(body *SendTemplateNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateSendTemplateUnauthorizedResponseBody runs the validations defined on
// send_template_unauthorized_response_body
func ValidateSendTemplateUnauthorizedResponseBody(body *SendTemplateUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateEmailTemplateResponseResponseBody runs the validations defined on
// EmailTemplateResponseResponseBody
func ValidateEmailTemplateResponseResponseBody(body *EmailTemplateResponseResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Subject == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("subject", "body"))
	}
	if body.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "body"))
	}
	if body.HTMLContent == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("html_content", "body"))
	}
	if body.Active == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("active", "body"))
	}
	if body.System == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("system", "body"))
	}
	if body.Locale == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("locale", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	if body.UpdatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("updated_at", "body"))
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updated_at", *body.UpdatedAt, goa.FormatDateTime))
	}
	return
}

// ValidatePaginationResponseBody runs the validations defined on
// PaginationResponseBody
func ValidatePaginationResponseBody(body *PaginationResponseBody) (err error) {
	if body.Total == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total", "body"))
	}
	if body.Offset == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("offset", "body"))
	}
	if body.Limit == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("limit", "body"))
	}
	if body.TotalPages == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total_pages", "body"))
	}
	if body.CurrentPage == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("current_page", "body"))
	}
	if body.HasNext == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("has_next", "body"))
	}
	if body.HasPrevious == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("has_previous", "body"))
	}
	if body.Offset != nil {
		if *body.Offset < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.offset", *body.Offset, 0, true))
		}
	}
	if body.Limit != nil {
		if *body.Limit < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.limit", *body.Limit, 1, true))
		}
	}
	if body.Limit != nil {
		if *body.Limit > 100 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.limit", *body.Limit, 100, false))
		}
	}
	return
}
