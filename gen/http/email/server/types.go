// Code generated by goa v3.20.0, DO NOT EDIT.
//
// email HTTP server types
//
// Command:
// $ goa gen github.com/juicycleff/frank/design -o .

package server

import (
	email "github.com/juicycleff/frank/gen/email"
	goa "goa.design/goa/v3/pkg"
)

// CreateTemplateRequestBody is the type of the "email" service
// "create_template" endpoint HTTP request body.
type CreateTemplateRequestBody struct {
	// Template name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Email subject
	Subject *string `form:"subject,omitempty" json:"subject,omitempty" xml:"subject,omitempty"`
	// Template type
	Type *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	// HTML content
	HTMLContent *string `form:"html_content,omitempty" json:"html_content,omitempty" xml:"html_content,omitempty"`
	// Text content
	TextContent *string `form:"text_content,omitempty" json:"text_content,omitempty" xml:"text_content,omitempty"`
	// Organization ID
	OrganizationID *string `form:"organization_id,omitempty" json:"organization_id,omitempty" xml:"organization_id,omitempty"`
	// Whether template is active
	Active *bool `form:"active,omitempty" json:"active,omitempty" xml:"active,omitempty"`
	// Whether this is a system template
	System *bool `form:"system,omitempty" json:"system,omitempty" xml:"system,omitempty"`
	// Template locale
	Locale *string `form:"locale,omitempty" json:"locale,omitempty" xml:"locale,omitempty"`
	// Template metadata
	Metadata map[string]any `form:"metadata,omitempty" json:"metadata,omitempty" xml:"metadata,omitempty"`
}

// UpdateTemplateRequestBody is the type of the "email" service
// "update_template" endpoint HTTP request body.
type UpdateTemplateRequestBody struct {
	Template *UpdateEmailTemplateRequestRequestBody `form:"template,omitempty" json:"template,omitempty" xml:"template,omitempty"`
}

// SendRequestBody is the type of the "email" service "send" endpoint HTTP
// request body.
type SendRequestBody struct {
	// Recipients
	To []string `form:"to,omitempty" json:"to,omitempty" xml:"to,omitempty"`
	// Sender email
	From *string `form:"from,omitempty" json:"from,omitempty" xml:"from,omitempty"`
	// Email subject
	Subject *string `form:"subject,omitempty" json:"subject,omitempty" xml:"subject,omitempty"`
	// HTML content
	HTMLContent *string `form:"html_content,omitempty" json:"html_content,omitempty" xml:"html_content,omitempty"`
	// Text content
	TextContent *string `form:"text_content,omitempty" json:"text_content,omitempty" xml:"text_content,omitempty"`
	// CC recipients
	Cc []string `form:"cc,omitempty" json:"cc,omitempty" xml:"cc,omitempty"`
	// BCC recipients
	Bcc []string `form:"bcc,omitempty" json:"bcc,omitempty" xml:"bcc,omitempty"`
	// Reply-to address
	ReplyTo *string `form:"reply_to,omitempty" json:"reply_to,omitempty" xml:"reply_to,omitempty"`
	// Custom headers
	Headers map[string]string `form:"headers,omitempty" json:"headers,omitempty" xml:"headers,omitempty"`
	// Email metadata
	Metadata map[string]any `form:"metadata,omitempty" json:"metadata,omitempty" xml:"metadata,omitempty"`
}

// SendTemplateRequestBody is the type of the "email" service "send_template"
// endpoint HTTP request body.
type SendTemplateRequestBody struct {
	// Recipients
	To []string `form:"to,omitempty" json:"to,omitempty" xml:"to,omitempty"`
	// Sender email
	From *string `form:"from,omitempty" json:"from,omitempty" xml:"from,omitempty"`
	// Custom subject (overrides template subject)
	Subject *string `form:"subject,omitempty" json:"subject,omitempty" xml:"subject,omitempty"`
	// Template type
	TemplateType *string `form:"template_type,omitempty" json:"template_type,omitempty" xml:"template_type,omitempty"`
	// Template data
	TemplateData map[string]any `form:"template_data,omitempty" json:"template_data,omitempty" xml:"template_data,omitempty"`
	// Organization ID
	OrganizationID *string `form:"organization_id,omitempty" json:"organization_id,omitempty" xml:"organization_id,omitempty"`
	// Template locale
	Locale *string `form:"locale,omitempty" json:"locale,omitempty" xml:"locale,omitempty"`
	// CC recipients
	Cc []string `form:"cc,omitempty" json:"cc,omitempty" xml:"cc,omitempty"`
	// BCC recipients
	Bcc []string `form:"bcc,omitempty" json:"bcc,omitempty" xml:"bcc,omitempty"`
	// Reply-to address
	ReplyTo *string `form:"reply_to,omitempty" json:"reply_to,omitempty" xml:"reply_to,omitempty"`
	// Custom headers
	Headers map[string]string `form:"headers,omitempty" json:"headers,omitempty" xml:"headers,omitempty"`
	// Email metadata
	Metadata map[string]any `form:"metadata,omitempty" json:"metadata,omitempty" xml:"metadata,omitempty"`
}

// ListTemplatesResponseBody is the type of the "email" service
// "list_templates" endpoint HTTP response body.
type ListTemplatesResponseBody struct {
	Data       []*EmailTemplateResponseResponseBody `form:"data" json:"data" xml:"data"`
	Pagination *PaginationResponseResponseBody      `form:"pagination" json:"pagination" xml:"pagination"`
}

// CreateTemplateResponseBody is the type of the "email" service
// "create_template" endpoint HTTP response body.
type CreateTemplateResponseBody struct {
	// Template ID
	ID string `form:"id" json:"id" xml:"id"`
	// Template name
	Name string `form:"name" json:"name" xml:"name"`
	// Email subject
	Subject string `form:"subject" json:"subject" xml:"subject"`
	// Template type
	Type string `form:"type" json:"type" xml:"type"`
	// HTML content
	HTMLContent string `form:"html_content" json:"html_content" xml:"html_content"`
	// Text content
	TextContent *string `form:"text_content,omitempty" json:"text_content,omitempty" xml:"text_content,omitempty"`
	// Organization ID
	OrganizationID *string `form:"organization_id,omitempty" json:"organization_id,omitempty" xml:"organization_id,omitempty"`
	// Whether template is active
	Active bool `form:"active" json:"active" xml:"active"`
	// Whether this is a system template
	System bool `form:"system" json:"system" xml:"system"`
	// Template locale
	Locale string `form:"locale" json:"locale" xml:"locale"`
	// Template metadata
	Metadata map[string]any `form:"metadata,omitempty" json:"metadata,omitempty" xml:"metadata,omitempty"`
	// Creation timestamp
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// Last update timestamp
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// GetTemplateResponseBody is the type of the "email" service "get_template"
// endpoint HTTP response body.
type GetTemplateResponseBody struct {
	// Template ID
	ID string `form:"id" json:"id" xml:"id"`
	// Template name
	Name string `form:"name" json:"name" xml:"name"`
	// Email subject
	Subject string `form:"subject" json:"subject" xml:"subject"`
	// Template type
	Type string `form:"type" json:"type" xml:"type"`
	// HTML content
	HTMLContent string `form:"html_content" json:"html_content" xml:"html_content"`
	// Text content
	TextContent *string `form:"text_content,omitempty" json:"text_content,omitempty" xml:"text_content,omitempty"`
	// Organization ID
	OrganizationID *string `form:"organization_id,omitempty" json:"organization_id,omitempty" xml:"organization_id,omitempty"`
	// Whether template is active
	Active bool `form:"active" json:"active" xml:"active"`
	// Whether this is a system template
	System bool `form:"system" json:"system" xml:"system"`
	// Template locale
	Locale string `form:"locale" json:"locale" xml:"locale"`
	// Template metadata
	Metadata map[string]any `form:"metadata,omitempty" json:"metadata,omitempty" xml:"metadata,omitempty"`
	// Creation timestamp
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// Last update timestamp
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// GetTemplateByTypeResponseBody is the type of the "email" service
// "get_template_by_type" endpoint HTTP response body.
type GetTemplateByTypeResponseBody struct {
	// Template ID
	ID string `form:"id" json:"id" xml:"id"`
	// Template name
	Name string `form:"name" json:"name" xml:"name"`
	// Email subject
	Subject string `form:"subject" json:"subject" xml:"subject"`
	// Template type
	Type string `form:"type" json:"type" xml:"type"`
	// HTML content
	HTMLContent string `form:"html_content" json:"html_content" xml:"html_content"`
	// Text content
	TextContent *string `form:"text_content,omitempty" json:"text_content,omitempty" xml:"text_content,omitempty"`
	// Organization ID
	OrganizationID *string `form:"organization_id,omitempty" json:"organization_id,omitempty" xml:"organization_id,omitempty"`
	// Whether template is active
	Active bool `form:"active" json:"active" xml:"active"`
	// Whether this is a system template
	System bool `form:"system" json:"system" xml:"system"`
	// Template locale
	Locale string `form:"locale" json:"locale" xml:"locale"`
	// Template metadata
	Metadata map[string]any `form:"metadata,omitempty" json:"metadata,omitempty" xml:"metadata,omitempty"`
	// Creation timestamp
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// Last update timestamp
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// UpdateTemplateResponseBody is the type of the "email" service
// "update_template" endpoint HTTP response body.
type UpdateTemplateResponseBody struct {
	// Template ID
	ID string `form:"id" json:"id" xml:"id"`
	// Template name
	Name string `form:"name" json:"name" xml:"name"`
	// Email subject
	Subject string `form:"subject" json:"subject" xml:"subject"`
	// Template type
	Type string `form:"type" json:"type" xml:"type"`
	// HTML content
	HTMLContent string `form:"html_content" json:"html_content" xml:"html_content"`
	// Text content
	TextContent *string `form:"text_content,omitempty" json:"text_content,omitempty" xml:"text_content,omitempty"`
	// Organization ID
	OrganizationID *string `form:"organization_id,omitempty" json:"organization_id,omitempty" xml:"organization_id,omitempty"`
	// Whether template is active
	Active bool `form:"active" json:"active" xml:"active"`
	// Whether this is a system template
	System bool `form:"system" json:"system" xml:"system"`
	// Template locale
	Locale string `form:"locale" json:"locale" xml:"locale"`
	// Template metadata
	Metadata map[string]any `form:"metadata,omitempty" json:"metadata,omitempty" xml:"metadata,omitempty"`
	// Creation timestamp
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// Last update timestamp
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// SendResponseBody is the type of the "email" service "send" endpoint HTTP
// response body.
type SendResponseBody struct {
	// Success message
	Message string `form:"message" json:"message" xml:"message"`
}

// SendTemplateResponseBody is the type of the "email" service "send_template"
// endpoint HTTP response body.
type SendTemplateResponseBody struct {
	// Success message
	Message string `form:"message" json:"message" xml:"message"`
}

// ListTemplatesBadRequestResponseBody is the type of the "email" service
// "list_templates" endpoint HTTP response body for the "bad_request" error.
type ListTemplatesBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListTemplatesForbiddenResponseBody is the type of the "email" service
// "list_templates" endpoint HTTP response body for the "forbidden" error.
type ListTemplatesForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListTemplatesInternalErrorResponseBody is the type of the "email" service
// "list_templates" endpoint HTTP response body for the "internal_error" error.
type ListTemplatesInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListTemplatesNotFoundResponseBody is the type of the "email" service
// "list_templates" endpoint HTTP response body for the "not_found" error.
type ListTemplatesNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListTemplatesUnauthorizedResponseBody is the type of the "email" service
// "list_templates" endpoint HTTP response body for the "unauthorized" error.
type ListTemplatesUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreateTemplateBadRequestResponseBody is the type of the "email" service
// "create_template" endpoint HTTP response body for the "bad_request" error.
type CreateTemplateBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreateTemplateForbiddenResponseBody is the type of the "email" service
// "create_template" endpoint HTTP response body for the "forbidden" error.
type CreateTemplateForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreateTemplateInternalErrorResponseBody is the type of the "email" service
// "create_template" endpoint HTTP response body for the "internal_error" error.
type CreateTemplateInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreateTemplateNotFoundResponseBody is the type of the "email" service
// "create_template" endpoint HTTP response body for the "not_found" error.
type CreateTemplateNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreateTemplateUnauthorizedResponseBody is the type of the "email" service
// "create_template" endpoint HTTP response body for the "unauthorized" error.
type CreateTemplateUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetTemplateBadRequestResponseBody is the type of the "email" service
// "get_template" endpoint HTTP response body for the "bad_request" error.
type GetTemplateBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetTemplateForbiddenResponseBody is the type of the "email" service
// "get_template" endpoint HTTP response body for the "forbidden" error.
type GetTemplateForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetTemplateInternalErrorResponseBody is the type of the "email" service
// "get_template" endpoint HTTP response body for the "internal_error" error.
type GetTemplateInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetTemplateNotFoundResponseBody is the type of the "email" service
// "get_template" endpoint HTTP response body for the "not_found" error.
type GetTemplateNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetTemplateUnauthorizedResponseBody is the type of the "email" service
// "get_template" endpoint HTTP response body for the "unauthorized" error.
type GetTemplateUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetTemplateByTypeBadRequestResponseBody is the type of the "email" service
// "get_template_by_type" endpoint HTTP response body for the "bad_request"
// error.
type GetTemplateByTypeBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetTemplateByTypeForbiddenResponseBody is the type of the "email" service
// "get_template_by_type" endpoint HTTP response body for the "forbidden" error.
type GetTemplateByTypeForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetTemplateByTypeInternalErrorResponseBody is the type of the "email"
// service "get_template_by_type" endpoint HTTP response body for the
// "internal_error" error.
type GetTemplateByTypeInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetTemplateByTypeNotFoundResponseBody is the type of the "email" service
// "get_template_by_type" endpoint HTTP response body for the "not_found" error.
type GetTemplateByTypeNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetTemplateByTypeUnauthorizedResponseBody is the type of the "email" service
// "get_template_by_type" endpoint HTTP response body for the "unauthorized"
// error.
type GetTemplateByTypeUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateTemplateBadRequestResponseBody is the type of the "email" service
// "update_template" endpoint HTTP response body for the "bad_request" error.
type UpdateTemplateBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateTemplateForbiddenResponseBody is the type of the "email" service
// "update_template" endpoint HTTP response body for the "forbidden" error.
type UpdateTemplateForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateTemplateInternalErrorResponseBody is the type of the "email" service
// "update_template" endpoint HTTP response body for the "internal_error" error.
type UpdateTemplateInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateTemplateNotFoundResponseBody is the type of the "email" service
// "update_template" endpoint HTTP response body for the "not_found" error.
type UpdateTemplateNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateTemplateUnauthorizedResponseBody is the type of the "email" service
// "update_template" endpoint HTTP response body for the "unauthorized" error.
type UpdateTemplateUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteTemplateBadRequestResponseBody is the type of the "email" service
// "delete_template" endpoint HTTP response body for the "bad_request" error.
type DeleteTemplateBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteTemplateForbiddenResponseBody is the type of the "email" service
// "delete_template" endpoint HTTP response body for the "forbidden" error.
type DeleteTemplateForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteTemplateInternalErrorResponseBody is the type of the "email" service
// "delete_template" endpoint HTTP response body for the "internal_error" error.
type DeleteTemplateInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteTemplateNotFoundResponseBody is the type of the "email" service
// "delete_template" endpoint HTTP response body for the "not_found" error.
type DeleteTemplateNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteTemplateUnauthorizedResponseBody is the type of the "email" service
// "delete_template" endpoint HTTP response body for the "unauthorized" error.
type DeleteTemplateUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// SendBadRequestResponseBody is the type of the "email" service "send"
// endpoint HTTP response body for the "bad_request" error.
type SendBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// SendForbiddenResponseBody is the type of the "email" service "send" endpoint
// HTTP response body for the "forbidden" error.
type SendForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// SendInternalErrorResponseBody is the type of the "email" service "send"
// endpoint HTTP response body for the "internal_error" error.
type SendInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// SendNotFoundResponseBody is the type of the "email" service "send" endpoint
// HTTP response body for the "not_found" error.
type SendNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// SendUnauthorizedResponseBody is the type of the "email" service "send"
// endpoint HTTP response body for the "unauthorized" error.
type SendUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// SendTemplateBadRequestResponseBody is the type of the "email" service
// "send_template" endpoint HTTP response body for the "bad_request" error.
type SendTemplateBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// SendTemplateForbiddenResponseBody is the type of the "email" service
// "send_template" endpoint HTTP response body for the "forbidden" error.
type SendTemplateForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// SendTemplateInternalErrorResponseBody is the type of the "email" service
// "send_template" endpoint HTTP response body for the "internal_error" error.
type SendTemplateInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// SendTemplateNotFoundResponseBody is the type of the "email" service
// "send_template" endpoint HTTP response body for the "not_found" error.
type SendTemplateNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// SendTemplateUnauthorizedResponseBody is the type of the "email" service
// "send_template" endpoint HTTP response body for the "unauthorized" error.
type SendTemplateUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// EmailTemplateResponseResponseBody is used to define fields on response body
// types.
type EmailTemplateResponseResponseBody struct {
	// Template ID
	ID string `form:"id" json:"id" xml:"id"`
	// Template name
	Name string `form:"name" json:"name" xml:"name"`
	// Email subject
	Subject string `form:"subject" json:"subject" xml:"subject"`
	// Template type
	Type string `form:"type" json:"type" xml:"type"`
	// HTML content
	HTMLContent string `form:"html_content" json:"html_content" xml:"html_content"`
	// Text content
	TextContent *string `form:"text_content,omitempty" json:"text_content,omitempty" xml:"text_content,omitempty"`
	// Organization ID
	OrganizationID *string `form:"organization_id,omitempty" json:"organization_id,omitempty" xml:"organization_id,omitempty"`
	// Whether template is active
	Active bool `form:"active" json:"active" xml:"active"`
	// Whether this is a system template
	System bool `form:"system" json:"system" xml:"system"`
	// Template locale
	Locale string `form:"locale" json:"locale" xml:"locale"`
	// Template metadata
	Metadata map[string]any `form:"metadata,omitempty" json:"metadata,omitempty" xml:"metadata,omitempty"`
	// Creation timestamp
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// Last update timestamp
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// PaginationResponseResponseBody is used to define fields on response body
// types.
type PaginationResponseResponseBody struct {
	// Total number of items
	Total int `form:"total" json:"total" xml:"total"`
	// Current offset
	Offset int `form:"offset" json:"offset" xml:"offset"`
	// Current limit
	Limit int `form:"limit" json:"limit" xml:"limit"`
}

// UpdateEmailTemplateRequestRequestBody is used to define fields on request
// body types.
type UpdateEmailTemplateRequestRequestBody struct {
	// Template name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Email subject
	Subject *string `form:"subject,omitempty" json:"subject,omitempty" xml:"subject,omitempty"`
	// HTML content
	HTMLContent *string `form:"html_content,omitempty" json:"html_content,omitempty" xml:"html_content,omitempty"`
	// Text content
	TextContent *string `form:"text_content,omitempty" json:"text_content,omitempty" xml:"text_content,omitempty"`
	// Whether template is active
	Active *bool `form:"active,omitempty" json:"active,omitempty" xml:"active,omitempty"`
	// Template locale
	Locale *string `form:"locale,omitempty" json:"locale,omitempty" xml:"locale,omitempty"`
	// Template metadata
	Metadata map[string]any `form:"metadata,omitempty" json:"metadata,omitempty" xml:"metadata,omitempty"`
}

// NewListTemplatesResponseBody builds the HTTP response body from the result
// of the "list_templates" endpoint of the "email" service.
func NewListTemplatesResponseBody(res *email.ListTemplatesResult) *ListTemplatesResponseBody {
	body := &ListTemplatesResponseBody{}
	if res.Data != nil {
		body.Data = make([]*EmailTemplateResponseResponseBody, len(res.Data))
		for i, val := range res.Data {
			body.Data[i] = marshalEmailEmailTemplateResponseToEmailTemplateResponseResponseBody(val)
		}
	} else {
		body.Data = []*EmailTemplateResponseResponseBody{}
	}
	if res.Pagination != nil {
		body.Pagination = marshalDesigntypesPaginationResponseToPaginationResponseResponseBody(res.Pagination)
	}
	return body
}

// NewCreateTemplateResponseBody builds the HTTP response body from the result
// of the "create_template" endpoint of the "email" service.
func NewCreateTemplateResponseBody(res *email.EmailTemplateResponse) *CreateTemplateResponseBody {
	body := &CreateTemplateResponseBody{
		ID:             res.ID,
		Name:           res.Name,
		Subject:        res.Subject,
		Type:           res.Type,
		HTMLContent:    res.HTMLContent,
		TextContent:    res.TextContent,
		OrganizationID: res.OrganizationID,
		Active:         res.Active,
		System:         res.System,
		Locale:         res.Locale,
		CreatedAt:      res.CreatedAt,
		UpdatedAt:      res.UpdatedAt,
	}
	if res.Metadata != nil {
		body.Metadata = make(map[string]any, len(res.Metadata))
		for key, val := range res.Metadata {
			tk := key
			tv := val
			body.Metadata[tk] = tv
		}
	}
	return body
}

// NewGetTemplateResponseBody builds the HTTP response body from the result of
// the "get_template" endpoint of the "email" service.
func NewGetTemplateResponseBody(res *email.EmailTemplateResponse) *GetTemplateResponseBody {
	body := &GetTemplateResponseBody{
		ID:             res.ID,
		Name:           res.Name,
		Subject:        res.Subject,
		Type:           res.Type,
		HTMLContent:    res.HTMLContent,
		TextContent:    res.TextContent,
		OrganizationID: res.OrganizationID,
		Active:         res.Active,
		System:         res.System,
		Locale:         res.Locale,
		CreatedAt:      res.CreatedAt,
		UpdatedAt:      res.UpdatedAt,
	}
	if res.Metadata != nil {
		body.Metadata = make(map[string]any, len(res.Metadata))
		for key, val := range res.Metadata {
			tk := key
			tv := val
			body.Metadata[tk] = tv
		}
	}
	return body
}

// NewGetTemplateByTypeResponseBody builds the HTTP response body from the
// result of the "get_template_by_type" endpoint of the "email" service.
func NewGetTemplateByTypeResponseBody(res *email.EmailTemplateResponse) *GetTemplateByTypeResponseBody {
	body := &GetTemplateByTypeResponseBody{
		ID:             res.ID,
		Name:           res.Name,
		Subject:        res.Subject,
		Type:           res.Type,
		HTMLContent:    res.HTMLContent,
		TextContent:    res.TextContent,
		OrganizationID: res.OrganizationID,
		Active:         res.Active,
		System:         res.System,
		Locale:         res.Locale,
		CreatedAt:      res.CreatedAt,
		UpdatedAt:      res.UpdatedAt,
	}
	if res.Metadata != nil {
		body.Metadata = make(map[string]any, len(res.Metadata))
		for key, val := range res.Metadata {
			tk := key
			tv := val
			body.Metadata[tk] = tv
		}
	}
	return body
}

// NewUpdateTemplateResponseBody builds the HTTP response body from the result
// of the "update_template" endpoint of the "email" service.
func NewUpdateTemplateResponseBody(res *email.EmailTemplateResponse) *UpdateTemplateResponseBody {
	body := &UpdateTemplateResponseBody{
		ID:             res.ID,
		Name:           res.Name,
		Subject:        res.Subject,
		Type:           res.Type,
		HTMLContent:    res.HTMLContent,
		TextContent:    res.TextContent,
		OrganizationID: res.OrganizationID,
		Active:         res.Active,
		System:         res.System,
		Locale:         res.Locale,
		CreatedAt:      res.CreatedAt,
		UpdatedAt:      res.UpdatedAt,
	}
	if res.Metadata != nil {
		body.Metadata = make(map[string]any, len(res.Metadata))
		for key, val := range res.Metadata {
			tk := key
			tv := val
			body.Metadata[tk] = tv
		}
	}
	return body
}

// NewSendResponseBody builds the HTTP response body from the result of the
// "send" endpoint of the "email" service.
func NewSendResponseBody(res *email.SendResult) *SendResponseBody {
	body := &SendResponseBody{
		Message: res.Message,
	}
	return body
}

// NewSendTemplateResponseBody builds the HTTP response body from the result of
// the "send_template" endpoint of the "email" service.
func NewSendTemplateResponseBody(res *email.SendTemplateResult) *SendTemplateResponseBody {
	body := &SendTemplateResponseBody{
		Message: res.Message,
	}
	return body
}

// NewListTemplatesBadRequestResponseBody builds the HTTP response body from
// the result of the "list_templates" endpoint of the "email" service.
func NewListTemplatesBadRequestResponseBody(res *email.BadRequestError) *ListTemplatesBadRequestResponseBody {
	body := &ListTemplatesBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewListTemplatesForbiddenResponseBody builds the HTTP response body from the
// result of the "list_templates" endpoint of the "email" service.
func NewListTemplatesForbiddenResponseBody(res *email.ForbiddenError) *ListTemplatesForbiddenResponseBody {
	body := &ListTemplatesForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewListTemplatesInternalErrorResponseBody builds the HTTP response body from
// the result of the "list_templates" endpoint of the "email" service.
func NewListTemplatesInternalErrorResponseBody(res *email.InternalServerError) *ListTemplatesInternalErrorResponseBody {
	body := &ListTemplatesInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewListTemplatesNotFoundResponseBody builds the HTTP response body from the
// result of the "list_templates" endpoint of the "email" service.
func NewListTemplatesNotFoundResponseBody(res *email.NotFoundError) *ListTemplatesNotFoundResponseBody {
	body := &ListTemplatesNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewListTemplatesUnauthorizedResponseBody builds the HTTP response body from
// the result of the "list_templates" endpoint of the "email" service.
func NewListTemplatesUnauthorizedResponseBody(res *email.UnauthorizedError) *ListTemplatesUnauthorizedResponseBody {
	body := &ListTemplatesUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewCreateTemplateBadRequestResponseBody builds the HTTP response body from
// the result of the "create_template" endpoint of the "email" service.
func NewCreateTemplateBadRequestResponseBody(res *email.BadRequestError) *CreateTemplateBadRequestResponseBody {
	body := &CreateTemplateBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewCreateTemplateForbiddenResponseBody builds the HTTP response body from
// the result of the "create_template" endpoint of the "email" service.
func NewCreateTemplateForbiddenResponseBody(res *email.ForbiddenError) *CreateTemplateForbiddenResponseBody {
	body := &CreateTemplateForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewCreateTemplateInternalErrorResponseBody builds the HTTP response body
// from the result of the "create_template" endpoint of the "email" service.
func NewCreateTemplateInternalErrorResponseBody(res *email.InternalServerError) *CreateTemplateInternalErrorResponseBody {
	body := &CreateTemplateInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewCreateTemplateNotFoundResponseBody builds the HTTP response body from the
// result of the "create_template" endpoint of the "email" service.
func NewCreateTemplateNotFoundResponseBody(res *email.NotFoundError) *CreateTemplateNotFoundResponseBody {
	body := &CreateTemplateNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewCreateTemplateUnauthorizedResponseBody builds the HTTP response body from
// the result of the "create_template" endpoint of the "email" service.
func NewCreateTemplateUnauthorizedResponseBody(res *email.UnauthorizedError) *CreateTemplateUnauthorizedResponseBody {
	body := &CreateTemplateUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewGetTemplateBadRequestResponseBody builds the HTTP response body from the
// result of the "get_template" endpoint of the "email" service.
func NewGetTemplateBadRequestResponseBody(res *email.BadRequestError) *GetTemplateBadRequestResponseBody {
	body := &GetTemplateBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewGetTemplateForbiddenResponseBody builds the HTTP response body from the
// result of the "get_template" endpoint of the "email" service.
func NewGetTemplateForbiddenResponseBody(res *email.ForbiddenError) *GetTemplateForbiddenResponseBody {
	body := &GetTemplateForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewGetTemplateInternalErrorResponseBody builds the HTTP response body from
// the result of the "get_template" endpoint of the "email" service.
func NewGetTemplateInternalErrorResponseBody(res *email.InternalServerError) *GetTemplateInternalErrorResponseBody {
	body := &GetTemplateInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewGetTemplateNotFoundResponseBody builds the HTTP response body from the
// result of the "get_template" endpoint of the "email" service.
func NewGetTemplateNotFoundResponseBody(res *email.NotFoundError) *GetTemplateNotFoundResponseBody {
	body := &GetTemplateNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewGetTemplateUnauthorizedResponseBody builds the HTTP response body from
// the result of the "get_template" endpoint of the "email" service.
func NewGetTemplateUnauthorizedResponseBody(res *email.UnauthorizedError) *GetTemplateUnauthorizedResponseBody {
	body := &GetTemplateUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewGetTemplateByTypeBadRequestResponseBody builds the HTTP response body
// from the result of the "get_template_by_type" endpoint of the "email"
// service.
func NewGetTemplateByTypeBadRequestResponseBody(res *email.BadRequestError) *GetTemplateByTypeBadRequestResponseBody {
	body := &GetTemplateByTypeBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewGetTemplateByTypeForbiddenResponseBody builds the HTTP response body from
// the result of the "get_template_by_type" endpoint of the "email" service.
func NewGetTemplateByTypeForbiddenResponseBody(res *email.ForbiddenError) *GetTemplateByTypeForbiddenResponseBody {
	body := &GetTemplateByTypeForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewGetTemplateByTypeInternalErrorResponseBody builds the HTTP response body
// from the result of the "get_template_by_type" endpoint of the "email"
// service.
func NewGetTemplateByTypeInternalErrorResponseBody(res *email.InternalServerError) *GetTemplateByTypeInternalErrorResponseBody {
	body := &GetTemplateByTypeInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewGetTemplateByTypeNotFoundResponseBody builds the HTTP response body from
// the result of the "get_template_by_type" endpoint of the "email" service.
func NewGetTemplateByTypeNotFoundResponseBody(res *email.NotFoundError) *GetTemplateByTypeNotFoundResponseBody {
	body := &GetTemplateByTypeNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewGetTemplateByTypeUnauthorizedResponseBody builds the HTTP response body
// from the result of the "get_template_by_type" endpoint of the "email"
// service.
func NewGetTemplateByTypeUnauthorizedResponseBody(res *email.UnauthorizedError) *GetTemplateByTypeUnauthorizedResponseBody {
	body := &GetTemplateByTypeUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewUpdateTemplateBadRequestResponseBody builds the HTTP response body from
// the result of the "update_template" endpoint of the "email" service.
func NewUpdateTemplateBadRequestResponseBody(res *email.BadRequestError) *UpdateTemplateBadRequestResponseBody {
	body := &UpdateTemplateBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewUpdateTemplateForbiddenResponseBody builds the HTTP response body from
// the result of the "update_template" endpoint of the "email" service.
func NewUpdateTemplateForbiddenResponseBody(res *email.ForbiddenError) *UpdateTemplateForbiddenResponseBody {
	body := &UpdateTemplateForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewUpdateTemplateInternalErrorResponseBody builds the HTTP response body
// from the result of the "update_template" endpoint of the "email" service.
func NewUpdateTemplateInternalErrorResponseBody(res *email.InternalServerError) *UpdateTemplateInternalErrorResponseBody {
	body := &UpdateTemplateInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewUpdateTemplateNotFoundResponseBody builds the HTTP response body from the
// result of the "update_template" endpoint of the "email" service.
func NewUpdateTemplateNotFoundResponseBody(res *email.NotFoundError) *UpdateTemplateNotFoundResponseBody {
	body := &UpdateTemplateNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewUpdateTemplateUnauthorizedResponseBody builds the HTTP response body from
// the result of the "update_template" endpoint of the "email" service.
func NewUpdateTemplateUnauthorizedResponseBody(res *email.UnauthorizedError) *UpdateTemplateUnauthorizedResponseBody {
	body := &UpdateTemplateUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewDeleteTemplateBadRequestResponseBody builds the HTTP response body from
// the result of the "delete_template" endpoint of the "email" service.
func NewDeleteTemplateBadRequestResponseBody(res *email.BadRequestError) *DeleteTemplateBadRequestResponseBody {
	body := &DeleteTemplateBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewDeleteTemplateForbiddenResponseBody builds the HTTP response body from
// the result of the "delete_template" endpoint of the "email" service.
func NewDeleteTemplateForbiddenResponseBody(res *email.ForbiddenError) *DeleteTemplateForbiddenResponseBody {
	body := &DeleteTemplateForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewDeleteTemplateInternalErrorResponseBody builds the HTTP response body
// from the result of the "delete_template" endpoint of the "email" service.
func NewDeleteTemplateInternalErrorResponseBody(res *email.InternalServerError) *DeleteTemplateInternalErrorResponseBody {
	body := &DeleteTemplateInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewDeleteTemplateNotFoundResponseBody builds the HTTP response body from the
// result of the "delete_template" endpoint of the "email" service.
func NewDeleteTemplateNotFoundResponseBody(res *email.NotFoundError) *DeleteTemplateNotFoundResponseBody {
	body := &DeleteTemplateNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewDeleteTemplateUnauthorizedResponseBody builds the HTTP response body from
// the result of the "delete_template" endpoint of the "email" service.
func NewDeleteTemplateUnauthorizedResponseBody(res *email.UnauthorizedError) *DeleteTemplateUnauthorizedResponseBody {
	body := &DeleteTemplateUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewSendBadRequestResponseBody builds the HTTP response body from the result
// of the "send" endpoint of the "email" service.
func NewSendBadRequestResponseBody(res *email.BadRequestError) *SendBadRequestResponseBody {
	body := &SendBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewSendForbiddenResponseBody builds the HTTP response body from the result
// of the "send" endpoint of the "email" service.
func NewSendForbiddenResponseBody(res *email.ForbiddenError) *SendForbiddenResponseBody {
	body := &SendForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewSendInternalErrorResponseBody builds the HTTP response body from the
// result of the "send" endpoint of the "email" service.
func NewSendInternalErrorResponseBody(res *email.InternalServerError) *SendInternalErrorResponseBody {
	body := &SendInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewSendNotFoundResponseBody builds the HTTP response body from the result of
// the "send" endpoint of the "email" service.
func NewSendNotFoundResponseBody(res *email.NotFoundError) *SendNotFoundResponseBody {
	body := &SendNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewSendUnauthorizedResponseBody builds the HTTP response body from the
// result of the "send" endpoint of the "email" service.
func NewSendUnauthorizedResponseBody(res *email.UnauthorizedError) *SendUnauthorizedResponseBody {
	body := &SendUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewSendTemplateBadRequestResponseBody builds the HTTP response body from the
// result of the "send_template" endpoint of the "email" service.
func NewSendTemplateBadRequestResponseBody(res *email.BadRequestError) *SendTemplateBadRequestResponseBody {
	body := &SendTemplateBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewSendTemplateForbiddenResponseBody builds the HTTP response body from the
// result of the "send_template" endpoint of the "email" service.
func NewSendTemplateForbiddenResponseBody(res *email.ForbiddenError) *SendTemplateForbiddenResponseBody {
	body := &SendTemplateForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewSendTemplateInternalErrorResponseBody builds the HTTP response body from
// the result of the "send_template" endpoint of the "email" service.
func NewSendTemplateInternalErrorResponseBody(res *email.InternalServerError) *SendTemplateInternalErrorResponseBody {
	body := &SendTemplateInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewSendTemplateNotFoundResponseBody builds the HTTP response body from the
// result of the "send_template" endpoint of the "email" service.
func NewSendTemplateNotFoundResponseBody(res *email.NotFoundError) *SendTemplateNotFoundResponseBody {
	body := &SendTemplateNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewSendTemplateUnauthorizedResponseBody builds the HTTP response body from
// the result of the "send_template" endpoint of the "email" service.
func NewSendTemplateUnauthorizedResponseBody(res *email.UnauthorizedError) *SendTemplateUnauthorizedResponseBody {
	body := &SendTemplateUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewListTemplatesPayload builds a email service list_templates endpoint
// payload.
func NewListTemplatesPayload(offset int, limit int, type_ *string, organizationID *string, locale *string, jwt *string) *email.ListTemplatesPayload {
	v := &email.ListTemplatesPayload{}
	v.Offset = offset
	v.Limit = limit
	v.Type = type_
	v.OrganizationID = organizationID
	v.Locale = locale
	v.JWT = jwt

	return v
}

// NewCreateTemplatePayload builds a email service create_template endpoint
// payload.
func NewCreateTemplatePayload(body *CreateTemplateRequestBody, jwt *string) *email.CreateTemplatePayload {
	v := &email.CreateTemplatePayload{
		Name:           *body.Name,
		Subject:        *body.Subject,
		Type:           *body.Type,
		HTMLContent:    *body.HTMLContent,
		TextContent:    body.TextContent,
		OrganizationID: body.OrganizationID,
	}
	if body.Active != nil {
		v.Active = *body.Active
	}
	if body.System != nil {
		v.System = *body.System
	}
	if body.Locale != nil {
		v.Locale = *body.Locale
	}
	if body.Active == nil {
		v.Active = true
	}
	if body.System == nil {
		v.System = false
	}
	if body.Locale == nil {
		v.Locale = "en"
	}
	if body.Metadata != nil {
		v.Metadata = make(map[string]any, len(body.Metadata))
		for key, val := range body.Metadata {
			tk := key
			tv := val
			v.Metadata[tk] = tv
		}
	}
	v.JWT = jwt

	return v
}

// NewGetTemplatePayload builds a email service get_template endpoint payload.
func NewGetTemplatePayload(id string, jwt *string) *email.GetTemplatePayload {
	v := &email.GetTemplatePayload{}
	v.ID = id
	v.JWT = jwt

	return v
}

// NewGetTemplateByTypePayload builds a email service get_template_by_type
// endpoint payload.
func NewGetTemplateByTypePayload(type_ string, organizationID *string, locale string, jwt *string) *email.GetTemplateByTypePayload {
	v := &email.GetTemplateByTypePayload{}
	v.Type = type_
	v.OrganizationID = organizationID
	v.Locale = locale
	v.JWT = jwt

	return v
}

// NewUpdateTemplatePayload builds a email service update_template endpoint
// payload.
func NewUpdateTemplatePayload(body *UpdateTemplateRequestBody, id string, jwt *string) *email.UpdateTemplatePayload {
	v := &email.UpdateTemplatePayload{}
	v.Template = unmarshalUpdateEmailTemplateRequestRequestBodyToEmailUpdateEmailTemplateRequest(body.Template)
	v.ID = id
	v.JWT = jwt

	return v
}

// NewDeleteTemplatePayload builds a email service delete_template endpoint
// payload.
func NewDeleteTemplatePayload(id string, jwt *string) *email.DeleteTemplatePayload {
	v := &email.DeleteTemplatePayload{}
	v.ID = id
	v.JWT = jwt

	return v
}

// NewSendPayload builds a email service send endpoint payload.
func NewSendPayload(body *SendRequestBody, jwt *string) *email.SendPayload {
	v := &email.SendPayload{
		From:        body.From,
		Subject:     *body.Subject,
		HTMLContent: body.HTMLContent,
		TextContent: body.TextContent,
		ReplyTo:     body.ReplyTo,
	}
	v.To = make([]string, len(body.To))
	for i, val := range body.To {
		v.To[i] = val
	}
	if body.Cc != nil {
		v.Cc = make([]string, len(body.Cc))
		for i, val := range body.Cc {
			v.Cc[i] = val
		}
	}
	if body.Bcc != nil {
		v.Bcc = make([]string, len(body.Bcc))
		for i, val := range body.Bcc {
			v.Bcc[i] = val
		}
	}
	if body.Headers != nil {
		v.Headers = make(map[string]string, len(body.Headers))
		for key, val := range body.Headers {
			tk := key
			tv := val
			v.Headers[tk] = tv
		}
	}
	if body.Metadata != nil {
		v.Metadata = make(map[string]any, len(body.Metadata))
		for key, val := range body.Metadata {
			tk := key
			tv := val
			v.Metadata[tk] = tv
		}
	}
	v.JWT = jwt

	return v
}

// NewSendTemplatePayload builds a email service send_template endpoint payload.
func NewSendTemplatePayload(body *SendTemplateRequestBody, jwt *string) *email.SendTemplatePayload {
	v := &email.SendTemplatePayload{
		From:           body.From,
		Subject:        body.Subject,
		TemplateType:   *body.TemplateType,
		OrganizationID: body.OrganizationID,
		ReplyTo:        body.ReplyTo,
	}
	if body.Locale != nil {
		v.Locale = *body.Locale
	}
	v.To = make([]string, len(body.To))
	for i, val := range body.To {
		v.To[i] = val
	}
	v.TemplateData = make(map[string]any, len(body.TemplateData))
	for key, val := range body.TemplateData {
		tk := key
		tv := val
		v.TemplateData[tk] = tv
	}
	if body.Locale == nil {
		v.Locale = "en"
	}
	if body.Cc != nil {
		v.Cc = make([]string, len(body.Cc))
		for i, val := range body.Cc {
			v.Cc[i] = val
		}
	}
	if body.Bcc != nil {
		v.Bcc = make([]string, len(body.Bcc))
		for i, val := range body.Bcc {
			v.Bcc[i] = val
		}
	}
	if body.Headers != nil {
		v.Headers = make(map[string]string, len(body.Headers))
		for key, val := range body.Headers {
			tk := key
			tv := val
			v.Headers[tk] = tv
		}
	}
	if body.Metadata != nil {
		v.Metadata = make(map[string]any, len(body.Metadata))
		for key, val := range body.Metadata {
			tk := key
			tv := val
			v.Metadata[tk] = tv
		}
	}
	v.JWT = jwt

	return v
}

// ValidateCreateTemplateRequestBody runs the validations defined on
// create_template_request_body
func ValidateCreateTemplateRequestBody(body *CreateTemplateRequestBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Subject == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("subject", "body"))
	}
	if body.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "body"))
	}
	if body.HTMLContent == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("html_content", "body"))
	}
	return
}

// ValidateUpdateTemplateRequestBody runs the validations defined on
// update_template_request_body
func ValidateUpdateTemplateRequestBody(body *UpdateTemplateRequestBody) (err error) {
	if body.Template == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("template", "body"))
	}
	return
}

// ValidateSendRequestBody runs the validations defined on SendRequestBody
func ValidateSendRequestBody(body *SendRequestBody) (err error) {
	if body.To == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("to", "body"))
	}
	if body.Subject == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("subject", "body"))
	}
	return
}

// ValidateSendTemplateRequestBody runs the validations defined on
// send_template_request_body
func ValidateSendTemplateRequestBody(body *SendTemplateRequestBody) (err error) {
	if body.To == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("to", "body"))
	}
	if body.TemplateType == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("template_type", "body"))
	}
	if body.TemplateData == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("template_data", "body"))
	}
	return
}
