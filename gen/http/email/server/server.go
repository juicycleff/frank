// Code generated by goa v3.20.0, DO NOT EDIT.
//
// email HTTP server
//
// Command:
// $ goa gen github.com/juicycleff/frank/design -o .

package server

import (
	"context"
	"net/http"
	"regexp"

	email "github.com/juicycleff/frank/gen/email"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
	"goa.design/plugins/v3/cors"
)

// Server lists the email service endpoint HTTP handlers.
type Server struct {
	Mounts            []*MountPoint
	ListTemplates     http.Handler
	CreateTemplate    http.Handler
	GetTemplate       http.Handler
	GetTemplateByType http.Handler
	UpdateTemplate    http.Handler
	DeleteTemplate    http.Handler
	Send              http.Handler
	SendTemplate      http.Handler
	CORS              http.Handler
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the email service endpoints using the
// provided encoder and decoder. The handlers are mounted on the given mux
// using the HTTP verb and path defined in the design. errhandler is called
// whenever a response fails to be encoded. formatter is used to format errors
// returned by the service methods prior to encoding. Both errhandler and
// formatter are optional and can be nil.
func New(
	e *email.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"ListTemplates", "GET", "/v1/email/templates"},
			{"CreateTemplate", "POST", "/v1/email/templates"},
			{"GetTemplate", "GET", "/v1/email/templates/{id}"},
			{"GetTemplateByType", "GET", "/v1/email/templates/by-type/{type}"},
			{"UpdateTemplate", "PUT", "/v1/email/templates/{id}"},
			{"DeleteTemplate", "DELETE", "/v1/email/templates/{id}"},
			{"Send", "POST", "/v1/email/send"},
			{"SendTemplate", "POST", "/v1/email/send-template"},
			{"CORS", "OPTIONS", "/v1/email/templates"},
			{"CORS", "OPTIONS", "/v1/email/templates/{id}"},
			{"CORS", "OPTIONS", "/v1/email/templates/by-type/{type}"},
			{"CORS", "OPTIONS", "/v1/email/send"},
			{"CORS", "OPTIONS", "/v1/email/send-template"},
		},
		ListTemplates:     NewListTemplatesHandler(e.ListTemplates, mux, decoder, encoder, errhandler, formatter),
		CreateTemplate:    NewCreateTemplateHandler(e.CreateTemplate, mux, decoder, encoder, errhandler, formatter),
		GetTemplate:       NewGetTemplateHandler(e.GetTemplate, mux, decoder, encoder, errhandler, formatter),
		GetTemplateByType: NewGetTemplateByTypeHandler(e.GetTemplateByType, mux, decoder, encoder, errhandler, formatter),
		UpdateTemplate:    NewUpdateTemplateHandler(e.UpdateTemplate, mux, decoder, encoder, errhandler, formatter),
		DeleteTemplate:    NewDeleteTemplateHandler(e.DeleteTemplate, mux, decoder, encoder, errhandler, formatter),
		Send:              NewSendHandler(e.Send, mux, decoder, encoder, errhandler, formatter),
		SendTemplate:      NewSendTemplateHandler(e.SendTemplate, mux, decoder, encoder, errhandler, formatter),
		CORS:              NewCORSHandler(),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "email" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.ListTemplates = m(s.ListTemplates)
	s.CreateTemplate = m(s.CreateTemplate)
	s.GetTemplate = m(s.GetTemplate)
	s.GetTemplateByType = m(s.GetTemplateByType)
	s.UpdateTemplate = m(s.UpdateTemplate)
	s.DeleteTemplate = m(s.DeleteTemplate)
	s.Send = m(s.Send)
	s.SendTemplate = m(s.SendTemplate)
	s.CORS = m(s.CORS)
}

// MethodNames returns the methods served.
func (s *Server) MethodNames() []string { return email.MethodNames[:] }

// Mount configures the mux to serve the email endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountListTemplatesHandler(mux, h.ListTemplates)
	MountCreateTemplateHandler(mux, h.CreateTemplate)
	MountGetTemplateHandler(mux, h.GetTemplate)
	MountGetTemplateByTypeHandler(mux, h.GetTemplateByType)
	MountUpdateTemplateHandler(mux, h.UpdateTemplate)
	MountDeleteTemplateHandler(mux, h.DeleteTemplate)
	MountSendHandler(mux, h.Send)
	MountSendTemplateHandler(mux, h.SendTemplate)
	MountCORSHandler(mux, h.CORS)
}

// Mount configures the mux to serve the email endpoints.
func (s *Server) Mount(mux goahttp.Muxer) {
	Mount(mux, s)
}

// MountListTemplatesHandler configures the mux to serve the "email" service
// "list_templates" endpoint.
func MountListTemplatesHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleEmailOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/v1/email/templates", f)
}

// NewListTemplatesHandler creates a HTTP handler which loads the HTTP request
// and calls the "email" service "list_templates" endpoint.
func NewListTemplatesHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeListTemplatesRequest(mux, decoder)
		encodeResponse = EncodeListTemplatesResponse(encoder)
		encodeError    = EncodeListTemplatesError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "list_templates")
		ctx = context.WithValue(ctx, goa.ServiceKey, "email")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountCreateTemplateHandler configures the mux to serve the "email" service
// "create_template" endpoint.
func MountCreateTemplateHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleEmailOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/v1/email/templates", f)
}

// NewCreateTemplateHandler creates a HTTP handler which loads the HTTP request
// and calls the "email" service "create_template" endpoint.
func NewCreateTemplateHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeCreateTemplateRequest(mux, decoder)
		encodeResponse = EncodeCreateTemplateResponse(encoder)
		encodeError    = EncodeCreateTemplateError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "create_template")
		ctx = context.WithValue(ctx, goa.ServiceKey, "email")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetTemplateHandler configures the mux to serve the "email" service
// "get_template" endpoint.
func MountGetTemplateHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleEmailOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/v1/email/templates/{id}", f)
}

// NewGetTemplateHandler creates a HTTP handler which loads the HTTP request
// and calls the "email" service "get_template" endpoint.
func NewGetTemplateHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetTemplateRequest(mux, decoder)
		encodeResponse = EncodeGetTemplateResponse(encoder)
		encodeError    = EncodeGetTemplateError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "get_template")
		ctx = context.WithValue(ctx, goa.ServiceKey, "email")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetTemplateByTypeHandler configures the mux to serve the "email"
// service "get_template_by_type" endpoint.
func MountGetTemplateByTypeHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleEmailOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/v1/email/templates/by-type/{type}", f)
}

// NewGetTemplateByTypeHandler creates a HTTP handler which loads the HTTP
// request and calls the "email" service "get_template_by_type" endpoint.
func NewGetTemplateByTypeHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetTemplateByTypeRequest(mux, decoder)
		encodeResponse = EncodeGetTemplateByTypeResponse(encoder)
		encodeError    = EncodeGetTemplateByTypeError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "get_template_by_type")
		ctx = context.WithValue(ctx, goa.ServiceKey, "email")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountUpdateTemplateHandler configures the mux to serve the "email" service
// "update_template" endpoint.
func MountUpdateTemplateHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleEmailOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("PUT", "/v1/email/templates/{id}", f)
}

// NewUpdateTemplateHandler creates a HTTP handler which loads the HTTP request
// and calls the "email" service "update_template" endpoint.
func NewUpdateTemplateHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUpdateTemplateRequest(mux, decoder)
		encodeResponse = EncodeUpdateTemplateResponse(encoder)
		encodeError    = EncodeUpdateTemplateError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "update_template")
		ctx = context.WithValue(ctx, goa.ServiceKey, "email")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountDeleteTemplateHandler configures the mux to serve the "email" service
// "delete_template" endpoint.
func MountDeleteTemplateHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleEmailOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("DELETE", "/v1/email/templates/{id}", f)
}

// NewDeleteTemplateHandler creates a HTTP handler which loads the HTTP request
// and calls the "email" service "delete_template" endpoint.
func NewDeleteTemplateHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeDeleteTemplateRequest(mux, decoder)
		encodeResponse = EncodeDeleteTemplateResponse(encoder)
		encodeError    = EncodeDeleteTemplateError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "delete_template")
		ctx = context.WithValue(ctx, goa.ServiceKey, "email")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountSendHandler configures the mux to serve the "email" service "send"
// endpoint.
func MountSendHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleEmailOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/v1/email/send", f)
}

// NewSendHandler creates a HTTP handler which loads the HTTP request and calls
// the "email" service "send" endpoint.
func NewSendHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeSendRequest(mux, decoder)
		encodeResponse = EncodeSendResponse(encoder)
		encodeError    = EncodeSendError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "send")
		ctx = context.WithValue(ctx, goa.ServiceKey, "email")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountSendTemplateHandler configures the mux to serve the "email" service
// "send_template" endpoint.
func MountSendTemplateHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleEmailOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/v1/email/send-template", f)
}

// NewSendTemplateHandler creates a HTTP handler which loads the HTTP request
// and calls the "email" service "send_template" endpoint.
func NewSendTemplateHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeSendTemplateRequest(mux, decoder)
		encodeResponse = EncodeSendTemplateResponse(encoder)
		encodeError    = EncodeSendTemplateError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "send_template")
		ctx = context.WithValue(ctx, goa.ServiceKey, "email")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountCORSHandler configures the mux to serve the CORS endpoints for the
// service email.
func MountCORSHandler(mux goahttp.Muxer, h http.Handler) {
	h = HandleEmailOrigin(h)
	mux.Handle("OPTIONS", "/v1/email/templates", h.ServeHTTP)
	mux.Handle("OPTIONS", "/v1/email/templates/{id}", h.ServeHTTP)
	mux.Handle("OPTIONS", "/v1/email/templates/by-type/{type}", h.ServeHTTP)
	mux.Handle("OPTIONS", "/v1/email/send", h.ServeHTTP)
	mux.Handle("OPTIONS", "/v1/email/send-template", h.ServeHTTP)
}

// NewCORSHandler creates a HTTP handler which returns a simple 204 response.
func NewCORSHandler() http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		w.WriteHeader(204)
	})
}

// HandleEmailOrigin applies the CORS response headers corresponding to the
// origin for the service email.
func HandleEmailOrigin(h http.Handler) http.Handler {
	spec1 := regexp.MustCompile(".*localhost.*")
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		origin := r.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			h.ServeHTTP(w, r)
			return
		}
		if cors.MatchOrigin(origin, "*.frank.com") {
			w.Header().Set("Access-Control-Allow-Origin", origin)
			w.Header().Set("Vary", "Origin")
			w.Header().Set("Access-Control-Max-Age", "100")
			w.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := r.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				w.Header().Set("Access-Control-Allow-Headers", "X-Shared-Secret, X-Api-Version")
				w.WriteHeader(204)
				return
			}
			h.ServeHTTP(w, r)
			return
		}
		if cors.MatchOriginRegexp(origin, spec1) {
			w.Header().Set("Access-Control-Allow-Origin", origin)
			w.Header().Set("Vary", "Origin")
			w.Header().Set("Access-Control-Expose-Headers", "X-Request-Id")
			w.Header().Set("Access-Control-Max-Age", "600")
			w.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := r.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				w.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS")
				w.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
				w.WriteHeader(204)
				return
			}
			h.ServeHTTP(w, r)
			return
		}
		if cors.MatchOrigin(origin, "localhost") {
			w.Header().Set("Access-Control-Allow-Origin", origin)
			w.Header().Set("Vary", "Origin")
			if acrm := r.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				w.WriteHeader(204)
				return
			}
			h.ServeHTTP(w, r)
			return
		}
		h.ServeHTTP(w, r)
		return
	})
}
