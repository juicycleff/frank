// Code generated by goa v3.20.0, DO NOT EDIT.
//
// rbac HTTP server types
//
// Command:
// $ goa gen github.com/juicycleff/frank/design -o .

package server

import (
	designtypes "github.com/juicycleff/frank/gen/designtypes"
	rbac "github.com/juicycleff/frank/gen/rbac"
	goa "goa.design/goa/v3/pkg"
)

// CreatePermissionRequestBody is the type of the "rbac" service
// "create_permission" endpoint HTTP request body.
type CreatePermissionRequestBody struct {
	Permission *CreatePermissionRequestRequestBody `form:"permission,omitempty" json:"permission,omitempty" xml:"permission,omitempty"`
}

// UpdatePermissionRequestBody is the type of the "rbac" service
// "update_permission" endpoint HTTP request body.
type UpdatePermissionRequestBody struct {
	Permission *UpdatePermissionRequestRequestBody `form:"permission,omitempty" json:"permission,omitempty" xml:"permission,omitempty"`
}

// CreateRoleRequestBody is the type of the "rbac" service "create_role"
// endpoint HTTP request body.
type CreateRoleRequestBody struct {
	Role *CreateRoleRequestRequestBody `form:"role,omitempty" json:"role,omitempty" xml:"role,omitempty"`
}

// UpdateRoleRequestBody is the type of the "rbac" service "update_role"
// endpoint HTTP request body.
type UpdateRoleRequestBody struct {
	Role *UpdateRoleRequestRequestBody `form:"role,omitempty" json:"role,omitempty" xml:"role,omitempty"`
}

// AddRolePermissionRequestBody is the type of the "rbac" service
// "add_role_permission" endpoint HTTP request body.
type AddRolePermissionRequestBody struct {
	Permission *AddRolePermissionRequestRequestBody `form:"permission,omitempty" json:"permission,omitempty" xml:"permission,omitempty"`
}

// ListPermissionsResponseBody is the type of the "rbac" service
// "list_permissions" endpoint HTTP response body.
type ListPermissionsResponseBody struct {
	Data       []*PermissionResponseResponseBody `form:"data" json:"data" xml:"data"`
	Pagination *PaginationResponseBody           `form:"pagination" json:"pagination" xml:"pagination"`
}

// CreatePermissionResponseBody is the type of the "rbac" service
// "create_permission" endpoint HTTP response body.
type CreatePermissionResponseBody struct {
	// Permission ID
	ID string `form:"id" json:"id" xml:"id"`
	// Permission name
	Name string `form:"name" json:"name" xml:"name"`
	// Permission description
	Description string `form:"description" json:"description" xml:"description"`
	// Resource this permission applies to
	Resource string `form:"resource" json:"resource" xml:"resource"`
	// Action this permission allows
	Action string `form:"action" json:"action" xml:"action"`
	// JSON expression for conditional access
	Conditions *string `form:"conditions,omitempty" json:"conditions,omitempty" xml:"conditions,omitempty"`
	// Whether this is a system permission
	System bool `form:"system" json:"system" xml:"system"`
	// Creation timestamp
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// Last update timestamp
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// GetPermissionResponseBody is the type of the "rbac" service "get_permission"
// endpoint HTTP response body.
type GetPermissionResponseBody struct {
	// Permission ID
	ID string `form:"id" json:"id" xml:"id"`
	// Permission name
	Name string `form:"name" json:"name" xml:"name"`
	// Permission description
	Description string `form:"description" json:"description" xml:"description"`
	// Resource this permission applies to
	Resource string `form:"resource" json:"resource" xml:"resource"`
	// Action this permission allows
	Action string `form:"action" json:"action" xml:"action"`
	// JSON expression for conditional access
	Conditions *string `form:"conditions,omitempty" json:"conditions,omitempty" xml:"conditions,omitempty"`
	// Whether this is a system permission
	System bool `form:"system" json:"system" xml:"system"`
	// Creation timestamp
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// Last update timestamp
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// UpdatePermissionResponseBody is the type of the "rbac" service
// "update_permission" endpoint HTTP response body.
type UpdatePermissionResponseBody struct {
	// Permission ID
	ID string `form:"id" json:"id" xml:"id"`
	// Permission name
	Name string `form:"name" json:"name" xml:"name"`
	// Permission description
	Description string `form:"description" json:"description" xml:"description"`
	// Resource this permission applies to
	Resource string `form:"resource" json:"resource" xml:"resource"`
	// Action this permission allows
	Action string `form:"action" json:"action" xml:"action"`
	// JSON expression for conditional access
	Conditions *string `form:"conditions,omitempty" json:"conditions,omitempty" xml:"conditions,omitempty"`
	// Whether this is a system permission
	System bool `form:"system" json:"system" xml:"system"`
	// Creation timestamp
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// Last update timestamp
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// ListRolesResponseBody is the type of the "rbac" service "list_roles"
// endpoint HTTP response body.
type ListRolesResponseBody struct {
	Data       []*RoleResponseResponseBody `form:"data" json:"data" xml:"data"`
	Pagination *PaginationResponseBody     `form:"pagination" json:"pagination" xml:"pagination"`
}

// CreateRoleResponseBody is the type of the "rbac" service "create_role"
// endpoint HTTP response body.
type CreateRoleResponseBody struct {
	// Role ID
	ID string `form:"id" json:"id" xml:"id"`
	// Role name
	Name string `form:"name" json:"name" xml:"name"`
	// Role description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Organization ID
	OrganizationID *string `form:"organization_id,omitempty" json:"organization_id,omitempty" xml:"organization_id,omitempty"`
	// Whether this is a system role
	System bool `form:"system" json:"system" xml:"system"`
	// Whether this is a default role for new users
	IsDefault bool `form:"is_default" json:"is_default" xml:"is_default"`
	// Permissions assigned to this role
	Permissions []*PermissionResponseResponseBody `form:"permissions,omitempty" json:"permissions,omitempty" xml:"permissions,omitempty"`
	// Creation timestamp
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// Last update timestamp
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// GetRoleResponseBody is the type of the "rbac" service "get_role" endpoint
// HTTP response body.
type GetRoleResponseBody struct {
	// Role ID
	ID string `form:"id" json:"id" xml:"id"`
	// Role name
	Name string `form:"name" json:"name" xml:"name"`
	// Role description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Organization ID
	OrganizationID *string `form:"organization_id,omitempty" json:"organization_id,omitempty" xml:"organization_id,omitempty"`
	// Whether this is a system role
	System bool `form:"system" json:"system" xml:"system"`
	// Whether this is a default role for new users
	IsDefault bool `form:"is_default" json:"is_default" xml:"is_default"`
	// Permissions assigned to this role
	Permissions []*PermissionResponseResponseBody `form:"permissions,omitempty" json:"permissions,omitempty" xml:"permissions,omitempty"`
	// Creation timestamp
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// Last update timestamp
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// UpdateRoleResponseBody is the type of the "rbac" service "update_role"
// endpoint HTTP response body.
type UpdateRoleResponseBody struct {
	// Role ID
	ID string `form:"id" json:"id" xml:"id"`
	// Role name
	Name string `form:"name" json:"name" xml:"name"`
	// Role description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Organization ID
	OrganizationID *string `form:"organization_id,omitempty" json:"organization_id,omitempty" xml:"organization_id,omitempty"`
	// Whether this is a system role
	System bool `form:"system" json:"system" xml:"system"`
	// Whether this is a default role for new users
	IsDefault bool `form:"is_default" json:"is_default" xml:"is_default"`
	// Permissions assigned to this role
	Permissions []*PermissionResponseResponseBody `form:"permissions,omitempty" json:"permissions,omitempty" xml:"permissions,omitempty"`
	// Creation timestamp
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// Last update timestamp
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// ListRolePermissionsResponseBody is the type of the "rbac" service
// "list_role_permissions" endpoint HTTP response body.
type ListRolePermissionsResponseBody struct {
	Permissions []*PermissionResponseResponseBody `form:"permissions" json:"permissions" xml:"permissions"`
}

// AddRolePermissionResponseBody is the type of the "rbac" service
// "add_role_permission" endpoint HTTP response body.
type AddRolePermissionResponseBody struct {
	// Success message
	Message string `form:"message" json:"message" xml:"message"`
}

// CheckPermissionResponseBody is the type of the "rbac" service
// "check_permission" endpoint HTTP response body.
type CheckPermissionResponseBody struct {
	// Whether user has the permission
	HasPermission bool `form:"has_permission" json:"has_permission" xml:"has_permission"`
}

// CheckRoleResponseBody is the type of the "rbac" service "check_role"
// endpoint HTTP response body.
type CheckRoleResponseBody struct {
	// Whether user has the role
	HasRole bool `form:"has_role" json:"has_role" xml:"has_role"`
}

// ListPermissionsBadRequestResponseBody is the type of the "rbac" service
// "list_permissions" endpoint HTTP response body for the "bad_request" error.
type ListPermissionsBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListPermissionsConflictResponseBody is the type of the "rbac" service
// "list_permissions" endpoint HTTP response body for the "conflict" error.
type ListPermissionsConflictResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListPermissionsForbiddenResponseBody is the type of the "rbac" service
// "list_permissions" endpoint HTTP response body for the "forbidden" error.
type ListPermissionsForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListPermissionsInternalErrorResponseBody is the type of the "rbac" service
// "list_permissions" endpoint HTTP response body for the "internal_error"
// error.
type ListPermissionsInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListPermissionsNotFoundResponseBody is the type of the "rbac" service
// "list_permissions" endpoint HTTP response body for the "not_found" error.
type ListPermissionsNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListPermissionsUnauthorizedResponseBody is the type of the "rbac" service
// "list_permissions" endpoint HTTP response body for the "unauthorized" error.
type ListPermissionsUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreatePermissionBadRequestResponseBody is the type of the "rbac" service
// "create_permission" endpoint HTTP response body for the "bad_request" error.
type CreatePermissionBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreatePermissionConflictResponseBody is the type of the "rbac" service
// "create_permission" endpoint HTTP response body for the "conflict" error.
type CreatePermissionConflictResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreatePermissionForbiddenResponseBody is the type of the "rbac" service
// "create_permission" endpoint HTTP response body for the "forbidden" error.
type CreatePermissionForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreatePermissionInternalErrorResponseBody is the type of the "rbac" service
// "create_permission" endpoint HTTP response body for the "internal_error"
// error.
type CreatePermissionInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreatePermissionNotFoundResponseBody is the type of the "rbac" service
// "create_permission" endpoint HTTP response body for the "not_found" error.
type CreatePermissionNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreatePermissionUnauthorizedResponseBody is the type of the "rbac" service
// "create_permission" endpoint HTTP response body for the "unauthorized" error.
type CreatePermissionUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetPermissionBadRequestResponseBody is the type of the "rbac" service
// "get_permission" endpoint HTTP response body for the "bad_request" error.
type GetPermissionBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetPermissionConflictResponseBody is the type of the "rbac" service
// "get_permission" endpoint HTTP response body for the "conflict" error.
type GetPermissionConflictResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetPermissionForbiddenResponseBody is the type of the "rbac" service
// "get_permission" endpoint HTTP response body for the "forbidden" error.
type GetPermissionForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetPermissionInternalErrorResponseBody is the type of the "rbac" service
// "get_permission" endpoint HTTP response body for the "internal_error" error.
type GetPermissionInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetPermissionNotFoundResponseBody is the type of the "rbac" service
// "get_permission" endpoint HTTP response body for the "not_found" error.
type GetPermissionNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetPermissionUnauthorizedResponseBody is the type of the "rbac" service
// "get_permission" endpoint HTTP response body for the "unauthorized" error.
type GetPermissionUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdatePermissionBadRequestResponseBody is the type of the "rbac" service
// "update_permission" endpoint HTTP response body for the "bad_request" error.
type UpdatePermissionBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdatePermissionConflictResponseBody is the type of the "rbac" service
// "update_permission" endpoint HTTP response body for the "conflict" error.
type UpdatePermissionConflictResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdatePermissionForbiddenResponseBody is the type of the "rbac" service
// "update_permission" endpoint HTTP response body for the "forbidden" error.
type UpdatePermissionForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdatePermissionInternalErrorResponseBody is the type of the "rbac" service
// "update_permission" endpoint HTTP response body for the "internal_error"
// error.
type UpdatePermissionInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdatePermissionNotFoundResponseBody is the type of the "rbac" service
// "update_permission" endpoint HTTP response body for the "not_found" error.
type UpdatePermissionNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdatePermissionUnauthorizedResponseBody is the type of the "rbac" service
// "update_permission" endpoint HTTP response body for the "unauthorized" error.
type UpdatePermissionUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeletePermissionBadRequestResponseBody is the type of the "rbac" service
// "delete_permission" endpoint HTTP response body for the "bad_request" error.
type DeletePermissionBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeletePermissionConflictResponseBody is the type of the "rbac" service
// "delete_permission" endpoint HTTP response body for the "conflict" error.
type DeletePermissionConflictResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeletePermissionForbiddenResponseBody is the type of the "rbac" service
// "delete_permission" endpoint HTTP response body for the "forbidden" error.
type DeletePermissionForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeletePermissionInternalErrorResponseBody is the type of the "rbac" service
// "delete_permission" endpoint HTTP response body for the "internal_error"
// error.
type DeletePermissionInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeletePermissionNotFoundResponseBody is the type of the "rbac" service
// "delete_permission" endpoint HTTP response body for the "not_found" error.
type DeletePermissionNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeletePermissionUnauthorizedResponseBody is the type of the "rbac" service
// "delete_permission" endpoint HTTP response body for the "unauthorized" error.
type DeletePermissionUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListRolesBadRequestResponseBody is the type of the "rbac" service
// "list_roles" endpoint HTTP response body for the "bad_request" error.
type ListRolesBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListRolesConflictResponseBody is the type of the "rbac" service "list_roles"
// endpoint HTTP response body for the "conflict" error.
type ListRolesConflictResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListRolesForbiddenResponseBody is the type of the "rbac" service
// "list_roles" endpoint HTTP response body for the "forbidden" error.
type ListRolesForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListRolesInternalErrorResponseBody is the type of the "rbac" service
// "list_roles" endpoint HTTP response body for the "internal_error" error.
type ListRolesInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListRolesNotFoundResponseBody is the type of the "rbac" service "list_roles"
// endpoint HTTP response body for the "not_found" error.
type ListRolesNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListRolesUnauthorizedResponseBody is the type of the "rbac" service
// "list_roles" endpoint HTTP response body for the "unauthorized" error.
type ListRolesUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreateRoleBadRequestResponseBody is the type of the "rbac" service
// "create_role" endpoint HTTP response body for the "bad_request" error.
type CreateRoleBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreateRoleConflictResponseBody is the type of the "rbac" service
// "create_role" endpoint HTTP response body for the "conflict" error.
type CreateRoleConflictResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreateRoleForbiddenResponseBody is the type of the "rbac" service
// "create_role" endpoint HTTP response body for the "forbidden" error.
type CreateRoleForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreateRoleInternalErrorResponseBody is the type of the "rbac" service
// "create_role" endpoint HTTP response body for the "internal_error" error.
type CreateRoleInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreateRoleNotFoundResponseBody is the type of the "rbac" service
// "create_role" endpoint HTTP response body for the "not_found" error.
type CreateRoleNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreateRoleUnauthorizedResponseBody is the type of the "rbac" service
// "create_role" endpoint HTTP response body for the "unauthorized" error.
type CreateRoleUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetRoleBadRequestResponseBody is the type of the "rbac" service "get_role"
// endpoint HTTP response body for the "bad_request" error.
type GetRoleBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetRoleConflictResponseBody is the type of the "rbac" service "get_role"
// endpoint HTTP response body for the "conflict" error.
type GetRoleConflictResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetRoleForbiddenResponseBody is the type of the "rbac" service "get_role"
// endpoint HTTP response body for the "forbidden" error.
type GetRoleForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetRoleInternalErrorResponseBody is the type of the "rbac" service
// "get_role" endpoint HTTP response body for the "internal_error" error.
type GetRoleInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetRoleNotFoundResponseBody is the type of the "rbac" service "get_role"
// endpoint HTTP response body for the "not_found" error.
type GetRoleNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetRoleUnauthorizedResponseBody is the type of the "rbac" service "get_role"
// endpoint HTTP response body for the "unauthorized" error.
type GetRoleUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateRoleBadRequestResponseBody is the type of the "rbac" service
// "update_role" endpoint HTTP response body for the "bad_request" error.
type UpdateRoleBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateRoleConflictResponseBody is the type of the "rbac" service
// "update_role" endpoint HTTP response body for the "conflict" error.
type UpdateRoleConflictResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateRoleForbiddenResponseBody is the type of the "rbac" service
// "update_role" endpoint HTTP response body for the "forbidden" error.
type UpdateRoleForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateRoleInternalErrorResponseBody is the type of the "rbac" service
// "update_role" endpoint HTTP response body for the "internal_error" error.
type UpdateRoleInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateRoleNotFoundResponseBody is the type of the "rbac" service
// "update_role" endpoint HTTP response body for the "not_found" error.
type UpdateRoleNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateRoleUnauthorizedResponseBody is the type of the "rbac" service
// "update_role" endpoint HTTP response body for the "unauthorized" error.
type UpdateRoleUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteRoleBadRequestResponseBody is the type of the "rbac" service
// "delete_role" endpoint HTTP response body for the "bad_request" error.
type DeleteRoleBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteRoleConflictResponseBody is the type of the "rbac" service
// "delete_role" endpoint HTTP response body for the "conflict" error.
type DeleteRoleConflictResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteRoleForbiddenResponseBody is the type of the "rbac" service
// "delete_role" endpoint HTTP response body for the "forbidden" error.
type DeleteRoleForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteRoleInternalErrorResponseBody is the type of the "rbac" service
// "delete_role" endpoint HTTP response body for the "internal_error" error.
type DeleteRoleInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteRoleNotFoundResponseBody is the type of the "rbac" service
// "delete_role" endpoint HTTP response body for the "not_found" error.
type DeleteRoleNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteRoleUnauthorizedResponseBody is the type of the "rbac" service
// "delete_role" endpoint HTTP response body for the "unauthorized" error.
type DeleteRoleUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListRolePermissionsBadRequestResponseBody is the type of the "rbac" service
// "list_role_permissions" endpoint HTTP response body for the "bad_request"
// error.
type ListRolePermissionsBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListRolePermissionsConflictResponseBody is the type of the "rbac" service
// "list_role_permissions" endpoint HTTP response body for the "conflict" error.
type ListRolePermissionsConflictResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListRolePermissionsForbiddenResponseBody is the type of the "rbac" service
// "list_role_permissions" endpoint HTTP response body for the "forbidden"
// error.
type ListRolePermissionsForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListRolePermissionsInternalErrorResponseBody is the type of the "rbac"
// service "list_role_permissions" endpoint HTTP response body for the
// "internal_error" error.
type ListRolePermissionsInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListRolePermissionsNotFoundResponseBody is the type of the "rbac" service
// "list_role_permissions" endpoint HTTP response body for the "not_found"
// error.
type ListRolePermissionsNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListRolePermissionsUnauthorizedResponseBody is the type of the "rbac"
// service "list_role_permissions" endpoint HTTP response body for the
// "unauthorized" error.
type ListRolePermissionsUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// AddRolePermissionBadRequestResponseBody is the type of the "rbac" service
// "add_role_permission" endpoint HTTP response body for the "bad_request"
// error.
type AddRolePermissionBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// AddRolePermissionConflictResponseBody is the type of the "rbac" service
// "add_role_permission" endpoint HTTP response body for the "conflict" error.
type AddRolePermissionConflictResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// AddRolePermissionForbiddenResponseBody is the type of the "rbac" service
// "add_role_permission" endpoint HTTP response body for the "forbidden" error.
type AddRolePermissionForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// AddRolePermissionInternalErrorResponseBody is the type of the "rbac" service
// "add_role_permission" endpoint HTTP response body for the "internal_error"
// error.
type AddRolePermissionInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// AddRolePermissionNotFoundResponseBody is the type of the "rbac" service
// "add_role_permission" endpoint HTTP response body for the "not_found" error.
type AddRolePermissionNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// AddRolePermissionUnauthorizedResponseBody is the type of the "rbac" service
// "add_role_permission" endpoint HTTP response body for the "unauthorized"
// error.
type AddRolePermissionUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// RemoveRolePermissionBadRequestResponseBody is the type of the "rbac" service
// "remove_role_permission" endpoint HTTP response body for the "bad_request"
// error.
type RemoveRolePermissionBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// RemoveRolePermissionConflictResponseBody is the type of the "rbac" service
// "remove_role_permission" endpoint HTTP response body for the "conflict"
// error.
type RemoveRolePermissionConflictResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// RemoveRolePermissionForbiddenResponseBody is the type of the "rbac" service
// "remove_role_permission" endpoint HTTP response body for the "forbidden"
// error.
type RemoveRolePermissionForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// RemoveRolePermissionInternalErrorResponseBody is the type of the "rbac"
// service "remove_role_permission" endpoint HTTP response body for the
// "internal_error" error.
type RemoveRolePermissionInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// RemoveRolePermissionNotFoundResponseBody is the type of the "rbac" service
// "remove_role_permission" endpoint HTTP response body for the "not_found"
// error.
type RemoveRolePermissionNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// RemoveRolePermissionUnauthorizedResponseBody is the type of the "rbac"
// service "remove_role_permission" endpoint HTTP response body for the
// "unauthorized" error.
type RemoveRolePermissionUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CheckPermissionBadRequestResponseBody is the type of the "rbac" service
// "check_permission" endpoint HTTP response body for the "bad_request" error.
type CheckPermissionBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CheckPermissionConflictResponseBody is the type of the "rbac" service
// "check_permission" endpoint HTTP response body for the "conflict" error.
type CheckPermissionConflictResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CheckPermissionForbiddenResponseBody is the type of the "rbac" service
// "check_permission" endpoint HTTP response body for the "forbidden" error.
type CheckPermissionForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CheckPermissionInternalErrorResponseBody is the type of the "rbac" service
// "check_permission" endpoint HTTP response body for the "internal_error"
// error.
type CheckPermissionInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CheckPermissionNotFoundResponseBody is the type of the "rbac" service
// "check_permission" endpoint HTTP response body for the "not_found" error.
type CheckPermissionNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CheckPermissionUnauthorizedResponseBody is the type of the "rbac" service
// "check_permission" endpoint HTTP response body for the "unauthorized" error.
type CheckPermissionUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CheckRoleBadRequestResponseBody is the type of the "rbac" service
// "check_role" endpoint HTTP response body for the "bad_request" error.
type CheckRoleBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CheckRoleConflictResponseBody is the type of the "rbac" service "check_role"
// endpoint HTTP response body for the "conflict" error.
type CheckRoleConflictResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CheckRoleForbiddenResponseBody is the type of the "rbac" service
// "check_role" endpoint HTTP response body for the "forbidden" error.
type CheckRoleForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CheckRoleInternalErrorResponseBody is the type of the "rbac" service
// "check_role" endpoint HTTP response body for the "internal_error" error.
type CheckRoleInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CheckRoleNotFoundResponseBody is the type of the "rbac" service "check_role"
// endpoint HTTP response body for the "not_found" error.
type CheckRoleNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CheckRoleUnauthorizedResponseBody is the type of the "rbac" service
// "check_role" endpoint HTTP response body for the "unauthorized" error.
type CheckRoleUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// PermissionResponseResponseBody is used to define fields on response body
// types.
type PermissionResponseResponseBody struct {
	// Permission ID
	ID string `form:"id" json:"id" xml:"id"`
	// Permission name
	Name string `form:"name" json:"name" xml:"name"`
	// Permission description
	Description string `form:"description" json:"description" xml:"description"`
	// Resource this permission applies to
	Resource string `form:"resource" json:"resource" xml:"resource"`
	// Action this permission allows
	Action string `form:"action" json:"action" xml:"action"`
	// JSON expression for conditional access
	Conditions *string `form:"conditions,omitempty" json:"conditions,omitempty" xml:"conditions,omitempty"`
	// Whether this is a system permission
	System bool `form:"system" json:"system" xml:"system"`
	// Creation timestamp
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// Last update timestamp
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// PaginationResponseBody is used to define fields on response body types.
type PaginationResponseBody struct {
	// Offset
	Offset int `json:"offset"`
	// Limit
	Limit int `json:"limit"`
	// Total number of items
	Total int `json:"total"`
	// Total number of pages
	TotalPages int `json:"total_pages,totalPages"`
	// Current page number
	CurrentPage int `json:"current_page,currentPage"`
	// Has next page
	HasNext bool `json:"has_next,hasNext"`
	// Has previous page
	HasPrevious bool `json:"has_previous,hasPrevious"`
}

// RoleResponseResponseBody is used to define fields on response body types.
type RoleResponseResponseBody struct {
	// Role ID
	ID string `form:"id" json:"id" xml:"id"`
	// Role name
	Name string `form:"name" json:"name" xml:"name"`
	// Role description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Organization ID
	OrganizationID *string `form:"organization_id,omitempty" json:"organization_id,omitempty" xml:"organization_id,omitempty"`
	// Whether this is a system role
	System bool `form:"system" json:"system" xml:"system"`
	// Whether this is a default role for new users
	IsDefault bool `form:"is_default" json:"is_default" xml:"is_default"`
	// Permissions assigned to this role
	Permissions []*PermissionResponseResponseBody `form:"permissions,omitempty" json:"permissions,omitempty" xml:"permissions,omitempty"`
	// Creation timestamp
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// Last update timestamp
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// CreatePermissionRequestRequestBody is used to define fields on request body
// types.
type CreatePermissionRequestRequestBody struct {
	// Permission name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Permission description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Resource this permission applies to
	Resource *string `form:"resource,omitempty" json:"resource,omitempty" xml:"resource,omitempty"`
	// Action this permission allows
	Action *string `form:"action,omitempty" json:"action,omitempty" xml:"action,omitempty"`
	// JSON expression for conditional access
	Conditions *string `form:"conditions,omitempty" json:"conditions,omitempty" xml:"conditions,omitempty"`
}

// UpdatePermissionRequestRequestBody is used to define fields on request body
// types.
type UpdatePermissionRequestRequestBody struct {
	// Permission name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Permission description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// JSON expression for conditional access
	Conditions *string `form:"conditions,omitempty" json:"conditions,omitempty" xml:"conditions,omitempty"`
}

// CreateRoleRequestRequestBody is used to define fields on request body types.
type CreateRoleRequestRequestBody struct {
	// Role name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Role description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Organization ID
	OrganizationID *string `form:"organization_id,omitempty" json:"organization_id,omitempty" xml:"organization_id,omitempty"`
	// Whether this is a default role for new users
	IsDefault *bool `form:"is_default,omitempty" json:"is_default,omitempty" xml:"is_default,omitempty"`
}

// UpdateRoleRequestRequestBody is used to define fields on request body types.
type UpdateRoleRequestRequestBody struct {
	// Role name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Role description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Whether this is a default role for new users
	IsDefault *bool `form:"is_default,omitempty" json:"is_default,omitempty" xml:"is_default,omitempty"`
}

// AddRolePermissionRequestRequestBody is used to define fields on request body
// types.
type AddRolePermissionRequestRequestBody struct {
	// Permission ID
	PermissionID *string `form:"permission_id,omitempty" json:"permission_id,omitempty" xml:"permission_id,omitempty"`
}

// NewListPermissionsResponseBody builds the HTTP response body from the result
// of the "list_permissions" endpoint of the "rbac" service.
func NewListPermissionsResponseBody(res *rbac.ListPermissionsResponse) *ListPermissionsResponseBody {
	body := &ListPermissionsResponseBody{}
	if res.Data != nil {
		body.Data = make([]*PermissionResponseResponseBody, len(res.Data))
		for i, val := range res.Data {
			body.Data[i] = marshalDesigntypesPermissionResponseToPermissionResponseResponseBody(val)
		}
	} else {
		body.Data = []*PermissionResponseResponseBody{}
	}
	if res.Pagination != nil {
		body.Pagination = marshalDesigntypesPaginationToPaginationResponseBody(res.Pagination)
	}
	return body
}

// NewCreatePermissionResponseBody builds the HTTP response body from the
// result of the "create_permission" endpoint of the "rbac" service.
func NewCreatePermissionResponseBody(res *designtypes.PermissionResponse) *CreatePermissionResponseBody {
	body := &CreatePermissionResponseBody{
		ID:          res.ID,
		Name:        res.Name,
		Description: res.Description,
		Resource:    res.Resource,
		Action:      res.Action,
		Conditions:  res.Conditions,
		System:      res.System,
		CreatedAt:   res.CreatedAt,
		UpdatedAt:   res.UpdatedAt,
	}
	return body
}

// NewGetPermissionResponseBody builds the HTTP response body from the result
// of the "get_permission" endpoint of the "rbac" service.
func NewGetPermissionResponseBody(res *designtypes.PermissionResponse) *GetPermissionResponseBody {
	body := &GetPermissionResponseBody{
		ID:          res.ID,
		Name:        res.Name,
		Description: res.Description,
		Resource:    res.Resource,
		Action:      res.Action,
		Conditions:  res.Conditions,
		System:      res.System,
		CreatedAt:   res.CreatedAt,
		UpdatedAt:   res.UpdatedAt,
	}
	return body
}

// NewUpdatePermissionResponseBody builds the HTTP response body from the
// result of the "update_permission" endpoint of the "rbac" service.
func NewUpdatePermissionResponseBody(res *designtypes.PermissionResponse) *UpdatePermissionResponseBody {
	body := &UpdatePermissionResponseBody{
		ID:          res.ID,
		Name:        res.Name,
		Description: res.Description,
		Resource:    res.Resource,
		Action:      res.Action,
		Conditions:  res.Conditions,
		System:      res.System,
		CreatedAt:   res.CreatedAt,
		UpdatedAt:   res.UpdatedAt,
	}
	return body
}

// NewListRolesResponseBody builds the HTTP response body from the result of
// the "list_roles" endpoint of the "rbac" service.
func NewListRolesResponseBody(res *rbac.ListRolesResult) *ListRolesResponseBody {
	body := &ListRolesResponseBody{}
	if res.Data != nil {
		body.Data = make([]*RoleResponseResponseBody, len(res.Data))
		for i, val := range res.Data {
			body.Data[i] = marshalDesigntypesRoleResponseToRoleResponseResponseBody(val)
		}
	} else {
		body.Data = []*RoleResponseResponseBody{}
	}
	if res.Pagination != nil {
		body.Pagination = marshalDesigntypesPaginationToPaginationResponseBody(res.Pagination)
	}
	return body
}

// NewCreateRoleResponseBody builds the HTTP response body from the result of
// the "create_role" endpoint of the "rbac" service.
func NewCreateRoleResponseBody(res *designtypes.RoleResponse) *CreateRoleResponseBody {
	body := &CreateRoleResponseBody{
		ID:             res.ID,
		Name:           res.Name,
		Description:    res.Description,
		OrganizationID: res.OrganizationID,
		System:         res.System,
		IsDefault:      res.IsDefault,
		CreatedAt:      res.CreatedAt,
		UpdatedAt:      res.UpdatedAt,
	}
	if res.Permissions != nil {
		body.Permissions = make([]*PermissionResponseResponseBody, len(res.Permissions))
		for i, val := range res.Permissions {
			body.Permissions[i] = marshalDesigntypesPermissionResponseToPermissionResponseResponseBody(val)
		}
	}
	return body
}

// NewGetRoleResponseBody builds the HTTP response body from the result of the
// "get_role" endpoint of the "rbac" service.
func NewGetRoleResponseBody(res *designtypes.RoleResponse) *GetRoleResponseBody {
	body := &GetRoleResponseBody{
		ID:             res.ID,
		Name:           res.Name,
		Description:    res.Description,
		OrganizationID: res.OrganizationID,
		System:         res.System,
		IsDefault:      res.IsDefault,
		CreatedAt:      res.CreatedAt,
		UpdatedAt:      res.UpdatedAt,
	}
	if res.Permissions != nil {
		body.Permissions = make([]*PermissionResponseResponseBody, len(res.Permissions))
		for i, val := range res.Permissions {
			body.Permissions[i] = marshalDesigntypesPermissionResponseToPermissionResponseResponseBody(val)
		}
	}
	return body
}

// NewUpdateRoleResponseBody builds the HTTP response body from the result of
// the "update_role" endpoint of the "rbac" service.
func NewUpdateRoleResponseBody(res *designtypes.RoleResponse) *UpdateRoleResponseBody {
	body := &UpdateRoleResponseBody{
		ID:             res.ID,
		Name:           res.Name,
		Description:    res.Description,
		OrganizationID: res.OrganizationID,
		System:         res.System,
		IsDefault:      res.IsDefault,
		CreatedAt:      res.CreatedAt,
		UpdatedAt:      res.UpdatedAt,
	}
	if res.Permissions != nil {
		body.Permissions = make([]*PermissionResponseResponseBody, len(res.Permissions))
		for i, val := range res.Permissions {
			body.Permissions[i] = marshalDesigntypesPermissionResponseToPermissionResponseResponseBody(val)
		}
	}
	return body
}

// NewListRolePermissionsResponseBody builds the HTTP response body from the
// result of the "list_role_permissions" endpoint of the "rbac" service.
func NewListRolePermissionsResponseBody(res *rbac.ListRolePermissionsResult) *ListRolePermissionsResponseBody {
	body := &ListRolePermissionsResponseBody{}
	if res.Permissions != nil {
		body.Permissions = make([]*PermissionResponseResponseBody, len(res.Permissions))
		for i, val := range res.Permissions {
			body.Permissions[i] = marshalDesigntypesPermissionResponseToPermissionResponseResponseBody(val)
		}
	} else {
		body.Permissions = []*PermissionResponseResponseBody{}
	}
	return body
}

// NewAddRolePermissionResponseBody builds the HTTP response body from the
// result of the "add_role_permission" endpoint of the "rbac" service.
func NewAddRolePermissionResponseBody(res *rbac.AddRolePermissionResult) *AddRolePermissionResponseBody {
	body := &AddRolePermissionResponseBody{
		Message: res.Message,
	}
	return body
}

// NewCheckPermissionResponseBody builds the HTTP response body from the result
// of the "check_permission" endpoint of the "rbac" service.
func NewCheckPermissionResponseBody(res *rbac.CheckPermissionResult) *CheckPermissionResponseBody {
	body := &CheckPermissionResponseBody{
		HasPermission: res.HasPermission,
	}
	return body
}

// NewCheckRoleResponseBody builds the HTTP response body from the result of
// the "check_role" endpoint of the "rbac" service.
func NewCheckRoleResponseBody(res *rbac.CheckRoleResult) *CheckRoleResponseBody {
	body := &CheckRoleResponseBody{
		HasRole: res.HasRole,
	}
	return body
}

// NewListPermissionsBadRequestResponseBody builds the HTTP response body from
// the result of the "list_permissions" endpoint of the "rbac" service.
func NewListPermissionsBadRequestResponseBody(res *rbac.BadRequestError) *ListPermissionsBadRequestResponseBody {
	body := &ListPermissionsBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewListPermissionsConflictResponseBody builds the HTTP response body from
// the result of the "list_permissions" endpoint of the "rbac" service.
func NewListPermissionsConflictResponseBody(res *rbac.ConflictError) *ListPermissionsConflictResponseBody {
	body := &ListPermissionsConflictResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewListPermissionsForbiddenResponseBody builds the HTTP response body from
// the result of the "list_permissions" endpoint of the "rbac" service.
func NewListPermissionsForbiddenResponseBody(res *rbac.ForbiddenError) *ListPermissionsForbiddenResponseBody {
	body := &ListPermissionsForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewListPermissionsInternalErrorResponseBody builds the HTTP response body
// from the result of the "list_permissions" endpoint of the "rbac" service.
func NewListPermissionsInternalErrorResponseBody(res *rbac.InternalServerError) *ListPermissionsInternalErrorResponseBody {
	body := &ListPermissionsInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewListPermissionsNotFoundResponseBody builds the HTTP response body from
// the result of the "list_permissions" endpoint of the "rbac" service.
func NewListPermissionsNotFoundResponseBody(res *rbac.NotFoundError) *ListPermissionsNotFoundResponseBody {
	body := &ListPermissionsNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewListPermissionsUnauthorizedResponseBody builds the HTTP response body
// from the result of the "list_permissions" endpoint of the "rbac" service.
func NewListPermissionsUnauthorizedResponseBody(res *rbac.UnauthorizedError) *ListPermissionsUnauthorizedResponseBody {
	body := &ListPermissionsUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewCreatePermissionBadRequestResponseBody builds the HTTP response body from
// the result of the "create_permission" endpoint of the "rbac" service.
func NewCreatePermissionBadRequestResponseBody(res *rbac.BadRequestError) *CreatePermissionBadRequestResponseBody {
	body := &CreatePermissionBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewCreatePermissionConflictResponseBody builds the HTTP response body from
// the result of the "create_permission" endpoint of the "rbac" service.
func NewCreatePermissionConflictResponseBody(res *rbac.ConflictError) *CreatePermissionConflictResponseBody {
	body := &CreatePermissionConflictResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewCreatePermissionForbiddenResponseBody builds the HTTP response body from
// the result of the "create_permission" endpoint of the "rbac" service.
func NewCreatePermissionForbiddenResponseBody(res *rbac.ForbiddenError) *CreatePermissionForbiddenResponseBody {
	body := &CreatePermissionForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewCreatePermissionInternalErrorResponseBody builds the HTTP response body
// from the result of the "create_permission" endpoint of the "rbac" service.
func NewCreatePermissionInternalErrorResponseBody(res *rbac.InternalServerError) *CreatePermissionInternalErrorResponseBody {
	body := &CreatePermissionInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewCreatePermissionNotFoundResponseBody builds the HTTP response body from
// the result of the "create_permission" endpoint of the "rbac" service.
func NewCreatePermissionNotFoundResponseBody(res *rbac.NotFoundError) *CreatePermissionNotFoundResponseBody {
	body := &CreatePermissionNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewCreatePermissionUnauthorizedResponseBody builds the HTTP response body
// from the result of the "create_permission" endpoint of the "rbac" service.
func NewCreatePermissionUnauthorizedResponseBody(res *rbac.UnauthorizedError) *CreatePermissionUnauthorizedResponseBody {
	body := &CreatePermissionUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewGetPermissionBadRequestResponseBody builds the HTTP response body from
// the result of the "get_permission" endpoint of the "rbac" service.
func NewGetPermissionBadRequestResponseBody(res *rbac.BadRequestError) *GetPermissionBadRequestResponseBody {
	body := &GetPermissionBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewGetPermissionConflictResponseBody builds the HTTP response body from the
// result of the "get_permission" endpoint of the "rbac" service.
func NewGetPermissionConflictResponseBody(res *rbac.ConflictError) *GetPermissionConflictResponseBody {
	body := &GetPermissionConflictResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewGetPermissionForbiddenResponseBody builds the HTTP response body from the
// result of the "get_permission" endpoint of the "rbac" service.
func NewGetPermissionForbiddenResponseBody(res *rbac.ForbiddenError) *GetPermissionForbiddenResponseBody {
	body := &GetPermissionForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewGetPermissionInternalErrorResponseBody builds the HTTP response body from
// the result of the "get_permission" endpoint of the "rbac" service.
func NewGetPermissionInternalErrorResponseBody(res *rbac.InternalServerError) *GetPermissionInternalErrorResponseBody {
	body := &GetPermissionInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewGetPermissionNotFoundResponseBody builds the HTTP response body from the
// result of the "get_permission" endpoint of the "rbac" service.
func NewGetPermissionNotFoundResponseBody(res *rbac.NotFoundError) *GetPermissionNotFoundResponseBody {
	body := &GetPermissionNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewGetPermissionUnauthorizedResponseBody builds the HTTP response body from
// the result of the "get_permission" endpoint of the "rbac" service.
func NewGetPermissionUnauthorizedResponseBody(res *rbac.UnauthorizedError) *GetPermissionUnauthorizedResponseBody {
	body := &GetPermissionUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewUpdatePermissionBadRequestResponseBody builds the HTTP response body from
// the result of the "update_permission" endpoint of the "rbac" service.
func NewUpdatePermissionBadRequestResponseBody(res *rbac.BadRequestError) *UpdatePermissionBadRequestResponseBody {
	body := &UpdatePermissionBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewUpdatePermissionConflictResponseBody builds the HTTP response body from
// the result of the "update_permission" endpoint of the "rbac" service.
func NewUpdatePermissionConflictResponseBody(res *rbac.ConflictError) *UpdatePermissionConflictResponseBody {
	body := &UpdatePermissionConflictResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewUpdatePermissionForbiddenResponseBody builds the HTTP response body from
// the result of the "update_permission" endpoint of the "rbac" service.
func NewUpdatePermissionForbiddenResponseBody(res *rbac.ForbiddenError) *UpdatePermissionForbiddenResponseBody {
	body := &UpdatePermissionForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewUpdatePermissionInternalErrorResponseBody builds the HTTP response body
// from the result of the "update_permission" endpoint of the "rbac" service.
func NewUpdatePermissionInternalErrorResponseBody(res *rbac.InternalServerError) *UpdatePermissionInternalErrorResponseBody {
	body := &UpdatePermissionInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewUpdatePermissionNotFoundResponseBody builds the HTTP response body from
// the result of the "update_permission" endpoint of the "rbac" service.
func NewUpdatePermissionNotFoundResponseBody(res *rbac.NotFoundError) *UpdatePermissionNotFoundResponseBody {
	body := &UpdatePermissionNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewUpdatePermissionUnauthorizedResponseBody builds the HTTP response body
// from the result of the "update_permission" endpoint of the "rbac" service.
func NewUpdatePermissionUnauthorizedResponseBody(res *rbac.UnauthorizedError) *UpdatePermissionUnauthorizedResponseBody {
	body := &UpdatePermissionUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewDeletePermissionBadRequestResponseBody builds the HTTP response body from
// the result of the "delete_permission" endpoint of the "rbac" service.
func NewDeletePermissionBadRequestResponseBody(res *rbac.BadRequestError) *DeletePermissionBadRequestResponseBody {
	body := &DeletePermissionBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewDeletePermissionConflictResponseBody builds the HTTP response body from
// the result of the "delete_permission" endpoint of the "rbac" service.
func NewDeletePermissionConflictResponseBody(res *rbac.ConflictError) *DeletePermissionConflictResponseBody {
	body := &DeletePermissionConflictResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewDeletePermissionForbiddenResponseBody builds the HTTP response body from
// the result of the "delete_permission" endpoint of the "rbac" service.
func NewDeletePermissionForbiddenResponseBody(res *rbac.ForbiddenError) *DeletePermissionForbiddenResponseBody {
	body := &DeletePermissionForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewDeletePermissionInternalErrorResponseBody builds the HTTP response body
// from the result of the "delete_permission" endpoint of the "rbac" service.
func NewDeletePermissionInternalErrorResponseBody(res *rbac.InternalServerError) *DeletePermissionInternalErrorResponseBody {
	body := &DeletePermissionInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewDeletePermissionNotFoundResponseBody builds the HTTP response body from
// the result of the "delete_permission" endpoint of the "rbac" service.
func NewDeletePermissionNotFoundResponseBody(res *rbac.NotFoundError) *DeletePermissionNotFoundResponseBody {
	body := &DeletePermissionNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewDeletePermissionUnauthorizedResponseBody builds the HTTP response body
// from the result of the "delete_permission" endpoint of the "rbac" service.
func NewDeletePermissionUnauthorizedResponseBody(res *rbac.UnauthorizedError) *DeletePermissionUnauthorizedResponseBody {
	body := &DeletePermissionUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewListRolesBadRequestResponseBody builds the HTTP response body from the
// result of the "list_roles" endpoint of the "rbac" service.
func NewListRolesBadRequestResponseBody(res *rbac.BadRequestError) *ListRolesBadRequestResponseBody {
	body := &ListRolesBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewListRolesConflictResponseBody builds the HTTP response body from the
// result of the "list_roles" endpoint of the "rbac" service.
func NewListRolesConflictResponseBody(res *rbac.ConflictError) *ListRolesConflictResponseBody {
	body := &ListRolesConflictResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewListRolesForbiddenResponseBody builds the HTTP response body from the
// result of the "list_roles" endpoint of the "rbac" service.
func NewListRolesForbiddenResponseBody(res *rbac.ForbiddenError) *ListRolesForbiddenResponseBody {
	body := &ListRolesForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewListRolesInternalErrorResponseBody builds the HTTP response body from the
// result of the "list_roles" endpoint of the "rbac" service.
func NewListRolesInternalErrorResponseBody(res *rbac.InternalServerError) *ListRolesInternalErrorResponseBody {
	body := &ListRolesInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewListRolesNotFoundResponseBody builds the HTTP response body from the
// result of the "list_roles" endpoint of the "rbac" service.
func NewListRolesNotFoundResponseBody(res *rbac.NotFoundError) *ListRolesNotFoundResponseBody {
	body := &ListRolesNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewListRolesUnauthorizedResponseBody builds the HTTP response body from the
// result of the "list_roles" endpoint of the "rbac" service.
func NewListRolesUnauthorizedResponseBody(res *rbac.UnauthorizedError) *ListRolesUnauthorizedResponseBody {
	body := &ListRolesUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewCreateRoleBadRequestResponseBody builds the HTTP response body from the
// result of the "create_role" endpoint of the "rbac" service.
func NewCreateRoleBadRequestResponseBody(res *rbac.BadRequestError) *CreateRoleBadRequestResponseBody {
	body := &CreateRoleBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewCreateRoleConflictResponseBody builds the HTTP response body from the
// result of the "create_role" endpoint of the "rbac" service.
func NewCreateRoleConflictResponseBody(res *rbac.ConflictError) *CreateRoleConflictResponseBody {
	body := &CreateRoleConflictResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewCreateRoleForbiddenResponseBody builds the HTTP response body from the
// result of the "create_role" endpoint of the "rbac" service.
func NewCreateRoleForbiddenResponseBody(res *rbac.ForbiddenError) *CreateRoleForbiddenResponseBody {
	body := &CreateRoleForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewCreateRoleInternalErrorResponseBody builds the HTTP response body from
// the result of the "create_role" endpoint of the "rbac" service.
func NewCreateRoleInternalErrorResponseBody(res *rbac.InternalServerError) *CreateRoleInternalErrorResponseBody {
	body := &CreateRoleInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewCreateRoleNotFoundResponseBody builds the HTTP response body from the
// result of the "create_role" endpoint of the "rbac" service.
func NewCreateRoleNotFoundResponseBody(res *rbac.NotFoundError) *CreateRoleNotFoundResponseBody {
	body := &CreateRoleNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewCreateRoleUnauthorizedResponseBody builds the HTTP response body from the
// result of the "create_role" endpoint of the "rbac" service.
func NewCreateRoleUnauthorizedResponseBody(res *rbac.UnauthorizedError) *CreateRoleUnauthorizedResponseBody {
	body := &CreateRoleUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewGetRoleBadRequestResponseBody builds the HTTP response body from the
// result of the "get_role" endpoint of the "rbac" service.
func NewGetRoleBadRequestResponseBody(res *rbac.BadRequestError) *GetRoleBadRequestResponseBody {
	body := &GetRoleBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewGetRoleConflictResponseBody builds the HTTP response body from the result
// of the "get_role" endpoint of the "rbac" service.
func NewGetRoleConflictResponseBody(res *rbac.ConflictError) *GetRoleConflictResponseBody {
	body := &GetRoleConflictResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewGetRoleForbiddenResponseBody builds the HTTP response body from the
// result of the "get_role" endpoint of the "rbac" service.
func NewGetRoleForbiddenResponseBody(res *rbac.ForbiddenError) *GetRoleForbiddenResponseBody {
	body := &GetRoleForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewGetRoleInternalErrorResponseBody builds the HTTP response body from the
// result of the "get_role" endpoint of the "rbac" service.
func NewGetRoleInternalErrorResponseBody(res *rbac.InternalServerError) *GetRoleInternalErrorResponseBody {
	body := &GetRoleInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewGetRoleNotFoundResponseBody builds the HTTP response body from the result
// of the "get_role" endpoint of the "rbac" service.
func NewGetRoleNotFoundResponseBody(res *rbac.NotFoundError) *GetRoleNotFoundResponseBody {
	body := &GetRoleNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewGetRoleUnauthorizedResponseBody builds the HTTP response body from the
// result of the "get_role" endpoint of the "rbac" service.
func NewGetRoleUnauthorizedResponseBody(res *rbac.UnauthorizedError) *GetRoleUnauthorizedResponseBody {
	body := &GetRoleUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewUpdateRoleBadRequestResponseBody builds the HTTP response body from the
// result of the "update_role" endpoint of the "rbac" service.
func NewUpdateRoleBadRequestResponseBody(res *rbac.BadRequestError) *UpdateRoleBadRequestResponseBody {
	body := &UpdateRoleBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewUpdateRoleConflictResponseBody builds the HTTP response body from the
// result of the "update_role" endpoint of the "rbac" service.
func NewUpdateRoleConflictResponseBody(res *rbac.ConflictError) *UpdateRoleConflictResponseBody {
	body := &UpdateRoleConflictResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewUpdateRoleForbiddenResponseBody builds the HTTP response body from the
// result of the "update_role" endpoint of the "rbac" service.
func NewUpdateRoleForbiddenResponseBody(res *rbac.ForbiddenError) *UpdateRoleForbiddenResponseBody {
	body := &UpdateRoleForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewUpdateRoleInternalErrorResponseBody builds the HTTP response body from
// the result of the "update_role" endpoint of the "rbac" service.
func NewUpdateRoleInternalErrorResponseBody(res *rbac.InternalServerError) *UpdateRoleInternalErrorResponseBody {
	body := &UpdateRoleInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewUpdateRoleNotFoundResponseBody builds the HTTP response body from the
// result of the "update_role" endpoint of the "rbac" service.
func NewUpdateRoleNotFoundResponseBody(res *rbac.NotFoundError) *UpdateRoleNotFoundResponseBody {
	body := &UpdateRoleNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewUpdateRoleUnauthorizedResponseBody builds the HTTP response body from the
// result of the "update_role" endpoint of the "rbac" service.
func NewUpdateRoleUnauthorizedResponseBody(res *rbac.UnauthorizedError) *UpdateRoleUnauthorizedResponseBody {
	body := &UpdateRoleUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewDeleteRoleBadRequestResponseBody builds the HTTP response body from the
// result of the "delete_role" endpoint of the "rbac" service.
func NewDeleteRoleBadRequestResponseBody(res *rbac.BadRequestError) *DeleteRoleBadRequestResponseBody {
	body := &DeleteRoleBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewDeleteRoleConflictResponseBody builds the HTTP response body from the
// result of the "delete_role" endpoint of the "rbac" service.
func NewDeleteRoleConflictResponseBody(res *rbac.ConflictError) *DeleteRoleConflictResponseBody {
	body := &DeleteRoleConflictResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewDeleteRoleForbiddenResponseBody builds the HTTP response body from the
// result of the "delete_role" endpoint of the "rbac" service.
func NewDeleteRoleForbiddenResponseBody(res *rbac.ForbiddenError) *DeleteRoleForbiddenResponseBody {
	body := &DeleteRoleForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewDeleteRoleInternalErrorResponseBody builds the HTTP response body from
// the result of the "delete_role" endpoint of the "rbac" service.
func NewDeleteRoleInternalErrorResponseBody(res *rbac.InternalServerError) *DeleteRoleInternalErrorResponseBody {
	body := &DeleteRoleInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewDeleteRoleNotFoundResponseBody builds the HTTP response body from the
// result of the "delete_role" endpoint of the "rbac" service.
func NewDeleteRoleNotFoundResponseBody(res *rbac.NotFoundError) *DeleteRoleNotFoundResponseBody {
	body := &DeleteRoleNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewDeleteRoleUnauthorizedResponseBody builds the HTTP response body from the
// result of the "delete_role" endpoint of the "rbac" service.
func NewDeleteRoleUnauthorizedResponseBody(res *rbac.UnauthorizedError) *DeleteRoleUnauthorizedResponseBody {
	body := &DeleteRoleUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewListRolePermissionsBadRequestResponseBody builds the HTTP response body
// from the result of the "list_role_permissions" endpoint of the "rbac"
// service.
func NewListRolePermissionsBadRequestResponseBody(res *rbac.BadRequestError) *ListRolePermissionsBadRequestResponseBody {
	body := &ListRolePermissionsBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewListRolePermissionsConflictResponseBody builds the HTTP response body
// from the result of the "list_role_permissions" endpoint of the "rbac"
// service.
func NewListRolePermissionsConflictResponseBody(res *rbac.ConflictError) *ListRolePermissionsConflictResponseBody {
	body := &ListRolePermissionsConflictResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewListRolePermissionsForbiddenResponseBody builds the HTTP response body
// from the result of the "list_role_permissions" endpoint of the "rbac"
// service.
func NewListRolePermissionsForbiddenResponseBody(res *rbac.ForbiddenError) *ListRolePermissionsForbiddenResponseBody {
	body := &ListRolePermissionsForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewListRolePermissionsInternalErrorResponseBody builds the HTTP response
// body from the result of the "list_role_permissions" endpoint of the "rbac"
// service.
func NewListRolePermissionsInternalErrorResponseBody(res *rbac.InternalServerError) *ListRolePermissionsInternalErrorResponseBody {
	body := &ListRolePermissionsInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewListRolePermissionsNotFoundResponseBody builds the HTTP response body
// from the result of the "list_role_permissions" endpoint of the "rbac"
// service.
func NewListRolePermissionsNotFoundResponseBody(res *rbac.NotFoundError) *ListRolePermissionsNotFoundResponseBody {
	body := &ListRolePermissionsNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewListRolePermissionsUnauthorizedResponseBody builds the HTTP response body
// from the result of the "list_role_permissions" endpoint of the "rbac"
// service.
func NewListRolePermissionsUnauthorizedResponseBody(res *rbac.UnauthorizedError) *ListRolePermissionsUnauthorizedResponseBody {
	body := &ListRolePermissionsUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewAddRolePermissionBadRequestResponseBody builds the HTTP response body
// from the result of the "add_role_permission" endpoint of the "rbac" service.
func NewAddRolePermissionBadRequestResponseBody(res *rbac.BadRequestError) *AddRolePermissionBadRequestResponseBody {
	body := &AddRolePermissionBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewAddRolePermissionConflictResponseBody builds the HTTP response body from
// the result of the "add_role_permission" endpoint of the "rbac" service.
func NewAddRolePermissionConflictResponseBody(res *rbac.ConflictError) *AddRolePermissionConflictResponseBody {
	body := &AddRolePermissionConflictResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewAddRolePermissionForbiddenResponseBody builds the HTTP response body from
// the result of the "add_role_permission" endpoint of the "rbac" service.
func NewAddRolePermissionForbiddenResponseBody(res *rbac.ForbiddenError) *AddRolePermissionForbiddenResponseBody {
	body := &AddRolePermissionForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewAddRolePermissionInternalErrorResponseBody builds the HTTP response body
// from the result of the "add_role_permission" endpoint of the "rbac" service.
func NewAddRolePermissionInternalErrorResponseBody(res *rbac.InternalServerError) *AddRolePermissionInternalErrorResponseBody {
	body := &AddRolePermissionInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewAddRolePermissionNotFoundResponseBody builds the HTTP response body from
// the result of the "add_role_permission" endpoint of the "rbac" service.
func NewAddRolePermissionNotFoundResponseBody(res *rbac.NotFoundError) *AddRolePermissionNotFoundResponseBody {
	body := &AddRolePermissionNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewAddRolePermissionUnauthorizedResponseBody builds the HTTP response body
// from the result of the "add_role_permission" endpoint of the "rbac" service.
func NewAddRolePermissionUnauthorizedResponseBody(res *rbac.UnauthorizedError) *AddRolePermissionUnauthorizedResponseBody {
	body := &AddRolePermissionUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewRemoveRolePermissionBadRequestResponseBody builds the HTTP response body
// from the result of the "remove_role_permission" endpoint of the "rbac"
// service.
func NewRemoveRolePermissionBadRequestResponseBody(res *rbac.BadRequestError) *RemoveRolePermissionBadRequestResponseBody {
	body := &RemoveRolePermissionBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewRemoveRolePermissionConflictResponseBody builds the HTTP response body
// from the result of the "remove_role_permission" endpoint of the "rbac"
// service.
func NewRemoveRolePermissionConflictResponseBody(res *rbac.ConflictError) *RemoveRolePermissionConflictResponseBody {
	body := &RemoveRolePermissionConflictResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewRemoveRolePermissionForbiddenResponseBody builds the HTTP response body
// from the result of the "remove_role_permission" endpoint of the "rbac"
// service.
func NewRemoveRolePermissionForbiddenResponseBody(res *rbac.ForbiddenError) *RemoveRolePermissionForbiddenResponseBody {
	body := &RemoveRolePermissionForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewRemoveRolePermissionInternalErrorResponseBody builds the HTTP response
// body from the result of the "remove_role_permission" endpoint of the "rbac"
// service.
func NewRemoveRolePermissionInternalErrorResponseBody(res *rbac.InternalServerError) *RemoveRolePermissionInternalErrorResponseBody {
	body := &RemoveRolePermissionInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewRemoveRolePermissionNotFoundResponseBody builds the HTTP response body
// from the result of the "remove_role_permission" endpoint of the "rbac"
// service.
func NewRemoveRolePermissionNotFoundResponseBody(res *rbac.NotFoundError) *RemoveRolePermissionNotFoundResponseBody {
	body := &RemoveRolePermissionNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewRemoveRolePermissionUnauthorizedResponseBody builds the HTTP response
// body from the result of the "remove_role_permission" endpoint of the "rbac"
// service.
func NewRemoveRolePermissionUnauthorizedResponseBody(res *rbac.UnauthorizedError) *RemoveRolePermissionUnauthorizedResponseBody {
	body := &RemoveRolePermissionUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewCheckPermissionBadRequestResponseBody builds the HTTP response body from
// the result of the "check_permission" endpoint of the "rbac" service.
func NewCheckPermissionBadRequestResponseBody(res *rbac.BadRequestError) *CheckPermissionBadRequestResponseBody {
	body := &CheckPermissionBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewCheckPermissionConflictResponseBody builds the HTTP response body from
// the result of the "check_permission" endpoint of the "rbac" service.
func NewCheckPermissionConflictResponseBody(res *rbac.ConflictError) *CheckPermissionConflictResponseBody {
	body := &CheckPermissionConflictResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewCheckPermissionForbiddenResponseBody builds the HTTP response body from
// the result of the "check_permission" endpoint of the "rbac" service.
func NewCheckPermissionForbiddenResponseBody(res *rbac.ForbiddenError) *CheckPermissionForbiddenResponseBody {
	body := &CheckPermissionForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewCheckPermissionInternalErrorResponseBody builds the HTTP response body
// from the result of the "check_permission" endpoint of the "rbac" service.
func NewCheckPermissionInternalErrorResponseBody(res *rbac.InternalServerError) *CheckPermissionInternalErrorResponseBody {
	body := &CheckPermissionInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewCheckPermissionNotFoundResponseBody builds the HTTP response body from
// the result of the "check_permission" endpoint of the "rbac" service.
func NewCheckPermissionNotFoundResponseBody(res *rbac.NotFoundError) *CheckPermissionNotFoundResponseBody {
	body := &CheckPermissionNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewCheckPermissionUnauthorizedResponseBody builds the HTTP response body
// from the result of the "check_permission" endpoint of the "rbac" service.
func NewCheckPermissionUnauthorizedResponseBody(res *rbac.UnauthorizedError) *CheckPermissionUnauthorizedResponseBody {
	body := &CheckPermissionUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewCheckRoleBadRequestResponseBody builds the HTTP response body from the
// result of the "check_role" endpoint of the "rbac" service.
func NewCheckRoleBadRequestResponseBody(res *rbac.BadRequestError) *CheckRoleBadRequestResponseBody {
	body := &CheckRoleBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewCheckRoleConflictResponseBody builds the HTTP response body from the
// result of the "check_role" endpoint of the "rbac" service.
func NewCheckRoleConflictResponseBody(res *rbac.ConflictError) *CheckRoleConflictResponseBody {
	body := &CheckRoleConflictResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewCheckRoleForbiddenResponseBody builds the HTTP response body from the
// result of the "check_role" endpoint of the "rbac" service.
func NewCheckRoleForbiddenResponseBody(res *rbac.ForbiddenError) *CheckRoleForbiddenResponseBody {
	body := &CheckRoleForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewCheckRoleInternalErrorResponseBody builds the HTTP response body from the
// result of the "check_role" endpoint of the "rbac" service.
func NewCheckRoleInternalErrorResponseBody(res *rbac.InternalServerError) *CheckRoleInternalErrorResponseBody {
	body := &CheckRoleInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewCheckRoleNotFoundResponseBody builds the HTTP response body from the
// result of the "check_role" endpoint of the "rbac" service.
func NewCheckRoleNotFoundResponseBody(res *rbac.NotFoundError) *CheckRoleNotFoundResponseBody {
	body := &CheckRoleNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewCheckRoleUnauthorizedResponseBody builds the HTTP response body from the
// result of the "check_role" endpoint of the "rbac" service.
func NewCheckRoleUnauthorizedResponseBody(res *rbac.UnauthorizedError) *CheckRoleUnauthorizedResponseBody {
	body := &CheckRoleUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewListPermissionsPayload builds a rbac service list_permissions endpoint
// payload.
func NewListPermissionsPayload(offset int, limit int, resource *string, action *string, search *string, jwt *string) *rbac.ListPermissionsPayload {
	v := &rbac.ListPermissionsPayload{}
	v.Offset = offset
	v.Limit = limit
	v.Resource = resource
	v.Action = action
	v.Search = search
	v.JWT = jwt

	return v
}

// NewCreatePermissionPayload builds a rbac service create_permission endpoint
// payload.
func NewCreatePermissionPayload(body *CreatePermissionRequestBody, jwt *string) *rbac.CreatePermissionPayload {
	v := &rbac.CreatePermissionPayload{}
	v.Permission = unmarshalCreatePermissionRequestRequestBodyToRbacCreatePermissionRequest(body.Permission)
	v.JWT = jwt

	return v
}

// NewGetPermissionPayload builds a rbac service get_permission endpoint
// payload.
func NewGetPermissionPayload(id string, jwt *string) *rbac.GetPermissionPayload {
	v := &rbac.GetPermissionPayload{}
	v.ID = id
	v.JWT = jwt

	return v
}

// NewUpdatePermissionPayload builds a rbac service update_permission endpoint
// payload.
func NewUpdatePermissionPayload(body *UpdatePermissionRequestBody, id string, jwt *string) *rbac.UpdatePermissionPayload {
	v := &rbac.UpdatePermissionPayload{}
	v.Permission = unmarshalUpdatePermissionRequestRequestBodyToRbacUpdatePermissionRequest(body.Permission)
	v.ID = id
	v.JWT = jwt

	return v
}

// NewDeletePermissionPayload builds a rbac service delete_permission endpoint
// payload.
func NewDeletePermissionPayload(id string, jwt *string) *rbac.DeletePermissionPayload {
	v := &rbac.DeletePermissionPayload{}
	v.ID = id
	v.JWT = jwt

	return v
}

// NewListRolesPayload builds a rbac service list_roles endpoint payload.
func NewListRolesPayload(offset int, limit int, organizationID *string, search *string, jwt *string) *rbac.ListRolesPayload {
	v := &rbac.ListRolesPayload{}
	v.Offset = offset
	v.Limit = limit
	v.OrganizationID = organizationID
	v.Search = search
	v.JWT = jwt

	return v
}

// NewCreateRolePayload builds a rbac service create_role endpoint payload.
func NewCreateRolePayload(body *CreateRoleRequestBody, jwt *string) *rbac.CreateRolePayload {
	v := &rbac.CreateRolePayload{}
	v.Role = unmarshalCreateRoleRequestRequestBodyToRbacCreateRoleRequest(body.Role)
	v.JWT = jwt

	return v
}

// NewGetRolePayload builds a rbac service get_role endpoint payload.
func NewGetRolePayload(id string, jwt *string) *rbac.GetRolePayload {
	v := &rbac.GetRolePayload{}
	v.ID = id
	v.JWT = jwt

	return v
}

// NewUpdateRolePayload builds a rbac service update_role endpoint payload.
func NewUpdateRolePayload(body *UpdateRoleRequestBody, id string, jwt *string) *rbac.UpdateRolePayload {
	v := &rbac.UpdateRolePayload{}
	v.Role = unmarshalUpdateRoleRequestRequestBodyToRbacUpdateRoleRequest(body.Role)
	v.ID = id
	v.JWT = jwt

	return v
}

// NewDeleteRolePayload builds a rbac service delete_role endpoint payload.
func NewDeleteRolePayload(id string, jwt *string) *rbac.DeleteRolePayload {
	v := &rbac.DeleteRolePayload{}
	v.ID = id
	v.JWT = jwt

	return v
}

// NewListRolePermissionsPayload builds a rbac service list_role_permissions
// endpoint payload.
func NewListRolePermissionsPayload(id string, jwt *string) *rbac.ListRolePermissionsPayload {
	v := &rbac.ListRolePermissionsPayload{}
	v.ID = id
	v.JWT = jwt

	return v
}

// NewAddRolePermissionPayload builds a rbac service add_role_permission
// endpoint payload.
func NewAddRolePermissionPayload(body *AddRolePermissionRequestBody, id string, jwt *string) *rbac.AddRolePermissionPayload {
	v := &rbac.AddRolePermissionPayload{}
	v.Permission = unmarshalAddRolePermissionRequestRequestBodyToRbacAddRolePermissionRequest(body.Permission)
	v.ID = id
	v.JWT = jwt

	return v
}

// NewRemoveRolePermissionPayload builds a rbac service remove_role_permission
// endpoint payload.
func NewRemoveRolePermissionPayload(id string, permissionID string, jwt *string) *rbac.RemoveRolePermissionPayload {
	v := &rbac.RemoveRolePermissionPayload{}
	v.ID = id
	v.PermissionID = permissionID
	v.JWT = jwt

	return v
}

// NewCheckPermissionPayload builds a rbac service check_permission endpoint
// payload.
func NewCheckPermissionPayload(resource string, action string, jwt *string) *rbac.CheckPermissionPayload {
	v := &rbac.CheckPermissionPayload{}
	v.Resource = resource
	v.Action = action
	v.JWT = jwt

	return v
}

// NewCheckRolePayload builds a rbac service check_role endpoint payload.
func NewCheckRolePayload(role string, organizationID *string, jwt *string) *rbac.CheckRolePayload {
	v := &rbac.CheckRolePayload{}
	v.Role = role
	v.OrganizationID = organizationID
	v.JWT = jwt

	return v
}

// ValidateCreatePermissionRequestBody runs the validations defined on
// create_permission_request_body
func ValidateCreatePermissionRequestBody(body *CreatePermissionRequestBody) (err error) {
	if body.Permission == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("permission", "body"))
	}
	if body.Permission != nil {
		if err2 := ValidateCreatePermissionRequestRequestBody(body.Permission); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateUpdatePermissionRequestBody runs the validations defined on
// update_permission_request_body
func ValidateUpdatePermissionRequestBody(body *UpdatePermissionRequestBody) (err error) {
	if body.Permission == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("permission", "body"))
	}
	return
}

// ValidateCreateRoleRequestBody runs the validations defined on
// create_role_request_body
func ValidateCreateRoleRequestBody(body *CreateRoleRequestBody) (err error) {
	if body.Role == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("role", "body"))
	}
	if body.Role != nil {
		if err2 := ValidateCreateRoleRequestRequestBody(body.Role); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateUpdateRoleRequestBody runs the validations defined on
// update_role_request_body
func ValidateUpdateRoleRequestBody(body *UpdateRoleRequestBody) (err error) {
	if body.Role == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("role", "body"))
	}
	return
}

// ValidateAddRolePermissionRequestBody runs the validations defined on
// add_role_permission_request_body
func ValidateAddRolePermissionRequestBody(body *AddRolePermissionRequestBody) (err error) {
	if body.Permission == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("permission", "body"))
	}
	if body.Permission != nil {
		if err2 := ValidateAddRolePermissionRequestRequestBody(body.Permission); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateCreatePermissionRequestRequestBody runs the validations defined on
// CreatePermissionRequestRequestBody
func ValidateCreatePermissionRequestRequestBody(body *CreatePermissionRequestRequestBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.Resource == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("resource", "body"))
	}
	if body.Action == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("action", "body"))
	}
	return
}

// ValidateCreateRoleRequestRequestBody runs the validations defined on
// CreateRoleRequestRequestBody
func ValidateCreateRoleRequestRequestBody(body *CreateRoleRequestRequestBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	return
}

// ValidateAddRolePermissionRequestRequestBody runs the validations defined on
// AddRolePermissionRequestRequestBody
func ValidateAddRolePermissionRequestRequestBody(body *AddRolePermissionRequestRequestBody) (err error) {
	if body.PermissionID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("permission_id", "body"))
	}
	return
}
