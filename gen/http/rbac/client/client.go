// Code generated by goa v3.20.0, DO NOT EDIT.
//
// rbac client HTTP transport
//
// Command:
// $ goa gen github.com/juicycleff/frank/design -o .

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the rbac service endpoint HTTP clients.
type Client struct {
	// ListPermissions Doer is the HTTP client used to make requests to the
	// list_permissions endpoint.
	ListPermissionsDoer goahttp.Doer

	// CreatePermission Doer is the HTTP client used to make requests to the
	// create_permission endpoint.
	CreatePermissionDoer goahttp.Doer

	// GetPermission Doer is the HTTP client used to make requests to the
	// get_permission endpoint.
	GetPermissionDoer goahttp.Doer

	// UpdatePermission Doer is the HTTP client used to make requests to the
	// update_permission endpoint.
	UpdatePermissionDoer goahttp.Doer

	// DeletePermission Doer is the HTTP client used to make requests to the
	// delete_permission endpoint.
	DeletePermissionDoer goahttp.Doer

	// ListRoles Doer is the HTTP client used to make requests to the list_roles
	// endpoint.
	ListRolesDoer goahttp.Doer

	// CreateRole Doer is the HTTP client used to make requests to the create_role
	// endpoint.
	CreateRoleDoer goahttp.Doer

	// GetRole Doer is the HTTP client used to make requests to the get_role
	// endpoint.
	GetRoleDoer goahttp.Doer

	// UpdateRole Doer is the HTTP client used to make requests to the update_role
	// endpoint.
	UpdateRoleDoer goahttp.Doer

	// DeleteRole Doer is the HTTP client used to make requests to the delete_role
	// endpoint.
	DeleteRoleDoer goahttp.Doer

	// ListRolePermissions Doer is the HTTP client used to make requests to the
	// list_role_permissions endpoint.
	ListRolePermissionsDoer goahttp.Doer

	// AddRolePermission Doer is the HTTP client used to make requests to the
	// add_role_permission endpoint.
	AddRolePermissionDoer goahttp.Doer

	// RemoveRolePermission Doer is the HTTP client used to make requests to the
	// remove_role_permission endpoint.
	RemoveRolePermissionDoer goahttp.Doer

	// CheckPermission Doer is the HTTP client used to make requests to the
	// check_permission endpoint.
	CheckPermissionDoer goahttp.Doer

	// CheckRole Doer is the HTTP client used to make requests to the check_role
	// endpoint.
	CheckRoleDoer goahttp.Doer

	// CORS Doer is the HTTP client used to make requests to the  endpoint.
	CORSDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the rbac service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		ListPermissionsDoer:      doer,
		CreatePermissionDoer:     doer,
		GetPermissionDoer:        doer,
		UpdatePermissionDoer:     doer,
		DeletePermissionDoer:     doer,
		ListRolesDoer:            doer,
		CreateRoleDoer:           doer,
		GetRoleDoer:              doer,
		UpdateRoleDoer:           doer,
		DeleteRoleDoer:           doer,
		ListRolePermissionsDoer:  doer,
		AddRolePermissionDoer:    doer,
		RemoveRolePermissionDoer: doer,
		CheckPermissionDoer:      doer,
		CheckRoleDoer:            doer,
		CORSDoer:                 doer,
		RestoreResponseBody:      restoreBody,
		scheme:                   scheme,
		host:                     host,
		decoder:                  dec,
		encoder:                  enc,
	}
}

// ListPermissions returns an endpoint that makes HTTP requests to the rbac
// service list_permissions server.
func (c *Client) ListPermissions() goa.Endpoint {
	var (
		encodeRequest  = EncodeListPermissionsRequest(c.encoder)
		decodeResponse = DecodeListPermissionsResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildListPermissionsRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ListPermissionsDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("rbac", "list_permissions", err)
		}
		return decodeResponse(resp)
	}
}

// CreatePermission returns an endpoint that makes HTTP requests to the rbac
// service create_permission server.
func (c *Client) CreatePermission() goa.Endpoint {
	var (
		encodeRequest  = EncodeCreatePermissionRequest(c.encoder)
		decodeResponse = DecodeCreatePermissionResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildCreatePermissionRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CreatePermissionDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("rbac", "create_permission", err)
		}
		return decodeResponse(resp)
	}
}

// GetPermission returns an endpoint that makes HTTP requests to the rbac
// service get_permission server.
func (c *Client) GetPermission() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetPermissionRequest(c.encoder)
		decodeResponse = DecodeGetPermissionResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGetPermissionRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetPermissionDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("rbac", "get_permission", err)
		}
		return decodeResponse(resp)
	}
}

// UpdatePermission returns an endpoint that makes HTTP requests to the rbac
// service update_permission server.
func (c *Client) UpdatePermission() goa.Endpoint {
	var (
		encodeRequest  = EncodeUpdatePermissionRequest(c.encoder)
		decodeResponse = DecodeUpdatePermissionResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildUpdatePermissionRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UpdatePermissionDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("rbac", "update_permission", err)
		}
		return decodeResponse(resp)
	}
}

// DeletePermission returns an endpoint that makes HTTP requests to the rbac
// service delete_permission server.
func (c *Client) DeletePermission() goa.Endpoint {
	var (
		encodeRequest  = EncodeDeletePermissionRequest(c.encoder)
		decodeResponse = DecodeDeletePermissionResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildDeletePermissionRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DeletePermissionDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("rbac", "delete_permission", err)
		}
		return decodeResponse(resp)
	}
}

// ListRoles returns an endpoint that makes HTTP requests to the rbac service
// list_roles server.
func (c *Client) ListRoles() goa.Endpoint {
	var (
		encodeRequest  = EncodeListRolesRequest(c.encoder)
		decodeResponse = DecodeListRolesResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildListRolesRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ListRolesDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("rbac", "list_roles", err)
		}
		return decodeResponse(resp)
	}
}

// CreateRole returns an endpoint that makes HTTP requests to the rbac service
// create_role server.
func (c *Client) CreateRole() goa.Endpoint {
	var (
		encodeRequest  = EncodeCreateRoleRequest(c.encoder)
		decodeResponse = DecodeCreateRoleResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildCreateRoleRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CreateRoleDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("rbac", "create_role", err)
		}
		return decodeResponse(resp)
	}
}

// GetRole returns an endpoint that makes HTTP requests to the rbac service
// get_role server.
func (c *Client) GetRole() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetRoleRequest(c.encoder)
		decodeResponse = DecodeGetRoleResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGetRoleRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetRoleDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("rbac", "get_role", err)
		}
		return decodeResponse(resp)
	}
}

// UpdateRole returns an endpoint that makes HTTP requests to the rbac service
// update_role server.
func (c *Client) UpdateRole() goa.Endpoint {
	var (
		encodeRequest  = EncodeUpdateRoleRequest(c.encoder)
		decodeResponse = DecodeUpdateRoleResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildUpdateRoleRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UpdateRoleDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("rbac", "update_role", err)
		}
		return decodeResponse(resp)
	}
}

// DeleteRole returns an endpoint that makes HTTP requests to the rbac service
// delete_role server.
func (c *Client) DeleteRole() goa.Endpoint {
	var (
		encodeRequest  = EncodeDeleteRoleRequest(c.encoder)
		decodeResponse = DecodeDeleteRoleResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildDeleteRoleRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DeleteRoleDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("rbac", "delete_role", err)
		}
		return decodeResponse(resp)
	}
}

// ListRolePermissions returns an endpoint that makes HTTP requests to the rbac
// service list_role_permissions server.
func (c *Client) ListRolePermissions() goa.Endpoint {
	var (
		encodeRequest  = EncodeListRolePermissionsRequest(c.encoder)
		decodeResponse = DecodeListRolePermissionsResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildListRolePermissionsRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ListRolePermissionsDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("rbac", "list_role_permissions", err)
		}
		return decodeResponse(resp)
	}
}

// AddRolePermission returns an endpoint that makes HTTP requests to the rbac
// service add_role_permission server.
func (c *Client) AddRolePermission() goa.Endpoint {
	var (
		encodeRequest  = EncodeAddRolePermissionRequest(c.encoder)
		decodeResponse = DecodeAddRolePermissionResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildAddRolePermissionRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.AddRolePermissionDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("rbac", "add_role_permission", err)
		}
		return decodeResponse(resp)
	}
}

// RemoveRolePermission returns an endpoint that makes HTTP requests to the
// rbac service remove_role_permission server.
func (c *Client) RemoveRolePermission() goa.Endpoint {
	var (
		encodeRequest  = EncodeRemoveRolePermissionRequest(c.encoder)
		decodeResponse = DecodeRemoveRolePermissionResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildRemoveRolePermissionRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.RemoveRolePermissionDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("rbac", "remove_role_permission", err)
		}
		return decodeResponse(resp)
	}
}

// CheckPermission returns an endpoint that makes HTTP requests to the rbac
// service check_permission server.
func (c *Client) CheckPermission() goa.Endpoint {
	var (
		encodeRequest  = EncodeCheckPermissionRequest(c.encoder)
		decodeResponse = DecodeCheckPermissionResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildCheckPermissionRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CheckPermissionDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("rbac", "check_permission", err)
		}
		return decodeResponse(resp)
	}
}

// CheckRole returns an endpoint that makes HTTP requests to the rbac service
// check_role server.
func (c *Client) CheckRole() goa.Endpoint {
	var (
		encodeRequest  = EncodeCheckRoleRequest(c.encoder)
		decodeResponse = DecodeCheckRoleResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildCheckRoleRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CheckRoleDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("rbac", "check_role", err)
		}
		return decodeResponse(resp)
	}
}
