// Code generated by goa v3.20.0, DO NOT EDIT.
//
// rbac HTTP client types
//
// Command:
// $ goa gen github.com/juicycleff/frank/design -o .

package client

import (
	designtypes "github.com/juicycleff/frank/gen/designtypes"
	rbac "github.com/juicycleff/frank/gen/rbac"
	goa "goa.design/goa/v3/pkg"
)

// CreatePermissionRequestBody is the type of the "rbac" service
// "create_permission" endpoint HTTP request body.
type CreatePermissionRequestBody struct {
	Permission *CreatePermissionRequestRequestBody `form:"permission" json:"permission" xml:"permission"`
}

// UpdatePermissionRequestBody is the type of the "rbac" service
// "update_permission" endpoint HTTP request body.
type UpdatePermissionRequestBody struct {
	Permission *UpdatePermissionRequestRequestBody `form:"permission" json:"permission" xml:"permission"`
}

// CreateRoleRequestBody is the type of the "rbac" service "create_role"
// endpoint HTTP request body.
type CreateRoleRequestBody struct {
	Role *CreateRoleRequestRequestBody `form:"role" json:"role" xml:"role"`
}

// UpdateRoleRequestBody is the type of the "rbac" service "update_role"
// endpoint HTTP request body.
type UpdateRoleRequestBody struct {
	Role *UpdateRoleRequestRequestBody `form:"role" json:"role" xml:"role"`
}

// AddRolePermissionRequestBody is the type of the "rbac" service
// "add_role_permission" endpoint HTTP request body.
type AddRolePermissionRequestBody struct {
	Permission *AddRolePermissionRequestRequestBody `form:"permission" json:"permission" xml:"permission"`
}

// ListPermissionsResponseBody is the type of the "rbac" service
// "list_permissions" endpoint HTTP response body.
type ListPermissionsResponseBody struct {
	Data       []*PermissionResponseResponseBody `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	Pagination *PaginationResponseResponseBody   `form:"pagination,omitempty" json:"pagination,omitempty" xml:"pagination,omitempty"`
}

// CreatePermissionResponseBody is the type of the "rbac" service
// "create_permission" endpoint HTTP response body.
type CreatePermissionResponseBody struct {
	// Permission ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Permission name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Permission description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Resource this permission applies to
	Resource *string `form:"resource,omitempty" json:"resource,omitempty" xml:"resource,omitempty"`
	// Action this permission allows
	Action *string `form:"action,omitempty" json:"action,omitempty" xml:"action,omitempty"`
	// JSON expression for conditional access
	Conditions *string `form:"conditions,omitempty" json:"conditions,omitempty" xml:"conditions,omitempty"`
	// Whether this is a system permission
	System *bool `form:"system,omitempty" json:"system,omitempty" xml:"system,omitempty"`
	// Creation timestamp
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// Last update timestamp
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// GetPermissionResponseBody is the type of the "rbac" service "get_permission"
// endpoint HTTP response body.
type GetPermissionResponseBody struct {
	// Permission ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Permission name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Permission description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Resource this permission applies to
	Resource *string `form:"resource,omitempty" json:"resource,omitempty" xml:"resource,omitempty"`
	// Action this permission allows
	Action *string `form:"action,omitempty" json:"action,omitempty" xml:"action,omitempty"`
	// JSON expression for conditional access
	Conditions *string `form:"conditions,omitempty" json:"conditions,omitempty" xml:"conditions,omitempty"`
	// Whether this is a system permission
	System *bool `form:"system,omitempty" json:"system,omitempty" xml:"system,omitempty"`
	// Creation timestamp
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// Last update timestamp
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// UpdatePermissionResponseBody is the type of the "rbac" service
// "update_permission" endpoint HTTP response body.
type UpdatePermissionResponseBody struct {
	// Permission ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Permission name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Permission description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Resource this permission applies to
	Resource *string `form:"resource,omitempty" json:"resource,omitempty" xml:"resource,omitempty"`
	// Action this permission allows
	Action *string `form:"action,omitempty" json:"action,omitempty" xml:"action,omitempty"`
	// JSON expression for conditional access
	Conditions *string `form:"conditions,omitempty" json:"conditions,omitempty" xml:"conditions,omitempty"`
	// Whether this is a system permission
	System *bool `form:"system,omitempty" json:"system,omitempty" xml:"system,omitempty"`
	// Creation timestamp
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// Last update timestamp
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// ListRolesResponseBody is the type of the "rbac" service "list_roles"
// endpoint HTTP response body.
type ListRolesResponseBody struct {
	Data       []*RoleResponseResponseBody     `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	Pagination *PaginationResponseResponseBody `form:"pagination,omitempty" json:"pagination,omitempty" xml:"pagination,omitempty"`
}

// CreateRoleResponseBody is the type of the "rbac" service "create_role"
// endpoint HTTP response body.
type CreateRoleResponseBody struct {
	// Role ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Role name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Role description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Organization ID
	OrganizationID *string `form:"organization_id,omitempty" json:"organization_id,omitempty" xml:"organization_id,omitempty"`
	// Whether this is a system role
	System *bool `form:"system,omitempty" json:"system,omitempty" xml:"system,omitempty"`
	// Whether this is a default role for new users
	IsDefault *bool `form:"is_default,omitempty" json:"is_default,omitempty" xml:"is_default,omitempty"`
	// Permissions assigned to this role
	Permissions []*PermissionResponseResponseBody `form:"permissions,omitempty" json:"permissions,omitempty" xml:"permissions,omitempty"`
	// Creation timestamp
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// Last update timestamp
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// GetRoleResponseBody is the type of the "rbac" service "get_role" endpoint
// HTTP response body.
type GetRoleResponseBody struct {
	// Role ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Role name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Role description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Organization ID
	OrganizationID *string `form:"organization_id,omitempty" json:"organization_id,omitempty" xml:"organization_id,omitempty"`
	// Whether this is a system role
	System *bool `form:"system,omitempty" json:"system,omitempty" xml:"system,omitempty"`
	// Whether this is a default role for new users
	IsDefault *bool `form:"is_default,omitempty" json:"is_default,omitempty" xml:"is_default,omitempty"`
	// Permissions assigned to this role
	Permissions []*PermissionResponseResponseBody `form:"permissions,omitempty" json:"permissions,omitempty" xml:"permissions,omitempty"`
	// Creation timestamp
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// Last update timestamp
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// UpdateRoleResponseBody is the type of the "rbac" service "update_role"
// endpoint HTTP response body.
type UpdateRoleResponseBody struct {
	// Role ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Role name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Role description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Organization ID
	OrganizationID *string `form:"organization_id,omitempty" json:"organization_id,omitempty" xml:"organization_id,omitempty"`
	// Whether this is a system role
	System *bool `form:"system,omitempty" json:"system,omitempty" xml:"system,omitempty"`
	// Whether this is a default role for new users
	IsDefault *bool `form:"is_default,omitempty" json:"is_default,omitempty" xml:"is_default,omitempty"`
	// Permissions assigned to this role
	Permissions []*PermissionResponseResponseBody `form:"permissions,omitempty" json:"permissions,omitempty" xml:"permissions,omitempty"`
	// Creation timestamp
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// Last update timestamp
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// ListRolePermissionsResponseBody is the type of the "rbac" service
// "list_role_permissions" endpoint HTTP response body.
type ListRolePermissionsResponseBody struct {
	Permissions []*PermissionResponseResponseBody `form:"permissions,omitempty" json:"permissions,omitempty" xml:"permissions,omitempty"`
}

// AddRolePermissionResponseBody is the type of the "rbac" service
// "add_role_permission" endpoint HTTP response body.
type AddRolePermissionResponseBody struct {
	// Success message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// CheckPermissionResponseBody is the type of the "rbac" service
// "check_permission" endpoint HTTP response body.
type CheckPermissionResponseBody struct {
	// Whether user has the permission
	HasPermission *bool `form:"has_permission,omitempty" json:"has_permission,omitempty" xml:"has_permission,omitempty"`
}

// CheckRoleResponseBody is the type of the "rbac" service "check_role"
// endpoint HTTP response body.
type CheckRoleResponseBody struct {
	// Whether user has the role
	HasRole *bool `form:"has_role,omitempty" json:"has_role,omitempty" xml:"has_role,omitempty"`
}

// ListPermissionsBadRequestResponseBody is the type of the "rbac" service
// "list_permissions" endpoint HTTP response body for the "bad_request" error.
type ListPermissionsBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListPermissionsConflictResponseBody is the type of the "rbac" service
// "list_permissions" endpoint HTTP response body for the "conflict" error.
type ListPermissionsConflictResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListPermissionsForbiddenResponseBody is the type of the "rbac" service
// "list_permissions" endpoint HTTP response body for the "forbidden" error.
type ListPermissionsForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListPermissionsInternalErrorResponseBody is the type of the "rbac" service
// "list_permissions" endpoint HTTP response body for the "internal_error"
// error.
type ListPermissionsInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListPermissionsNotFoundResponseBody is the type of the "rbac" service
// "list_permissions" endpoint HTTP response body for the "not_found" error.
type ListPermissionsNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListPermissionsUnauthorizedResponseBody is the type of the "rbac" service
// "list_permissions" endpoint HTTP response body for the "unauthorized" error.
type ListPermissionsUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreatePermissionBadRequestResponseBody is the type of the "rbac" service
// "create_permission" endpoint HTTP response body for the "bad_request" error.
type CreatePermissionBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreatePermissionConflictResponseBody is the type of the "rbac" service
// "create_permission" endpoint HTTP response body for the "conflict" error.
type CreatePermissionConflictResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreatePermissionForbiddenResponseBody is the type of the "rbac" service
// "create_permission" endpoint HTTP response body for the "forbidden" error.
type CreatePermissionForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreatePermissionInternalErrorResponseBody is the type of the "rbac" service
// "create_permission" endpoint HTTP response body for the "internal_error"
// error.
type CreatePermissionInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreatePermissionNotFoundResponseBody is the type of the "rbac" service
// "create_permission" endpoint HTTP response body for the "not_found" error.
type CreatePermissionNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreatePermissionUnauthorizedResponseBody is the type of the "rbac" service
// "create_permission" endpoint HTTP response body for the "unauthorized" error.
type CreatePermissionUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetPermissionBadRequestResponseBody is the type of the "rbac" service
// "get_permission" endpoint HTTP response body for the "bad_request" error.
type GetPermissionBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetPermissionConflictResponseBody is the type of the "rbac" service
// "get_permission" endpoint HTTP response body for the "conflict" error.
type GetPermissionConflictResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetPermissionForbiddenResponseBody is the type of the "rbac" service
// "get_permission" endpoint HTTP response body for the "forbidden" error.
type GetPermissionForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetPermissionInternalErrorResponseBody is the type of the "rbac" service
// "get_permission" endpoint HTTP response body for the "internal_error" error.
type GetPermissionInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetPermissionNotFoundResponseBody is the type of the "rbac" service
// "get_permission" endpoint HTTP response body for the "not_found" error.
type GetPermissionNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetPermissionUnauthorizedResponseBody is the type of the "rbac" service
// "get_permission" endpoint HTTP response body for the "unauthorized" error.
type GetPermissionUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdatePermissionBadRequestResponseBody is the type of the "rbac" service
// "update_permission" endpoint HTTP response body for the "bad_request" error.
type UpdatePermissionBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdatePermissionConflictResponseBody is the type of the "rbac" service
// "update_permission" endpoint HTTP response body for the "conflict" error.
type UpdatePermissionConflictResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdatePermissionForbiddenResponseBody is the type of the "rbac" service
// "update_permission" endpoint HTTP response body for the "forbidden" error.
type UpdatePermissionForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdatePermissionInternalErrorResponseBody is the type of the "rbac" service
// "update_permission" endpoint HTTP response body for the "internal_error"
// error.
type UpdatePermissionInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdatePermissionNotFoundResponseBody is the type of the "rbac" service
// "update_permission" endpoint HTTP response body for the "not_found" error.
type UpdatePermissionNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdatePermissionUnauthorizedResponseBody is the type of the "rbac" service
// "update_permission" endpoint HTTP response body for the "unauthorized" error.
type UpdatePermissionUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeletePermissionBadRequestResponseBody is the type of the "rbac" service
// "delete_permission" endpoint HTTP response body for the "bad_request" error.
type DeletePermissionBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeletePermissionConflictResponseBody is the type of the "rbac" service
// "delete_permission" endpoint HTTP response body for the "conflict" error.
type DeletePermissionConflictResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeletePermissionForbiddenResponseBody is the type of the "rbac" service
// "delete_permission" endpoint HTTP response body for the "forbidden" error.
type DeletePermissionForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeletePermissionInternalErrorResponseBody is the type of the "rbac" service
// "delete_permission" endpoint HTTP response body for the "internal_error"
// error.
type DeletePermissionInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeletePermissionNotFoundResponseBody is the type of the "rbac" service
// "delete_permission" endpoint HTTP response body for the "not_found" error.
type DeletePermissionNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeletePermissionUnauthorizedResponseBody is the type of the "rbac" service
// "delete_permission" endpoint HTTP response body for the "unauthorized" error.
type DeletePermissionUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListRolesBadRequestResponseBody is the type of the "rbac" service
// "list_roles" endpoint HTTP response body for the "bad_request" error.
type ListRolesBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListRolesConflictResponseBody is the type of the "rbac" service "list_roles"
// endpoint HTTP response body for the "conflict" error.
type ListRolesConflictResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListRolesForbiddenResponseBody is the type of the "rbac" service
// "list_roles" endpoint HTTP response body for the "forbidden" error.
type ListRolesForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListRolesInternalErrorResponseBody is the type of the "rbac" service
// "list_roles" endpoint HTTP response body for the "internal_error" error.
type ListRolesInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListRolesNotFoundResponseBody is the type of the "rbac" service "list_roles"
// endpoint HTTP response body for the "not_found" error.
type ListRolesNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListRolesUnauthorizedResponseBody is the type of the "rbac" service
// "list_roles" endpoint HTTP response body for the "unauthorized" error.
type ListRolesUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreateRoleBadRequestResponseBody is the type of the "rbac" service
// "create_role" endpoint HTTP response body for the "bad_request" error.
type CreateRoleBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreateRoleConflictResponseBody is the type of the "rbac" service
// "create_role" endpoint HTTP response body for the "conflict" error.
type CreateRoleConflictResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreateRoleForbiddenResponseBody is the type of the "rbac" service
// "create_role" endpoint HTTP response body for the "forbidden" error.
type CreateRoleForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreateRoleInternalErrorResponseBody is the type of the "rbac" service
// "create_role" endpoint HTTP response body for the "internal_error" error.
type CreateRoleInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreateRoleNotFoundResponseBody is the type of the "rbac" service
// "create_role" endpoint HTTP response body for the "not_found" error.
type CreateRoleNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreateRoleUnauthorizedResponseBody is the type of the "rbac" service
// "create_role" endpoint HTTP response body for the "unauthorized" error.
type CreateRoleUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetRoleBadRequestResponseBody is the type of the "rbac" service "get_role"
// endpoint HTTP response body for the "bad_request" error.
type GetRoleBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetRoleConflictResponseBody is the type of the "rbac" service "get_role"
// endpoint HTTP response body for the "conflict" error.
type GetRoleConflictResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetRoleForbiddenResponseBody is the type of the "rbac" service "get_role"
// endpoint HTTP response body for the "forbidden" error.
type GetRoleForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetRoleInternalErrorResponseBody is the type of the "rbac" service
// "get_role" endpoint HTTP response body for the "internal_error" error.
type GetRoleInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetRoleNotFoundResponseBody is the type of the "rbac" service "get_role"
// endpoint HTTP response body for the "not_found" error.
type GetRoleNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetRoleUnauthorizedResponseBody is the type of the "rbac" service "get_role"
// endpoint HTTP response body for the "unauthorized" error.
type GetRoleUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateRoleBadRequestResponseBody is the type of the "rbac" service
// "update_role" endpoint HTTP response body for the "bad_request" error.
type UpdateRoleBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateRoleConflictResponseBody is the type of the "rbac" service
// "update_role" endpoint HTTP response body for the "conflict" error.
type UpdateRoleConflictResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateRoleForbiddenResponseBody is the type of the "rbac" service
// "update_role" endpoint HTTP response body for the "forbidden" error.
type UpdateRoleForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateRoleInternalErrorResponseBody is the type of the "rbac" service
// "update_role" endpoint HTTP response body for the "internal_error" error.
type UpdateRoleInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateRoleNotFoundResponseBody is the type of the "rbac" service
// "update_role" endpoint HTTP response body for the "not_found" error.
type UpdateRoleNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateRoleUnauthorizedResponseBody is the type of the "rbac" service
// "update_role" endpoint HTTP response body for the "unauthorized" error.
type UpdateRoleUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteRoleBadRequestResponseBody is the type of the "rbac" service
// "delete_role" endpoint HTTP response body for the "bad_request" error.
type DeleteRoleBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteRoleConflictResponseBody is the type of the "rbac" service
// "delete_role" endpoint HTTP response body for the "conflict" error.
type DeleteRoleConflictResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteRoleForbiddenResponseBody is the type of the "rbac" service
// "delete_role" endpoint HTTP response body for the "forbidden" error.
type DeleteRoleForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteRoleInternalErrorResponseBody is the type of the "rbac" service
// "delete_role" endpoint HTTP response body for the "internal_error" error.
type DeleteRoleInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteRoleNotFoundResponseBody is the type of the "rbac" service
// "delete_role" endpoint HTTP response body for the "not_found" error.
type DeleteRoleNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteRoleUnauthorizedResponseBody is the type of the "rbac" service
// "delete_role" endpoint HTTP response body for the "unauthorized" error.
type DeleteRoleUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListRolePermissionsBadRequestResponseBody is the type of the "rbac" service
// "list_role_permissions" endpoint HTTP response body for the "bad_request"
// error.
type ListRolePermissionsBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListRolePermissionsConflictResponseBody is the type of the "rbac" service
// "list_role_permissions" endpoint HTTP response body for the "conflict" error.
type ListRolePermissionsConflictResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListRolePermissionsForbiddenResponseBody is the type of the "rbac" service
// "list_role_permissions" endpoint HTTP response body for the "forbidden"
// error.
type ListRolePermissionsForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListRolePermissionsInternalErrorResponseBody is the type of the "rbac"
// service "list_role_permissions" endpoint HTTP response body for the
// "internal_error" error.
type ListRolePermissionsInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListRolePermissionsNotFoundResponseBody is the type of the "rbac" service
// "list_role_permissions" endpoint HTTP response body for the "not_found"
// error.
type ListRolePermissionsNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListRolePermissionsUnauthorizedResponseBody is the type of the "rbac"
// service "list_role_permissions" endpoint HTTP response body for the
// "unauthorized" error.
type ListRolePermissionsUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// AddRolePermissionBadRequestResponseBody is the type of the "rbac" service
// "add_role_permission" endpoint HTTP response body for the "bad_request"
// error.
type AddRolePermissionBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// AddRolePermissionConflictResponseBody is the type of the "rbac" service
// "add_role_permission" endpoint HTTP response body for the "conflict" error.
type AddRolePermissionConflictResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// AddRolePermissionForbiddenResponseBody is the type of the "rbac" service
// "add_role_permission" endpoint HTTP response body for the "forbidden" error.
type AddRolePermissionForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// AddRolePermissionInternalErrorResponseBody is the type of the "rbac" service
// "add_role_permission" endpoint HTTP response body for the "internal_error"
// error.
type AddRolePermissionInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// AddRolePermissionNotFoundResponseBody is the type of the "rbac" service
// "add_role_permission" endpoint HTTP response body for the "not_found" error.
type AddRolePermissionNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// AddRolePermissionUnauthorizedResponseBody is the type of the "rbac" service
// "add_role_permission" endpoint HTTP response body for the "unauthorized"
// error.
type AddRolePermissionUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// RemoveRolePermissionBadRequestResponseBody is the type of the "rbac" service
// "remove_role_permission" endpoint HTTP response body for the "bad_request"
// error.
type RemoveRolePermissionBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// RemoveRolePermissionConflictResponseBody is the type of the "rbac" service
// "remove_role_permission" endpoint HTTP response body for the "conflict"
// error.
type RemoveRolePermissionConflictResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// RemoveRolePermissionForbiddenResponseBody is the type of the "rbac" service
// "remove_role_permission" endpoint HTTP response body for the "forbidden"
// error.
type RemoveRolePermissionForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// RemoveRolePermissionInternalErrorResponseBody is the type of the "rbac"
// service "remove_role_permission" endpoint HTTP response body for the
// "internal_error" error.
type RemoveRolePermissionInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// RemoveRolePermissionNotFoundResponseBody is the type of the "rbac" service
// "remove_role_permission" endpoint HTTP response body for the "not_found"
// error.
type RemoveRolePermissionNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// RemoveRolePermissionUnauthorizedResponseBody is the type of the "rbac"
// service "remove_role_permission" endpoint HTTP response body for the
// "unauthorized" error.
type RemoveRolePermissionUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CheckPermissionBadRequestResponseBody is the type of the "rbac" service
// "check_permission" endpoint HTTP response body for the "bad_request" error.
type CheckPermissionBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CheckPermissionConflictResponseBody is the type of the "rbac" service
// "check_permission" endpoint HTTP response body for the "conflict" error.
type CheckPermissionConflictResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CheckPermissionForbiddenResponseBody is the type of the "rbac" service
// "check_permission" endpoint HTTP response body for the "forbidden" error.
type CheckPermissionForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CheckPermissionInternalErrorResponseBody is the type of the "rbac" service
// "check_permission" endpoint HTTP response body for the "internal_error"
// error.
type CheckPermissionInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CheckPermissionNotFoundResponseBody is the type of the "rbac" service
// "check_permission" endpoint HTTP response body for the "not_found" error.
type CheckPermissionNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CheckPermissionUnauthorizedResponseBody is the type of the "rbac" service
// "check_permission" endpoint HTTP response body for the "unauthorized" error.
type CheckPermissionUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CheckRoleBadRequestResponseBody is the type of the "rbac" service
// "check_role" endpoint HTTP response body for the "bad_request" error.
type CheckRoleBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CheckRoleConflictResponseBody is the type of the "rbac" service "check_role"
// endpoint HTTP response body for the "conflict" error.
type CheckRoleConflictResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CheckRoleForbiddenResponseBody is the type of the "rbac" service
// "check_role" endpoint HTTP response body for the "forbidden" error.
type CheckRoleForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CheckRoleInternalErrorResponseBody is the type of the "rbac" service
// "check_role" endpoint HTTP response body for the "internal_error" error.
type CheckRoleInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CheckRoleNotFoundResponseBody is the type of the "rbac" service "check_role"
// endpoint HTTP response body for the "not_found" error.
type CheckRoleNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CheckRoleUnauthorizedResponseBody is the type of the "rbac" service
// "check_role" endpoint HTTP response body for the "unauthorized" error.
type CheckRoleUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// PermissionResponseResponseBody is used to define fields on response body
// types.
type PermissionResponseResponseBody struct {
	// Permission ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Permission name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Permission description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Resource this permission applies to
	Resource *string `form:"resource,omitempty" json:"resource,omitempty" xml:"resource,omitempty"`
	// Action this permission allows
	Action *string `form:"action,omitempty" json:"action,omitempty" xml:"action,omitempty"`
	// JSON expression for conditional access
	Conditions *string `form:"conditions,omitempty" json:"conditions,omitempty" xml:"conditions,omitempty"`
	// Whether this is a system permission
	System *bool `form:"system,omitempty" json:"system,omitempty" xml:"system,omitempty"`
	// Creation timestamp
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// Last update timestamp
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// PaginationResponseResponseBody is used to define fields on response body
// types.
type PaginationResponseResponseBody struct {
	// Total number of items
	Total *int `form:"total,omitempty" json:"total,omitempty" xml:"total,omitempty"`
	// Current offset
	Offset *int `form:"offset,omitempty" json:"offset,omitempty" xml:"offset,omitempty"`
	// Current limit
	Limit *int `form:"limit,omitempty" json:"limit,omitempty" xml:"limit,omitempty"`
}

// CreatePermissionRequestRequestBody is used to define fields on request body
// types.
type CreatePermissionRequestRequestBody struct {
	// Permission name
	Name string `form:"name" json:"name" xml:"name"`
	// Permission description
	Description string `form:"description" json:"description" xml:"description"`
	// Resource this permission applies to
	Resource string `form:"resource" json:"resource" xml:"resource"`
	// Action this permission allows
	Action string `form:"action" json:"action" xml:"action"`
	// JSON expression for conditional access
	Conditions *string `form:"conditions,omitempty" json:"conditions,omitempty" xml:"conditions,omitempty"`
}

// UpdatePermissionRequestRequestBody is used to define fields on request body
// types.
type UpdatePermissionRequestRequestBody struct {
	// Permission name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Permission description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// JSON expression for conditional access
	Conditions *string `form:"conditions,omitempty" json:"conditions,omitempty" xml:"conditions,omitempty"`
}

// RoleResponseResponseBody is used to define fields on response body types.
type RoleResponseResponseBody struct {
	// Role ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Role name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Role description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Organization ID
	OrganizationID *string `form:"organization_id,omitempty" json:"organization_id,omitempty" xml:"organization_id,omitempty"`
	// Whether this is a system role
	System *bool `form:"system,omitempty" json:"system,omitempty" xml:"system,omitempty"`
	// Whether this is a default role for new users
	IsDefault *bool `form:"is_default,omitempty" json:"is_default,omitempty" xml:"is_default,omitempty"`
	// Permissions assigned to this role
	Permissions []*PermissionResponseResponseBody `form:"permissions,omitempty" json:"permissions,omitempty" xml:"permissions,omitempty"`
	// Creation timestamp
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// Last update timestamp
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// CreateRoleRequestRequestBody is used to define fields on request body types.
type CreateRoleRequestRequestBody struct {
	// Role name
	Name string `form:"name" json:"name" xml:"name"`
	// Role description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Organization ID
	OrganizationID *string `form:"organization_id,omitempty" json:"organization_id,omitempty" xml:"organization_id,omitempty"`
	// Whether this is a default role for new users
	IsDefault bool `form:"is_default" json:"is_default" xml:"is_default"`
}

// UpdateRoleRequestRequestBody is used to define fields on request body types.
type UpdateRoleRequestRequestBody struct {
	// Role name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Role description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Whether this is a default role for new users
	IsDefault *bool `form:"is_default,omitempty" json:"is_default,omitempty" xml:"is_default,omitempty"`
}

// AddRolePermissionRequestRequestBody is used to define fields on request body
// types.
type AddRolePermissionRequestRequestBody struct {
	// Permission ID
	PermissionID string `form:"permission_id" json:"permission_id" xml:"permission_id"`
}

// NewCreatePermissionRequestBody builds the HTTP request body from the payload
// of the "create_permission" endpoint of the "rbac" service.
func NewCreatePermissionRequestBody(p *rbac.CreatePermissionPayload) *CreatePermissionRequestBody {
	body := &CreatePermissionRequestBody{}
	if p.Permission != nil {
		body.Permission = marshalRbacCreatePermissionRequestToCreatePermissionRequestRequestBody(p.Permission)
	}
	return body
}

// NewUpdatePermissionRequestBody builds the HTTP request body from the payload
// of the "update_permission" endpoint of the "rbac" service.
func NewUpdatePermissionRequestBody(p *rbac.UpdatePermissionPayload) *UpdatePermissionRequestBody {
	body := &UpdatePermissionRequestBody{}
	if p.Permission != nil {
		body.Permission = marshalRbacUpdatePermissionRequestToUpdatePermissionRequestRequestBody(p.Permission)
	}
	return body
}

// NewCreateRoleRequestBody builds the HTTP request body from the payload of
// the "create_role" endpoint of the "rbac" service.
func NewCreateRoleRequestBody(p *rbac.CreateRolePayload) *CreateRoleRequestBody {
	body := &CreateRoleRequestBody{}
	if p.Role != nil {
		body.Role = marshalRbacCreateRoleRequestToCreateRoleRequestRequestBody(p.Role)
	}
	return body
}

// NewUpdateRoleRequestBody builds the HTTP request body from the payload of
// the "update_role" endpoint of the "rbac" service.
func NewUpdateRoleRequestBody(p *rbac.UpdateRolePayload) *UpdateRoleRequestBody {
	body := &UpdateRoleRequestBody{}
	if p.Role != nil {
		body.Role = marshalRbacUpdateRoleRequestToUpdateRoleRequestRequestBody(p.Role)
	}
	return body
}

// NewAddRolePermissionRequestBody builds the HTTP request body from the
// payload of the "add_role_permission" endpoint of the "rbac" service.
func NewAddRolePermissionRequestBody(p *rbac.AddRolePermissionPayload) *AddRolePermissionRequestBody {
	body := &AddRolePermissionRequestBody{}
	if p.Permission != nil {
		body.Permission = marshalRbacAddRolePermissionRequestToAddRolePermissionRequestRequestBody(p.Permission)
	}
	return body
}

// NewListPermissionsResponseOK builds a "rbac" service "list_permissions"
// endpoint result from a HTTP "OK" response.
func NewListPermissionsResponseOK(body *ListPermissionsResponseBody) *rbac.ListPermissionsResponse {
	v := &rbac.ListPermissionsResponse{}
	v.Data = make([]*designtypes.PermissionResponse, len(body.Data))
	for i, val := range body.Data {
		v.Data[i] = unmarshalPermissionResponseResponseBodyToDesigntypesPermissionResponse(val)
	}
	v.Pagination = unmarshalPaginationResponseResponseBodyToDesigntypesPaginationResponse(body.Pagination)

	return v
}

// NewListPermissionsBadRequest builds a rbac service list_permissions endpoint
// bad_request error.
func NewListPermissionsBadRequest(body *ListPermissionsBadRequestResponseBody) *rbac.BadRequestError {
	v := &rbac.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewListPermissionsConflict builds a rbac service list_permissions endpoint
// conflict error.
func NewListPermissionsConflict(body *ListPermissionsConflictResponseBody) *rbac.ConflictError {
	v := &rbac.ConflictError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewListPermissionsForbidden builds a rbac service list_permissions endpoint
// forbidden error.
func NewListPermissionsForbidden(body *ListPermissionsForbiddenResponseBody) *rbac.ForbiddenError {
	v := &rbac.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewListPermissionsInternalError builds a rbac service list_permissions
// endpoint internal_error error.
func NewListPermissionsInternalError(body *ListPermissionsInternalErrorResponseBody) *rbac.InternalServerError {
	v := &rbac.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewListPermissionsNotFound builds a rbac service list_permissions endpoint
// not_found error.
func NewListPermissionsNotFound(body *ListPermissionsNotFoundResponseBody) *rbac.NotFoundError {
	v := &rbac.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewListPermissionsUnauthorized builds a rbac service list_permissions
// endpoint unauthorized error.
func NewListPermissionsUnauthorized(body *ListPermissionsUnauthorizedResponseBody) *rbac.UnauthorizedError {
	v := &rbac.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewCreatePermissionPermissionResponseCreated builds a "rbac" service
// "create_permission" endpoint result from a HTTP "Created" response.
func NewCreatePermissionPermissionResponseCreated(body *CreatePermissionResponseBody) *designtypes.PermissionResponse {
	v := &designtypes.PermissionResponse{
		ID:          *body.ID,
		Name:        *body.Name,
		Description: *body.Description,
		Resource:    *body.Resource,
		Action:      *body.Action,
		Conditions:  body.Conditions,
		System:      *body.System,
		CreatedAt:   *body.CreatedAt,
		UpdatedAt:   body.UpdatedAt,
	}

	return v
}

// NewCreatePermissionBadRequest builds a rbac service create_permission
// endpoint bad_request error.
func NewCreatePermissionBadRequest(body *CreatePermissionBadRequestResponseBody) *rbac.BadRequestError {
	v := &rbac.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewCreatePermissionConflict builds a rbac service create_permission endpoint
// conflict error.
func NewCreatePermissionConflict(body *CreatePermissionConflictResponseBody) *rbac.ConflictError {
	v := &rbac.ConflictError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewCreatePermissionForbidden builds a rbac service create_permission
// endpoint forbidden error.
func NewCreatePermissionForbidden(body *CreatePermissionForbiddenResponseBody) *rbac.ForbiddenError {
	v := &rbac.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewCreatePermissionInternalError builds a rbac service create_permission
// endpoint internal_error error.
func NewCreatePermissionInternalError(body *CreatePermissionInternalErrorResponseBody) *rbac.InternalServerError {
	v := &rbac.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewCreatePermissionNotFound builds a rbac service create_permission endpoint
// not_found error.
func NewCreatePermissionNotFound(body *CreatePermissionNotFoundResponseBody) *rbac.NotFoundError {
	v := &rbac.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewCreatePermissionUnauthorized builds a rbac service create_permission
// endpoint unauthorized error.
func NewCreatePermissionUnauthorized(body *CreatePermissionUnauthorizedResponseBody) *rbac.UnauthorizedError {
	v := &rbac.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewGetPermissionPermissionResponseOK builds a "rbac" service
// "get_permission" endpoint result from a HTTP "OK" response.
func NewGetPermissionPermissionResponseOK(body *GetPermissionResponseBody) *designtypes.PermissionResponse {
	v := &designtypes.PermissionResponse{
		ID:          *body.ID,
		Name:        *body.Name,
		Description: *body.Description,
		Resource:    *body.Resource,
		Action:      *body.Action,
		Conditions:  body.Conditions,
		System:      *body.System,
		CreatedAt:   *body.CreatedAt,
		UpdatedAt:   body.UpdatedAt,
	}

	return v
}

// NewGetPermissionBadRequest builds a rbac service get_permission endpoint
// bad_request error.
func NewGetPermissionBadRequest(body *GetPermissionBadRequestResponseBody) *rbac.BadRequestError {
	v := &rbac.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewGetPermissionConflict builds a rbac service get_permission endpoint
// conflict error.
func NewGetPermissionConflict(body *GetPermissionConflictResponseBody) *rbac.ConflictError {
	v := &rbac.ConflictError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewGetPermissionForbidden builds a rbac service get_permission endpoint
// forbidden error.
func NewGetPermissionForbidden(body *GetPermissionForbiddenResponseBody) *rbac.ForbiddenError {
	v := &rbac.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewGetPermissionInternalError builds a rbac service get_permission endpoint
// internal_error error.
func NewGetPermissionInternalError(body *GetPermissionInternalErrorResponseBody) *rbac.InternalServerError {
	v := &rbac.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewGetPermissionNotFound builds a rbac service get_permission endpoint
// not_found error.
func NewGetPermissionNotFound(body *GetPermissionNotFoundResponseBody) *rbac.NotFoundError {
	v := &rbac.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewGetPermissionUnauthorized builds a rbac service get_permission endpoint
// unauthorized error.
func NewGetPermissionUnauthorized(body *GetPermissionUnauthorizedResponseBody) *rbac.UnauthorizedError {
	v := &rbac.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewUpdatePermissionPermissionResponseOK builds a "rbac" service
// "update_permission" endpoint result from a HTTP "OK" response.
func NewUpdatePermissionPermissionResponseOK(body *UpdatePermissionResponseBody) *designtypes.PermissionResponse {
	v := &designtypes.PermissionResponse{
		ID:          *body.ID,
		Name:        *body.Name,
		Description: *body.Description,
		Resource:    *body.Resource,
		Action:      *body.Action,
		Conditions:  body.Conditions,
		System:      *body.System,
		CreatedAt:   *body.CreatedAt,
		UpdatedAt:   body.UpdatedAt,
	}

	return v
}

// NewUpdatePermissionBadRequest builds a rbac service update_permission
// endpoint bad_request error.
func NewUpdatePermissionBadRequest(body *UpdatePermissionBadRequestResponseBody) *rbac.BadRequestError {
	v := &rbac.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewUpdatePermissionConflict builds a rbac service update_permission endpoint
// conflict error.
func NewUpdatePermissionConflict(body *UpdatePermissionConflictResponseBody) *rbac.ConflictError {
	v := &rbac.ConflictError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewUpdatePermissionForbidden builds a rbac service update_permission
// endpoint forbidden error.
func NewUpdatePermissionForbidden(body *UpdatePermissionForbiddenResponseBody) *rbac.ForbiddenError {
	v := &rbac.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewUpdatePermissionInternalError builds a rbac service update_permission
// endpoint internal_error error.
func NewUpdatePermissionInternalError(body *UpdatePermissionInternalErrorResponseBody) *rbac.InternalServerError {
	v := &rbac.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewUpdatePermissionNotFound builds a rbac service update_permission endpoint
// not_found error.
func NewUpdatePermissionNotFound(body *UpdatePermissionNotFoundResponseBody) *rbac.NotFoundError {
	v := &rbac.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewUpdatePermissionUnauthorized builds a rbac service update_permission
// endpoint unauthorized error.
func NewUpdatePermissionUnauthorized(body *UpdatePermissionUnauthorizedResponseBody) *rbac.UnauthorizedError {
	v := &rbac.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewDeletePermissionBadRequest builds a rbac service delete_permission
// endpoint bad_request error.
func NewDeletePermissionBadRequest(body *DeletePermissionBadRequestResponseBody) *rbac.BadRequestError {
	v := &rbac.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewDeletePermissionConflict builds a rbac service delete_permission endpoint
// conflict error.
func NewDeletePermissionConflict(body *DeletePermissionConflictResponseBody) *rbac.ConflictError {
	v := &rbac.ConflictError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewDeletePermissionForbidden builds a rbac service delete_permission
// endpoint forbidden error.
func NewDeletePermissionForbidden(body *DeletePermissionForbiddenResponseBody) *rbac.ForbiddenError {
	v := &rbac.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewDeletePermissionInternalError builds a rbac service delete_permission
// endpoint internal_error error.
func NewDeletePermissionInternalError(body *DeletePermissionInternalErrorResponseBody) *rbac.InternalServerError {
	v := &rbac.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewDeletePermissionNotFound builds a rbac service delete_permission endpoint
// not_found error.
func NewDeletePermissionNotFound(body *DeletePermissionNotFoundResponseBody) *rbac.NotFoundError {
	v := &rbac.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewDeletePermissionUnauthorized builds a rbac service delete_permission
// endpoint unauthorized error.
func NewDeletePermissionUnauthorized(body *DeletePermissionUnauthorizedResponseBody) *rbac.UnauthorizedError {
	v := &rbac.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewListRolesResultOK builds a "rbac" service "list_roles" endpoint result
// from a HTTP "OK" response.
func NewListRolesResultOK(body *ListRolesResponseBody) *rbac.ListRolesResult {
	v := &rbac.ListRolesResult{}
	v.Data = make([]*designtypes.RoleResponse, len(body.Data))
	for i, val := range body.Data {
		v.Data[i] = unmarshalRoleResponseResponseBodyToDesigntypesRoleResponse(val)
	}
	v.Pagination = unmarshalPaginationResponseResponseBodyToDesigntypesPaginationResponse(body.Pagination)

	return v
}

// NewListRolesBadRequest builds a rbac service list_roles endpoint bad_request
// error.
func NewListRolesBadRequest(body *ListRolesBadRequestResponseBody) *rbac.BadRequestError {
	v := &rbac.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewListRolesConflict builds a rbac service list_roles endpoint conflict
// error.
func NewListRolesConflict(body *ListRolesConflictResponseBody) *rbac.ConflictError {
	v := &rbac.ConflictError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewListRolesForbidden builds a rbac service list_roles endpoint forbidden
// error.
func NewListRolesForbidden(body *ListRolesForbiddenResponseBody) *rbac.ForbiddenError {
	v := &rbac.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewListRolesInternalError builds a rbac service list_roles endpoint
// internal_error error.
func NewListRolesInternalError(body *ListRolesInternalErrorResponseBody) *rbac.InternalServerError {
	v := &rbac.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewListRolesNotFound builds a rbac service list_roles endpoint not_found
// error.
func NewListRolesNotFound(body *ListRolesNotFoundResponseBody) *rbac.NotFoundError {
	v := &rbac.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewListRolesUnauthorized builds a rbac service list_roles endpoint
// unauthorized error.
func NewListRolesUnauthorized(body *ListRolesUnauthorizedResponseBody) *rbac.UnauthorizedError {
	v := &rbac.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewCreateRoleRoleResponseCreated builds a "rbac" service "create_role"
// endpoint result from a HTTP "Created" response.
func NewCreateRoleRoleResponseCreated(body *CreateRoleResponseBody) *designtypes.RoleResponse {
	v := &designtypes.RoleResponse{
		ID:             *body.ID,
		Name:           *body.Name,
		Description:    body.Description,
		OrganizationID: body.OrganizationID,
		System:         *body.System,
		IsDefault:      *body.IsDefault,
		CreatedAt:      *body.CreatedAt,
		UpdatedAt:      body.UpdatedAt,
	}
	if body.Permissions != nil {
		v.Permissions = make([]*designtypes.PermissionResponse, len(body.Permissions))
		for i, val := range body.Permissions {
			v.Permissions[i] = unmarshalPermissionResponseResponseBodyToDesigntypesPermissionResponse(val)
		}
	}

	return v
}

// NewCreateRoleBadRequest builds a rbac service create_role endpoint
// bad_request error.
func NewCreateRoleBadRequest(body *CreateRoleBadRequestResponseBody) *rbac.BadRequestError {
	v := &rbac.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewCreateRoleConflict builds a rbac service create_role endpoint conflict
// error.
func NewCreateRoleConflict(body *CreateRoleConflictResponseBody) *rbac.ConflictError {
	v := &rbac.ConflictError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewCreateRoleForbidden builds a rbac service create_role endpoint forbidden
// error.
func NewCreateRoleForbidden(body *CreateRoleForbiddenResponseBody) *rbac.ForbiddenError {
	v := &rbac.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewCreateRoleInternalError builds a rbac service create_role endpoint
// internal_error error.
func NewCreateRoleInternalError(body *CreateRoleInternalErrorResponseBody) *rbac.InternalServerError {
	v := &rbac.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewCreateRoleNotFound builds a rbac service create_role endpoint not_found
// error.
func NewCreateRoleNotFound(body *CreateRoleNotFoundResponseBody) *rbac.NotFoundError {
	v := &rbac.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewCreateRoleUnauthorized builds a rbac service create_role endpoint
// unauthorized error.
func NewCreateRoleUnauthorized(body *CreateRoleUnauthorizedResponseBody) *rbac.UnauthorizedError {
	v := &rbac.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewGetRoleRoleResponseOK builds a "rbac" service "get_role" endpoint result
// from a HTTP "OK" response.
func NewGetRoleRoleResponseOK(body *GetRoleResponseBody) *designtypes.RoleResponse {
	v := &designtypes.RoleResponse{
		ID:             *body.ID,
		Name:           *body.Name,
		Description:    body.Description,
		OrganizationID: body.OrganizationID,
		System:         *body.System,
		IsDefault:      *body.IsDefault,
		CreatedAt:      *body.CreatedAt,
		UpdatedAt:      body.UpdatedAt,
	}
	if body.Permissions != nil {
		v.Permissions = make([]*designtypes.PermissionResponse, len(body.Permissions))
		for i, val := range body.Permissions {
			v.Permissions[i] = unmarshalPermissionResponseResponseBodyToDesigntypesPermissionResponse(val)
		}
	}

	return v
}

// NewGetRoleBadRequest builds a rbac service get_role endpoint bad_request
// error.
func NewGetRoleBadRequest(body *GetRoleBadRequestResponseBody) *rbac.BadRequestError {
	v := &rbac.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewGetRoleConflict builds a rbac service get_role endpoint conflict error.
func NewGetRoleConflict(body *GetRoleConflictResponseBody) *rbac.ConflictError {
	v := &rbac.ConflictError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewGetRoleForbidden builds a rbac service get_role endpoint forbidden error.
func NewGetRoleForbidden(body *GetRoleForbiddenResponseBody) *rbac.ForbiddenError {
	v := &rbac.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewGetRoleInternalError builds a rbac service get_role endpoint
// internal_error error.
func NewGetRoleInternalError(body *GetRoleInternalErrorResponseBody) *rbac.InternalServerError {
	v := &rbac.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewGetRoleNotFound builds a rbac service get_role endpoint not_found error.
func NewGetRoleNotFound(body *GetRoleNotFoundResponseBody) *rbac.NotFoundError {
	v := &rbac.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewGetRoleUnauthorized builds a rbac service get_role endpoint unauthorized
// error.
func NewGetRoleUnauthorized(body *GetRoleUnauthorizedResponseBody) *rbac.UnauthorizedError {
	v := &rbac.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewUpdateRoleRoleResponseOK builds a "rbac" service "update_role" endpoint
// result from a HTTP "OK" response.
func NewUpdateRoleRoleResponseOK(body *UpdateRoleResponseBody) *designtypes.RoleResponse {
	v := &designtypes.RoleResponse{
		ID:             *body.ID,
		Name:           *body.Name,
		Description:    body.Description,
		OrganizationID: body.OrganizationID,
		System:         *body.System,
		IsDefault:      *body.IsDefault,
		CreatedAt:      *body.CreatedAt,
		UpdatedAt:      body.UpdatedAt,
	}
	if body.Permissions != nil {
		v.Permissions = make([]*designtypes.PermissionResponse, len(body.Permissions))
		for i, val := range body.Permissions {
			v.Permissions[i] = unmarshalPermissionResponseResponseBodyToDesigntypesPermissionResponse(val)
		}
	}

	return v
}

// NewUpdateRoleBadRequest builds a rbac service update_role endpoint
// bad_request error.
func NewUpdateRoleBadRequest(body *UpdateRoleBadRequestResponseBody) *rbac.BadRequestError {
	v := &rbac.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewUpdateRoleConflict builds a rbac service update_role endpoint conflict
// error.
func NewUpdateRoleConflict(body *UpdateRoleConflictResponseBody) *rbac.ConflictError {
	v := &rbac.ConflictError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewUpdateRoleForbidden builds a rbac service update_role endpoint forbidden
// error.
func NewUpdateRoleForbidden(body *UpdateRoleForbiddenResponseBody) *rbac.ForbiddenError {
	v := &rbac.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewUpdateRoleInternalError builds a rbac service update_role endpoint
// internal_error error.
func NewUpdateRoleInternalError(body *UpdateRoleInternalErrorResponseBody) *rbac.InternalServerError {
	v := &rbac.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewUpdateRoleNotFound builds a rbac service update_role endpoint not_found
// error.
func NewUpdateRoleNotFound(body *UpdateRoleNotFoundResponseBody) *rbac.NotFoundError {
	v := &rbac.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewUpdateRoleUnauthorized builds a rbac service update_role endpoint
// unauthorized error.
func NewUpdateRoleUnauthorized(body *UpdateRoleUnauthorizedResponseBody) *rbac.UnauthorizedError {
	v := &rbac.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewDeleteRoleBadRequest builds a rbac service delete_role endpoint
// bad_request error.
func NewDeleteRoleBadRequest(body *DeleteRoleBadRequestResponseBody) *rbac.BadRequestError {
	v := &rbac.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewDeleteRoleConflict builds a rbac service delete_role endpoint conflict
// error.
func NewDeleteRoleConflict(body *DeleteRoleConflictResponseBody) *rbac.ConflictError {
	v := &rbac.ConflictError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewDeleteRoleForbidden builds a rbac service delete_role endpoint forbidden
// error.
func NewDeleteRoleForbidden(body *DeleteRoleForbiddenResponseBody) *rbac.ForbiddenError {
	v := &rbac.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewDeleteRoleInternalError builds a rbac service delete_role endpoint
// internal_error error.
func NewDeleteRoleInternalError(body *DeleteRoleInternalErrorResponseBody) *rbac.InternalServerError {
	v := &rbac.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewDeleteRoleNotFound builds a rbac service delete_role endpoint not_found
// error.
func NewDeleteRoleNotFound(body *DeleteRoleNotFoundResponseBody) *rbac.NotFoundError {
	v := &rbac.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewDeleteRoleUnauthorized builds a rbac service delete_role endpoint
// unauthorized error.
func NewDeleteRoleUnauthorized(body *DeleteRoleUnauthorizedResponseBody) *rbac.UnauthorizedError {
	v := &rbac.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewListRolePermissionsResultOK builds a "rbac" service
// "list_role_permissions" endpoint result from a HTTP "OK" response.
func NewListRolePermissionsResultOK(body *ListRolePermissionsResponseBody) *rbac.ListRolePermissionsResult {
	v := &rbac.ListRolePermissionsResult{}
	v.Permissions = make([]*designtypes.PermissionResponse, len(body.Permissions))
	for i, val := range body.Permissions {
		v.Permissions[i] = unmarshalPermissionResponseResponseBodyToDesigntypesPermissionResponse(val)
	}

	return v
}

// NewListRolePermissionsBadRequest builds a rbac service list_role_permissions
// endpoint bad_request error.
func NewListRolePermissionsBadRequest(body *ListRolePermissionsBadRequestResponseBody) *rbac.BadRequestError {
	v := &rbac.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewListRolePermissionsConflict builds a rbac service list_role_permissions
// endpoint conflict error.
func NewListRolePermissionsConflict(body *ListRolePermissionsConflictResponseBody) *rbac.ConflictError {
	v := &rbac.ConflictError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewListRolePermissionsForbidden builds a rbac service list_role_permissions
// endpoint forbidden error.
func NewListRolePermissionsForbidden(body *ListRolePermissionsForbiddenResponseBody) *rbac.ForbiddenError {
	v := &rbac.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewListRolePermissionsInternalError builds a rbac service
// list_role_permissions endpoint internal_error error.
func NewListRolePermissionsInternalError(body *ListRolePermissionsInternalErrorResponseBody) *rbac.InternalServerError {
	v := &rbac.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewListRolePermissionsNotFound builds a rbac service list_role_permissions
// endpoint not_found error.
func NewListRolePermissionsNotFound(body *ListRolePermissionsNotFoundResponseBody) *rbac.NotFoundError {
	v := &rbac.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewListRolePermissionsUnauthorized builds a rbac service
// list_role_permissions endpoint unauthorized error.
func NewListRolePermissionsUnauthorized(body *ListRolePermissionsUnauthorizedResponseBody) *rbac.UnauthorizedError {
	v := &rbac.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewAddRolePermissionResultOK builds a "rbac" service "add_role_permission"
// endpoint result from a HTTP "OK" response.
func NewAddRolePermissionResultOK(body *AddRolePermissionResponseBody) *rbac.AddRolePermissionResult {
	v := &rbac.AddRolePermissionResult{
		Message: *body.Message,
	}

	return v
}

// NewAddRolePermissionBadRequest builds a rbac service add_role_permission
// endpoint bad_request error.
func NewAddRolePermissionBadRequest(body *AddRolePermissionBadRequestResponseBody) *rbac.BadRequestError {
	v := &rbac.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewAddRolePermissionConflict builds a rbac service add_role_permission
// endpoint conflict error.
func NewAddRolePermissionConflict(body *AddRolePermissionConflictResponseBody) *rbac.ConflictError {
	v := &rbac.ConflictError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewAddRolePermissionForbidden builds a rbac service add_role_permission
// endpoint forbidden error.
func NewAddRolePermissionForbidden(body *AddRolePermissionForbiddenResponseBody) *rbac.ForbiddenError {
	v := &rbac.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewAddRolePermissionInternalError builds a rbac service add_role_permission
// endpoint internal_error error.
func NewAddRolePermissionInternalError(body *AddRolePermissionInternalErrorResponseBody) *rbac.InternalServerError {
	v := &rbac.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewAddRolePermissionNotFound builds a rbac service add_role_permission
// endpoint not_found error.
func NewAddRolePermissionNotFound(body *AddRolePermissionNotFoundResponseBody) *rbac.NotFoundError {
	v := &rbac.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewAddRolePermissionUnauthorized builds a rbac service add_role_permission
// endpoint unauthorized error.
func NewAddRolePermissionUnauthorized(body *AddRolePermissionUnauthorizedResponseBody) *rbac.UnauthorizedError {
	v := &rbac.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewRemoveRolePermissionBadRequest builds a rbac service
// remove_role_permission endpoint bad_request error.
func NewRemoveRolePermissionBadRequest(body *RemoveRolePermissionBadRequestResponseBody) *rbac.BadRequestError {
	v := &rbac.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewRemoveRolePermissionConflict builds a rbac service remove_role_permission
// endpoint conflict error.
func NewRemoveRolePermissionConflict(body *RemoveRolePermissionConflictResponseBody) *rbac.ConflictError {
	v := &rbac.ConflictError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewRemoveRolePermissionForbidden builds a rbac service
// remove_role_permission endpoint forbidden error.
func NewRemoveRolePermissionForbidden(body *RemoveRolePermissionForbiddenResponseBody) *rbac.ForbiddenError {
	v := &rbac.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewRemoveRolePermissionInternalError builds a rbac service
// remove_role_permission endpoint internal_error error.
func NewRemoveRolePermissionInternalError(body *RemoveRolePermissionInternalErrorResponseBody) *rbac.InternalServerError {
	v := &rbac.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewRemoveRolePermissionNotFound builds a rbac service remove_role_permission
// endpoint not_found error.
func NewRemoveRolePermissionNotFound(body *RemoveRolePermissionNotFoundResponseBody) *rbac.NotFoundError {
	v := &rbac.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewRemoveRolePermissionUnauthorized builds a rbac service
// remove_role_permission endpoint unauthorized error.
func NewRemoveRolePermissionUnauthorized(body *RemoveRolePermissionUnauthorizedResponseBody) *rbac.UnauthorizedError {
	v := &rbac.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewCheckPermissionResultOK builds a "rbac" service "check_permission"
// endpoint result from a HTTP "OK" response.
func NewCheckPermissionResultOK(body *CheckPermissionResponseBody) *rbac.CheckPermissionResult {
	v := &rbac.CheckPermissionResult{
		HasPermission: *body.HasPermission,
	}

	return v
}

// NewCheckPermissionBadRequest builds a rbac service check_permission endpoint
// bad_request error.
func NewCheckPermissionBadRequest(body *CheckPermissionBadRequestResponseBody) *rbac.BadRequestError {
	v := &rbac.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewCheckPermissionConflict builds a rbac service check_permission endpoint
// conflict error.
func NewCheckPermissionConflict(body *CheckPermissionConflictResponseBody) *rbac.ConflictError {
	v := &rbac.ConflictError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewCheckPermissionForbidden builds a rbac service check_permission endpoint
// forbidden error.
func NewCheckPermissionForbidden(body *CheckPermissionForbiddenResponseBody) *rbac.ForbiddenError {
	v := &rbac.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewCheckPermissionInternalError builds a rbac service check_permission
// endpoint internal_error error.
func NewCheckPermissionInternalError(body *CheckPermissionInternalErrorResponseBody) *rbac.InternalServerError {
	v := &rbac.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewCheckPermissionNotFound builds a rbac service check_permission endpoint
// not_found error.
func NewCheckPermissionNotFound(body *CheckPermissionNotFoundResponseBody) *rbac.NotFoundError {
	v := &rbac.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewCheckPermissionUnauthorized builds a rbac service check_permission
// endpoint unauthorized error.
func NewCheckPermissionUnauthorized(body *CheckPermissionUnauthorizedResponseBody) *rbac.UnauthorizedError {
	v := &rbac.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewCheckRoleResultOK builds a "rbac" service "check_role" endpoint result
// from a HTTP "OK" response.
func NewCheckRoleResultOK(body *CheckRoleResponseBody) *rbac.CheckRoleResult {
	v := &rbac.CheckRoleResult{
		HasRole: *body.HasRole,
	}

	return v
}

// NewCheckRoleBadRequest builds a rbac service check_role endpoint bad_request
// error.
func NewCheckRoleBadRequest(body *CheckRoleBadRequestResponseBody) *rbac.BadRequestError {
	v := &rbac.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewCheckRoleConflict builds a rbac service check_role endpoint conflict
// error.
func NewCheckRoleConflict(body *CheckRoleConflictResponseBody) *rbac.ConflictError {
	v := &rbac.ConflictError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewCheckRoleForbidden builds a rbac service check_role endpoint forbidden
// error.
func NewCheckRoleForbidden(body *CheckRoleForbiddenResponseBody) *rbac.ForbiddenError {
	v := &rbac.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewCheckRoleInternalError builds a rbac service check_role endpoint
// internal_error error.
func NewCheckRoleInternalError(body *CheckRoleInternalErrorResponseBody) *rbac.InternalServerError {
	v := &rbac.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewCheckRoleNotFound builds a rbac service check_role endpoint not_found
// error.
func NewCheckRoleNotFound(body *CheckRoleNotFoundResponseBody) *rbac.NotFoundError {
	v := &rbac.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewCheckRoleUnauthorized builds a rbac service check_role endpoint
// unauthorized error.
func NewCheckRoleUnauthorized(body *CheckRoleUnauthorizedResponseBody) *rbac.UnauthorizedError {
	v := &rbac.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// ValidateListPermissionsResponseBody runs the validations defined on
// list_permissions_response_body
func ValidateListPermissionsResponseBody(body *ListPermissionsResponseBody) (err error) {
	if body.Data == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("data", "body"))
	}
	if body.Pagination == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("pagination", "body"))
	}
	for _, e := range body.Data {
		if e != nil {
			if err2 := ValidatePermissionResponseResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if body.Pagination != nil {
		if err2 := ValidatePaginationResponseResponseBody(body.Pagination); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateCreatePermissionResponseBody runs the validations defined on
// create_permission_response_body
func ValidateCreatePermissionResponseBody(body *CreatePermissionResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.Resource == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("resource", "body"))
	}
	if body.Action == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("action", "body"))
	}
	if body.System == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("system", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	return
}

// ValidateGetPermissionResponseBody runs the validations defined on
// get_permission_response_body
func ValidateGetPermissionResponseBody(body *GetPermissionResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.Resource == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("resource", "body"))
	}
	if body.Action == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("action", "body"))
	}
	if body.System == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("system", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	return
}

// ValidateUpdatePermissionResponseBody runs the validations defined on
// update_permission_response_body
func ValidateUpdatePermissionResponseBody(body *UpdatePermissionResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.Resource == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("resource", "body"))
	}
	if body.Action == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("action", "body"))
	}
	if body.System == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("system", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	return
}

// ValidateListRolesResponseBody runs the validations defined on
// list_roles_response_body
func ValidateListRolesResponseBody(body *ListRolesResponseBody) (err error) {
	if body.Data == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("data", "body"))
	}
	if body.Pagination == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("pagination", "body"))
	}
	for _, e := range body.Data {
		if e != nil {
			if err2 := ValidateRoleResponseResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if body.Pagination != nil {
		if err2 := ValidatePaginationResponseResponseBody(body.Pagination); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateCreateRoleResponseBody runs the validations defined on
// create_role_response_body
func ValidateCreateRoleResponseBody(body *CreateRoleResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.System == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("system", "body"))
	}
	if body.IsDefault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("is_default", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	for _, e := range body.Permissions {
		if e != nil {
			if err2 := ValidatePermissionResponseResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateGetRoleResponseBody runs the validations defined on
// get_role_response_body
func ValidateGetRoleResponseBody(body *GetRoleResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.System == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("system", "body"))
	}
	if body.IsDefault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("is_default", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	for _, e := range body.Permissions {
		if e != nil {
			if err2 := ValidatePermissionResponseResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateUpdateRoleResponseBody runs the validations defined on
// update_role_response_body
func ValidateUpdateRoleResponseBody(body *UpdateRoleResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.System == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("system", "body"))
	}
	if body.IsDefault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("is_default", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	for _, e := range body.Permissions {
		if e != nil {
			if err2 := ValidatePermissionResponseResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateListRolePermissionsResponseBody runs the validations defined on
// list_role_permissions_response_body
func ValidateListRolePermissionsResponseBody(body *ListRolePermissionsResponseBody) (err error) {
	if body.Permissions == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("permissions", "body"))
	}
	for _, e := range body.Permissions {
		if e != nil {
			if err2 := ValidatePermissionResponseResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateAddRolePermissionResponseBody runs the validations defined on
// add_role_permission_response_body
func ValidateAddRolePermissionResponseBody(body *AddRolePermissionResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCheckPermissionResponseBody runs the validations defined on
// check_permission_response_body
func ValidateCheckPermissionResponseBody(body *CheckPermissionResponseBody) (err error) {
	if body.HasPermission == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("has_permission", "body"))
	}
	return
}

// ValidateCheckRoleResponseBody runs the validations defined on
// check_role_response_body
func ValidateCheckRoleResponseBody(body *CheckRoleResponseBody) (err error) {
	if body.HasRole == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("has_role", "body"))
	}
	return
}

// ValidateListPermissionsBadRequestResponseBody runs the validations defined
// on list_permissions_bad_request_response_body
func ValidateListPermissionsBadRequestResponseBody(body *ListPermissionsBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateListPermissionsConflictResponseBody runs the validations defined on
// list_permissions_conflict_response_body
func ValidateListPermissionsConflictResponseBody(body *ListPermissionsConflictResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateListPermissionsForbiddenResponseBody runs the validations defined on
// list_permissions_forbidden_response_body
func ValidateListPermissionsForbiddenResponseBody(body *ListPermissionsForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateListPermissionsInternalErrorResponseBody runs the validations
// defined on list_permissions_internal_error_response_body
func ValidateListPermissionsInternalErrorResponseBody(body *ListPermissionsInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateListPermissionsNotFoundResponseBody runs the validations defined on
// list_permissions_not_found_response_body
func ValidateListPermissionsNotFoundResponseBody(body *ListPermissionsNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateListPermissionsUnauthorizedResponseBody runs the validations defined
// on list_permissions_unauthorized_response_body
func ValidateListPermissionsUnauthorizedResponseBody(body *ListPermissionsUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreatePermissionBadRequestResponseBody runs the validations defined
// on create_permission_bad_request_response_body
func ValidateCreatePermissionBadRequestResponseBody(body *CreatePermissionBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreatePermissionConflictResponseBody runs the validations defined on
// create_permission_conflict_response_body
func ValidateCreatePermissionConflictResponseBody(body *CreatePermissionConflictResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreatePermissionForbiddenResponseBody runs the validations defined
// on create_permission_forbidden_response_body
func ValidateCreatePermissionForbiddenResponseBody(body *CreatePermissionForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreatePermissionInternalErrorResponseBody runs the validations
// defined on create_permission_internal_error_response_body
func ValidateCreatePermissionInternalErrorResponseBody(body *CreatePermissionInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreatePermissionNotFoundResponseBody runs the validations defined on
// create_permission_not_found_response_body
func ValidateCreatePermissionNotFoundResponseBody(body *CreatePermissionNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreatePermissionUnauthorizedResponseBody runs the validations
// defined on create_permission_unauthorized_response_body
func ValidateCreatePermissionUnauthorizedResponseBody(body *CreatePermissionUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetPermissionBadRequestResponseBody runs the validations defined on
// get_permission_bad_request_response_body
func ValidateGetPermissionBadRequestResponseBody(body *GetPermissionBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetPermissionConflictResponseBody runs the validations defined on
// get_permission_conflict_response_body
func ValidateGetPermissionConflictResponseBody(body *GetPermissionConflictResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetPermissionForbiddenResponseBody runs the validations defined on
// get_permission_forbidden_response_body
func ValidateGetPermissionForbiddenResponseBody(body *GetPermissionForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetPermissionInternalErrorResponseBody runs the validations defined
// on get_permission_internal_error_response_body
func ValidateGetPermissionInternalErrorResponseBody(body *GetPermissionInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetPermissionNotFoundResponseBody runs the validations defined on
// get_permission_not_found_response_body
func ValidateGetPermissionNotFoundResponseBody(body *GetPermissionNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetPermissionUnauthorizedResponseBody runs the validations defined
// on get_permission_unauthorized_response_body
func ValidateGetPermissionUnauthorizedResponseBody(body *GetPermissionUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdatePermissionBadRequestResponseBody runs the validations defined
// on update_permission_bad_request_response_body
func ValidateUpdatePermissionBadRequestResponseBody(body *UpdatePermissionBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdatePermissionConflictResponseBody runs the validations defined on
// update_permission_conflict_response_body
func ValidateUpdatePermissionConflictResponseBody(body *UpdatePermissionConflictResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdatePermissionForbiddenResponseBody runs the validations defined
// on update_permission_forbidden_response_body
func ValidateUpdatePermissionForbiddenResponseBody(body *UpdatePermissionForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdatePermissionInternalErrorResponseBody runs the validations
// defined on update_permission_internal_error_response_body
func ValidateUpdatePermissionInternalErrorResponseBody(body *UpdatePermissionInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdatePermissionNotFoundResponseBody runs the validations defined on
// update_permission_not_found_response_body
func ValidateUpdatePermissionNotFoundResponseBody(body *UpdatePermissionNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdatePermissionUnauthorizedResponseBody runs the validations
// defined on update_permission_unauthorized_response_body
func ValidateUpdatePermissionUnauthorizedResponseBody(body *UpdatePermissionUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeletePermissionBadRequestResponseBody runs the validations defined
// on delete_permission_bad_request_response_body
func ValidateDeletePermissionBadRequestResponseBody(body *DeletePermissionBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeletePermissionConflictResponseBody runs the validations defined on
// delete_permission_conflict_response_body
func ValidateDeletePermissionConflictResponseBody(body *DeletePermissionConflictResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeletePermissionForbiddenResponseBody runs the validations defined
// on delete_permission_forbidden_response_body
func ValidateDeletePermissionForbiddenResponseBody(body *DeletePermissionForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeletePermissionInternalErrorResponseBody runs the validations
// defined on delete_permission_internal_error_response_body
func ValidateDeletePermissionInternalErrorResponseBody(body *DeletePermissionInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeletePermissionNotFoundResponseBody runs the validations defined on
// delete_permission_not_found_response_body
func ValidateDeletePermissionNotFoundResponseBody(body *DeletePermissionNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeletePermissionUnauthorizedResponseBody runs the validations
// defined on delete_permission_unauthorized_response_body
func ValidateDeletePermissionUnauthorizedResponseBody(body *DeletePermissionUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateListRolesBadRequestResponseBody runs the validations defined on
// list_roles_bad_request_response_body
func ValidateListRolesBadRequestResponseBody(body *ListRolesBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateListRolesConflictResponseBody runs the validations defined on
// list_roles_conflict_response_body
func ValidateListRolesConflictResponseBody(body *ListRolesConflictResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateListRolesForbiddenResponseBody runs the validations defined on
// list_roles_forbidden_response_body
func ValidateListRolesForbiddenResponseBody(body *ListRolesForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateListRolesInternalErrorResponseBody runs the validations defined on
// list_roles_internal_error_response_body
func ValidateListRolesInternalErrorResponseBody(body *ListRolesInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateListRolesNotFoundResponseBody runs the validations defined on
// list_roles_not_found_response_body
func ValidateListRolesNotFoundResponseBody(body *ListRolesNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateListRolesUnauthorizedResponseBody runs the validations defined on
// list_roles_unauthorized_response_body
func ValidateListRolesUnauthorizedResponseBody(body *ListRolesUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateRoleBadRequestResponseBody runs the validations defined on
// create_role_bad_request_response_body
func ValidateCreateRoleBadRequestResponseBody(body *CreateRoleBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateRoleConflictResponseBody runs the validations defined on
// create_role_conflict_response_body
func ValidateCreateRoleConflictResponseBody(body *CreateRoleConflictResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateRoleForbiddenResponseBody runs the validations defined on
// create_role_forbidden_response_body
func ValidateCreateRoleForbiddenResponseBody(body *CreateRoleForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateRoleInternalErrorResponseBody runs the validations defined on
// create_role_internal_error_response_body
func ValidateCreateRoleInternalErrorResponseBody(body *CreateRoleInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateRoleNotFoundResponseBody runs the validations defined on
// create_role_not_found_response_body
func ValidateCreateRoleNotFoundResponseBody(body *CreateRoleNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateRoleUnauthorizedResponseBody runs the validations defined on
// create_role_unauthorized_response_body
func ValidateCreateRoleUnauthorizedResponseBody(body *CreateRoleUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetRoleBadRequestResponseBody runs the validations defined on
// get_role_bad_request_response_body
func ValidateGetRoleBadRequestResponseBody(body *GetRoleBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetRoleConflictResponseBody runs the validations defined on
// get_role_conflict_response_body
func ValidateGetRoleConflictResponseBody(body *GetRoleConflictResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetRoleForbiddenResponseBody runs the validations defined on
// get_role_forbidden_response_body
func ValidateGetRoleForbiddenResponseBody(body *GetRoleForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetRoleInternalErrorResponseBody runs the validations defined on
// get_role_internal_error_response_body
func ValidateGetRoleInternalErrorResponseBody(body *GetRoleInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetRoleNotFoundResponseBody runs the validations defined on
// get_role_not_found_response_body
func ValidateGetRoleNotFoundResponseBody(body *GetRoleNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetRoleUnauthorizedResponseBody runs the validations defined on
// get_role_unauthorized_response_body
func ValidateGetRoleUnauthorizedResponseBody(body *GetRoleUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateRoleBadRequestResponseBody runs the validations defined on
// update_role_bad_request_response_body
func ValidateUpdateRoleBadRequestResponseBody(body *UpdateRoleBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateRoleConflictResponseBody runs the validations defined on
// update_role_conflict_response_body
func ValidateUpdateRoleConflictResponseBody(body *UpdateRoleConflictResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateRoleForbiddenResponseBody runs the validations defined on
// update_role_forbidden_response_body
func ValidateUpdateRoleForbiddenResponseBody(body *UpdateRoleForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateRoleInternalErrorResponseBody runs the validations defined on
// update_role_internal_error_response_body
func ValidateUpdateRoleInternalErrorResponseBody(body *UpdateRoleInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateRoleNotFoundResponseBody runs the validations defined on
// update_role_not_found_response_body
func ValidateUpdateRoleNotFoundResponseBody(body *UpdateRoleNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateRoleUnauthorizedResponseBody runs the validations defined on
// update_role_unauthorized_response_body
func ValidateUpdateRoleUnauthorizedResponseBody(body *UpdateRoleUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteRoleBadRequestResponseBody runs the validations defined on
// delete_role_bad_request_response_body
func ValidateDeleteRoleBadRequestResponseBody(body *DeleteRoleBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteRoleConflictResponseBody runs the validations defined on
// delete_role_conflict_response_body
func ValidateDeleteRoleConflictResponseBody(body *DeleteRoleConflictResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteRoleForbiddenResponseBody runs the validations defined on
// delete_role_forbidden_response_body
func ValidateDeleteRoleForbiddenResponseBody(body *DeleteRoleForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteRoleInternalErrorResponseBody runs the validations defined on
// delete_role_internal_error_response_body
func ValidateDeleteRoleInternalErrorResponseBody(body *DeleteRoleInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteRoleNotFoundResponseBody runs the validations defined on
// delete_role_not_found_response_body
func ValidateDeleteRoleNotFoundResponseBody(body *DeleteRoleNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteRoleUnauthorizedResponseBody runs the validations defined on
// delete_role_unauthorized_response_body
func ValidateDeleteRoleUnauthorizedResponseBody(body *DeleteRoleUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateListRolePermissionsBadRequestResponseBody runs the validations
// defined on list_role_permissions_bad_request_response_body
func ValidateListRolePermissionsBadRequestResponseBody(body *ListRolePermissionsBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateListRolePermissionsConflictResponseBody runs the validations defined
// on list_role_permissions_conflict_response_body
func ValidateListRolePermissionsConflictResponseBody(body *ListRolePermissionsConflictResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateListRolePermissionsForbiddenResponseBody runs the validations
// defined on list_role_permissions_forbidden_response_body
func ValidateListRolePermissionsForbiddenResponseBody(body *ListRolePermissionsForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateListRolePermissionsInternalErrorResponseBody runs the validations
// defined on list_role_permissions_internal_error_response_body
func ValidateListRolePermissionsInternalErrorResponseBody(body *ListRolePermissionsInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateListRolePermissionsNotFoundResponseBody runs the validations defined
// on list_role_permissions_not_found_response_body
func ValidateListRolePermissionsNotFoundResponseBody(body *ListRolePermissionsNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateListRolePermissionsUnauthorizedResponseBody runs the validations
// defined on list_role_permissions_unauthorized_response_body
func ValidateListRolePermissionsUnauthorizedResponseBody(body *ListRolePermissionsUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateAddRolePermissionBadRequestResponseBody runs the validations defined
// on add_role_permission_bad_request_response_body
func ValidateAddRolePermissionBadRequestResponseBody(body *AddRolePermissionBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateAddRolePermissionConflictResponseBody runs the validations defined
// on add_role_permission_conflict_response_body
func ValidateAddRolePermissionConflictResponseBody(body *AddRolePermissionConflictResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateAddRolePermissionForbiddenResponseBody runs the validations defined
// on add_role_permission_forbidden_response_body
func ValidateAddRolePermissionForbiddenResponseBody(body *AddRolePermissionForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateAddRolePermissionInternalErrorResponseBody runs the validations
// defined on add_role_permission_internal_error_response_body
func ValidateAddRolePermissionInternalErrorResponseBody(body *AddRolePermissionInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateAddRolePermissionNotFoundResponseBody runs the validations defined
// on add_role_permission_not_found_response_body
func ValidateAddRolePermissionNotFoundResponseBody(body *AddRolePermissionNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateAddRolePermissionUnauthorizedResponseBody runs the validations
// defined on add_role_permission_unauthorized_response_body
func ValidateAddRolePermissionUnauthorizedResponseBody(body *AddRolePermissionUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateRemoveRolePermissionBadRequestResponseBody runs the validations
// defined on remove_role_permission_bad_request_response_body
func ValidateRemoveRolePermissionBadRequestResponseBody(body *RemoveRolePermissionBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateRemoveRolePermissionConflictResponseBody runs the validations
// defined on remove_role_permission_conflict_response_body
func ValidateRemoveRolePermissionConflictResponseBody(body *RemoveRolePermissionConflictResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateRemoveRolePermissionForbiddenResponseBody runs the validations
// defined on remove_role_permission_forbidden_response_body
func ValidateRemoveRolePermissionForbiddenResponseBody(body *RemoveRolePermissionForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateRemoveRolePermissionInternalErrorResponseBody runs the validations
// defined on remove_role_permission_internal_error_response_body
func ValidateRemoveRolePermissionInternalErrorResponseBody(body *RemoveRolePermissionInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateRemoveRolePermissionNotFoundResponseBody runs the validations
// defined on remove_role_permission_not_found_response_body
func ValidateRemoveRolePermissionNotFoundResponseBody(body *RemoveRolePermissionNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateRemoveRolePermissionUnauthorizedResponseBody runs the validations
// defined on remove_role_permission_unauthorized_response_body
func ValidateRemoveRolePermissionUnauthorizedResponseBody(body *RemoveRolePermissionUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCheckPermissionBadRequestResponseBody runs the validations defined
// on check_permission_bad_request_response_body
func ValidateCheckPermissionBadRequestResponseBody(body *CheckPermissionBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCheckPermissionConflictResponseBody runs the validations defined on
// check_permission_conflict_response_body
func ValidateCheckPermissionConflictResponseBody(body *CheckPermissionConflictResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCheckPermissionForbiddenResponseBody runs the validations defined on
// check_permission_forbidden_response_body
func ValidateCheckPermissionForbiddenResponseBody(body *CheckPermissionForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCheckPermissionInternalErrorResponseBody runs the validations
// defined on check_permission_internal_error_response_body
func ValidateCheckPermissionInternalErrorResponseBody(body *CheckPermissionInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCheckPermissionNotFoundResponseBody runs the validations defined on
// check_permission_not_found_response_body
func ValidateCheckPermissionNotFoundResponseBody(body *CheckPermissionNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCheckPermissionUnauthorizedResponseBody runs the validations defined
// on check_permission_unauthorized_response_body
func ValidateCheckPermissionUnauthorizedResponseBody(body *CheckPermissionUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCheckRoleBadRequestResponseBody runs the validations defined on
// check_role_bad_request_response_body
func ValidateCheckRoleBadRequestResponseBody(body *CheckRoleBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCheckRoleConflictResponseBody runs the validations defined on
// check_role_conflict_response_body
func ValidateCheckRoleConflictResponseBody(body *CheckRoleConflictResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCheckRoleForbiddenResponseBody runs the validations defined on
// check_role_forbidden_response_body
func ValidateCheckRoleForbiddenResponseBody(body *CheckRoleForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCheckRoleInternalErrorResponseBody runs the validations defined on
// check_role_internal_error_response_body
func ValidateCheckRoleInternalErrorResponseBody(body *CheckRoleInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCheckRoleNotFoundResponseBody runs the validations defined on
// check_role_not_found_response_body
func ValidateCheckRoleNotFoundResponseBody(body *CheckRoleNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCheckRoleUnauthorizedResponseBody runs the validations defined on
// check_role_unauthorized_response_body
func ValidateCheckRoleUnauthorizedResponseBody(body *CheckRoleUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidatePermissionResponseResponseBody runs the validations defined on
// PermissionResponseResponseBody
func ValidatePermissionResponseResponseBody(body *PermissionResponseResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.Resource == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("resource", "body"))
	}
	if body.Action == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("action", "body"))
	}
	if body.System == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("system", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	return
}

// ValidatePaginationResponseResponseBody runs the validations defined on
// PaginationResponseResponseBody
func ValidatePaginationResponseResponseBody(body *PaginationResponseResponseBody) (err error) {
	if body.Total == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total", "body"))
	}
	if body.Offset == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("offset", "body"))
	}
	if body.Limit == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("limit", "body"))
	}
	return
}

// ValidateRoleResponseResponseBody runs the validations defined on
// RoleResponseResponseBody
func ValidateRoleResponseResponseBody(body *RoleResponseResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.System == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("system", "body"))
	}
	if body.IsDefault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("is_default", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	for _, e := range body.Permissions {
		if e != nil {
			if err2 := ValidatePermissionResponseResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}
