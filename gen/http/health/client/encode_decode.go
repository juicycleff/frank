// Code generated by goa v3.20.0, DO NOT EDIT.
//
// health HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/juicycleff/frank/design -o .

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	designtypes "github.com/juicycleff/frank/gen/designtypes"
	goahttp "goa.design/goa/v3/http"
)

// BuildCheckRequest instantiates a HTTP request object with method and path
// set to call the "health" service "check" endpoint
func (c *Client) BuildCheckRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CheckHealthPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("health", "check", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeCheckResponse returns a decoder for responses returned by the health
// check endpoint. restoreBody controls whether the response body should be
// restored after having been read.
func DecodeCheckResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body CheckOKResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("health", "check", err)
			}
			err = ValidateCheckOKResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("health", "check", err)
			}
			res := NewCheckHealthResponseOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("health", "check", resp.StatusCode, string(body))
		}
	}
}

// BuildReadyRequest instantiates a HTTP request object with method and path
// set to call the "health" service "ready" endpoint
func (c *Client) BuildReadyRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ReadyHealthPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("health", "ready", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeReadyResponse returns a decoder for responses returned by the health
// ready endpoint. restoreBody controls whether the response body should be
// restored after having been read.
func DecodeReadyResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ReadyOKResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("health", "ready", err)
			}
			err = ValidateReadyOKResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("health", "ready", err)
			}
			res := NewReadyResponseOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("health", "ready", resp.StatusCode, string(body))
		}
	}
}

// BuildVersionRequest instantiates a HTTP request object with method and path
// set to call the "health" service "version" endpoint
func (c *Client) BuildVersionRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: VersionHealthPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("health", "version", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeVersionResponse returns a decoder for responses returned by the health
// version endpoint. restoreBody controls whether the response body should be
// restored after having been read.
func DecodeVersionResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body VersionResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("health", "version", err)
			}
			err = ValidateVersionResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("health", "version", err)
			}
			res := NewVersionResultOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("health", "version", resp.StatusCode, string(body))
		}
	}
}

// BuildMetricsRequest instantiates a HTTP request object with method and path
// set to call the "health" service "metrics" endpoint
func (c *Client) BuildMetricsRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: MetricsHealthPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("health", "metrics", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeMetricsResponse returns a decoder for responses returned by the health
// metrics endpoint. restoreBody controls whether the response body should be
// restored after having been read.
func DecodeMetricsResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body MetricsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("health", "metrics", err)
			}
			err = ValidateMetricsResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("health", "metrics", err)
			}
			res := NewMetricsResultOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("health", "metrics", resp.StatusCode, string(body))
		}
	}
}

// BuildDebugRequest instantiates a HTTP request object with method and path
// set to call the "health" service "debug" endpoint
func (c *Client) BuildDebugRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DebugHealthPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("health", "debug", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeDebugResponse returns a decoder for responses returned by the health
// debug endpoint. restoreBody controls whether the response body should be
// restored after having been read.
func DecodeDebugResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body any
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("health", "debug", err)
			}
			return body, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("health", "debug", resp.StatusCode, string(body))
		}
	}
}

// unmarshalHealthStatusResponseBodyToDesigntypesHealthStatus builds a value of
// type *designtypes.HealthStatus from a value of type
// *HealthStatusResponseBody.
func unmarshalHealthStatusResponseBodyToDesigntypesHealthStatus(v *HealthStatusResponseBody) *designtypes.HealthStatus {
	if v == nil {
		return nil
	}
	res := &designtypes.HealthStatus{
		Service: *v.Service,
		Status:  *v.Status,
		Message: v.Message,
	}

	return res
}
