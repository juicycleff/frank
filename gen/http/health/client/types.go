// Code generated by goa v3.20.0, DO NOT EDIT.
//
// health HTTP client types
//
// Command:
// $ goa gen github.com/juicycleff/frank/design -o .

package client

import (
	designtypes "github.com/juicycleff/frank/gen/designtypes"
	health "github.com/juicycleff/frank/gen/health"
	goa "goa.design/goa/v3/pkg"
)

// CheckOKResponseBody is the type of the "health" service "check" endpoint
// HTTP response body.
type CheckOKResponseBody struct {
	// Overall health status
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// Timestamp of health check
	Timestamp *string `form:"timestamp,omitempty" json:"timestamp,omitempty" xml:"timestamp,omitempty"`
	// Status of individual services
	Services []*HealthStatusResponseBody `form:"services,omitempty" json:"services,omitempty" xml:"services,omitempty"`
}

// ReadyOKResponseBody is the type of the "health" service "ready" endpoint
// HTTP response body.
type ReadyOKResponseBody struct {
	// Readiness status
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// Timestamp of health check
	Timestamp *string `form:"timestamp,omitempty" json:"timestamp,omitempty" xml:"timestamp,omitempty"`
}

// VersionResponseBody is the type of the "health" service "version" endpoint
// HTTP response body.
type VersionResponseBody struct {
	// System version
	Version *string `form:"version,omitempty" json:"version,omitempty" xml:"version,omitempty"`
	// Build date
	BuildDate *string `form:"build_date,omitempty" json:"build_date,omitempty" xml:"build_date,omitempty"`
	// Git commit hash
	GitCommit *string `form:"git_commit,omitempty" json:"git_commit,omitempty" xml:"git_commit,omitempty"`
	// Go version
	GoVersion *string `form:"go_version,omitempty" json:"go_version,omitempty" xml:"go_version,omitempty"`
}

// MetricsResponseBody is the type of the "health" service "metrics" endpoint
// HTTP response body.
type MetricsResponseBody struct {
	// System uptime in seconds
	Uptime *int64 `form:"uptime,omitempty" json:"uptime,omitempty" xml:"uptime,omitempty"`
	// Memory usage in bytes
	MemoryUsage *int64 `form:"memory_usage,omitempty" json:"memory_usage,omitempty" xml:"memory_usage,omitempty"`
	// Number of goroutines
	Goroutines *int `form:"goroutines,omitempty" json:"goroutines,omitempty" xml:"goroutines,omitempty"`
	// Total request count
	Requests *int64 `form:"requests,omitempty" json:"requests,omitempty" xml:"requests,omitempty"`
	// Total error count
	Errors *int64 `form:"errors,omitempty" json:"errors,omitempty" xml:"errors,omitempty"`
	// Requests per second
	RequestRate *float32 `form:"request_rate,omitempty" json:"request_rate,omitempty" xml:"request_rate,omitempty"`
}

// HealthStatusResponseBody is used to define fields on response body types.
type HealthStatusResponseBody struct {
	// Service name
	Service *string `form:"service,omitempty" json:"service,omitempty" xml:"service,omitempty"`
	// Service status
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// Additional message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// CheckServiceUnavailableResponseBody is used to define fields on response
// body types.
type CheckServiceUnavailableResponseBody struct {
	// Overall health status
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// Timestamp of health check
	Timestamp *string `form:"timestamp,omitempty" json:"timestamp,omitempty" xml:"timestamp,omitempty"`
	// Status of individual services
	Services []*HealthStatusResponseBody `form:"services,omitempty" json:"services,omitempty" xml:"services,omitempty"`
}

// ReadyServiceUnavailableResponseBody is used to define fields on response
// body types.
type ReadyServiceUnavailableResponseBody struct {
	// Readiness status
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// Timestamp of health check
	Timestamp *string `form:"timestamp,omitempty" json:"timestamp,omitempty" xml:"timestamp,omitempty"`
}

// NewCheckHealthResponseOK builds a "health" service "check" endpoint result
// from a HTTP "OK" response.
func NewCheckHealthResponseOK(body *CheckOKResponseBody) *designtypes.HealthResponse {
	v := &designtypes.HealthResponse{
		Status:    *body.Status,
		Timestamp: *body.Timestamp,
	}
	if body.Services != nil {
		v.Services = make([]*designtypes.HealthStatus, len(body.Services))
		for i, val := range body.Services {
			v.Services[i] = unmarshalHealthStatusResponseBodyToDesigntypesHealthStatus(val)
		}
	}

	return v
}

// NewReadyResponseOK builds a "health" service "ready" endpoint result from a
// HTTP "OK" response.
func NewReadyResponseOK(body *ReadyOKResponseBody) *designtypes.ReadyResponse {
	v := &designtypes.ReadyResponse{
		Status:    *body.Status,
		Timestamp: *body.Timestamp,
	}

	return v
}

// NewVersionResultOK builds a "health" service "version" endpoint result from
// a HTTP "OK" response.
func NewVersionResultOK(body *VersionResponseBody) *health.VersionResult {
	v := &health.VersionResult{
		Version:   *body.Version,
		BuildDate: *body.BuildDate,
		GitCommit: body.GitCommit,
		GoVersion: body.GoVersion,
	}

	return v
}

// NewMetricsResultOK builds a "health" service "metrics" endpoint result from
// a HTTP "OK" response.
func NewMetricsResultOK(body *MetricsResponseBody) *health.MetricsResult {
	v := &health.MetricsResult{
		Uptime:      *body.Uptime,
		MemoryUsage: *body.MemoryUsage,
		Goroutines:  *body.Goroutines,
		Requests:    body.Requests,
		Errors:      body.Errors,
		RequestRate: body.RequestRate,
	}

	return v
}

// ValidateCheckOKResponseBody runs the validations defined on
// CheckOKResponseBody
func ValidateCheckOKResponseBody(body *CheckOKResponseBody) (err error) {
	if body.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "body"))
	}
	if body.Timestamp == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timestamp", "body"))
	}
	if body.Status != nil {
		if !(*body.Status == "healthy" || *body.Status == "unhealthy") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.status", *body.Status, []any{"healthy", "unhealthy"}))
		}
	}
	if body.Timestamp != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.timestamp", *body.Timestamp, goa.FormatDateTime))
	}
	for _, e := range body.Services {
		if e != nil {
			if err2 := ValidateHealthStatusResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateReadyOKResponseBody runs the validations defined on
// ReadyOKResponseBody
func ValidateReadyOKResponseBody(body *ReadyOKResponseBody) (err error) {
	if body.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "body"))
	}
	if body.Timestamp == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timestamp", "body"))
	}
	if body.Status != nil {
		if !(*body.Status == "ready" || *body.Status == "not_ready") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.status", *body.Status, []any{"ready", "not_ready"}))
		}
	}
	if body.Timestamp != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.timestamp", *body.Timestamp, goa.FormatDateTime))
	}
	return
}

// ValidateVersionResponseBody runs the validations defined on
// VersionResponseBody
func ValidateVersionResponseBody(body *VersionResponseBody) (err error) {
	if body.Version == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("version", "body"))
	}
	if body.BuildDate == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("build_date", "body"))
	}
	if body.BuildDate != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.build_date", *body.BuildDate, goa.FormatDateTime))
	}
	return
}

// ValidateMetricsResponseBody runs the validations defined on
// MetricsResponseBody
func ValidateMetricsResponseBody(body *MetricsResponseBody) (err error) {
	if body.Uptime == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("uptime", "body"))
	}
	if body.MemoryUsage == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("memory_usage", "body"))
	}
	if body.Goroutines == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("goroutines", "body"))
	}
	return
}

// ValidateHealthStatusResponseBody runs the validations defined on
// HealthStatusResponseBody
func ValidateHealthStatusResponseBody(body *HealthStatusResponseBody) (err error) {
	if body.Service == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("service", "body"))
	}
	if body.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "body"))
	}
	if body.Status != nil {
		if !(*body.Status == "healthy" || *body.Status == "unhealthy") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.status", *body.Status, []any{"healthy", "unhealthy"}))
		}
	}
	return
}

// ValidateCheckServiceUnavailableResponseBody runs the validations defined on
// CheckService UnavailableResponseBody
func ValidateCheckServiceUnavailableResponseBody(body *CheckServiceUnavailableResponseBody) (err error) {
	if body.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "body"))
	}
	if body.Timestamp == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timestamp", "body"))
	}
	if body.Status != nil {
		if !(*body.Status == "healthy" || *body.Status == "unhealthy") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.status", *body.Status, []any{"healthy", "unhealthy"}))
		}
	}
	if body.Timestamp != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.timestamp", *body.Timestamp, goa.FormatDateTime))
	}
	for _, e := range body.Services {
		if e != nil {
			if err2 := ValidateHealthStatusResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateReadyServiceUnavailableResponseBody runs the validations defined on
// ReadyService UnavailableResponseBody
func ValidateReadyServiceUnavailableResponseBody(body *ReadyServiceUnavailableResponseBody) (err error) {
	if body.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "body"))
	}
	if body.Timestamp == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timestamp", "body"))
	}
	if body.Status != nil {
		if !(*body.Status == "ready" || *body.Status == "not_ready") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.status", *body.Status, []any{"ready", "not_ready"}))
		}
	}
	if body.Timestamp != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.timestamp", *body.Timestamp, goa.FormatDateTime))
	}
	return
}
