// Code generated by goa v3.20.0, DO NOT EDIT.
//
// passkeys HTTP server types
//
// Command:
// $ goa gen github.com/juicycleff/frank/design -o .

package server

import (
	passkeys "github.com/juicycleff/frank/gen/passkeys"
	goa "goa.design/goa/v3/pkg"
)

// RegisterBeginRequestBody is the type of the "passkeys" service
// "register_begin" endpoint HTTP request body.
type RegisterBeginRequestBody struct {
	// Name of the device
	DeviceName *string `form:"device_name,omitempty" json:"device_name,omitempty" xml:"device_name,omitempty"`
	// Type of the device
	DeviceType *string `form:"device_type,omitempty" json:"device_type,omitempty" xml:"device_type,omitempty"`
}

// RegisterCompleteRequestBody is the type of the "passkeys" service
// "register_complete" endpoint HTTP request body.
type RegisterCompleteRequestBody struct {
	// Registration session ID
	SessionID *string `form:"session_id,omitempty" json:"session_id,omitempty" xml:"session_id,omitempty"`
	// WebAuthn credential creation response
	Response any `form:"response,omitempty" json:"response,omitempty" xml:"response,omitempty"`
	// Name of the device
	DeviceName *string `form:"device_name,omitempty" json:"device_name,omitempty" xml:"device_name,omitempty"`
	// Type of the device
	DeviceType *string `form:"device_type,omitempty" json:"device_type,omitempty" xml:"device_type,omitempty"`
}

// LoginCompleteRequestBody is the type of the "passkeys" service
// "login_complete" endpoint HTTP request body.
type LoginCompleteRequestBody struct {
	// Authentication session ID
	SessionID *string `form:"session_id,omitempty" json:"session_id,omitempty" xml:"session_id,omitempty"`
	// WebAuthn assertion response
	Response any `form:"response,omitempty" json:"response,omitempty" xml:"response,omitempty"`
}

// UpdateRequestBody is the type of the "passkeys" service "update" endpoint
// HTTP request body.
type UpdateRequestBody struct {
	Request *UpdatePasskeyRequestRequestBody `form:"request,omitempty" json:"request,omitempty" xml:"request,omitempty"`
}

// RegisterBeginResponseBody is the type of the "passkeys" service
// "register_begin" endpoint HTTP response body.
type RegisterBeginResponseBody struct {
	// WebAuthn credential creation options
	Options any `form:"options" json:"options" xml:"options"`
	// Registration session ID
	SessionID string `form:"session_id" json:"session_id" xml:"session_id"`
}

// RegisterCompleteResponseBody is the type of the "passkeys" service
// "register_complete" endpoint HTTP response body.
type RegisterCompleteResponseBody struct {
	// Passkey ID
	ID string `form:"id" json:"id" xml:"id"`
	// Passkey name
	Name string `form:"name" json:"name" xml:"name"`
	// Device type
	DeviceType string `form:"device_type" json:"device_type" xml:"device_type"`
	// Registration timestamp
	RegisteredAt string `form:"registered_at" json:"registered_at" xml:"registered_at"`
	// Last usage timestamp
	LastUsed *string `form:"last_used,omitempty" json:"last_used,omitempty" xml:"last_used,omitempty"`
}

// LoginBeginResponseBody is the type of the "passkeys" service "login_begin"
// endpoint HTTP response body.
type LoginBeginResponseBody struct {
	// WebAuthn credential request options
	Options any `form:"options" json:"options" xml:"options"`
	// Authentication session ID
	SessionID string `form:"session_id" json:"session_id" xml:"session_id"`
}

// LoginCompleteResponseBody is the type of the "passkeys" service
// "login_complete" endpoint HTTP response body.
type LoginCompleteResponseBody struct {
	// Whether authentication was successful
	Authenticated bool `form:"authenticated" json:"authenticated" xml:"authenticated"`
	// User ID
	UserID string `form:"user_id" json:"user_id" xml:"user_id"`
}

// ListResponseBody is the type of the "passkeys" service "list" endpoint HTTP
// response body.
type ListResponseBody struct {
	Passkeys []*RegisteredPasskeyResponseBody `form:"passkeys" json:"passkeys" xml:"passkeys"`
}

// UpdateResponseBody is the type of the "passkeys" service "update" endpoint
// HTTP response body.
type UpdateResponseBody struct {
	// Success message
	Message string `form:"message" json:"message" xml:"message"`
}

// RegisterBeginBadRequestResponseBody is the type of the "passkeys" service
// "register_begin" endpoint HTTP response body for the "bad_request" error.
type RegisterBeginBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// RegisterBeginConflictResponseBody is the type of the "passkeys" service
// "register_begin" endpoint HTTP response body for the "conflict" error.
type RegisterBeginConflictResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// RegisterBeginForbiddenResponseBody is the type of the "passkeys" service
// "register_begin" endpoint HTTP response body for the "forbidden" error.
type RegisterBeginForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// RegisterBeginInternalErrorResponseBody is the type of the "passkeys" service
// "register_begin" endpoint HTTP response body for the "internal_error" error.
type RegisterBeginInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// RegisterBeginNotFoundResponseBody is the type of the "passkeys" service
// "register_begin" endpoint HTTP response body for the "not_found" error.
type RegisterBeginNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// RegisterBeginUnauthorizedResponseBody is the type of the "passkeys" service
// "register_begin" endpoint HTTP response body for the "unauthorized" error.
type RegisterBeginUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// RegisterCompleteBadRequestResponseBody is the type of the "passkeys" service
// "register_complete" endpoint HTTP response body for the "bad_request" error.
type RegisterCompleteBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// RegisterCompleteConflictResponseBody is the type of the "passkeys" service
// "register_complete" endpoint HTTP response body for the "conflict" error.
type RegisterCompleteConflictResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// RegisterCompleteForbiddenResponseBody is the type of the "passkeys" service
// "register_complete" endpoint HTTP response body for the "forbidden" error.
type RegisterCompleteForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// RegisterCompleteInternalErrorResponseBody is the type of the "passkeys"
// service "register_complete" endpoint HTTP response body for the
// "internal_error" error.
type RegisterCompleteInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// RegisterCompleteNotFoundResponseBody is the type of the "passkeys" service
// "register_complete" endpoint HTTP response body for the "not_found" error.
type RegisterCompleteNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// RegisterCompleteUnauthorizedResponseBody is the type of the "passkeys"
// service "register_complete" endpoint HTTP response body for the
// "unauthorized" error.
type RegisterCompleteUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// LoginBeginBadRequestResponseBody is the type of the "passkeys" service
// "login_begin" endpoint HTTP response body for the "bad_request" error.
type LoginBeginBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// LoginBeginConflictResponseBody is the type of the "passkeys" service
// "login_begin" endpoint HTTP response body for the "conflict" error.
type LoginBeginConflictResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// LoginBeginForbiddenResponseBody is the type of the "passkeys" service
// "login_begin" endpoint HTTP response body for the "forbidden" error.
type LoginBeginForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// LoginBeginInternalErrorResponseBody is the type of the "passkeys" service
// "login_begin" endpoint HTTP response body for the "internal_error" error.
type LoginBeginInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// LoginBeginNotFoundResponseBody is the type of the "passkeys" service
// "login_begin" endpoint HTTP response body for the "not_found" error.
type LoginBeginNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// LoginBeginUnauthorizedResponseBody is the type of the "passkeys" service
// "login_begin" endpoint HTTP response body for the "unauthorized" error.
type LoginBeginUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// LoginCompleteBadRequestResponseBody is the type of the "passkeys" service
// "login_complete" endpoint HTTP response body for the "bad_request" error.
type LoginCompleteBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// LoginCompleteConflictResponseBody is the type of the "passkeys" service
// "login_complete" endpoint HTTP response body for the "conflict" error.
type LoginCompleteConflictResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// LoginCompleteForbiddenResponseBody is the type of the "passkeys" service
// "login_complete" endpoint HTTP response body for the "forbidden" error.
type LoginCompleteForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// LoginCompleteInternalErrorResponseBody is the type of the "passkeys" service
// "login_complete" endpoint HTTP response body for the "internal_error" error.
type LoginCompleteInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// LoginCompleteNotFoundResponseBody is the type of the "passkeys" service
// "login_complete" endpoint HTTP response body for the "not_found" error.
type LoginCompleteNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// LoginCompleteUnauthorizedResponseBody is the type of the "passkeys" service
// "login_complete" endpoint HTTP response body for the "unauthorized" error.
type LoginCompleteUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListBadRequestResponseBody is the type of the "passkeys" service "list"
// endpoint HTTP response body for the "bad_request" error.
type ListBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListConflictResponseBody is the type of the "passkeys" service "list"
// endpoint HTTP response body for the "conflict" error.
type ListConflictResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListForbiddenResponseBody is the type of the "passkeys" service "list"
// endpoint HTTP response body for the "forbidden" error.
type ListForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListInternalErrorResponseBody is the type of the "passkeys" service "list"
// endpoint HTTP response body for the "internal_error" error.
type ListInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListNotFoundResponseBody is the type of the "passkeys" service "list"
// endpoint HTTP response body for the "not_found" error.
type ListNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListUnauthorizedResponseBody is the type of the "passkeys" service "list"
// endpoint HTTP response body for the "unauthorized" error.
type ListUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateBadRequestResponseBody is the type of the "passkeys" service "update"
// endpoint HTTP response body for the "bad_request" error.
type UpdateBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateConflictResponseBody is the type of the "passkeys" service "update"
// endpoint HTTP response body for the "conflict" error.
type UpdateConflictResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateForbiddenResponseBody is the type of the "passkeys" service "update"
// endpoint HTTP response body for the "forbidden" error.
type UpdateForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateInternalErrorResponseBody is the type of the "passkeys" service
// "update" endpoint HTTP response body for the "internal_error" error.
type UpdateInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateNotFoundResponseBody is the type of the "passkeys" service "update"
// endpoint HTTP response body for the "not_found" error.
type UpdateNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateUnauthorizedResponseBody is the type of the "passkeys" service
// "update" endpoint HTTP response body for the "unauthorized" error.
type UpdateUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteBadRequestResponseBody is the type of the "passkeys" service "delete"
// endpoint HTTP response body for the "bad_request" error.
type DeleteBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteConflictResponseBody is the type of the "passkeys" service "delete"
// endpoint HTTP response body for the "conflict" error.
type DeleteConflictResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteForbiddenResponseBody is the type of the "passkeys" service "delete"
// endpoint HTTP response body for the "forbidden" error.
type DeleteForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteInternalErrorResponseBody is the type of the "passkeys" service
// "delete" endpoint HTTP response body for the "internal_error" error.
type DeleteInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteNotFoundResponseBody is the type of the "passkeys" service "delete"
// endpoint HTTP response body for the "not_found" error.
type DeleteNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteUnauthorizedResponseBody is the type of the "passkeys" service
// "delete" endpoint HTTP response body for the "unauthorized" error.
type DeleteUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// RegisteredPasskeyResponseBody is used to define fields on response body
// types.
type RegisteredPasskeyResponseBody struct {
	// Passkey ID
	ID string `form:"id" json:"id" xml:"id"`
	// Passkey name
	Name string `form:"name" json:"name" xml:"name"`
	// Device type
	DeviceType string `form:"device_type" json:"device_type" xml:"device_type"`
	// Registration timestamp
	RegisteredAt string `form:"registered_at" json:"registered_at" xml:"registered_at"`
	// Last usage timestamp
	LastUsed *string `form:"last_used,omitempty" json:"last_used,omitempty" xml:"last_used,omitempty"`
}

// UpdatePasskeyRequestRequestBody is used to define fields on request body
// types.
type UpdatePasskeyRequestRequestBody struct {
	// New passkey name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// NewRegisterBeginResponseBody builds the HTTP response body from the result
// of the "register_begin" endpoint of the "passkeys" service.
func NewRegisterBeginResponseBody(res *passkeys.RegisterBeginResult) *RegisterBeginResponseBody {
	body := &RegisterBeginResponseBody{
		Options:   res.Options,
		SessionID: res.SessionID,
	}
	return body
}

// NewRegisterCompleteResponseBody builds the HTTP response body from the
// result of the "register_complete" endpoint of the "passkeys" service.
func NewRegisterCompleteResponseBody(res *passkeys.RegisteredPasskey) *RegisterCompleteResponseBody {
	body := &RegisterCompleteResponseBody{
		ID:           res.ID,
		Name:         res.Name,
		DeviceType:   res.DeviceType,
		RegisteredAt: res.RegisteredAt,
		LastUsed:     res.LastUsed,
	}
	return body
}

// NewLoginBeginResponseBody builds the HTTP response body from the result of
// the "login_begin" endpoint of the "passkeys" service.
func NewLoginBeginResponseBody(res *passkeys.LoginBeginResult) *LoginBeginResponseBody {
	body := &LoginBeginResponseBody{
		Options:   res.Options,
		SessionID: res.SessionID,
	}
	return body
}

// NewLoginCompleteResponseBody builds the HTTP response body from the result
// of the "login_complete" endpoint of the "passkeys" service.
func NewLoginCompleteResponseBody(res *passkeys.LoginCompleteResult) *LoginCompleteResponseBody {
	body := &LoginCompleteResponseBody{
		Authenticated: res.Authenticated,
		UserID:        res.UserID,
	}
	return body
}

// NewListResponseBody builds the HTTP response body from the result of the
// "list" endpoint of the "passkeys" service.
func NewListResponseBody(res *passkeys.ListResult) *ListResponseBody {
	body := &ListResponseBody{}
	if res.Passkeys != nil {
		body.Passkeys = make([]*RegisteredPasskeyResponseBody, len(res.Passkeys))
		for i, val := range res.Passkeys {
			body.Passkeys[i] = marshalPasskeysRegisteredPasskeyToRegisteredPasskeyResponseBody(val)
		}
	} else {
		body.Passkeys = []*RegisteredPasskeyResponseBody{}
	}
	return body
}

// NewUpdateResponseBody builds the HTTP response body from the result of the
// "update" endpoint of the "passkeys" service.
func NewUpdateResponseBody(res *passkeys.UpdateResult) *UpdateResponseBody {
	body := &UpdateResponseBody{
		Message: res.Message,
	}
	return body
}

// NewRegisterBeginBadRequestResponseBody builds the HTTP response body from
// the result of the "register_begin" endpoint of the "passkeys" service.
func NewRegisterBeginBadRequestResponseBody(res *passkeys.BadRequestError) *RegisterBeginBadRequestResponseBody {
	body := &RegisterBeginBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewRegisterBeginConflictResponseBody builds the HTTP response body from the
// result of the "register_begin" endpoint of the "passkeys" service.
func NewRegisterBeginConflictResponseBody(res *passkeys.ConflictError) *RegisterBeginConflictResponseBody {
	body := &RegisterBeginConflictResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewRegisterBeginForbiddenResponseBody builds the HTTP response body from the
// result of the "register_begin" endpoint of the "passkeys" service.
func NewRegisterBeginForbiddenResponseBody(res *passkeys.ForbiddenError) *RegisterBeginForbiddenResponseBody {
	body := &RegisterBeginForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewRegisterBeginInternalErrorResponseBody builds the HTTP response body from
// the result of the "register_begin" endpoint of the "passkeys" service.
func NewRegisterBeginInternalErrorResponseBody(res *passkeys.InternalServerError) *RegisterBeginInternalErrorResponseBody {
	body := &RegisterBeginInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewRegisterBeginNotFoundResponseBody builds the HTTP response body from the
// result of the "register_begin" endpoint of the "passkeys" service.
func NewRegisterBeginNotFoundResponseBody(res *passkeys.NotFoundError) *RegisterBeginNotFoundResponseBody {
	body := &RegisterBeginNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewRegisterBeginUnauthorizedResponseBody builds the HTTP response body from
// the result of the "register_begin" endpoint of the "passkeys" service.
func NewRegisterBeginUnauthorizedResponseBody(res *passkeys.UnauthorizedError) *RegisterBeginUnauthorizedResponseBody {
	body := &RegisterBeginUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewRegisterCompleteBadRequestResponseBody builds the HTTP response body from
// the result of the "register_complete" endpoint of the "passkeys" service.
func NewRegisterCompleteBadRequestResponseBody(res *passkeys.BadRequestError) *RegisterCompleteBadRequestResponseBody {
	body := &RegisterCompleteBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewRegisterCompleteConflictResponseBody builds the HTTP response body from
// the result of the "register_complete" endpoint of the "passkeys" service.
func NewRegisterCompleteConflictResponseBody(res *passkeys.ConflictError) *RegisterCompleteConflictResponseBody {
	body := &RegisterCompleteConflictResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewRegisterCompleteForbiddenResponseBody builds the HTTP response body from
// the result of the "register_complete" endpoint of the "passkeys" service.
func NewRegisterCompleteForbiddenResponseBody(res *passkeys.ForbiddenError) *RegisterCompleteForbiddenResponseBody {
	body := &RegisterCompleteForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewRegisterCompleteInternalErrorResponseBody builds the HTTP response body
// from the result of the "register_complete" endpoint of the "passkeys"
// service.
func NewRegisterCompleteInternalErrorResponseBody(res *passkeys.InternalServerError) *RegisterCompleteInternalErrorResponseBody {
	body := &RegisterCompleteInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewRegisterCompleteNotFoundResponseBody builds the HTTP response body from
// the result of the "register_complete" endpoint of the "passkeys" service.
func NewRegisterCompleteNotFoundResponseBody(res *passkeys.NotFoundError) *RegisterCompleteNotFoundResponseBody {
	body := &RegisterCompleteNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewRegisterCompleteUnauthorizedResponseBody builds the HTTP response body
// from the result of the "register_complete" endpoint of the "passkeys"
// service.
func NewRegisterCompleteUnauthorizedResponseBody(res *passkeys.UnauthorizedError) *RegisterCompleteUnauthorizedResponseBody {
	body := &RegisterCompleteUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewLoginBeginBadRequestResponseBody builds the HTTP response body from the
// result of the "login_begin" endpoint of the "passkeys" service.
func NewLoginBeginBadRequestResponseBody(res *passkeys.BadRequestError) *LoginBeginBadRequestResponseBody {
	body := &LoginBeginBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewLoginBeginConflictResponseBody builds the HTTP response body from the
// result of the "login_begin" endpoint of the "passkeys" service.
func NewLoginBeginConflictResponseBody(res *passkeys.ConflictError) *LoginBeginConflictResponseBody {
	body := &LoginBeginConflictResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewLoginBeginForbiddenResponseBody builds the HTTP response body from the
// result of the "login_begin" endpoint of the "passkeys" service.
func NewLoginBeginForbiddenResponseBody(res *passkeys.ForbiddenError) *LoginBeginForbiddenResponseBody {
	body := &LoginBeginForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewLoginBeginInternalErrorResponseBody builds the HTTP response body from
// the result of the "login_begin" endpoint of the "passkeys" service.
func NewLoginBeginInternalErrorResponseBody(res *passkeys.InternalServerError) *LoginBeginInternalErrorResponseBody {
	body := &LoginBeginInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewLoginBeginNotFoundResponseBody builds the HTTP response body from the
// result of the "login_begin" endpoint of the "passkeys" service.
func NewLoginBeginNotFoundResponseBody(res *passkeys.NotFoundError) *LoginBeginNotFoundResponseBody {
	body := &LoginBeginNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewLoginBeginUnauthorizedResponseBody builds the HTTP response body from the
// result of the "login_begin" endpoint of the "passkeys" service.
func NewLoginBeginUnauthorizedResponseBody(res *passkeys.UnauthorizedError) *LoginBeginUnauthorizedResponseBody {
	body := &LoginBeginUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewLoginCompleteBadRequestResponseBody builds the HTTP response body from
// the result of the "login_complete" endpoint of the "passkeys" service.
func NewLoginCompleteBadRequestResponseBody(res *passkeys.BadRequestError) *LoginCompleteBadRequestResponseBody {
	body := &LoginCompleteBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewLoginCompleteConflictResponseBody builds the HTTP response body from the
// result of the "login_complete" endpoint of the "passkeys" service.
func NewLoginCompleteConflictResponseBody(res *passkeys.ConflictError) *LoginCompleteConflictResponseBody {
	body := &LoginCompleteConflictResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewLoginCompleteForbiddenResponseBody builds the HTTP response body from the
// result of the "login_complete" endpoint of the "passkeys" service.
func NewLoginCompleteForbiddenResponseBody(res *passkeys.ForbiddenError) *LoginCompleteForbiddenResponseBody {
	body := &LoginCompleteForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewLoginCompleteInternalErrorResponseBody builds the HTTP response body from
// the result of the "login_complete" endpoint of the "passkeys" service.
func NewLoginCompleteInternalErrorResponseBody(res *passkeys.InternalServerError) *LoginCompleteInternalErrorResponseBody {
	body := &LoginCompleteInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewLoginCompleteNotFoundResponseBody builds the HTTP response body from the
// result of the "login_complete" endpoint of the "passkeys" service.
func NewLoginCompleteNotFoundResponseBody(res *passkeys.NotFoundError) *LoginCompleteNotFoundResponseBody {
	body := &LoginCompleteNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewLoginCompleteUnauthorizedResponseBody builds the HTTP response body from
// the result of the "login_complete" endpoint of the "passkeys" service.
func NewLoginCompleteUnauthorizedResponseBody(res *passkeys.UnauthorizedError) *LoginCompleteUnauthorizedResponseBody {
	body := &LoginCompleteUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewListBadRequestResponseBody builds the HTTP response body from the result
// of the "list" endpoint of the "passkeys" service.
func NewListBadRequestResponseBody(res *passkeys.BadRequestError) *ListBadRequestResponseBody {
	body := &ListBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewListConflictResponseBody builds the HTTP response body from the result of
// the "list" endpoint of the "passkeys" service.
func NewListConflictResponseBody(res *passkeys.ConflictError) *ListConflictResponseBody {
	body := &ListConflictResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewListForbiddenResponseBody builds the HTTP response body from the result
// of the "list" endpoint of the "passkeys" service.
func NewListForbiddenResponseBody(res *passkeys.ForbiddenError) *ListForbiddenResponseBody {
	body := &ListForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewListInternalErrorResponseBody builds the HTTP response body from the
// result of the "list" endpoint of the "passkeys" service.
func NewListInternalErrorResponseBody(res *passkeys.InternalServerError) *ListInternalErrorResponseBody {
	body := &ListInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewListNotFoundResponseBody builds the HTTP response body from the result of
// the "list" endpoint of the "passkeys" service.
func NewListNotFoundResponseBody(res *passkeys.NotFoundError) *ListNotFoundResponseBody {
	body := &ListNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewListUnauthorizedResponseBody builds the HTTP response body from the
// result of the "list" endpoint of the "passkeys" service.
func NewListUnauthorizedResponseBody(res *passkeys.UnauthorizedError) *ListUnauthorizedResponseBody {
	body := &ListUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewUpdateBadRequestResponseBody builds the HTTP response body from the
// result of the "update" endpoint of the "passkeys" service.
func NewUpdateBadRequestResponseBody(res *passkeys.BadRequestError) *UpdateBadRequestResponseBody {
	body := &UpdateBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewUpdateConflictResponseBody builds the HTTP response body from the result
// of the "update" endpoint of the "passkeys" service.
func NewUpdateConflictResponseBody(res *passkeys.ConflictError) *UpdateConflictResponseBody {
	body := &UpdateConflictResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewUpdateForbiddenResponseBody builds the HTTP response body from the result
// of the "update" endpoint of the "passkeys" service.
func NewUpdateForbiddenResponseBody(res *passkeys.ForbiddenError) *UpdateForbiddenResponseBody {
	body := &UpdateForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewUpdateInternalErrorResponseBody builds the HTTP response body from the
// result of the "update" endpoint of the "passkeys" service.
func NewUpdateInternalErrorResponseBody(res *passkeys.InternalServerError) *UpdateInternalErrorResponseBody {
	body := &UpdateInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewUpdateNotFoundResponseBody builds the HTTP response body from the result
// of the "update" endpoint of the "passkeys" service.
func NewUpdateNotFoundResponseBody(res *passkeys.NotFoundError) *UpdateNotFoundResponseBody {
	body := &UpdateNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewUpdateUnauthorizedResponseBody builds the HTTP response body from the
// result of the "update" endpoint of the "passkeys" service.
func NewUpdateUnauthorizedResponseBody(res *passkeys.UnauthorizedError) *UpdateUnauthorizedResponseBody {
	body := &UpdateUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewDeleteBadRequestResponseBody builds the HTTP response body from the
// result of the "delete" endpoint of the "passkeys" service.
func NewDeleteBadRequestResponseBody(res *passkeys.BadRequestError) *DeleteBadRequestResponseBody {
	body := &DeleteBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewDeleteConflictResponseBody builds the HTTP response body from the result
// of the "delete" endpoint of the "passkeys" service.
func NewDeleteConflictResponseBody(res *passkeys.ConflictError) *DeleteConflictResponseBody {
	body := &DeleteConflictResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewDeleteForbiddenResponseBody builds the HTTP response body from the result
// of the "delete" endpoint of the "passkeys" service.
func NewDeleteForbiddenResponseBody(res *passkeys.ForbiddenError) *DeleteForbiddenResponseBody {
	body := &DeleteForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewDeleteInternalErrorResponseBody builds the HTTP response body from the
// result of the "delete" endpoint of the "passkeys" service.
func NewDeleteInternalErrorResponseBody(res *passkeys.InternalServerError) *DeleteInternalErrorResponseBody {
	body := &DeleteInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewDeleteNotFoundResponseBody builds the HTTP response body from the result
// of the "delete" endpoint of the "passkeys" service.
func NewDeleteNotFoundResponseBody(res *passkeys.NotFoundError) *DeleteNotFoundResponseBody {
	body := &DeleteNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewDeleteUnauthorizedResponseBody builds the HTTP response body from the
// result of the "delete" endpoint of the "passkeys" service.
func NewDeleteUnauthorizedResponseBody(res *passkeys.UnauthorizedError) *DeleteUnauthorizedResponseBody {
	body := &DeleteUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewRegisterBeginPayload builds a passkeys service register_begin endpoint
// payload.
func NewRegisterBeginPayload(body *RegisterBeginRequestBody, jwt *string) *passkeys.RegisterBeginPayload {
	v := &passkeys.RegisterBeginPayload{
		DeviceName: body.DeviceName,
		DeviceType: body.DeviceType,
	}
	v.JWT = jwt

	return v
}

// NewRegisterCompletePayload builds a passkeys service register_complete
// endpoint payload.
func NewRegisterCompletePayload(body *RegisterCompleteRequestBody, jwt *string) *passkeys.RegisterCompletePayload {
	v := &passkeys.RegisterCompletePayload{
		SessionID:  *body.SessionID,
		Response:   body.Response,
		DeviceName: body.DeviceName,
		DeviceType: body.DeviceType,
	}
	v.JWT = jwt

	return v
}

// NewLoginBeginPayload builds a passkeys service login_begin endpoint payload.
func NewLoginBeginPayload(oauth2 *string, xAPIKey *string, jwt *string) *passkeys.LoginBeginPayload {
	v := &passkeys.LoginBeginPayload{}
	v.Oauth2 = oauth2
	v.XAPIKey = xAPIKey
	v.JWT = jwt

	return v
}

// NewLoginCompletePayload builds a passkeys service login_complete endpoint
// payload.
func NewLoginCompletePayload(body *LoginCompleteRequestBody, oauth2 *string, xAPIKey *string, jwt *string) *passkeys.LoginCompletePayload {
	v := &passkeys.LoginCompletePayload{
		SessionID: *body.SessionID,
		Response:  body.Response,
	}
	v.Oauth2 = oauth2
	v.XAPIKey = xAPIKey
	v.JWT = jwt

	return v
}

// NewListPayload builds a passkeys service list endpoint payload.
func NewListPayload(jwt *string) *passkeys.ListPayload {
	v := &passkeys.ListPayload{}
	v.JWT = jwt

	return v
}

// NewUpdatePayload builds a passkeys service update endpoint payload.
func NewUpdatePayload(body *UpdateRequestBody, id string, jwt *string) *passkeys.UpdatePayload {
	v := &passkeys.UpdatePayload{}
	v.Request = unmarshalUpdatePasskeyRequestRequestBodyToPasskeysUpdatePasskeyRequest(body.Request)
	v.ID = id
	v.JWT = jwt

	return v
}

// NewDeletePayload builds a passkeys service delete endpoint payload.
func NewDeletePayload(id string, jwt *string) *passkeys.DeletePayload {
	v := &passkeys.DeletePayload{}
	v.ID = id
	v.JWT = jwt

	return v
}

// ValidateRegisterCompleteRequestBody runs the validations defined on
// register_complete_request_body
func ValidateRegisterCompleteRequestBody(body *RegisterCompleteRequestBody) (err error) {
	if body.SessionID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("session_id", "body"))
	}
	if body.Response == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("response", "body"))
	}
	return
}

// ValidateLoginCompleteRequestBody runs the validations defined on
// login_complete_request_body
func ValidateLoginCompleteRequestBody(body *LoginCompleteRequestBody) (err error) {
	if body.SessionID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("session_id", "body"))
	}
	if body.Response == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("response", "body"))
	}
	return
}

// ValidateUpdateRequestBody runs the validations defined on UpdateRequestBody
func ValidateUpdateRequestBody(body *UpdateRequestBody) (err error) {
	if body.Request == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("request", "body"))
	}
	if body.Request != nil {
		if err2 := ValidateUpdatePasskeyRequestRequestBody(body.Request); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateUpdatePasskeyRequestRequestBody runs the validations defined on
// UpdatePasskeyRequestRequestBody
func ValidateUpdatePasskeyRequestRequestBody(body *UpdatePasskeyRequestRequestBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	return
}
