// Code generated by goa v3.20.0, DO NOT EDIT.
//
// passkeys HTTP client CLI support package
//
// Command:
// $ goa gen github.com/juicycleff/frank/design -o .

package client

import (
	"encoding/json"
	"fmt"

	passkeys "github.com/juicycleff/frank/gen/passkeys"
	goa "goa.design/goa/v3/pkg"
)

// BuildRegisterBeginPayload builds the payload for the passkeys register_begin
// endpoint from CLI flags.
func BuildRegisterBeginPayload(passkeysRegisterBeginBody string, passkeysRegisterBeginJWT string) (*passkeys.RegisterBeginPayload, error) {
	var err error
	var body RegisterBeginRequestBody
	{
		err = json.Unmarshal([]byte(passkeysRegisterBeginBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"device_name\": \"Nihil optio quasi nulla eos possimus.\",\n      \"device_type\": \"Omnis quidem.\"\n   }'")
		}
	}
	var jwt *string
	{
		if passkeysRegisterBeginJWT != "" {
			jwt = &passkeysRegisterBeginJWT
		}
	}
	v := &passkeys.RegisterBeginPayload{
		DeviceName: body.DeviceName,
		DeviceType: body.DeviceType,
	}
	v.JWT = jwt

	return v, nil
}

// BuildRegisterCompletePayload builds the payload for the passkeys
// register_complete endpoint from CLI flags.
func BuildRegisterCompletePayload(passkeysRegisterCompleteBody string, passkeysRegisterCompleteJWT string) (*passkeys.RegisterCompletePayload, error) {
	var err error
	var body RegisterCompleteRequestBody
	{
		err = json.Unmarshal([]byte(passkeysRegisterCompleteBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"device_name\": \"Sed cumque dolores.\",\n      \"device_type\": \"Omnis adipisci hic corrupti eveniet saepe.\",\n      \"response\": \"Veritatis autem quasi esse esse et similique.\",\n      \"session_id\": \"Illum at dolorum repellat in sint dolorem.\"\n   }'")
		}
		if body.Response == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("response", "body"))
		}
		if err != nil {
			return nil, err
		}
	}
	var jwt *string
	{
		if passkeysRegisterCompleteJWT != "" {
			jwt = &passkeysRegisterCompleteJWT
		}
	}
	v := &passkeys.RegisterCompletePayload{
		SessionID:  body.SessionID,
		Response:   body.Response,
		DeviceName: body.DeviceName,
		DeviceType: body.DeviceType,
	}
	v.JWT = jwt

	return v, nil
}

// BuildLoginBeginPayload builds the payload for the passkeys login_begin
// endpoint from CLI flags.
func BuildLoginBeginPayload(passkeysLoginBeginOauth2 string, passkeysLoginBeginXAPIKey string, passkeysLoginBeginJWT string) (*passkeys.LoginBeginPayload, error) {
	var oauth2 *string
	{
		if passkeysLoginBeginOauth2 != "" {
			oauth2 = &passkeysLoginBeginOauth2
		}
	}
	var xAPIKey *string
	{
		if passkeysLoginBeginXAPIKey != "" {
			xAPIKey = &passkeysLoginBeginXAPIKey
		}
	}
	var jwt *string
	{
		if passkeysLoginBeginJWT != "" {
			jwt = &passkeysLoginBeginJWT
		}
	}
	v := &passkeys.LoginBeginPayload{}
	v.Oauth2 = oauth2
	v.XAPIKey = xAPIKey
	v.JWT = jwt

	return v, nil
}

// BuildLoginCompletePayload builds the payload for the passkeys login_complete
// endpoint from CLI flags.
func BuildLoginCompletePayload(passkeysLoginCompleteBody string, passkeysLoginCompleteOauth2 string, passkeysLoginCompleteXAPIKey string, passkeysLoginCompleteJWT string) (*passkeys.LoginCompletePayload, error) {
	var err error
	var body LoginCompleteRequestBody
	{
		err = json.Unmarshal([]byte(passkeysLoginCompleteBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"response\": \"Ab consequatur et qui porro est vero.\",\n      \"session_id\": \"Eum in nemo rerum odio.\"\n   }'")
		}
		if body.Response == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("response", "body"))
		}
		if err != nil {
			return nil, err
		}
	}
	var oauth2 *string
	{
		if passkeysLoginCompleteOauth2 != "" {
			oauth2 = &passkeysLoginCompleteOauth2
		}
	}
	var xAPIKey *string
	{
		if passkeysLoginCompleteXAPIKey != "" {
			xAPIKey = &passkeysLoginCompleteXAPIKey
		}
	}
	var jwt *string
	{
		if passkeysLoginCompleteJWT != "" {
			jwt = &passkeysLoginCompleteJWT
		}
	}
	v := &passkeys.LoginCompletePayload{
		SessionID: body.SessionID,
		Response:  body.Response,
	}
	v.Oauth2 = oauth2
	v.XAPIKey = xAPIKey
	v.JWT = jwt

	return v, nil
}

// BuildListPayload builds the payload for the passkeys list endpoint from CLI
// flags.
func BuildListPayload(passkeysListJWT string) (*passkeys.ListPayload, error) {
	var jwt *string
	{
		if passkeysListJWT != "" {
			jwt = &passkeysListJWT
		}
	}
	v := &passkeys.ListPayload{}
	v.JWT = jwt

	return v, nil
}

// BuildUpdatePayload builds the payload for the passkeys update endpoint from
// CLI flags.
func BuildUpdatePayload(passkeysUpdateBody string, passkeysUpdateID string, passkeysUpdateJWT string) (*passkeys.UpdatePayload, error) {
	var err error
	var body UpdateRequestBody
	{
		err = json.Unmarshal([]byte(passkeysUpdateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"request\": {\n         \"name\": \"Voluptas voluptatem saepe itaque.\"\n      }\n   }'")
		}
		if body.Request == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("request", "body"))
		}
		if err != nil {
			return nil, err
		}
	}
	var id string
	{
		id = passkeysUpdateID
	}
	var jwt *string
	{
		if passkeysUpdateJWT != "" {
			jwt = &passkeysUpdateJWT
		}
	}
	v := &passkeys.UpdatePayload{}
	if body.Request != nil {
		v.Request = marshalUpdatePasskeyRequestRequestBodyToPasskeysUpdatePasskeyRequest(body.Request)
	}
	v.ID = id
	v.JWT = jwt

	return v, nil
}

// BuildDeletePayload builds the payload for the passkeys delete endpoint from
// CLI flags.
func BuildDeletePayload(passkeysDeleteID string, passkeysDeleteJWT string) (*passkeys.DeletePayload, error) {
	var id string
	{
		id = passkeysDeleteID
	}
	var jwt *string
	{
		if passkeysDeleteJWT != "" {
			jwt = &passkeysDeleteJWT
		}
	}
	v := &passkeys.DeletePayload{}
	v.ID = id
	v.JWT = jwt

	return v, nil
}
