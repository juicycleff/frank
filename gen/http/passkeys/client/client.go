// Code generated by goa v3.20.0, DO NOT EDIT.
//
// passkeys client HTTP transport
//
// Command:
// $ goa gen github.com/juicycleff/frank/design -o .

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the passkeys service endpoint HTTP clients.
type Client struct {
	// RegisterBegin Doer is the HTTP client used to make requests to the
	// register_begin endpoint.
	RegisterBeginDoer goahttp.Doer

	// RegisterComplete Doer is the HTTP client used to make requests to the
	// register_complete endpoint.
	RegisterCompleteDoer goahttp.Doer

	// LoginBegin Doer is the HTTP client used to make requests to the login_begin
	// endpoint.
	LoginBeginDoer goahttp.Doer

	// LoginComplete Doer is the HTTP client used to make requests to the
	// login_complete endpoint.
	LoginCompleteDoer goahttp.Doer

	// List Doer is the HTTP client used to make requests to the list endpoint.
	ListDoer goahttp.Doer

	// Update Doer is the HTTP client used to make requests to the update endpoint.
	UpdateDoer goahttp.Doer

	// Delete Doer is the HTTP client used to make requests to the delete endpoint.
	DeleteDoer goahttp.Doer

	// CORS Doer is the HTTP client used to make requests to the  endpoint.
	CORSDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the passkeys service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		RegisterBeginDoer:    doer,
		RegisterCompleteDoer: doer,
		LoginBeginDoer:       doer,
		LoginCompleteDoer:    doer,
		ListDoer:             doer,
		UpdateDoer:           doer,
		DeleteDoer:           doer,
		CORSDoer:             doer,
		RestoreResponseBody:  restoreBody,
		scheme:               scheme,
		host:                 host,
		decoder:              dec,
		encoder:              enc,
	}
}

// RegisterBegin returns an endpoint that makes HTTP requests to the passkeys
// service register_begin server.
func (c *Client) RegisterBegin() goa.Endpoint {
	var (
		encodeRequest  = EncodeRegisterBeginRequest(c.encoder)
		decodeResponse = DecodeRegisterBeginResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildRegisterBeginRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.RegisterBeginDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("passkeys", "register_begin", err)
		}
		return decodeResponse(resp)
	}
}

// RegisterComplete returns an endpoint that makes HTTP requests to the
// passkeys service register_complete server.
func (c *Client) RegisterComplete() goa.Endpoint {
	var (
		encodeRequest  = EncodeRegisterCompleteRequest(c.encoder)
		decodeResponse = DecodeRegisterCompleteResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildRegisterCompleteRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.RegisterCompleteDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("passkeys", "register_complete", err)
		}
		return decodeResponse(resp)
	}
}

// LoginBegin returns an endpoint that makes HTTP requests to the passkeys
// service login_begin server.
func (c *Client) LoginBegin() goa.Endpoint {
	var (
		encodeRequest  = EncodeLoginBeginRequest(c.encoder)
		decodeResponse = DecodeLoginBeginResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildLoginBeginRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.LoginBeginDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("passkeys", "login_begin", err)
		}
		return decodeResponse(resp)
	}
}

// LoginComplete returns an endpoint that makes HTTP requests to the passkeys
// service login_complete server.
func (c *Client) LoginComplete() goa.Endpoint {
	var (
		encodeRequest  = EncodeLoginCompleteRequest(c.encoder)
		decodeResponse = DecodeLoginCompleteResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildLoginCompleteRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.LoginCompleteDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("passkeys", "login_complete", err)
		}
		return decodeResponse(resp)
	}
}

// List returns an endpoint that makes HTTP requests to the passkeys service
// list server.
func (c *Client) List() goa.Endpoint {
	var (
		encodeRequest  = EncodeListRequest(c.encoder)
		decodeResponse = DecodeListResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildListRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ListDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("passkeys", "list", err)
		}
		return decodeResponse(resp)
	}
}

// Update returns an endpoint that makes HTTP requests to the passkeys service
// update server.
func (c *Client) Update() goa.Endpoint {
	var (
		encodeRequest  = EncodeUpdateRequest(c.encoder)
		decodeResponse = DecodeUpdateResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildUpdateRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UpdateDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("passkeys", "update", err)
		}
		return decodeResponse(resp)
	}
}

// Delete returns an endpoint that makes HTTP requests to the passkeys service
// delete server.
func (c *Client) Delete() goa.Endpoint {
	var (
		encodeRequest  = EncodeDeleteRequest(c.encoder)
		decodeResponse = DecodeDeleteResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildDeleteRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DeleteDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("passkeys", "delete", err)
		}
		return decodeResponse(resp)
	}
}
