// Code generated by goa v3.20.0, DO NOT EDIT.
//
// passkeys HTTP client types
//
// Command:
// $ goa gen github.com/juicycleff/frank/design -o .

package client

import (
	passkeys "github.com/juicycleff/frank/gen/passkeys"
	goa "goa.design/goa/v3/pkg"
)

// RegisterBeginRequestBody is the type of the "passkeys" service
// "register_begin" endpoint HTTP request body.
type RegisterBeginRequestBody struct {
	// Name of the device
	DeviceName *string `form:"device_name,omitempty" json:"device_name,omitempty" xml:"device_name,omitempty"`
	// Type of the device
	DeviceType *string `form:"device_type,omitempty" json:"device_type,omitempty" xml:"device_type,omitempty"`
}

// RegisterCompleteRequestBody is the type of the "passkeys" service
// "register_complete" endpoint HTTP request body.
type RegisterCompleteRequestBody struct {
	// Registration session ID
	SessionID string `form:"session_id" json:"session_id" xml:"session_id"`
	// WebAuthn credential creation response
	Response any `form:"response" json:"response" xml:"response"`
	// Name of the device
	DeviceName *string `form:"device_name,omitempty" json:"device_name,omitempty" xml:"device_name,omitempty"`
	// Type of the device
	DeviceType *string `form:"device_type,omitempty" json:"device_type,omitempty" xml:"device_type,omitempty"`
}

// LoginCompleteRequestBody is the type of the "passkeys" service
// "login_complete" endpoint HTTP request body.
type LoginCompleteRequestBody struct {
	// Authentication session ID
	SessionID string `form:"session_id" json:"session_id" xml:"session_id"`
	// WebAuthn assertion response
	Response any `form:"response" json:"response" xml:"response"`
}

// UpdateRequestBody is the type of the "passkeys" service "update" endpoint
// HTTP request body.
type UpdateRequestBody struct {
	Request *UpdatePasskeyRequestRequestBody `form:"request" json:"request" xml:"request"`
}

// RegisterBeginResponseBody is the type of the "passkeys" service
// "register_begin" endpoint HTTP response body.
type RegisterBeginResponseBody struct {
	// WebAuthn credential creation options
	Options any `form:"options,omitempty" json:"options,omitempty" xml:"options,omitempty"`
	// Registration session ID
	SessionID *string `form:"session_id,omitempty" json:"session_id,omitempty" xml:"session_id,omitempty"`
}

// RegisterCompleteResponseBody is the type of the "passkeys" service
// "register_complete" endpoint HTTP response body.
type RegisterCompleteResponseBody struct {
	// Passkey ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Passkey name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Device type
	DeviceType *string `form:"device_type,omitempty" json:"device_type,omitempty" xml:"device_type,omitempty"`
	// Registration timestamp
	RegisteredAt *string `form:"registered_at,omitempty" json:"registered_at,omitempty" xml:"registered_at,omitempty"`
	// Last usage timestamp
	LastUsed *string `form:"last_used,omitempty" json:"last_used,omitempty" xml:"last_used,omitempty"`
}

// LoginBeginResponseBody is the type of the "passkeys" service "login_begin"
// endpoint HTTP response body.
type LoginBeginResponseBody struct {
	// WebAuthn credential request options
	Options any `form:"options,omitempty" json:"options,omitempty" xml:"options,omitempty"`
	// Authentication session ID
	SessionID *string `form:"session_id,omitempty" json:"session_id,omitempty" xml:"session_id,omitempty"`
}

// LoginCompleteResponseBody is the type of the "passkeys" service
// "login_complete" endpoint HTTP response body.
type LoginCompleteResponseBody struct {
	// Whether authentication was successful
	Authenticated *bool `form:"authenticated,omitempty" json:"authenticated,omitempty" xml:"authenticated,omitempty"`
	// User ID
	UserID *string `form:"user_id,omitempty" json:"user_id,omitempty" xml:"user_id,omitempty"`
}

// ListResponseBody is the type of the "passkeys" service "list" endpoint HTTP
// response body.
type ListResponseBody struct {
	Passkeys []*RegisteredPasskeyResponseBody `form:"passkeys,omitempty" json:"passkeys,omitempty" xml:"passkeys,omitempty"`
}

// UpdateResponseBody is the type of the "passkeys" service "update" endpoint
// HTTP response body.
type UpdateResponseBody struct {
	// Success message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// RegisterBeginBadRequestResponseBody is the type of the "passkeys" service
// "register_begin" endpoint HTTP response body for the "bad_request" error.
type RegisterBeginBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// RegisterBeginConflictResponseBody is the type of the "passkeys" service
// "register_begin" endpoint HTTP response body for the "conflict" error.
type RegisterBeginConflictResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// RegisterBeginForbiddenResponseBody is the type of the "passkeys" service
// "register_begin" endpoint HTTP response body for the "forbidden" error.
type RegisterBeginForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// RegisterBeginInternalErrorResponseBody is the type of the "passkeys" service
// "register_begin" endpoint HTTP response body for the "internal_error" error.
type RegisterBeginInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// RegisterBeginNotFoundResponseBody is the type of the "passkeys" service
// "register_begin" endpoint HTTP response body for the "not_found" error.
type RegisterBeginNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// RegisterBeginUnauthorizedResponseBody is the type of the "passkeys" service
// "register_begin" endpoint HTTP response body for the "unauthorized" error.
type RegisterBeginUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// RegisterCompleteBadRequestResponseBody is the type of the "passkeys" service
// "register_complete" endpoint HTTP response body for the "bad_request" error.
type RegisterCompleteBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// RegisterCompleteConflictResponseBody is the type of the "passkeys" service
// "register_complete" endpoint HTTP response body for the "conflict" error.
type RegisterCompleteConflictResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// RegisterCompleteForbiddenResponseBody is the type of the "passkeys" service
// "register_complete" endpoint HTTP response body for the "forbidden" error.
type RegisterCompleteForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// RegisterCompleteInternalErrorResponseBody is the type of the "passkeys"
// service "register_complete" endpoint HTTP response body for the
// "internal_error" error.
type RegisterCompleteInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// RegisterCompleteNotFoundResponseBody is the type of the "passkeys" service
// "register_complete" endpoint HTTP response body for the "not_found" error.
type RegisterCompleteNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// RegisterCompleteUnauthorizedResponseBody is the type of the "passkeys"
// service "register_complete" endpoint HTTP response body for the
// "unauthorized" error.
type RegisterCompleteUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// LoginBeginBadRequestResponseBody is the type of the "passkeys" service
// "login_begin" endpoint HTTP response body for the "bad_request" error.
type LoginBeginBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// LoginBeginConflictResponseBody is the type of the "passkeys" service
// "login_begin" endpoint HTTP response body for the "conflict" error.
type LoginBeginConflictResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// LoginBeginForbiddenResponseBody is the type of the "passkeys" service
// "login_begin" endpoint HTTP response body for the "forbidden" error.
type LoginBeginForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// LoginBeginInternalErrorResponseBody is the type of the "passkeys" service
// "login_begin" endpoint HTTP response body for the "internal_error" error.
type LoginBeginInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// LoginBeginNotFoundResponseBody is the type of the "passkeys" service
// "login_begin" endpoint HTTP response body for the "not_found" error.
type LoginBeginNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// LoginBeginUnauthorizedResponseBody is the type of the "passkeys" service
// "login_begin" endpoint HTTP response body for the "unauthorized" error.
type LoginBeginUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// LoginCompleteBadRequestResponseBody is the type of the "passkeys" service
// "login_complete" endpoint HTTP response body for the "bad_request" error.
type LoginCompleteBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// LoginCompleteConflictResponseBody is the type of the "passkeys" service
// "login_complete" endpoint HTTP response body for the "conflict" error.
type LoginCompleteConflictResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// LoginCompleteForbiddenResponseBody is the type of the "passkeys" service
// "login_complete" endpoint HTTP response body for the "forbidden" error.
type LoginCompleteForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// LoginCompleteInternalErrorResponseBody is the type of the "passkeys" service
// "login_complete" endpoint HTTP response body for the "internal_error" error.
type LoginCompleteInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// LoginCompleteNotFoundResponseBody is the type of the "passkeys" service
// "login_complete" endpoint HTTP response body for the "not_found" error.
type LoginCompleteNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// LoginCompleteUnauthorizedResponseBody is the type of the "passkeys" service
// "login_complete" endpoint HTTP response body for the "unauthorized" error.
type LoginCompleteUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListBadRequestResponseBody is the type of the "passkeys" service "list"
// endpoint HTTP response body for the "bad_request" error.
type ListBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListConflictResponseBody is the type of the "passkeys" service "list"
// endpoint HTTP response body for the "conflict" error.
type ListConflictResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListForbiddenResponseBody is the type of the "passkeys" service "list"
// endpoint HTTP response body for the "forbidden" error.
type ListForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListInternalErrorResponseBody is the type of the "passkeys" service "list"
// endpoint HTTP response body for the "internal_error" error.
type ListInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListNotFoundResponseBody is the type of the "passkeys" service "list"
// endpoint HTTP response body for the "not_found" error.
type ListNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListUnauthorizedResponseBody is the type of the "passkeys" service "list"
// endpoint HTTP response body for the "unauthorized" error.
type ListUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateBadRequestResponseBody is the type of the "passkeys" service "update"
// endpoint HTTP response body for the "bad_request" error.
type UpdateBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateConflictResponseBody is the type of the "passkeys" service "update"
// endpoint HTTP response body for the "conflict" error.
type UpdateConflictResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateForbiddenResponseBody is the type of the "passkeys" service "update"
// endpoint HTTP response body for the "forbidden" error.
type UpdateForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateInternalErrorResponseBody is the type of the "passkeys" service
// "update" endpoint HTTP response body for the "internal_error" error.
type UpdateInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateNotFoundResponseBody is the type of the "passkeys" service "update"
// endpoint HTTP response body for the "not_found" error.
type UpdateNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateUnauthorizedResponseBody is the type of the "passkeys" service
// "update" endpoint HTTP response body for the "unauthorized" error.
type UpdateUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteBadRequestResponseBody is the type of the "passkeys" service "delete"
// endpoint HTTP response body for the "bad_request" error.
type DeleteBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteConflictResponseBody is the type of the "passkeys" service "delete"
// endpoint HTTP response body for the "conflict" error.
type DeleteConflictResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteForbiddenResponseBody is the type of the "passkeys" service "delete"
// endpoint HTTP response body for the "forbidden" error.
type DeleteForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteInternalErrorResponseBody is the type of the "passkeys" service
// "delete" endpoint HTTP response body for the "internal_error" error.
type DeleteInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteNotFoundResponseBody is the type of the "passkeys" service "delete"
// endpoint HTTP response body for the "not_found" error.
type DeleteNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteUnauthorizedResponseBody is the type of the "passkeys" service
// "delete" endpoint HTTP response body for the "unauthorized" error.
type DeleteUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// RegisteredPasskeyResponseBody is used to define fields on response body
// types.
type RegisteredPasskeyResponseBody struct {
	// Passkey ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Passkey name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Device type
	DeviceType *string `form:"device_type,omitempty" json:"device_type,omitempty" xml:"device_type,omitempty"`
	// Registration timestamp
	RegisteredAt *string `form:"registered_at,omitempty" json:"registered_at,omitempty" xml:"registered_at,omitempty"`
	// Last usage timestamp
	LastUsed *string `form:"last_used,omitempty" json:"last_used,omitempty" xml:"last_used,omitempty"`
}

// UpdatePasskeyRequestRequestBody is used to define fields on request body
// types.
type UpdatePasskeyRequestRequestBody struct {
	// New passkey name
	Name string `form:"name" json:"name" xml:"name"`
}

// NewRegisterBeginRequestBody builds the HTTP request body from the payload of
// the "register_begin" endpoint of the "passkeys" service.
func NewRegisterBeginRequestBody(p *passkeys.RegisterBeginPayload) *RegisterBeginRequestBody {
	body := &RegisterBeginRequestBody{
		DeviceName: p.DeviceName,
		DeviceType: p.DeviceType,
	}
	return body
}

// NewRegisterCompleteRequestBody builds the HTTP request body from the payload
// of the "register_complete" endpoint of the "passkeys" service.
func NewRegisterCompleteRequestBody(p *passkeys.RegisterCompletePayload) *RegisterCompleteRequestBody {
	body := &RegisterCompleteRequestBody{
		SessionID:  p.SessionID,
		Response:   p.Response,
		DeviceName: p.DeviceName,
		DeviceType: p.DeviceType,
	}
	return body
}

// NewLoginCompleteRequestBody builds the HTTP request body from the payload of
// the "login_complete" endpoint of the "passkeys" service.
func NewLoginCompleteRequestBody(p *passkeys.LoginCompletePayload) *LoginCompleteRequestBody {
	body := &LoginCompleteRequestBody{
		SessionID: p.SessionID,
		Response:  p.Response,
	}
	return body
}

// NewUpdateRequestBody builds the HTTP request body from the payload of the
// "update" endpoint of the "passkeys" service.
func NewUpdateRequestBody(p *passkeys.UpdatePayload) *UpdateRequestBody {
	body := &UpdateRequestBody{}
	if p.Request != nil {
		body.Request = marshalPasskeysUpdatePasskeyRequestToUpdatePasskeyRequestRequestBody(p.Request)
	}
	return body
}

// NewRegisterBeginResultOK builds a "passkeys" service "register_begin"
// endpoint result from a HTTP "OK" response.
func NewRegisterBeginResultOK(body *RegisterBeginResponseBody) *passkeys.RegisterBeginResult {
	v := &passkeys.RegisterBeginResult{
		Options:   body.Options,
		SessionID: *body.SessionID,
	}

	return v
}

// NewRegisterBeginBadRequest builds a passkeys service register_begin endpoint
// bad_request error.
func NewRegisterBeginBadRequest(body *RegisterBeginBadRequestResponseBody) *passkeys.BadRequestError {
	v := &passkeys.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewRegisterBeginConflict builds a passkeys service register_begin endpoint
// conflict error.
func NewRegisterBeginConflict(body *RegisterBeginConflictResponseBody) *passkeys.ConflictError {
	v := &passkeys.ConflictError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewRegisterBeginForbidden builds a passkeys service register_begin endpoint
// forbidden error.
func NewRegisterBeginForbidden(body *RegisterBeginForbiddenResponseBody) *passkeys.ForbiddenError {
	v := &passkeys.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewRegisterBeginInternalError builds a passkeys service register_begin
// endpoint internal_error error.
func NewRegisterBeginInternalError(body *RegisterBeginInternalErrorResponseBody) *passkeys.InternalServerError {
	v := &passkeys.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewRegisterBeginNotFound builds a passkeys service register_begin endpoint
// not_found error.
func NewRegisterBeginNotFound(body *RegisterBeginNotFoundResponseBody) *passkeys.NotFoundError {
	v := &passkeys.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewRegisterBeginUnauthorized builds a passkeys service register_begin
// endpoint unauthorized error.
func NewRegisterBeginUnauthorized(body *RegisterBeginUnauthorizedResponseBody) *passkeys.UnauthorizedError {
	v := &passkeys.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewRegisterCompleteRegisteredPasskeyOK builds a "passkeys" service
// "register_complete" endpoint result from a HTTP "OK" response.
func NewRegisterCompleteRegisteredPasskeyOK(body *RegisterCompleteResponseBody) *passkeys.RegisteredPasskey {
	v := &passkeys.RegisteredPasskey{
		ID:           *body.ID,
		Name:         *body.Name,
		DeviceType:   *body.DeviceType,
		RegisteredAt: *body.RegisteredAt,
		LastUsed:     body.LastUsed,
	}

	return v
}

// NewRegisterCompleteBadRequest builds a passkeys service register_complete
// endpoint bad_request error.
func NewRegisterCompleteBadRequest(body *RegisterCompleteBadRequestResponseBody) *passkeys.BadRequestError {
	v := &passkeys.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewRegisterCompleteConflict builds a passkeys service register_complete
// endpoint conflict error.
func NewRegisterCompleteConflict(body *RegisterCompleteConflictResponseBody) *passkeys.ConflictError {
	v := &passkeys.ConflictError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewRegisterCompleteForbidden builds a passkeys service register_complete
// endpoint forbidden error.
func NewRegisterCompleteForbidden(body *RegisterCompleteForbiddenResponseBody) *passkeys.ForbiddenError {
	v := &passkeys.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewRegisterCompleteInternalError builds a passkeys service register_complete
// endpoint internal_error error.
func NewRegisterCompleteInternalError(body *RegisterCompleteInternalErrorResponseBody) *passkeys.InternalServerError {
	v := &passkeys.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewRegisterCompleteNotFound builds a passkeys service register_complete
// endpoint not_found error.
func NewRegisterCompleteNotFound(body *RegisterCompleteNotFoundResponseBody) *passkeys.NotFoundError {
	v := &passkeys.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewRegisterCompleteUnauthorized builds a passkeys service register_complete
// endpoint unauthorized error.
func NewRegisterCompleteUnauthorized(body *RegisterCompleteUnauthorizedResponseBody) *passkeys.UnauthorizedError {
	v := &passkeys.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewLoginBeginResultOK builds a "passkeys" service "login_begin" endpoint
// result from a HTTP "OK" response.
func NewLoginBeginResultOK(body *LoginBeginResponseBody) *passkeys.LoginBeginResult {
	v := &passkeys.LoginBeginResult{
		Options:   body.Options,
		SessionID: *body.SessionID,
	}

	return v
}

// NewLoginBeginBadRequest builds a passkeys service login_begin endpoint
// bad_request error.
func NewLoginBeginBadRequest(body *LoginBeginBadRequestResponseBody) *passkeys.BadRequestError {
	v := &passkeys.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewLoginBeginConflict builds a passkeys service login_begin endpoint
// conflict error.
func NewLoginBeginConflict(body *LoginBeginConflictResponseBody) *passkeys.ConflictError {
	v := &passkeys.ConflictError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewLoginBeginForbidden builds a passkeys service login_begin endpoint
// forbidden error.
func NewLoginBeginForbidden(body *LoginBeginForbiddenResponseBody) *passkeys.ForbiddenError {
	v := &passkeys.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewLoginBeginInternalError builds a passkeys service login_begin endpoint
// internal_error error.
func NewLoginBeginInternalError(body *LoginBeginInternalErrorResponseBody) *passkeys.InternalServerError {
	v := &passkeys.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewLoginBeginNotFound builds a passkeys service login_begin endpoint
// not_found error.
func NewLoginBeginNotFound(body *LoginBeginNotFoundResponseBody) *passkeys.NotFoundError {
	v := &passkeys.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewLoginBeginUnauthorized builds a passkeys service login_begin endpoint
// unauthorized error.
func NewLoginBeginUnauthorized(body *LoginBeginUnauthorizedResponseBody) *passkeys.UnauthorizedError {
	v := &passkeys.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewLoginCompleteResultOK builds a "passkeys" service "login_complete"
// endpoint result from a HTTP "OK" response.
func NewLoginCompleteResultOK(body *LoginCompleteResponseBody) *passkeys.LoginCompleteResult {
	v := &passkeys.LoginCompleteResult{
		Authenticated: *body.Authenticated,
		UserID:        *body.UserID,
	}

	return v
}

// NewLoginCompleteBadRequest builds a passkeys service login_complete endpoint
// bad_request error.
func NewLoginCompleteBadRequest(body *LoginCompleteBadRequestResponseBody) *passkeys.BadRequestError {
	v := &passkeys.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewLoginCompleteConflict builds a passkeys service login_complete endpoint
// conflict error.
func NewLoginCompleteConflict(body *LoginCompleteConflictResponseBody) *passkeys.ConflictError {
	v := &passkeys.ConflictError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewLoginCompleteForbidden builds a passkeys service login_complete endpoint
// forbidden error.
func NewLoginCompleteForbidden(body *LoginCompleteForbiddenResponseBody) *passkeys.ForbiddenError {
	v := &passkeys.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewLoginCompleteInternalError builds a passkeys service login_complete
// endpoint internal_error error.
func NewLoginCompleteInternalError(body *LoginCompleteInternalErrorResponseBody) *passkeys.InternalServerError {
	v := &passkeys.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewLoginCompleteNotFound builds a passkeys service login_complete endpoint
// not_found error.
func NewLoginCompleteNotFound(body *LoginCompleteNotFoundResponseBody) *passkeys.NotFoundError {
	v := &passkeys.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewLoginCompleteUnauthorized builds a passkeys service login_complete
// endpoint unauthorized error.
func NewLoginCompleteUnauthorized(body *LoginCompleteUnauthorizedResponseBody) *passkeys.UnauthorizedError {
	v := &passkeys.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewListResultOK builds a "passkeys" service "list" endpoint result from a
// HTTP "OK" response.
func NewListResultOK(body *ListResponseBody) *passkeys.ListResult {
	v := &passkeys.ListResult{}
	v.Passkeys = make([]*passkeys.RegisteredPasskey, len(body.Passkeys))
	for i, val := range body.Passkeys {
		v.Passkeys[i] = unmarshalRegisteredPasskeyResponseBodyToPasskeysRegisteredPasskey(val)
	}

	return v
}

// NewListBadRequest builds a passkeys service list endpoint bad_request error.
func NewListBadRequest(body *ListBadRequestResponseBody) *passkeys.BadRequestError {
	v := &passkeys.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewListConflict builds a passkeys service list endpoint conflict error.
func NewListConflict(body *ListConflictResponseBody) *passkeys.ConflictError {
	v := &passkeys.ConflictError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewListForbidden builds a passkeys service list endpoint forbidden error.
func NewListForbidden(body *ListForbiddenResponseBody) *passkeys.ForbiddenError {
	v := &passkeys.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewListInternalError builds a passkeys service list endpoint internal_error
// error.
func NewListInternalError(body *ListInternalErrorResponseBody) *passkeys.InternalServerError {
	v := &passkeys.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewListNotFound builds a passkeys service list endpoint not_found error.
func NewListNotFound(body *ListNotFoundResponseBody) *passkeys.NotFoundError {
	v := &passkeys.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewListUnauthorized builds a passkeys service list endpoint unauthorized
// error.
func NewListUnauthorized(body *ListUnauthorizedResponseBody) *passkeys.UnauthorizedError {
	v := &passkeys.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewUpdateResultOK builds a "passkeys" service "update" endpoint result from
// a HTTP "OK" response.
func NewUpdateResultOK(body *UpdateResponseBody) *passkeys.UpdateResult {
	v := &passkeys.UpdateResult{
		Message: *body.Message,
	}

	return v
}

// NewUpdateBadRequest builds a passkeys service update endpoint bad_request
// error.
func NewUpdateBadRequest(body *UpdateBadRequestResponseBody) *passkeys.BadRequestError {
	v := &passkeys.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewUpdateConflict builds a passkeys service update endpoint conflict error.
func NewUpdateConflict(body *UpdateConflictResponseBody) *passkeys.ConflictError {
	v := &passkeys.ConflictError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewUpdateForbidden builds a passkeys service update endpoint forbidden error.
func NewUpdateForbidden(body *UpdateForbiddenResponseBody) *passkeys.ForbiddenError {
	v := &passkeys.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewUpdateInternalError builds a passkeys service update endpoint
// internal_error error.
func NewUpdateInternalError(body *UpdateInternalErrorResponseBody) *passkeys.InternalServerError {
	v := &passkeys.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewUpdateNotFound builds a passkeys service update endpoint not_found error.
func NewUpdateNotFound(body *UpdateNotFoundResponseBody) *passkeys.NotFoundError {
	v := &passkeys.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewUpdateUnauthorized builds a passkeys service update endpoint unauthorized
// error.
func NewUpdateUnauthorized(body *UpdateUnauthorizedResponseBody) *passkeys.UnauthorizedError {
	v := &passkeys.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewDeleteBadRequest builds a passkeys service delete endpoint bad_request
// error.
func NewDeleteBadRequest(body *DeleteBadRequestResponseBody) *passkeys.BadRequestError {
	v := &passkeys.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewDeleteConflict builds a passkeys service delete endpoint conflict error.
func NewDeleteConflict(body *DeleteConflictResponseBody) *passkeys.ConflictError {
	v := &passkeys.ConflictError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewDeleteForbidden builds a passkeys service delete endpoint forbidden error.
func NewDeleteForbidden(body *DeleteForbiddenResponseBody) *passkeys.ForbiddenError {
	v := &passkeys.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewDeleteInternalError builds a passkeys service delete endpoint
// internal_error error.
func NewDeleteInternalError(body *DeleteInternalErrorResponseBody) *passkeys.InternalServerError {
	v := &passkeys.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewDeleteNotFound builds a passkeys service delete endpoint not_found error.
func NewDeleteNotFound(body *DeleteNotFoundResponseBody) *passkeys.NotFoundError {
	v := &passkeys.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewDeleteUnauthorized builds a passkeys service delete endpoint unauthorized
// error.
func NewDeleteUnauthorized(body *DeleteUnauthorizedResponseBody) *passkeys.UnauthorizedError {
	v := &passkeys.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// ValidateRegisterBeginResponseBody runs the validations defined on
// register_begin_response_body
func ValidateRegisterBeginResponseBody(body *RegisterBeginResponseBody) (err error) {
	if body.Options == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("options", "body"))
	}
	if body.SessionID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("session_id", "body"))
	}
	return
}

// ValidateRegisterCompleteResponseBody runs the validations defined on
// register_complete_response_body
func ValidateRegisterCompleteResponseBody(body *RegisterCompleteResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.DeviceType == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("device_type", "body"))
	}
	if body.RegisteredAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("registered_at", "body"))
	}
	return
}

// ValidateLoginBeginResponseBody runs the validations defined on
// login_begin_response_body
func ValidateLoginBeginResponseBody(body *LoginBeginResponseBody) (err error) {
	if body.Options == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("options", "body"))
	}
	if body.SessionID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("session_id", "body"))
	}
	return
}

// ValidateLoginCompleteResponseBody runs the validations defined on
// login_complete_response_body
func ValidateLoginCompleteResponseBody(body *LoginCompleteResponseBody) (err error) {
	if body.Authenticated == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("authenticated", "body"))
	}
	if body.UserID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("user_id", "body"))
	}
	return
}

// ValidateListResponseBody runs the validations defined on ListResponseBody
func ValidateListResponseBody(body *ListResponseBody) (err error) {
	if body.Passkeys == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("passkeys", "body"))
	}
	for _, e := range body.Passkeys {
		if e != nil {
			if err2 := ValidateRegisteredPasskeyResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateUpdateResponseBody runs the validations defined on UpdateResponseBody
func ValidateUpdateResponseBody(body *UpdateResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateRegisterBeginBadRequestResponseBody runs the validations defined on
// register_begin_bad_request_response_body
func ValidateRegisterBeginBadRequestResponseBody(body *RegisterBeginBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateRegisterBeginConflictResponseBody runs the validations defined on
// register_begin_conflict_response_body
func ValidateRegisterBeginConflictResponseBody(body *RegisterBeginConflictResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateRegisterBeginForbiddenResponseBody runs the validations defined on
// register_begin_forbidden_response_body
func ValidateRegisterBeginForbiddenResponseBody(body *RegisterBeginForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateRegisterBeginInternalErrorResponseBody runs the validations defined
// on register_begin_internal_error_response_body
func ValidateRegisterBeginInternalErrorResponseBody(body *RegisterBeginInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateRegisterBeginNotFoundResponseBody runs the validations defined on
// register_begin_not_found_response_body
func ValidateRegisterBeginNotFoundResponseBody(body *RegisterBeginNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateRegisterBeginUnauthorizedResponseBody runs the validations defined
// on register_begin_unauthorized_response_body
func ValidateRegisterBeginUnauthorizedResponseBody(body *RegisterBeginUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateRegisterCompleteBadRequestResponseBody runs the validations defined
// on register_complete_bad_request_response_body
func ValidateRegisterCompleteBadRequestResponseBody(body *RegisterCompleteBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateRegisterCompleteConflictResponseBody runs the validations defined on
// register_complete_conflict_response_body
func ValidateRegisterCompleteConflictResponseBody(body *RegisterCompleteConflictResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateRegisterCompleteForbiddenResponseBody runs the validations defined
// on register_complete_forbidden_response_body
func ValidateRegisterCompleteForbiddenResponseBody(body *RegisterCompleteForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateRegisterCompleteInternalErrorResponseBody runs the validations
// defined on register_complete_internal_error_response_body
func ValidateRegisterCompleteInternalErrorResponseBody(body *RegisterCompleteInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateRegisterCompleteNotFoundResponseBody runs the validations defined on
// register_complete_not_found_response_body
func ValidateRegisterCompleteNotFoundResponseBody(body *RegisterCompleteNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateRegisterCompleteUnauthorizedResponseBody runs the validations
// defined on register_complete_unauthorized_response_body
func ValidateRegisterCompleteUnauthorizedResponseBody(body *RegisterCompleteUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateLoginBeginBadRequestResponseBody runs the validations defined on
// login_begin_bad_request_response_body
func ValidateLoginBeginBadRequestResponseBody(body *LoginBeginBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateLoginBeginConflictResponseBody runs the validations defined on
// login_begin_conflict_response_body
func ValidateLoginBeginConflictResponseBody(body *LoginBeginConflictResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateLoginBeginForbiddenResponseBody runs the validations defined on
// login_begin_forbidden_response_body
func ValidateLoginBeginForbiddenResponseBody(body *LoginBeginForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateLoginBeginInternalErrorResponseBody runs the validations defined on
// login_begin_internal_error_response_body
func ValidateLoginBeginInternalErrorResponseBody(body *LoginBeginInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateLoginBeginNotFoundResponseBody runs the validations defined on
// login_begin_not_found_response_body
func ValidateLoginBeginNotFoundResponseBody(body *LoginBeginNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateLoginBeginUnauthorizedResponseBody runs the validations defined on
// login_begin_unauthorized_response_body
func ValidateLoginBeginUnauthorizedResponseBody(body *LoginBeginUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateLoginCompleteBadRequestResponseBody runs the validations defined on
// login_complete_bad_request_response_body
func ValidateLoginCompleteBadRequestResponseBody(body *LoginCompleteBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateLoginCompleteConflictResponseBody runs the validations defined on
// login_complete_conflict_response_body
func ValidateLoginCompleteConflictResponseBody(body *LoginCompleteConflictResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateLoginCompleteForbiddenResponseBody runs the validations defined on
// login_complete_forbidden_response_body
func ValidateLoginCompleteForbiddenResponseBody(body *LoginCompleteForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateLoginCompleteInternalErrorResponseBody runs the validations defined
// on login_complete_internal_error_response_body
func ValidateLoginCompleteInternalErrorResponseBody(body *LoginCompleteInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateLoginCompleteNotFoundResponseBody runs the validations defined on
// login_complete_not_found_response_body
func ValidateLoginCompleteNotFoundResponseBody(body *LoginCompleteNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateLoginCompleteUnauthorizedResponseBody runs the validations defined
// on login_complete_unauthorized_response_body
func ValidateLoginCompleteUnauthorizedResponseBody(body *LoginCompleteUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateListBadRequestResponseBody runs the validations defined on
// list_bad_request_response_body
func ValidateListBadRequestResponseBody(body *ListBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateListConflictResponseBody runs the validations defined on
// list_conflict_response_body
func ValidateListConflictResponseBody(body *ListConflictResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateListForbiddenResponseBody runs the validations defined on
// list_forbidden_response_body
func ValidateListForbiddenResponseBody(body *ListForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateListInternalErrorResponseBody runs the validations defined on
// list_internal_error_response_body
func ValidateListInternalErrorResponseBody(body *ListInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateListNotFoundResponseBody runs the validations defined on
// list_not_found_response_body
func ValidateListNotFoundResponseBody(body *ListNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateListUnauthorizedResponseBody runs the validations defined on
// list_unauthorized_response_body
func ValidateListUnauthorizedResponseBody(body *ListUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateBadRequestResponseBody runs the validations defined on
// update_bad_request_response_body
func ValidateUpdateBadRequestResponseBody(body *UpdateBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateConflictResponseBody runs the validations defined on
// update_conflict_response_body
func ValidateUpdateConflictResponseBody(body *UpdateConflictResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateForbiddenResponseBody runs the validations defined on
// update_forbidden_response_body
func ValidateUpdateForbiddenResponseBody(body *UpdateForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateInternalErrorResponseBody runs the validations defined on
// update_internal_error_response_body
func ValidateUpdateInternalErrorResponseBody(body *UpdateInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateNotFoundResponseBody runs the validations defined on
// update_not_found_response_body
func ValidateUpdateNotFoundResponseBody(body *UpdateNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateUnauthorizedResponseBody runs the validations defined on
// update_unauthorized_response_body
func ValidateUpdateUnauthorizedResponseBody(body *UpdateUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteBadRequestResponseBody runs the validations defined on
// delete_bad_request_response_body
func ValidateDeleteBadRequestResponseBody(body *DeleteBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteConflictResponseBody runs the validations defined on
// delete_conflict_response_body
func ValidateDeleteConflictResponseBody(body *DeleteConflictResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteForbiddenResponseBody runs the validations defined on
// delete_forbidden_response_body
func ValidateDeleteForbiddenResponseBody(body *DeleteForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteInternalErrorResponseBody runs the validations defined on
// delete_internal_error_response_body
func ValidateDeleteInternalErrorResponseBody(body *DeleteInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteNotFoundResponseBody runs the validations defined on
// delete_not_found_response_body
func ValidateDeleteNotFoundResponseBody(body *DeleteNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteUnauthorizedResponseBody runs the validations defined on
// delete_unauthorized_response_body
func ValidateDeleteUnauthorizedResponseBody(body *DeleteUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateRegisteredPasskeyResponseBody runs the validations defined on
// RegisteredPasskeyResponseBody
func ValidateRegisteredPasskeyResponseBody(body *RegisteredPasskeyResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.DeviceType == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("device_type", "body"))
	}
	if body.RegisteredAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("registered_at", "body"))
	}
	return
}
