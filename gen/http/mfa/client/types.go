// Code generated by goa v3.20.0, DO NOT EDIT.
//
// mfa HTTP client types
//
// Command:
// $ goa gen github.com/juicycleff/frank/design -o .

package client

import (
	mfa "github.com/juicycleff/frank/gen/mfa"
	goa "goa.design/goa/v3/pkg"
)

// EnrollRequestBody is the type of the "mfa" service "enroll" endpoint HTTP
// request body.
type EnrollRequestBody struct {
	Request *MFAEnrollRequestRequestBody `form:"request" json:"request" xml:"request"`
}

// VerifyRequestBody is the type of the "mfa" service "verify" endpoint HTTP
// request body.
type VerifyRequestBody struct {
	Request *MFAVerifyRequestRequestBody `form:"request" json:"request" xml:"request"`
}

// UnenrollRequestBody is the type of the "mfa" service "unenroll" endpoint
// HTTP request body.
type UnenrollRequestBody struct {
	Request *MFAUnEnrollRequestRequestBody `form:"request" json:"request" xml:"request"`
}

// SendCodeRequestBody is the type of the "mfa" service "send_code" endpoint
// HTTP request body.
type SendCodeRequestBody struct {
	Request *SendMFACodeRequestRequestBody `form:"request" json:"request" xml:"request"`
}

// EnrollResponseBody is the type of the "mfa" service "enroll" endpoint HTTP
// response body.
type EnrollResponseBody struct {
	Totp        *TOTPEnrollResponseResponseBody  `form:"totp,omitempty" json:"totp,omitempty" xml:"totp,omitempty"`
	BackupCodes *BackupCodesResponseResponseBody `form:"backup_codes,omitempty" json:"backup_codes,omitempty" xml:"backup_codes,omitempty"`
	// Success message for SMS/Email enrollment
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// VerifyResponseBody is the type of the "mfa" service "verify" endpoint HTTP
// response body.
type VerifyResponseBody struct {
	// Whether verification was successful
	Verified *bool `form:"verified,omitempty" json:"verified,omitempty" xml:"verified,omitempty"`
}

// UnenrollResponseBody is the type of the "mfa" service "unenroll" endpoint
// HTTP response body.
type UnenrollResponseBody struct {
	// Success message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// MethodsResponseBody is the type of the "mfa" service "methods" endpoint HTTP
// response body.
type MethodsResponseBody struct {
	// Enabled MFA methods
	Methods []string `form:"methods,omitempty" json:"methods,omitempty" xml:"methods,omitempty"`
}

// SendCodeResponseBody is the type of the "mfa" service "send_code" endpoint
// HTTP response body.
type SendCodeResponseBody struct {
	// Success message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// When the code expires
	ExpiresAt *int64 `form:"expires_at,omitempty" json:"expires_at,omitempty" xml:"expires_at,omitempty"`
}

// EnrollBadRequestResponseBody is the type of the "mfa" service "enroll"
// endpoint HTTP response body for the "bad_request" error.
type EnrollBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// EnrollForbiddenResponseBody is the type of the "mfa" service "enroll"
// endpoint HTTP response body for the "forbidden" error.
type EnrollForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// EnrollInternalErrorResponseBody is the type of the "mfa" service "enroll"
// endpoint HTTP response body for the "internal_error" error.
type EnrollInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// EnrollNotFoundResponseBody is the type of the "mfa" service "enroll"
// endpoint HTTP response body for the "not_found" error.
type EnrollNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// EnrollUnauthorizedResponseBody is the type of the "mfa" service "enroll"
// endpoint HTTP response body for the "unauthorized" error.
type EnrollUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// VerifyBadRequestResponseBody is the type of the "mfa" service "verify"
// endpoint HTTP response body for the "bad_request" error.
type VerifyBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// VerifyForbiddenResponseBody is the type of the "mfa" service "verify"
// endpoint HTTP response body for the "forbidden" error.
type VerifyForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// VerifyInternalErrorResponseBody is the type of the "mfa" service "verify"
// endpoint HTTP response body for the "internal_error" error.
type VerifyInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// VerifyNotFoundResponseBody is the type of the "mfa" service "verify"
// endpoint HTTP response body for the "not_found" error.
type VerifyNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// VerifyUnauthorizedResponseBody is the type of the "mfa" service "verify"
// endpoint HTTP response body for the "unauthorized" error.
type VerifyUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UnenrollBadRequestResponseBody is the type of the "mfa" service "unenroll"
// endpoint HTTP response body for the "bad_request" error.
type UnenrollBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UnenrollForbiddenResponseBody is the type of the "mfa" service "unenroll"
// endpoint HTTP response body for the "forbidden" error.
type UnenrollForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UnenrollInternalErrorResponseBody is the type of the "mfa" service
// "unenroll" endpoint HTTP response body for the "internal_error" error.
type UnenrollInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UnenrollNotFoundResponseBody is the type of the "mfa" service "unenroll"
// endpoint HTTP response body for the "not_found" error.
type UnenrollNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UnenrollUnauthorizedResponseBody is the type of the "mfa" service "unenroll"
// endpoint HTTP response body for the "unauthorized" error.
type UnenrollUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// MethodsBadRequestResponseBody is the type of the "mfa" service "methods"
// endpoint HTTP response body for the "bad_request" error.
type MethodsBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// MethodsForbiddenResponseBody is the type of the "mfa" service "methods"
// endpoint HTTP response body for the "forbidden" error.
type MethodsForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// MethodsInternalErrorResponseBody is the type of the "mfa" service "methods"
// endpoint HTTP response body for the "internal_error" error.
type MethodsInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// MethodsNotFoundResponseBody is the type of the "mfa" service "methods"
// endpoint HTTP response body for the "not_found" error.
type MethodsNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// MethodsUnauthorizedResponseBody is the type of the "mfa" service "methods"
// endpoint HTTP response body for the "unauthorized" error.
type MethodsUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// SendCodeBadRequestResponseBody is the type of the "mfa" service "send_code"
// endpoint HTTP response body for the "bad_request" error.
type SendCodeBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// SendCodeForbiddenResponseBody is the type of the "mfa" service "send_code"
// endpoint HTTP response body for the "forbidden" error.
type SendCodeForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// SendCodeInternalErrorResponseBody is the type of the "mfa" service
// "send_code" endpoint HTTP response body for the "internal_error" error.
type SendCodeInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// SendCodeNotFoundResponseBody is the type of the "mfa" service "send_code"
// endpoint HTTP response body for the "not_found" error.
type SendCodeNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// SendCodeUnauthorizedResponseBody is the type of the "mfa" service
// "send_code" endpoint HTTP response body for the "unauthorized" error.
type SendCodeUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// MFAEnrollRequestRequestBody is used to define fields on request body types.
type MFAEnrollRequestRequestBody struct {
	// MFA method to enroll
	Method string `form:"method" json:"method" xml:"method"`
	// Phone number for SMS verification
	PhoneNumber *string `form:"phone_number,omitempty" json:"phone_number,omitempty" xml:"phone_number,omitempty"`
	// Email for email verification
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
}

// TOTPEnrollResponseResponseBody is used to define fields on response body
// types.
type TOTPEnrollResponseResponseBody struct {
	// TOTP secret key
	Secret *string `form:"secret,omitempty" json:"secret,omitempty" xml:"secret,omitempty"`
	// TOTP URI for QR code generation
	URI *string `form:"uri,omitempty" json:"uri,omitempty" xml:"uri,omitempty"`
	// TOTP QR code as base64 image
	QrCodeData *string `form:"qr_code_data,omitempty" json:"qr_code_data,omitempty" xml:"qr_code_data,omitempty"`
}

// BackupCodesResponseResponseBody is used to define fields on response body
// types.
type BackupCodesResponseResponseBody struct {
	// List of backup codes
	BackupCodes []string `form:"backup_codes,omitempty" json:"backup_codes,omitempty" xml:"backup_codes,omitempty"`
}

// MFAVerifyRequestRequestBody is used to define fields on request body types.
type MFAVerifyRequestRequestBody struct {
	// MFA method to verify
	Method string `form:"method" json:"method" xml:"method"`
	// Verification code
	Code string `form:"code" json:"code" xml:"code"`
	// Phone number for SMS verification
	PhoneNumber *string `form:"phone_number,omitempty" json:"phone_number,omitempty" xml:"phone_number,omitempty"`
}

// MFAUnEnrollRequestRequestBody is used to define fields on request body types.
type MFAUnEnrollRequestRequestBody struct {
	// MFA method to unenroll
	Method string `form:"method" json:"method" xml:"method"`
}

// SendMFACodeRequestRequestBody is used to define fields on request body types.
type SendMFACodeRequestRequestBody struct {
	// MFA method
	Method string `form:"method" json:"method" xml:"method"`
}

// NewEnrollRequestBody builds the HTTP request body from the payload of the
// "enroll" endpoint of the "mfa" service.
func NewEnrollRequestBody(p *mfa.EnrollPayload) *EnrollRequestBody {
	body := &EnrollRequestBody{}
	if p.Request != nil {
		body.Request = marshalDesigntypesMFAEnrollRequestToMFAEnrollRequestRequestBody(p.Request)
	}
	return body
}

// NewVerifyRequestBody builds the HTTP request body from the payload of the
// "verify" endpoint of the "mfa" service.
func NewVerifyRequestBody(p *mfa.VerifyPayload) *VerifyRequestBody {
	body := &VerifyRequestBody{}
	if p.Request != nil {
		body.Request = marshalDesigntypesMFAVerifyRequestToMFAVerifyRequestRequestBody(p.Request)
	}
	return body
}

// NewUnenrollRequestBody builds the HTTP request body from the payload of the
// "unenroll" endpoint of the "mfa" service.
func NewUnenrollRequestBody(p *mfa.UnenrollPayload) *UnenrollRequestBody {
	body := &UnenrollRequestBody{}
	if p.Request != nil {
		body.Request = marshalDesigntypesMFAUnEnrollRequestToMFAUnEnrollRequestRequestBody(p.Request)
	}
	return body
}

// NewSendCodeRequestBody builds the HTTP request body from the payload of the
// "send_code" endpoint of the "mfa" service.
func NewSendCodeRequestBody(p *mfa.SendCodePayload) *SendCodeRequestBody {
	body := &SendCodeRequestBody{}
	if p.Request != nil {
		body.Request = marshalDesigntypesSendMFACodeRequestToSendMFACodeRequestRequestBody(p.Request)
	}
	return body
}

// NewEnrollResultOK builds a "mfa" service "enroll" endpoint result from a
// HTTP "OK" response.
func NewEnrollResultOK(body *EnrollResponseBody) *mfa.EnrollResult {
	v := &mfa.EnrollResult{
		Message: body.Message,
	}
	if body.Totp != nil {
		v.Totp = unmarshalTOTPEnrollResponseResponseBodyToDesigntypesTOTPEnrollResponse(body.Totp)
	}
	if body.BackupCodes != nil {
		v.BackupCodes = unmarshalBackupCodesResponseResponseBodyToDesigntypesBackupCodesResponse(body.BackupCodes)
	}

	return v
}

// NewEnrollBadRequest builds a mfa service enroll endpoint bad_request error.
func NewEnrollBadRequest(body *EnrollBadRequestResponseBody) *mfa.BadRequestError {
	v := &mfa.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewEnrollForbidden builds a mfa service enroll endpoint forbidden error.
func NewEnrollForbidden(body *EnrollForbiddenResponseBody) *mfa.ForbiddenError {
	v := &mfa.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewEnrollInternalError builds a mfa service enroll endpoint internal_error
// error.
func NewEnrollInternalError(body *EnrollInternalErrorResponseBody) *mfa.InternalServerError {
	v := &mfa.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewEnrollNotFound builds a mfa service enroll endpoint not_found error.
func NewEnrollNotFound(body *EnrollNotFoundResponseBody) *mfa.NotFoundError {
	v := &mfa.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewEnrollUnauthorized builds a mfa service enroll endpoint unauthorized
// error.
func NewEnrollUnauthorized(body *EnrollUnauthorizedResponseBody) *mfa.UnauthorizedError {
	v := &mfa.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewVerifyResultOK builds a "mfa" service "verify" endpoint result from a
// HTTP "OK" response.
func NewVerifyResultOK(body *VerifyResponseBody) *mfa.VerifyResult {
	v := &mfa.VerifyResult{
		Verified: *body.Verified,
	}

	return v
}

// NewVerifyBadRequest builds a mfa service verify endpoint bad_request error.
func NewVerifyBadRequest(body *VerifyBadRequestResponseBody) *mfa.BadRequestError {
	v := &mfa.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewVerifyForbidden builds a mfa service verify endpoint forbidden error.
func NewVerifyForbidden(body *VerifyForbiddenResponseBody) *mfa.ForbiddenError {
	v := &mfa.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewVerifyInternalError builds a mfa service verify endpoint internal_error
// error.
func NewVerifyInternalError(body *VerifyInternalErrorResponseBody) *mfa.InternalServerError {
	v := &mfa.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewVerifyNotFound builds a mfa service verify endpoint not_found error.
func NewVerifyNotFound(body *VerifyNotFoundResponseBody) *mfa.NotFoundError {
	v := &mfa.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewVerifyUnauthorized builds a mfa service verify endpoint unauthorized
// error.
func NewVerifyUnauthorized(body *VerifyUnauthorizedResponseBody) *mfa.UnauthorizedError {
	v := &mfa.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewUnenrollResultOK builds a "mfa" service "unenroll" endpoint result from a
// HTTP "OK" response.
func NewUnenrollResultOK(body *UnenrollResponseBody) *mfa.UnenrollResult {
	v := &mfa.UnenrollResult{
		Message: *body.Message,
	}

	return v
}

// NewUnenrollBadRequest builds a mfa service unenroll endpoint bad_request
// error.
func NewUnenrollBadRequest(body *UnenrollBadRequestResponseBody) *mfa.BadRequestError {
	v := &mfa.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewUnenrollForbidden builds a mfa service unenroll endpoint forbidden error.
func NewUnenrollForbidden(body *UnenrollForbiddenResponseBody) *mfa.ForbiddenError {
	v := &mfa.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewUnenrollInternalError builds a mfa service unenroll endpoint
// internal_error error.
func NewUnenrollInternalError(body *UnenrollInternalErrorResponseBody) *mfa.InternalServerError {
	v := &mfa.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewUnenrollNotFound builds a mfa service unenroll endpoint not_found error.
func NewUnenrollNotFound(body *UnenrollNotFoundResponseBody) *mfa.NotFoundError {
	v := &mfa.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewUnenrollUnauthorized builds a mfa service unenroll endpoint unauthorized
// error.
func NewUnenrollUnauthorized(body *UnenrollUnauthorizedResponseBody) *mfa.UnauthorizedError {
	v := &mfa.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewMethodsResultOK builds a "mfa" service "methods" endpoint result from a
// HTTP "OK" response.
func NewMethodsResultOK(body *MethodsResponseBody) *mfa.MethodsResult {
	v := &mfa.MethodsResult{}
	v.Methods = make([]string, len(body.Methods))
	for i, val := range body.Methods {
		v.Methods[i] = val
	}

	return v
}

// NewMethodsBadRequest builds a mfa service methods endpoint bad_request error.
func NewMethodsBadRequest(body *MethodsBadRequestResponseBody) *mfa.BadRequestError {
	v := &mfa.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewMethodsForbidden builds a mfa service methods endpoint forbidden error.
func NewMethodsForbidden(body *MethodsForbiddenResponseBody) *mfa.ForbiddenError {
	v := &mfa.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewMethodsInternalError builds a mfa service methods endpoint internal_error
// error.
func NewMethodsInternalError(body *MethodsInternalErrorResponseBody) *mfa.InternalServerError {
	v := &mfa.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewMethodsNotFound builds a mfa service methods endpoint not_found error.
func NewMethodsNotFound(body *MethodsNotFoundResponseBody) *mfa.NotFoundError {
	v := &mfa.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewMethodsUnauthorized builds a mfa service methods endpoint unauthorized
// error.
func NewMethodsUnauthorized(body *MethodsUnauthorizedResponseBody) *mfa.UnauthorizedError {
	v := &mfa.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewSendCodeResultOK builds a "mfa" service "send_code" endpoint result from
// a HTTP "OK" response.
func NewSendCodeResultOK(body *SendCodeResponseBody) *mfa.SendCodeResult {
	v := &mfa.SendCodeResult{
		Message:   *body.Message,
		ExpiresAt: *body.ExpiresAt,
	}

	return v
}

// NewSendCodeBadRequest builds a mfa service send_code endpoint bad_request
// error.
func NewSendCodeBadRequest(body *SendCodeBadRequestResponseBody) *mfa.BadRequestError {
	v := &mfa.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewSendCodeForbidden builds a mfa service send_code endpoint forbidden error.
func NewSendCodeForbidden(body *SendCodeForbiddenResponseBody) *mfa.ForbiddenError {
	v := &mfa.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewSendCodeInternalError builds a mfa service send_code endpoint
// internal_error error.
func NewSendCodeInternalError(body *SendCodeInternalErrorResponseBody) *mfa.InternalServerError {
	v := &mfa.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewSendCodeNotFound builds a mfa service send_code endpoint not_found error.
func NewSendCodeNotFound(body *SendCodeNotFoundResponseBody) *mfa.NotFoundError {
	v := &mfa.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewSendCodeUnauthorized builds a mfa service send_code endpoint unauthorized
// error.
func NewSendCodeUnauthorized(body *SendCodeUnauthorizedResponseBody) *mfa.UnauthorizedError {
	v := &mfa.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// ValidateEnrollResponseBody runs the validations defined on EnrollResponseBody
func ValidateEnrollResponseBody(body *EnrollResponseBody) (err error) {
	if body.Totp != nil {
		if err2 := ValidateTOTPEnrollResponseResponseBody(body.Totp); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.BackupCodes != nil {
		if err2 := ValidateBackupCodesResponseResponseBody(body.BackupCodes); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateVerifyResponseBody runs the validations defined on VerifyResponseBody
func ValidateVerifyResponseBody(body *VerifyResponseBody) (err error) {
	if body.Verified == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("verified", "body"))
	}
	return
}

// ValidateUnenrollResponseBody runs the validations defined on
// UnenrollResponseBody
func ValidateUnenrollResponseBody(body *UnenrollResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateMethodsResponseBody runs the validations defined on
// MethodsResponseBody
func ValidateMethodsResponseBody(body *MethodsResponseBody) (err error) {
	if body.Methods == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("methods", "body"))
	}
	return
}

// ValidateSendCodeResponseBody runs the validations defined on
// send_code_response_body
func ValidateSendCodeResponseBody(body *SendCodeResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.ExpiresAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("expires_at", "body"))
	}
	return
}

// ValidateEnrollBadRequestResponseBody runs the validations defined on
// enroll_bad_request_response_body
func ValidateEnrollBadRequestResponseBody(body *EnrollBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateEnrollForbiddenResponseBody runs the validations defined on
// enroll_forbidden_response_body
func ValidateEnrollForbiddenResponseBody(body *EnrollForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateEnrollInternalErrorResponseBody runs the validations defined on
// enroll_internal_error_response_body
func ValidateEnrollInternalErrorResponseBody(body *EnrollInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateEnrollNotFoundResponseBody runs the validations defined on
// enroll_not_found_response_body
func ValidateEnrollNotFoundResponseBody(body *EnrollNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateEnrollUnauthorizedResponseBody runs the validations defined on
// enroll_unauthorized_response_body
func ValidateEnrollUnauthorizedResponseBody(body *EnrollUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateVerifyBadRequestResponseBody runs the validations defined on
// verify_bad_request_response_body
func ValidateVerifyBadRequestResponseBody(body *VerifyBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateVerifyForbiddenResponseBody runs the validations defined on
// verify_forbidden_response_body
func ValidateVerifyForbiddenResponseBody(body *VerifyForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateVerifyInternalErrorResponseBody runs the validations defined on
// verify_internal_error_response_body
func ValidateVerifyInternalErrorResponseBody(body *VerifyInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateVerifyNotFoundResponseBody runs the validations defined on
// verify_not_found_response_body
func ValidateVerifyNotFoundResponseBody(body *VerifyNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateVerifyUnauthorizedResponseBody runs the validations defined on
// verify_unauthorized_response_body
func ValidateVerifyUnauthorizedResponseBody(body *VerifyUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUnenrollBadRequestResponseBody runs the validations defined on
// unenroll_bad_request_response_body
func ValidateUnenrollBadRequestResponseBody(body *UnenrollBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUnenrollForbiddenResponseBody runs the validations defined on
// unenroll_forbidden_response_body
func ValidateUnenrollForbiddenResponseBody(body *UnenrollForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUnenrollInternalErrorResponseBody runs the validations defined on
// unenroll_internal_error_response_body
func ValidateUnenrollInternalErrorResponseBody(body *UnenrollInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUnenrollNotFoundResponseBody runs the validations defined on
// unenroll_not_found_response_body
func ValidateUnenrollNotFoundResponseBody(body *UnenrollNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUnenrollUnauthorizedResponseBody runs the validations defined on
// unenroll_unauthorized_response_body
func ValidateUnenrollUnauthorizedResponseBody(body *UnenrollUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateMethodsBadRequestResponseBody runs the validations defined on
// methods_bad_request_response_body
func ValidateMethodsBadRequestResponseBody(body *MethodsBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateMethodsForbiddenResponseBody runs the validations defined on
// methods_forbidden_response_body
func ValidateMethodsForbiddenResponseBody(body *MethodsForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateMethodsInternalErrorResponseBody runs the validations defined on
// methods_internal_error_response_body
func ValidateMethodsInternalErrorResponseBody(body *MethodsInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateMethodsNotFoundResponseBody runs the validations defined on
// methods_not_found_response_body
func ValidateMethodsNotFoundResponseBody(body *MethodsNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateMethodsUnauthorizedResponseBody runs the validations defined on
// methods_unauthorized_response_body
func ValidateMethodsUnauthorizedResponseBody(body *MethodsUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateSendCodeBadRequestResponseBody runs the validations defined on
// send_code_bad_request_response_body
func ValidateSendCodeBadRequestResponseBody(body *SendCodeBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateSendCodeForbiddenResponseBody runs the validations defined on
// send_code_forbidden_response_body
func ValidateSendCodeForbiddenResponseBody(body *SendCodeForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateSendCodeInternalErrorResponseBody runs the validations defined on
// send_code_internal_error_response_body
func ValidateSendCodeInternalErrorResponseBody(body *SendCodeInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateSendCodeNotFoundResponseBody runs the validations defined on
// send_code_not_found_response_body
func ValidateSendCodeNotFoundResponseBody(body *SendCodeNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateSendCodeUnauthorizedResponseBody runs the validations defined on
// send_code_unauthorized_response_body
func ValidateSendCodeUnauthorizedResponseBody(body *SendCodeUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateMFAEnrollRequestRequestBody runs the validations defined on
// MFAEnrollRequestRequestBody
func ValidateMFAEnrollRequestRequestBody(body *MFAEnrollRequestRequestBody) (err error) {
	if !(body.Method == "totp" || body.Method == "sms" || body.Method == "email" || body.Method == "backup_codes") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.method", body.Method, []any{"totp", "sms", "email", "backup_codes"}))
	}
	if body.Email != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", *body.Email, goa.FormatEmail))
	}
	return
}

// ValidateTOTPEnrollResponseResponseBody runs the validations defined on
// TOTPEnrollResponseResponseBody
func ValidateTOTPEnrollResponseResponseBody(body *TOTPEnrollResponseResponseBody) (err error) {
	if body.Secret == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("secret", "body"))
	}
	if body.URI == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("uri", "body"))
	}
	if body.QrCodeData == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("qr_code_data", "body"))
	}
	return
}

// ValidateBackupCodesResponseResponseBody runs the validations defined on
// BackupCodesResponseResponseBody
func ValidateBackupCodesResponseResponseBody(body *BackupCodesResponseResponseBody) (err error) {
	if body.BackupCodes == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("backup_codes", "body"))
	}
	return
}

// ValidateMFAVerifyRequestRequestBody runs the validations defined on
// MFAVerifyRequestRequestBody
func ValidateMFAVerifyRequestRequestBody(body *MFAVerifyRequestRequestBody) (err error) {
	if !(body.Method == "totp" || body.Method == "sms" || body.Method == "email" || body.Method == "backup_codes") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.method", body.Method, []any{"totp", "sms", "email", "backup_codes"}))
	}
	return
}

// ValidateMFAUnEnrollRequestRequestBody runs the validations defined on
// MFAUnEnrollRequestRequestBody
func ValidateMFAUnEnrollRequestRequestBody(body *MFAUnEnrollRequestRequestBody) (err error) {
	if !(body.Method == "totp" || body.Method == "sms" || body.Method == "email" || body.Method == "backup_codes" || body.Method == "all") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.method", body.Method, []any{"totp", "sms", "email", "backup_codes", "all"}))
	}
	return
}

// ValidateSendMFACodeRequestRequestBody runs the validations defined on
// SendMFACodeRequestRequestBody
func ValidateSendMFACodeRequestRequestBody(body *SendMFACodeRequestRequestBody) (err error) {
	if !(body.Method == "sms" || body.Method == "email") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.method", body.Method, []any{"sms", "email"}))
	}
	return
}
