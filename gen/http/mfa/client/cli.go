// Code generated by goa v3.20.0, DO NOT EDIT.
//
// mfa HTTP client CLI support package
//
// Command:
// $ goa gen github.com/juicycleff/frank/design -o .

package client

import (
	"encoding/json"
	"fmt"

	mfa "github.com/juicycleff/frank/gen/mfa"
	goa "goa.design/goa/v3/pkg"
)

// BuildEnrollPayload builds the payload for the mfa enroll endpoint from CLI
// flags.
func BuildEnrollPayload(mfaEnrollBody string, mfaEnrollJWT string) (*mfa.EnrollPayload, error) {
	var err error
	var body EnrollRequestBody
	{
		err = json.Unmarshal([]byte(mfaEnrollBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"request\": {\n         \"email\": \"katrina@huels.name\",\n         \"method\": \"totp\",\n         \"phone_number\": \"Delectus rem voluptatem vel laborum commodi.\"\n      }\n   }'")
		}
		if body.Request == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("request", "body"))
		}
		if body.Request != nil {
			if err2 := ValidateMFAEnrollRequestRequestBody(body.Request); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
		if err != nil {
			return nil, err
		}
	}
	var jwt *string
	{
		if mfaEnrollJWT != "" {
			jwt = &mfaEnrollJWT
		}
	}
	v := &mfa.EnrollPayload{}
	if body.Request != nil {
		v.Request = marshalMFAEnrollRequestRequestBodyToDesigntypesMFAEnrollRequest(body.Request)
	}
	v.JWT = jwt

	return v, nil
}

// BuildVerifyPayload builds the payload for the mfa verify endpoint from CLI
// flags.
func BuildVerifyPayload(mfaVerifyBody string, mfaVerifyJWT string) (*mfa.VerifyPayload, error) {
	var err error
	var body VerifyRequestBody
	{
		err = json.Unmarshal([]byte(mfaVerifyBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"request\": {\n         \"code\": \"123456\",\n         \"method\": \"totp\",\n         \"phone_number\": \"Molestiae provident.\"\n      }\n   }'")
		}
		if body.Request == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("request", "body"))
		}
		if body.Request != nil {
			if err2 := ValidateMFAVerifyRequestRequestBody(body.Request); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
		if err != nil {
			return nil, err
		}
	}
	var jwt *string
	{
		if mfaVerifyJWT != "" {
			jwt = &mfaVerifyJWT
		}
	}
	v := &mfa.VerifyPayload{}
	if body.Request != nil {
		v.Request = marshalMFAVerifyRequestRequestBodyToDesigntypesMFAVerifyRequest(body.Request)
	}
	v.JWT = jwt

	return v, nil
}

// BuildUnenrollPayload builds the payload for the mfa unenroll endpoint from
// CLI flags.
func BuildUnenrollPayload(mfaUnenrollBody string, mfaUnenrollJWT string) (*mfa.UnenrollPayload, error) {
	var err error
	var body UnenrollRequestBody
	{
		err = json.Unmarshal([]byte(mfaUnenrollBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"request\": {\n         \"method\": \"totp\"\n      }\n   }'")
		}
		if body.Request == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("request", "body"))
		}
		if body.Request != nil {
			if err2 := ValidateMFAUnEnrollRequestRequestBody(body.Request); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
		if err != nil {
			return nil, err
		}
	}
	var jwt *string
	{
		if mfaUnenrollJWT != "" {
			jwt = &mfaUnenrollJWT
		}
	}
	v := &mfa.UnenrollPayload{}
	if body.Request != nil {
		v.Request = marshalMFAUnEnrollRequestRequestBodyToDesigntypesMFAUnEnrollRequest(body.Request)
	}
	v.JWT = jwt

	return v, nil
}

// BuildMethodsPayload builds the payload for the mfa methods endpoint from CLI
// flags.
func BuildMethodsPayload(mfaMethodsJWT string) (*mfa.MethodsPayload, error) {
	var jwt *string
	{
		if mfaMethodsJWT != "" {
			jwt = &mfaMethodsJWT
		}
	}
	v := &mfa.MethodsPayload{}
	v.JWT = jwt

	return v, nil
}

// BuildSendCodePayload builds the payload for the mfa send_code endpoint from
// CLI flags.
func BuildSendCodePayload(mfaSendCodeBody string, mfaSendCodeJWT string) (*mfa.SendCodePayload, error) {
	var err error
	var body SendCodeRequestBody
	{
		err = json.Unmarshal([]byte(mfaSendCodeBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"request\": {\n         \"method\": \"sms\"\n      }\n   }'")
		}
		if body.Request == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("request", "body"))
		}
		if body.Request != nil {
			if err2 := ValidateSendMFACodeRequestRequestBody(body.Request); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
		if err != nil {
			return nil, err
		}
	}
	var jwt *string
	{
		if mfaSendCodeJWT != "" {
			jwt = &mfaSendCodeJWT
		}
	}
	v := &mfa.SendCodePayload{}
	if body.Request != nil {
		v.Request = marshalSendMFACodeRequestRequestBodyToDesigntypesSendMFACodeRequest(body.Request)
	}
	v.JWT = jwt

	return v, nil
}
