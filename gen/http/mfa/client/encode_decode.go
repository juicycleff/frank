// Code generated by goa v3.20.0, DO NOT EDIT.
//
// mfa HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/juicycleff/frank/design -o .

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	designtypes "github.com/juicycleff/frank/gen/designtypes"
	mfa "github.com/juicycleff/frank/gen/mfa"
	goahttp "goa.design/goa/v3/http"
)

// BuildEnrollRequest instantiates a HTTP request object with method and path
// set to call the "mfa" service "enroll" endpoint
func (c *Client) BuildEnrollRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: EnrollMfaPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("mfa", "enroll", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeEnrollRequest returns an encoder for requests sent to the mfa enroll
// server.
func EncodeEnrollRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*mfa.EnrollPayload)
		if !ok {
			return goahttp.ErrInvalidType("mfa", "enroll", "*mfa.EnrollPayload", v)
		}
		if p.JWT != nil {
			head := *p.JWT
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		body := NewEnrollRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("mfa", "enroll", err)
		}
		return nil
	}
}

// DecodeEnrollResponse returns a decoder for responses returned by the mfa
// enroll endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeEnrollResponse may return the following errors:
//   - "bad_request" (type *mfa.BadRequestError): http.StatusBadRequest
//   - "forbidden" (type *mfa.ForbiddenError): http.StatusForbidden
//   - "internal_error" (type *mfa.InternalServerError): http.StatusInternalServerError
//   - "not_found" (type *mfa.NotFoundError): http.StatusNotFound
//   - "unauthorized" (type *mfa.UnauthorizedError): http.StatusUnauthorized
//   - error: internal error
func DecodeEnrollResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body EnrollResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mfa", "enroll", err)
			}
			err = ValidateEnrollResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mfa", "enroll", err)
			}
			res := NewEnrollResultOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body EnrollBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mfa", "enroll", err)
			}
			err = ValidateEnrollBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mfa", "enroll", err)
			}
			return nil, NewEnrollBadRequest(&body)
		case http.StatusForbidden:
			var (
				body EnrollForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mfa", "enroll", err)
			}
			err = ValidateEnrollForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mfa", "enroll", err)
			}
			return nil, NewEnrollForbidden(&body)
		case http.StatusInternalServerError:
			var (
				body EnrollInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mfa", "enroll", err)
			}
			err = ValidateEnrollInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mfa", "enroll", err)
			}
			return nil, NewEnrollInternalError(&body)
		case http.StatusNotFound:
			var (
				body EnrollNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mfa", "enroll", err)
			}
			err = ValidateEnrollNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mfa", "enroll", err)
			}
			return nil, NewEnrollNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body EnrollUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mfa", "enroll", err)
			}
			err = ValidateEnrollUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mfa", "enroll", err)
			}
			return nil, NewEnrollUnauthorized(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("mfa", "enroll", resp.StatusCode, string(body))
		}
	}
}

// BuildVerifyRequest instantiates a HTTP request object with method and path
// set to call the "mfa" service "verify" endpoint
func (c *Client) BuildVerifyRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: VerifyMfaPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("mfa", "verify", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeVerifyRequest returns an encoder for requests sent to the mfa verify
// server.
func EncodeVerifyRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*mfa.VerifyPayload)
		if !ok {
			return goahttp.ErrInvalidType("mfa", "verify", "*mfa.VerifyPayload", v)
		}
		if p.JWT != nil {
			head := *p.JWT
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		body := NewVerifyRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("mfa", "verify", err)
		}
		return nil
	}
}

// DecodeVerifyResponse returns a decoder for responses returned by the mfa
// verify endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeVerifyResponse may return the following errors:
//   - "bad_request" (type *mfa.BadRequestError): http.StatusBadRequest
//   - "forbidden" (type *mfa.ForbiddenError): http.StatusForbidden
//   - "internal_error" (type *mfa.InternalServerError): http.StatusInternalServerError
//   - "not_found" (type *mfa.NotFoundError): http.StatusNotFound
//   - "unauthorized" (type *mfa.UnauthorizedError): http.StatusUnauthorized
//   - error: internal error
func DecodeVerifyResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body VerifyResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mfa", "verify", err)
			}
			err = ValidateVerifyResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mfa", "verify", err)
			}
			res := NewVerifyResultOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body VerifyBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mfa", "verify", err)
			}
			err = ValidateVerifyBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mfa", "verify", err)
			}
			return nil, NewVerifyBadRequest(&body)
		case http.StatusForbidden:
			var (
				body VerifyForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mfa", "verify", err)
			}
			err = ValidateVerifyForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mfa", "verify", err)
			}
			return nil, NewVerifyForbidden(&body)
		case http.StatusInternalServerError:
			var (
				body VerifyInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mfa", "verify", err)
			}
			err = ValidateVerifyInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mfa", "verify", err)
			}
			return nil, NewVerifyInternalError(&body)
		case http.StatusNotFound:
			var (
				body VerifyNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mfa", "verify", err)
			}
			err = ValidateVerifyNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mfa", "verify", err)
			}
			return nil, NewVerifyNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body VerifyUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mfa", "verify", err)
			}
			err = ValidateVerifyUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mfa", "verify", err)
			}
			return nil, NewVerifyUnauthorized(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("mfa", "verify", resp.StatusCode, string(body))
		}
	}
}

// BuildUnenrollRequest instantiates a HTTP request object with method and path
// set to call the "mfa" service "unenroll" endpoint
func (c *Client) BuildUnenrollRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UnenrollMfaPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("mfa", "unenroll", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUnenrollRequest returns an encoder for requests sent to the mfa
// unenroll server.
func EncodeUnenrollRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*mfa.UnenrollPayload)
		if !ok {
			return goahttp.ErrInvalidType("mfa", "unenroll", "*mfa.UnenrollPayload", v)
		}
		if p.JWT != nil {
			head := *p.JWT
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		body := NewUnenrollRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("mfa", "unenroll", err)
		}
		return nil
	}
}

// DecodeUnenrollResponse returns a decoder for responses returned by the mfa
// unenroll endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeUnenrollResponse may return the following errors:
//   - "bad_request" (type *mfa.BadRequestError): http.StatusBadRequest
//   - "forbidden" (type *mfa.ForbiddenError): http.StatusForbidden
//   - "internal_error" (type *mfa.InternalServerError): http.StatusInternalServerError
//   - "not_found" (type *mfa.NotFoundError): http.StatusNotFound
//   - "unauthorized" (type *mfa.UnauthorizedError): http.StatusUnauthorized
//   - error: internal error
func DecodeUnenrollResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body UnenrollResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mfa", "unenroll", err)
			}
			err = ValidateUnenrollResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mfa", "unenroll", err)
			}
			res := NewUnenrollResultOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body UnenrollBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mfa", "unenroll", err)
			}
			err = ValidateUnenrollBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mfa", "unenroll", err)
			}
			return nil, NewUnenrollBadRequest(&body)
		case http.StatusForbidden:
			var (
				body UnenrollForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mfa", "unenroll", err)
			}
			err = ValidateUnenrollForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mfa", "unenroll", err)
			}
			return nil, NewUnenrollForbidden(&body)
		case http.StatusInternalServerError:
			var (
				body UnenrollInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mfa", "unenroll", err)
			}
			err = ValidateUnenrollInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mfa", "unenroll", err)
			}
			return nil, NewUnenrollInternalError(&body)
		case http.StatusNotFound:
			var (
				body UnenrollNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mfa", "unenroll", err)
			}
			err = ValidateUnenrollNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mfa", "unenroll", err)
			}
			return nil, NewUnenrollNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body UnenrollUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mfa", "unenroll", err)
			}
			err = ValidateUnenrollUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mfa", "unenroll", err)
			}
			return nil, NewUnenrollUnauthorized(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("mfa", "unenroll", resp.StatusCode, string(body))
		}
	}
}

// BuildMethodsRequest instantiates a HTTP request object with method and path
// set to call the "mfa" service "methods" endpoint
func (c *Client) BuildMethodsRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: MethodsMfaPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("mfa", "methods", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeMethodsRequest returns an encoder for requests sent to the mfa methods
// server.
func EncodeMethodsRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*mfa.MethodsPayload)
		if !ok {
			return goahttp.ErrInvalidType("mfa", "methods", "*mfa.MethodsPayload", v)
		}
		if p.JWT != nil {
			head := *p.JWT
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeMethodsResponse returns a decoder for responses returned by the mfa
// methods endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeMethodsResponse may return the following errors:
//   - "bad_request" (type *mfa.BadRequestError): http.StatusBadRequest
//   - "forbidden" (type *mfa.ForbiddenError): http.StatusForbidden
//   - "internal_error" (type *mfa.InternalServerError): http.StatusInternalServerError
//   - "not_found" (type *mfa.NotFoundError): http.StatusNotFound
//   - "unauthorized" (type *mfa.UnauthorizedError): http.StatusUnauthorized
//   - error: internal error
func DecodeMethodsResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body MethodsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mfa", "methods", err)
			}
			err = ValidateMethodsResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mfa", "methods", err)
			}
			res := NewMethodsResultOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body MethodsBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mfa", "methods", err)
			}
			err = ValidateMethodsBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mfa", "methods", err)
			}
			return nil, NewMethodsBadRequest(&body)
		case http.StatusForbidden:
			var (
				body MethodsForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mfa", "methods", err)
			}
			err = ValidateMethodsForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mfa", "methods", err)
			}
			return nil, NewMethodsForbidden(&body)
		case http.StatusInternalServerError:
			var (
				body MethodsInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mfa", "methods", err)
			}
			err = ValidateMethodsInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mfa", "methods", err)
			}
			return nil, NewMethodsInternalError(&body)
		case http.StatusNotFound:
			var (
				body MethodsNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mfa", "methods", err)
			}
			err = ValidateMethodsNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mfa", "methods", err)
			}
			return nil, NewMethodsNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body MethodsUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mfa", "methods", err)
			}
			err = ValidateMethodsUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mfa", "methods", err)
			}
			return nil, NewMethodsUnauthorized(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("mfa", "methods", resp.StatusCode, string(body))
		}
	}
}

// BuildSendCodeRequest instantiates a HTTP request object with method and path
// set to call the "mfa" service "send_code" endpoint
func (c *Client) BuildSendCodeRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: SendCodeMfaPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("mfa", "send_code", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeSendCodeRequest returns an encoder for requests sent to the mfa
// send_code server.
func EncodeSendCodeRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*mfa.SendCodePayload)
		if !ok {
			return goahttp.ErrInvalidType("mfa", "send_code", "*mfa.SendCodePayload", v)
		}
		if p.JWT != nil {
			head := *p.JWT
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		body := NewSendCodeRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("mfa", "send_code", err)
		}
		return nil
	}
}

// DecodeSendCodeResponse returns a decoder for responses returned by the mfa
// send_code endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeSendCodeResponse may return the following errors:
//   - "bad_request" (type *mfa.BadRequestError): http.StatusBadRequest
//   - "forbidden" (type *mfa.ForbiddenError): http.StatusForbidden
//   - "internal_error" (type *mfa.InternalServerError): http.StatusInternalServerError
//   - "not_found" (type *mfa.NotFoundError): http.StatusNotFound
//   - "unauthorized" (type *mfa.UnauthorizedError): http.StatusUnauthorized
//   - error: internal error
func DecodeSendCodeResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body SendCodeResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mfa", "send_code", err)
			}
			err = ValidateSendCodeResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mfa", "send_code", err)
			}
			res := NewSendCodeResultOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body SendCodeBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mfa", "send_code", err)
			}
			err = ValidateSendCodeBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mfa", "send_code", err)
			}
			return nil, NewSendCodeBadRequest(&body)
		case http.StatusForbidden:
			var (
				body SendCodeForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mfa", "send_code", err)
			}
			err = ValidateSendCodeForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mfa", "send_code", err)
			}
			return nil, NewSendCodeForbidden(&body)
		case http.StatusInternalServerError:
			var (
				body SendCodeInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mfa", "send_code", err)
			}
			err = ValidateSendCodeInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mfa", "send_code", err)
			}
			return nil, NewSendCodeInternalError(&body)
		case http.StatusNotFound:
			var (
				body SendCodeNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mfa", "send_code", err)
			}
			err = ValidateSendCodeNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mfa", "send_code", err)
			}
			return nil, NewSendCodeNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body SendCodeUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mfa", "send_code", err)
			}
			err = ValidateSendCodeUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mfa", "send_code", err)
			}
			return nil, NewSendCodeUnauthorized(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("mfa", "send_code", resp.StatusCode, string(body))
		}
	}
}

// marshalDesigntypesMFAEnrollRequestToMFAEnrollRequestRequestBody builds a
// value of type *MFAEnrollRequestRequestBody from a value of type
// *designtypes.MFAEnrollRequest.
func marshalDesigntypesMFAEnrollRequestToMFAEnrollRequestRequestBody(v *designtypes.MFAEnrollRequest) *MFAEnrollRequestRequestBody {
	res := &MFAEnrollRequestRequestBody{
		Method:      v.Method,
		PhoneNumber: v.PhoneNumber,
		Email:       v.Email,
	}

	return res
}

// marshalMFAEnrollRequestRequestBodyToDesigntypesMFAEnrollRequest builds a
// value of type *designtypes.MFAEnrollRequest from a value of type
// *MFAEnrollRequestRequestBody.
func marshalMFAEnrollRequestRequestBodyToDesigntypesMFAEnrollRequest(v *MFAEnrollRequestRequestBody) *designtypes.MFAEnrollRequest {
	res := &designtypes.MFAEnrollRequest{
		Method:      v.Method,
		PhoneNumber: v.PhoneNumber,
		Email:       v.Email,
	}

	return res
}

// unmarshalTOTPEnrollResponseResponseBodyToDesigntypesTOTPEnrollResponse
// builds a value of type *designtypes.TOTPEnrollResponse from a value of type
// *TOTPEnrollResponseResponseBody.
func unmarshalTOTPEnrollResponseResponseBodyToDesigntypesTOTPEnrollResponse(v *TOTPEnrollResponseResponseBody) *designtypes.TOTPEnrollResponse {
	if v == nil {
		return nil
	}
	res := &designtypes.TOTPEnrollResponse{
		Secret:     *v.Secret,
		URI:        *v.URI,
		QrCodeData: *v.QrCodeData,
	}

	return res
}

// unmarshalBackupCodesResponseResponseBodyToDesigntypesBackupCodesResponse
// builds a value of type *designtypes.BackupCodesResponse from a value of type
// *BackupCodesResponseResponseBody.
func unmarshalBackupCodesResponseResponseBodyToDesigntypesBackupCodesResponse(v *BackupCodesResponseResponseBody) *designtypes.BackupCodesResponse {
	if v == nil {
		return nil
	}
	res := &designtypes.BackupCodesResponse{}
	res.BackupCodes = make([]string, len(v.BackupCodes))
	for i, val := range v.BackupCodes {
		res.BackupCodes[i] = val
	}

	return res
}

// marshalDesigntypesMFAVerifyRequestToMFAVerifyRequestRequestBody builds a
// value of type *MFAVerifyRequestRequestBody from a value of type
// *designtypes.MFAVerifyRequest.
func marshalDesigntypesMFAVerifyRequestToMFAVerifyRequestRequestBody(v *designtypes.MFAVerifyRequest) *MFAVerifyRequestRequestBody {
	res := &MFAVerifyRequestRequestBody{
		Method:      v.Method,
		Code:        v.Code,
		PhoneNumber: v.PhoneNumber,
	}

	return res
}

// marshalMFAVerifyRequestRequestBodyToDesigntypesMFAVerifyRequest builds a
// value of type *designtypes.MFAVerifyRequest from a value of type
// *MFAVerifyRequestRequestBody.
func marshalMFAVerifyRequestRequestBodyToDesigntypesMFAVerifyRequest(v *MFAVerifyRequestRequestBody) *designtypes.MFAVerifyRequest {
	res := &designtypes.MFAVerifyRequest{
		Method:      v.Method,
		Code:        v.Code,
		PhoneNumber: v.PhoneNumber,
	}

	return res
}

// marshalDesigntypesMFAUnEnrollRequestToMFAUnEnrollRequestRequestBody builds a
// value of type *MFAUnEnrollRequestRequestBody from a value of type
// *designtypes.MFAUnEnrollRequest.
func marshalDesigntypesMFAUnEnrollRequestToMFAUnEnrollRequestRequestBody(v *designtypes.MFAUnEnrollRequest) *MFAUnEnrollRequestRequestBody {
	res := &MFAUnEnrollRequestRequestBody{
		Method: v.Method,
	}

	return res
}

// marshalMFAUnEnrollRequestRequestBodyToDesigntypesMFAUnEnrollRequest builds a
// value of type *designtypes.MFAUnEnrollRequest from a value of type
// *MFAUnEnrollRequestRequestBody.
func marshalMFAUnEnrollRequestRequestBodyToDesigntypesMFAUnEnrollRequest(v *MFAUnEnrollRequestRequestBody) *designtypes.MFAUnEnrollRequest {
	res := &designtypes.MFAUnEnrollRequest{
		Method: v.Method,
	}

	return res
}

// marshalDesigntypesSendMFACodeRequestToSendMFACodeRequestRequestBody builds a
// value of type *SendMFACodeRequestRequestBody from a value of type
// *designtypes.SendMFACodeRequest.
func marshalDesigntypesSendMFACodeRequestToSendMFACodeRequestRequestBody(v *designtypes.SendMFACodeRequest) *SendMFACodeRequestRequestBody {
	res := &SendMFACodeRequestRequestBody{
		Method: v.Method,
	}

	return res
}

// marshalSendMFACodeRequestRequestBodyToDesigntypesSendMFACodeRequest builds a
// value of type *designtypes.SendMFACodeRequest from a value of type
// *SendMFACodeRequestRequestBody.
func marshalSendMFACodeRequestRequestBodyToDesigntypesSendMFACodeRequest(v *SendMFACodeRequestRequestBody) *designtypes.SendMFACodeRequest {
	res := &designtypes.SendMFACodeRequest{
		Method: v.Method,
	}

	return res
}
