// Code generated by goa v3.20.0, DO NOT EDIT.
//
// mfa HTTP server
//
// Command:
// $ goa gen github.com/juicycleff/frank/design -o .

package server

import (
	"context"
	"net/http"
	"regexp"

	mfa "github.com/juicycleff/frank/gen/mfa"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
	"goa.design/plugins/v3/cors"
)

// Server lists the mfa service endpoint HTTP handlers.
type Server struct {
	Mounts   []*MountPoint
	Enroll   http.Handler
	Verify   http.Handler
	Unenroll http.Handler
	Methods  http.Handler
	SendCode http.Handler
	CORS     http.Handler
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the mfa service endpoints using the
// provided encoder and decoder. The handlers are mounted on the given mux
// using the HTTP verb and path defined in the design. errhandler is called
// whenever a response fails to be encoded. formatter is used to format errors
// returned by the service methods prior to encoding. Both errhandler and
// formatter are optional and can be nil.
func New(
	e *mfa.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"Enroll", "POST", "/v1/auth/mfa/enroll"},
			{"Verify", "POST", "/v1/auth/mfa/verify"},
			{"Unenroll", "POST", "/v1/auth/mfa/unenroll"},
			{"Methods", "GET", "/v1/auth/mfa/methods"},
			{"SendCode", "POST", "/v1/auth/mfa/send-code"},
			{"CORS", "OPTIONS", "/v1/auth/mfa/enroll"},
			{"CORS", "OPTIONS", "/v1/auth/mfa/verify"},
			{"CORS", "OPTIONS", "/v1/auth/mfa/unenroll"},
			{"CORS", "OPTIONS", "/v1/auth/mfa/methods"},
			{"CORS", "OPTIONS", "/v1/auth/mfa/send-code"},
		},
		Enroll:   NewEnrollHandler(e.Enroll, mux, decoder, encoder, errhandler, formatter),
		Verify:   NewVerifyHandler(e.Verify, mux, decoder, encoder, errhandler, formatter),
		Unenroll: NewUnenrollHandler(e.Unenroll, mux, decoder, encoder, errhandler, formatter),
		Methods:  NewMethodsHandler(e.Methods, mux, decoder, encoder, errhandler, formatter),
		SendCode: NewSendCodeHandler(e.SendCode, mux, decoder, encoder, errhandler, formatter),
		CORS:     NewCORSHandler(),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "mfa" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.Enroll = m(s.Enroll)
	s.Verify = m(s.Verify)
	s.Unenroll = m(s.Unenroll)
	s.Methods = m(s.Methods)
	s.SendCode = m(s.SendCode)
	s.CORS = m(s.CORS)
}

// MethodNames returns the methods served.
func (s *Server) MethodNames() []string { return mfa.MethodNames[:] }

// Mount configures the mux to serve the mfa endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountEnrollHandler(mux, h.Enroll)
	MountVerifyHandler(mux, h.Verify)
	MountUnenrollHandler(mux, h.Unenroll)
	MountMethodsHandler(mux, h.Methods)
	MountSendCodeHandler(mux, h.SendCode)
	MountCORSHandler(mux, h.CORS)
}

// Mount configures the mux to serve the mfa endpoints.
func (s *Server) Mount(mux goahttp.Muxer) {
	Mount(mux, s)
}

// MountEnrollHandler configures the mux to serve the "mfa" service "enroll"
// endpoint.
func MountEnrollHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleMfaOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/v1/auth/mfa/enroll", f)
}

// NewEnrollHandler creates a HTTP handler which loads the HTTP request and
// calls the "mfa" service "enroll" endpoint.
func NewEnrollHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeEnrollRequest(mux, decoder)
		encodeResponse = EncodeEnrollResponse(encoder)
		encodeError    = EncodeEnrollError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "enroll")
		ctx = context.WithValue(ctx, goa.ServiceKey, "mfa")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountVerifyHandler configures the mux to serve the "mfa" service "verify"
// endpoint.
func MountVerifyHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleMfaOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/v1/auth/mfa/verify", f)
}

// NewVerifyHandler creates a HTTP handler which loads the HTTP request and
// calls the "mfa" service "verify" endpoint.
func NewVerifyHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeVerifyRequest(mux, decoder)
		encodeResponse = EncodeVerifyResponse(encoder)
		encodeError    = EncodeVerifyError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "verify")
		ctx = context.WithValue(ctx, goa.ServiceKey, "mfa")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountUnenrollHandler configures the mux to serve the "mfa" service
// "unenroll" endpoint.
func MountUnenrollHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleMfaOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/v1/auth/mfa/unenroll", f)
}

// NewUnenrollHandler creates a HTTP handler which loads the HTTP request and
// calls the "mfa" service "unenroll" endpoint.
func NewUnenrollHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUnenrollRequest(mux, decoder)
		encodeResponse = EncodeUnenrollResponse(encoder)
		encodeError    = EncodeUnenrollError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "unenroll")
		ctx = context.WithValue(ctx, goa.ServiceKey, "mfa")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountMethodsHandler configures the mux to serve the "mfa" service "methods"
// endpoint.
func MountMethodsHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleMfaOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/v1/auth/mfa/methods", f)
}

// NewMethodsHandler creates a HTTP handler which loads the HTTP request and
// calls the "mfa" service "methods" endpoint.
func NewMethodsHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeMethodsRequest(mux, decoder)
		encodeResponse = EncodeMethodsResponse(encoder)
		encodeError    = EncodeMethodsError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "methods")
		ctx = context.WithValue(ctx, goa.ServiceKey, "mfa")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountSendCodeHandler configures the mux to serve the "mfa" service
// "send_code" endpoint.
func MountSendCodeHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleMfaOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/v1/auth/mfa/send-code", f)
}

// NewSendCodeHandler creates a HTTP handler which loads the HTTP request and
// calls the "mfa" service "send_code" endpoint.
func NewSendCodeHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeSendCodeRequest(mux, decoder)
		encodeResponse = EncodeSendCodeResponse(encoder)
		encodeError    = EncodeSendCodeError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "send_code")
		ctx = context.WithValue(ctx, goa.ServiceKey, "mfa")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountCORSHandler configures the mux to serve the CORS endpoints for the
// service mfa.
func MountCORSHandler(mux goahttp.Muxer, h http.Handler) {
	h = HandleMfaOrigin(h)
	mux.Handle("OPTIONS", "/v1/auth/mfa/enroll", h.ServeHTTP)
	mux.Handle("OPTIONS", "/v1/auth/mfa/verify", h.ServeHTTP)
	mux.Handle("OPTIONS", "/v1/auth/mfa/unenroll", h.ServeHTTP)
	mux.Handle("OPTIONS", "/v1/auth/mfa/methods", h.ServeHTTP)
	mux.Handle("OPTIONS", "/v1/auth/mfa/send-code", h.ServeHTTP)
}

// NewCORSHandler creates a HTTP handler which returns a simple 204 response.
func NewCORSHandler() http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		w.WriteHeader(204)
	})
}

// HandleMfaOrigin applies the CORS response headers corresponding to the
// origin for the service mfa.
func HandleMfaOrigin(h http.Handler) http.Handler {
	spec1 := regexp.MustCompile(".*localhost.*")
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		origin := r.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			h.ServeHTTP(w, r)
			return
		}
		if cors.MatchOrigin(origin, "*.frank.com") {
			w.Header().Set("Access-Control-Allow-Origin", origin)
			w.Header().Set("Vary", "Origin")
			w.Header().Set("Access-Control-Max-Age", "100")
			w.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := r.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				w.Header().Set("Access-Control-Allow-Headers", "X-Shared-Secret, X-Api-Version")
				w.WriteHeader(204)
				return
			}
			h.ServeHTTP(w, r)
			return
		}
		if cors.MatchOriginRegexp(origin, spec1) {
			w.Header().Set("Access-Control-Allow-Origin", origin)
			w.Header().Set("Vary", "Origin")
			w.Header().Set("Access-Control-Expose-Headers", "X-Request-Id")
			w.Header().Set("Access-Control-Max-Age", "600")
			w.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := r.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				w.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS")
				w.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
				w.WriteHeader(204)
				return
			}
			h.ServeHTTP(w, r)
			return
		}
		if cors.MatchOrigin(origin, "localhost") {
			w.Header().Set("Access-Control-Allow-Origin", origin)
			w.Header().Set("Vary", "Origin")
			if acrm := r.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				w.WriteHeader(204)
				return
			}
			h.ServeHTTP(w, r)
			return
		}
		h.ServeHTTP(w, r)
		return
	})
}
