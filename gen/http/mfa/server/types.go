// Code generated by goa v3.20.0, DO NOT EDIT.
//
// mfa HTTP server types
//
// Command:
// $ goa gen github.com/juicycleff/frank/design -o .

package server

import (
	mfa "github.com/juicycleff/frank/gen/mfa"
	goa "goa.design/goa/v3/pkg"
)

// EnrollRequestBody is the type of the "mfa" service "enroll" endpoint HTTP
// request body.
type EnrollRequestBody struct {
	Request *MFAEnrollRequestRequestBody `form:"request,omitempty" json:"request,omitempty" xml:"request,omitempty"`
}

// VerifyRequestBody is the type of the "mfa" service "verify" endpoint HTTP
// request body.
type VerifyRequestBody struct {
	Request *MFAVerifyRequestRequestBody `form:"request,omitempty" json:"request,omitempty" xml:"request,omitempty"`
}

// UnenrollRequestBody is the type of the "mfa" service "unenroll" endpoint
// HTTP request body.
type UnenrollRequestBody struct {
	Request *MFAUnEnrollRequestRequestBody `form:"request,omitempty" json:"request,omitempty" xml:"request,omitempty"`
}

// SendCodeRequestBody is the type of the "mfa" service "send_code" endpoint
// HTTP request body.
type SendCodeRequestBody struct {
	Request *SendMFACodeRequestRequestBody `form:"request,omitempty" json:"request,omitempty" xml:"request,omitempty"`
}

// EnrollResponseBody is the type of the "mfa" service "enroll" endpoint HTTP
// response body.
type EnrollResponseBody struct {
	Totp        *TOTPEnrollResponseResponseBody  `form:"totp,omitempty" json:"totp,omitempty" xml:"totp,omitempty"`
	BackupCodes *BackupCodesResponseResponseBody `form:"backup_codes,omitempty" json:"backup_codes,omitempty" xml:"backup_codes,omitempty"`
	// Success message for SMS/Email enrollment
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// VerifyResponseBody is the type of the "mfa" service "verify" endpoint HTTP
// response body.
type VerifyResponseBody struct {
	// Whether verification was successful
	Verified bool `form:"verified" json:"verified" xml:"verified"`
}

// UnenrollResponseBody is the type of the "mfa" service "unenroll" endpoint
// HTTP response body.
type UnenrollResponseBody struct {
	// Success message
	Message string `form:"message" json:"message" xml:"message"`
}

// MethodsResponseBody is the type of the "mfa" service "methods" endpoint HTTP
// response body.
type MethodsResponseBody struct {
	// Enabled MFA methods
	Methods []string `form:"methods" json:"methods" xml:"methods"`
}

// SendCodeResponseBody is the type of the "mfa" service "send_code" endpoint
// HTTP response body.
type SendCodeResponseBody struct {
	// Success message
	Message string `form:"message" json:"message" xml:"message"`
	// When the code expires
	ExpiresAt int64 `form:"expires_at" json:"expires_at" xml:"expires_at"`
}

// EnrollBadRequestResponseBody is the type of the "mfa" service "enroll"
// endpoint HTTP response body for the "bad_request" error.
type EnrollBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// EnrollForbiddenResponseBody is the type of the "mfa" service "enroll"
// endpoint HTTP response body for the "forbidden" error.
type EnrollForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// EnrollInternalErrorResponseBody is the type of the "mfa" service "enroll"
// endpoint HTTP response body for the "internal_error" error.
type EnrollInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// EnrollNotFoundResponseBody is the type of the "mfa" service "enroll"
// endpoint HTTP response body for the "not_found" error.
type EnrollNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// EnrollUnauthorizedResponseBody is the type of the "mfa" service "enroll"
// endpoint HTTP response body for the "unauthorized" error.
type EnrollUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// VerifyBadRequestResponseBody is the type of the "mfa" service "verify"
// endpoint HTTP response body for the "bad_request" error.
type VerifyBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// VerifyForbiddenResponseBody is the type of the "mfa" service "verify"
// endpoint HTTP response body for the "forbidden" error.
type VerifyForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// VerifyInternalErrorResponseBody is the type of the "mfa" service "verify"
// endpoint HTTP response body for the "internal_error" error.
type VerifyInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// VerifyNotFoundResponseBody is the type of the "mfa" service "verify"
// endpoint HTTP response body for the "not_found" error.
type VerifyNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// VerifyUnauthorizedResponseBody is the type of the "mfa" service "verify"
// endpoint HTTP response body for the "unauthorized" error.
type VerifyUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UnenrollBadRequestResponseBody is the type of the "mfa" service "unenroll"
// endpoint HTTP response body for the "bad_request" error.
type UnenrollBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UnenrollForbiddenResponseBody is the type of the "mfa" service "unenroll"
// endpoint HTTP response body for the "forbidden" error.
type UnenrollForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UnenrollInternalErrorResponseBody is the type of the "mfa" service
// "unenroll" endpoint HTTP response body for the "internal_error" error.
type UnenrollInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UnenrollNotFoundResponseBody is the type of the "mfa" service "unenroll"
// endpoint HTTP response body for the "not_found" error.
type UnenrollNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UnenrollUnauthorizedResponseBody is the type of the "mfa" service "unenroll"
// endpoint HTTP response body for the "unauthorized" error.
type UnenrollUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// MethodsBadRequestResponseBody is the type of the "mfa" service "methods"
// endpoint HTTP response body for the "bad_request" error.
type MethodsBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// MethodsForbiddenResponseBody is the type of the "mfa" service "methods"
// endpoint HTTP response body for the "forbidden" error.
type MethodsForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// MethodsInternalErrorResponseBody is the type of the "mfa" service "methods"
// endpoint HTTP response body for the "internal_error" error.
type MethodsInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// MethodsNotFoundResponseBody is the type of the "mfa" service "methods"
// endpoint HTTP response body for the "not_found" error.
type MethodsNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// MethodsUnauthorizedResponseBody is the type of the "mfa" service "methods"
// endpoint HTTP response body for the "unauthorized" error.
type MethodsUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// SendCodeBadRequestResponseBody is the type of the "mfa" service "send_code"
// endpoint HTTP response body for the "bad_request" error.
type SendCodeBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// SendCodeForbiddenResponseBody is the type of the "mfa" service "send_code"
// endpoint HTTP response body for the "forbidden" error.
type SendCodeForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// SendCodeInternalErrorResponseBody is the type of the "mfa" service
// "send_code" endpoint HTTP response body for the "internal_error" error.
type SendCodeInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// SendCodeNotFoundResponseBody is the type of the "mfa" service "send_code"
// endpoint HTTP response body for the "not_found" error.
type SendCodeNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// SendCodeUnauthorizedResponseBody is the type of the "mfa" service
// "send_code" endpoint HTTP response body for the "unauthorized" error.
type SendCodeUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// TOTPEnrollResponseResponseBody is used to define fields on response body
// types.
type TOTPEnrollResponseResponseBody struct {
	// TOTP secret key
	Secret string `form:"secret" json:"secret" xml:"secret"`
	// TOTP URI for QR code generation
	URI string `form:"uri" json:"uri" xml:"uri"`
	// TOTP QR code as base64 image
	QrCodeData string `form:"qr_code_data" json:"qr_code_data" xml:"qr_code_data"`
}

// BackupCodesResponseResponseBody is used to define fields on response body
// types.
type BackupCodesResponseResponseBody struct {
	// List of backup codes
	BackupCodes []string `form:"backup_codes" json:"backup_codes" xml:"backup_codes"`
}

// MFAEnrollRequestRequestBody is used to define fields on request body types.
type MFAEnrollRequestRequestBody struct {
	// MFA method to enroll
	Method *string `form:"method,omitempty" json:"method,omitempty" xml:"method,omitempty"`
	// Phone number for SMS verification
	PhoneNumber *string `form:"phone_number,omitempty" json:"phone_number,omitempty" xml:"phone_number,omitempty"`
	// Email for email verification
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
}

// MFAVerifyRequestRequestBody is used to define fields on request body types.
type MFAVerifyRequestRequestBody struct {
	// MFA method to verify
	Method *string `form:"method,omitempty" json:"method,omitempty" xml:"method,omitempty"`
	// Verification code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Phone number for SMS verification
	PhoneNumber *string `form:"phone_number,omitempty" json:"phone_number,omitempty" xml:"phone_number,omitempty"`
}

// MFAUnEnrollRequestRequestBody is used to define fields on request body types.
type MFAUnEnrollRequestRequestBody struct {
	// MFA method to unenroll
	Method *string `form:"method,omitempty" json:"method,omitempty" xml:"method,omitempty"`
}

// SendMFACodeRequestRequestBody is used to define fields on request body types.
type SendMFACodeRequestRequestBody struct {
	// MFA method
	Method *string `form:"method,omitempty" json:"method,omitempty" xml:"method,omitempty"`
}

// NewEnrollResponseBody builds the HTTP response body from the result of the
// "enroll" endpoint of the "mfa" service.
func NewEnrollResponseBody(res *mfa.EnrollResult) *EnrollResponseBody {
	body := &EnrollResponseBody{
		Message: res.Message,
	}
	if res.Totp != nil {
		body.Totp = marshalDesigntypesTOTPEnrollResponseToTOTPEnrollResponseResponseBody(res.Totp)
	}
	if res.BackupCodes != nil {
		body.BackupCodes = marshalDesigntypesBackupCodesResponseToBackupCodesResponseResponseBody(res.BackupCodes)
	}
	return body
}

// NewVerifyResponseBody builds the HTTP response body from the result of the
// "verify" endpoint of the "mfa" service.
func NewVerifyResponseBody(res *mfa.VerifyResult) *VerifyResponseBody {
	body := &VerifyResponseBody{
		Verified: res.Verified,
	}
	return body
}

// NewUnenrollResponseBody builds the HTTP response body from the result of the
// "unenroll" endpoint of the "mfa" service.
func NewUnenrollResponseBody(res *mfa.UnenrollResult) *UnenrollResponseBody {
	body := &UnenrollResponseBody{
		Message: res.Message,
	}
	return body
}

// NewMethodsResponseBody builds the HTTP response body from the result of the
// "methods" endpoint of the "mfa" service.
func NewMethodsResponseBody(res *mfa.MethodsResult) *MethodsResponseBody {
	body := &MethodsResponseBody{}
	if res.Methods != nil {
		body.Methods = make([]string, len(res.Methods))
		for i, val := range res.Methods {
			body.Methods[i] = val
		}
	} else {
		body.Methods = []string{}
	}
	return body
}

// NewSendCodeResponseBody builds the HTTP response body from the result of the
// "send_code" endpoint of the "mfa" service.
func NewSendCodeResponseBody(res *mfa.SendCodeResult) *SendCodeResponseBody {
	body := &SendCodeResponseBody{
		Message:   res.Message,
		ExpiresAt: res.ExpiresAt,
	}
	return body
}

// NewEnrollBadRequestResponseBody builds the HTTP response body from the
// result of the "enroll" endpoint of the "mfa" service.
func NewEnrollBadRequestResponseBody(res *mfa.BadRequestError) *EnrollBadRequestResponseBody {
	body := &EnrollBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewEnrollForbiddenResponseBody builds the HTTP response body from the result
// of the "enroll" endpoint of the "mfa" service.
func NewEnrollForbiddenResponseBody(res *mfa.ForbiddenError) *EnrollForbiddenResponseBody {
	body := &EnrollForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewEnrollInternalErrorResponseBody builds the HTTP response body from the
// result of the "enroll" endpoint of the "mfa" service.
func NewEnrollInternalErrorResponseBody(res *mfa.InternalServerError) *EnrollInternalErrorResponseBody {
	body := &EnrollInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewEnrollNotFoundResponseBody builds the HTTP response body from the result
// of the "enroll" endpoint of the "mfa" service.
func NewEnrollNotFoundResponseBody(res *mfa.NotFoundError) *EnrollNotFoundResponseBody {
	body := &EnrollNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewEnrollUnauthorizedResponseBody builds the HTTP response body from the
// result of the "enroll" endpoint of the "mfa" service.
func NewEnrollUnauthorizedResponseBody(res *mfa.UnauthorizedError) *EnrollUnauthorizedResponseBody {
	body := &EnrollUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewVerifyBadRequestResponseBody builds the HTTP response body from the
// result of the "verify" endpoint of the "mfa" service.
func NewVerifyBadRequestResponseBody(res *mfa.BadRequestError) *VerifyBadRequestResponseBody {
	body := &VerifyBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewVerifyForbiddenResponseBody builds the HTTP response body from the result
// of the "verify" endpoint of the "mfa" service.
func NewVerifyForbiddenResponseBody(res *mfa.ForbiddenError) *VerifyForbiddenResponseBody {
	body := &VerifyForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewVerifyInternalErrorResponseBody builds the HTTP response body from the
// result of the "verify" endpoint of the "mfa" service.
func NewVerifyInternalErrorResponseBody(res *mfa.InternalServerError) *VerifyInternalErrorResponseBody {
	body := &VerifyInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewVerifyNotFoundResponseBody builds the HTTP response body from the result
// of the "verify" endpoint of the "mfa" service.
func NewVerifyNotFoundResponseBody(res *mfa.NotFoundError) *VerifyNotFoundResponseBody {
	body := &VerifyNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewVerifyUnauthorizedResponseBody builds the HTTP response body from the
// result of the "verify" endpoint of the "mfa" service.
func NewVerifyUnauthorizedResponseBody(res *mfa.UnauthorizedError) *VerifyUnauthorizedResponseBody {
	body := &VerifyUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewUnenrollBadRequestResponseBody builds the HTTP response body from the
// result of the "unenroll" endpoint of the "mfa" service.
func NewUnenrollBadRequestResponseBody(res *mfa.BadRequestError) *UnenrollBadRequestResponseBody {
	body := &UnenrollBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewUnenrollForbiddenResponseBody builds the HTTP response body from the
// result of the "unenroll" endpoint of the "mfa" service.
func NewUnenrollForbiddenResponseBody(res *mfa.ForbiddenError) *UnenrollForbiddenResponseBody {
	body := &UnenrollForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewUnenrollInternalErrorResponseBody builds the HTTP response body from the
// result of the "unenroll" endpoint of the "mfa" service.
func NewUnenrollInternalErrorResponseBody(res *mfa.InternalServerError) *UnenrollInternalErrorResponseBody {
	body := &UnenrollInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewUnenrollNotFoundResponseBody builds the HTTP response body from the
// result of the "unenroll" endpoint of the "mfa" service.
func NewUnenrollNotFoundResponseBody(res *mfa.NotFoundError) *UnenrollNotFoundResponseBody {
	body := &UnenrollNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewUnenrollUnauthorizedResponseBody builds the HTTP response body from the
// result of the "unenroll" endpoint of the "mfa" service.
func NewUnenrollUnauthorizedResponseBody(res *mfa.UnauthorizedError) *UnenrollUnauthorizedResponseBody {
	body := &UnenrollUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewMethodsBadRequestResponseBody builds the HTTP response body from the
// result of the "methods" endpoint of the "mfa" service.
func NewMethodsBadRequestResponseBody(res *mfa.BadRequestError) *MethodsBadRequestResponseBody {
	body := &MethodsBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewMethodsForbiddenResponseBody builds the HTTP response body from the
// result of the "methods" endpoint of the "mfa" service.
func NewMethodsForbiddenResponseBody(res *mfa.ForbiddenError) *MethodsForbiddenResponseBody {
	body := &MethodsForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewMethodsInternalErrorResponseBody builds the HTTP response body from the
// result of the "methods" endpoint of the "mfa" service.
func NewMethodsInternalErrorResponseBody(res *mfa.InternalServerError) *MethodsInternalErrorResponseBody {
	body := &MethodsInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewMethodsNotFoundResponseBody builds the HTTP response body from the result
// of the "methods" endpoint of the "mfa" service.
func NewMethodsNotFoundResponseBody(res *mfa.NotFoundError) *MethodsNotFoundResponseBody {
	body := &MethodsNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewMethodsUnauthorizedResponseBody builds the HTTP response body from the
// result of the "methods" endpoint of the "mfa" service.
func NewMethodsUnauthorizedResponseBody(res *mfa.UnauthorizedError) *MethodsUnauthorizedResponseBody {
	body := &MethodsUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewSendCodeBadRequestResponseBody builds the HTTP response body from the
// result of the "send_code" endpoint of the "mfa" service.
func NewSendCodeBadRequestResponseBody(res *mfa.BadRequestError) *SendCodeBadRequestResponseBody {
	body := &SendCodeBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewSendCodeForbiddenResponseBody builds the HTTP response body from the
// result of the "send_code" endpoint of the "mfa" service.
func NewSendCodeForbiddenResponseBody(res *mfa.ForbiddenError) *SendCodeForbiddenResponseBody {
	body := &SendCodeForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewSendCodeInternalErrorResponseBody builds the HTTP response body from the
// result of the "send_code" endpoint of the "mfa" service.
func NewSendCodeInternalErrorResponseBody(res *mfa.InternalServerError) *SendCodeInternalErrorResponseBody {
	body := &SendCodeInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewSendCodeNotFoundResponseBody builds the HTTP response body from the
// result of the "send_code" endpoint of the "mfa" service.
func NewSendCodeNotFoundResponseBody(res *mfa.NotFoundError) *SendCodeNotFoundResponseBody {
	body := &SendCodeNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewSendCodeUnauthorizedResponseBody builds the HTTP response body from the
// result of the "send_code" endpoint of the "mfa" service.
func NewSendCodeUnauthorizedResponseBody(res *mfa.UnauthorizedError) *SendCodeUnauthorizedResponseBody {
	body := &SendCodeUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewEnrollPayload builds a mfa service enroll endpoint payload.
func NewEnrollPayload(body *EnrollRequestBody, jwt *string) *mfa.EnrollPayload {
	v := &mfa.EnrollPayload{}
	v.Request = unmarshalMFAEnrollRequestRequestBodyToDesigntypesMFAEnrollRequest(body.Request)
	v.JWT = jwt

	return v
}

// NewVerifyPayload builds a mfa service verify endpoint payload.
func NewVerifyPayload(body *VerifyRequestBody, jwt *string) *mfa.VerifyPayload {
	v := &mfa.VerifyPayload{}
	v.Request = unmarshalMFAVerifyRequestRequestBodyToDesigntypesMFAVerifyRequest(body.Request)
	v.JWT = jwt

	return v
}

// NewUnenrollPayload builds a mfa service unenroll endpoint payload.
func NewUnenrollPayload(body *UnenrollRequestBody, jwt *string) *mfa.UnenrollPayload {
	v := &mfa.UnenrollPayload{}
	v.Request = unmarshalMFAUnEnrollRequestRequestBodyToDesigntypesMFAUnEnrollRequest(body.Request)
	v.JWT = jwt

	return v
}

// NewMethodsPayload builds a mfa service methods endpoint payload.
func NewMethodsPayload(jwt *string) *mfa.MethodsPayload {
	v := &mfa.MethodsPayload{}
	v.JWT = jwt

	return v
}

// NewSendCodePayload builds a mfa service send_code endpoint payload.
func NewSendCodePayload(body *SendCodeRequestBody, jwt *string) *mfa.SendCodePayload {
	v := &mfa.SendCodePayload{}
	v.Request = unmarshalSendMFACodeRequestRequestBodyToDesigntypesSendMFACodeRequest(body.Request)
	v.JWT = jwt

	return v
}

// ValidateEnrollRequestBody runs the validations defined on EnrollRequestBody
func ValidateEnrollRequestBody(body *EnrollRequestBody) (err error) {
	if body.Request == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("request", "body"))
	}
	if body.Request != nil {
		if err2 := ValidateMFAEnrollRequestRequestBody(body.Request); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateVerifyRequestBody runs the validations defined on VerifyRequestBody
func ValidateVerifyRequestBody(body *VerifyRequestBody) (err error) {
	if body.Request == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("request", "body"))
	}
	if body.Request != nil {
		if err2 := ValidateMFAVerifyRequestRequestBody(body.Request); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateUnenrollRequestBody runs the validations defined on
// UnenrollRequestBody
func ValidateUnenrollRequestBody(body *UnenrollRequestBody) (err error) {
	if body.Request == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("request", "body"))
	}
	if body.Request != nil {
		if err2 := ValidateMFAUnEnrollRequestRequestBody(body.Request); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateSendCodeRequestBody runs the validations defined on
// send_code_request_body
func ValidateSendCodeRequestBody(body *SendCodeRequestBody) (err error) {
	if body.Request == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("request", "body"))
	}
	if body.Request != nil {
		if err2 := ValidateSendMFACodeRequestRequestBody(body.Request); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateMFAEnrollRequestRequestBody runs the validations defined on
// MFAEnrollRequestRequestBody
func ValidateMFAEnrollRequestRequestBody(body *MFAEnrollRequestRequestBody) (err error) {
	if body.Method == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("method", "body"))
	}
	if body.Method != nil {
		if !(*body.Method == "totp" || *body.Method == "sms" || *body.Method == "email" || *body.Method == "backup_codes") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.method", *body.Method, []any{"totp", "sms", "email", "backup_codes"}))
		}
	}
	if body.Email != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", *body.Email, goa.FormatEmail))
	}
	return
}

// ValidateMFAVerifyRequestRequestBody runs the validations defined on
// MFAVerifyRequestRequestBody
func ValidateMFAVerifyRequestRequestBody(body *MFAVerifyRequestRequestBody) (err error) {
	if body.Method == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("method", "body"))
	}
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Method != nil {
		if !(*body.Method == "totp" || *body.Method == "sms" || *body.Method == "email" || *body.Method == "backup_codes") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.method", *body.Method, []any{"totp", "sms", "email", "backup_codes"}))
		}
	}
	return
}

// ValidateMFAUnEnrollRequestRequestBody runs the validations defined on
// MFAUnEnrollRequestRequestBody
func ValidateMFAUnEnrollRequestRequestBody(body *MFAUnEnrollRequestRequestBody) (err error) {
	if body.Method == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("method", "body"))
	}
	if body.Method != nil {
		if !(*body.Method == "totp" || *body.Method == "sms" || *body.Method == "email" || *body.Method == "backup_codes" || *body.Method == "all") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.method", *body.Method, []any{"totp", "sms", "email", "backup_codes", "all"}))
		}
	}
	return
}

// ValidateSendMFACodeRequestRequestBody runs the validations defined on
// SendMFACodeRequestRequestBody
func ValidateSendMFACodeRequestRequestBody(body *SendMFACodeRequestRequestBody) (err error) {
	if body.Method == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("method", "body"))
	}
	if body.Method != nil {
		if !(*body.Method == "sms" || *body.Method == "email") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.method", *body.Method, []any{"sms", "email"}))
		}
	}
	return
}
