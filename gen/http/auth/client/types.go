// Code generated by goa v3.20.0, DO NOT EDIT.
//
// auth HTTP client types
//
// Command:
// $ goa gen github.com/juicycleff/frank/design -o .

package client

import (
	"github.com/juicycleff/frank/gen/auth"
	"github.com/juicycleff/frank/gen/designtypes"
	"github.com/juicycleff/frank/pkg/user"
	goa "goa.design/goa/v3/pkg"
)

// LoginRequestBody is the type of the "auth" service "login" endpoint HTTP
// request body.
type LoginRequestBody struct {
	// User email
	Email string `form:"email" json:"email" xml:"email"`
	// User password
	Password string `form:"password" json:"password" xml:"password"`
	// Organization ID if logging into a specific organization
	OrganizationID *string `form:"organization_id,omitempty" json:"organization_id,omitempty" xml:"organization_id,omitempty"`
	// Whether to remember the user
	RememberMe bool `form:"remember_me" json:"remember_me" xml:"remember_me"`
	// CAPTCHA response for protected login
	CaptchaResponse *string `form:"captcha_response,omitempty" json:"captcha_response,omitempty" xml:"captcha_response,omitempty"`
}

// RegisterRequestBody is the type of the "auth" service "register" endpoint
// HTTP request body.
type RegisterRequestBody struct {
	// User email
	Email string `form:"email" json:"email" xml:"email"`
	// User password
	Password string `form:"password" json:"password" xml:"password"`
	// User first name
	FirstName *string `form:"first_name,omitempty" json:"first_name,omitempty" xml:"first_name,omitempty"`
	// User last name
	LastName *string `form:"last_name,omitempty" json:"last_name,omitempty" xml:"last_name,omitempty"`
	// Organization ID if creating a user for a specific organization
	OrganizationID *string `form:"organization_id,omitempty" json:"organization_id,omitempty" xml:"organization_id,omitempty"`
	// Additional user metadata
	Metadata map[string]any `form:"metadata,omitempty" json:"metadata,omitempty" xml:"metadata,omitempty"`
}

// RefreshTokenRequestBody is the type of the "auth" service "refresh_token"
// endpoint HTTP request body.
type RefreshTokenRequestBody struct {
	// JWTAuth refresh token
	RefreshToken string `form:"refresh_token" json:"refresh_token" xml:"refresh_token"`
}

// ForgotPasswordRequestBody is the type of the "auth" service
// "forgot_password" endpoint HTTP request body.
type ForgotPasswordRequestBody struct {
	// User email
	Email string `form:"email" json:"email" xml:"email"`
}

// ResetPasswordRequestBody is the type of the "auth" service "reset_password"
// endpoint HTTP request body.
type ResetPasswordRequestBody struct {
	// Password reset token
	Token string `form:"token" json:"token" xml:"token"`
	// New password
	NewPassword string `form:"new_password" json:"new_password" xml:"new_password"`
}

// VerifyEmailRequestBody is the type of the "auth" service "verify_email"
// endpoint HTTP request body.
type VerifyEmailRequestBody struct {
	// Email verification token for link verification
	Token *string `form:"token,omitempty" json:"token,omitempty" xml:"token,omitempty"`
	// One-time password for OTP verification
	Otp *string `form:"otp,omitempty" json:"otp,omitempty" xml:"otp,omitempty"`
	// User email
	Email string `form:"email" json:"email" xml:"email"`
	// Verification method (link or otp)
	Method user.VerificationMethod `form:"method" json:"method" xml:"method"`
}

// SendEmailVerificationRequestBody is the type of the "auth" service
// "send_email_verification" endpoint HTTP request body.
type SendEmailVerificationRequestBody struct {
	// User email
	Email string `form:"email" json:"email" xml:"email"`
	// Verification method (link or otp)
	Method user.VerificationMethod `form:"method" json:"method" xml:"method"`
}

// LoginResponseBody is the type of the "auth" service "login" endpoint HTTP
// response body.
type LoginResponseBody struct {
	// Authenticated user
	User *UserResponseBody `form:"user,omitempty" json:"user,omitempty" xml:"user,omitempty"`
	// JWTAuth access token
	Token *string `form:"token,omitempty" json:"token,omitempty" xml:"token,omitempty"`
	// JWTAuth refresh token
	RefreshToken *string `form:"refresh_token,omitempty" json:"refresh_token,omitempty" xml:"refresh_token,omitempty"`
	// CSRF token
	CsrfToken *string `form:"csrf_token,omitempty" json:"csrf_token,omitempty" xml:"csrf_token,omitempty"`
	// Token expiry timestamp
	ExpiresAt *int64 `form:"expires_at,omitempty" json:"expires_at,omitempty" xml:"expires_at,omitempty"`
	// Whether MFA is required to complete authentication
	MfaRequired *bool `form:"mfa_required,omitempty" json:"mfa_required,omitempty" xml:"mfa_required,omitempty"`
	// Available MFA methods when MFA is required
	MfaTypes []string `form:"mfa_types,omitempty" json:"mfa_types,omitempty" xml:"mfa_types,omitempty"`
	// Login message
	Message *string `json:"message,omitempty"`
	// Whether email verification is required
	VerificationRequired *bool `form:"verificationRequired,omitempty" json:"verificationRequired,omitempty" xml:"verificationRequired,omitempty"`
	// Verification ID for email verification
	VerificationID *string `form:"verificationId,omitempty" json:"verificationId,omitempty" xml:"verificationId,omitempty"`
	// Verification method for email verification
	VerificationMethod *string `form:"verificationMethod,omitempty" json:"verificationMethod,omitempty" xml:"verificationMethod,omitempty"`
	// Whether email is verified
	EmailVerified *bool `form:"emailVerified,omitempty" json:"emailVerified,omitempty" xml:"emailVerified,omitempty"`
	// Whether email verification is required
	RequiresVerification *bool `form:"requiresVerification,omitempty" json:"requiresVerification,omitempty" xml:"requiresVerification,omitempty"`
}

// RegisterResponseBody is the type of the "auth" service "register" endpoint
// HTTP response body.
type RegisterResponseBody struct {
	// Authenticated user
	User *UserResponseBody `form:"user,omitempty" json:"user,omitempty" xml:"user,omitempty"`
	// JWTAuth access token
	Token *string `form:"token,omitempty" json:"token,omitempty" xml:"token,omitempty"`
	// JWTAuth refresh token
	RefreshToken *string `form:"refresh_token,omitempty" json:"refresh_token,omitempty" xml:"refresh_token,omitempty"`
	// CSRF token
	CsrfToken *string `form:"csrf_token,omitempty" json:"csrf_token,omitempty" xml:"csrf_token,omitempty"`
	// Token expiry timestamp
	ExpiresAt *int64 `form:"expires_at,omitempty" json:"expires_at,omitempty" xml:"expires_at,omitempty"`
	// Whether MFA is required to complete authentication
	MfaRequired *bool `form:"mfa_required,omitempty" json:"mfa_required,omitempty" xml:"mfa_required,omitempty"`
	// Available MFA methods when MFA is required
	MfaTypes []string `form:"mfa_types,omitempty" json:"mfa_types,omitempty" xml:"mfa_types,omitempty"`
	// Login message
	Message *string `json:"message,omitempty"`
	// Whether email verification is required
	VerificationRequired *bool `form:"verificationRequired,omitempty" json:"verificationRequired,omitempty" xml:"verificationRequired,omitempty"`
	// Verification ID for email verification
	VerificationID *string `form:"verificationId,omitempty" json:"verificationId,omitempty" xml:"verificationId,omitempty"`
	// Verification method for email verification
	VerificationMethod *string `form:"verificationMethod,omitempty" json:"verificationMethod,omitempty" xml:"verificationMethod,omitempty"`
	// Whether email is verified
	EmailVerified *bool `form:"emailVerified,omitempty" json:"emailVerified,omitempty" xml:"emailVerified,omitempty"`
	// Whether email verification is required
	RequiresVerification *bool `form:"requiresVerification,omitempty" json:"requiresVerification,omitempty" xml:"requiresVerification,omitempty"`
}

// LogoutResponseBody is the type of the "auth" service "logout" endpoint HTTP
// response body.
type LogoutResponseBody struct {
	// Success message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// RefreshTokenResponseBody is the type of the "auth" service "refresh_token"
// endpoint HTTP response body.
type RefreshTokenResponseBody struct {
	// New JWTAuth access token
	Token *string `form:"token,omitempty" json:"token,omitempty" xml:"token,omitempty"`
	// New refresh token
	RefreshToken *string `form:"refresh_token,omitempty" json:"refresh_token,omitempty" xml:"refresh_token,omitempty"`
	// Token expiry timestamp
	ExpiresAt *int64 `form:"expires_at,omitempty" json:"expires_at,omitempty" xml:"expires_at,omitempty"`
}

// ForgotPasswordResponseBody is the type of the "auth" service
// "forgot_password" endpoint HTTP response body.
type ForgotPasswordResponseBody struct {
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// ResetPasswordResponseBody is the type of the "auth" service "reset_password"
// endpoint HTTP response body.
type ResetPasswordResponseBody struct {
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// VerifyEmailResponseBody is the type of the "auth" service "verify_email"
// endpoint HTTP response body.
type VerifyEmailResponseBody struct {
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// SendEmailVerificationResponseBody is the type of the "auth" service
// "send_email_verification" endpoint HTTP response body.
type SendEmailVerificationResponseBody struct {
	// Success message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// When the verification code/link expires
	ExpiresAt *int64 `form:"expires_at,omitempty" json:"expires_at,omitempty" xml:"expires_at,omitempty"`
}

// CheckEmailVerificationResponseBody is the type of the "auth" service
// "check_email_verification" endpoint HTTP response body.
type CheckEmailVerificationResponseBody struct {
	// Whether email is verified
	Verified *bool `form:"verified,omitempty" json:"verified,omitempty" xml:"verified,omitempty"`
}

// MeResponseBody is the type of the "auth" service "me" endpoint HTTP response
// body.
type MeResponseBody struct {
	// Whether account is active
	Active *bool `form:"active,omitempty" json:"active,omitempty" xml:"active,omitempty"`
	// Whether email is verified
	EmailVerified *bool `json:"email_verified,emailVerified"`
	// Whether phone is verified
	PhoneVerified *bool `json:"phone_verified,phoneVerified"`
	// URL to user's profile image
	ProfileImageURL *string `json:"profile_image_url,profileImageUrl"`
	// User first name
	FirstName *string `json:"first_name,firstName"`
	// User last name
	LastName *string `json:"last_name,lastName"`
	// ID of the entity
	ID *string `json:"id"`
	// User phone number
	PhoneNumber *string `json:"phone_number,phoneNumber"`
	// User metadata
	Metadata map[string]any `json:"metadata"`
	// User locale
	Locale *string `json:"locale"`
	// Email address
	Email *string `json:"email"`
}

// CsrfResponseBody is the type of the "auth" service "csrf" endpoint HTTP
// response body.
type CsrfResponseBody struct {
	// CSRF token
	CsrfToken *string `form:"csrf_token,omitempty" json:"csrf_token,omitempty" xml:"csrf_token,omitempty"`
}

// LoginBadRequestResponseBody is the type of the "auth" service "login"
// endpoint HTTP response body for the "bad_request" error.
type LoginBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// LoginConflictResponseBody is the type of the "auth" service "login" endpoint
// HTTP response body for the "conflict" error.
type LoginConflictResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// LoginForbiddenResponseBody is the type of the "auth" service "login"
// endpoint HTTP response body for the "forbidden" error.
type LoginForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// LoginInternalErrorResponseBody is the type of the "auth" service "login"
// endpoint HTTP response body for the "internal_error" error.
type LoginInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// LoginNotFoundResponseBody is the type of the "auth" service "login" endpoint
// HTTP response body for the "not_found" error.
type LoginNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// LoginUnauthorizedResponseBody is the type of the "auth" service "login"
// endpoint HTTP response body for the "unauthorized" error.
type LoginUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// RegisterBadRequestResponseBody is the type of the "auth" service "register"
// endpoint HTTP response body for the "bad_request" error.
type RegisterBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// RegisterConflictResponseBody is the type of the "auth" service "register"
// endpoint HTTP response body for the "conflict" error.
type RegisterConflictResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// RegisterForbiddenResponseBody is the type of the "auth" service "register"
// endpoint HTTP response body for the "forbidden" error.
type RegisterForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// RegisterInternalErrorResponseBody is the type of the "auth" service
// "register" endpoint HTTP response body for the "internal_error" error.
type RegisterInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// RegisterNotFoundResponseBody is the type of the "auth" service "register"
// endpoint HTTP response body for the "not_found" error.
type RegisterNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// RegisterUnauthorizedResponseBody is the type of the "auth" service
// "register" endpoint HTTP response body for the "unauthorized" error.
type RegisterUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// LogoutBadRequestResponseBody is the type of the "auth" service "logout"
// endpoint HTTP response body for the "bad_request" error.
type LogoutBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// LogoutConflictResponseBody is the type of the "auth" service "logout"
// endpoint HTTP response body for the "conflict" error.
type LogoutConflictResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// LogoutForbiddenResponseBody is the type of the "auth" service "logout"
// endpoint HTTP response body for the "forbidden" error.
type LogoutForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// LogoutInternalErrorResponseBody is the type of the "auth" service "logout"
// endpoint HTTP response body for the "internal_error" error.
type LogoutInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// LogoutNotFoundResponseBody is the type of the "auth" service "logout"
// endpoint HTTP response body for the "not_found" error.
type LogoutNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// LogoutUnauthorizedResponseBody is the type of the "auth" service "logout"
// endpoint HTTP response body for the "unauthorized" error.
type LogoutUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// RefreshTokenBadRequestResponseBody is the type of the "auth" service
// "refresh_token" endpoint HTTP response body for the "bad_request" error.
type RefreshTokenBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// RefreshTokenConflictResponseBody is the type of the "auth" service
// "refresh_token" endpoint HTTP response body for the "conflict" error.
type RefreshTokenConflictResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// RefreshTokenForbiddenResponseBody is the type of the "auth" service
// "refresh_token" endpoint HTTP response body for the "forbidden" error.
type RefreshTokenForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// RefreshTokenInternalErrorResponseBody is the type of the "auth" service
// "refresh_token" endpoint HTTP response body for the "internal_error" error.
type RefreshTokenInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// RefreshTokenNotFoundResponseBody is the type of the "auth" service
// "refresh_token" endpoint HTTP response body for the "not_found" error.
type RefreshTokenNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// RefreshTokenUnauthorizedResponseBody is the type of the "auth" service
// "refresh_token" endpoint HTTP response body for the "unauthorized" error.
type RefreshTokenUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ForgotPasswordBadRequestResponseBody is the type of the "auth" service
// "forgot_password" endpoint HTTP response body for the "bad_request" error.
type ForgotPasswordBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ForgotPasswordConflictResponseBody is the type of the "auth" service
// "forgot_password" endpoint HTTP response body for the "conflict" error.
type ForgotPasswordConflictResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ForgotPasswordForbiddenResponseBody is the type of the "auth" service
// "forgot_password" endpoint HTTP response body for the "forbidden" error.
type ForgotPasswordForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ForgotPasswordInternalErrorResponseBody is the type of the "auth" service
// "forgot_password" endpoint HTTP response body for the "internal_error" error.
type ForgotPasswordInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ForgotPasswordNotFoundResponseBody is the type of the "auth" service
// "forgot_password" endpoint HTTP response body for the "not_found" error.
type ForgotPasswordNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ForgotPasswordUnauthorizedResponseBody is the type of the "auth" service
// "forgot_password" endpoint HTTP response body for the "unauthorized" error.
type ForgotPasswordUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ResetPasswordBadRequestResponseBody is the type of the "auth" service
// "reset_password" endpoint HTTP response body for the "bad_request" error.
type ResetPasswordBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ResetPasswordConflictResponseBody is the type of the "auth" service
// "reset_password" endpoint HTTP response body for the "conflict" error.
type ResetPasswordConflictResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ResetPasswordForbiddenResponseBody is the type of the "auth" service
// "reset_password" endpoint HTTP response body for the "forbidden" error.
type ResetPasswordForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ResetPasswordInternalErrorResponseBody is the type of the "auth" service
// "reset_password" endpoint HTTP response body for the "internal_error" error.
type ResetPasswordInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ResetPasswordNotFoundResponseBody is the type of the "auth" service
// "reset_password" endpoint HTTP response body for the "not_found" error.
type ResetPasswordNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ResetPasswordUnauthorizedResponseBody is the type of the "auth" service
// "reset_password" endpoint HTTP response body for the "unauthorized" error.
type ResetPasswordUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// VerifyEmailBadRequestResponseBody is the type of the "auth" service
// "verify_email" endpoint HTTP response body for the "bad_request" error.
type VerifyEmailBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// VerifyEmailConflictResponseBody is the type of the "auth" service
// "verify_email" endpoint HTTP response body for the "conflict" error.
type VerifyEmailConflictResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// VerifyEmailForbiddenResponseBody is the type of the "auth" service
// "verify_email" endpoint HTTP response body for the "forbidden" error.
type VerifyEmailForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// VerifyEmailInternalErrorResponseBody is the type of the "auth" service
// "verify_email" endpoint HTTP response body for the "internal_error" error.
type VerifyEmailInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// VerifyEmailNotFoundResponseBody is the type of the "auth" service
// "verify_email" endpoint HTTP response body for the "not_found" error.
type VerifyEmailNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// VerifyEmailUnauthorizedResponseBody is the type of the "auth" service
// "verify_email" endpoint HTTP response body for the "unauthorized" error.
type VerifyEmailUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// SendEmailVerificationBadRequestResponseBody is the type of the "auth"
// service "send_email_verification" endpoint HTTP response body for the
// "bad_request" error.
type SendEmailVerificationBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// SendEmailVerificationConflictResponseBody is the type of the "auth" service
// "send_email_verification" endpoint HTTP response body for the "conflict"
// error.
type SendEmailVerificationConflictResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// SendEmailVerificationForbiddenResponseBody is the type of the "auth" service
// "send_email_verification" endpoint HTTP response body for the "forbidden"
// error.
type SendEmailVerificationForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// SendEmailVerificationInternalErrorResponseBody is the type of the "auth"
// service "send_email_verification" endpoint HTTP response body for the
// "internal_error" error.
type SendEmailVerificationInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// SendEmailVerificationNotFoundResponseBody is the type of the "auth" service
// "send_email_verification" endpoint HTTP response body for the "not_found"
// error.
type SendEmailVerificationNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// SendEmailVerificationUnauthorizedResponseBody is the type of the "auth"
// service "send_email_verification" endpoint HTTP response body for the
// "unauthorized" error.
type SendEmailVerificationUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CheckEmailVerificationBadRequestResponseBody is the type of the "auth"
// service "check_email_verification" endpoint HTTP response body for the
// "bad_request" error.
type CheckEmailVerificationBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CheckEmailVerificationConflictResponseBody is the type of the "auth" service
// "check_email_verification" endpoint HTTP response body for the "conflict"
// error.
type CheckEmailVerificationConflictResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CheckEmailVerificationForbiddenResponseBody is the type of the "auth"
// service "check_email_verification" endpoint HTTP response body for the
// "forbidden" error.
type CheckEmailVerificationForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CheckEmailVerificationInternalErrorResponseBody is the type of the "auth"
// service "check_email_verification" endpoint HTTP response body for the
// "internal_error" error.
type CheckEmailVerificationInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CheckEmailVerificationNotFoundResponseBody is the type of the "auth" service
// "check_email_verification" endpoint HTTP response body for the "not_found"
// error.
type CheckEmailVerificationNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CheckEmailVerificationUnauthorizedResponseBody is the type of the "auth"
// service "check_email_verification" endpoint HTTP response body for the
// "unauthorized" error.
type CheckEmailVerificationUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// MeBadRequestResponseBody is the type of the "auth" service "me" endpoint
// HTTP response body for the "bad_request" error.
type MeBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// MeConflictResponseBody is the type of the "auth" service "me" endpoint HTTP
// response body for the "conflict" error.
type MeConflictResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// MeForbiddenResponseBody is the type of the "auth" service "me" endpoint HTTP
// response body for the "forbidden" error.
type MeForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// MeInternalErrorResponseBody is the type of the "auth" service "me" endpoint
// HTTP response body for the "internal_error" error.
type MeInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// MeNotFoundResponseBody is the type of the "auth" service "me" endpoint HTTP
// response body for the "not_found" error.
type MeNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// MeUnauthorizedResponseBody is the type of the "auth" service "me" endpoint
// HTTP response body for the "unauthorized" error.
type MeUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CsrfBadRequestResponseBody is the type of the "auth" service "csrf" endpoint
// HTTP response body for the "bad_request" error.
type CsrfBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CsrfConflictResponseBody is the type of the "auth" service "csrf" endpoint
// HTTP response body for the "conflict" error.
type CsrfConflictResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CsrfForbiddenResponseBody is the type of the "auth" service "csrf" endpoint
// HTTP response body for the "forbidden" error.
type CsrfForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CsrfInternalErrorResponseBody is the type of the "auth" service "csrf"
// endpoint HTTP response body for the "internal_error" error.
type CsrfInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CsrfNotFoundResponseBody is the type of the "auth" service "csrf" endpoint
// HTTP response body for the "not_found" error.
type CsrfNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CsrfUnauthorizedResponseBody is the type of the "auth" service "csrf"
// endpoint HTTP response body for the "unauthorized" error.
type CsrfUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UserResponseBody is used to define fields on response body types.
type UserResponseBody struct {
	// Whether account is active
	Active *bool `form:"active,omitempty" json:"active,omitempty" xml:"active,omitempty"`
	// Whether email is verified
	EmailVerified *bool `json:"email_verified,emailVerified"`
	// Whether phone is verified
	PhoneVerified *bool `json:"phone_verified,phoneVerified"`
	// URL to user's profile image
	ProfileImageURL *string `json:"profile_image_url,profileImageUrl"`
	// User first name
	FirstName *string `json:"first_name,firstName"`
	// User last name
	LastName *string `json:"last_name,lastName"`
	// ID of the entity
	ID *string `json:"id"`
	// User phone number
	PhoneNumber *string `json:"phone_number,phoneNumber"`
	// User metadata
	Metadata map[string]any `json:"metadata"`
	// User locale
	Locale *string `json:"locale"`
	// Email address
	Email *string `json:"email"`
}

// NewLoginRequestBody builds the HTTP request body from the payload of the
// "login" endpoint of the "auth" service.
func NewLoginRequestBody(p *auth.LoginPayload) *LoginRequestBody {
	body := &LoginRequestBody{
		Email:           p.Email,
		Password:        p.Password,
		OrganizationID:  p.OrganizationID,
		RememberMe:      p.RememberMe,
		CaptchaResponse: p.CaptchaResponse,
	}
	{
		var zero bool
		if body.RememberMe == zero {
			body.RememberMe = false
		}
	}
	return body
}

// NewRegisterRequestBody builds the HTTP request body from the payload of the
// "register" endpoint of the "auth" service.
func NewRegisterRequestBody(p *auth.RegisterPayload) *RegisterRequestBody {
	body := &RegisterRequestBody{
		Email:          p.Email,
		Password:       p.Password,
		FirstName:      p.FirstName,
		LastName:       p.LastName,
		OrganizationID: p.OrganizationID,
	}
	if p.Metadata != nil {
		body.Metadata = make(map[string]any, len(p.Metadata))
		for key, val := range p.Metadata {
			tk := key
			tv := val
			body.Metadata[tk] = tv
		}
	}
	return body
}

// NewRefreshTokenRequestBody builds the HTTP request body from the payload of
// the "refresh_token" endpoint of the "auth" service.
func NewRefreshTokenRequestBody(p *auth.RefreshTokenPayload) *RefreshTokenRequestBody {
	body := &RefreshTokenRequestBody{
		RefreshToken: p.RefreshToken,
	}
	return body
}

// NewForgotPasswordRequestBody builds the HTTP request body from the payload
// of the "forgot_password" endpoint of the "auth" service.
func NewForgotPasswordRequestBody(p *auth.ForgotPasswordPayload) *ForgotPasswordRequestBody {
	body := &ForgotPasswordRequestBody{
		Email: p.Email,
	}
	return body
}

// NewResetPasswordRequestBody builds the HTTP request body from the payload of
// the "reset_password" endpoint of the "auth" service.
func NewResetPasswordRequestBody(p *auth.ResetPasswordPayload) *ResetPasswordRequestBody {
	body := &ResetPasswordRequestBody{
		Token:       p.Token,
		NewPassword: p.NewPassword,
	}
	return body
}

// NewVerifyEmailRequestBody builds the HTTP request body from the payload of
// the "verify_email" endpoint of the "auth" service.
func NewVerifyEmailRequestBody(p *auth.VerifyEmailPayload) *VerifyEmailRequestBody {
	body := &VerifyEmailRequestBody{
		Token:  p.Token,
		Otp:    p.Otp,
		Email:  p.Email,
		Method: p.Method,
	}
	return body
}

// NewSendEmailVerificationRequestBody builds the HTTP request body from the
// payload of the "send_email_verification" endpoint of the "auth" service.
func NewSendEmailVerificationRequestBody(p *auth.SendEmailVerificationPayload) *SendEmailVerificationRequestBody {
	body := &SendEmailVerificationRequestBody{
		Email:  p.Email,
		Method: p.Method,
	}
	{
		var zero user.VerificationMethod
		if body.Method == zero {
			body.Method = "otp"
		}
	}
	return body
}

// NewLoginResponseOK builds a "auth" service "login" endpoint result from a
// HTTP "OK" response.
func NewLoginResponseOK(body *LoginResponseBody, sessionID *string) *auth.LoginResponse {
	v := &auth.LoginResponse{
		Token:                *body.Token,
		RefreshToken:         *body.RefreshToken,
		CsrfToken:            *body.CsrfToken,
		ExpiresAt:            *body.ExpiresAt,
		MfaRequired:          *body.MfaRequired,
		VerificationRequired: body.VerificationRequired,
		VerificationID:       body.VerificationID,
		VerificationMethod:   body.VerificationMethod,
		EmailVerified:        body.EmailVerified,
		RequiresVerification: body.RequiresVerification,
	}
	if body.Message != nil {
		v.Message = *body.Message
	}
	v.User = unmarshalUserResponseBodyToDesigntypesUser(body.User)
	if body.MfaTypes != nil {
		v.MfaTypes = make([]string, len(body.MfaTypes))
		for i, val := range body.MfaTypes {
			v.MfaTypes[i] = val
		}
	}
	if body.Message == nil {
		v.Message = "Login successful"
	}
	v.SessionID = sessionID

	return v
}

// NewLoginBadRequest builds a auth service login endpoint bad_request error.
func NewLoginBadRequest(body *LoginBadRequestResponseBody) *auth.BadRequestError {
	v := &auth.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewLoginConflict builds a auth service login endpoint conflict error.
func NewLoginConflict(body *LoginConflictResponseBody) *auth.ConflictError {
	v := &auth.ConflictError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewLoginForbidden builds a auth service login endpoint forbidden error.
func NewLoginForbidden(body *LoginForbiddenResponseBody) *auth.ForbiddenError {
	v := &auth.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewLoginInternalError builds a auth service login endpoint internal_error
// error.
func NewLoginInternalError(body *LoginInternalErrorResponseBody) *auth.InternalServerError {
	v := &auth.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewLoginNotFound builds a auth service login endpoint not_found error.
func NewLoginNotFound(body *LoginNotFoundResponseBody) *auth.NotFoundError {
	v := &auth.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewLoginUnauthorized builds a auth service login endpoint unauthorized error.
func NewLoginUnauthorized(body *LoginUnauthorizedResponseBody) *auth.UnauthorizedError {
	v := &auth.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewRegisterLoginResponseCreated builds a "auth" service "register" endpoint
// result from a HTTP "Created" response.
func NewRegisterLoginResponseCreated(body *RegisterResponseBody, sessionID *string) *auth.LoginResponse {
	v := &auth.LoginResponse{
		Token:                *body.Token,
		RefreshToken:         *body.RefreshToken,
		CsrfToken:            *body.CsrfToken,
		ExpiresAt:            *body.ExpiresAt,
		MfaRequired:          *body.MfaRequired,
		VerificationRequired: body.VerificationRequired,
		VerificationID:       body.VerificationID,
		VerificationMethod:   body.VerificationMethod,
		EmailVerified:        body.EmailVerified,
		RequiresVerification: body.RequiresVerification,
	}
	if body.Message != nil {
		v.Message = *body.Message
	}
	v.User = unmarshalUserResponseBodyToDesigntypesUser(body.User)
	if body.MfaTypes != nil {
		v.MfaTypes = make([]string, len(body.MfaTypes))
		for i, val := range body.MfaTypes {
			v.MfaTypes[i] = val
		}
	}
	if body.Message == nil {
		v.Message = "Login successful"
	}
	v.SessionID = sessionID

	return v
}

// NewRegisterBadRequest builds a auth service register endpoint bad_request
// error.
func NewRegisterBadRequest(body *RegisterBadRequestResponseBody) *auth.BadRequestError {
	v := &auth.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewRegisterConflict builds a auth service register endpoint conflict error.
func NewRegisterConflict(body *RegisterConflictResponseBody) *auth.ConflictError {
	v := &auth.ConflictError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewRegisterForbidden builds a auth service register endpoint forbidden error.
func NewRegisterForbidden(body *RegisterForbiddenResponseBody) *auth.ForbiddenError {
	v := &auth.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewRegisterInternalError builds a auth service register endpoint
// internal_error error.
func NewRegisterInternalError(body *RegisterInternalErrorResponseBody) *auth.InternalServerError {
	v := &auth.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewRegisterNotFound builds a auth service register endpoint not_found error.
func NewRegisterNotFound(body *RegisterNotFoundResponseBody) *auth.NotFoundError {
	v := &auth.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewRegisterUnauthorized builds a auth service register endpoint unauthorized
// error.
func NewRegisterUnauthorized(body *RegisterUnauthorizedResponseBody) *auth.UnauthorizedError {
	v := &auth.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewLogoutResultOK builds a "auth" service "logout" endpoint result from a
// HTTP "OK" response.
func NewLogoutResultOK(body *LogoutResponseBody) *auth.LogoutResult {
	v := &auth.LogoutResult{
		Message: *body.Message,
	}

	return v
}

// NewLogoutBadRequest builds a auth service logout endpoint bad_request error.
func NewLogoutBadRequest(body *LogoutBadRequestResponseBody) *auth.BadRequestError {
	v := &auth.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewLogoutConflict builds a auth service logout endpoint conflict error.
func NewLogoutConflict(body *LogoutConflictResponseBody) *auth.ConflictError {
	v := &auth.ConflictError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewLogoutForbidden builds a auth service logout endpoint forbidden error.
func NewLogoutForbidden(body *LogoutForbiddenResponseBody) *auth.ForbiddenError {
	v := &auth.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewLogoutInternalError builds a auth service logout endpoint internal_error
// error.
func NewLogoutInternalError(body *LogoutInternalErrorResponseBody) *auth.InternalServerError {
	v := &auth.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewLogoutNotFound builds a auth service logout endpoint not_found error.
func NewLogoutNotFound(body *LogoutNotFoundResponseBody) *auth.NotFoundError {
	v := &auth.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewLogoutUnauthorized builds a auth service logout endpoint unauthorized
// error.
func NewLogoutUnauthorized(body *LogoutUnauthorizedResponseBody) *auth.UnauthorizedError {
	v := &auth.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewRefreshTokenResponseOK builds a "auth" service "refresh_token" endpoint
// result from a HTTP "OK" response.
func NewRefreshTokenResponseOK(body *RefreshTokenResponseBody) *auth.RefreshTokenResponse {
	v := &auth.RefreshTokenResponse{
		Token:        *body.Token,
		RefreshToken: *body.RefreshToken,
		ExpiresAt:    *body.ExpiresAt,
	}

	return v
}

// NewRefreshTokenBadRequest builds a auth service refresh_token endpoint
// bad_request error.
func NewRefreshTokenBadRequest(body *RefreshTokenBadRequestResponseBody) *auth.BadRequestError {
	v := &auth.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewRefreshTokenConflict builds a auth service refresh_token endpoint
// conflict error.
func NewRefreshTokenConflict(body *RefreshTokenConflictResponseBody) *auth.ConflictError {
	v := &auth.ConflictError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewRefreshTokenForbidden builds a auth service refresh_token endpoint
// forbidden error.
func NewRefreshTokenForbidden(body *RefreshTokenForbiddenResponseBody) *auth.ForbiddenError {
	v := &auth.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewRefreshTokenInternalError builds a auth service refresh_token endpoint
// internal_error error.
func NewRefreshTokenInternalError(body *RefreshTokenInternalErrorResponseBody) *auth.InternalServerError {
	v := &auth.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewRefreshTokenNotFound builds a auth service refresh_token endpoint
// not_found error.
func NewRefreshTokenNotFound(body *RefreshTokenNotFoundResponseBody) *auth.NotFoundError {
	v := &auth.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewRefreshTokenUnauthorized builds a auth service refresh_token endpoint
// unauthorized error.
func NewRefreshTokenUnauthorized(body *RefreshTokenUnauthorizedResponseBody) *auth.UnauthorizedError {
	v := &auth.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewForgotPasswordResultAccepted builds a "auth" service "forgot_password"
// endpoint result from a HTTP "Accepted" response.
func NewForgotPasswordResultAccepted(body *ForgotPasswordResponseBody) *auth.ForgotPasswordResult {
	v := &auth.ForgotPasswordResult{
		Message: *body.Message,
	}

	return v
}

// NewForgotPasswordBadRequest builds a auth service forgot_password endpoint
// bad_request error.
func NewForgotPasswordBadRequest(body *ForgotPasswordBadRequestResponseBody) *auth.BadRequestError {
	v := &auth.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewForgotPasswordConflict builds a auth service forgot_password endpoint
// conflict error.
func NewForgotPasswordConflict(body *ForgotPasswordConflictResponseBody) *auth.ConflictError {
	v := &auth.ConflictError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewForgotPasswordForbidden builds a auth service forgot_password endpoint
// forbidden error.
func NewForgotPasswordForbidden(body *ForgotPasswordForbiddenResponseBody) *auth.ForbiddenError {
	v := &auth.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewForgotPasswordInternalError builds a auth service forgot_password
// endpoint internal_error error.
func NewForgotPasswordInternalError(body *ForgotPasswordInternalErrorResponseBody) *auth.InternalServerError {
	v := &auth.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewForgotPasswordNotFound builds a auth service forgot_password endpoint
// not_found error.
func NewForgotPasswordNotFound(body *ForgotPasswordNotFoundResponseBody) *auth.NotFoundError {
	v := &auth.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewForgotPasswordUnauthorized builds a auth service forgot_password endpoint
// unauthorized error.
func NewForgotPasswordUnauthorized(body *ForgotPasswordUnauthorizedResponseBody) *auth.UnauthorizedError {
	v := &auth.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewResetPasswordResultOK builds a "auth" service "reset_password" endpoint
// result from a HTTP "OK" response.
func NewResetPasswordResultOK(body *ResetPasswordResponseBody) *auth.ResetPasswordResult {
	v := &auth.ResetPasswordResult{
		Message: *body.Message,
	}

	return v
}

// NewResetPasswordBadRequest builds a auth service reset_password endpoint
// bad_request error.
func NewResetPasswordBadRequest(body *ResetPasswordBadRequestResponseBody) *auth.BadRequestError {
	v := &auth.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewResetPasswordConflict builds a auth service reset_password endpoint
// conflict error.
func NewResetPasswordConflict(body *ResetPasswordConflictResponseBody) *auth.ConflictError {
	v := &auth.ConflictError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewResetPasswordForbidden builds a auth service reset_password endpoint
// forbidden error.
func NewResetPasswordForbidden(body *ResetPasswordForbiddenResponseBody) *auth.ForbiddenError {
	v := &auth.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewResetPasswordInternalError builds a auth service reset_password endpoint
// internal_error error.
func NewResetPasswordInternalError(body *ResetPasswordInternalErrorResponseBody) *auth.InternalServerError {
	v := &auth.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewResetPasswordNotFound builds a auth service reset_password endpoint
// not_found error.
func NewResetPasswordNotFound(body *ResetPasswordNotFoundResponseBody) *auth.NotFoundError {
	v := &auth.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewResetPasswordUnauthorized builds a auth service reset_password endpoint
// unauthorized error.
func NewResetPasswordUnauthorized(body *ResetPasswordUnauthorizedResponseBody) *auth.UnauthorizedError {
	v := &auth.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewVerifyEmailResultOK builds a "auth" service "verify_email" endpoint
// result from a HTTP "OK" response.
func NewVerifyEmailResultOK(body *VerifyEmailResponseBody) *auth.VerifyEmailResult {
	v := &auth.VerifyEmailResult{
		Message: *body.Message,
	}

	return v
}

// NewVerifyEmailBadRequest builds a auth service verify_email endpoint
// bad_request error.
func NewVerifyEmailBadRequest(body *VerifyEmailBadRequestResponseBody) *auth.BadRequestError {
	v := &auth.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewVerifyEmailConflict builds a auth service verify_email endpoint conflict
// error.
func NewVerifyEmailConflict(body *VerifyEmailConflictResponseBody) *auth.ConflictError {
	v := &auth.ConflictError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewVerifyEmailForbidden builds a auth service verify_email endpoint
// forbidden error.
func NewVerifyEmailForbidden(body *VerifyEmailForbiddenResponseBody) *auth.ForbiddenError {
	v := &auth.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewVerifyEmailInternalError builds a auth service verify_email endpoint
// internal_error error.
func NewVerifyEmailInternalError(body *VerifyEmailInternalErrorResponseBody) *auth.InternalServerError {
	v := &auth.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewVerifyEmailNotFound builds a auth service verify_email endpoint not_found
// error.
func NewVerifyEmailNotFound(body *VerifyEmailNotFoundResponseBody) *auth.NotFoundError {
	v := &auth.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewVerifyEmailUnauthorized builds a auth service verify_email endpoint
// unauthorized error.
func NewVerifyEmailUnauthorized(body *VerifyEmailUnauthorizedResponseBody) *auth.UnauthorizedError {
	v := &auth.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewSendEmailVerificationResultOK builds a "auth" service
// "send_email_verification" endpoint result from a HTTP "OK" response.
func NewSendEmailVerificationResultOK(body *SendEmailVerificationResponseBody) *auth.SendEmailVerificationResult {
	v := &auth.SendEmailVerificationResult{
		Message:   *body.Message,
		ExpiresAt: *body.ExpiresAt,
	}

	return v
}

// NewSendEmailVerificationBadRequest builds a auth service
// send_email_verification endpoint bad_request error.
func NewSendEmailVerificationBadRequest(body *SendEmailVerificationBadRequestResponseBody) *auth.BadRequestError {
	v := &auth.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewSendEmailVerificationConflict builds a auth service
// send_email_verification endpoint conflict error.
func NewSendEmailVerificationConflict(body *SendEmailVerificationConflictResponseBody) *auth.ConflictError {
	v := &auth.ConflictError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewSendEmailVerificationForbidden builds a auth service
// send_email_verification endpoint forbidden error.
func NewSendEmailVerificationForbidden(body *SendEmailVerificationForbiddenResponseBody) *auth.ForbiddenError {
	v := &auth.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewSendEmailVerificationInternalError builds a auth service
// send_email_verification endpoint internal_error error.
func NewSendEmailVerificationInternalError(body *SendEmailVerificationInternalErrorResponseBody) *auth.InternalServerError {
	v := &auth.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewSendEmailVerificationNotFound builds a auth service
// send_email_verification endpoint not_found error.
func NewSendEmailVerificationNotFound(body *SendEmailVerificationNotFoundResponseBody) *auth.NotFoundError {
	v := &auth.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewSendEmailVerificationUnauthorized builds a auth service
// send_email_verification endpoint unauthorized error.
func NewSendEmailVerificationUnauthorized(body *SendEmailVerificationUnauthorizedResponseBody) *auth.UnauthorizedError {
	v := &auth.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewCheckEmailVerificationResultOK builds a "auth" service
// "check_email_verification" endpoint result from a HTTP "OK" response.
func NewCheckEmailVerificationResultOK(body *CheckEmailVerificationResponseBody) *auth.CheckEmailVerificationResult {
	v := &auth.CheckEmailVerificationResult{
		Verified: *body.Verified,
	}

	return v
}

// NewCheckEmailVerificationBadRequest builds a auth service
// check_email_verification endpoint bad_request error.
func NewCheckEmailVerificationBadRequest(body *CheckEmailVerificationBadRequestResponseBody) *auth.BadRequestError {
	v := &auth.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewCheckEmailVerificationConflict builds a auth service
// check_email_verification endpoint conflict error.
func NewCheckEmailVerificationConflict(body *CheckEmailVerificationConflictResponseBody) *auth.ConflictError {
	v := &auth.ConflictError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewCheckEmailVerificationForbidden builds a auth service
// check_email_verification endpoint forbidden error.
func NewCheckEmailVerificationForbidden(body *CheckEmailVerificationForbiddenResponseBody) *auth.ForbiddenError {
	v := &auth.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewCheckEmailVerificationInternalError builds a auth service
// check_email_verification endpoint internal_error error.
func NewCheckEmailVerificationInternalError(body *CheckEmailVerificationInternalErrorResponseBody) *auth.InternalServerError {
	v := &auth.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewCheckEmailVerificationNotFound builds a auth service
// check_email_verification endpoint not_found error.
func NewCheckEmailVerificationNotFound(body *CheckEmailVerificationNotFoundResponseBody) *auth.NotFoundError {
	v := &auth.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewCheckEmailVerificationUnauthorized builds a auth service
// check_email_verification endpoint unauthorized error.
func NewCheckEmailVerificationUnauthorized(body *CheckEmailVerificationUnauthorizedResponseBody) *auth.UnauthorizedError {
	v := &auth.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewMeUserOK builds a "auth" service "me" endpoint result from a HTTP "OK"
// response.
func NewMeUserOK(body *MeResponseBody) *designtypes.User {
	v := &designtypes.User{
		Active:          *body.Active,
		EmailVerified:   *body.EmailVerified,
		PhoneVerified:   body.PhoneVerified,
		ProfileImageURL: body.ProfileImageURL,
		FirstName:       body.FirstName,
		LastName:        body.LastName,
		ID:              *body.ID,
		PhoneNumber:     body.PhoneNumber,
		Email:           *body.Email,
	}
	if body.Locale != nil {
		v.Locale = *body.Locale
	}
	if body.Metadata != nil {
		v.Metadata = make(map[string]any, len(body.Metadata))
		for key, val := range body.Metadata {
			tk := key
			tv := val
			v.Metadata[tk] = tv
		}
	}
	if body.Locale == nil {
		v.Locale = "en"
	}

	return v
}

// NewMeBadRequest builds a auth service me endpoint bad_request error.
func NewMeBadRequest(body *MeBadRequestResponseBody) *auth.BadRequestError {
	v := &auth.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewMeConflict builds a auth service me endpoint conflict error.
func NewMeConflict(body *MeConflictResponseBody) *auth.ConflictError {
	v := &auth.ConflictError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewMeForbidden builds a auth service me endpoint forbidden error.
func NewMeForbidden(body *MeForbiddenResponseBody) *auth.ForbiddenError {
	v := &auth.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewMeInternalError builds a auth service me endpoint internal_error error.
func NewMeInternalError(body *MeInternalErrorResponseBody) *auth.InternalServerError {
	v := &auth.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewMeNotFound builds a auth service me endpoint not_found error.
func NewMeNotFound(body *MeNotFoundResponseBody) *auth.NotFoundError {
	v := &auth.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewMeUnauthorized builds a auth service me endpoint unauthorized error.
func NewMeUnauthorized(body *MeUnauthorizedResponseBody) *auth.UnauthorizedError {
	v := &auth.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewCsrfCSRFTokenResponseOK builds a "auth" service "csrf" endpoint result
// from a HTTP "OK" response.
func NewCsrfCSRFTokenResponseOK(body *CsrfResponseBody) *auth.CSRFTokenResponse {
	v := &auth.CSRFTokenResponse{
		CsrfToken: *body.CsrfToken,
	}

	return v
}

// NewCsrfBadRequest builds a auth service csrf endpoint bad_request error.
func NewCsrfBadRequest(body *CsrfBadRequestResponseBody) *auth.BadRequestError {
	v := &auth.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewCsrfConflict builds a auth service csrf endpoint conflict error.
func NewCsrfConflict(body *CsrfConflictResponseBody) *auth.ConflictError {
	v := &auth.ConflictError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewCsrfForbidden builds a auth service csrf endpoint forbidden error.
func NewCsrfForbidden(body *CsrfForbiddenResponseBody) *auth.ForbiddenError {
	v := &auth.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewCsrfInternalError builds a auth service csrf endpoint internal_error
// error.
func NewCsrfInternalError(body *CsrfInternalErrorResponseBody) *auth.InternalServerError {
	v := &auth.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewCsrfNotFound builds a auth service csrf endpoint not_found error.
func NewCsrfNotFound(body *CsrfNotFoundResponseBody) *auth.NotFoundError {
	v := &auth.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewCsrfUnauthorized builds a auth service csrf endpoint unauthorized error.
func NewCsrfUnauthorized(body *CsrfUnauthorizedResponseBody) *auth.UnauthorizedError {
	v := &auth.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// ValidateLoginResponseBody runs the validations defined on LoginResponseBody
func ValidateLoginResponseBody(body *LoginResponseBody) (err error) {
	if body.User == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("user", "body"))
	}
	if body.Token == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("token", "body"))
	}
	if body.CsrfToken == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("csrf_token", "body"))
	}
	if body.RefreshToken == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("refresh_token", "body"))
	}
	if body.ExpiresAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("expires_at", "body"))
	}
	if body.MfaRequired == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("mfa_required", "body"))
	}
	if body.User != nil {
		if err2 := ValidateUserResponseBody(body.User); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateRegisterResponseBody runs the validations defined on
// RegisterResponseBody
func ValidateRegisterResponseBody(body *RegisterResponseBody) (err error) {
	if body.User == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("user", "body"))
	}
	if body.Token == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("token", "body"))
	}
	if body.CsrfToken == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("csrf_token", "body"))
	}
	if body.RefreshToken == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("refresh_token", "body"))
	}
	if body.ExpiresAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("expires_at", "body"))
	}
	if body.MfaRequired == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("mfa_required", "body"))
	}
	if body.User != nil {
		if err2 := ValidateUserResponseBody(body.User); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateLogoutResponseBody runs the validations defined on LogoutResponseBody
func ValidateLogoutResponseBody(body *LogoutResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateRefreshTokenResponseBody runs the validations defined on
// refresh_token_response_body
func ValidateRefreshTokenResponseBody(body *RefreshTokenResponseBody) (err error) {
	if body.Token == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("token", "body"))
	}
	if body.RefreshToken == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("refresh_token", "body"))
	}
	if body.ExpiresAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("expires_at", "body"))
	}
	return
}

// ValidateForgotPasswordResponseBody runs the validations defined on
// forgot_password_response_body
func ValidateForgotPasswordResponseBody(body *ForgotPasswordResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateResetPasswordResponseBody runs the validations defined on
// reset_password_response_body
func ValidateResetPasswordResponseBody(body *ResetPasswordResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateVerifyEmailResponseBody runs the validations defined on
// verify_email_response_body
func ValidateVerifyEmailResponseBody(body *VerifyEmailResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateSendEmailVerificationResponseBody runs the validations defined on
// send_email_verification_response_body
func ValidateSendEmailVerificationResponseBody(body *SendEmailVerificationResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.ExpiresAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("expires_at", "body"))
	}
	return
}

// ValidateCheckEmailVerificationResponseBody runs the validations defined on
// check_email_verification_response_body
func ValidateCheckEmailVerificationResponseBody(body *CheckEmailVerificationResponseBody) (err error) {
	if body.Verified == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("verified", "body"))
	}
	return
}

// ValidateMeResponseBody runs the validations defined on MeResponseBody
func ValidateMeResponseBody(body *MeResponseBody) (err error) {
	if body.Active == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("active", "body"))
	}
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.EmailVerified == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email_verified", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Email != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", *body.Email, goa.FormatEmail))
	}
	return
}

// ValidateCsrfResponseBody runs the validations defined on CsrfResponseBody
func ValidateCsrfResponseBody(body *CsrfResponseBody) (err error) {
	if body.CsrfToken == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("csrf_token", "body"))
	}
	return
}

// ValidateLoginBadRequestResponseBody runs the validations defined on
// login_bad_request_response_body
func ValidateLoginBadRequestResponseBody(body *LoginBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateLoginConflictResponseBody runs the validations defined on
// login_conflict_response_body
func ValidateLoginConflictResponseBody(body *LoginConflictResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateLoginForbiddenResponseBody runs the validations defined on
// login_forbidden_response_body
func ValidateLoginForbiddenResponseBody(body *LoginForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateLoginInternalErrorResponseBody runs the validations defined on
// login_internal_error_response_body
func ValidateLoginInternalErrorResponseBody(body *LoginInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateLoginNotFoundResponseBody runs the validations defined on
// login_not_found_response_body
func ValidateLoginNotFoundResponseBody(body *LoginNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateLoginUnauthorizedResponseBody runs the validations defined on
// login_unauthorized_response_body
func ValidateLoginUnauthorizedResponseBody(body *LoginUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateRegisterBadRequestResponseBody runs the validations defined on
// register_bad_request_response_body
func ValidateRegisterBadRequestResponseBody(body *RegisterBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateRegisterConflictResponseBody runs the validations defined on
// register_conflict_response_body
func ValidateRegisterConflictResponseBody(body *RegisterConflictResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateRegisterForbiddenResponseBody runs the validations defined on
// register_forbidden_response_body
func ValidateRegisterForbiddenResponseBody(body *RegisterForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateRegisterInternalErrorResponseBody runs the validations defined on
// register_internal_error_response_body
func ValidateRegisterInternalErrorResponseBody(body *RegisterInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateRegisterNotFoundResponseBody runs the validations defined on
// register_not_found_response_body
func ValidateRegisterNotFoundResponseBody(body *RegisterNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateRegisterUnauthorizedResponseBody runs the validations defined on
// register_unauthorized_response_body
func ValidateRegisterUnauthorizedResponseBody(body *RegisterUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateLogoutBadRequestResponseBody runs the validations defined on
// logout_bad_request_response_body
func ValidateLogoutBadRequestResponseBody(body *LogoutBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateLogoutConflictResponseBody runs the validations defined on
// logout_conflict_response_body
func ValidateLogoutConflictResponseBody(body *LogoutConflictResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateLogoutForbiddenResponseBody runs the validations defined on
// logout_forbidden_response_body
func ValidateLogoutForbiddenResponseBody(body *LogoutForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateLogoutInternalErrorResponseBody runs the validations defined on
// logout_internal_error_response_body
func ValidateLogoutInternalErrorResponseBody(body *LogoutInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateLogoutNotFoundResponseBody runs the validations defined on
// logout_not_found_response_body
func ValidateLogoutNotFoundResponseBody(body *LogoutNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateLogoutUnauthorizedResponseBody runs the validations defined on
// logout_unauthorized_response_body
func ValidateLogoutUnauthorizedResponseBody(body *LogoutUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateRefreshTokenBadRequestResponseBody runs the validations defined on
// refresh_token_bad_request_response_body
func ValidateRefreshTokenBadRequestResponseBody(body *RefreshTokenBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateRefreshTokenConflictResponseBody runs the validations defined on
// refresh_token_conflict_response_body
func ValidateRefreshTokenConflictResponseBody(body *RefreshTokenConflictResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateRefreshTokenForbiddenResponseBody runs the validations defined on
// refresh_token_forbidden_response_body
func ValidateRefreshTokenForbiddenResponseBody(body *RefreshTokenForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateRefreshTokenInternalErrorResponseBody runs the validations defined
// on refresh_token_internal_error_response_body
func ValidateRefreshTokenInternalErrorResponseBody(body *RefreshTokenInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateRefreshTokenNotFoundResponseBody runs the validations defined on
// refresh_token_not_found_response_body
func ValidateRefreshTokenNotFoundResponseBody(body *RefreshTokenNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateRefreshTokenUnauthorizedResponseBody runs the validations defined on
// refresh_token_unauthorized_response_body
func ValidateRefreshTokenUnauthorizedResponseBody(body *RefreshTokenUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateForgotPasswordBadRequestResponseBody runs the validations defined on
// forgot_password_bad_request_response_body
func ValidateForgotPasswordBadRequestResponseBody(body *ForgotPasswordBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateForgotPasswordConflictResponseBody runs the validations defined on
// forgot_password_conflict_response_body
func ValidateForgotPasswordConflictResponseBody(body *ForgotPasswordConflictResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateForgotPasswordForbiddenResponseBody runs the validations defined on
// forgot_password_forbidden_response_body
func ValidateForgotPasswordForbiddenResponseBody(body *ForgotPasswordForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateForgotPasswordInternalErrorResponseBody runs the validations defined
// on forgot_password_internal_error_response_body
func ValidateForgotPasswordInternalErrorResponseBody(body *ForgotPasswordInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateForgotPasswordNotFoundResponseBody runs the validations defined on
// forgot_password_not_found_response_body
func ValidateForgotPasswordNotFoundResponseBody(body *ForgotPasswordNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateForgotPasswordUnauthorizedResponseBody runs the validations defined
// on forgot_password_unauthorized_response_body
func ValidateForgotPasswordUnauthorizedResponseBody(body *ForgotPasswordUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateResetPasswordBadRequestResponseBody runs the validations defined on
// reset_password_bad_request_response_body
func ValidateResetPasswordBadRequestResponseBody(body *ResetPasswordBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateResetPasswordConflictResponseBody runs the validations defined on
// reset_password_conflict_response_body
func ValidateResetPasswordConflictResponseBody(body *ResetPasswordConflictResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateResetPasswordForbiddenResponseBody runs the validations defined on
// reset_password_forbidden_response_body
func ValidateResetPasswordForbiddenResponseBody(body *ResetPasswordForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateResetPasswordInternalErrorResponseBody runs the validations defined
// on reset_password_internal_error_response_body
func ValidateResetPasswordInternalErrorResponseBody(body *ResetPasswordInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateResetPasswordNotFoundResponseBody runs the validations defined on
// reset_password_not_found_response_body
func ValidateResetPasswordNotFoundResponseBody(body *ResetPasswordNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateResetPasswordUnauthorizedResponseBody runs the validations defined
// on reset_password_unauthorized_response_body
func ValidateResetPasswordUnauthorizedResponseBody(body *ResetPasswordUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateVerifyEmailBadRequestResponseBody runs the validations defined on
// verify_email_bad_request_response_body
func ValidateVerifyEmailBadRequestResponseBody(body *VerifyEmailBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateVerifyEmailConflictResponseBody runs the validations defined on
// verify_email_conflict_response_body
func ValidateVerifyEmailConflictResponseBody(body *VerifyEmailConflictResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateVerifyEmailForbiddenResponseBody runs the validations defined on
// verify_email_forbidden_response_body
func ValidateVerifyEmailForbiddenResponseBody(body *VerifyEmailForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateVerifyEmailInternalErrorResponseBody runs the validations defined on
// verify_email_internal_error_response_body
func ValidateVerifyEmailInternalErrorResponseBody(body *VerifyEmailInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateVerifyEmailNotFoundResponseBody runs the validations defined on
// verify_email_not_found_response_body
func ValidateVerifyEmailNotFoundResponseBody(body *VerifyEmailNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateVerifyEmailUnauthorizedResponseBody runs the validations defined on
// verify_email_unauthorized_response_body
func ValidateVerifyEmailUnauthorizedResponseBody(body *VerifyEmailUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateSendEmailVerificationBadRequestResponseBody runs the validations
// defined on send_email_verification_bad_request_response_body
func ValidateSendEmailVerificationBadRequestResponseBody(body *SendEmailVerificationBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateSendEmailVerificationConflictResponseBody runs the validations
// defined on send_email_verification_conflict_response_body
func ValidateSendEmailVerificationConflictResponseBody(body *SendEmailVerificationConflictResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateSendEmailVerificationForbiddenResponseBody runs the validations
// defined on send_email_verification_forbidden_response_body
func ValidateSendEmailVerificationForbiddenResponseBody(body *SendEmailVerificationForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateSendEmailVerificationInternalErrorResponseBody runs the validations
// defined on send_email_verification_internal_error_response_body
func ValidateSendEmailVerificationInternalErrorResponseBody(body *SendEmailVerificationInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateSendEmailVerificationNotFoundResponseBody runs the validations
// defined on send_email_verification_not_found_response_body
func ValidateSendEmailVerificationNotFoundResponseBody(body *SendEmailVerificationNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateSendEmailVerificationUnauthorizedResponseBody runs the validations
// defined on send_email_verification_unauthorized_response_body
func ValidateSendEmailVerificationUnauthorizedResponseBody(body *SendEmailVerificationUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCheckEmailVerificationBadRequestResponseBody runs the validations
// defined on check_email_verification_bad_request_response_body
func ValidateCheckEmailVerificationBadRequestResponseBody(body *CheckEmailVerificationBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCheckEmailVerificationConflictResponseBody runs the validations
// defined on check_email_verification_conflict_response_body
func ValidateCheckEmailVerificationConflictResponseBody(body *CheckEmailVerificationConflictResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCheckEmailVerificationForbiddenResponseBody runs the validations
// defined on check_email_verification_forbidden_response_body
func ValidateCheckEmailVerificationForbiddenResponseBody(body *CheckEmailVerificationForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCheckEmailVerificationInternalErrorResponseBody runs the validations
// defined on check_email_verification_internal_error_response_body
func ValidateCheckEmailVerificationInternalErrorResponseBody(body *CheckEmailVerificationInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCheckEmailVerificationNotFoundResponseBody runs the validations
// defined on check_email_verification_not_found_response_body
func ValidateCheckEmailVerificationNotFoundResponseBody(body *CheckEmailVerificationNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCheckEmailVerificationUnauthorizedResponseBody runs the validations
// defined on check_email_verification_unauthorized_response_body
func ValidateCheckEmailVerificationUnauthorizedResponseBody(body *CheckEmailVerificationUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateMeBadRequestResponseBody runs the validations defined on
// me_bad_request_response_body
func ValidateMeBadRequestResponseBody(body *MeBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateMeConflictResponseBody runs the validations defined on
// me_conflict_response_body
func ValidateMeConflictResponseBody(body *MeConflictResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateMeForbiddenResponseBody runs the validations defined on
// me_forbidden_response_body
func ValidateMeForbiddenResponseBody(body *MeForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateMeInternalErrorResponseBody runs the validations defined on
// me_internal_error_response_body
func ValidateMeInternalErrorResponseBody(body *MeInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateMeNotFoundResponseBody runs the validations defined on
// me_not_found_response_body
func ValidateMeNotFoundResponseBody(body *MeNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateMeUnauthorizedResponseBody runs the validations defined on
// me_unauthorized_response_body
func ValidateMeUnauthorizedResponseBody(body *MeUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCsrfBadRequestResponseBody runs the validations defined on
// csrf_bad_request_response_body
func ValidateCsrfBadRequestResponseBody(body *CsrfBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCsrfConflictResponseBody runs the validations defined on
// csrf_conflict_response_body
func ValidateCsrfConflictResponseBody(body *CsrfConflictResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCsrfForbiddenResponseBody runs the validations defined on
// csrf_forbidden_response_body
func ValidateCsrfForbiddenResponseBody(body *CsrfForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCsrfInternalErrorResponseBody runs the validations defined on
// csrf_internal_error_response_body
func ValidateCsrfInternalErrorResponseBody(body *CsrfInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCsrfNotFoundResponseBody runs the validations defined on
// csrf_not_found_response_body
func ValidateCsrfNotFoundResponseBody(body *CsrfNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCsrfUnauthorizedResponseBody runs the validations defined on
// csrf_unauthorized_response_body
func ValidateCsrfUnauthorizedResponseBody(body *CsrfUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUserResponseBody runs the validations defined on UserResponseBody
func ValidateUserResponseBody(body *UserResponseBody) (err error) {
	if body.Active == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("active", "body"))
	}
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.EmailVerified == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email_verified", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Email != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", *body.Email, goa.FormatEmail))
	}
	return
}
