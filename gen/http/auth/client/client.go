// Code generated by goa v3.20.0, DO NOT EDIT.
//
// auth client HTTP transport
//
// Command:
// $ goa gen github.com/juicycleff/frank/design -o .

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the auth service endpoint HTTP clients.
type Client struct {
	// Login Doer is the HTTP client used to make requests to the login endpoint.
	LoginDoer goahttp.Doer

	// Register Doer is the HTTP client used to make requests to the register
	// endpoint.
	RegisterDoer goahttp.Doer

	// Logout Doer is the HTTP client used to make requests to the logout endpoint.
	LogoutDoer goahttp.Doer

	// RefreshToken Doer is the HTTP client used to make requests to the
	// refresh_token endpoint.
	RefreshTokenDoer goahttp.Doer

	// ForgotPassword Doer is the HTTP client used to make requests to the
	// forgot_password endpoint.
	ForgotPasswordDoer goahttp.Doer

	// ResetPassword Doer is the HTTP client used to make requests to the
	// reset_password endpoint.
	ResetPasswordDoer goahttp.Doer

	// VerifyEmail Doer is the HTTP client used to make requests to the
	// verify_email endpoint.
	VerifyEmailDoer goahttp.Doer

	// SendEmailVerification Doer is the HTTP client used to make requests to the
	// send_email_verification endpoint.
	SendEmailVerificationDoer goahttp.Doer

	// CheckEmailVerification Doer is the HTTP client used to make requests to the
	// check_email_verification endpoint.
	CheckEmailVerificationDoer goahttp.Doer

	// Me Doer is the HTTP client used to make requests to the me endpoint.
	MeDoer goahttp.Doer

	// Csrf Doer is the HTTP client used to make requests to the csrf endpoint.
	CsrfDoer goahttp.Doer

	// CORS Doer is the HTTP client used to make requests to the  endpoint.
	CORSDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the auth service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		LoginDoer:                  doer,
		RegisterDoer:               doer,
		LogoutDoer:                 doer,
		RefreshTokenDoer:           doer,
		ForgotPasswordDoer:         doer,
		ResetPasswordDoer:          doer,
		VerifyEmailDoer:            doer,
		SendEmailVerificationDoer:  doer,
		CheckEmailVerificationDoer: doer,
		MeDoer:                     doer,
		CsrfDoer:                   doer,
		CORSDoer:                   doer,
		RestoreResponseBody:        restoreBody,
		scheme:                     scheme,
		host:                       host,
		decoder:                    dec,
		encoder:                    enc,
	}
}

// Login returns an endpoint that makes HTTP requests to the auth service login
// server.
func (c *Client) Login() goa.Endpoint {
	var (
		encodeRequest  = EncodeLoginRequest(c.encoder)
		decodeResponse = DecodeLoginResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildLoginRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.LoginDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("auth", "login", err)
		}
		return decodeResponse(resp)
	}
}

// Register returns an endpoint that makes HTTP requests to the auth service
// register server.
func (c *Client) Register() goa.Endpoint {
	var (
		encodeRequest  = EncodeRegisterRequest(c.encoder)
		decodeResponse = DecodeRegisterResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildRegisterRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.RegisterDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("auth", "register", err)
		}
		return decodeResponse(resp)
	}
}

// Logout returns an endpoint that makes HTTP requests to the auth service
// logout server.
func (c *Client) Logout() goa.Endpoint {
	var (
		encodeRequest  = EncodeLogoutRequest(c.encoder)
		decodeResponse = DecodeLogoutResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildLogoutRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.LogoutDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("auth", "logout", err)
		}
		return decodeResponse(resp)
	}
}

// RefreshToken returns an endpoint that makes HTTP requests to the auth
// service refresh_token server.
func (c *Client) RefreshToken() goa.Endpoint {
	var (
		encodeRequest  = EncodeRefreshTokenRequest(c.encoder)
		decodeResponse = DecodeRefreshTokenResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildRefreshTokenRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.RefreshTokenDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("auth", "refresh_token", err)
		}
		return decodeResponse(resp)
	}
}

// ForgotPassword returns an endpoint that makes HTTP requests to the auth
// service forgot_password server.
func (c *Client) ForgotPassword() goa.Endpoint {
	var (
		encodeRequest  = EncodeForgotPasswordRequest(c.encoder)
		decodeResponse = DecodeForgotPasswordResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildForgotPasswordRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ForgotPasswordDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("auth", "forgot_password", err)
		}
		return decodeResponse(resp)
	}
}

// ResetPassword returns an endpoint that makes HTTP requests to the auth
// service reset_password server.
func (c *Client) ResetPassword() goa.Endpoint {
	var (
		encodeRequest  = EncodeResetPasswordRequest(c.encoder)
		decodeResponse = DecodeResetPasswordResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildResetPasswordRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ResetPasswordDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("auth", "reset_password", err)
		}
		return decodeResponse(resp)
	}
}

// VerifyEmail returns an endpoint that makes HTTP requests to the auth service
// verify_email server.
func (c *Client) VerifyEmail() goa.Endpoint {
	var (
		encodeRequest  = EncodeVerifyEmailRequest(c.encoder)
		decodeResponse = DecodeVerifyEmailResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildVerifyEmailRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.VerifyEmailDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("auth", "verify_email", err)
		}
		return decodeResponse(resp)
	}
}

// SendEmailVerification returns an endpoint that makes HTTP requests to the
// auth service send_email_verification server.
func (c *Client) SendEmailVerification() goa.Endpoint {
	var (
		encodeRequest  = EncodeSendEmailVerificationRequest(c.encoder)
		decodeResponse = DecodeSendEmailVerificationResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildSendEmailVerificationRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.SendEmailVerificationDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("auth", "send_email_verification", err)
		}
		return decodeResponse(resp)
	}
}

// CheckEmailVerification returns an endpoint that makes HTTP requests to the
// auth service check_email_verification server.
func (c *Client) CheckEmailVerification() goa.Endpoint {
	var (
		encodeRequest  = EncodeCheckEmailVerificationRequest(c.encoder)
		decodeResponse = DecodeCheckEmailVerificationResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildCheckEmailVerificationRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CheckEmailVerificationDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("auth", "check_email_verification", err)
		}
		return decodeResponse(resp)
	}
}

// Me returns an endpoint that makes HTTP requests to the auth service me
// server.
func (c *Client) Me() goa.Endpoint {
	var (
		encodeRequest  = EncodeMeRequest(c.encoder)
		decodeResponse = DecodeMeResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildMeRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.MeDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("auth", "me", err)
		}
		return decodeResponse(resp)
	}
}

// Csrf returns an endpoint that makes HTTP requests to the auth service csrf
// server.
func (c *Client) Csrf() goa.Endpoint {
	var (
		encodeRequest  = EncodeCsrfRequest(c.encoder)
		decodeResponse = DecodeCsrfResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildCsrfRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CsrfDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("auth", "csrf", err)
		}
		return decodeResponse(resp)
	}
}
