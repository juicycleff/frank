// Code generated by goa v3.20.0, DO NOT EDIT.
//
// auth HTTP server types
//
// Command:
// $ goa gen github.com/juicycleff/frank/design -o .

package server

import (
	"unicode/utf8"

	auth "github.com/juicycleff/frank/gen/auth"
	goa "goa.design/goa/v3/pkg"
)

// LoginRequestBody is the type of the "auth" service "login" endpoint HTTP
// request body.
type LoginRequestBody struct {
	// User email
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// User password
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
	// Organization ID if logging into a specific organization
	OrganizationID *string `form:"organization_id,omitempty" json:"organization_id,omitempty" xml:"organization_id,omitempty"`
	// Whether to remember the user
	RememberMe *bool `form:"remember_me,omitempty" json:"remember_me,omitempty" xml:"remember_me,omitempty"`
	// CAPTCHA response for protected login
	CaptchaResponse *string `form:"captcha_response,omitempty" json:"captcha_response,omitempty" xml:"captcha_response,omitempty"`
}

// RegisterRequestBody is the type of the "auth" service "register" endpoint
// HTTP request body.
type RegisterRequestBody struct {
	// User email
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// User password
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
	// User first name
	FirstName *string `form:"first_name,omitempty" json:"first_name,omitempty" xml:"first_name,omitempty"`
	// User last name
	LastName *string `form:"last_name,omitempty" json:"last_name,omitempty" xml:"last_name,omitempty"`
	// Organization ID if creating a user for a specific organization
	OrganizationID *string `form:"organization_id,omitempty" json:"organization_id,omitempty" xml:"organization_id,omitempty"`
	// Additional user metadata
	Metadata map[string]any `form:"metadata,omitempty" json:"metadata,omitempty" xml:"metadata,omitempty"`
}

// RefreshTokenRequestBody is the type of the "auth" service "refresh_token"
// endpoint HTTP request body.
type RefreshTokenRequestBody struct {
	// JWTAuth refresh token
	RefreshToken *string `form:"refresh_token,omitempty" json:"refresh_token,omitempty" xml:"refresh_token,omitempty"`
}

// ForgotPasswordRequestBody is the type of the "auth" service
// "forgot_password" endpoint HTTP request body.
type ForgotPasswordRequestBody struct {
	// User email
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
}

// ResetPasswordRequestBody is the type of the "auth" service "reset_password"
// endpoint HTTP request body.
type ResetPasswordRequestBody struct {
	// Password reset token
	Token *string `form:"token,omitempty" json:"token,omitempty" xml:"token,omitempty"`
	// New password
	NewPassword *string `form:"new_password,omitempty" json:"new_password,omitempty" xml:"new_password,omitempty"`
}

// VerifyEmailRequestBody is the type of the "auth" service "verify_email"
// endpoint HTTP request body.
type VerifyEmailRequestBody struct {
	// Email verification token
	Token *string `form:"token,omitempty" json:"token,omitempty" xml:"token,omitempty"`
}

// LoginResponseBody is the type of the "auth" service "login" endpoint HTTP
// response body.
type LoginResponseBody struct {
	// Authenticated user
	User *UserResponseBody `form:"user" json:"user" xml:"user"`
	// JWTAuth access token
	Token string `form:"token" json:"token" xml:"token"`
	// JWTAuth refresh token
	RefreshToken string `form:"refresh_token" json:"refresh_token" xml:"refresh_token"`
	// CSRF token
	CsrfToken string `form:"csrf_token" json:"csrf_token" xml:"csrf_token"`
	// Token expiry timestamp
	ExpiresAt int64 `form:"expires_at" json:"expires_at" xml:"expires_at"`
	// Whether MFA is required to complete authentication
	MfaRequired bool `form:"mfa_required" json:"mfa_required" xml:"mfa_required"`
	// Available MFA methods when MFA is required
	MfaTypes []string `form:"mfa_types,omitempty" json:"mfa_types,omitempty" xml:"mfa_types,omitempty"`
}

// RegisterResponseBody is the type of the "auth" service "register" endpoint
// HTTP response body.
type RegisterResponseBody struct {
	// Authenticated user
	User *UserResponseBody `form:"user" json:"user" xml:"user"`
	// JWTAuth access token
	Token string `form:"token" json:"token" xml:"token"`
	// JWTAuth refresh token
	RefreshToken string `form:"refresh_token" json:"refresh_token" xml:"refresh_token"`
	// CSRF token
	CsrfToken string `form:"csrf_token" json:"csrf_token" xml:"csrf_token"`
	// Token expiry timestamp
	ExpiresAt int64 `form:"expires_at" json:"expires_at" xml:"expires_at"`
	// Whether MFA is required to complete authentication
	MfaRequired bool `form:"mfa_required" json:"mfa_required" xml:"mfa_required"`
	// Available MFA methods when MFA is required
	MfaTypes []string `form:"mfa_types,omitempty" json:"mfa_types,omitempty" xml:"mfa_types,omitempty"`
}

// LogoutResponseBody is the type of the "auth" service "logout" endpoint HTTP
// response body.
type LogoutResponseBody struct {
	// Success message
	Message string `form:"message" json:"message" xml:"message"`
}

// RefreshTokenResponseBody is the type of the "auth" service "refresh_token"
// endpoint HTTP response body.
type RefreshTokenResponseBody struct {
	// New JWTAuth access token
	Token string `form:"token" json:"token" xml:"token"`
	// New refresh token
	RefreshToken string `form:"refresh_token" json:"refresh_token" xml:"refresh_token"`
	// Token expiry timestamp
	ExpiresAt int64 `form:"expires_at" json:"expires_at" xml:"expires_at"`
}

// ForgotPasswordResponseBody is the type of the "auth" service
// "forgot_password" endpoint HTTP response body.
type ForgotPasswordResponseBody struct {
	Message string `form:"message" json:"message" xml:"message"`
}

// ResetPasswordResponseBody is the type of the "auth" service "reset_password"
// endpoint HTTP response body.
type ResetPasswordResponseBody struct {
	Message string `form:"message" json:"message" xml:"message"`
}

// VerifyEmailResponseBody is the type of the "auth" service "verify_email"
// endpoint HTTP response body.
type VerifyEmailResponseBody struct {
	Message string `form:"message" json:"message" xml:"message"`
}

// MeResponseBody is the type of the "auth" service "me" endpoint HTTP response
// body.
type MeResponseBody struct {
	// User ID
	ID string `form:"id" json:"id" xml:"id"`
	// User email
	Email string `form:"email" json:"email" xml:"email"`
	// User first name
	FirstName *string `form:"first_name,omitempty" json:"first_name,omitempty" xml:"first_name,omitempty"`
	// User last name
	LastName *string `form:"last_name,omitempty" json:"last_name,omitempty" xml:"last_name,omitempty"`
	// Whether email is verified
	EmailVerified bool `form:"email_verified" json:"email_verified" xml:"email_verified"`
	// User phone number
	PhoneNumber *string `form:"phone_number,omitempty" json:"phone_number,omitempty" xml:"phone_number,omitempty"`
	// Whether phone is verified
	PhoneVerified *bool `form:"phone_verified,omitempty" json:"phone_verified,omitempty" xml:"phone_verified,omitempty"`
	// URL to user's profile image
	ProfileImageURL *string `form:"profile_image_url,omitempty" json:"profile_image_url,omitempty" xml:"profile_image_url,omitempty"`
	// User's locale preference
	Locale *string `form:"locale,omitempty" json:"locale,omitempty" xml:"locale,omitempty"`
	// User metadata
	Metadata map[string]any `form:"metadata,omitempty" json:"metadata,omitempty" xml:"metadata,omitempty"`
	// Whether account is active
	Active bool `form:"active" json:"active" xml:"active"`
	// Account creation timestamp
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// Account last update timestamp
	UpdatedAt string `form:"updated_at" json:"updated_at" xml:"updated_at"`
}

// CsrfResponseBody is the type of the "auth" service "csrf" endpoint HTTP
// response body.
type CsrfResponseBody struct {
	// CSRF token
	CsrfToken string `form:"csrf_token" json:"csrf_token" xml:"csrf_token"`
}

// LoginBadRequestResponseBody is the type of the "auth" service "login"
// endpoint HTTP response body for the "bad_request" error.
type LoginBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// LoginConflictResponseBody is the type of the "auth" service "login" endpoint
// HTTP response body for the "conflict" error.
type LoginConflictResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// LoginForbiddenResponseBody is the type of the "auth" service "login"
// endpoint HTTP response body for the "forbidden" error.
type LoginForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// LoginInternalErrorResponseBody is the type of the "auth" service "login"
// endpoint HTTP response body for the "internal_error" error.
type LoginInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// LoginNotFoundResponseBody is the type of the "auth" service "login" endpoint
// HTTP response body for the "not_found" error.
type LoginNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// LoginUnauthorizedResponseBody is the type of the "auth" service "login"
// endpoint HTTP response body for the "unauthorized" error.
type LoginUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// RegisterBadRequestResponseBody is the type of the "auth" service "register"
// endpoint HTTP response body for the "bad_request" error.
type RegisterBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// RegisterConflictResponseBody is the type of the "auth" service "register"
// endpoint HTTP response body for the "conflict" error.
type RegisterConflictResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// RegisterForbiddenResponseBody is the type of the "auth" service "register"
// endpoint HTTP response body for the "forbidden" error.
type RegisterForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// RegisterInternalErrorResponseBody is the type of the "auth" service
// "register" endpoint HTTP response body for the "internal_error" error.
type RegisterInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// RegisterNotFoundResponseBody is the type of the "auth" service "register"
// endpoint HTTP response body for the "not_found" error.
type RegisterNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// RegisterUnauthorizedResponseBody is the type of the "auth" service
// "register" endpoint HTTP response body for the "unauthorized" error.
type RegisterUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// LogoutBadRequestResponseBody is the type of the "auth" service "logout"
// endpoint HTTP response body for the "bad_request" error.
type LogoutBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// LogoutConflictResponseBody is the type of the "auth" service "logout"
// endpoint HTTP response body for the "conflict" error.
type LogoutConflictResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// LogoutForbiddenResponseBody is the type of the "auth" service "logout"
// endpoint HTTP response body for the "forbidden" error.
type LogoutForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// LogoutInternalErrorResponseBody is the type of the "auth" service "logout"
// endpoint HTTP response body for the "internal_error" error.
type LogoutInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// LogoutNotFoundResponseBody is the type of the "auth" service "logout"
// endpoint HTTP response body for the "not_found" error.
type LogoutNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// LogoutUnauthorizedResponseBody is the type of the "auth" service "logout"
// endpoint HTTP response body for the "unauthorized" error.
type LogoutUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// RefreshTokenBadRequestResponseBody is the type of the "auth" service
// "refresh_token" endpoint HTTP response body for the "bad_request" error.
type RefreshTokenBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// RefreshTokenConflictResponseBody is the type of the "auth" service
// "refresh_token" endpoint HTTP response body for the "conflict" error.
type RefreshTokenConflictResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// RefreshTokenForbiddenResponseBody is the type of the "auth" service
// "refresh_token" endpoint HTTP response body for the "forbidden" error.
type RefreshTokenForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// RefreshTokenInternalErrorResponseBody is the type of the "auth" service
// "refresh_token" endpoint HTTP response body for the "internal_error" error.
type RefreshTokenInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// RefreshTokenNotFoundResponseBody is the type of the "auth" service
// "refresh_token" endpoint HTTP response body for the "not_found" error.
type RefreshTokenNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// RefreshTokenUnauthorizedResponseBody is the type of the "auth" service
// "refresh_token" endpoint HTTP response body for the "unauthorized" error.
type RefreshTokenUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ForgotPasswordBadRequestResponseBody is the type of the "auth" service
// "forgot_password" endpoint HTTP response body for the "bad_request" error.
type ForgotPasswordBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ForgotPasswordConflictResponseBody is the type of the "auth" service
// "forgot_password" endpoint HTTP response body for the "conflict" error.
type ForgotPasswordConflictResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ForgotPasswordForbiddenResponseBody is the type of the "auth" service
// "forgot_password" endpoint HTTP response body for the "forbidden" error.
type ForgotPasswordForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ForgotPasswordInternalErrorResponseBody is the type of the "auth" service
// "forgot_password" endpoint HTTP response body for the "internal_error" error.
type ForgotPasswordInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ForgotPasswordNotFoundResponseBody is the type of the "auth" service
// "forgot_password" endpoint HTTP response body for the "not_found" error.
type ForgotPasswordNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ForgotPasswordUnauthorizedResponseBody is the type of the "auth" service
// "forgot_password" endpoint HTTP response body for the "unauthorized" error.
type ForgotPasswordUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ResetPasswordBadRequestResponseBody is the type of the "auth" service
// "reset_password" endpoint HTTP response body for the "bad_request" error.
type ResetPasswordBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ResetPasswordConflictResponseBody is the type of the "auth" service
// "reset_password" endpoint HTTP response body for the "conflict" error.
type ResetPasswordConflictResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ResetPasswordForbiddenResponseBody is the type of the "auth" service
// "reset_password" endpoint HTTP response body for the "forbidden" error.
type ResetPasswordForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ResetPasswordInternalErrorResponseBody is the type of the "auth" service
// "reset_password" endpoint HTTP response body for the "internal_error" error.
type ResetPasswordInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ResetPasswordNotFoundResponseBody is the type of the "auth" service
// "reset_password" endpoint HTTP response body for the "not_found" error.
type ResetPasswordNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ResetPasswordUnauthorizedResponseBody is the type of the "auth" service
// "reset_password" endpoint HTTP response body for the "unauthorized" error.
type ResetPasswordUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// VerifyEmailBadRequestResponseBody is the type of the "auth" service
// "verify_email" endpoint HTTP response body for the "bad_request" error.
type VerifyEmailBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// VerifyEmailConflictResponseBody is the type of the "auth" service
// "verify_email" endpoint HTTP response body for the "conflict" error.
type VerifyEmailConflictResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// VerifyEmailForbiddenResponseBody is the type of the "auth" service
// "verify_email" endpoint HTTP response body for the "forbidden" error.
type VerifyEmailForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// VerifyEmailInternalErrorResponseBody is the type of the "auth" service
// "verify_email" endpoint HTTP response body for the "internal_error" error.
type VerifyEmailInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// VerifyEmailNotFoundResponseBody is the type of the "auth" service
// "verify_email" endpoint HTTP response body for the "not_found" error.
type VerifyEmailNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// VerifyEmailUnauthorizedResponseBody is the type of the "auth" service
// "verify_email" endpoint HTTP response body for the "unauthorized" error.
type VerifyEmailUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// MeBadRequestResponseBody is the type of the "auth" service "me" endpoint
// HTTP response body for the "bad_request" error.
type MeBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// MeConflictResponseBody is the type of the "auth" service "me" endpoint HTTP
// response body for the "conflict" error.
type MeConflictResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// MeForbiddenResponseBody is the type of the "auth" service "me" endpoint HTTP
// response body for the "forbidden" error.
type MeForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// MeInternalErrorResponseBody is the type of the "auth" service "me" endpoint
// HTTP response body for the "internal_error" error.
type MeInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// MeNotFoundResponseBody is the type of the "auth" service "me" endpoint HTTP
// response body for the "not_found" error.
type MeNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// MeUnauthorizedResponseBody is the type of the "auth" service "me" endpoint
// HTTP response body for the "unauthorized" error.
type MeUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CsrfBadRequestResponseBody is the type of the "auth" service "csrf" endpoint
// HTTP response body for the "bad_request" error.
type CsrfBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CsrfConflictResponseBody is the type of the "auth" service "csrf" endpoint
// HTTP response body for the "conflict" error.
type CsrfConflictResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CsrfForbiddenResponseBody is the type of the "auth" service "csrf" endpoint
// HTTP response body for the "forbidden" error.
type CsrfForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CsrfInternalErrorResponseBody is the type of the "auth" service "csrf"
// endpoint HTTP response body for the "internal_error" error.
type CsrfInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CsrfNotFoundResponseBody is the type of the "auth" service "csrf" endpoint
// HTTP response body for the "not_found" error.
type CsrfNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CsrfUnauthorizedResponseBody is the type of the "auth" service "csrf"
// endpoint HTTP response body for the "unauthorized" error.
type CsrfUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UserResponseBody is used to define fields on response body types.
type UserResponseBody struct {
	// User ID
	ID string `form:"id" json:"id" xml:"id"`
	// User email
	Email string `form:"email" json:"email" xml:"email"`
	// User first name
	FirstName *string `form:"first_name,omitempty" json:"first_name,omitempty" xml:"first_name,omitempty"`
	// User last name
	LastName *string `form:"last_name,omitempty" json:"last_name,omitempty" xml:"last_name,omitempty"`
	// Whether email is verified
	EmailVerified bool `form:"email_verified" json:"email_verified" xml:"email_verified"`
	// User phone number
	PhoneNumber *string `form:"phone_number,omitempty" json:"phone_number,omitempty" xml:"phone_number,omitempty"`
	// Whether phone is verified
	PhoneVerified *bool `form:"phone_verified,omitempty" json:"phone_verified,omitempty" xml:"phone_verified,omitempty"`
	// URL to user's profile image
	ProfileImageURL *string `form:"profile_image_url,omitempty" json:"profile_image_url,omitempty" xml:"profile_image_url,omitempty"`
	// User's locale preference
	Locale *string `form:"locale,omitempty" json:"locale,omitempty" xml:"locale,omitempty"`
	// User metadata
	Metadata map[string]any `form:"metadata,omitempty" json:"metadata,omitempty" xml:"metadata,omitempty"`
	// Whether account is active
	Active bool `form:"active" json:"active" xml:"active"`
	// Account creation timestamp
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// Account last update timestamp
	UpdatedAt string `form:"updated_at" json:"updated_at" xml:"updated_at"`
}

// NewLoginResponseBody builds the HTTP response body from the result of the
// "login" endpoint of the "auth" service.
func NewLoginResponseBody(res *auth.LoginResponse) *LoginResponseBody {
	body := &LoginResponseBody{
		Token:        res.Token,
		RefreshToken: res.RefreshToken,
		CsrfToken:    res.CsrfToken,
		ExpiresAt:    res.ExpiresAt,
		MfaRequired:  res.MfaRequired,
	}
	if res.User != nil {
		body.User = marshalAuthUserToUserResponseBody(res.User)
	}
	if res.MfaTypes != nil {
		body.MfaTypes = make([]string, len(res.MfaTypes))
		for i, val := range res.MfaTypes {
			body.MfaTypes[i] = val
		}
	}
	return body
}

// NewRegisterResponseBody builds the HTTP response body from the result of the
// "register" endpoint of the "auth" service.
func NewRegisterResponseBody(res *auth.LoginResponse) *RegisterResponseBody {
	body := &RegisterResponseBody{
		Token:        res.Token,
		RefreshToken: res.RefreshToken,
		CsrfToken:    res.CsrfToken,
		ExpiresAt:    res.ExpiresAt,
		MfaRequired:  res.MfaRequired,
	}
	if res.User != nil {
		body.User = marshalAuthUserToUserResponseBody(res.User)
	}
	if res.MfaTypes != nil {
		body.MfaTypes = make([]string, len(res.MfaTypes))
		for i, val := range res.MfaTypes {
			body.MfaTypes[i] = val
		}
	}
	return body
}

// NewLogoutResponseBody builds the HTTP response body from the result of the
// "logout" endpoint of the "auth" service.
func NewLogoutResponseBody(res *auth.LogoutResult) *LogoutResponseBody {
	body := &LogoutResponseBody{
		Message: res.Message,
	}
	return body
}

// NewRefreshTokenResponseBody builds the HTTP response body from the result of
// the "refresh_token" endpoint of the "auth" service.
func NewRefreshTokenResponseBody(res *auth.RefreshTokenResponse) *RefreshTokenResponseBody {
	body := &RefreshTokenResponseBody{
		Token:        res.Token,
		RefreshToken: res.RefreshToken,
		ExpiresAt:    res.ExpiresAt,
	}
	return body
}

// NewForgotPasswordResponseBody builds the HTTP response body from the result
// of the "forgot_password" endpoint of the "auth" service.
func NewForgotPasswordResponseBody(res *auth.ForgotPasswordResult) *ForgotPasswordResponseBody {
	body := &ForgotPasswordResponseBody{
		Message: res.Message,
	}
	return body
}

// NewResetPasswordResponseBody builds the HTTP response body from the result
// of the "reset_password" endpoint of the "auth" service.
func NewResetPasswordResponseBody(res *auth.ResetPasswordResult) *ResetPasswordResponseBody {
	body := &ResetPasswordResponseBody{
		Message: res.Message,
	}
	return body
}

// NewVerifyEmailResponseBody builds the HTTP response body from the result of
// the "verify_email" endpoint of the "auth" service.
func NewVerifyEmailResponseBody(res *auth.VerifyEmailResult) *VerifyEmailResponseBody {
	body := &VerifyEmailResponseBody{
		Message: res.Message,
	}
	return body
}

// NewMeResponseBody builds the HTTP response body from the result of the "me"
// endpoint of the "auth" service.
func NewMeResponseBody(res *auth.User) *MeResponseBody {
	body := &MeResponseBody{
		ID:              res.ID,
		Email:           res.Email,
		FirstName:       res.FirstName,
		LastName:        res.LastName,
		EmailVerified:   res.EmailVerified,
		PhoneNumber:     res.PhoneNumber,
		PhoneVerified:   res.PhoneVerified,
		ProfileImageURL: res.ProfileImageURL,
		Locale:          res.Locale,
		Active:          res.Active,
		CreatedAt:       res.CreatedAt,
		UpdatedAt:       res.UpdatedAt,
	}
	if res.Metadata != nil {
		body.Metadata = make(map[string]any, len(res.Metadata))
		for key, val := range res.Metadata {
			tk := key
			tv := val
			body.Metadata[tk] = tv
		}
	}
	return body
}

// NewCsrfResponseBody builds the HTTP response body from the result of the
// "csrf" endpoint of the "auth" service.
func NewCsrfResponseBody(res *auth.CSRFTokenResponse) *CsrfResponseBody {
	body := &CsrfResponseBody{
		CsrfToken: res.CsrfToken,
	}
	return body
}

// NewLoginBadRequestResponseBody builds the HTTP response body from the result
// of the "login" endpoint of the "auth" service.
func NewLoginBadRequestResponseBody(res *auth.BadRequestError) *LoginBadRequestResponseBody {
	body := &LoginBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewLoginConflictResponseBody builds the HTTP response body from the result
// of the "login" endpoint of the "auth" service.
func NewLoginConflictResponseBody(res *auth.ConflictError) *LoginConflictResponseBody {
	body := &LoginConflictResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewLoginForbiddenResponseBody builds the HTTP response body from the result
// of the "login" endpoint of the "auth" service.
func NewLoginForbiddenResponseBody(res *auth.ForbiddenError) *LoginForbiddenResponseBody {
	body := &LoginForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewLoginInternalErrorResponseBody builds the HTTP response body from the
// result of the "login" endpoint of the "auth" service.
func NewLoginInternalErrorResponseBody(res *auth.InternalServerError) *LoginInternalErrorResponseBody {
	body := &LoginInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewLoginNotFoundResponseBody builds the HTTP response body from the result
// of the "login" endpoint of the "auth" service.
func NewLoginNotFoundResponseBody(res *auth.NotFoundError) *LoginNotFoundResponseBody {
	body := &LoginNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewLoginUnauthorizedResponseBody builds the HTTP response body from the
// result of the "login" endpoint of the "auth" service.
func NewLoginUnauthorizedResponseBody(res *auth.UnauthorizedError) *LoginUnauthorizedResponseBody {
	body := &LoginUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewRegisterBadRequestResponseBody builds the HTTP response body from the
// result of the "register" endpoint of the "auth" service.
func NewRegisterBadRequestResponseBody(res *auth.BadRequestError) *RegisterBadRequestResponseBody {
	body := &RegisterBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewRegisterConflictResponseBody builds the HTTP response body from the
// result of the "register" endpoint of the "auth" service.
func NewRegisterConflictResponseBody(res *auth.ConflictError) *RegisterConflictResponseBody {
	body := &RegisterConflictResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewRegisterForbiddenResponseBody builds the HTTP response body from the
// result of the "register" endpoint of the "auth" service.
func NewRegisterForbiddenResponseBody(res *auth.ForbiddenError) *RegisterForbiddenResponseBody {
	body := &RegisterForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewRegisterInternalErrorResponseBody builds the HTTP response body from the
// result of the "register" endpoint of the "auth" service.
func NewRegisterInternalErrorResponseBody(res *auth.InternalServerError) *RegisterInternalErrorResponseBody {
	body := &RegisterInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewRegisterNotFoundResponseBody builds the HTTP response body from the
// result of the "register" endpoint of the "auth" service.
func NewRegisterNotFoundResponseBody(res *auth.NotFoundError) *RegisterNotFoundResponseBody {
	body := &RegisterNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewRegisterUnauthorizedResponseBody builds the HTTP response body from the
// result of the "register" endpoint of the "auth" service.
func NewRegisterUnauthorizedResponseBody(res *auth.UnauthorizedError) *RegisterUnauthorizedResponseBody {
	body := &RegisterUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewLogoutBadRequestResponseBody builds the HTTP response body from the
// result of the "logout" endpoint of the "auth" service.
func NewLogoutBadRequestResponseBody(res *auth.BadRequestError) *LogoutBadRequestResponseBody {
	body := &LogoutBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewLogoutConflictResponseBody builds the HTTP response body from the result
// of the "logout" endpoint of the "auth" service.
func NewLogoutConflictResponseBody(res *auth.ConflictError) *LogoutConflictResponseBody {
	body := &LogoutConflictResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewLogoutForbiddenResponseBody builds the HTTP response body from the result
// of the "logout" endpoint of the "auth" service.
func NewLogoutForbiddenResponseBody(res *auth.ForbiddenError) *LogoutForbiddenResponseBody {
	body := &LogoutForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewLogoutInternalErrorResponseBody builds the HTTP response body from the
// result of the "logout" endpoint of the "auth" service.
func NewLogoutInternalErrorResponseBody(res *auth.InternalServerError) *LogoutInternalErrorResponseBody {
	body := &LogoutInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewLogoutNotFoundResponseBody builds the HTTP response body from the result
// of the "logout" endpoint of the "auth" service.
func NewLogoutNotFoundResponseBody(res *auth.NotFoundError) *LogoutNotFoundResponseBody {
	body := &LogoutNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewLogoutUnauthorizedResponseBody builds the HTTP response body from the
// result of the "logout" endpoint of the "auth" service.
func NewLogoutUnauthorizedResponseBody(res *auth.UnauthorizedError) *LogoutUnauthorizedResponseBody {
	body := &LogoutUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewRefreshTokenBadRequestResponseBody builds the HTTP response body from the
// result of the "refresh_token" endpoint of the "auth" service.
func NewRefreshTokenBadRequestResponseBody(res *auth.BadRequestError) *RefreshTokenBadRequestResponseBody {
	body := &RefreshTokenBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewRefreshTokenConflictResponseBody builds the HTTP response body from the
// result of the "refresh_token" endpoint of the "auth" service.
func NewRefreshTokenConflictResponseBody(res *auth.ConflictError) *RefreshTokenConflictResponseBody {
	body := &RefreshTokenConflictResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewRefreshTokenForbiddenResponseBody builds the HTTP response body from the
// result of the "refresh_token" endpoint of the "auth" service.
func NewRefreshTokenForbiddenResponseBody(res *auth.ForbiddenError) *RefreshTokenForbiddenResponseBody {
	body := &RefreshTokenForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewRefreshTokenInternalErrorResponseBody builds the HTTP response body from
// the result of the "refresh_token" endpoint of the "auth" service.
func NewRefreshTokenInternalErrorResponseBody(res *auth.InternalServerError) *RefreshTokenInternalErrorResponseBody {
	body := &RefreshTokenInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewRefreshTokenNotFoundResponseBody builds the HTTP response body from the
// result of the "refresh_token" endpoint of the "auth" service.
func NewRefreshTokenNotFoundResponseBody(res *auth.NotFoundError) *RefreshTokenNotFoundResponseBody {
	body := &RefreshTokenNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewRefreshTokenUnauthorizedResponseBody builds the HTTP response body from
// the result of the "refresh_token" endpoint of the "auth" service.
func NewRefreshTokenUnauthorizedResponseBody(res *auth.UnauthorizedError) *RefreshTokenUnauthorizedResponseBody {
	body := &RefreshTokenUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewForgotPasswordBadRequestResponseBody builds the HTTP response body from
// the result of the "forgot_password" endpoint of the "auth" service.
func NewForgotPasswordBadRequestResponseBody(res *auth.BadRequestError) *ForgotPasswordBadRequestResponseBody {
	body := &ForgotPasswordBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewForgotPasswordConflictResponseBody builds the HTTP response body from the
// result of the "forgot_password" endpoint of the "auth" service.
func NewForgotPasswordConflictResponseBody(res *auth.ConflictError) *ForgotPasswordConflictResponseBody {
	body := &ForgotPasswordConflictResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewForgotPasswordForbiddenResponseBody builds the HTTP response body from
// the result of the "forgot_password" endpoint of the "auth" service.
func NewForgotPasswordForbiddenResponseBody(res *auth.ForbiddenError) *ForgotPasswordForbiddenResponseBody {
	body := &ForgotPasswordForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewForgotPasswordInternalErrorResponseBody builds the HTTP response body
// from the result of the "forgot_password" endpoint of the "auth" service.
func NewForgotPasswordInternalErrorResponseBody(res *auth.InternalServerError) *ForgotPasswordInternalErrorResponseBody {
	body := &ForgotPasswordInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewForgotPasswordNotFoundResponseBody builds the HTTP response body from the
// result of the "forgot_password" endpoint of the "auth" service.
func NewForgotPasswordNotFoundResponseBody(res *auth.NotFoundError) *ForgotPasswordNotFoundResponseBody {
	body := &ForgotPasswordNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewForgotPasswordUnauthorizedResponseBody builds the HTTP response body from
// the result of the "forgot_password" endpoint of the "auth" service.
func NewForgotPasswordUnauthorizedResponseBody(res *auth.UnauthorizedError) *ForgotPasswordUnauthorizedResponseBody {
	body := &ForgotPasswordUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewResetPasswordBadRequestResponseBody builds the HTTP response body from
// the result of the "reset_password" endpoint of the "auth" service.
func NewResetPasswordBadRequestResponseBody(res *auth.BadRequestError) *ResetPasswordBadRequestResponseBody {
	body := &ResetPasswordBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewResetPasswordConflictResponseBody builds the HTTP response body from the
// result of the "reset_password" endpoint of the "auth" service.
func NewResetPasswordConflictResponseBody(res *auth.ConflictError) *ResetPasswordConflictResponseBody {
	body := &ResetPasswordConflictResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewResetPasswordForbiddenResponseBody builds the HTTP response body from the
// result of the "reset_password" endpoint of the "auth" service.
func NewResetPasswordForbiddenResponseBody(res *auth.ForbiddenError) *ResetPasswordForbiddenResponseBody {
	body := &ResetPasswordForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewResetPasswordInternalErrorResponseBody builds the HTTP response body from
// the result of the "reset_password" endpoint of the "auth" service.
func NewResetPasswordInternalErrorResponseBody(res *auth.InternalServerError) *ResetPasswordInternalErrorResponseBody {
	body := &ResetPasswordInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewResetPasswordNotFoundResponseBody builds the HTTP response body from the
// result of the "reset_password" endpoint of the "auth" service.
func NewResetPasswordNotFoundResponseBody(res *auth.NotFoundError) *ResetPasswordNotFoundResponseBody {
	body := &ResetPasswordNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewResetPasswordUnauthorizedResponseBody builds the HTTP response body from
// the result of the "reset_password" endpoint of the "auth" service.
func NewResetPasswordUnauthorizedResponseBody(res *auth.UnauthorizedError) *ResetPasswordUnauthorizedResponseBody {
	body := &ResetPasswordUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewVerifyEmailBadRequestResponseBody builds the HTTP response body from the
// result of the "verify_email" endpoint of the "auth" service.
func NewVerifyEmailBadRequestResponseBody(res *auth.BadRequestError) *VerifyEmailBadRequestResponseBody {
	body := &VerifyEmailBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewVerifyEmailConflictResponseBody builds the HTTP response body from the
// result of the "verify_email" endpoint of the "auth" service.
func NewVerifyEmailConflictResponseBody(res *auth.ConflictError) *VerifyEmailConflictResponseBody {
	body := &VerifyEmailConflictResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewVerifyEmailForbiddenResponseBody builds the HTTP response body from the
// result of the "verify_email" endpoint of the "auth" service.
func NewVerifyEmailForbiddenResponseBody(res *auth.ForbiddenError) *VerifyEmailForbiddenResponseBody {
	body := &VerifyEmailForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewVerifyEmailInternalErrorResponseBody builds the HTTP response body from
// the result of the "verify_email" endpoint of the "auth" service.
func NewVerifyEmailInternalErrorResponseBody(res *auth.InternalServerError) *VerifyEmailInternalErrorResponseBody {
	body := &VerifyEmailInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewVerifyEmailNotFoundResponseBody builds the HTTP response body from the
// result of the "verify_email" endpoint of the "auth" service.
func NewVerifyEmailNotFoundResponseBody(res *auth.NotFoundError) *VerifyEmailNotFoundResponseBody {
	body := &VerifyEmailNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewVerifyEmailUnauthorizedResponseBody builds the HTTP response body from
// the result of the "verify_email" endpoint of the "auth" service.
func NewVerifyEmailUnauthorizedResponseBody(res *auth.UnauthorizedError) *VerifyEmailUnauthorizedResponseBody {
	body := &VerifyEmailUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewMeBadRequestResponseBody builds the HTTP response body from the result of
// the "me" endpoint of the "auth" service.
func NewMeBadRequestResponseBody(res *auth.BadRequestError) *MeBadRequestResponseBody {
	body := &MeBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewMeConflictResponseBody builds the HTTP response body from the result of
// the "me" endpoint of the "auth" service.
func NewMeConflictResponseBody(res *auth.ConflictError) *MeConflictResponseBody {
	body := &MeConflictResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewMeForbiddenResponseBody builds the HTTP response body from the result of
// the "me" endpoint of the "auth" service.
func NewMeForbiddenResponseBody(res *auth.ForbiddenError) *MeForbiddenResponseBody {
	body := &MeForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewMeInternalErrorResponseBody builds the HTTP response body from the result
// of the "me" endpoint of the "auth" service.
func NewMeInternalErrorResponseBody(res *auth.InternalServerError) *MeInternalErrorResponseBody {
	body := &MeInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewMeNotFoundResponseBody builds the HTTP response body from the result of
// the "me" endpoint of the "auth" service.
func NewMeNotFoundResponseBody(res *auth.NotFoundError) *MeNotFoundResponseBody {
	body := &MeNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewMeUnauthorizedResponseBody builds the HTTP response body from the result
// of the "me" endpoint of the "auth" service.
func NewMeUnauthorizedResponseBody(res *auth.UnauthorizedError) *MeUnauthorizedResponseBody {
	body := &MeUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewCsrfBadRequestResponseBody builds the HTTP response body from the result
// of the "csrf" endpoint of the "auth" service.
func NewCsrfBadRequestResponseBody(res *auth.BadRequestError) *CsrfBadRequestResponseBody {
	body := &CsrfBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewCsrfConflictResponseBody builds the HTTP response body from the result of
// the "csrf" endpoint of the "auth" service.
func NewCsrfConflictResponseBody(res *auth.ConflictError) *CsrfConflictResponseBody {
	body := &CsrfConflictResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewCsrfForbiddenResponseBody builds the HTTP response body from the result
// of the "csrf" endpoint of the "auth" service.
func NewCsrfForbiddenResponseBody(res *auth.ForbiddenError) *CsrfForbiddenResponseBody {
	body := &CsrfForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewCsrfInternalErrorResponseBody builds the HTTP response body from the
// result of the "csrf" endpoint of the "auth" service.
func NewCsrfInternalErrorResponseBody(res *auth.InternalServerError) *CsrfInternalErrorResponseBody {
	body := &CsrfInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewCsrfNotFoundResponseBody builds the HTTP response body from the result of
// the "csrf" endpoint of the "auth" service.
func NewCsrfNotFoundResponseBody(res *auth.NotFoundError) *CsrfNotFoundResponseBody {
	body := &CsrfNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewCsrfUnauthorizedResponseBody builds the HTTP response body from the
// result of the "csrf" endpoint of the "auth" service.
func NewCsrfUnauthorizedResponseBody(res *auth.UnauthorizedError) *CsrfUnauthorizedResponseBody {
	body := &CsrfUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewLoginPayload builds a auth service login endpoint payload.
func NewLoginPayload(body *LoginRequestBody, sessionID *string) *auth.LoginPayload {
	v := &auth.LoginPayload{
		Email:           *body.Email,
		Password:        *body.Password,
		OrganizationID:  body.OrganizationID,
		CaptchaResponse: body.CaptchaResponse,
	}
	if body.RememberMe != nil {
		v.RememberMe = *body.RememberMe
	}
	if body.RememberMe == nil {
		v.RememberMe = false
	}
	v.SessionID = sessionID

	return v
}

// NewRegisterPayload builds a auth service register endpoint payload.
func NewRegisterPayload(body *RegisterRequestBody, sessionID *string) *auth.RegisterPayload {
	v := &auth.RegisterPayload{
		Email:          *body.Email,
		Password:       *body.Password,
		FirstName:      body.FirstName,
		LastName:       body.LastName,
		OrganizationID: body.OrganizationID,
	}
	if body.Metadata != nil {
		v.Metadata = make(map[string]any, len(body.Metadata))
		for key, val := range body.Metadata {
			tk := key
			tv := val
			v.Metadata[tk] = tv
		}
	}
	v.SessionID = sessionID

	return v
}

// NewLogoutPayload builds a auth service logout endpoint payload.
func NewLogoutPayload(jwt *string, sessionID *string) *auth.LogoutPayload {
	v := &auth.LogoutPayload{}
	v.JWT = jwt
	v.SessionID = sessionID

	return v
}

// NewRefreshTokenPayload builds a auth service refresh_token endpoint payload.
func NewRefreshTokenPayload(body *RefreshTokenRequestBody, oauth2 *string, xAPIKey *string, jwt *string, sessionID *string) *auth.RefreshTokenPayload {
	v := &auth.RefreshTokenPayload{
		RefreshToken: *body.RefreshToken,
	}
	v.Oauth2 = oauth2
	v.XAPIKey = xAPIKey
	v.JWT = jwt
	v.SessionID = sessionID

	return v
}

// NewForgotPasswordPayload builds a auth service forgot_password endpoint
// payload.
func NewForgotPasswordPayload(body *ForgotPasswordRequestBody, redirectURL *string, oauth2 *string, xAPIKey *string, jwt *string, sessionID *string) *auth.ForgotPasswordPayload {
	v := &auth.ForgotPasswordPayload{
		Email: *body.Email,
	}
	v.RedirectURL = redirectURL
	v.Oauth2 = oauth2
	v.XAPIKey = xAPIKey
	v.JWT = jwt
	v.SessionID = sessionID

	return v
}

// NewResetPasswordPayload builds a auth service reset_password endpoint
// payload.
func NewResetPasswordPayload(body *ResetPasswordRequestBody, sessionID *string) *auth.ResetPasswordPayload {
	v := &auth.ResetPasswordPayload{
		Token:       *body.Token,
		NewPassword: *body.NewPassword,
	}
	v.SessionID = sessionID

	return v
}

// NewVerifyEmailPayload builds a auth service verify_email endpoint payload.
func NewVerifyEmailPayload(body *VerifyEmailRequestBody, sessionID *string) *auth.VerifyEmailPayload {
	v := &auth.VerifyEmailPayload{
		Token: *body.Token,
	}
	v.SessionID = sessionID

	return v
}

// NewMePayload builds a auth service me endpoint payload.
func NewMePayload(jwt *string, sessionID *string) *auth.MePayload {
	v := &auth.MePayload{}
	v.JWT = jwt
	v.SessionID = sessionID

	return v
}

// NewCsrfPayload builds a auth service csrf endpoint payload.
func NewCsrfPayload(sessionID *string) *auth.CsrfPayload {
	v := &auth.CsrfPayload{}
	v.SessionID = sessionID

	return v
}

// ValidateLoginRequestBody runs the validations defined on LoginRequestBody
func ValidateLoginRequestBody(body *LoginRequestBody) (err error) {
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Password == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("password", "body"))
	}
	if body.Email != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", *body.Email, goa.FormatEmail))
	}
	if body.Password != nil {
		if utf8.RuneCountInString(*body.Password) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.password", *body.Password, utf8.RuneCountInString(*body.Password), 1, true))
		}
	}
	return
}

// ValidateRegisterRequestBody runs the validations defined on
// RegisterRequestBody
func ValidateRegisterRequestBody(body *RegisterRequestBody) (err error) {
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Password == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("password", "body"))
	}
	if body.Email != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", *body.Email, goa.FormatEmail))
	}
	if body.Password != nil {
		if utf8.RuneCountInString(*body.Password) < 8 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.password", *body.Password, utf8.RuneCountInString(*body.Password), 8, true))
		}
	}
	return
}

// ValidateRefreshTokenRequestBody runs the validations defined on
// refresh_token_request_body
func ValidateRefreshTokenRequestBody(body *RefreshTokenRequestBody) (err error) {
	if body.RefreshToken == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("refresh_token", "body"))
	}
	return
}

// ValidateForgotPasswordRequestBody runs the validations defined on
// forgot_password_request_body
func ValidateForgotPasswordRequestBody(body *ForgotPasswordRequestBody) (err error) {
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Email != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", *body.Email, goa.FormatEmail))
	}
	return
}

// ValidateResetPasswordRequestBody runs the validations defined on
// reset_password_request_body
func ValidateResetPasswordRequestBody(body *ResetPasswordRequestBody) (err error) {
	if body.Token == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("token", "body"))
	}
	if body.NewPassword == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("new_password", "body"))
	}
	if body.NewPassword != nil {
		if utf8.RuneCountInString(*body.NewPassword) < 8 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.new_password", *body.NewPassword, utf8.RuneCountInString(*body.NewPassword), 8, true))
		}
	}
	return
}

// ValidateVerifyEmailRequestBody runs the validations defined on
// verify_email_request_body
func ValidateVerifyEmailRequestBody(body *VerifyEmailRequestBody) (err error) {
	if body.Token == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("token", "body"))
	}
	return
}
