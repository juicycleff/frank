// Code generated by goa v3.20.0, DO NOT EDIT.
//
// frank HTTP client CLI support package
//
// Command:
// $ goa gen github.com/juicycleff/frank/design -o .

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	adminc "github.com/juicycleff/frank/gen/http/admin/client"
	apikeysc "github.com/juicycleff/frank/gen/http/api_keys/client"
	authc "github.com/juicycleff/frank/gen/http/auth/client"
	emailc "github.com/juicycleff/frank/gen/http/email/client"
	healthc "github.com/juicycleff/frank/gen/http/health/client"
	mfac "github.com/juicycleff/frank/gen/http/mfa/client"
	oauthclientc "github.com/juicycleff/frank/gen/http/oauth_client/client"
	oauthproviderc "github.com/juicycleff/frank/gen/http/oauth_provider/client"
	organizationsc "github.com/juicycleff/frank/gen/http/organizations/client"
	passkeysc "github.com/juicycleff/frank/gen/http/passkeys/client"
	passwordlessc "github.com/juicycleff/frank/gen/http/passwordless/client"
	rbacc "github.com/juicycleff/frank/gen/http/rbac/client"
	ssoc "github.com/juicycleff/frank/gen/http/sso/client"
	usersc "github.com/juicycleff/frank/gen/http/users/client"
	webc "github.com/juicycleff/frank/gen/http/web/client"
	webhooksc "github.com/juicycleff/frank/gen/http/webhooks/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `api-keys (list|create|get|update|delete|validate)
email (list-templates|create-template|get-template|get-template-by-type|update-template|delete-template|send|send-template)
admin home
web home
health (check|ready|version|metrics|debug)
auth (login|register|logout|refresh-token|forgot-password|reset-password|verify-email|me|csrf)
mfa (enroll|verify|unenroll|methods|send-code)
oauth-provider (authorize|token|introspect|revoke|consent|userinfo|list-clients|create-client|get-client|update-client|delete-client|rotate-client-secret|list-scopes|create-scope|get-scope|update-scope|delete-scope|oidc-configuration|jwks)
organizations (list|create|get|update|delete|list-members|add-member|update-member|remove-member|list-features|enable-feature|disable-feature)
passkeys (register-begin|register-complete|login-begin|login-complete|list|update|delete)
passwordless (email|sms|verify|methods|magic-link)
rbac (list-permissions|create-permission|get-permission|update-permission|delete-permission|list-roles|create-role|get-role|update-role|delete-role|list-role-permissions|add-role-permission|remove-role-permission|check-permission|check-role)
oauth-client (list-providers|provider-auth|provider-callback)
sso (list-providers|provider-auth|provider-callback|list-identity-providers|create-identity-provider|get-identity-provider|update-identity-provider|delete-identity-provider|saml-metadata|saml-acs)
users (list|create|get|update|delete|update-me|update-password|get-sessions|delete-session|get-organizations)
webhooks (list|create|get|update|delete|trigger-event|list-events|replay-event|receive)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` api-keys list --offset 472954788832968048 --limit 53 --type "server" --organization-id "Dolorem reiciendis." --jwt "Dicta magnam omnis optio neque."` + "\n" +
		os.Args[0] + ` email list-templates --offset 1602222333640799663 --limit 72 --type "Culpa dolores pariatur." --organization-id "Qui voluptate esse repellat." --locale "Id ea sit omnis incidunt maxime eum." --jwt "Aut molestiae aperiam dolore veniam."` + "\n" +
		os.Args[0] + ` admin home` + "\n" +
		os.Args[0] + ` web home` + "\n" +
		os.Args[0] + ` health check` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, any, error) {
	var (
		apiKeysFlags = flag.NewFlagSet("api-keys", flag.ContinueOnError)

		apiKeysListFlags              = flag.NewFlagSet("list", flag.ExitOnError)
		apiKeysListOffsetFlag         = apiKeysListFlags.String("offset", "", "")
		apiKeysListLimitFlag          = apiKeysListFlags.String("limit", "20", "")
		apiKeysListTypeFlag           = apiKeysListFlags.String("type", "", "")
		apiKeysListOrganizationIDFlag = apiKeysListFlags.String("organization-id", "", "")
		apiKeysListJWTFlag            = apiKeysListFlags.String("jwt", "", "")

		apiKeysCreateFlags    = flag.NewFlagSet("create", flag.ExitOnError)
		apiKeysCreateBodyFlag = apiKeysCreateFlags.String("body", "REQUIRED", "")
		apiKeysCreateJWTFlag  = apiKeysCreateFlags.String("jwt", "", "")

		apiKeysGetFlags   = flag.NewFlagSet("get", flag.ExitOnError)
		apiKeysGetIDFlag  = apiKeysGetFlags.String("id", "REQUIRED", "API key ID")
		apiKeysGetJWTFlag = apiKeysGetFlags.String("jwt", "", "")

		apiKeysUpdateFlags    = flag.NewFlagSet("update", flag.ExitOnError)
		apiKeysUpdateBodyFlag = apiKeysUpdateFlags.String("body", "REQUIRED", "")
		apiKeysUpdateIDFlag   = apiKeysUpdateFlags.String("id", "REQUIRED", "API key ID")
		apiKeysUpdateJWTFlag  = apiKeysUpdateFlags.String("jwt", "", "")

		apiKeysDeleteFlags   = flag.NewFlagSet("delete", flag.ExitOnError)
		apiKeysDeleteIDFlag  = apiKeysDeleteFlags.String("id", "REQUIRED", "API key ID")
		apiKeysDeleteJWTFlag = apiKeysDeleteFlags.String("jwt", "", "")

		apiKeysValidateFlags      = flag.NewFlagSet("validate", flag.ExitOnError)
		apiKeysValidateAPIKeyFlag = apiKeysValidateFlags.String("api-key", "REQUIRED", "")

		emailFlags = flag.NewFlagSet("email", flag.ContinueOnError)

		emailListTemplatesFlags              = flag.NewFlagSet("list-templates", flag.ExitOnError)
		emailListTemplatesOffsetFlag         = emailListTemplatesFlags.String("offset", "", "")
		emailListTemplatesLimitFlag          = emailListTemplatesFlags.String("limit", "20", "")
		emailListTemplatesTypeFlag           = emailListTemplatesFlags.String("type", "", "")
		emailListTemplatesOrganizationIDFlag = emailListTemplatesFlags.String("organization-id", "", "")
		emailListTemplatesLocaleFlag         = emailListTemplatesFlags.String("locale", "", "")
		emailListTemplatesJWTFlag            = emailListTemplatesFlags.String("jwt", "", "")

		emailCreateTemplateFlags    = flag.NewFlagSet("create-template", flag.ExitOnError)
		emailCreateTemplateBodyFlag = emailCreateTemplateFlags.String("body", "REQUIRED", "")
		emailCreateTemplateJWTFlag  = emailCreateTemplateFlags.String("jwt", "", "")

		emailGetTemplateFlags   = flag.NewFlagSet("get-template", flag.ExitOnError)
		emailGetTemplateIDFlag  = emailGetTemplateFlags.String("id", "REQUIRED", "Template ID")
		emailGetTemplateJWTFlag = emailGetTemplateFlags.String("jwt", "", "")

		emailGetTemplateByTypeFlags              = flag.NewFlagSet("get-template-by-type", flag.ExitOnError)
		emailGetTemplateByTypeTypeFlag           = emailGetTemplateByTypeFlags.String("type", "REQUIRED", "Template type")
		emailGetTemplateByTypeOrganizationIDFlag = emailGetTemplateByTypeFlags.String("organization-id", "", "")
		emailGetTemplateByTypeLocaleFlag         = emailGetTemplateByTypeFlags.String("locale", "en", "")
		emailGetTemplateByTypeJWTFlag            = emailGetTemplateByTypeFlags.String("jwt", "", "")

		emailUpdateTemplateFlags    = flag.NewFlagSet("update-template", flag.ExitOnError)
		emailUpdateTemplateBodyFlag = emailUpdateTemplateFlags.String("body", "REQUIRED", "")
		emailUpdateTemplateIDFlag   = emailUpdateTemplateFlags.String("id", "REQUIRED", "Template ID")
		emailUpdateTemplateJWTFlag  = emailUpdateTemplateFlags.String("jwt", "", "")

		emailDeleteTemplateFlags   = flag.NewFlagSet("delete-template", flag.ExitOnError)
		emailDeleteTemplateIDFlag  = emailDeleteTemplateFlags.String("id", "REQUIRED", "Template ID")
		emailDeleteTemplateJWTFlag = emailDeleteTemplateFlags.String("jwt", "", "")

		emailSendFlags    = flag.NewFlagSet("send", flag.ExitOnError)
		emailSendBodyFlag = emailSendFlags.String("body", "REQUIRED", "")
		emailSendJWTFlag  = emailSendFlags.String("jwt", "", "")

		emailSendTemplateFlags    = flag.NewFlagSet("send-template", flag.ExitOnError)
		emailSendTemplateBodyFlag = emailSendTemplateFlags.String("body", "REQUIRED", "")
		emailSendTemplateJWTFlag  = emailSendTemplateFlags.String("jwt", "", "")

		adminFlags = flag.NewFlagSet("admin", flag.ContinueOnError)

		adminHomeFlags = flag.NewFlagSet("home", flag.ExitOnError)

		webFlags = flag.NewFlagSet("web", flag.ContinueOnError)

		webHomeFlags = flag.NewFlagSet("home", flag.ExitOnError)

		healthFlags = flag.NewFlagSet("health", flag.ContinueOnError)

		healthCheckFlags = flag.NewFlagSet("check", flag.ExitOnError)

		healthReadyFlags = flag.NewFlagSet("ready", flag.ExitOnError)

		healthVersionFlags = flag.NewFlagSet("version", flag.ExitOnError)

		healthMetricsFlags = flag.NewFlagSet("metrics", flag.ExitOnError)

		healthDebugFlags = flag.NewFlagSet("debug", flag.ExitOnError)

		authFlags = flag.NewFlagSet("auth", flag.ContinueOnError)

		authLoginFlags         = flag.NewFlagSet("login", flag.ExitOnError)
		authLoginBodyFlag      = authLoginFlags.String("body", "REQUIRED", "")
		authLoginSessionIDFlag = authLoginFlags.String("session-id", "", "")

		authRegisterFlags         = flag.NewFlagSet("register", flag.ExitOnError)
		authRegisterBodyFlag      = authRegisterFlags.String("body", "REQUIRED", "")
		authRegisterSessionIDFlag = authRegisterFlags.String("session-id", "", "")

		authLogoutFlags         = flag.NewFlagSet("logout", flag.ExitOnError)
		authLogoutJWTFlag       = authLogoutFlags.String("jwt", "", "")
		authLogoutSessionIDFlag = authLogoutFlags.String("session-id", "", "")

		authRefreshTokenFlags         = flag.NewFlagSet("refresh-token", flag.ExitOnError)
		authRefreshTokenBodyFlag      = authRefreshTokenFlags.String("body", "REQUIRED", "")
		authRefreshTokenOauth2Flag    = authRefreshTokenFlags.String("oauth2", "", "")
		authRefreshTokenXAPIKeyFlag   = authRefreshTokenFlags.String("xapi-key", "", "")
		authRefreshTokenJWTFlag       = authRefreshTokenFlags.String("jwt", "", "")
		authRefreshTokenSessionIDFlag = authRefreshTokenFlags.String("session-id", "", "")

		authForgotPasswordFlags           = flag.NewFlagSet("forgot-password", flag.ExitOnError)
		authForgotPasswordBodyFlag        = authForgotPasswordFlags.String("body", "REQUIRED", "")
		authForgotPasswordRedirectURLFlag = authForgotPasswordFlags.String("redirect-url", "", "")
		authForgotPasswordOauth2Flag      = authForgotPasswordFlags.String("oauth2", "", "")
		authForgotPasswordXAPIKeyFlag     = authForgotPasswordFlags.String("xapi-key", "", "")
		authForgotPasswordJWTFlag         = authForgotPasswordFlags.String("jwt", "", "")
		authForgotPasswordSessionIDFlag   = authForgotPasswordFlags.String("session-id", "", "")

		authResetPasswordFlags         = flag.NewFlagSet("reset-password", flag.ExitOnError)
		authResetPasswordBodyFlag      = authResetPasswordFlags.String("body", "REQUIRED", "")
		authResetPasswordSessionIDFlag = authResetPasswordFlags.String("session-id", "", "")

		authVerifyEmailFlags         = flag.NewFlagSet("verify-email", flag.ExitOnError)
		authVerifyEmailBodyFlag      = authVerifyEmailFlags.String("body", "REQUIRED", "")
		authVerifyEmailSessionIDFlag = authVerifyEmailFlags.String("session-id", "", "")

		authMeFlags         = flag.NewFlagSet("me", flag.ExitOnError)
		authMeJWTFlag       = authMeFlags.String("jwt", "", "")
		authMeSessionIDFlag = authMeFlags.String("session-id", "", "")

		authCsrfFlags         = flag.NewFlagSet("csrf", flag.ExitOnError)
		authCsrfSessionIDFlag = authCsrfFlags.String("session-id", "", "")

		mfaFlags = flag.NewFlagSet("mfa", flag.ContinueOnError)

		mfaEnrollFlags    = flag.NewFlagSet("enroll", flag.ExitOnError)
		mfaEnrollBodyFlag = mfaEnrollFlags.String("body", "REQUIRED", "")
		mfaEnrollJWTFlag  = mfaEnrollFlags.String("jwt", "", "")

		mfaVerifyFlags    = flag.NewFlagSet("verify", flag.ExitOnError)
		mfaVerifyBodyFlag = mfaVerifyFlags.String("body", "REQUIRED", "")
		mfaVerifyJWTFlag  = mfaVerifyFlags.String("jwt", "", "")

		mfaUnenrollFlags    = flag.NewFlagSet("unenroll", flag.ExitOnError)
		mfaUnenrollBodyFlag = mfaUnenrollFlags.String("body", "REQUIRED", "")
		mfaUnenrollJWTFlag  = mfaUnenrollFlags.String("jwt", "", "")

		mfaMethodsFlags   = flag.NewFlagSet("methods", flag.ExitOnError)
		mfaMethodsJWTFlag = mfaMethodsFlags.String("jwt", "", "")

		mfaSendCodeFlags    = flag.NewFlagSet("send-code", flag.ExitOnError)
		mfaSendCodeBodyFlag = mfaSendCodeFlags.String("body", "REQUIRED", "")
		mfaSendCodeJWTFlag  = mfaSendCodeFlags.String("jwt", "", "")

		oauthProviderFlags = flag.NewFlagSet("oauth-provider", flag.ContinueOnError)

		oauthProviderAuthorizeFlags                   = flag.NewFlagSet("authorize", flag.ExitOnError)
		oauthProviderAuthorizeClientIDFlag            = oauthProviderAuthorizeFlags.String("client-id", "REQUIRED", "")
		oauthProviderAuthorizeResponseTypeFlag        = oauthProviderAuthorizeFlags.String("response-type", "REQUIRED", "")
		oauthProviderAuthorizeRedirectURIFlag         = oauthProviderAuthorizeFlags.String("redirect-uri", "REQUIRED", "")
		oauthProviderAuthorizeScopeFlag               = oauthProviderAuthorizeFlags.String("scope", "", "")
		oauthProviderAuthorizeStateFlag               = oauthProviderAuthorizeFlags.String("state", "", "")
		oauthProviderAuthorizeCodeChallengeFlag       = oauthProviderAuthorizeFlags.String("code-challenge", "", "")
		oauthProviderAuthorizeCodeChallengeMethodFlag = oauthProviderAuthorizeFlags.String("code-challenge-method", "", "")
		oauthProviderAuthorizeOauth2Flag              = oauthProviderAuthorizeFlags.String("oauth2", "", "")
		oauthProviderAuthorizeXAPIKeyFlag             = oauthProviderAuthorizeFlags.String("xapi-key", "", "")
		oauthProviderAuthorizeJWTFlag                 = oauthProviderAuthorizeFlags.String("jwt", "", "")

		oauthProviderTokenFlags            = flag.NewFlagSet("token", flag.ExitOnError)
		oauthProviderTokenGrantTypeFlag    = oauthProviderTokenFlags.String("grant-type", "REQUIRED", "")
		oauthProviderTokenCodeFlag         = oauthProviderTokenFlags.String("code", "", "")
		oauthProviderTokenRedirectURIFlag  = oauthProviderTokenFlags.String("redirect-uri", "", "")
		oauthProviderTokenClientIDFlag     = oauthProviderTokenFlags.String("client-id", "", "")
		oauthProviderTokenClientSecretFlag = oauthProviderTokenFlags.String("client-secret", "", "")
		oauthProviderTokenRefreshTokenFlag = oauthProviderTokenFlags.String("refresh-token", "", "")
		oauthProviderTokenCodeVerifierFlag = oauthProviderTokenFlags.String("code-verifier", "", "")
		oauthProviderTokenUsernameFlag     = oauthProviderTokenFlags.String("username", "", "")
		oauthProviderTokenPasswordFlag     = oauthProviderTokenFlags.String("password", "", "")
		oauthProviderTokenScopeFlag        = oauthProviderTokenFlags.String("scope", "", "")
		oauthProviderTokenOauth2Flag       = oauthProviderTokenFlags.String("oauth2", "", "")
		oauthProviderTokenXAPIKeyFlag      = oauthProviderTokenFlags.String("xapi-key", "", "")
		oauthProviderTokenJWTFlag          = oauthProviderTokenFlags.String("jwt", "", "")

		oauthProviderIntrospectFlags             = flag.NewFlagSet("introspect", flag.ExitOnError)
		oauthProviderIntrospectTokenFlag         = oauthProviderIntrospectFlags.String("token", "REQUIRED", "")
		oauthProviderIntrospectTokenTypeHintFlag = oauthProviderIntrospectFlags.String("token-type-hint", "", "")
		oauthProviderIntrospectOauth2Flag        = oauthProviderIntrospectFlags.String("oauth2", "", "")
		oauthProviderIntrospectXAPIKeyFlag       = oauthProviderIntrospectFlags.String("xapi-key", "", "")
		oauthProviderIntrospectJWTFlag           = oauthProviderIntrospectFlags.String("jwt", "", "")

		oauthProviderRevokeFlags             = flag.NewFlagSet("revoke", flag.ExitOnError)
		oauthProviderRevokeTokenFlag         = oauthProviderRevokeFlags.String("token", "REQUIRED", "")
		oauthProviderRevokeTokenTypeHintFlag = oauthProviderRevokeFlags.String("token-type-hint", "", "")
		oauthProviderRevokeClientIDFlag      = oauthProviderRevokeFlags.String("client-id", "", "")
		oauthProviderRevokeClientSecretFlag  = oauthProviderRevokeFlags.String("client-secret", "", "")
		oauthProviderRevokeOauth2Flag        = oauthProviderRevokeFlags.String("oauth2", "", "")
		oauthProviderRevokeXAPIKeyFlag       = oauthProviderRevokeFlags.String("xapi-key", "", "")
		oauthProviderRevokeJWTFlag           = oauthProviderRevokeFlags.String("jwt", "", "")

		oauthProviderConsentFlags    = flag.NewFlagSet("consent", flag.ExitOnError)
		oauthProviderConsentBodyFlag = oauthProviderConsentFlags.String("body", "REQUIRED", "")
		oauthProviderConsentJWTFlag  = oauthProviderConsentFlags.String("jwt", "", "")

		oauthProviderUserinfoFlags   = flag.NewFlagSet("userinfo", flag.ExitOnError)
		oauthProviderUserinfoJWTFlag = oauthProviderUserinfoFlags.String("jwt", "", "")

		oauthProviderListClientsFlags              = flag.NewFlagSet("list-clients", flag.ExitOnError)
		oauthProviderListClientsOffsetFlag         = oauthProviderListClientsFlags.String("offset", "", "")
		oauthProviderListClientsLimitFlag          = oauthProviderListClientsFlags.String("limit", "20", "")
		oauthProviderListClientsOrganizationIDFlag = oauthProviderListClientsFlags.String("organization-id", "", "")
		oauthProviderListClientsJWTFlag            = oauthProviderListClientsFlags.String("jwt", "", "")

		oauthProviderCreateClientFlags    = flag.NewFlagSet("create-client", flag.ExitOnError)
		oauthProviderCreateClientBodyFlag = oauthProviderCreateClientFlags.String("body", "REQUIRED", "")
		oauthProviderCreateClientJWTFlag  = oauthProviderCreateClientFlags.String("jwt", "", "")

		oauthProviderGetClientFlags   = flag.NewFlagSet("get-client", flag.ExitOnError)
		oauthProviderGetClientIDFlag  = oauthProviderGetClientFlags.String("id", "REQUIRED", "Client ID")
		oauthProviderGetClientJWTFlag = oauthProviderGetClientFlags.String("jwt", "", "")

		oauthProviderUpdateClientFlags    = flag.NewFlagSet("update-client", flag.ExitOnError)
		oauthProviderUpdateClientBodyFlag = oauthProviderUpdateClientFlags.String("body", "REQUIRED", "")
		oauthProviderUpdateClientIDFlag   = oauthProviderUpdateClientFlags.String("id", "REQUIRED", "Client ID")
		oauthProviderUpdateClientJWTFlag  = oauthProviderUpdateClientFlags.String("jwt", "", "")

		oauthProviderDeleteClientFlags   = flag.NewFlagSet("delete-client", flag.ExitOnError)
		oauthProviderDeleteClientIDFlag  = oauthProviderDeleteClientFlags.String("id", "REQUIRED", "Client ID")
		oauthProviderDeleteClientJWTFlag = oauthProviderDeleteClientFlags.String("jwt", "", "")

		oauthProviderRotateClientSecretFlags   = flag.NewFlagSet("rotate-client-secret", flag.ExitOnError)
		oauthProviderRotateClientSecretIDFlag  = oauthProviderRotateClientSecretFlags.String("id", "REQUIRED", "Client ID")
		oauthProviderRotateClientSecretJWTFlag = oauthProviderRotateClientSecretFlags.String("jwt", "", "")

		oauthProviderListScopesFlags      = flag.NewFlagSet("list-scopes", flag.ExitOnError)
		oauthProviderListScopesOffsetFlag = oauthProviderListScopesFlags.String("offset", "", "")
		oauthProviderListScopesLimitFlag  = oauthProviderListScopesFlags.String("limit", "20", "")
		oauthProviderListScopesJWTFlag    = oauthProviderListScopesFlags.String("jwt", "", "")

		oauthProviderCreateScopeFlags    = flag.NewFlagSet("create-scope", flag.ExitOnError)
		oauthProviderCreateScopeBodyFlag = oauthProviderCreateScopeFlags.String("body", "REQUIRED", "")
		oauthProviderCreateScopeJWTFlag  = oauthProviderCreateScopeFlags.String("jwt", "", "")

		oauthProviderGetScopeFlags   = flag.NewFlagSet("get-scope", flag.ExitOnError)
		oauthProviderGetScopeIDFlag  = oauthProviderGetScopeFlags.String("id", "REQUIRED", "Scope ID")
		oauthProviderGetScopeJWTFlag = oauthProviderGetScopeFlags.String("jwt", "", "")

		oauthProviderUpdateScopeFlags    = flag.NewFlagSet("update-scope", flag.ExitOnError)
		oauthProviderUpdateScopeBodyFlag = oauthProviderUpdateScopeFlags.String("body", "REQUIRED", "")
		oauthProviderUpdateScopeIDFlag   = oauthProviderUpdateScopeFlags.String("id", "REQUIRED", "Scope ID")
		oauthProviderUpdateScopeJWTFlag  = oauthProviderUpdateScopeFlags.String("jwt", "", "")

		oauthProviderDeleteScopeFlags   = flag.NewFlagSet("delete-scope", flag.ExitOnError)
		oauthProviderDeleteScopeIDFlag  = oauthProviderDeleteScopeFlags.String("id", "REQUIRED", "Scope ID")
		oauthProviderDeleteScopeJWTFlag = oauthProviderDeleteScopeFlags.String("jwt", "", "")

		oauthProviderOidcConfigurationFlags = flag.NewFlagSet("oidc-configuration", flag.ExitOnError)

		oauthProviderJwksFlags = flag.NewFlagSet("jwks", flag.ExitOnError)

		organizationsFlags = flag.NewFlagSet("organizations", flag.ContinueOnError)

		organizationsListFlags      = flag.NewFlagSet("list", flag.ExitOnError)
		organizationsListOffsetFlag = organizationsListFlags.String("offset", "", "")
		organizationsListLimitFlag  = organizationsListFlags.String("limit", "20", "")
		organizationsListSearchFlag = organizationsListFlags.String("search", "", "")
		organizationsListJWTFlag    = organizationsListFlags.String("jwt", "", "")

		organizationsCreateFlags    = flag.NewFlagSet("create", flag.ExitOnError)
		organizationsCreateBodyFlag = organizationsCreateFlags.String("body", "REQUIRED", "")
		organizationsCreateJWTFlag  = organizationsCreateFlags.String("jwt", "", "")

		organizationsGetFlags   = flag.NewFlagSet("get", flag.ExitOnError)
		organizationsGetIDFlag  = organizationsGetFlags.String("id", "REQUIRED", "Organization ID")
		organizationsGetJWTFlag = organizationsGetFlags.String("jwt", "", "")

		organizationsUpdateFlags    = flag.NewFlagSet("update", flag.ExitOnError)
		organizationsUpdateBodyFlag = organizationsUpdateFlags.String("body", "REQUIRED", "")
		organizationsUpdateIDFlag   = organizationsUpdateFlags.String("id", "REQUIRED", "Organization ID")
		organizationsUpdateJWTFlag  = organizationsUpdateFlags.String("jwt", "", "")

		organizationsDeleteFlags   = flag.NewFlagSet("delete", flag.ExitOnError)
		organizationsDeleteIDFlag  = organizationsDeleteFlags.String("id", "REQUIRED", "Organization ID")
		organizationsDeleteJWTFlag = organizationsDeleteFlags.String("jwt", "", "")

		organizationsListMembersFlags      = flag.NewFlagSet("list-members", flag.ExitOnError)
		organizationsListMembersIDFlag     = organizationsListMembersFlags.String("id", "REQUIRED", "Organization ID")
		organizationsListMembersOffsetFlag = organizationsListMembersFlags.String("offset", "", "")
		organizationsListMembersLimitFlag  = organizationsListMembersFlags.String("limit", "20", "")
		organizationsListMembersSearchFlag = organizationsListMembersFlags.String("search", "", "")
		organizationsListMembersJWTFlag    = organizationsListMembersFlags.String("jwt", "", "")

		organizationsAddMemberFlags    = flag.NewFlagSet("add-member", flag.ExitOnError)
		organizationsAddMemberBodyFlag = organizationsAddMemberFlags.String("body", "REQUIRED", "")
		organizationsAddMemberIDFlag   = organizationsAddMemberFlags.String("id", "REQUIRED", "Organization ID")
		organizationsAddMemberJWTFlag  = organizationsAddMemberFlags.String("jwt", "", "")

		organizationsUpdateMemberFlags      = flag.NewFlagSet("update-member", flag.ExitOnError)
		organizationsUpdateMemberBodyFlag   = organizationsUpdateMemberFlags.String("body", "REQUIRED", "")
		organizationsUpdateMemberIDFlag     = organizationsUpdateMemberFlags.String("id", "REQUIRED", "Organization ID")
		organizationsUpdateMemberUserIDFlag = organizationsUpdateMemberFlags.String("user-id", "REQUIRED", "User ID")
		organizationsUpdateMemberJWTFlag    = organizationsUpdateMemberFlags.String("jwt", "", "")

		organizationsRemoveMemberFlags      = flag.NewFlagSet("remove-member", flag.ExitOnError)
		organizationsRemoveMemberIDFlag     = organizationsRemoveMemberFlags.String("id", "REQUIRED", "Organization ID")
		organizationsRemoveMemberUserIDFlag = organizationsRemoveMemberFlags.String("user-id", "REQUIRED", "User ID")
		organizationsRemoveMemberJWTFlag    = organizationsRemoveMemberFlags.String("jwt", "", "")

		organizationsListFeaturesFlags   = flag.NewFlagSet("list-features", flag.ExitOnError)
		organizationsListFeaturesIDFlag  = organizationsListFeaturesFlags.String("id", "REQUIRED", "Organization ID")
		organizationsListFeaturesJWTFlag = organizationsListFeaturesFlags.String("jwt", "", "")

		organizationsEnableFeatureFlags    = flag.NewFlagSet("enable-feature", flag.ExitOnError)
		organizationsEnableFeatureBodyFlag = organizationsEnableFeatureFlags.String("body", "REQUIRED", "")
		organizationsEnableFeatureIDFlag   = organizationsEnableFeatureFlags.String("id", "REQUIRED", "Organization ID")
		organizationsEnableFeatureJWTFlag  = organizationsEnableFeatureFlags.String("jwt", "", "")

		organizationsDisableFeatureFlags          = flag.NewFlagSet("disable-feature", flag.ExitOnError)
		organizationsDisableFeatureIDFlag         = organizationsDisableFeatureFlags.String("id", "REQUIRED", "Organization ID")
		organizationsDisableFeatureFeatureKeyFlag = organizationsDisableFeatureFlags.String("feature-key", "REQUIRED", "Feature key")
		organizationsDisableFeatureJWTFlag        = organizationsDisableFeatureFlags.String("jwt", "", "")

		passkeysFlags = flag.NewFlagSet("passkeys", flag.ContinueOnError)

		passkeysRegisterBeginFlags    = flag.NewFlagSet("register-begin", flag.ExitOnError)
		passkeysRegisterBeginBodyFlag = passkeysRegisterBeginFlags.String("body", "REQUIRED", "")
		passkeysRegisterBeginJWTFlag  = passkeysRegisterBeginFlags.String("jwt", "", "")

		passkeysRegisterCompleteFlags    = flag.NewFlagSet("register-complete", flag.ExitOnError)
		passkeysRegisterCompleteBodyFlag = passkeysRegisterCompleteFlags.String("body", "REQUIRED", "")
		passkeysRegisterCompleteJWTFlag  = passkeysRegisterCompleteFlags.String("jwt", "", "")

		passkeysLoginBeginFlags       = flag.NewFlagSet("login-begin", flag.ExitOnError)
		passkeysLoginBeginOauth2Flag  = passkeysLoginBeginFlags.String("oauth2", "", "")
		passkeysLoginBeginXAPIKeyFlag = passkeysLoginBeginFlags.String("xapi-key", "", "")
		passkeysLoginBeginJWTFlag     = passkeysLoginBeginFlags.String("jwt", "", "")

		passkeysLoginCompleteFlags       = flag.NewFlagSet("login-complete", flag.ExitOnError)
		passkeysLoginCompleteBodyFlag    = passkeysLoginCompleteFlags.String("body", "REQUIRED", "")
		passkeysLoginCompleteOauth2Flag  = passkeysLoginCompleteFlags.String("oauth2", "", "")
		passkeysLoginCompleteXAPIKeyFlag = passkeysLoginCompleteFlags.String("xapi-key", "", "")
		passkeysLoginCompleteJWTFlag     = passkeysLoginCompleteFlags.String("jwt", "", "")

		passkeysListFlags   = flag.NewFlagSet("list", flag.ExitOnError)
		passkeysListJWTFlag = passkeysListFlags.String("jwt", "", "")

		passkeysUpdateFlags    = flag.NewFlagSet("update", flag.ExitOnError)
		passkeysUpdateBodyFlag = passkeysUpdateFlags.String("body", "REQUIRED", "")
		passkeysUpdateIDFlag   = passkeysUpdateFlags.String("id", "REQUIRED", "Passkey ID")
		passkeysUpdateJWTFlag  = passkeysUpdateFlags.String("jwt", "", "")

		passkeysDeleteFlags   = flag.NewFlagSet("delete", flag.ExitOnError)
		passkeysDeleteIDFlag  = passkeysDeleteFlags.String("id", "REQUIRED", "Passkey ID")
		passkeysDeleteJWTFlag = passkeysDeleteFlags.String("jwt", "", "")

		passwordlessFlags = flag.NewFlagSet("passwordless", flag.ContinueOnError)

		passwordlessEmailFlags       = flag.NewFlagSet("email", flag.ExitOnError)
		passwordlessEmailBodyFlag    = passwordlessEmailFlags.String("body", "REQUIRED", "")
		passwordlessEmailOauth2Flag  = passwordlessEmailFlags.String("oauth2", "", "")
		passwordlessEmailXAPIKeyFlag = passwordlessEmailFlags.String("xapi-key", "", "")
		passwordlessEmailJWTFlag     = passwordlessEmailFlags.String("jwt", "", "")

		passwordlessSmsFlags       = flag.NewFlagSet("sms", flag.ExitOnError)
		passwordlessSmsBodyFlag    = passwordlessSmsFlags.String("body", "REQUIRED", "")
		passwordlessSmsOauth2Flag  = passwordlessSmsFlags.String("oauth2", "", "")
		passwordlessSmsXAPIKeyFlag = passwordlessSmsFlags.String("xapi-key", "", "")
		passwordlessSmsJWTFlag     = passwordlessSmsFlags.String("jwt", "", "")

		passwordlessVerifyFlags       = flag.NewFlagSet("verify", flag.ExitOnError)
		passwordlessVerifyBodyFlag    = passwordlessVerifyFlags.String("body", "REQUIRED", "")
		passwordlessVerifyOauth2Flag  = passwordlessVerifyFlags.String("oauth2", "", "")
		passwordlessVerifyXAPIKeyFlag = passwordlessVerifyFlags.String("xapi-key", "", "")
		passwordlessVerifyJWTFlag     = passwordlessVerifyFlags.String("jwt", "", "")

		passwordlessMethodsFlags       = flag.NewFlagSet("methods", flag.ExitOnError)
		passwordlessMethodsOauth2Flag  = passwordlessMethodsFlags.String("oauth2", "", "")
		passwordlessMethodsXAPIKeyFlag = passwordlessMethodsFlags.String("xapi-key", "", "")
		passwordlessMethodsJWTFlag     = passwordlessMethodsFlags.String("jwt", "", "")

		passwordlessMagicLinkFlags    = flag.NewFlagSet("magic-link", flag.ExitOnError)
		passwordlessMagicLinkBodyFlag = passwordlessMagicLinkFlags.String("body", "REQUIRED", "")
		passwordlessMagicLinkJWTFlag  = passwordlessMagicLinkFlags.String("jwt", "", "")

		rbacFlags = flag.NewFlagSet("rbac", flag.ContinueOnError)

		rbacListPermissionsFlags        = flag.NewFlagSet("list-permissions", flag.ExitOnError)
		rbacListPermissionsOffsetFlag   = rbacListPermissionsFlags.String("offset", "", "")
		rbacListPermissionsLimitFlag    = rbacListPermissionsFlags.String("limit", "20", "")
		rbacListPermissionsResourceFlag = rbacListPermissionsFlags.String("resource", "", "")
		rbacListPermissionsActionFlag   = rbacListPermissionsFlags.String("action", "", "")
		rbacListPermissionsSearchFlag   = rbacListPermissionsFlags.String("search", "", "")
		rbacListPermissionsJWTFlag      = rbacListPermissionsFlags.String("jwt", "", "")

		rbacCreatePermissionFlags    = flag.NewFlagSet("create-permission", flag.ExitOnError)
		rbacCreatePermissionBodyFlag = rbacCreatePermissionFlags.String("body", "REQUIRED", "")
		rbacCreatePermissionJWTFlag  = rbacCreatePermissionFlags.String("jwt", "", "")

		rbacGetPermissionFlags   = flag.NewFlagSet("get-permission", flag.ExitOnError)
		rbacGetPermissionIDFlag  = rbacGetPermissionFlags.String("id", "REQUIRED", "Permission ID")
		rbacGetPermissionJWTFlag = rbacGetPermissionFlags.String("jwt", "", "")

		rbacUpdatePermissionFlags    = flag.NewFlagSet("update-permission", flag.ExitOnError)
		rbacUpdatePermissionBodyFlag = rbacUpdatePermissionFlags.String("body", "REQUIRED", "")
		rbacUpdatePermissionIDFlag   = rbacUpdatePermissionFlags.String("id", "REQUIRED", "Permission ID")
		rbacUpdatePermissionJWTFlag  = rbacUpdatePermissionFlags.String("jwt", "", "")

		rbacDeletePermissionFlags   = flag.NewFlagSet("delete-permission", flag.ExitOnError)
		rbacDeletePermissionIDFlag  = rbacDeletePermissionFlags.String("id", "REQUIRED", "Permission ID")
		rbacDeletePermissionJWTFlag = rbacDeletePermissionFlags.String("jwt", "", "")

		rbacListRolesFlags              = flag.NewFlagSet("list-roles", flag.ExitOnError)
		rbacListRolesOffsetFlag         = rbacListRolesFlags.String("offset", "", "")
		rbacListRolesLimitFlag          = rbacListRolesFlags.String("limit", "20", "")
		rbacListRolesOrganizationIDFlag = rbacListRolesFlags.String("organization-id", "", "")
		rbacListRolesSearchFlag         = rbacListRolesFlags.String("search", "", "")
		rbacListRolesJWTFlag            = rbacListRolesFlags.String("jwt", "", "")

		rbacCreateRoleFlags    = flag.NewFlagSet("create-role", flag.ExitOnError)
		rbacCreateRoleBodyFlag = rbacCreateRoleFlags.String("body", "REQUIRED", "")
		rbacCreateRoleJWTFlag  = rbacCreateRoleFlags.String("jwt", "", "")

		rbacGetRoleFlags   = flag.NewFlagSet("get-role", flag.ExitOnError)
		rbacGetRoleIDFlag  = rbacGetRoleFlags.String("id", "REQUIRED", "Role ID")
		rbacGetRoleJWTFlag = rbacGetRoleFlags.String("jwt", "", "")

		rbacUpdateRoleFlags    = flag.NewFlagSet("update-role", flag.ExitOnError)
		rbacUpdateRoleBodyFlag = rbacUpdateRoleFlags.String("body", "REQUIRED", "")
		rbacUpdateRoleIDFlag   = rbacUpdateRoleFlags.String("id", "REQUIRED", "Role ID")
		rbacUpdateRoleJWTFlag  = rbacUpdateRoleFlags.String("jwt", "", "")

		rbacDeleteRoleFlags   = flag.NewFlagSet("delete-role", flag.ExitOnError)
		rbacDeleteRoleIDFlag  = rbacDeleteRoleFlags.String("id", "REQUIRED", "Role ID")
		rbacDeleteRoleJWTFlag = rbacDeleteRoleFlags.String("jwt", "", "")

		rbacListRolePermissionsFlags   = flag.NewFlagSet("list-role-permissions", flag.ExitOnError)
		rbacListRolePermissionsIDFlag  = rbacListRolePermissionsFlags.String("id", "REQUIRED", "Role ID")
		rbacListRolePermissionsJWTFlag = rbacListRolePermissionsFlags.String("jwt", "", "")

		rbacAddRolePermissionFlags    = flag.NewFlagSet("add-role-permission", flag.ExitOnError)
		rbacAddRolePermissionBodyFlag = rbacAddRolePermissionFlags.String("body", "REQUIRED", "")
		rbacAddRolePermissionIDFlag   = rbacAddRolePermissionFlags.String("id", "REQUIRED", "Role ID")
		rbacAddRolePermissionJWTFlag  = rbacAddRolePermissionFlags.String("jwt", "", "")

		rbacRemoveRolePermissionFlags            = flag.NewFlagSet("remove-role-permission", flag.ExitOnError)
		rbacRemoveRolePermissionIDFlag           = rbacRemoveRolePermissionFlags.String("id", "REQUIRED", "Role ID")
		rbacRemoveRolePermissionPermissionIDFlag = rbacRemoveRolePermissionFlags.String("permission-id", "REQUIRED", "Permission ID")
		rbacRemoveRolePermissionJWTFlag          = rbacRemoveRolePermissionFlags.String("jwt", "", "")

		rbacCheckPermissionFlags        = flag.NewFlagSet("check-permission", flag.ExitOnError)
		rbacCheckPermissionResourceFlag = rbacCheckPermissionFlags.String("resource", "REQUIRED", "")
		rbacCheckPermissionActionFlag   = rbacCheckPermissionFlags.String("action", "REQUIRED", "")
		rbacCheckPermissionJWTFlag      = rbacCheckPermissionFlags.String("jwt", "", "")

		rbacCheckRoleFlags              = flag.NewFlagSet("check-role", flag.ExitOnError)
		rbacCheckRoleRoleFlag           = rbacCheckRoleFlags.String("role", "REQUIRED", "")
		rbacCheckRoleOrganizationIDFlag = rbacCheckRoleFlags.String("organization-id", "", "")
		rbacCheckRoleJWTFlag            = rbacCheckRoleFlags.String("jwt", "", "")

		oauthClientFlags = flag.NewFlagSet("oauth-client", flag.ContinueOnError)

		oauthClientListProvidersFlags       = flag.NewFlagSet("list-providers", flag.ExitOnError)
		oauthClientListProvidersOauth2Flag  = oauthClientListProvidersFlags.String("oauth2", "", "")
		oauthClientListProvidersXAPIKeyFlag = oauthClientListProvidersFlags.String("xapi-key", "", "")
		oauthClientListProvidersJWTFlag     = oauthClientListProvidersFlags.String("jwt", "", "")

		oauthClientProviderAuthFlags           = flag.NewFlagSet("provider-auth", flag.ExitOnError)
		oauthClientProviderAuthProviderFlag    = oauthClientProviderAuthFlags.String("provider", "REQUIRED", "Provider ID")
		oauthClientProviderAuthRedirectURIFlag = oauthClientProviderAuthFlags.String("redirect-uri", "", "")
		oauthClientProviderAuthOauth2Flag      = oauthClientProviderAuthFlags.String("oauth2", "", "")
		oauthClientProviderAuthXAPIKeyFlag     = oauthClientProviderAuthFlags.String("xapi-key", "", "")
		oauthClientProviderAuthJWTFlag         = oauthClientProviderAuthFlags.String("jwt", "", "")

		oauthClientProviderCallbackFlags        = flag.NewFlagSet("provider-callback", flag.ExitOnError)
		oauthClientProviderCallbackProviderFlag = oauthClientProviderCallbackFlags.String("provider", "REQUIRED", "Provider ID")
		oauthClientProviderCallbackCodeFlag     = oauthClientProviderCallbackFlags.String("code", "", "")
		oauthClientProviderCallbackStateFlag    = oauthClientProviderCallbackFlags.String("state", "", "")
		oauthClientProviderCallbackOauth2Flag   = oauthClientProviderCallbackFlags.String("oauth2", "", "")
		oauthClientProviderCallbackXAPIKeyFlag  = oauthClientProviderCallbackFlags.String("xapi-key", "", "")
		oauthClientProviderCallbackJWTFlag      = oauthClientProviderCallbackFlags.String("jwt", "", "")

		ssoFlags = flag.NewFlagSet("sso", flag.ContinueOnError)

		ssoListProvidersFlags              = flag.NewFlagSet("list-providers", flag.ExitOnError)
		ssoListProvidersOrganizationIDFlag = ssoListProvidersFlags.String("organization-id", "", "")
		ssoListProvidersOauth2Flag         = ssoListProvidersFlags.String("oauth2", "", "")
		ssoListProvidersXAPIKeyFlag        = ssoListProvidersFlags.String("xapi-key", "", "")
		ssoListProvidersJWTFlag            = ssoListProvidersFlags.String("jwt", "", "")

		ssoProviderAuthFlags           = flag.NewFlagSet("provider-auth", flag.ExitOnError)
		ssoProviderAuthProviderFlag    = ssoProviderAuthFlags.String("provider", "REQUIRED", "Provider ID")
		ssoProviderAuthRedirectURIFlag = ssoProviderAuthFlags.String("redirect-uri", "", "")
		ssoProviderAuthOauth2Flag      = ssoProviderAuthFlags.String("oauth2", "", "")
		ssoProviderAuthXAPIKeyFlag     = ssoProviderAuthFlags.String("xapi-key", "", "")
		ssoProviderAuthJWTFlag         = ssoProviderAuthFlags.String("jwt", "", "")

		ssoProviderCallbackFlags            = flag.NewFlagSet("provider-callback", flag.ExitOnError)
		ssoProviderCallbackProviderFlag     = ssoProviderCallbackFlags.String("provider", "REQUIRED", "Provider ID")
		ssoProviderCallbackCodeFlag         = ssoProviderCallbackFlags.String("code", "", "")
		ssoProviderCallbackStateFlag        = ssoProviderCallbackFlags.String("state", "", "")
		ssoProviderCallbackSAMLResponseFlag = ssoProviderCallbackFlags.String("saml-response", "", "")
		ssoProviderCallbackRelayStateFlag   = ssoProviderCallbackFlags.String("relay-state", "", "")
		ssoProviderCallbackOauth2Flag       = ssoProviderCallbackFlags.String("oauth2", "", "")
		ssoProviderCallbackXAPIKeyFlag      = ssoProviderCallbackFlags.String("xapi-key", "", "")
		ssoProviderCallbackJWTFlag          = ssoProviderCallbackFlags.String("jwt", "", "")

		ssoListIdentityProvidersFlags              = flag.NewFlagSet("list-identity-providers", flag.ExitOnError)
		ssoListIdentityProvidersOrganizationIDFlag = ssoListIdentityProvidersFlags.String("organization-id", "REQUIRED", "")
		ssoListIdentityProvidersJWTFlag            = ssoListIdentityProvidersFlags.String("jwt", "", "")

		ssoCreateIdentityProviderFlags    = flag.NewFlagSet("create-identity-provider", flag.ExitOnError)
		ssoCreateIdentityProviderBodyFlag = ssoCreateIdentityProviderFlags.String("body", "REQUIRED", "")
		ssoCreateIdentityProviderJWTFlag  = ssoCreateIdentityProviderFlags.String("jwt", "", "")

		ssoGetIdentityProviderFlags   = flag.NewFlagSet("get-identity-provider", flag.ExitOnError)
		ssoGetIdentityProviderIDFlag  = ssoGetIdentityProviderFlags.String("id", "REQUIRED", "Provider ID")
		ssoGetIdentityProviderJWTFlag = ssoGetIdentityProviderFlags.String("jwt", "", "")

		ssoUpdateIdentityProviderFlags    = flag.NewFlagSet("update-identity-provider", flag.ExitOnError)
		ssoUpdateIdentityProviderBodyFlag = ssoUpdateIdentityProviderFlags.String("body", "REQUIRED", "")
		ssoUpdateIdentityProviderIDFlag   = ssoUpdateIdentityProviderFlags.String("id", "REQUIRED", "Provider ID")
		ssoUpdateIdentityProviderJWTFlag  = ssoUpdateIdentityProviderFlags.String("jwt", "", "")

		ssoDeleteIdentityProviderFlags   = flag.NewFlagSet("delete-identity-provider", flag.ExitOnError)
		ssoDeleteIdentityProviderIDFlag  = ssoDeleteIdentityProviderFlags.String("id", "REQUIRED", "Provider ID")
		ssoDeleteIdentityProviderJWTFlag = ssoDeleteIdentityProviderFlags.String("jwt", "", "")

		ssoSamlMetadataFlags  = flag.NewFlagSet("saml-metadata", flag.ExitOnError)
		ssoSamlMetadataIDFlag = ssoSamlMetadataFlags.String("id", "REQUIRED", "Provider ID")

		ssoSamlAcsFlags  = flag.NewFlagSet("saml-acs", flag.ExitOnError)
		ssoSamlAcsIDFlag = ssoSamlAcsFlags.String("id", "REQUIRED", "Provider ID")

		usersFlags = flag.NewFlagSet("users", flag.ContinueOnError)

		usersListFlags              = flag.NewFlagSet("list", flag.ExitOnError)
		usersListOffsetFlag         = usersListFlags.String("offset", "", "")
		usersListLimitFlag          = usersListFlags.String("limit", "20", "")
		usersListSearchFlag         = usersListFlags.String("search", "", "")
		usersListOrganizationIDFlag = usersListFlags.String("organization-id", "", "")
		usersListJWTFlag            = usersListFlags.String("jwt", "", "")

		usersCreateFlags    = flag.NewFlagSet("create", flag.ExitOnError)
		usersCreateBodyFlag = usersCreateFlags.String("body", "REQUIRED", "")
		usersCreateJWTFlag  = usersCreateFlags.String("jwt", "", "")

		usersGetFlags   = flag.NewFlagSet("get", flag.ExitOnError)
		usersGetIDFlag  = usersGetFlags.String("id", "REQUIRED", "User ID")
		usersGetJWTFlag = usersGetFlags.String("jwt", "", "")

		usersUpdateFlags    = flag.NewFlagSet("update", flag.ExitOnError)
		usersUpdateBodyFlag = usersUpdateFlags.String("body", "REQUIRED", "")
		usersUpdateIDFlag   = usersUpdateFlags.String("id", "REQUIRED", "User ID")
		usersUpdateJWTFlag  = usersUpdateFlags.String("jwt", "", "")

		usersDeleteFlags   = flag.NewFlagSet("delete", flag.ExitOnError)
		usersDeleteIDFlag  = usersDeleteFlags.String("id", "REQUIRED", "User ID")
		usersDeleteJWTFlag = usersDeleteFlags.String("jwt", "", "")

		usersUpdateMeFlags    = flag.NewFlagSet("update-me", flag.ExitOnError)
		usersUpdateMeBodyFlag = usersUpdateMeFlags.String("body", "REQUIRED", "")
		usersUpdateMeJWTFlag  = usersUpdateMeFlags.String("jwt", "", "")

		usersUpdatePasswordFlags    = flag.NewFlagSet("update-password", flag.ExitOnError)
		usersUpdatePasswordBodyFlag = usersUpdatePasswordFlags.String("body", "REQUIRED", "")
		usersUpdatePasswordJWTFlag  = usersUpdatePasswordFlags.String("jwt", "", "")

		usersGetSessionsFlags   = flag.NewFlagSet("get-sessions", flag.ExitOnError)
		usersGetSessionsJWTFlag = usersGetSessionsFlags.String("jwt", "", "")

		usersDeleteSessionFlags         = flag.NewFlagSet("delete-session", flag.ExitOnError)
		usersDeleteSessionSessionIDFlag = usersDeleteSessionFlags.String("session-id", "REQUIRED", "Session ID")
		usersDeleteSessionJWTFlag       = usersDeleteSessionFlags.String("jwt", "", "")

		usersGetOrganizationsFlags   = flag.NewFlagSet("get-organizations", flag.ExitOnError)
		usersGetOrganizationsIDFlag  = usersGetOrganizationsFlags.String("id", "REQUIRED", "User ID")
		usersGetOrganizationsJWTFlag = usersGetOrganizationsFlags.String("jwt", "", "")

		webhooksFlags = flag.NewFlagSet("webhooks", flag.ContinueOnError)

		webhooksListFlags              = flag.NewFlagSet("list", flag.ExitOnError)
		webhooksListOffsetFlag         = webhooksListFlags.String("offset", "", "")
		webhooksListLimitFlag          = webhooksListFlags.String("limit", "20", "")
		webhooksListOrganizationIDFlag = webhooksListFlags.String("organization-id", "", "")
		webhooksListEventTypesFlag     = webhooksListFlags.String("event-types", "", "")
		webhooksListJWTFlag            = webhooksListFlags.String("jwt", "", "")

		webhooksCreateFlags    = flag.NewFlagSet("create", flag.ExitOnError)
		webhooksCreateBodyFlag = webhooksCreateFlags.String("body", "REQUIRED", "")
		webhooksCreateJWTFlag  = webhooksCreateFlags.String("jwt", "", "")

		webhooksGetFlags   = flag.NewFlagSet("get", flag.ExitOnError)
		webhooksGetIDFlag  = webhooksGetFlags.String("id", "REQUIRED", "Webhook ID")
		webhooksGetJWTFlag = webhooksGetFlags.String("jwt", "", "")

		webhooksUpdateFlags    = flag.NewFlagSet("update", flag.ExitOnError)
		webhooksUpdateBodyFlag = webhooksUpdateFlags.String("body", "REQUIRED", "")
		webhooksUpdateIDFlag   = webhooksUpdateFlags.String("id", "REQUIRED", "Webhook ID")
		webhooksUpdateJWTFlag  = webhooksUpdateFlags.String("jwt", "", "")

		webhooksDeleteFlags   = flag.NewFlagSet("delete", flag.ExitOnError)
		webhooksDeleteIDFlag  = webhooksDeleteFlags.String("id", "REQUIRED", "Webhook ID")
		webhooksDeleteJWTFlag = webhooksDeleteFlags.String("jwt", "", "")

		webhooksTriggerEventFlags    = flag.NewFlagSet("trigger-event", flag.ExitOnError)
		webhooksTriggerEventBodyFlag = webhooksTriggerEventFlags.String("body", "REQUIRED", "")
		webhooksTriggerEventJWTFlag  = webhooksTriggerEventFlags.String("jwt", "", "")

		webhooksListEventsFlags         = flag.NewFlagSet("list-events", flag.ExitOnError)
		webhooksListEventsIDFlag        = webhooksListEventsFlags.String("id", "REQUIRED", "Webhook ID")
		webhooksListEventsOffsetFlag    = webhooksListEventsFlags.String("offset", "", "")
		webhooksListEventsLimitFlag     = webhooksListEventsFlags.String("limit", "20", "")
		webhooksListEventsEventTypeFlag = webhooksListEventsFlags.String("event-type", "", "")
		webhooksListEventsDeliveredFlag = webhooksListEventsFlags.String("delivered", "", "")
		webhooksListEventsJWTFlag       = webhooksListEventsFlags.String("jwt", "", "")

		webhooksReplayEventFlags       = flag.NewFlagSet("replay-event", flag.ExitOnError)
		webhooksReplayEventIDFlag      = webhooksReplayEventFlags.String("id", "REQUIRED", "Webhook ID")
		webhooksReplayEventEventIDFlag = webhooksReplayEventFlags.String("event-id", "REQUIRED", "Event ID")
		webhooksReplayEventJWTFlag     = webhooksReplayEventFlags.String("jwt", "", "")

		webhooksReceiveFlags  = flag.NewFlagSet("receive", flag.ExitOnError)
		webhooksReceiveIDFlag = webhooksReceiveFlags.String("id", "REQUIRED", "Webhook receiver ID")
	)
	apiKeysFlags.Usage = apiKeysUsage
	apiKeysListFlags.Usage = apiKeysListUsage
	apiKeysCreateFlags.Usage = apiKeysCreateUsage
	apiKeysGetFlags.Usage = apiKeysGetUsage
	apiKeysUpdateFlags.Usage = apiKeysUpdateUsage
	apiKeysDeleteFlags.Usage = apiKeysDeleteUsage
	apiKeysValidateFlags.Usage = apiKeysValidateUsage

	emailFlags.Usage = emailUsage
	emailListTemplatesFlags.Usage = emailListTemplatesUsage
	emailCreateTemplateFlags.Usage = emailCreateTemplateUsage
	emailGetTemplateFlags.Usage = emailGetTemplateUsage
	emailGetTemplateByTypeFlags.Usage = emailGetTemplateByTypeUsage
	emailUpdateTemplateFlags.Usage = emailUpdateTemplateUsage
	emailDeleteTemplateFlags.Usage = emailDeleteTemplateUsage
	emailSendFlags.Usage = emailSendUsage
	emailSendTemplateFlags.Usage = emailSendTemplateUsage

	adminFlags.Usage = adminUsage
	adminHomeFlags.Usage = adminHomeUsage

	webFlags.Usage = webUsage
	webHomeFlags.Usage = webHomeUsage

	healthFlags.Usage = healthUsage
	healthCheckFlags.Usage = healthCheckUsage
	healthReadyFlags.Usage = healthReadyUsage
	healthVersionFlags.Usage = healthVersionUsage
	healthMetricsFlags.Usage = healthMetricsUsage
	healthDebugFlags.Usage = healthDebugUsage

	authFlags.Usage = authUsage
	authLoginFlags.Usage = authLoginUsage
	authRegisterFlags.Usage = authRegisterUsage
	authLogoutFlags.Usage = authLogoutUsage
	authRefreshTokenFlags.Usage = authRefreshTokenUsage
	authForgotPasswordFlags.Usage = authForgotPasswordUsage
	authResetPasswordFlags.Usage = authResetPasswordUsage
	authVerifyEmailFlags.Usage = authVerifyEmailUsage
	authMeFlags.Usage = authMeUsage
	authCsrfFlags.Usage = authCsrfUsage

	mfaFlags.Usage = mfaUsage
	mfaEnrollFlags.Usage = mfaEnrollUsage
	mfaVerifyFlags.Usage = mfaVerifyUsage
	mfaUnenrollFlags.Usage = mfaUnenrollUsage
	mfaMethodsFlags.Usage = mfaMethodsUsage
	mfaSendCodeFlags.Usage = mfaSendCodeUsage

	oauthProviderFlags.Usage = oauthProviderUsage
	oauthProviderAuthorizeFlags.Usage = oauthProviderAuthorizeUsage
	oauthProviderTokenFlags.Usage = oauthProviderTokenUsage
	oauthProviderIntrospectFlags.Usage = oauthProviderIntrospectUsage
	oauthProviderRevokeFlags.Usage = oauthProviderRevokeUsage
	oauthProviderConsentFlags.Usage = oauthProviderConsentUsage
	oauthProviderUserinfoFlags.Usage = oauthProviderUserinfoUsage
	oauthProviderListClientsFlags.Usage = oauthProviderListClientsUsage
	oauthProviderCreateClientFlags.Usage = oauthProviderCreateClientUsage
	oauthProviderGetClientFlags.Usage = oauthProviderGetClientUsage
	oauthProviderUpdateClientFlags.Usage = oauthProviderUpdateClientUsage
	oauthProviderDeleteClientFlags.Usage = oauthProviderDeleteClientUsage
	oauthProviderRotateClientSecretFlags.Usage = oauthProviderRotateClientSecretUsage
	oauthProviderListScopesFlags.Usage = oauthProviderListScopesUsage
	oauthProviderCreateScopeFlags.Usage = oauthProviderCreateScopeUsage
	oauthProviderGetScopeFlags.Usage = oauthProviderGetScopeUsage
	oauthProviderUpdateScopeFlags.Usage = oauthProviderUpdateScopeUsage
	oauthProviderDeleteScopeFlags.Usage = oauthProviderDeleteScopeUsage
	oauthProviderOidcConfigurationFlags.Usage = oauthProviderOidcConfigurationUsage
	oauthProviderJwksFlags.Usage = oauthProviderJwksUsage

	organizationsFlags.Usage = organizationsUsage
	organizationsListFlags.Usage = organizationsListUsage
	organizationsCreateFlags.Usage = organizationsCreateUsage
	organizationsGetFlags.Usage = organizationsGetUsage
	organizationsUpdateFlags.Usage = organizationsUpdateUsage
	organizationsDeleteFlags.Usage = organizationsDeleteUsage
	organizationsListMembersFlags.Usage = organizationsListMembersUsage
	organizationsAddMemberFlags.Usage = organizationsAddMemberUsage
	organizationsUpdateMemberFlags.Usage = organizationsUpdateMemberUsage
	organizationsRemoveMemberFlags.Usage = organizationsRemoveMemberUsage
	organizationsListFeaturesFlags.Usage = organizationsListFeaturesUsage
	organizationsEnableFeatureFlags.Usage = organizationsEnableFeatureUsage
	organizationsDisableFeatureFlags.Usage = organizationsDisableFeatureUsage

	passkeysFlags.Usage = passkeysUsage
	passkeysRegisterBeginFlags.Usage = passkeysRegisterBeginUsage
	passkeysRegisterCompleteFlags.Usage = passkeysRegisterCompleteUsage
	passkeysLoginBeginFlags.Usage = passkeysLoginBeginUsage
	passkeysLoginCompleteFlags.Usage = passkeysLoginCompleteUsage
	passkeysListFlags.Usage = passkeysListUsage
	passkeysUpdateFlags.Usage = passkeysUpdateUsage
	passkeysDeleteFlags.Usage = passkeysDeleteUsage

	passwordlessFlags.Usage = passwordlessUsage
	passwordlessEmailFlags.Usage = passwordlessEmailUsage
	passwordlessSmsFlags.Usage = passwordlessSmsUsage
	passwordlessVerifyFlags.Usage = passwordlessVerifyUsage
	passwordlessMethodsFlags.Usage = passwordlessMethodsUsage
	passwordlessMagicLinkFlags.Usage = passwordlessMagicLinkUsage

	rbacFlags.Usage = rbacUsage
	rbacListPermissionsFlags.Usage = rbacListPermissionsUsage
	rbacCreatePermissionFlags.Usage = rbacCreatePermissionUsage
	rbacGetPermissionFlags.Usage = rbacGetPermissionUsage
	rbacUpdatePermissionFlags.Usage = rbacUpdatePermissionUsage
	rbacDeletePermissionFlags.Usage = rbacDeletePermissionUsage
	rbacListRolesFlags.Usage = rbacListRolesUsage
	rbacCreateRoleFlags.Usage = rbacCreateRoleUsage
	rbacGetRoleFlags.Usage = rbacGetRoleUsage
	rbacUpdateRoleFlags.Usage = rbacUpdateRoleUsage
	rbacDeleteRoleFlags.Usage = rbacDeleteRoleUsage
	rbacListRolePermissionsFlags.Usage = rbacListRolePermissionsUsage
	rbacAddRolePermissionFlags.Usage = rbacAddRolePermissionUsage
	rbacRemoveRolePermissionFlags.Usage = rbacRemoveRolePermissionUsage
	rbacCheckPermissionFlags.Usage = rbacCheckPermissionUsage
	rbacCheckRoleFlags.Usage = rbacCheckRoleUsage

	oauthClientFlags.Usage = oauthClientUsage
	oauthClientListProvidersFlags.Usage = oauthClientListProvidersUsage
	oauthClientProviderAuthFlags.Usage = oauthClientProviderAuthUsage
	oauthClientProviderCallbackFlags.Usage = oauthClientProviderCallbackUsage

	ssoFlags.Usage = ssoUsage
	ssoListProvidersFlags.Usage = ssoListProvidersUsage
	ssoProviderAuthFlags.Usage = ssoProviderAuthUsage
	ssoProviderCallbackFlags.Usage = ssoProviderCallbackUsage
	ssoListIdentityProvidersFlags.Usage = ssoListIdentityProvidersUsage
	ssoCreateIdentityProviderFlags.Usage = ssoCreateIdentityProviderUsage
	ssoGetIdentityProviderFlags.Usage = ssoGetIdentityProviderUsage
	ssoUpdateIdentityProviderFlags.Usage = ssoUpdateIdentityProviderUsage
	ssoDeleteIdentityProviderFlags.Usage = ssoDeleteIdentityProviderUsage
	ssoSamlMetadataFlags.Usage = ssoSamlMetadataUsage
	ssoSamlAcsFlags.Usage = ssoSamlAcsUsage

	usersFlags.Usage = usersUsage
	usersListFlags.Usage = usersListUsage
	usersCreateFlags.Usage = usersCreateUsage
	usersGetFlags.Usage = usersGetUsage
	usersUpdateFlags.Usage = usersUpdateUsage
	usersDeleteFlags.Usage = usersDeleteUsage
	usersUpdateMeFlags.Usage = usersUpdateMeUsage
	usersUpdatePasswordFlags.Usage = usersUpdatePasswordUsage
	usersGetSessionsFlags.Usage = usersGetSessionsUsage
	usersDeleteSessionFlags.Usage = usersDeleteSessionUsage
	usersGetOrganizationsFlags.Usage = usersGetOrganizationsUsage

	webhooksFlags.Usage = webhooksUsage
	webhooksListFlags.Usage = webhooksListUsage
	webhooksCreateFlags.Usage = webhooksCreateUsage
	webhooksGetFlags.Usage = webhooksGetUsage
	webhooksUpdateFlags.Usage = webhooksUpdateUsage
	webhooksDeleteFlags.Usage = webhooksDeleteUsage
	webhooksTriggerEventFlags.Usage = webhooksTriggerEventUsage
	webhooksListEventsFlags.Usage = webhooksListEventsUsage
	webhooksReplayEventFlags.Usage = webhooksReplayEventUsage
	webhooksReceiveFlags.Usage = webhooksReceiveUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "api-keys":
			svcf = apiKeysFlags
		case "email":
			svcf = emailFlags
		case "admin":
			svcf = adminFlags
		case "web":
			svcf = webFlags
		case "health":
			svcf = healthFlags
		case "auth":
			svcf = authFlags
		case "mfa":
			svcf = mfaFlags
		case "oauth-provider":
			svcf = oauthProviderFlags
		case "organizations":
			svcf = organizationsFlags
		case "passkeys":
			svcf = passkeysFlags
		case "passwordless":
			svcf = passwordlessFlags
		case "rbac":
			svcf = rbacFlags
		case "oauth-client":
			svcf = oauthClientFlags
		case "sso":
			svcf = ssoFlags
		case "users":
			svcf = usersFlags
		case "webhooks":
			svcf = webhooksFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "api-keys":
			switch epn {
			case "list":
				epf = apiKeysListFlags

			case "create":
				epf = apiKeysCreateFlags

			case "get":
				epf = apiKeysGetFlags

			case "update":
				epf = apiKeysUpdateFlags

			case "delete":
				epf = apiKeysDeleteFlags

			case "validate":
				epf = apiKeysValidateFlags

			}

		case "email":
			switch epn {
			case "list-templates":
				epf = emailListTemplatesFlags

			case "create-template":
				epf = emailCreateTemplateFlags

			case "get-template":
				epf = emailGetTemplateFlags

			case "get-template-by-type":
				epf = emailGetTemplateByTypeFlags

			case "update-template":
				epf = emailUpdateTemplateFlags

			case "delete-template":
				epf = emailDeleteTemplateFlags

			case "send":
				epf = emailSendFlags

			case "send-template":
				epf = emailSendTemplateFlags

			}

		case "admin":
			switch epn {
			case "home":
				epf = adminHomeFlags

			}

		case "web":
			switch epn {
			case "home":
				epf = webHomeFlags

			}

		case "health":
			switch epn {
			case "check":
				epf = healthCheckFlags

			case "ready":
				epf = healthReadyFlags

			case "version":
				epf = healthVersionFlags

			case "metrics":
				epf = healthMetricsFlags

			case "debug":
				epf = healthDebugFlags

			}

		case "auth":
			switch epn {
			case "login":
				epf = authLoginFlags

			case "register":
				epf = authRegisterFlags

			case "logout":
				epf = authLogoutFlags

			case "refresh-token":
				epf = authRefreshTokenFlags

			case "forgot-password":
				epf = authForgotPasswordFlags

			case "reset-password":
				epf = authResetPasswordFlags

			case "verify-email":
				epf = authVerifyEmailFlags

			case "me":
				epf = authMeFlags

			case "csrf":
				epf = authCsrfFlags

			}

		case "mfa":
			switch epn {
			case "enroll":
				epf = mfaEnrollFlags

			case "verify":
				epf = mfaVerifyFlags

			case "unenroll":
				epf = mfaUnenrollFlags

			case "methods":
				epf = mfaMethodsFlags

			case "send-code":
				epf = mfaSendCodeFlags

			}

		case "oauth-provider":
			switch epn {
			case "authorize":
				epf = oauthProviderAuthorizeFlags

			case "token":
				epf = oauthProviderTokenFlags

			case "introspect":
				epf = oauthProviderIntrospectFlags

			case "revoke":
				epf = oauthProviderRevokeFlags

			case "consent":
				epf = oauthProviderConsentFlags

			case "userinfo":
				epf = oauthProviderUserinfoFlags

			case "list-clients":
				epf = oauthProviderListClientsFlags

			case "create-client":
				epf = oauthProviderCreateClientFlags

			case "get-client":
				epf = oauthProviderGetClientFlags

			case "update-client":
				epf = oauthProviderUpdateClientFlags

			case "delete-client":
				epf = oauthProviderDeleteClientFlags

			case "rotate-client-secret":
				epf = oauthProviderRotateClientSecretFlags

			case "list-scopes":
				epf = oauthProviderListScopesFlags

			case "create-scope":
				epf = oauthProviderCreateScopeFlags

			case "get-scope":
				epf = oauthProviderGetScopeFlags

			case "update-scope":
				epf = oauthProviderUpdateScopeFlags

			case "delete-scope":
				epf = oauthProviderDeleteScopeFlags

			case "oidc-configuration":
				epf = oauthProviderOidcConfigurationFlags

			case "jwks":
				epf = oauthProviderJwksFlags

			}

		case "organizations":
			switch epn {
			case "list":
				epf = organizationsListFlags

			case "create":
				epf = organizationsCreateFlags

			case "get":
				epf = organizationsGetFlags

			case "update":
				epf = organizationsUpdateFlags

			case "delete":
				epf = organizationsDeleteFlags

			case "list-members":
				epf = organizationsListMembersFlags

			case "add-member":
				epf = organizationsAddMemberFlags

			case "update-member":
				epf = organizationsUpdateMemberFlags

			case "remove-member":
				epf = organizationsRemoveMemberFlags

			case "list-features":
				epf = organizationsListFeaturesFlags

			case "enable-feature":
				epf = organizationsEnableFeatureFlags

			case "disable-feature":
				epf = organizationsDisableFeatureFlags

			}

		case "passkeys":
			switch epn {
			case "register-begin":
				epf = passkeysRegisterBeginFlags

			case "register-complete":
				epf = passkeysRegisterCompleteFlags

			case "login-begin":
				epf = passkeysLoginBeginFlags

			case "login-complete":
				epf = passkeysLoginCompleteFlags

			case "list":
				epf = passkeysListFlags

			case "update":
				epf = passkeysUpdateFlags

			case "delete":
				epf = passkeysDeleteFlags

			}

		case "passwordless":
			switch epn {
			case "email":
				epf = passwordlessEmailFlags

			case "sms":
				epf = passwordlessSmsFlags

			case "verify":
				epf = passwordlessVerifyFlags

			case "methods":
				epf = passwordlessMethodsFlags

			case "magic-link":
				epf = passwordlessMagicLinkFlags

			}

		case "rbac":
			switch epn {
			case "list-permissions":
				epf = rbacListPermissionsFlags

			case "create-permission":
				epf = rbacCreatePermissionFlags

			case "get-permission":
				epf = rbacGetPermissionFlags

			case "update-permission":
				epf = rbacUpdatePermissionFlags

			case "delete-permission":
				epf = rbacDeletePermissionFlags

			case "list-roles":
				epf = rbacListRolesFlags

			case "create-role":
				epf = rbacCreateRoleFlags

			case "get-role":
				epf = rbacGetRoleFlags

			case "update-role":
				epf = rbacUpdateRoleFlags

			case "delete-role":
				epf = rbacDeleteRoleFlags

			case "list-role-permissions":
				epf = rbacListRolePermissionsFlags

			case "add-role-permission":
				epf = rbacAddRolePermissionFlags

			case "remove-role-permission":
				epf = rbacRemoveRolePermissionFlags

			case "check-permission":
				epf = rbacCheckPermissionFlags

			case "check-role":
				epf = rbacCheckRoleFlags

			}

		case "oauth-client":
			switch epn {
			case "list-providers":
				epf = oauthClientListProvidersFlags

			case "provider-auth":
				epf = oauthClientProviderAuthFlags

			case "provider-callback":
				epf = oauthClientProviderCallbackFlags

			}

		case "sso":
			switch epn {
			case "list-providers":
				epf = ssoListProvidersFlags

			case "provider-auth":
				epf = ssoProviderAuthFlags

			case "provider-callback":
				epf = ssoProviderCallbackFlags

			case "list-identity-providers":
				epf = ssoListIdentityProvidersFlags

			case "create-identity-provider":
				epf = ssoCreateIdentityProviderFlags

			case "get-identity-provider":
				epf = ssoGetIdentityProviderFlags

			case "update-identity-provider":
				epf = ssoUpdateIdentityProviderFlags

			case "delete-identity-provider":
				epf = ssoDeleteIdentityProviderFlags

			case "saml-metadata":
				epf = ssoSamlMetadataFlags

			case "saml-acs":
				epf = ssoSamlAcsFlags

			}

		case "users":
			switch epn {
			case "list":
				epf = usersListFlags

			case "create":
				epf = usersCreateFlags

			case "get":
				epf = usersGetFlags

			case "update":
				epf = usersUpdateFlags

			case "delete":
				epf = usersDeleteFlags

			case "update-me":
				epf = usersUpdateMeFlags

			case "update-password":
				epf = usersUpdatePasswordFlags

			case "get-sessions":
				epf = usersGetSessionsFlags

			case "delete-session":
				epf = usersDeleteSessionFlags

			case "get-organizations":
				epf = usersGetOrganizationsFlags

			}

		case "webhooks":
			switch epn {
			case "list":
				epf = webhooksListFlags

			case "create":
				epf = webhooksCreateFlags

			case "get":
				epf = webhooksGetFlags

			case "update":
				epf = webhooksUpdateFlags

			case "delete":
				epf = webhooksDeleteFlags

			case "trigger-event":
				epf = webhooksTriggerEventFlags

			case "list-events":
				epf = webhooksListEventsFlags

			case "replay-event":
				epf = webhooksReplayEventFlags

			case "receive":
				epf = webhooksReceiveFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "api-keys":
			c := apikeysc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "list":
				endpoint = c.List()
				data, err = apikeysc.BuildListPayload(*apiKeysListOffsetFlag, *apiKeysListLimitFlag, *apiKeysListTypeFlag, *apiKeysListOrganizationIDFlag, *apiKeysListJWTFlag)
			case "create":
				endpoint = c.Create()
				data, err = apikeysc.BuildCreatePayload(*apiKeysCreateBodyFlag, *apiKeysCreateJWTFlag)
			case "get":
				endpoint = c.Get()
				data, err = apikeysc.BuildGetPayload(*apiKeysGetIDFlag, *apiKeysGetJWTFlag)
			case "update":
				endpoint = c.Update()
				data, err = apikeysc.BuildUpdatePayload(*apiKeysUpdateBodyFlag, *apiKeysUpdateIDFlag, *apiKeysUpdateJWTFlag)
			case "delete":
				endpoint = c.Delete()
				data, err = apikeysc.BuildDeletePayload(*apiKeysDeleteIDFlag, *apiKeysDeleteJWTFlag)
			case "validate":
				endpoint = c.Validate()
				data, err = apikeysc.BuildValidatePayload(*apiKeysValidateAPIKeyFlag)
			}
		case "email":
			c := emailc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "list-templates":
				endpoint = c.ListTemplates()
				data, err = emailc.BuildListTemplatesPayload(*emailListTemplatesOffsetFlag, *emailListTemplatesLimitFlag, *emailListTemplatesTypeFlag, *emailListTemplatesOrganizationIDFlag, *emailListTemplatesLocaleFlag, *emailListTemplatesJWTFlag)
			case "create-template":
				endpoint = c.CreateTemplate()
				data, err = emailc.BuildCreateTemplatePayload(*emailCreateTemplateBodyFlag, *emailCreateTemplateJWTFlag)
			case "get-template":
				endpoint = c.GetTemplate()
				data, err = emailc.BuildGetTemplatePayload(*emailGetTemplateIDFlag, *emailGetTemplateJWTFlag)
			case "get-template-by-type":
				endpoint = c.GetTemplateByType()
				data, err = emailc.BuildGetTemplateByTypePayload(*emailGetTemplateByTypeTypeFlag, *emailGetTemplateByTypeOrganizationIDFlag, *emailGetTemplateByTypeLocaleFlag, *emailGetTemplateByTypeJWTFlag)
			case "update-template":
				endpoint = c.UpdateTemplate()
				data, err = emailc.BuildUpdateTemplatePayload(*emailUpdateTemplateBodyFlag, *emailUpdateTemplateIDFlag, *emailUpdateTemplateJWTFlag)
			case "delete-template":
				endpoint = c.DeleteTemplate()
				data, err = emailc.BuildDeleteTemplatePayload(*emailDeleteTemplateIDFlag, *emailDeleteTemplateJWTFlag)
			case "send":
				endpoint = c.Send()
				data, err = emailc.BuildSendPayload(*emailSendBodyFlag, *emailSendJWTFlag)
			case "send-template":
				endpoint = c.SendTemplate()
				data, err = emailc.BuildSendTemplatePayload(*emailSendTemplateBodyFlag, *emailSendTemplateJWTFlag)
			}
		case "admin":
			c := adminc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "home":
				endpoint = c.Home()
			}
		case "web":
			c := webc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "home":
				endpoint = c.Home()
			}
		case "health":
			c := healthc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "check":
				endpoint = c.Check()
			case "ready":
				endpoint = c.Ready()
			case "version":
				endpoint = c.Version()
			case "metrics":
				endpoint = c.Metrics()
			case "debug":
				endpoint = c.Debug()
			}
		case "auth":
			c := authc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "login":
				endpoint = c.Login()
				data, err = authc.BuildLoginPayload(*authLoginBodyFlag, *authLoginSessionIDFlag)
			case "register":
				endpoint = c.Register()
				data, err = authc.BuildRegisterPayload(*authRegisterBodyFlag, *authRegisterSessionIDFlag)
			case "logout":
				endpoint = c.Logout()
				data, err = authc.BuildLogoutPayload(*authLogoutJWTFlag, *authLogoutSessionIDFlag)
			case "refresh-token":
				endpoint = c.RefreshToken()
				data, err = authc.BuildRefreshTokenPayload(*authRefreshTokenBodyFlag, *authRefreshTokenOauth2Flag, *authRefreshTokenXAPIKeyFlag, *authRefreshTokenJWTFlag, *authRefreshTokenSessionIDFlag)
			case "forgot-password":
				endpoint = c.ForgotPassword()
				data, err = authc.BuildForgotPasswordPayload(*authForgotPasswordBodyFlag, *authForgotPasswordRedirectURLFlag, *authForgotPasswordOauth2Flag, *authForgotPasswordXAPIKeyFlag, *authForgotPasswordJWTFlag, *authForgotPasswordSessionIDFlag)
			case "reset-password":
				endpoint = c.ResetPassword()
				data, err = authc.BuildResetPasswordPayload(*authResetPasswordBodyFlag, *authResetPasswordSessionIDFlag)
			case "verify-email":
				endpoint = c.VerifyEmail()
				data, err = authc.BuildVerifyEmailPayload(*authVerifyEmailBodyFlag, *authVerifyEmailSessionIDFlag)
			case "me":
				endpoint = c.Me()
				data, err = authc.BuildMePayload(*authMeJWTFlag, *authMeSessionIDFlag)
			case "csrf":
				endpoint = c.Csrf()
				data, err = authc.BuildCsrfPayload(*authCsrfSessionIDFlag)
			}
		case "mfa":
			c := mfac.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "enroll":
				endpoint = c.Enroll()
				data, err = mfac.BuildEnrollPayload(*mfaEnrollBodyFlag, *mfaEnrollJWTFlag)
			case "verify":
				endpoint = c.Verify()
				data, err = mfac.BuildVerifyPayload(*mfaVerifyBodyFlag, *mfaVerifyJWTFlag)
			case "unenroll":
				endpoint = c.Unenroll()
				data, err = mfac.BuildUnenrollPayload(*mfaUnenrollBodyFlag, *mfaUnenrollJWTFlag)
			case "methods":
				endpoint = c.Methods()
				data, err = mfac.BuildMethodsPayload(*mfaMethodsJWTFlag)
			case "send-code":
				endpoint = c.SendCode()
				data, err = mfac.BuildSendCodePayload(*mfaSendCodeBodyFlag, *mfaSendCodeJWTFlag)
			}
		case "oauth-provider":
			c := oauthproviderc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "authorize":
				endpoint = c.Authorize()
				data, err = oauthproviderc.BuildAuthorizePayload(*oauthProviderAuthorizeClientIDFlag, *oauthProviderAuthorizeResponseTypeFlag, *oauthProviderAuthorizeRedirectURIFlag, *oauthProviderAuthorizeScopeFlag, *oauthProviderAuthorizeStateFlag, *oauthProviderAuthorizeCodeChallengeFlag, *oauthProviderAuthorizeCodeChallengeMethodFlag, *oauthProviderAuthorizeOauth2Flag, *oauthProviderAuthorizeXAPIKeyFlag, *oauthProviderAuthorizeJWTFlag)
			case "token":
				endpoint = c.Token()
				data, err = oauthproviderc.BuildTokenPayload(*oauthProviderTokenGrantTypeFlag, *oauthProviderTokenCodeFlag, *oauthProviderTokenRedirectURIFlag, *oauthProviderTokenClientIDFlag, *oauthProviderTokenClientSecretFlag, *oauthProviderTokenRefreshTokenFlag, *oauthProviderTokenCodeVerifierFlag, *oauthProviderTokenUsernameFlag, *oauthProviderTokenPasswordFlag, *oauthProviderTokenScopeFlag, *oauthProviderTokenOauth2Flag, *oauthProviderTokenXAPIKeyFlag, *oauthProviderTokenJWTFlag)
			case "introspect":
				endpoint = c.Introspect()
				data, err = oauthproviderc.BuildIntrospectPayload(*oauthProviderIntrospectTokenFlag, *oauthProviderIntrospectTokenTypeHintFlag, *oauthProviderIntrospectOauth2Flag, *oauthProviderIntrospectXAPIKeyFlag, *oauthProviderIntrospectJWTFlag)
			case "revoke":
				endpoint = c.Revoke()
				data, err = oauthproviderc.BuildRevokePayload(*oauthProviderRevokeTokenFlag, *oauthProviderRevokeTokenTypeHintFlag, *oauthProviderRevokeClientIDFlag, *oauthProviderRevokeClientSecretFlag, *oauthProviderRevokeOauth2Flag, *oauthProviderRevokeXAPIKeyFlag, *oauthProviderRevokeJWTFlag)
			case "consent":
				endpoint = c.Consent()
				data, err = oauthproviderc.BuildConsentPayload(*oauthProviderConsentBodyFlag, *oauthProviderConsentJWTFlag)
			case "userinfo":
				endpoint = c.Userinfo()
				data, err = oauthproviderc.BuildUserinfoPayload(*oauthProviderUserinfoJWTFlag)
			case "list-clients":
				endpoint = c.ListClients()
				data, err = oauthproviderc.BuildListClientsPayload(*oauthProviderListClientsOffsetFlag, *oauthProviderListClientsLimitFlag, *oauthProviderListClientsOrganizationIDFlag, *oauthProviderListClientsJWTFlag)
			case "create-client":
				endpoint = c.CreateClient()
				data, err = oauthproviderc.BuildCreateClientPayload(*oauthProviderCreateClientBodyFlag, *oauthProviderCreateClientJWTFlag)
			case "get-client":
				endpoint = c.GetClient()
				data, err = oauthproviderc.BuildGetClientPayload(*oauthProviderGetClientIDFlag, *oauthProviderGetClientJWTFlag)
			case "update-client":
				endpoint = c.UpdateClient()
				data, err = oauthproviderc.BuildUpdateClientPayload(*oauthProviderUpdateClientBodyFlag, *oauthProviderUpdateClientIDFlag, *oauthProviderUpdateClientJWTFlag)
			case "delete-client":
				endpoint = c.DeleteClient()
				data, err = oauthproviderc.BuildDeleteClientPayload(*oauthProviderDeleteClientIDFlag, *oauthProviderDeleteClientJWTFlag)
			case "rotate-client-secret":
				endpoint = c.RotateClientSecret()
				data, err = oauthproviderc.BuildRotateClientSecretPayload(*oauthProviderRotateClientSecretIDFlag, *oauthProviderRotateClientSecretJWTFlag)
			case "list-scopes":
				endpoint = c.ListScopes()
				data, err = oauthproviderc.BuildListScopesPayload(*oauthProviderListScopesOffsetFlag, *oauthProviderListScopesLimitFlag, *oauthProviderListScopesJWTFlag)
			case "create-scope":
				endpoint = c.CreateScope()
				data, err = oauthproviderc.BuildCreateScopePayload(*oauthProviderCreateScopeBodyFlag, *oauthProviderCreateScopeJWTFlag)
			case "get-scope":
				endpoint = c.GetScope()
				data, err = oauthproviderc.BuildGetScopePayload(*oauthProviderGetScopeIDFlag, *oauthProviderGetScopeJWTFlag)
			case "update-scope":
				endpoint = c.UpdateScope()
				data, err = oauthproviderc.BuildUpdateScopePayload(*oauthProviderUpdateScopeBodyFlag, *oauthProviderUpdateScopeIDFlag, *oauthProviderUpdateScopeJWTFlag)
			case "delete-scope":
				endpoint = c.DeleteScope()
				data, err = oauthproviderc.BuildDeleteScopePayload(*oauthProviderDeleteScopeIDFlag, *oauthProviderDeleteScopeJWTFlag)
			case "oidc-configuration":
				endpoint = c.OidcConfiguration()
			case "jwks":
				endpoint = c.Jwks()
			}
		case "organizations":
			c := organizationsc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "list":
				endpoint = c.List()
				data, err = organizationsc.BuildListPayload(*organizationsListOffsetFlag, *organizationsListLimitFlag, *organizationsListSearchFlag, *organizationsListJWTFlag)
			case "create":
				endpoint = c.Create()
				data, err = organizationsc.BuildCreatePayload(*organizationsCreateBodyFlag, *organizationsCreateJWTFlag)
			case "get":
				endpoint = c.Get()
				data, err = organizationsc.BuildGetPayload(*organizationsGetIDFlag, *organizationsGetJWTFlag)
			case "update":
				endpoint = c.Update()
				data, err = organizationsc.BuildUpdatePayload(*organizationsUpdateBodyFlag, *organizationsUpdateIDFlag, *organizationsUpdateJWTFlag)
			case "delete":
				endpoint = c.Delete()
				data, err = organizationsc.BuildDeletePayload(*organizationsDeleteIDFlag, *organizationsDeleteJWTFlag)
			case "list-members":
				endpoint = c.ListMembers()
				data, err = organizationsc.BuildListMembersPayload(*organizationsListMembersIDFlag, *organizationsListMembersOffsetFlag, *organizationsListMembersLimitFlag, *organizationsListMembersSearchFlag, *organizationsListMembersJWTFlag)
			case "add-member":
				endpoint = c.AddMember()
				data, err = organizationsc.BuildAddMemberPayload(*organizationsAddMemberBodyFlag, *organizationsAddMemberIDFlag, *organizationsAddMemberJWTFlag)
			case "update-member":
				endpoint = c.UpdateMember()
				data, err = organizationsc.BuildUpdateMemberPayload(*organizationsUpdateMemberBodyFlag, *organizationsUpdateMemberIDFlag, *organizationsUpdateMemberUserIDFlag, *organizationsUpdateMemberJWTFlag)
			case "remove-member":
				endpoint = c.RemoveMember()
				data, err = organizationsc.BuildRemoveMemberPayload(*organizationsRemoveMemberIDFlag, *organizationsRemoveMemberUserIDFlag, *organizationsRemoveMemberJWTFlag)
			case "list-features":
				endpoint = c.ListFeatures()
				data, err = organizationsc.BuildListFeaturesPayload(*organizationsListFeaturesIDFlag, *organizationsListFeaturesJWTFlag)
			case "enable-feature":
				endpoint = c.EnableFeature()
				data, err = organizationsc.BuildEnableFeaturePayload(*organizationsEnableFeatureBodyFlag, *organizationsEnableFeatureIDFlag, *organizationsEnableFeatureJWTFlag)
			case "disable-feature":
				endpoint = c.DisableFeature()
				data, err = organizationsc.BuildDisableFeaturePayload(*organizationsDisableFeatureIDFlag, *organizationsDisableFeatureFeatureKeyFlag, *organizationsDisableFeatureJWTFlag)
			}
		case "passkeys":
			c := passkeysc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "register-begin":
				endpoint = c.RegisterBegin()
				data, err = passkeysc.BuildRegisterBeginPayload(*passkeysRegisterBeginBodyFlag, *passkeysRegisterBeginJWTFlag)
			case "register-complete":
				endpoint = c.RegisterComplete()
				data, err = passkeysc.BuildRegisterCompletePayload(*passkeysRegisterCompleteBodyFlag, *passkeysRegisterCompleteJWTFlag)
			case "login-begin":
				endpoint = c.LoginBegin()
				data, err = passkeysc.BuildLoginBeginPayload(*passkeysLoginBeginOauth2Flag, *passkeysLoginBeginXAPIKeyFlag, *passkeysLoginBeginJWTFlag)
			case "login-complete":
				endpoint = c.LoginComplete()
				data, err = passkeysc.BuildLoginCompletePayload(*passkeysLoginCompleteBodyFlag, *passkeysLoginCompleteOauth2Flag, *passkeysLoginCompleteXAPIKeyFlag, *passkeysLoginCompleteJWTFlag)
			case "list":
				endpoint = c.List()
				data, err = passkeysc.BuildListPayload(*passkeysListJWTFlag)
			case "update":
				endpoint = c.Update()
				data, err = passkeysc.BuildUpdatePayload(*passkeysUpdateBodyFlag, *passkeysUpdateIDFlag, *passkeysUpdateJWTFlag)
			case "delete":
				endpoint = c.Delete()
				data, err = passkeysc.BuildDeletePayload(*passkeysDeleteIDFlag, *passkeysDeleteJWTFlag)
			}
		case "passwordless":
			c := passwordlessc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "email":
				endpoint = c.Email()
				data, err = passwordlessc.BuildEmailPayload(*passwordlessEmailBodyFlag, *passwordlessEmailOauth2Flag, *passwordlessEmailXAPIKeyFlag, *passwordlessEmailJWTFlag)
			case "sms":
				endpoint = c.Sms()
				data, err = passwordlessc.BuildSmsPayload(*passwordlessSmsBodyFlag, *passwordlessSmsOauth2Flag, *passwordlessSmsXAPIKeyFlag, *passwordlessSmsJWTFlag)
			case "verify":
				endpoint = c.Verify()
				data, err = passwordlessc.BuildVerifyPayload(*passwordlessVerifyBodyFlag, *passwordlessVerifyOauth2Flag, *passwordlessVerifyXAPIKeyFlag, *passwordlessVerifyJWTFlag)
			case "methods":
				endpoint = c.Methods()
				data, err = passwordlessc.BuildMethodsPayload(*passwordlessMethodsOauth2Flag, *passwordlessMethodsXAPIKeyFlag, *passwordlessMethodsJWTFlag)
			case "magic-link":
				endpoint = c.MagicLink()
				data, err = passwordlessc.BuildMagicLinkPayload(*passwordlessMagicLinkBodyFlag, *passwordlessMagicLinkJWTFlag)
			}
		case "rbac":
			c := rbacc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "list-permissions":
				endpoint = c.ListPermissions()
				data, err = rbacc.BuildListPermissionsPayload(*rbacListPermissionsOffsetFlag, *rbacListPermissionsLimitFlag, *rbacListPermissionsResourceFlag, *rbacListPermissionsActionFlag, *rbacListPermissionsSearchFlag, *rbacListPermissionsJWTFlag)
			case "create-permission":
				endpoint = c.CreatePermission()
				data, err = rbacc.BuildCreatePermissionPayload(*rbacCreatePermissionBodyFlag, *rbacCreatePermissionJWTFlag)
			case "get-permission":
				endpoint = c.GetPermission()
				data, err = rbacc.BuildGetPermissionPayload(*rbacGetPermissionIDFlag, *rbacGetPermissionJWTFlag)
			case "update-permission":
				endpoint = c.UpdatePermission()
				data, err = rbacc.BuildUpdatePermissionPayload(*rbacUpdatePermissionBodyFlag, *rbacUpdatePermissionIDFlag, *rbacUpdatePermissionJWTFlag)
			case "delete-permission":
				endpoint = c.DeletePermission()
				data, err = rbacc.BuildDeletePermissionPayload(*rbacDeletePermissionIDFlag, *rbacDeletePermissionJWTFlag)
			case "list-roles":
				endpoint = c.ListRoles()
				data, err = rbacc.BuildListRolesPayload(*rbacListRolesOffsetFlag, *rbacListRolesLimitFlag, *rbacListRolesOrganizationIDFlag, *rbacListRolesSearchFlag, *rbacListRolesJWTFlag)
			case "create-role":
				endpoint = c.CreateRole()
				data, err = rbacc.BuildCreateRolePayload(*rbacCreateRoleBodyFlag, *rbacCreateRoleJWTFlag)
			case "get-role":
				endpoint = c.GetRole()
				data, err = rbacc.BuildGetRolePayload(*rbacGetRoleIDFlag, *rbacGetRoleJWTFlag)
			case "update-role":
				endpoint = c.UpdateRole()
				data, err = rbacc.BuildUpdateRolePayload(*rbacUpdateRoleBodyFlag, *rbacUpdateRoleIDFlag, *rbacUpdateRoleJWTFlag)
			case "delete-role":
				endpoint = c.DeleteRole()
				data, err = rbacc.BuildDeleteRolePayload(*rbacDeleteRoleIDFlag, *rbacDeleteRoleJWTFlag)
			case "list-role-permissions":
				endpoint = c.ListRolePermissions()
				data, err = rbacc.BuildListRolePermissionsPayload(*rbacListRolePermissionsIDFlag, *rbacListRolePermissionsJWTFlag)
			case "add-role-permission":
				endpoint = c.AddRolePermission()
				data, err = rbacc.BuildAddRolePermissionPayload(*rbacAddRolePermissionBodyFlag, *rbacAddRolePermissionIDFlag, *rbacAddRolePermissionJWTFlag)
			case "remove-role-permission":
				endpoint = c.RemoveRolePermission()
				data, err = rbacc.BuildRemoveRolePermissionPayload(*rbacRemoveRolePermissionIDFlag, *rbacRemoveRolePermissionPermissionIDFlag, *rbacRemoveRolePermissionJWTFlag)
			case "check-permission":
				endpoint = c.CheckPermission()
				data, err = rbacc.BuildCheckPermissionPayload(*rbacCheckPermissionResourceFlag, *rbacCheckPermissionActionFlag, *rbacCheckPermissionJWTFlag)
			case "check-role":
				endpoint = c.CheckRole()
				data, err = rbacc.BuildCheckRolePayload(*rbacCheckRoleRoleFlag, *rbacCheckRoleOrganizationIDFlag, *rbacCheckRoleJWTFlag)
			}
		case "oauth-client":
			c := oauthclientc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "list-providers":
				endpoint = c.ListProviders()
				data, err = oauthclientc.BuildListProvidersPayload(*oauthClientListProvidersOauth2Flag, *oauthClientListProvidersXAPIKeyFlag, *oauthClientListProvidersJWTFlag)
			case "provider-auth":
				endpoint = c.ProviderAuth()
				data, err = oauthclientc.BuildProviderAuthPayload(*oauthClientProviderAuthProviderFlag, *oauthClientProviderAuthRedirectURIFlag, *oauthClientProviderAuthOauth2Flag, *oauthClientProviderAuthXAPIKeyFlag, *oauthClientProviderAuthJWTFlag)
			case "provider-callback":
				endpoint = c.ProviderCallback()
				data, err = oauthclientc.BuildProviderCallbackPayload(*oauthClientProviderCallbackProviderFlag, *oauthClientProviderCallbackCodeFlag, *oauthClientProviderCallbackStateFlag, *oauthClientProviderCallbackOauth2Flag, *oauthClientProviderCallbackXAPIKeyFlag, *oauthClientProviderCallbackJWTFlag)
			}
		case "sso":
			c := ssoc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "list-providers":
				endpoint = c.ListProviders()
				data, err = ssoc.BuildListProvidersPayload(*ssoListProvidersOrganizationIDFlag, *ssoListProvidersOauth2Flag, *ssoListProvidersXAPIKeyFlag, *ssoListProvidersJWTFlag)
			case "provider-auth":
				endpoint = c.ProviderAuth()
				data, err = ssoc.BuildProviderAuthPayload(*ssoProviderAuthProviderFlag, *ssoProviderAuthRedirectURIFlag, *ssoProviderAuthOauth2Flag, *ssoProviderAuthXAPIKeyFlag, *ssoProviderAuthJWTFlag)
			case "provider-callback":
				endpoint = c.ProviderCallback()
				data, err = ssoc.BuildProviderCallbackPayload(*ssoProviderCallbackProviderFlag, *ssoProviderCallbackCodeFlag, *ssoProviderCallbackStateFlag, *ssoProviderCallbackSAMLResponseFlag, *ssoProviderCallbackRelayStateFlag, *ssoProviderCallbackOauth2Flag, *ssoProviderCallbackXAPIKeyFlag, *ssoProviderCallbackJWTFlag)
			case "list-identity-providers":
				endpoint = c.ListIdentityProviders()
				data, err = ssoc.BuildListIdentityProvidersPayload(*ssoListIdentityProvidersOrganizationIDFlag, *ssoListIdentityProvidersJWTFlag)
			case "create-identity-provider":
				endpoint = c.CreateIdentityProvider()
				data, err = ssoc.BuildCreateIdentityProviderPayload(*ssoCreateIdentityProviderBodyFlag, *ssoCreateIdentityProviderJWTFlag)
			case "get-identity-provider":
				endpoint = c.GetIdentityProvider()
				data, err = ssoc.BuildGetIdentityProviderPayload(*ssoGetIdentityProviderIDFlag, *ssoGetIdentityProviderJWTFlag)
			case "update-identity-provider":
				endpoint = c.UpdateIdentityProvider()
				data, err = ssoc.BuildUpdateIdentityProviderPayload(*ssoUpdateIdentityProviderBodyFlag, *ssoUpdateIdentityProviderIDFlag, *ssoUpdateIdentityProviderJWTFlag)
			case "delete-identity-provider":
				endpoint = c.DeleteIdentityProvider()
				data, err = ssoc.BuildDeleteIdentityProviderPayload(*ssoDeleteIdentityProviderIDFlag, *ssoDeleteIdentityProviderJWTFlag)
			case "saml-metadata":
				endpoint = c.SamlMetadata()
				data, err = ssoc.BuildSamlMetadataPayload(*ssoSamlMetadataIDFlag)
			case "saml-acs":
				endpoint = c.SamlAcs()
				data, err = ssoc.BuildSamlAcsPayload(*ssoSamlAcsIDFlag)
			}
		case "users":
			c := usersc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "list":
				endpoint = c.List()
				data, err = usersc.BuildListPayload(*usersListOffsetFlag, *usersListLimitFlag, *usersListSearchFlag, *usersListOrganizationIDFlag, *usersListJWTFlag)
			case "create":
				endpoint = c.Create()
				data, err = usersc.BuildCreatePayload(*usersCreateBodyFlag, *usersCreateJWTFlag)
			case "get":
				endpoint = c.Get()
				data, err = usersc.BuildGetPayload(*usersGetIDFlag, *usersGetJWTFlag)
			case "update":
				endpoint = c.Update()
				data, err = usersc.BuildUpdatePayload(*usersUpdateBodyFlag, *usersUpdateIDFlag, *usersUpdateJWTFlag)
			case "delete":
				endpoint = c.Delete()
				data, err = usersc.BuildDeletePayload(*usersDeleteIDFlag, *usersDeleteJWTFlag)
			case "update-me":
				endpoint = c.UpdateMe()
				data, err = usersc.BuildUpdateMePayload(*usersUpdateMeBodyFlag, *usersUpdateMeJWTFlag)
			case "update-password":
				endpoint = c.UpdatePassword()
				data, err = usersc.BuildUpdatePasswordPayload(*usersUpdatePasswordBodyFlag, *usersUpdatePasswordJWTFlag)
			case "get-sessions":
				endpoint = c.GetSessions()
				data, err = usersc.BuildGetSessionsPayload(*usersGetSessionsJWTFlag)
			case "delete-session":
				endpoint = c.DeleteSession()
				data, err = usersc.BuildDeleteSessionPayload(*usersDeleteSessionSessionIDFlag, *usersDeleteSessionJWTFlag)
			case "get-organizations":
				endpoint = c.GetOrganizations()
				data, err = usersc.BuildGetOrganizationsPayload(*usersGetOrganizationsIDFlag, *usersGetOrganizationsJWTFlag)
			}
		case "webhooks":
			c := webhooksc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "list":
				endpoint = c.List()
				data, err = webhooksc.BuildListPayload(*webhooksListOffsetFlag, *webhooksListLimitFlag, *webhooksListOrganizationIDFlag, *webhooksListEventTypesFlag, *webhooksListJWTFlag)
			case "create":
				endpoint = c.Create()
				data, err = webhooksc.BuildCreatePayload(*webhooksCreateBodyFlag, *webhooksCreateJWTFlag)
			case "get":
				endpoint = c.Get()
				data, err = webhooksc.BuildGetPayload(*webhooksGetIDFlag, *webhooksGetJWTFlag)
			case "update":
				endpoint = c.Update()
				data, err = webhooksc.BuildUpdatePayload(*webhooksUpdateBodyFlag, *webhooksUpdateIDFlag, *webhooksUpdateJWTFlag)
			case "delete":
				endpoint = c.Delete()
				data, err = webhooksc.BuildDeletePayload(*webhooksDeleteIDFlag, *webhooksDeleteJWTFlag)
			case "trigger-event":
				endpoint = c.TriggerEvent()
				data, err = webhooksc.BuildTriggerEventPayload(*webhooksTriggerEventBodyFlag, *webhooksTriggerEventJWTFlag)
			case "list-events":
				endpoint = c.ListEvents()
				data, err = webhooksc.BuildListEventsPayload(*webhooksListEventsIDFlag, *webhooksListEventsOffsetFlag, *webhooksListEventsLimitFlag, *webhooksListEventsEventTypeFlag, *webhooksListEventsDeliveredFlag, *webhooksListEventsJWTFlag)
			case "replay-event":
				endpoint = c.ReplayEvent()
				data, err = webhooksc.BuildReplayEventPayload(*webhooksReplayEventIDFlag, *webhooksReplayEventEventIDFlag, *webhooksReplayEventJWTFlag)
			case "receive":
				endpoint = c.Receive()
				data, err = webhooksc.BuildReceivePayload(*webhooksReceiveIDFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// apiKeysUsage displays the usage of the api-keys command and its subcommands.
func apiKeysUsage() {
	fmt.Fprintf(os.Stderr, `API key management service
Usage:
    %[1]s [globalflags] api-keys COMMAND [flags]

COMMAND:
    list: List API keys
    create: Create a new API key
    get: Get API key by ID
    update: Update API key
    delete: Delete API key
    validate: Validate API key

Additional help:
    %[1]s api-keys COMMAND --help
`, os.Args[0])
}
func apiKeysListUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] api-keys list -offset INT -limit INT -type STRING -organization-id STRING -jwt STRING

List API keys
    -offset INT: 
    -limit INT: 
    -type STRING: 
    -organization-id STRING: 
    -jwt STRING: 

Example:
    %[1]s api-keys list --offset 472954788832968048 --limit 53 --type "server" --organization-id "Dolorem reiciendis." --jwt "Dicta magnam omnis optio neque."
`, os.Args[0])
}

func apiKeysCreateUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] api-keys create -body JSON -jwt STRING

Create a new API key
    -body JSON: 
    -jwt STRING: 

Example:
    %[1]s api-keys create --body '{
      "key": {
         "expires_in": 2592000,
         "metadata": {
            "Voluptatum sint.": "Hic quasi dolores iure dolorem iusto."
         },
         "name": "My API Key",
         "permissions": [
            "read:users",
            "write:organizations"
         ],
         "scopes": [
            "api:access"
         ],
         "type": "server"
      }
   }' --jwt "Consequuntur beatae dolorem voluptas molestias."
`, os.Args[0])
}

func apiKeysGetUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] api-keys get -id STRING -jwt STRING

Get API key by ID
    -id STRING: API key ID
    -jwt STRING: 

Example:
    %[1]s api-keys get --id "Non provident est consequuntur." --jwt "Quis sed soluta temporibus necessitatibus labore."
`, os.Args[0])
}

func apiKeysUpdateUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] api-keys update -body JSON -id STRING -jwt STRING

Update API key
    -body JSON: 
    -id STRING: API key ID
    -jwt STRING: 

Example:
    %[1]s api-keys update --body '{
      "key": {
         "active": true,
         "expires_at": "At sit consequatur quia recusandae fugit.",
         "metadata": {
            "Animi consequatur consequatur rerum fugit.": "Cum modi neque quis necessitatibus repudiandae.",
            "Odio provident quibusdam.": "Consectetur at."
         },
         "name": "Esse velit eum.",
         "permissions": [
            "Quis reiciendis quo cupiditate quos dolores ratione.",
            "Autem neque quo facere velit neque."
         ],
         "scopes": [
            "Modi qui doloribus est et non.",
            "Eius eius ut quia est."
         ]
      }
   }' --id "Et ipsa sed et voluptas." --jwt "Porro ut vero voluptate nisi."
`, os.Args[0])
}

func apiKeysDeleteUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] api-keys delete -id STRING -jwt STRING

Delete API key
    -id STRING: API key ID
    -jwt STRING: 

Example:
    %[1]s api-keys delete --id "Quis omnis vero optio." --jwt "Et blanditiis a eos consequatur."
`, os.Args[0])
}

func apiKeysValidateUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] api-keys validate -api-key STRING

Validate API key
    -api-key STRING: 

Example:
    %[1]s api-keys validate --api-key "sk_12345678901234567890"
`, os.Args[0])
}

// emailUsage displays the usage of the email command and its subcommands.
func emailUsage() {
	fmt.Fprintf(os.Stderr, `Email template management and sending service
Usage:
    %[1]s [globalflags] email COMMAND [flags]

COMMAND:
    list-templates: List email templates
    create-template: Create a new email template
    get-template: Get email template by ID
    get-template-by-type: Get email template by type
    update-template: Update email template
    delete-template: Delete email template
    send: Send email
    send-template: Send email using a template

Additional help:
    %[1]s email COMMAND --help
`, os.Args[0])
}
func emailListTemplatesUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] email list-templates -offset INT -limit INT -type STRING -organization-id STRING -locale STRING -jwt STRING

List email templates
    -offset INT: 
    -limit INT: 
    -type STRING: 
    -organization-id STRING: 
    -locale STRING: 
    -jwt STRING: 

Example:
    %[1]s email list-templates --offset 1602222333640799663 --limit 72 --type "Culpa dolores pariatur." --organization-id "Qui voluptate esse repellat." --locale "Id ea sit omnis incidunt maxime eum." --jwt "Aut molestiae aperiam dolore veniam."
`, os.Args[0])
}

func emailCreateTemplateUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] email create-template -body JSON -jwt STRING

Create a new email template
    -body JSON: 
    -jwt STRING: 

Example:
    %[1]s email create-template --body '{
      "active": true,
      "html_content": "\u003chtml\u003e\u003cbody\u003e\u003ch1\u003eWelcome!\u003c/h1\u003e\u003cp\u003eHello {{name}}\u003c/p\u003e\u003c/body\u003e\u003c/html\u003e",
      "locale": "Deserunt autem sit tempora temporibus provident hic.",
      "metadata": {
         "Dicta dignissimos eum est.": "Recusandae quam."
      },
      "name": "Welcome Email",
      "organization_id": "Possimus quasi dignissimos ad quisquam et repellat.",
      "subject": "Welcome to our platform",
      "system": false,
      "text_content": "Welcome! Hello {{name}}",
      "type": "welcome"
   }' --jwt "Deserunt inventore."
`, os.Args[0])
}

func emailGetTemplateUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] email get-template -id STRING -jwt STRING

Get email template by ID
    -id STRING: Template ID
    -jwt STRING: 

Example:
    %[1]s email get-template --id "Placeat omnis ex consequuntur quis." --jwt "Quas et et adipisci perferendis dolore beatae."
`, os.Args[0])
}

func emailGetTemplateByTypeUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] email get-template-by-type -type STRING -organization-id STRING -locale STRING -jwt STRING

Get email template by type
    -type STRING: Template type
    -organization-id STRING: 
    -locale STRING: 
    -jwt STRING: 

Example:
    %[1]s email get-template-by-type --type "Saepe et atque sed eaque doloremque quos." --organization-id "Officia sapiente at est." --locale "Quod voluptas quidem odio ut libero." --jwt "Repellat excepturi molestiae minima est."
`, os.Args[0])
}

func emailUpdateTemplateUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] email update-template -body JSON -id STRING -jwt STRING

Update email template
    -body JSON: 
    -id STRING: Template ID
    -jwt STRING: 

Example:
    %[1]s email update-template --body '{
      "template": {
         "active": true,
         "html_content": "Placeat temporibus molestiae.",
         "locale": "Cumque labore delectus dolores.",
         "metadata": {
            "Laudantium magnam corporis iusto.": "Et numquam quas praesentium officiis nihil."
         },
         "name": "Aliquam at aut perferendis et.",
         "subject": "Nisi quo.",
         "text_content": "Enim mollitia labore repellendus."
      }
   }' --id "Maiores incidunt hic corporis officiis excepturi." --jwt "Dolores necessitatibus eum voluptates eaque fugiat."
`, os.Args[0])
}

func emailDeleteTemplateUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] email delete-template -id STRING -jwt STRING

Delete email template
    -id STRING: Template ID
    -jwt STRING: 

Example:
    %[1]s email delete-template --id "Et magnam voluptas eligendi nam ipsa ut." --jwt "Facilis sequi."
`, os.Args[0])
}

func emailSendUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] email send -body JSON -jwt STRING

Send email
    -body JSON: 
    -jwt STRING: 

Example:
    %[1]s email send --body '{
      "bcc": [
         "Sunt temporibus similique omnis aperiam.",
         "Voluptatem consequatur facilis pariatur aperiam adipisci error.",
         "Sed consequatur est adipisci veritatis.",
         "Eos itaque."
      ],
      "cc": [
         "Mollitia dignissimos ab qui.",
         "Doloribus nulla ut qui sit qui.",
         "Unde unde aspernatur."
      ],
      "from": "no-reply@example.com",
      "headers": {
         "Qui facere.": "Odio quo iure quia ut."
      },
      "html_content": "Porro aut est adipisci in in consequuntur.",
      "metadata": {
         "Deleniti est ipsum molestiae.": "Ut dolore illum.",
         "Rem aut dolores delectus praesentium nobis consectetur.": "Est sint ad quam sapiente dolorem reiciendis."
      },
      "reply_to": "Minus nisi.",
      "subject": "Important information",
      "text_content": "Architecto culpa dignissimos enim reprehenderit perspiciatis.",
      "to": [
         "user@example.com"
      ]
   }' --jwt "Pariatur aliquid."
`, os.Args[0])
}

func emailSendTemplateUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] email send-template -body JSON -jwt STRING

Send email using a template
    -body JSON: 
    -jwt STRING: 

Example:
    %[1]s email send-template --body '{
      "bcc": [
         "Est maiores quis nihil harum.",
         "Illo in similique."
      ],
      "cc": [
         "Velit ut.",
         "Ipsa eos neque tempore magnam odio.",
         "Est sit.",
         "Est possimus animi vel."
      ],
      "from": "no-reply@example.com",
      "headers": {
         "Quis ut sunt.": "Non debitis veniam nihil."
      },
      "locale": "Provident libero est provident consequatur est aliquid.",
      "metadata": {
         "Excepturi assumenda eos fugit quisquam voluptatem.": "Blanditiis et placeat quis minus voluptates suscipit.",
         "Rerum animi veritatis provident dolore.": "Laborum in aperiam."
      },
      "organization_id": "Occaecati qui qui.",
      "reply_to": "Voluptate voluptate delectus fuga esse deserunt est.",
      "subject": "Iste similique voluptatem magnam iste.",
      "template_data": {
         "name": "John Doe"
      },
      "template_type": "welcome",
      "to": [
         "user@example.com"
      ]
   }' --jwt "Molestias non."
`, os.Args[0])
}

// adminUsage displays the usage of the admin command and its subcommands.
func adminUsage() {
	fmt.Fprintf(os.Stderr, `Service is the admin service interface.
Usage:
    %[1]s [globalflags] admin COMMAND [flags]

COMMAND:
    home: Render the home page

Additional help:
    %[1]s admin COMMAND --help
`, os.Args[0])
}
func adminHomeUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] admin home

Render the home page

Example:
    %[1]s admin home
`, os.Args[0])
}

// webUsage displays the usage of the web command and its subcommands.
func webUsage() {
	fmt.Fprintf(os.Stderr, `Front-end web service with template rendering
Usage:
    %[1]s [globalflags] web COMMAND [flags]

COMMAND:
    home: Render the home page

Additional help:
    %[1]s web COMMAND --help
`, os.Args[0])
}
func webHomeUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] web home

Render the home page

Example:
    %[1]s web home
`, os.Args[0])
}

// healthUsage displays the usage of the health command and its subcommands.
func healthUsage() {
	fmt.Fprintf(os.Stderr, `Health check service for monitoring system status
Usage:
    %[1]s [globalflags] health COMMAND [flags]

COMMAND:
    check: Check system health
    ready: Check if the system is ready to receive traffic
    version: Get system version information
    metrics: Get system metrics
    debug: Debug information (only available in development mode)

Additional help:
    %[1]s health COMMAND --help
`, os.Args[0])
}
func healthCheckUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] health check

Check system health

Example:
    %[1]s health check
`, os.Args[0])
}

func healthReadyUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] health ready

Check if the system is ready to receive traffic

Example:
    %[1]s health ready
`, os.Args[0])
}

func healthVersionUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] health version

Get system version information

Example:
    %[1]s health version
`, os.Args[0])
}

func healthMetricsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] health metrics

Get system metrics

Example:
    %[1]s health metrics
`, os.Args[0])
}

func healthDebugUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] health debug

Debug information (only available in development mode)

Example:
    %[1]s health debug
`, os.Args[0])
}

// authUsage displays the usage of the auth command and its subcommands.
func authUsage() {
	fmt.Fprintf(os.Stderr, `Authentication service
Usage:
    %[1]s [globalflags] auth COMMAND [flags]

COMMAND:
    login: Authenticate user with email and password
    register: Register a new user
    logout: Log out the current user
    refresh-token: Refresh an access token
    forgot-password: Initiate password reset process
    reset-password: Reset password using token
    verify-email: Verify email using token
    me: Get current user info
    csrf: Generates a CSRF token

Additional help:
    %[1]s auth COMMAND --help
`, os.Args[0])
}
func authLoginUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] auth login -body JSON -session-id STRING

Authenticate user with email and password
    -body JSON: 
    -session-id STRING: 

Example:
    %[1]s auth login --body '{
      "captcha_response": "Sit totam.",
      "email": "user@example.com",
      "organization_id": "Nemo porro.",
      "password": "secure-password",
      "remember_me": true
   }' --session-id "Perspiciatis nam vero tempore placeat."
`, os.Args[0])
}

func authRegisterUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] auth register -body JSON -session-id STRING

Register a new user
    -body JSON: 
    -session-id STRING: 

Example:
    %[1]s auth register --body '{
      "email": "user@example.com",
      "first_name": "Natus necessitatibus ut.",
      "last_name": "Temporibus assumenda.",
      "metadata": {
         "Eligendi doloribus neque non porro.": "Aut et eligendi laudantium.",
         "Et repellat praesentium omnis.": "Numquam blanditiis atque et voluptatibus non beatae."
      },
      "organization_id": "Quos facilis.",
      "password": "secure-password"
   }' --session-id "Ut est aut voluptatem eos id itaque."
`, os.Args[0])
}

func authLogoutUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] auth logout -jwt STRING -session-id STRING

Log out the current user
    -jwt STRING: 
    -session-id STRING: 

Example:
    %[1]s auth logout --jwt "Consequuntur quia." --session-id "Sint eum fugit est ut."
`, os.Args[0])
}

func authRefreshTokenUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] auth refresh-token -body JSON -oauth2 STRING -xapi-key STRING -jwt STRING -session-id STRING

Refresh an access token
    -body JSON: 
    -oauth2 STRING: 
    -xapi-key STRING: 
    -jwt STRING: 
    -session-id STRING: 

Example:
    %[1]s auth refresh-token --body '{
      "refresh_token": "Ducimus est deserunt."
   }' --oauth2 "Qui eum vel id." --xapi-key "Itaque quae saepe aut." --jwt "Blanditiis ratione fugiat." --session-id "Ut tempora autem animi."
`, os.Args[0])
}

func authForgotPasswordUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] auth forgot-password -body JSON -redirect-url STRING -oauth2 STRING -xapi-key STRING -jwt STRING -session-id STRING

Initiate password reset process
    -body JSON: 
    -redirect-url STRING: 
    -oauth2 STRING: 
    -xapi-key STRING: 
    -jwt STRING: 
    -session-id STRING: 

Example:
    %[1]s auth forgot-password --body '{
      "email": "user@example.com"
   }' --redirect-url "Magnam ut neque fugiat a nobis." --oauth2 "Itaque ab." --xapi-key "Ut sed." --jwt "Omnis doloribus." --session-id "Nostrum aliquam minus sunt."
`, os.Args[0])
}

func authResetPasswordUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] auth reset-password -body JSON -session-id STRING

Reset password using token
    -body JSON: 
    -session-id STRING: 

Example:
    %[1]s auth reset-password --body '{
      "new_password": "new-secure-password",
      "token": "Ut vero dolore ullam placeat."
   }' --session-id "Et similique."
`, os.Args[0])
}

func authVerifyEmailUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] auth verify-email -body JSON -session-id STRING

Verify email using token
    -body JSON: 
    -session-id STRING: 

Example:
    %[1]s auth verify-email --body '{
      "token": "Quia et beatae."
   }' --session-id "In aut hic."
`, os.Args[0])
}

func authMeUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] auth me -jwt STRING -session-id STRING

Get current user info
    -jwt STRING: 
    -session-id STRING: 

Example:
    %[1]s auth me --jwt "Voluptates incidunt." --session-id "Repudiandae illo optio."
`, os.Args[0])
}

func authCsrfUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] auth csrf -session-id STRING

Generates a CSRF token
    -session-id STRING: 

Example:
    %[1]s auth csrf --session-id "Eveniet fugit."
`, os.Args[0])
}

// mfaUsage displays the usage of the mfa command and its subcommands.
func mfaUsage() {
	fmt.Fprintf(os.Stderr, `Multi-Factor Authentication service
Usage:
    %[1]s [globalflags] mfa COMMAND [flags]

COMMAND:
    enroll: Start MFA enrollment
    verify: Verify MFA code
    unenroll: Disable MFA method
    methods: Get enabled MFA methods
    send-code: Send verification code

Additional help:
    %[1]s mfa COMMAND --help
`, os.Args[0])
}
func mfaEnrollUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] mfa enroll -body JSON -jwt STRING

Start MFA enrollment
    -body JSON: 
    -jwt STRING: 

Example:
    %[1]s mfa enroll --body '{
      "request": {
         "email": "charley_kilback@conn.name",
         "method": "totp",
         "phone_number": "Et corporis."
      }
   }' --jwt "Non molestiae maiores."
`, os.Args[0])
}

func mfaVerifyUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] mfa verify -body JSON -jwt STRING

Verify MFA code
    -body JSON: 
    -jwt STRING: 

Example:
    %[1]s mfa verify --body '{
      "request": {
         "code": "123456",
         "method": "totp",
         "phone_number": "Quo similique qui facilis facilis."
      }
   }' --jwt "Qui fugiat eveniet commodi et voluptates illo."
`, os.Args[0])
}

func mfaUnenrollUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] mfa unenroll -body JSON -jwt STRING

Disable MFA method
    -body JSON: 
    -jwt STRING: 

Example:
    %[1]s mfa unenroll --body '{
      "request": {
         "method": "totp"
      }
   }' --jwt "Et ducimus nobis."
`, os.Args[0])
}

func mfaMethodsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] mfa methods -jwt STRING

Get enabled MFA methods
    -jwt STRING: 

Example:
    %[1]s mfa methods --jwt "Maiores cumque nihil sint et."
`, os.Args[0])
}

func mfaSendCodeUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] mfa send-code -body JSON -jwt STRING

Send verification code
    -body JSON: 
    -jwt STRING: 

Example:
    %[1]s mfa send-code --body '{
      "request": {
         "method": "sms"
      }
   }' --jwt "Quas quibusdam dolorem."
`, os.Args[0])
}

// oauthProviderUsage displays the usage of the oauth-provider command and its
// subcommands.
func oauthProviderUsage() {
	fmt.Fprintf(os.Stderr, `OAuth2 provider service
Usage:
    %[1]s [globalflags] oauth-provider COMMAND [flags]

COMMAND:
    authorize: OAuth2 authorization endpoint
    token: OAuth2 token endpoint
    introspect: OAuth2 token introspection endpoint
    revoke: OAuth2 token revocation endpoint
    consent: Handle user consent for OAuth authorization
    userinfo: OAuth2 UserInfo endpoint for OpenID Connect
    list-clients: List OAuth clients
    create-client: Create a new OAuth client
    get-client: Get OAuth client by ID
    update-client: Update OAuth client
    delete-client: Delete OAuth client
    rotate-client-secret: Rotate OAuth client secret
    list-scopes: List OAuth scopes
    create-scope: Create a new OAuth scope
    get-scope: Get OAuth scope by ID
    update-scope: Update OAuth scope
    delete-scope: Delete OAuth scope
    oidc-configuration: OpenID Connect discovery configuration
    jwks: JSON Web Key Set

Additional help:
    %[1]s oauth-provider COMMAND --help
`, os.Args[0])
}
func oauthProviderAuthorizeUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] oauth-provider authorize -client-id STRING -response-type STRING -redirect-uri STRING -scope STRING -state STRING -code-challenge STRING -code-challenge-method STRING -oauth2 STRING -xapi-key STRING -jwt STRING

OAuth2 authorization endpoint
    -client-id STRING: 
    -response-type STRING: 
    -redirect-uri STRING: 
    -scope STRING: 
    -state STRING: 
    -code-challenge STRING: 
    -code-challenge-method STRING: 
    -oauth2 STRING: 
    -xapi-key STRING: 
    -jwt STRING: 

Example:
    %[1]s oauth-provider authorize --client-id "In a." --response-type "Illo consectetur qui provident at eaque et." --redirect-uri "Dolorem expedita ea recusandae aut fugit." --scope "Blanditiis et exercitationem voluptas quia sint." --state "Aut qui sint reprehenderit consequatur neque aut." --code-challenge "Expedita nisi amet." --code-challenge-method "Ut enim est praesentium ea soluta voluptas." --oauth2 "Quia libero accusantium." --xapi-key "Enim itaque." --jwt "Qui aperiam commodi itaque."
`, os.Args[0])
}

func oauthProviderTokenUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] oauth-provider token -grant-type STRING -code STRING -redirect-uri STRING -client-id STRING -client-secret STRING -refresh-token STRING -code-verifier STRING -username STRING -password STRING -scope STRING -oauth2 STRING -xapi-key STRING -jwt STRING

OAuth2 token endpoint
    -grant-type STRING: 
    -code STRING: 
    -redirect-uri STRING: 
    -client-id STRING: 
    -client-secret STRING: 
    -refresh-token STRING: 
    -code-verifier STRING: 
    -username STRING: 
    -password STRING: 
    -scope STRING: 
    -oauth2 STRING: 
    -xapi-key STRING: 
    -jwt STRING: 

Example:
    %[1]s oauth-provider token --grant-type "Laboriosam iusto voluptatem ut." --code "Et eaque molestiae." --redirect-uri "Sit ea aut eos." --client-id "Est atque ullam laboriosam et harum autem." --client-secret "Ducimus pariatur sunt explicabo odit." --refresh-token "Incidunt perspiciatis rerum iusto eius et." --code-verifier "Ut nam ducimus." --username "Voluptatem non explicabo molestiae." --password "Beatae et consequatur aliquam deleniti labore ratione." --scope "Earum est tempora id blanditiis." --oauth2 "Sunt aperiam ipsam voluptas harum delectus voluptatem." --xapi-key "Atque nulla ducimus sint sit eum." --jwt "Neque vel et voluptate omnis sed ea."
`, os.Args[0])
}

func oauthProviderIntrospectUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] oauth-provider introspect -token STRING -token-type-hint STRING -oauth2 STRING -xapi-key STRING -jwt STRING

OAuth2 token introspection endpoint
    -token STRING: 
    -token-type-hint STRING: 
    -oauth2 STRING: 
    -xapi-key STRING: 
    -jwt STRING: 

Example:
    %[1]s oauth-provider introspect --token "Recusandae veritatis sit perferendis aut." --token-type-hint "Dolores dolor dolor sint nesciunt itaque." --oauth2 "In et id quo fuga." --xapi-key "Cum pariatur debitis voluptate placeat." --jwt "Perferendis corrupti commodi totam."
`, os.Args[0])
}

func oauthProviderRevokeUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] oauth-provider revoke -token STRING -token-type-hint STRING -client-id STRING -client-secret STRING -oauth2 STRING -xapi-key STRING -jwt STRING

OAuth2 token revocation endpoint
    -token STRING: 
    -token-type-hint STRING: 
    -client-id STRING: 
    -client-secret STRING: 
    -oauth2 STRING: 
    -xapi-key STRING: 
    -jwt STRING: 

Example:
    %[1]s oauth-provider revoke --token "In ratione quo." --token-type-hint "Laboriosam doloremque sed soluta quia." --client-id "Corrupti occaecati." --client-secret "Iste omnis iure commodi dolores." --oauth2 "Eum consectetur sit quasi." --xapi-key "Maiores omnis et ullam sunt." --jwt "Ut quam."
`, os.Args[0])
}

func oauthProviderConsentUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] oauth-provider consent -body JSON -jwt STRING

Handle user consent for OAuth authorization
    -body JSON: 
    -jwt STRING: 

Example:
    %[1]s oauth-provider consent --body '{
      "approved": true,
      "client_id": "Illum ut incidunt ad nisi.",
      "redirect_uri": "Necessitatibus rem ipsum corrupti non.",
      "scope": "Quaerat aut quibusdam sint inventore sit et.",
      "state": "Et et voluptatem id quis esse."
   }' --jwt "Repellat ut quisquam."
`, os.Args[0])
}

func oauthProviderUserinfoUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] oauth-provider userinfo -jwt STRING

OAuth2 UserInfo endpoint for OpenID Connect
    -jwt STRING: 

Example:
    %[1]s oauth-provider userinfo --jwt "Quisquam ipsum doloribus commodi dolor fuga."
`, os.Args[0])
}

func oauthProviderListClientsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] oauth-provider list-clients -offset INT -limit INT -organization-id STRING -jwt STRING

List OAuth clients
    -offset INT: 
    -limit INT: 
    -organization-id STRING: 
    -jwt STRING: 

Example:
    %[1]s oauth-provider list-clients --offset 8985451660166130945 --limit 29 --organization-id "Laborum quae." --jwt "Eum deserunt ab pariatur sed."
`, os.Args[0])
}

func oauthProviderCreateClientUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] oauth-provider create-client -body JSON -jwt STRING

Create a new OAuth client
    -body JSON: 
    -jwt STRING: 

Example:
    %[1]s oauth-provider create-client --body '{
      "allowed_cors_origins": [
         "Tenetur voluptatum.",
         "Mollitia blanditiis officiis et."
      ],
      "allowed_grant_types": [
         "authorization_code",
         "refresh_token"
      ],
      "client_description": "Minima modi at.",
      "client_name": "My App",
      "client_uri": "Quidem distinctio.",
      "logo_uri": "Neque dolores sunt.",
      "post_logout_redirect_uris": [
         "Voluptas quis esse dolore debitis ut.",
         "Neque amet aperiam est facilis aut.",
         "Non aliquam aut cumque."
      ],
      "public": false,
      "redirect_uris": [
         "https://example.com/callback"
      ],
      "refresh_token_expiry_seconds": 4001001572160955929,
      "requires_consent": false,
      "requires_pkce": false,
      "token_expiry_seconds": 9014495349532722531
   }' --jwt "Excepturi veritatis similique quo accusamus illo."
`, os.Args[0])
}

func oauthProviderGetClientUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] oauth-provider get-client -id STRING -jwt STRING

Get OAuth client by ID
    -id STRING: Client ID
    -jwt STRING: 

Example:
    %[1]s oauth-provider get-client --id "Qui est tempore rerum." --jwt "Harum ex nisi voluptas vel vitae."
`, os.Args[0])
}

func oauthProviderUpdateClientUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] oauth-provider update-client -body JSON -id STRING -jwt STRING

Update OAuth client
    -body JSON: 
    -id STRING: Client ID
    -jwt STRING: 

Example:
    %[1]s oauth-provider update-client --body '{
      "client": {
         "active": true,
         "allowed_cors_origins": [
            "Deserunt qui.",
            "Et ut sed quia.",
            "Et non in molestias vel eius.",
            "Nulla deleniti quos nemo enim officiis."
         ],
         "allowed_grant_types": [
            "Laboriosam voluptatem autem occaecati.",
            "Rerum eligendi.",
            "Repellendus ut distinctio dolorem dolorem expedita."
         ],
         "client_description": "Voluptate consectetur esse cumque unde dolores aut.",
         "client_name": "Dolores provident distinctio necessitatibus ad.",
         "client_uri": "Quas aut cumque ut soluta.",
         "logo_uri": "Sint ut quam voluptatem non doloremque ea.",
         "post_logout_redirect_uris": [
            "Sit corporis sit et.",
            "Architecto sint numquam optio iure libero."
         ],
         "public": true,
         "redirect_uris": [
            "Consequatur sed vitae voluptas.",
            "Est quisquam et.",
            "Ea nam delectus et et voluptate."
         ],
         "refresh_token_expiry_seconds": 4508906503971654763,
         "requires_consent": true,
         "requires_pkce": false,
         "token_expiry_seconds": 1858255373586154130
      }
   }' --id "Quisquam et consequatur autem id." --jwt "Totam voluptatem magni sed cumque culpa."
`, os.Args[0])
}

func oauthProviderDeleteClientUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] oauth-provider delete-client -id STRING -jwt STRING

Delete OAuth client
    -id STRING: Client ID
    -jwt STRING: 

Example:
    %[1]s oauth-provider delete-client --id "Accusantium doloribus sint architecto." --jwt "Aut distinctio ea."
`, os.Args[0])
}

func oauthProviderRotateClientSecretUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] oauth-provider rotate-client-secret -id STRING -jwt STRING

Rotate OAuth client secret
    -id STRING: Client ID
    -jwt STRING: 

Example:
    %[1]s oauth-provider rotate-client-secret --id "Voluptates iusto quo rem." --jwt "Quia voluptas doloremque optio voluptas est."
`, os.Args[0])
}

func oauthProviderListScopesUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] oauth-provider list-scopes -offset INT -limit INT -jwt STRING

List OAuth scopes
    -offset INT: 
    -limit INT: 
    -jwt STRING: 

Example:
    %[1]s oauth-provider list-scopes --offset 3907052975049985794 --limit 19 --jwt "Totam doloremque enim ad minima."
`, os.Args[0])
}

func oauthProviderCreateScopeUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] oauth-provider create-scope -body JSON -jwt STRING

Create a new OAuth scope
    -body JSON: 
    -jwt STRING: 

Example:
    %[1]s oauth-provider create-scope --body '{
      "default_scope": true,
      "description": "Read user information",
      "name": "read:users",
      "public": false
   }' --jwt "Iure repellendus."
`, os.Args[0])
}

func oauthProviderGetScopeUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] oauth-provider get-scope -id STRING -jwt STRING

Get OAuth scope by ID
    -id STRING: Scope ID
    -jwt STRING: 

Example:
    %[1]s oauth-provider get-scope --id "Aliquam ipsum sint eum laboriosam." --jwt "Reprehenderit sapiente placeat ea fuga."
`, os.Args[0])
}

func oauthProviderUpdateScopeUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] oauth-provider update-scope -body JSON -id STRING -jwt STRING

Update OAuth scope
    -body JSON: 
    -id STRING: Scope ID
    -jwt STRING: 

Example:
    %[1]s oauth-provider update-scope --body '{
      "default_scope": true,
      "description": "Amet placeat libero reprehenderit illo aut.",
      "public": false
   }' --id "Nostrum enim nam." --jwt "Dicta ea aut quia quidem omnis."
`, os.Args[0])
}

func oauthProviderDeleteScopeUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] oauth-provider delete-scope -id STRING -jwt STRING

Delete OAuth scope
    -id STRING: Scope ID
    -jwt STRING: 

Example:
    %[1]s oauth-provider delete-scope --id "A est aut consequatur." --jwt "In velit."
`, os.Args[0])
}

func oauthProviderOidcConfigurationUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] oauth-provider oidc-configuration

OpenID Connect discovery configuration

Example:
    %[1]s oauth-provider oidc-configuration
`, os.Args[0])
}

func oauthProviderJwksUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] oauth-provider jwks

JSON Web Key Set

Example:
    %[1]s oauth-provider jwks
`, os.Args[0])
}

// organizationsUsage displays the usage of the organizations command and its
// subcommands.
func organizationsUsage() {
	fmt.Fprintf(os.Stderr, `Organization management service
Usage:
    %[1]s [globalflags] organizations COMMAND [flags]

COMMAND:
    list: List organizations
    create: Create a new organization
    get: Get organization by ID
    update: Update organization
    delete: Delete organization
    list-members: List organization members
    add-member: Add member to organization
    update-member: Update organization member
    remove-member: Remove member from organization
    list-features: List organization features
    enable-feature: Enable a feature for an organization
    disable-feature: Disable a feature for an organization

Additional help:
    %[1]s organizations COMMAND --help
`, os.Args[0])
}
func organizationsListUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] organizations list -offset INT -limit INT -search STRING -jwt STRING

List organizations
    -offset INT: 
    -limit INT: 
    -search STRING: 
    -jwt STRING: 

Example:
    %[1]s organizations list --offset 4466127106579573227 --limit 42 --search "Qui vel cum nemo quia natus." --jwt "Et voluptas debitis."
`, os.Args[0])
}

func organizationsCreateUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] organizations create -body JSON -jwt STRING

Create a new organization
    -body JSON: 
    -jwt STRING: 

Example:
    %[1]s organizations create --body '{
      "organization": {
         "domain": "acme.com",
         "features": [
            "sso",
            "webhooks"
         ],
         "logo_url": "Ut maiores.",
         "metadata": {
            "Consectetur sunt eius.": "Sunt natus dolorem ut deleniti odio eligendi.",
            "Ducimus itaque.": "Voluptatibus eum delectus aut unde.",
            "Impedit nihil quibusdam esse sed.": "Tempore magnam delectus asperiores non."
         },
         "name": "Acme Inc.",
         "plan": "enterprise",
         "slug": "acme",
         "trial_days": 30
      }
   }' --jwt "Ducimus est et voluptate."
`, os.Args[0])
}

func organizationsGetUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] organizations get -id STRING -jwt STRING

Get organization by ID
    -id STRING: Organization ID
    -jwt STRING: 

Example:
    %[1]s organizations get --id "Nostrum fugiat in molestiae reprehenderit debitis." --jwt "Nam nulla magnam tenetur perferendis deleniti."
`, os.Args[0])
}

func organizationsUpdateUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] organizations update -body JSON -id STRING -jwt STRING

Update organization
    -body JSON: 
    -id STRING: Organization ID
    -jwt STRING: 

Example:
    %[1]s organizations update --body '{
      "organization": {
         "active": false,
         "domain": "Voluptas magnam reprehenderit.",
         "logo_url": "Nihil architecto inventore id ea laudantium excepturi.",
         "metadata": {
            "Numquam fuga suscipit quis ea sapiente.": "Sed aut molestiae totam aut.",
            "Qui deserunt maxime quam.": "Non autem a repellat aut doloremque.",
            "Sunt nostrum et quae voluptatum eligendi.": "Temporibus non."
         },
         "name": "Omnis delectus maiores odit magni dolor magnam.",
         "plan": "Alias doloremque explicabo perspiciatis natus."
      }
   }' --id "Mollitia vero." --jwt "Eos omnis voluptatem deserunt."
`, os.Args[0])
}

func organizationsDeleteUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] organizations delete -id STRING -jwt STRING

Delete organization
    -id STRING: Organization ID
    -jwt STRING: 

Example:
    %[1]s organizations delete --id "Provident distinctio totam excepturi ab voluptatum." --jwt "Quasi sapiente ut."
`, os.Args[0])
}

func organizationsListMembersUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] organizations list-members -id STRING -offset INT -limit INT -search STRING -jwt STRING

List organization members
    -id STRING: Organization ID
    -offset INT: 
    -limit INT: 
    -search STRING: 
    -jwt STRING: 

Example:
    %[1]s organizations list-members --id "Dolorem repudiandae autem cupiditate." --offset 4736026725886079237 --limit 54 --search "Rerum aut ut rerum non qui." --jwt "Vitae quod impedit."
`, os.Args[0])
}

func organizationsAddMemberUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] organizations add-member -body JSON -id STRING -jwt STRING

Add member to organization
    -body JSON: 
    -id STRING: Organization ID
    -jwt STRING: 

Example:
    %[1]s organizations add-member --body '{
      "member": {
         "roles": [
            "member"
         ],
         "user_id": "Enim accusamus voluptatum non rerum maxime numquam."
      }
   }' --id "Eligendi dolorem ad nam." --jwt "Facere ducimus dolor voluptatem."
`, os.Args[0])
}

func organizationsUpdateMemberUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] organizations update-member -body JSON -id STRING -user-id STRING -jwt STRING

Update organization member
    -body JSON: 
    -id STRING: Organization ID
    -user-id STRING: User ID
    -jwt STRING: 

Example:
    %[1]s organizations update-member --body '{
      "member": {
         "roles": [
            "Deserunt at quia pariatur eos ea.",
            "In ex."
         ]
      }
   }' --id "Hic excepturi." --user-id "Adipisci et eos." --jwt "Aliquam laboriosam sit."
`, os.Args[0])
}

func organizationsRemoveMemberUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] organizations remove-member -id STRING -user-id STRING -jwt STRING

Remove member from organization
    -id STRING: Organization ID
    -user-id STRING: User ID
    -jwt STRING: 

Example:
    %[1]s organizations remove-member --id "Omnis corrupti inventore dolorem vitae sint rerum." --user-id "Qui labore." --jwt "Rerum et."
`, os.Args[0])
}

func organizationsListFeaturesUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] organizations list-features -id STRING -jwt STRING

List organization features
    -id STRING: Organization ID
    -jwt STRING: 

Example:
    %[1]s organizations list-features --id "Assumenda cupiditate illo totam." --jwt "Quasi et asperiores."
`, os.Args[0])
}

func organizationsEnableFeatureUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] organizations enable-feature -body JSON -id STRING -jwt STRING

Enable a feature for an organization
    -body JSON: 
    -id STRING: Organization ID
    -jwt STRING: 

Example:
    %[1]s organizations enable-feature --body '{
      "feature": {
         "feature_key": "Laborum repellat repudiandae voluptatem laboriosam voluptate velit.",
         "settings": {
            "Odio est tempore hic ut sit.": "Neque necessitatibus sed."
         }
      }
   }' --id "Rem natus sunt rem et aut dolore." --jwt "Ut et odio in quia."
`, os.Args[0])
}

func organizationsDisableFeatureUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] organizations disable-feature -id STRING -feature-key STRING -jwt STRING

Disable a feature for an organization
    -id STRING: Organization ID
    -feature-key STRING: Feature key
    -jwt STRING: 

Example:
    %[1]s organizations disable-feature --id "Voluptatem qui qui aut." --feature-key "Adipisci exercitationem dolor." --jwt "Aut unde suscipit impedit illo."
`, os.Args[0])
}

// passkeysUsage displays the usage of the passkeys command and its subcommands.
func passkeysUsage() {
	fmt.Fprintf(os.Stderr, `Passkey (WebAuthn) authentication service
Usage:
    %[1]s [globalflags] passkeys COMMAND [flags]

COMMAND:
    register-begin: Begin passkey registration
    register-complete: Complete passkey registration
    login-begin: Begin passkey authentication
    login-complete: Complete passkey authentication
    list: List registered passkeys
    update: Update passkey
    delete: Delete passkey

Additional help:
    %[1]s passkeys COMMAND --help
`, os.Args[0])
}
func passkeysRegisterBeginUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] passkeys register-begin -body JSON -jwt STRING

Begin passkey registration
    -body JSON: 
    -jwt STRING: 

Example:
    %[1]s passkeys register-begin --body '{
      "device_name": "Et dolorem.",
      "device_type": "In sed nemo et nihil tempora."
   }' --jwt "Et ratione."
`, os.Args[0])
}

func passkeysRegisterCompleteUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] passkeys register-complete -body JSON -jwt STRING

Complete passkey registration
    -body JSON: 
    -jwt STRING: 

Example:
    %[1]s passkeys register-complete --body '{
      "device_name": "Exercitationem nemo.",
      "device_type": "Perspiciatis molestias nihil assumenda illum ut ipsam.",
      "response": "Hic excepturi praesentium.",
      "session_id": "Est earum molestias voluptatum sapiente eligendi."
   }' --jwt "Aut neque quae libero."
`, os.Args[0])
}

func passkeysLoginBeginUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] passkeys login-begin -oauth2 STRING -xapi-key STRING -jwt STRING

Begin passkey authentication
    -oauth2 STRING: 
    -xapi-key STRING: 
    -jwt STRING: 

Example:
    %[1]s passkeys login-begin --oauth2 "Corporis repellendus quisquam iure dolorum." --xapi-key "Veritatis aut alias iusto quod distinctio dignissimos." --jwt "Consequatur et quia in excepturi fugit."
`, os.Args[0])
}

func passkeysLoginCompleteUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] passkeys login-complete -body JSON -oauth2 STRING -xapi-key STRING -jwt STRING

Complete passkey authentication
    -body JSON: 
    -oauth2 STRING: 
    -xapi-key STRING: 
    -jwt STRING: 

Example:
    %[1]s passkeys login-complete --body '{
      "response": "Sed nam et est dolorum.",
      "session_id": "At voluptas nemo vel ea eum."
   }' --oauth2 "Sed voluptas non at aut repudiandae possimus." --xapi-key "Voluptates eum qui quidem." --jwt "At esse ut veniam dolores quisquam accusamus."
`, os.Args[0])
}

func passkeysListUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] passkeys list -jwt STRING

List registered passkeys
    -jwt STRING: 

Example:
    %[1]s passkeys list --jwt "Atque autem cum optio quidem est recusandae."
`, os.Args[0])
}

func passkeysUpdateUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] passkeys update -body JSON -id STRING -jwt STRING

Update passkey
    -body JSON: 
    -id STRING: Passkey ID
    -jwt STRING: 

Example:
    %[1]s passkeys update --body '{
      "request": {
         "name": "Nihil optio quasi nulla eos possimus."
      }
   }' --id "Omnis quidem." --jwt "Doloremque quisquam voluptatem."
`, os.Args[0])
}

func passkeysDeleteUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] passkeys delete -id STRING -jwt STRING

Delete passkey
    -id STRING: Passkey ID
    -jwt STRING: 

Example:
    %[1]s passkeys delete --id "Illum at dolorum repellat in sint dolorem." --jwt "Veritatis autem quasi esse esse et similique."
`, os.Args[0])
}

// passwordlessUsage displays the usage of the passwordless command and its
// subcommands.
func passwordlessUsage() {
	fmt.Fprintf(os.Stderr, `Passwordless authentication service
Usage:
    %[1]s [globalflags] passwordless COMMAND [flags]

COMMAND:
    email: Initiate passwordless email authentication
    sms: Initiate passwordless SMS authentication
    verify: Verify passwordless authentication
    methods: Get available passwordless authentication methods
    magic-link: Generate magic link for passwordless login

Additional help:
    %[1]s passwordless COMMAND --help
`, os.Args[0])
}
func passwordlessEmailUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] passwordless email -body JSON -oauth2 STRING -xapi-key STRING -jwt STRING

Initiate passwordless email authentication
    -body JSON: 
    -oauth2 STRING: 
    -xapi-key STRING: 
    -jwt STRING: 

Example:
    %[1]s passwordless email --body '{
      "email": "user@example.com",
      "redirect_url": "Labore rem ab dolorem nemo facere tempora."
   }' --oauth2 "Modi et." --xapi-key "Natus nam inventore eos nulla." --jwt "Et ducimus rerum rem."
`, os.Args[0])
}

func passwordlessSmsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] passwordless sms -body JSON -oauth2 STRING -xapi-key STRING -jwt STRING

Initiate passwordless SMS authentication
    -body JSON: 
    -oauth2 STRING: 
    -xapi-key STRING: 
    -jwt STRING: 

Example:
    %[1]s passwordless sms --body '{
      "phone_number": "+12345678901",
      "redirect_url": "Facere quidem iusto deleniti enim neque consequuntur."
   }' --oauth2 "Reprehenderit quam voluptas iure." --xapi-key "Ratione qui sed et dolor voluptate." --jwt "Optio aut eum eos quaerat commodi nam."
`, os.Args[0])
}

func passwordlessVerifyUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] passwordless verify -body JSON -oauth2 STRING -xapi-key STRING -jwt STRING

Verify passwordless authentication
    -body JSON: 
    -oauth2 STRING: 
    -xapi-key STRING: 
    -jwt STRING: 

Example:
    %[1]s passwordless verify --body '{
      "auth_type": "email",
      "code": "Quas deleniti.",
      "phone_number": "Expedita nesciunt totam et itaque.",
      "token": "Quae eos ratione aspernatur sunt perferendis soluta."
   }' --oauth2 "Sequi delectus nesciunt incidunt iusto quia." --xapi-key "Facilis dolorem necessitatibus ipsa officiis nesciunt." --jwt "Eum in nemo rerum odio."
`, os.Args[0])
}

func passwordlessMethodsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] passwordless methods -oauth2 STRING -xapi-key STRING -jwt STRING

Get available passwordless authentication methods
    -oauth2 STRING: 
    -xapi-key STRING: 
    -jwt STRING: 

Example:
    %[1]s passwordless methods --oauth2 "Aut culpa aliquam fuga quo." --xapi-key "Voluptate et." --jwt "Error architecto pariatur."
`, os.Args[0])
}

func passwordlessMagicLinkUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] passwordless magic-link -body JSON -jwt STRING

Generate magic link for passwordless login
    -body JSON: 
    -jwt STRING: 

Example:
    %[1]s passwordless magic-link --body '{
      "email": "user@example.com",
      "expires_in": 58770,
      "redirect_url": "https://example.com/dashboard",
      "user_id": "usr_123456789"
   }' --jwt "Praesentium autem."
`, os.Args[0])
}

// rbacUsage displays the usage of the rbac command and its subcommands.
func rbacUsage() {
	fmt.Fprintf(os.Stderr, `Role-Based Access Control service
Usage:
    %[1]s [globalflags] rbac COMMAND [flags]

COMMAND:
    list-permissions: List permissions
    create-permission: Create a new permission
    get-permission: Get permission by ID
    update-permission: Update permission
    delete-permission: Delete permission
    list-roles: List roles
    create-role: Create a new role
    get-role: Get role by ID
    update-role: Update role
    delete-role: Delete role
    list-role-permissions: List role permissions
    add-role-permission: Add permission to role
    remove-role-permission: Remove permission from role
    check-permission: Check if user has a permission
    check-role: Check if user has a role

Additional help:
    %[1]s rbac COMMAND --help
`, os.Args[0])
}
func rbacListPermissionsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] rbac list-permissions -offset INT -limit INT -resource STRING -action STRING -search STRING -jwt STRING

List permissions
    -offset INT: 
    -limit INT: 
    -resource STRING: 
    -action STRING: 
    -search STRING: 
    -jwt STRING: 

Example:
    %[1]s rbac list-permissions --offset 5045313419829403348 --limit 31 --resource "Molestiae est odit." --action "Odit eos ipsa pariatur." --search "Aperiam sunt velit aut sunt aliquam aut." --jwt "Qui omnis."
`, os.Args[0])
}

func rbacCreatePermissionUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] rbac create-permission -body JSON -jwt STRING

Create a new permission
    -body JSON: 
    -jwt STRING: 

Example:
    %[1]s rbac create-permission --body '{
      "permission": {
         "action": "read",
         "conditions": "Molestias hic aut accusamus aut omnis vel.",
         "description": "Allows reading user information",
         "name": "users:read",
         "resource": "users"
      }
   }' --jwt "Voluptatem sequi consequatur aut."
`, os.Args[0])
}

func rbacGetPermissionUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] rbac get-permission -id STRING -jwt STRING

Get permission by ID
    -id STRING: Permission ID
    -jwt STRING: 

Example:
    %[1]s rbac get-permission --id "Odio sit sint ipsum." --jwt "Voluptatibus esse."
`, os.Args[0])
}

func rbacUpdatePermissionUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] rbac update-permission -body JSON -id STRING -jwt STRING

Update permission
    -body JSON: 
    -id STRING: Permission ID
    -jwt STRING: 

Example:
    %[1]s rbac update-permission --body '{
      "permission": {
         "conditions": "Quia architecto tenetur voluptatum.",
         "description": "Incidunt corporis id voluptas itaque nihil aliquid.",
         "name": "Sit ut ipsa rem ad libero voluptatem."
      }
   }' --id "Sunt repudiandae amet est." --jwt "Quibusdam consectetur architecto et iusto est."
`, os.Args[0])
}

func rbacDeletePermissionUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] rbac delete-permission -id STRING -jwt STRING

Delete permission
    -id STRING: Permission ID
    -jwt STRING: 

Example:
    %[1]s rbac delete-permission --id "Beatae qui in impedit ut laborum." --jwt "Iusto non."
`, os.Args[0])
}

func rbacListRolesUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] rbac list-roles -offset INT -limit INT -organization-id STRING -search STRING -jwt STRING

List roles
    -offset INT: 
    -limit INT: 
    -organization-id STRING: 
    -search STRING: 
    -jwt STRING: 

Example:
    %[1]s rbac list-roles --offset 5693340716676645326 --limit 95 --organization-id "Eos et." --search "Ex nulla necessitatibus aut dolores omnis debitis." --jwt "Voluptas maxime officia recusandae sunt consequatur rerum."
`, os.Args[0])
}

func rbacCreateRoleUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] rbac create-role -body JSON -jwt STRING

Create a new role
    -body JSON: 
    -jwt STRING: 

Example:
    %[1]s rbac create-role --body '{
      "role": {
         "description": "Administrator role with full access",
         "is_default": false,
         "name": "Admin",
         "organization_id": "Enim id itaque est deleniti laudantium."
      }
   }' --jwt "Qui ab sequi."
`, os.Args[0])
}

func rbacGetRoleUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] rbac get-role -id STRING -jwt STRING

Get role by ID
    -id STRING: Role ID
    -jwt STRING: 

Example:
    %[1]s rbac get-role --id "Harum nisi qui aut facilis non autem." --jwt "Magni architecto dolorem."
`, os.Args[0])
}

func rbacUpdateRoleUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] rbac update-role -body JSON -id STRING -jwt STRING

Update role
    -body JSON: 
    -id STRING: Role ID
    -jwt STRING: 

Example:
    %[1]s rbac update-role --body '{
      "role": {
         "description": "Eum consequatur eius sed.",
         "is_default": true,
         "name": "Cumque eaque."
      }
   }' --id "Nulla fugiat laudantium." --jwt "Non aut reprehenderit omnis."
`, os.Args[0])
}

func rbacDeleteRoleUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] rbac delete-role -id STRING -jwt STRING

Delete role
    -id STRING: Role ID
    -jwt STRING: 

Example:
    %[1]s rbac delete-role --id "Molestiae quaerat expedita." --jwt "Eos ut reiciendis quisquam expedita nobis."
`, os.Args[0])
}

func rbacListRolePermissionsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] rbac list-role-permissions -id STRING -jwt STRING

List role permissions
    -id STRING: Role ID
    -jwt STRING: 

Example:
    %[1]s rbac list-role-permissions --id "Soluta deleniti sed." --jwt "Qui voluptates ratione voluptas soluta dolor sapiente."
`, os.Args[0])
}

func rbacAddRolePermissionUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] rbac add-role-permission -body JSON -id STRING -jwt STRING

Add permission to role
    -body JSON: 
    -id STRING: Role ID
    -jwt STRING: 

Example:
    %[1]s rbac add-role-permission --body '{
      "permission": {
         "permission_id": "Non asperiores iusto enim."
      }
   }' --id "Harum laborum." --jwt "Quasi ut ut voluptate corporis repellendus."
`, os.Args[0])
}

func rbacRemoveRolePermissionUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] rbac remove-role-permission -id STRING -permission-id STRING -jwt STRING

Remove permission from role
    -id STRING: Role ID
    -permission-id STRING: Permission ID
    -jwt STRING: 

Example:
    %[1]s rbac remove-role-permission --id "Perspiciatis magni." --permission-id "Vero necessitatibus voluptatem sed nihil rerum." --jwt "Non labore exercitationem libero."
`, os.Args[0])
}

func rbacCheckPermissionUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] rbac check-permission -resource STRING -action STRING -jwt STRING

Check if user has a permission
    -resource STRING: 
    -action STRING: 
    -jwt STRING: 

Example:
    %[1]s rbac check-permission --resource "Itaque quo ut suscipit accusantium." --action "Est quo." --jwt "Earum eum saepe voluptates nihil tenetur pariatur."
`, os.Args[0])
}

func rbacCheckRoleUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] rbac check-role -role STRING -organization-id STRING -jwt STRING

Check if user has a role
    -role STRING: 
    -organization-id STRING: 
    -jwt STRING: 

Example:
    %[1]s rbac check-role --role "Deleniti iure." --organization-id "Iste sit aut facilis est enim nesciunt." --jwt "Omnis praesentium."
`, os.Args[0])
}

// oauthClientUsage displays the usage of the oauth-client command and its
// subcommands.
func oauthClientUsage() {
	fmt.Fprintf(os.Stderr, `OAuth2 client service for authenticating with external providers
Usage:
    %[1]s [globalflags] oauth-client COMMAND [flags]

COMMAND:
    list-providers: List available OAuth providers
    provider-auth: Initiate authentication with an OAuth provider
    provider-callback: Handle OAuth provider callback

Additional help:
    %[1]s oauth-client COMMAND --help
`, os.Args[0])
}
func oauthClientListProvidersUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] oauth-client list-providers -oauth2 STRING -xapi-key STRING -jwt STRING

List available OAuth providers
    -oauth2 STRING: 
    -xapi-key STRING: 
    -jwt STRING: 

Example:
    %[1]s oauth-client list-providers --oauth2 "Incidunt sunt quisquam id et explicabo laborum." --xapi-key "Voluptates nihil est dolores." --jwt "Libero quas eum eius ea."
`, os.Args[0])
}

func oauthClientProviderAuthUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] oauth-client provider-auth -provider STRING -redirect-uri STRING -oauth2 STRING -xapi-key STRING -jwt STRING

Initiate authentication with an OAuth provider
    -provider STRING: Provider ID
    -redirect-uri STRING: 
    -oauth2 STRING: 
    -xapi-key STRING: 
    -jwt STRING: 

Example:
    %[1]s oauth-client provider-auth --provider "Aut voluptatibus nihil repudiandae." --redirect-uri "Voluptas doloribus et maxime deserunt dolorem necessitatibus." --oauth2 "Iste expedita." --xapi-key "Recusandae et assumenda ratione amet ipsa." --jwt "Aut numquam voluptates quibusdam voluptas expedita."
`, os.Args[0])
}

func oauthClientProviderCallbackUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] oauth-client provider-callback -provider STRING -code STRING -state STRING -oauth2 STRING -xapi-key STRING -jwt STRING

Handle OAuth provider callback
    -provider STRING: Provider ID
    -code STRING: 
    -state STRING: 
    -oauth2 STRING: 
    -xapi-key STRING: 
    -jwt STRING: 

Example:
    %[1]s oauth-client provider-callback --provider "Dolor nemo cumque." --code "Explicabo aut voluptate ullam provident itaque." --state "Velit nihil nemo." --oauth2 "Molestiae consequatur." --xapi-key "Voluptas non numquam voluptatibus et omnis dicta." --jwt "Recusandae quod et."
`, os.Args[0])
}

// ssoUsage displays the usage of the sso command and its subcommands.
func ssoUsage() {
	fmt.Fprintf(os.Stderr, `Single Sign-On service
Usage:
    %[1]s [globalflags] sso COMMAND [flags]

COMMAND:
    list-providers: List available SSO providers
    provider-auth: Initiate SSO authentication with a provider
    provider-callback: Handle SSO provider callback
    list-identity-providers: List identity providers
    create-identity-provider: Create a new identity provider
    get-identity-provider: Get identity provider by ID
    update-identity-provider: Update identity provider
    delete-identity-provider: Delete identity provider
    saml-metadata: SAML metadata endpoint
    saml-acs: SAML assertion consumer service

Additional help:
    %[1]s sso COMMAND --help
`, os.Args[0])
}
func ssoListProvidersUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] sso list-providers -organization-id STRING -oauth2 STRING -xapi-key STRING -jwt STRING

List available SSO providers
    -organization-id STRING: 
    -oauth2 STRING: 
    -xapi-key STRING: 
    -jwt STRING: 

Example:
    %[1]s sso list-providers --organization-id "Doloribus sit quisquam." --oauth2 "Aut accusantium ipsum inventore dolores et." --xapi-key "Sunt eos quo tempora excepturi." --jwt "Esse expedita tempora quo est."
`, os.Args[0])
}

func ssoProviderAuthUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] sso provider-auth -provider STRING -redirect-uri STRING -oauth2 STRING -xapi-key STRING -jwt STRING

Initiate SSO authentication with a provider
    -provider STRING: Provider ID
    -redirect-uri STRING: 
    -oauth2 STRING: 
    -xapi-key STRING: 
    -jwt STRING: 

Example:
    %[1]s sso provider-auth --provider "Laboriosam tempore natus." --redirect-uri "Natus veniam nisi cumque." --oauth2 "Laudantium quam quis libero consequatur omnis." --xapi-key "Velit fugit id autem ad impedit." --jwt "Iusto asperiores quod sunt et."
`, os.Args[0])
}

func ssoProviderCallbackUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] sso provider-callback -provider STRING -code STRING -state STRING -saml-response STRING -relay-state STRING -oauth2 STRING -xapi-key STRING -jwt STRING

Handle SSO provider callback
    -provider STRING: Provider ID
    -code STRING: 
    -state STRING: 
    -saml-response STRING: 
    -relay-state STRING: 
    -oauth2 STRING: 
    -xapi-key STRING: 
    -jwt STRING: 

Example:
    %[1]s sso provider-callback --provider "Accusamus molestias omnis quibusdam esse." --code "In quaerat voluptatem mollitia." --state "Fugit tempora eum accusantium sequi." --saml-response "Voluptatibus sit voluptas." --relay-state "Molestiae numquam corrupti velit eaque quo voluptatem." --oauth2 "Atque pariatur." --xapi-key "Ut non impedit." --jwt "Velit et delectus numquam."
`, os.Args[0])
}

func ssoListIdentityProvidersUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] sso list-identity-providers -organization-id STRING -jwt STRING

List identity providers
    -organization-id STRING: 
    -jwt STRING: 

Example:
    %[1]s sso list-identity-providers --organization-id "In quam cumque deserunt animi." --jwt "Molestiae modi laboriosam pariatur ut sit."
`, os.Args[0])
}

func ssoCreateIdentityProviderUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] sso create-identity-provider -body JSON -jwt STRING

Create a new identity provider
    -body JSON: 
    -jwt STRING: 

Example:
    %[1]s sso create-identity-provider --body '{
      "organization_id": "Rerum natus.",
      "provider": {
         "active": false,
         "attributes_mapping": {
            "email": "email",
            "name": "name"
         },
         "authorization_endpoint": "https://accounts.google.com/o/oauth2/auth",
         "certificate": "Quisquam assumenda sed quos.",
         "client_id": "client_id_123",
         "client_secret": "client_secret_456",
         "domains": [
            "example.com"
         ],
         "issuer": "https://accounts.google.com",
         "jwks_uri": "https://www.googleapis.com/oauth2/v3/certs",
         "metadata_url": "Dolorum accusamus voluptatem sed aperiam rerum.",
         "name": "Google",
         "primary": true,
         "private_key": "Eos animi beatae tempora laborum in quod.",
         "provider_type": "oidc",
         "redirect_uri": "https://auth.example.com/callback",
         "token_endpoint": "https://oauth2.googleapis.com/token",
         "userinfo_endpoint": "https://openidconnect.googleapis.com/v1/userinfo"
      }
   }' --jwt "Corrupti incidunt est quidem quis dolores impedit."
`, os.Args[0])
}

func ssoGetIdentityProviderUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] sso get-identity-provider -id STRING -jwt STRING

Get identity provider by ID
    -id STRING: Provider ID
    -jwt STRING: 

Example:
    %[1]s sso get-identity-provider --id "Quos illo." --jwt "Quas qui ab."
`, os.Args[0])
}

func ssoUpdateIdentityProviderUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] sso update-identity-provider -body JSON -id STRING -jwt STRING

Update identity provider
    -body JSON: 
    -id STRING: Provider ID
    -jwt STRING: 

Example:
    %[1]s sso update-identity-provider --body '{
      "provider": {
         "active": true,
         "attributes_mapping": {
            "Pariatur aspernatur provident nihil dolor.": "Beatae dolorem impedit minima voluptatem qui doloribus."
         },
         "authorization_endpoint": "Nesciunt expedita voluptas repellat.",
         "certificate": "Reiciendis aut in.",
         "client_id": "Dolor aut.",
         "client_secret": "Sit blanditiis est voluptatum.",
         "domains": [
            "Ullam omnis quia quo officia dignissimos.",
            "Deleniti adipisci debitis.",
            "Perspiciatis sunt recusandae quam illum quo."
         ],
         "issuer": "Veniam quibusdam ab.",
         "jwks_uri": "Laudantium sit.",
         "metadata_url": "Quod in dolorum assumenda.",
         "name": "Ex minima debitis fuga.",
         "primary": false,
         "private_key": "Nihil neque aliquam qui.",
         "redirect_uri": "Sapiente nobis sequi.",
         "token_endpoint": "Dolorem ipsa molestiae pariatur fugit iste.",
         "userinfo_endpoint": "Voluptatum minima eos rerum amet."
      }
   }' --id "Omnis sed provident." --jwt "Laborum optio recusandae amet."
`, os.Args[0])
}

func ssoDeleteIdentityProviderUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] sso delete-identity-provider -id STRING -jwt STRING

Delete identity provider
    -id STRING: Provider ID
    -jwt STRING: 

Example:
    %[1]s sso delete-identity-provider --id "Numquam necessitatibus et." --jwt "Delectus reiciendis aperiam eligendi."
`, os.Args[0])
}

func ssoSamlMetadataUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] sso saml-metadata -id STRING

SAML metadata endpoint
    -id STRING: Provider ID

Example:
    %[1]s sso saml-metadata --id "Voluptas voluptates."
`, os.Args[0])
}

func ssoSamlAcsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] sso saml-acs -id STRING

SAML assertion consumer service
    -id STRING: Provider ID

Example:
    %[1]s sso saml-acs --id "Quisquam pariatur aut."
`, os.Args[0])
}

// usersUsage displays the usage of the users command and its subcommands.
func usersUsage() {
	fmt.Fprintf(os.Stderr, `User management service
Usage:
    %[1]s [globalflags] users COMMAND [flags]

COMMAND:
    list: List users
    create: Create a new user
    get: Get user by ID
    update: Update user
    delete: Delete user
    update-me: Update current user
    update-password: Update current user password
    get-sessions: Get current user sessions
    delete-session: Delete user session
    get-organizations: Get user organizations

Additional help:
    %[1]s users COMMAND --help
`, os.Args[0])
}
func usersListUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] users list -offset INT -limit INT -search STRING -organization-id STRING -jwt STRING

List users
    -offset INT: 
    -limit INT: 
    -search STRING: 
    -organization-id STRING: 
    -jwt STRING: 

Example:
    %[1]s users list --offset 1661682977690273651 --limit 31 --search "Earum qui." --organization-id "Facilis inventore iste." --jwt "Ea impedit aut."
`, os.Args[0])
}

func usersCreateUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] users create -body JSON -jwt STRING

Create a new user
    -body JSON: 
    -jwt STRING: 

Example:
    %[1]s users create --body '{
      "email": "user@example.com",
      "first_name": "Quia nam officiis magni sint sed.",
      "last_name": "Vel doloribus aut.",
      "locale": "Optio adipisci voluptatem.",
      "metadata": {
         "Consequatur inventore voluptatibus.": "Eos magnam fugiat praesentium laudantium et architecto.",
         "Itaque culpa fugit magni fugiat ut.": "Sit tempore ea omnis.",
         "Sunt voluptatem commodi aut.": "Ut et eos."
      },
      "organization_id": "Aliquid enim sed eveniet debitis.",
      "password": "securepassword",
      "phone_number": "Expedita voluptas nihil laudantium consectetur velit id.",
      "profile_image_url": "Facere laboriosam optio perferendis."
   }' --jwt "Tempore eos aspernatur voluptas enim."
`, os.Args[0])
}

func usersGetUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] users get -id STRING -jwt STRING

Get user by ID
    -id STRING: User ID
    -jwt STRING: 

Example:
    %[1]s users get --id "Voluptas odit ex recusandae dolorem veniam." --jwt "Est et illum quidem veniam voluptates in."
`, os.Args[0])
}

func usersUpdateUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] users update -body JSON -id STRING -jwt STRING

Update user
    -body JSON: 
    -id STRING: User ID
    -jwt STRING: 

Example:
    %[1]s users update --body '{
      "user": {
         "active": false,
         "first_name": "Cumque qui ducimus quos quia.",
         "last_name": "Ipsam qui odit.",
         "locale": "Qui libero et.",
         "metadata": {
            "Excepturi illum.": "Aspernatur non quos et repudiandae.",
            "Illum sit eum quo enim autem aspernatur.": "Non laboriosam numquam."
         },
         "phone_number": "Cumque est itaque rem iste est.",
         "primary_organization_id": "Temporibus et quos et quas animi.",
         "profile_image_url": "Repellat incidunt."
      }
   }' --id "Esse saepe." --jwt "Qui nihil debitis nihil voluptatem assumenda."
`, os.Args[0])
}

func usersDeleteUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] users delete -id STRING -jwt STRING

Delete user
    -id STRING: User ID
    -jwt STRING: 

Example:
    %[1]s users delete --id "Nostrum et non." --jwt "Iste doloremque voluptatem."
`, os.Args[0])
}

func usersUpdateMeUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] users update-me -body JSON -jwt STRING

Update current user
    -body JSON: 
    -jwt STRING: 

Example:
    %[1]s users update-me --body '{
      "active": true,
      "first_name": "Aut et quia.",
      "last_name": "Perferendis totam.",
      "locale": "Minus nihil repellendus consequatur laborum.",
      "metadata": {
         "Ullam consectetur at provident.": "Animi aut sit minus voluptatem voluptate."
      },
      "phone_number": "Culpa quaerat.",
      "primary_organization_id": "Ea ipsum delectus hic.",
      "profile_image_url": "Quia voluptate."
   }' --jwt "Dignissimos sunt nulla et occaecati."
`, os.Args[0])
}

func usersUpdatePasswordUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] users update-password -body JSON -jwt STRING

Update current user password
    -body JSON: 
    -jwt STRING: 

Example:
    %[1]s users update-password --body '{
      "current_password": "oldpassword",
      "new_password": "newpassword"
   }' --jwt "Aspernatur qui qui est."
`, os.Args[0])
}

func usersGetSessionsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] users get-sessions -jwt STRING

Get current user sessions
    -jwt STRING: 

Example:
    %[1]s users get-sessions --jwt "Eum unde omnis est praesentium quaerat."
`, os.Args[0])
}

func usersDeleteSessionUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] users delete-session -session-id STRING -jwt STRING

Delete user session
    -session-id STRING: Session ID
    -jwt STRING: 

Example:
    %[1]s users delete-session --session-id "Mollitia nostrum quia." --jwt "Distinctio quos qui laudantium necessitatibus eligendi."
`, os.Args[0])
}

func usersGetOrganizationsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] users get-organizations -id STRING -jwt STRING

Get user organizations
    -id STRING: User ID
    -jwt STRING: 

Example:
    %[1]s users get-organizations --id "Porro aut aut reiciendis corrupti." --jwt "Voluptas consequatur nihil."
`, os.Args[0])
}

// webhooksUsage displays the usage of the webhooks command and its subcommands.
func webhooksUsage() {
	fmt.Fprintf(os.Stderr, `Webhook management service
Usage:
    %[1]s [globalflags] webhooks COMMAND [flags]

COMMAND:
    list: List webhooks
    create: Create a new webhook
    get: Get webhook by ID
    update: Update webhook
    delete: Delete webhook
    trigger-event: Manually trigger a webhook event
    list-events: List webhook events
    replay-event: Replay a webhook event
    receive: Receive webhook callbacks from external sources

Additional help:
    %[1]s webhooks COMMAND --help
`, os.Args[0])
}
func webhooksListUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] webhooks list -offset INT -limit INT -organization-id STRING -event-types JSON -jwt STRING

List webhooks
    -offset INT: 
    -limit INT: 
    -organization-id STRING: 
    -event-types JSON: 
    -jwt STRING: 

Example:
    %[1]s webhooks list --offset 1084829649094751667 --limit 48 --organization-id "Ut eum." --event-types '[
      "Dolores labore dignissimos hic tempora non consequatur.",
      "Est sit sunt.",
      "In necessitatibus eos qui."
   ]' --jwt "Ut aut expedita cupiditate eos rerum."
`, os.Args[0])
}

func webhooksCreateUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] webhooks create -body JSON -jwt STRING

Create a new webhook
    -body JSON: 
    -jwt STRING: 

Example:
    %[1]s webhooks create --body '{
      "organization_id": "Consequuntur similique odit facilis odio distinctio nulla.",
      "webhook": {
         "event_types": [
            "user.created",
            "user.updated"
         ],
         "format": "form",
         "metadata": {
            "Est quos ab saepe expedita suscipit neque.": "Quas odit rerum et ea qui.",
            "Et eaque reiciendis quae fugiat aut mollitia.": "Esse voluptatem laboriosam aperiam."
         },
         "name": "User Events",
         "retry_count": 0,
         "timeout_ms": 27144,
         "url": "https://example.com/webhooks/receive"
      }
   }' --jwt "Est nemo accusamus doloremque alias sunt minima."
`, os.Args[0])
}

func webhooksGetUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] webhooks get -id STRING -jwt STRING

Get webhook by ID
    -id STRING: Webhook ID
    -jwt STRING: 

Example:
    %[1]s webhooks get --id "Consequuntur quibusdam et." --jwt "Est illum voluptate."
`, os.Args[0])
}

func webhooksUpdateUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] webhooks update -body JSON -id STRING -jwt STRING

Update webhook
    -body JSON: 
    -id STRING: Webhook ID
    -jwt STRING: 

Example:
    %[1]s webhooks update --body '{
      "webhook": {
         "active": false,
         "event_types": [
            "Omnis autem quia reiciendis qui fugiat.",
            "Aliquid ratione pariatur aperiam quibusdam.",
            "Quae quisquam laboriosam."
         ],
         "format": "json",
         "metadata": {
            "Consequatur qui voluptate et fuga est corporis.": "Id ducimus nulla sed.",
            "Consequatur sapiente.": "Ipsa architecto aut asperiores ut dolorem.",
            "Incidunt saepe tempora aut.": "Enim voluptas eos voluptas qui qui."
         },
         "name": "Quam omnis et consequatur.",
         "retry_count": 9,
         "timeout_ms": 17232,
         "url": "http://emmerich.com/oma_schuppe"
      }
   }' --id "Eum provident." --jwt "Voluptatem est ullam."
`, os.Args[0])
}

func webhooksDeleteUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] webhooks delete -id STRING -jwt STRING

Delete webhook
    -id STRING: Webhook ID
    -jwt STRING: 

Example:
    %[1]s webhooks delete --id "Eum sed." --jwt "Et et a doloribus."
`, os.Args[0])
}

func webhooksTriggerEventUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] webhooks trigger-event -body JSON -jwt STRING

Manually trigger a webhook event
    -body JSON: 
    -jwt STRING: 

Example:
    %[1]s webhooks trigger-event --body '{
      "event": {
         "event_type": "user.created",
         "headers": {
            "Minima perspiciatis officia omnis ratione aut.": "Nulla consequatur molestiae."
         },
         "payload": {
            "email": "user@example.com",
            "user_id": "123"
         }
      },
      "organization_id": "Dolores non possimus omnis."
   }' --jwt "Necessitatibus praesentium a ut."
`, os.Args[0])
}

func webhooksListEventsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] webhooks list-events -id STRING -offset INT -limit INT -event-type STRING -delivered BOOL -jwt STRING

List webhook events
    -id STRING: Webhook ID
    -offset INT: 
    -limit INT: 
    -event-type STRING: 
    -delivered BOOL: 
    -jwt STRING: 

Example:
    %[1]s webhooks list-events --id "Ipsum et rerum voluptatem ipsam." --offset 8864574725346077425 --limit 94 --event-type "Aut beatae." --delivered true --jwt "Corrupti inventore cumque."
`, os.Args[0])
}

func webhooksReplayEventUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] webhooks replay-event -id STRING -event-id STRING -jwt STRING

Replay a webhook event
    -id STRING: Webhook ID
    -event-id STRING: Event ID
    -jwt STRING: 

Example:
    %[1]s webhooks replay-event --id "Qui consequatur ad." --event-id "Qui commodi repellendus quia est illum." --jwt "Voluptas nesciunt quia."
`, os.Args[0])
}

func webhooksReceiveUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] webhooks receive -id STRING

Receive webhook callbacks from external sources
    -id STRING: Webhook receiver ID

Example:
    %[1]s webhooks receive --id "Sit rerum sunt impedit dolores maxime."
`, os.Args[0])
}
