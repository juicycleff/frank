// Code generated by goa v3.20.0, DO NOT EDIT.
//
// sso HTTP server
//
// Command:
// $ goa gen github.com/juicycleff/frank/design -o .

package server

import (
	"context"
	"net/http"
	"regexp"

	sso "github.com/juicycleff/frank/gen/sso"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
	"goa.design/plugins/v3/cors"
)

// Server lists the sso service endpoint HTTP handlers.
type Server struct {
	Mounts                 []*MountPoint
	ListProviders          http.Handler
	ProviderAuth           http.Handler
	ProviderCallback       http.Handler
	ListIdentityProviders  http.Handler
	CreateIdentityProvider http.Handler
	GetIdentityProvider    http.Handler
	UpdateIdentityProvider http.Handler
	DeleteIdentityProvider http.Handler
	SamlMetadata           http.Handler
	SamlAcs                http.Handler
	CORS                   http.Handler
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the sso service endpoints using the
// provided encoder and decoder. The handlers are mounted on the given mux
// using the HTTP verb and path defined in the design. errhandler is called
// whenever a response fails to be encoded. formatter is used to format errors
// returned by the service methods prior to encoding. Both errhandler and
// formatter are optional and can be nil.
func New(
	e *sso.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"ListProviders", "GET", "/v1/auth/sso/providers"},
			{"ProviderAuth", "GET", "/v1/auth/sso/providers/{provider}"},
			{"ProviderCallback", "GET", "/v1/auth/sso/callback/{provider}"},
			{"ListIdentityProviders", "GET", "/v1/auth/sso/identity-providers"},
			{"CreateIdentityProvider", "POST", "/v1/auth/sso/identity-providers"},
			{"GetIdentityProvider", "GET", "/v1/auth/sso/identity-providers/{id}"},
			{"UpdateIdentityProvider", "PUT", "/v1/auth/sso/identity-providers/{id}"},
			{"DeleteIdentityProvider", "DELETE", "/v1/auth/sso/identity-providers/{id}"},
			{"SamlMetadata", "GET", "/v1/auth/sso/saml/{id}/metadata"},
			{"SamlAcs", "POST", "/v1/auth/sso/saml/{id}/acs"},
			{"CORS", "OPTIONS", "/v1/auth/sso/providers"},
			{"CORS", "OPTIONS", "/v1/auth/sso/providers/{provider}"},
			{"CORS", "OPTIONS", "/v1/auth/sso/callback/{provider}"},
			{"CORS", "OPTIONS", "/v1/auth/sso/identity-providers"},
			{"CORS", "OPTIONS", "/v1/auth/sso/identity-providers/{id}"},
			{"CORS", "OPTIONS", "/v1/auth/sso/saml/{id}/metadata"},
			{"CORS", "OPTIONS", "/v1/auth/sso/saml/{id}/acs"},
		},
		ListProviders:          NewListProvidersHandler(e.ListProviders, mux, decoder, encoder, errhandler, formatter),
		ProviderAuth:           NewProviderAuthHandler(e.ProviderAuth, mux, decoder, encoder, errhandler, formatter),
		ProviderCallback:       NewProviderCallbackHandler(e.ProviderCallback, mux, decoder, encoder, errhandler, formatter),
		ListIdentityProviders:  NewListIdentityProvidersHandler(e.ListIdentityProviders, mux, decoder, encoder, errhandler, formatter),
		CreateIdentityProvider: NewCreateIdentityProviderHandler(e.CreateIdentityProvider, mux, decoder, encoder, errhandler, formatter),
		GetIdentityProvider:    NewGetIdentityProviderHandler(e.GetIdentityProvider, mux, decoder, encoder, errhandler, formatter),
		UpdateIdentityProvider: NewUpdateIdentityProviderHandler(e.UpdateIdentityProvider, mux, decoder, encoder, errhandler, formatter),
		DeleteIdentityProvider: NewDeleteIdentityProviderHandler(e.DeleteIdentityProvider, mux, decoder, encoder, errhandler, formatter),
		SamlMetadata:           NewSamlMetadataHandler(e.SamlMetadata, mux, decoder, encoder, errhandler, formatter),
		SamlAcs:                NewSamlAcsHandler(e.SamlAcs, mux, decoder, encoder, errhandler, formatter),
		CORS:                   NewCORSHandler(),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "sso" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.ListProviders = m(s.ListProviders)
	s.ProviderAuth = m(s.ProviderAuth)
	s.ProviderCallback = m(s.ProviderCallback)
	s.ListIdentityProviders = m(s.ListIdentityProviders)
	s.CreateIdentityProvider = m(s.CreateIdentityProvider)
	s.GetIdentityProvider = m(s.GetIdentityProvider)
	s.UpdateIdentityProvider = m(s.UpdateIdentityProvider)
	s.DeleteIdentityProvider = m(s.DeleteIdentityProvider)
	s.SamlMetadata = m(s.SamlMetadata)
	s.SamlAcs = m(s.SamlAcs)
	s.CORS = m(s.CORS)
}

// MethodNames returns the methods served.
func (s *Server) MethodNames() []string { return sso.MethodNames[:] }

// Mount configures the mux to serve the sso endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountListProvidersHandler(mux, h.ListProviders)
	MountProviderAuthHandler(mux, h.ProviderAuth)
	MountProviderCallbackHandler(mux, h.ProviderCallback)
	MountListIdentityProvidersHandler(mux, h.ListIdentityProviders)
	MountCreateIdentityProviderHandler(mux, h.CreateIdentityProvider)
	MountGetIdentityProviderHandler(mux, h.GetIdentityProvider)
	MountUpdateIdentityProviderHandler(mux, h.UpdateIdentityProvider)
	MountDeleteIdentityProviderHandler(mux, h.DeleteIdentityProvider)
	MountSamlMetadataHandler(mux, h.SamlMetadata)
	MountSamlAcsHandler(mux, h.SamlAcs)
	MountCORSHandler(mux, h.CORS)
}

// Mount configures the mux to serve the sso endpoints.
func (s *Server) Mount(mux goahttp.Muxer) {
	Mount(mux, s)
}

// MountListProvidersHandler configures the mux to serve the "sso" service
// "list_providers" endpoint.
func MountListProvidersHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleSsoOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/v1/auth/sso/providers", f)
}

// NewListProvidersHandler creates a HTTP handler which loads the HTTP request
// and calls the "sso" service "list_providers" endpoint.
func NewListProvidersHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeListProvidersRequest(mux, decoder)
		encodeResponse = EncodeListProvidersResponse(encoder)
		encodeError    = EncodeListProvidersError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "list_providers")
		ctx = context.WithValue(ctx, goa.ServiceKey, "sso")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountProviderAuthHandler configures the mux to serve the "sso" service
// "provider_auth" endpoint.
func MountProviderAuthHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleSsoOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/v1/auth/sso/providers/{provider}", f)
}

// NewProviderAuthHandler creates a HTTP handler which loads the HTTP request
// and calls the "sso" service "provider_auth" endpoint.
func NewProviderAuthHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest = DecodeProviderAuthRequest(mux, decoder)
		encodeError   = EncodeProviderAuthError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "provider_auth")
		ctx = context.WithValue(ctx, goa.ServiceKey, "sso")
		_, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		http.Redirect(w, r, "/redirect/dest", http.StatusTemporaryRedirect)
	})
}

// MountProviderCallbackHandler configures the mux to serve the "sso" service
// "provider_callback" endpoint.
func MountProviderCallbackHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleSsoOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/v1/auth/sso/callback/{provider}", f)
}

// NewProviderCallbackHandler creates a HTTP handler which loads the HTTP
// request and calls the "sso" service "provider_callback" endpoint.
func NewProviderCallbackHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeProviderCallbackRequest(mux, decoder)
		encodeResponse = EncodeProviderCallbackResponse(encoder)
		encodeError    = EncodeProviderCallbackError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "provider_callback")
		ctx = context.WithValue(ctx, goa.ServiceKey, "sso")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountListIdentityProvidersHandler configures the mux to serve the "sso"
// service "list_identity_providers" endpoint.
func MountListIdentityProvidersHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleSsoOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/v1/auth/sso/identity-providers", f)
}

// NewListIdentityProvidersHandler creates a HTTP handler which loads the HTTP
// request and calls the "sso" service "list_identity_providers" endpoint.
func NewListIdentityProvidersHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeListIdentityProvidersRequest(mux, decoder)
		encodeResponse = EncodeListIdentityProvidersResponse(encoder)
		encodeError    = EncodeListIdentityProvidersError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "list_identity_providers")
		ctx = context.WithValue(ctx, goa.ServiceKey, "sso")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountCreateIdentityProviderHandler configures the mux to serve the "sso"
// service "create_identity_provider" endpoint.
func MountCreateIdentityProviderHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleSsoOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/v1/auth/sso/identity-providers", f)
}

// NewCreateIdentityProviderHandler creates a HTTP handler which loads the HTTP
// request and calls the "sso" service "create_identity_provider" endpoint.
func NewCreateIdentityProviderHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeCreateIdentityProviderRequest(mux, decoder)
		encodeResponse = EncodeCreateIdentityProviderResponse(encoder)
		encodeError    = EncodeCreateIdentityProviderError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "create_identity_provider")
		ctx = context.WithValue(ctx, goa.ServiceKey, "sso")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetIdentityProviderHandler configures the mux to serve the "sso"
// service "get_identity_provider" endpoint.
func MountGetIdentityProviderHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleSsoOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/v1/auth/sso/identity-providers/{id}", f)
}

// NewGetIdentityProviderHandler creates a HTTP handler which loads the HTTP
// request and calls the "sso" service "get_identity_provider" endpoint.
func NewGetIdentityProviderHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetIdentityProviderRequest(mux, decoder)
		encodeResponse = EncodeGetIdentityProviderResponse(encoder)
		encodeError    = EncodeGetIdentityProviderError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "get_identity_provider")
		ctx = context.WithValue(ctx, goa.ServiceKey, "sso")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountUpdateIdentityProviderHandler configures the mux to serve the "sso"
// service "update_identity_provider" endpoint.
func MountUpdateIdentityProviderHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleSsoOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("PUT", "/v1/auth/sso/identity-providers/{id}", f)
}

// NewUpdateIdentityProviderHandler creates a HTTP handler which loads the HTTP
// request and calls the "sso" service "update_identity_provider" endpoint.
func NewUpdateIdentityProviderHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUpdateIdentityProviderRequest(mux, decoder)
		encodeResponse = EncodeUpdateIdentityProviderResponse(encoder)
		encodeError    = EncodeUpdateIdentityProviderError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "update_identity_provider")
		ctx = context.WithValue(ctx, goa.ServiceKey, "sso")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountDeleteIdentityProviderHandler configures the mux to serve the "sso"
// service "delete_identity_provider" endpoint.
func MountDeleteIdentityProviderHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleSsoOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("DELETE", "/v1/auth/sso/identity-providers/{id}", f)
}

// NewDeleteIdentityProviderHandler creates a HTTP handler which loads the HTTP
// request and calls the "sso" service "delete_identity_provider" endpoint.
func NewDeleteIdentityProviderHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeDeleteIdentityProviderRequest(mux, decoder)
		encodeResponse = EncodeDeleteIdentityProviderResponse(encoder)
		encodeError    = EncodeDeleteIdentityProviderError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "delete_identity_provider")
		ctx = context.WithValue(ctx, goa.ServiceKey, "sso")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountSamlMetadataHandler configures the mux to serve the "sso" service
// "saml_metadata" endpoint.
func MountSamlMetadataHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleSsoOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/v1/auth/sso/saml/{id}/metadata", f)
}

// NewSamlMetadataHandler creates a HTTP handler which loads the HTTP request
// and calls the "sso" service "saml_metadata" endpoint.
func NewSamlMetadataHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeSamlMetadataRequest(mux, decoder)
		encodeResponse = EncodeSamlMetadataResponse(encoder)
		encodeError    = EncodeSamlMetadataError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "saml_metadata")
		ctx = context.WithValue(ctx, goa.ServiceKey, "sso")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountSamlAcsHandler configures the mux to serve the "sso" service "saml_acs"
// endpoint.
func MountSamlAcsHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleSsoOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/v1/auth/sso/saml/{id}/acs", f)
}

// NewSamlAcsHandler creates a HTTP handler which loads the HTTP request and
// calls the "sso" service "saml_acs" endpoint.
func NewSamlAcsHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeSamlAcsRequest(mux, decoder)
		encodeResponse = EncodeSamlAcsResponse(encoder)
		encodeError    = EncodeSamlAcsError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "saml_acs")
		ctx = context.WithValue(ctx, goa.ServiceKey, "sso")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountCORSHandler configures the mux to serve the CORS endpoints for the
// service sso.
func MountCORSHandler(mux goahttp.Muxer, h http.Handler) {
	h = HandleSsoOrigin(h)
	mux.Handle("OPTIONS", "/v1/auth/sso/providers", h.ServeHTTP)
	mux.Handle("OPTIONS", "/v1/auth/sso/providers/{provider}", h.ServeHTTP)
	mux.Handle("OPTIONS", "/v1/auth/sso/callback/{provider}", h.ServeHTTP)
	mux.Handle("OPTIONS", "/v1/auth/sso/identity-providers", h.ServeHTTP)
	mux.Handle("OPTIONS", "/v1/auth/sso/identity-providers/{id}", h.ServeHTTP)
	mux.Handle("OPTIONS", "/v1/auth/sso/saml/{id}/metadata", h.ServeHTTP)
	mux.Handle("OPTIONS", "/v1/auth/sso/saml/{id}/acs", h.ServeHTTP)
}

// NewCORSHandler creates a HTTP handler which returns a simple 204 response.
func NewCORSHandler() http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		w.WriteHeader(204)
	})
}

// HandleSsoOrigin applies the CORS response headers corresponding to the
// origin for the service sso.
func HandleSsoOrigin(h http.Handler) http.Handler {
	spec1 := regexp.MustCompile(".*localhost.*")
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		origin := r.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			h.ServeHTTP(w, r)
			return
		}
		if cors.MatchOrigin(origin, "*.frank.com") {
			w.Header().Set("Access-Control-Allow-Origin", origin)
			w.Header().Set("Vary", "Origin")
			w.Header().Set("Access-Control-Max-Age", "100")
			w.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := r.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				w.Header().Set("Access-Control-Allow-Headers", "X-Shared-Secret, X-Api-Version")
				w.WriteHeader(204)
				return
			}
			h.ServeHTTP(w, r)
			return
		}
		if cors.MatchOriginRegexp(origin, spec1) {
			w.Header().Set("Access-Control-Allow-Origin", origin)
			w.Header().Set("Vary", "Origin")
			w.Header().Set("Access-Control-Expose-Headers", "X-Request-Id")
			w.Header().Set("Access-Control-Max-Age", "600")
			w.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := r.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				w.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS")
				w.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
				w.WriteHeader(204)
				return
			}
			h.ServeHTTP(w, r)
			return
		}
		if cors.MatchOrigin(origin, "localhost") {
			w.Header().Set("Access-Control-Allow-Origin", origin)
			w.Header().Set("Vary", "Origin")
			if acrm := r.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				w.WriteHeader(204)
				return
			}
			h.ServeHTTP(w, r)
			return
		}
		h.ServeHTTP(w, r)
		return
	})
}
