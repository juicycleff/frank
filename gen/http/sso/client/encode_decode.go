// Code generated by goa v3.20.0, DO NOT EDIT.
//
// sso HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/juicycleff/frank/design -o .

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	sso "github.com/juicycleff/frank/gen/sso"
	goahttp "goa.design/goa/v3/http"
)

// BuildListProvidersRequest instantiates a HTTP request object with method and
// path set to call the "sso" service "list_providers" endpoint
func (c *Client) BuildListProvidersRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListProvidersSsoPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("sso", "list_providers", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeListProvidersRequest returns an encoder for requests sent to the sso
// list_providers server.
func EncodeListProvidersRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*sso.ListProvidersPayload)
		if !ok {
			return goahttp.ErrInvalidType("sso", "list_providers", "*sso.ListProvidersPayload", v)
		}
		if p.Oauth2 != nil {
			head := *p.Oauth2
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		if p.XAPIKey != nil {
			head := *p.XAPIKey
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		if p.JWT != nil {
			head := *p.JWT
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		values := req.URL.Query()
		if p.OrganizationID != nil {
			values.Add("organization_id", *p.OrganizationID)
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeListProvidersResponse returns a decoder for responses returned by the
// sso list_providers endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeListProvidersResponse may return the following errors:
//   - "bad_request" (type *sso.BadRequestError): http.StatusBadRequest
//   - "conflict" (type *sso.ConflictError): http.StatusConflict
//   - "forbidden" (type *sso.ForbiddenError): http.StatusForbidden
//   - "internal_error" (type *sso.InternalServerError): http.StatusInternalServerError
//   - "not_found" (type *sso.NotFoundError): http.StatusNotFound
//   - "unauthorized" (type *sso.UnauthorizedError): http.StatusUnauthorized
//   - error: internal error
func DecodeListProvidersResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListProvidersResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sso", "list_providers", err)
			}
			err = ValidateListProvidersResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("sso", "list_providers", err)
			}
			res := NewListProvidersResultOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body ListProvidersBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sso", "list_providers", err)
			}
			err = ValidateListProvidersBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("sso", "list_providers", err)
			}
			return nil, NewListProvidersBadRequest(&body)
		case http.StatusConflict:
			var (
				body ListProvidersConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sso", "list_providers", err)
			}
			err = ValidateListProvidersConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("sso", "list_providers", err)
			}
			return nil, NewListProvidersConflict(&body)
		case http.StatusForbidden:
			var (
				body ListProvidersForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sso", "list_providers", err)
			}
			err = ValidateListProvidersForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("sso", "list_providers", err)
			}
			return nil, NewListProvidersForbidden(&body)
		case http.StatusInternalServerError:
			var (
				body ListProvidersInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sso", "list_providers", err)
			}
			err = ValidateListProvidersInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("sso", "list_providers", err)
			}
			return nil, NewListProvidersInternalError(&body)
		case http.StatusNotFound:
			var (
				body ListProvidersNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sso", "list_providers", err)
			}
			err = ValidateListProvidersNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("sso", "list_providers", err)
			}
			return nil, NewListProvidersNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body ListProvidersUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sso", "list_providers", err)
			}
			err = ValidateListProvidersUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("sso", "list_providers", err)
			}
			return nil, NewListProvidersUnauthorized(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("sso", "list_providers", resp.StatusCode, string(body))
		}
	}
}

// BuildProviderAuthRequest instantiates a HTTP request object with method and
// path set to call the "sso" service "provider_auth" endpoint
func (c *Client) BuildProviderAuthRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		provider string
	)
	{
		p, ok := v.(*sso.ProviderAuthPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("sso", "provider_auth", "*sso.ProviderAuthPayload", v)
		}
		provider = p.Provider
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ProviderAuthSsoPath(provider)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("sso", "provider_auth", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeProviderAuthRequest returns an encoder for requests sent to the sso
// provider_auth server.
func EncodeProviderAuthRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*sso.ProviderAuthPayload)
		if !ok {
			return goahttp.ErrInvalidType("sso", "provider_auth", "*sso.ProviderAuthPayload", v)
		}
		if p.Oauth2 != nil {
			head := *p.Oauth2
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		if p.XAPIKey != nil {
			head := *p.XAPIKey
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		if p.JWT != nil {
			head := *p.JWT
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		values := req.URL.Query()
		if p.RedirectURI != nil {
			values.Add("redirect_uri", *p.RedirectURI)
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeProviderAuthResponse returns a decoder for responses returned by the
// sso provider_auth endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeProviderAuthResponse may return the following errors:
//   - "bad_request" (type *sso.BadRequestError): http.StatusBadRequest
//   - "conflict" (type *sso.ConflictError): http.StatusConflict
//   - "forbidden" (type *sso.ForbiddenError): http.StatusForbidden
//   - "internal_error" (type *sso.InternalServerError): http.StatusInternalServerError
//   - "not_found" (type *sso.NotFoundError): http.StatusNotFound
//   - "unauthorized" (type *sso.UnauthorizedError): http.StatusUnauthorized
//   - error: internal error
func DecodeProviderAuthResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusTemporaryRedirect:
			return nil, nil
		case http.StatusBadRequest:
			var (
				body ProviderAuthBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sso", "provider_auth", err)
			}
			err = ValidateProviderAuthBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("sso", "provider_auth", err)
			}
			return nil, NewProviderAuthBadRequest(&body)
		case http.StatusConflict:
			var (
				body ProviderAuthConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sso", "provider_auth", err)
			}
			err = ValidateProviderAuthConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("sso", "provider_auth", err)
			}
			return nil, NewProviderAuthConflict(&body)
		case http.StatusForbidden:
			var (
				body ProviderAuthForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sso", "provider_auth", err)
			}
			err = ValidateProviderAuthForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("sso", "provider_auth", err)
			}
			return nil, NewProviderAuthForbidden(&body)
		case http.StatusInternalServerError:
			var (
				body ProviderAuthInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sso", "provider_auth", err)
			}
			err = ValidateProviderAuthInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("sso", "provider_auth", err)
			}
			return nil, NewProviderAuthInternalError(&body)
		case http.StatusNotFound:
			var (
				body ProviderAuthNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sso", "provider_auth", err)
			}
			err = ValidateProviderAuthNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("sso", "provider_auth", err)
			}
			return nil, NewProviderAuthNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body ProviderAuthUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sso", "provider_auth", err)
			}
			err = ValidateProviderAuthUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("sso", "provider_auth", err)
			}
			return nil, NewProviderAuthUnauthorized(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("sso", "provider_auth", resp.StatusCode, string(body))
		}
	}
}

// BuildProviderCallbackRequest instantiates a HTTP request object with method
// and path set to call the "sso" service "provider_callback" endpoint
func (c *Client) BuildProviderCallbackRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		provider string
	)
	{
		p, ok := v.(*sso.ProviderCallbackPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("sso", "provider_callback", "*sso.ProviderCallbackPayload", v)
		}
		provider = p.Provider
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ProviderCallbackSsoPath(provider)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("sso", "provider_callback", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeProviderCallbackRequest returns an encoder for requests sent to the
// sso provider_callback server.
func EncodeProviderCallbackRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*sso.ProviderCallbackPayload)
		if !ok {
			return goahttp.ErrInvalidType("sso", "provider_callback", "*sso.ProviderCallbackPayload", v)
		}
		if p.Oauth2 != nil {
			head := *p.Oauth2
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		if p.XAPIKey != nil {
			head := *p.XAPIKey
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		if p.JWT != nil {
			head := *p.JWT
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		values := req.URL.Query()
		if p.Code != nil {
			values.Add("code", *p.Code)
		}
		if p.State != nil {
			values.Add("state", *p.State)
		}
		if p.SAMLResponse != nil {
			values.Add("SAMLResponse", *p.SAMLResponse)
		}
		if p.RelayState != nil {
			values.Add("RelayState", *p.RelayState)
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeProviderCallbackResponse returns a decoder for responses returned by
// the sso provider_callback endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeProviderCallbackResponse may return the following errors:
//   - "bad_request" (type *sso.BadRequestError): http.StatusBadRequest
//   - "conflict" (type *sso.ConflictError): http.StatusConflict
//   - "forbidden" (type *sso.ForbiddenError): http.StatusForbidden
//   - "internal_error" (type *sso.InternalServerError): http.StatusInternalServerError
//   - "not_found" (type *sso.NotFoundError): http.StatusNotFound
//   - "unauthorized" (type *sso.UnauthorizedError): http.StatusUnauthorized
//   - error: internal error
func DecodeProviderCallbackResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ProviderCallbackResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sso", "provider_callback", err)
			}
			err = ValidateProviderCallbackResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("sso", "provider_callback", err)
			}
			res := NewProviderCallbackResultOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body ProviderCallbackBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sso", "provider_callback", err)
			}
			err = ValidateProviderCallbackBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("sso", "provider_callback", err)
			}
			return nil, NewProviderCallbackBadRequest(&body)
		case http.StatusConflict:
			var (
				body ProviderCallbackConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sso", "provider_callback", err)
			}
			err = ValidateProviderCallbackConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("sso", "provider_callback", err)
			}
			return nil, NewProviderCallbackConflict(&body)
		case http.StatusForbidden:
			var (
				body ProviderCallbackForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sso", "provider_callback", err)
			}
			err = ValidateProviderCallbackForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("sso", "provider_callback", err)
			}
			return nil, NewProviderCallbackForbidden(&body)
		case http.StatusInternalServerError:
			var (
				body ProviderCallbackInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sso", "provider_callback", err)
			}
			err = ValidateProviderCallbackInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("sso", "provider_callback", err)
			}
			return nil, NewProviderCallbackInternalError(&body)
		case http.StatusNotFound:
			var (
				body ProviderCallbackNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sso", "provider_callback", err)
			}
			err = ValidateProviderCallbackNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("sso", "provider_callback", err)
			}
			return nil, NewProviderCallbackNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body ProviderCallbackUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sso", "provider_callback", err)
			}
			err = ValidateProviderCallbackUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("sso", "provider_callback", err)
			}
			return nil, NewProviderCallbackUnauthorized(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("sso", "provider_callback", resp.StatusCode, string(body))
		}
	}
}

// BuildListIdentityProvidersRequest instantiates a HTTP request object with
// method and path set to call the "sso" service "list_identity_providers"
// endpoint
func (c *Client) BuildListIdentityProvidersRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListIdentityProvidersSsoPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("sso", "list_identity_providers", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeListIdentityProvidersRequest returns an encoder for requests sent to
// the sso list_identity_providers server.
func EncodeListIdentityProvidersRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*sso.ListIdentityProvidersPayload)
		if !ok {
			return goahttp.ErrInvalidType("sso", "list_identity_providers", "*sso.ListIdentityProvidersPayload", v)
		}
		if p.JWT != nil {
			head := *p.JWT
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		values := req.URL.Query()
		values.Add("organization_id", p.OrganizationID)
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeListIdentityProvidersResponse returns a decoder for responses returned
// by the sso list_identity_providers endpoint. restoreBody controls whether
// the response body should be restored after having been read.
// DecodeListIdentityProvidersResponse may return the following errors:
//   - "bad_request" (type *sso.BadRequestError): http.StatusBadRequest
//   - "conflict" (type *sso.ConflictError): http.StatusConflict
//   - "forbidden" (type *sso.ForbiddenError): http.StatusForbidden
//   - "internal_error" (type *sso.InternalServerError): http.StatusInternalServerError
//   - "not_found" (type *sso.NotFoundError): http.StatusNotFound
//   - "unauthorized" (type *sso.UnauthorizedError): http.StatusUnauthorized
//   - error: internal error
func DecodeListIdentityProvidersResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListIdentityProvidersResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sso", "list_identity_providers", err)
			}
			err = ValidateListIdentityProvidersResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("sso", "list_identity_providers", err)
			}
			res := NewListIdentityProvidersResultOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body ListIdentityProvidersBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sso", "list_identity_providers", err)
			}
			err = ValidateListIdentityProvidersBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("sso", "list_identity_providers", err)
			}
			return nil, NewListIdentityProvidersBadRequest(&body)
		case http.StatusConflict:
			var (
				body ListIdentityProvidersConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sso", "list_identity_providers", err)
			}
			err = ValidateListIdentityProvidersConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("sso", "list_identity_providers", err)
			}
			return nil, NewListIdentityProvidersConflict(&body)
		case http.StatusForbidden:
			var (
				body ListIdentityProvidersForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sso", "list_identity_providers", err)
			}
			err = ValidateListIdentityProvidersForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("sso", "list_identity_providers", err)
			}
			return nil, NewListIdentityProvidersForbidden(&body)
		case http.StatusInternalServerError:
			var (
				body ListIdentityProvidersInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sso", "list_identity_providers", err)
			}
			err = ValidateListIdentityProvidersInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("sso", "list_identity_providers", err)
			}
			return nil, NewListIdentityProvidersInternalError(&body)
		case http.StatusNotFound:
			var (
				body ListIdentityProvidersNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sso", "list_identity_providers", err)
			}
			err = ValidateListIdentityProvidersNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("sso", "list_identity_providers", err)
			}
			return nil, NewListIdentityProvidersNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body ListIdentityProvidersUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sso", "list_identity_providers", err)
			}
			err = ValidateListIdentityProvidersUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("sso", "list_identity_providers", err)
			}
			return nil, NewListIdentityProvidersUnauthorized(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("sso", "list_identity_providers", resp.StatusCode, string(body))
		}
	}
}

// BuildCreateIdentityProviderRequest instantiates a HTTP request object with
// method and path set to call the "sso" service "create_identity_provider"
// endpoint
func (c *Client) BuildCreateIdentityProviderRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateIdentityProviderSsoPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("sso", "create_identity_provider", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateIdentityProviderRequest returns an encoder for requests sent to
// the sso create_identity_provider server.
func EncodeCreateIdentityProviderRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*sso.CreateIdentityProviderPayload)
		if !ok {
			return goahttp.ErrInvalidType("sso", "create_identity_provider", "*sso.CreateIdentityProviderPayload", v)
		}
		if p.JWT != nil {
			head := *p.JWT
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		body := NewCreateIdentityProviderRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("sso", "create_identity_provider", err)
		}
		return nil
	}
}

// DecodeCreateIdentityProviderResponse returns a decoder for responses
// returned by the sso create_identity_provider endpoint. restoreBody controls
// whether the response body should be restored after having been read.
// DecodeCreateIdentityProviderResponse may return the following errors:
//   - "bad_request" (type *sso.BadRequestError): http.StatusBadRequest
//   - "conflict" (type *sso.ConflictError): http.StatusConflict
//   - "forbidden" (type *sso.ForbiddenError): http.StatusForbidden
//   - "internal_error" (type *sso.InternalServerError): http.StatusInternalServerError
//   - "not_found" (type *sso.NotFoundError): http.StatusNotFound
//   - "unauthorized" (type *sso.UnauthorizedError): http.StatusUnauthorized
//   - error: internal error
func DecodeCreateIdentityProviderResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body CreateIdentityProviderResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sso", "create_identity_provider", err)
			}
			err = ValidateCreateIdentityProviderResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("sso", "create_identity_provider", err)
			}
			res := NewCreateIdentityProviderIdentityProviderResponseCreated(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body CreateIdentityProviderBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sso", "create_identity_provider", err)
			}
			err = ValidateCreateIdentityProviderBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("sso", "create_identity_provider", err)
			}
			return nil, NewCreateIdentityProviderBadRequest(&body)
		case http.StatusConflict:
			var (
				body CreateIdentityProviderConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sso", "create_identity_provider", err)
			}
			err = ValidateCreateIdentityProviderConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("sso", "create_identity_provider", err)
			}
			return nil, NewCreateIdentityProviderConflict(&body)
		case http.StatusForbidden:
			var (
				body CreateIdentityProviderForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sso", "create_identity_provider", err)
			}
			err = ValidateCreateIdentityProviderForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("sso", "create_identity_provider", err)
			}
			return nil, NewCreateIdentityProviderForbidden(&body)
		case http.StatusInternalServerError:
			var (
				body CreateIdentityProviderInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sso", "create_identity_provider", err)
			}
			err = ValidateCreateIdentityProviderInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("sso", "create_identity_provider", err)
			}
			return nil, NewCreateIdentityProviderInternalError(&body)
		case http.StatusNotFound:
			var (
				body CreateIdentityProviderNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sso", "create_identity_provider", err)
			}
			err = ValidateCreateIdentityProviderNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("sso", "create_identity_provider", err)
			}
			return nil, NewCreateIdentityProviderNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body CreateIdentityProviderUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sso", "create_identity_provider", err)
			}
			err = ValidateCreateIdentityProviderUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("sso", "create_identity_provider", err)
			}
			return nil, NewCreateIdentityProviderUnauthorized(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("sso", "create_identity_provider", resp.StatusCode, string(body))
		}
	}
}

// BuildGetIdentityProviderRequest instantiates a HTTP request object with
// method and path set to call the "sso" service "get_identity_provider"
// endpoint
func (c *Client) BuildGetIdentityProviderRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(*sso.GetIdentityProviderPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("sso", "get_identity_provider", "*sso.GetIdentityProviderPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetIdentityProviderSsoPath(id)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("sso", "get_identity_provider", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetIdentityProviderRequest returns an encoder for requests sent to the
// sso get_identity_provider server.
func EncodeGetIdentityProviderRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*sso.GetIdentityProviderPayload)
		if !ok {
			return goahttp.ErrInvalidType("sso", "get_identity_provider", "*sso.GetIdentityProviderPayload", v)
		}
		if p.JWT != nil {
			head := *p.JWT
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeGetIdentityProviderResponse returns a decoder for responses returned
// by the sso get_identity_provider endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeGetIdentityProviderResponse may return the following errors:
//   - "bad_request" (type *sso.BadRequestError): http.StatusBadRequest
//   - "conflict" (type *sso.ConflictError): http.StatusConflict
//   - "forbidden" (type *sso.ForbiddenError): http.StatusForbidden
//   - "internal_error" (type *sso.InternalServerError): http.StatusInternalServerError
//   - "not_found" (type *sso.NotFoundError): http.StatusNotFound
//   - "unauthorized" (type *sso.UnauthorizedError): http.StatusUnauthorized
//   - error: internal error
func DecodeGetIdentityProviderResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetIdentityProviderResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sso", "get_identity_provider", err)
			}
			err = ValidateGetIdentityProviderResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("sso", "get_identity_provider", err)
			}
			res := NewGetIdentityProviderIdentityProviderResponseOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body GetIdentityProviderBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sso", "get_identity_provider", err)
			}
			err = ValidateGetIdentityProviderBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("sso", "get_identity_provider", err)
			}
			return nil, NewGetIdentityProviderBadRequest(&body)
		case http.StatusConflict:
			var (
				body GetIdentityProviderConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sso", "get_identity_provider", err)
			}
			err = ValidateGetIdentityProviderConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("sso", "get_identity_provider", err)
			}
			return nil, NewGetIdentityProviderConflict(&body)
		case http.StatusForbidden:
			var (
				body GetIdentityProviderForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sso", "get_identity_provider", err)
			}
			err = ValidateGetIdentityProviderForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("sso", "get_identity_provider", err)
			}
			return nil, NewGetIdentityProviderForbidden(&body)
		case http.StatusInternalServerError:
			var (
				body GetIdentityProviderInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sso", "get_identity_provider", err)
			}
			err = ValidateGetIdentityProviderInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("sso", "get_identity_provider", err)
			}
			return nil, NewGetIdentityProviderInternalError(&body)
		case http.StatusNotFound:
			var (
				body GetIdentityProviderNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sso", "get_identity_provider", err)
			}
			err = ValidateGetIdentityProviderNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("sso", "get_identity_provider", err)
			}
			return nil, NewGetIdentityProviderNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body GetIdentityProviderUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sso", "get_identity_provider", err)
			}
			err = ValidateGetIdentityProviderUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("sso", "get_identity_provider", err)
			}
			return nil, NewGetIdentityProviderUnauthorized(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("sso", "get_identity_provider", resp.StatusCode, string(body))
		}
	}
}

// BuildUpdateIdentityProviderRequest instantiates a HTTP request object with
// method and path set to call the "sso" service "update_identity_provider"
// endpoint
func (c *Client) BuildUpdateIdentityProviderRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(*sso.UpdateIdentityProviderPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("sso", "update_identity_provider", "*sso.UpdateIdentityProviderPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpdateIdentityProviderSsoPath(id)}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("sso", "update_identity_provider", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpdateIdentityProviderRequest returns an encoder for requests sent to
// the sso update_identity_provider server.
func EncodeUpdateIdentityProviderRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*sso.UpdateIdentityProviderPayload)
		if !ok {
			return goahttp.ErrInvalidType("sso", "update_identity_provider", "*sso.UpdateIdentityProviderPayload", v)
		}
		if p.JWT != nil {
			head := *p.JWT
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		body := NewUpdateIdentityProviderRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("sso", "update_identity_provider", err)
		}
		return nil
	}
}

// DecodeUpdateIdentityProviderResponse returns a decoder for responses
// returned by the sso update_identity_provider endpoint. restoreBody controls
// whether the response body should be restored after having been read.
// DecodeUpdateIdentityProviderResponse may return the following errors:
//   - "bad_request" (type *sso.BadRequestError): http.StatusBadRequest
//   - "conflict" (type *sso.ConflictError): http.StatusConflict
//   - "forbidden" (type *sso.ForbiddenError): http.StatusForbidden
//   - "internal_error" (type *sso.InternalServerError): http.StatusInternalServerError
//   - "not_found" (type *sso.NotFoundError): http.StatusNotFound
//   - "unauthorized" (type *sso.UnauthorizedError): http.StatusUnauthorized
//   - error: internal error
func DecodeUpdateIdentityProviderResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body UpdateIdentityProviderResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sso", "update_identity_provider", err)
			}
			err = ValidateUpdateIdentityProviderResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("sso", "update_identity_provider", err)
			}
			res := NewUpdateIdentityProviderIdentityProviderResponseOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body UpdateIdentityProviderBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sso", "update_identity_provider", err)
			}
			err = ValidateUpdateIdentityProviderBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("sso", "update_identity_provider", err)
			}
			return nil, NewUpdateIdentityProviderBadRequest(&body)
		case http.StatusConflict:
			var (
				body UpdateIdentityProviderConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sso", "update_identity_provider", err)
			}
			err = ValidateUpdateIdentityProviderConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("sso", "update_identity_provider", err)
			}
			return nil, NewUpdateIdentityProviderConflict(&body)
		case http.StatusForbidden:
			var (
				body UpdateIdentityProviderForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sso", "update_identity_provider", err)
			}
			err = ValidateUpdateIdentityProviderForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("sso", "update_identity_provider", err)
			}
			return nil, NewUpdateIdentityProviderForbidden(&body)
		case http.StatusInternalServerError:
			var (
				body UpdateIdentityProviderInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sso", "update_identity_provider", err)
			}
			err = ValidateUpdateIdentityProviderInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("sso", "update_identity_provider", err)
			}
			return nil, NewUpdateIdentityProviderInternalError(&body)
		case http.StatusNotFound:
			var (
				body UpdateIdentityProviderNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sso", "update_identity_provider", err)
			}
			err = ValidateUpdateIdentityProviderNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("sso", "update_identity_provider", err)
			}
			return nil, NewUpdateIdentityProviderNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body UpdateIdentityProviderUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sso", "update_identity_provider", err)
			}
			err = ValidateUpdateIdentityProviderUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("sso", "update_identity_provider", err)
			}
			return nil, NewUpdateIdentityProviderUnauthorized(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("sso", "update_identity_provider", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteIdentityProviderRequest instantiates a HTTP request object with
// method and path set to call the "sso" service "delete_identity_provider"
// endpoint
func (c *Client) BuildDeleteIdentityProviderRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(*sso.DeleteIdentityProviderPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("sso", "delete_identity_provider", "*sso.DeleteIdentityProviderPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteIdentityProviderSsoPath(id)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("sso", "delete_identity_provider", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDeleteIdentityProviderRequest returns an encoder for requests sent to
// the sso delete_identity_provider server.
func EncodeDeleteIdentityProviderRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*sso.DeleteIdentityProviderPayload)
		if !ok {
			return goahttp.ErrInvalidType("sso", "delete_identity_provider", "*sso.DeleteIdentityProviderPayload", v)
		}
		if p.JWT != nil {
			head := *p.JWT
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeDeleteIdentityProviderResponse returns a decoder for responses
// returned by the sso delete_identity_provider endpoint. restoreBody controls
// whether the response body should be restored after having been read.
// DecodeDeleteIdentityProviderResponse may return the following errors:
//   - "bad_request" (type *sso.BadRequestError): http.StatusBadRequest
//   - "conflict" (type *sso.ConflictError): http.StatusConflict
//   - "forbidden" (type *sso.ForbiddenError): http.StatusForbidden
//   - "internal_error" (type *sso.InternalServerError): http.StatusInternalServerError
//   - "not_found" (type *sso.NotFoundError): http.StatusNotFound
//   - "unauthorized" (type *sso.UnauthorizedError): http.StatusUnauthorized
//   - error: internal error
func DecodeDeleteIdentityProviderResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			return nil, nil
		case http.StatusBadRequest:
			var (
				body DeleteIdentityProviderBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sso", "delete_identity_provider", err)
			}
			err = ValidateDeleteIdentityProviderBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("sso", "delete_identity_provider", err)
			}
			return nil, NewDeleteIdentityProviderBadRequest(&body)
		case http.StatusConflict:
			var (
				body DeleteIdentityProviderConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sso", "delete_identity_provider", err)
			}
			err = ValidateDeleteIdentityProviderConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("sso", "delete_identity_provider", err)
			}
			return nil, NewDeleteIdentityProviderConflict(&body)
		case http.StatusForbidden:
			var (
				body DeleteIdentityProviderForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sso", "delete_identity_provider", err)
			}
			err = ValidateDeleteIdentityProviderForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("sso", "delete_identity_provider", err)
			}
			return nil, NewDeleteIdentityProviderForbidden(&body)
		case http.StatusInternalServerError:
			var (
				body DeleteIdentityProviderInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sso", "delete_identity_provider", err)
			}
			err = ValidateDeleteIdentityProviderInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("sso", "delete_identity_provider", err)
			}
			return nil, NewDeleteIdentityProviderInternalError(&body)
		case http.StatusNotFound:
			var (
				body DeleteIdentityProviderNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sso", "delete_identity_provider", err)
			}
			err = ValidateDeleteIdentityProviderNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("sso", "delete_identity_provider", err)
			}
			return nil, NewDeleteIdentityProviderNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body DeleteIdentityProviderUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sso", "delete_identity_provider", err)
			}
			err = ValidateDeleteIdentityProviderUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("sso", "delete_identity_provider", err)
			}
			return nil, NewDeleteIdentityProviderUnauthorized(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("sso", "delete_identity_provider", resp.StatusCode, string(body))
		}
	}
}

// BuildSamlMetadataRequest instantiates a HTTP request object with method and
// path set to call the "sso" service "saml_metadata" endpoint
func (c *Client) BuildSamlMetadataRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(*sso.SamlMetadataPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("sso", "saml_metadata", "*sso.SamlMetadataPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: SamlMetadataSsoPath(id)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("sso", "saml_metadata", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeSamlMetadataResponse returns a decoder for responses returned by the
// sso saml_metadata endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeSamlMetadataResponse may return the following errors:
//   - "bad_request" (type *sso.BadRequestError): http.StatusBadRequest
//   - "conflict" (type *sso.ConflictError): http.StatusConflict
//   - "forbidden" (type *sso.ForbiddenError): http.StatusForbidden
//   - "internal_error" (type *sso.InternalServerError): http.StatusInternalServerError
//   - "not_found" (type *sso.NotFoundError): http.StatusNotFound
//   - "unauthorized" (type *sso.UnauthorizedError): http.StatusUnauthorized
//   - error: internal error
func DecodeSamlMetadataResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body SamlMetadataResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sso", "saml_metadata", err)
			}
			err = ValidateSamlMetadataResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("sso", "saml_metadata", err)
			}
			res := NewSamlMetadataResultOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body SamlMetadataBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sso", "saml_metadata", err)
			}
			err = ValidateSamlMetadataBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("sso", "saml_metadata", err)
			}
			return nil, NewSamlMetadataBadRequest(&body)
		case http.StatusConflict:
			var (
				body SamlMetadataConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sso", "saml_metadata", err)
			}
			err = ValidateSamlMetadataConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("sso", "saml_metadata", err)
			}
			return nil, NewSamlMetadataConflict(&body)
		case http.StatusForbidden:
			var (
				body SamlMetadataForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sso", "saml_metadata", err)
			}
			err = ValidateSamlMetadataForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("sso", "saml_metadata", err)
			}
			return nil, NewSamlMetadataForbidden(&body)
		case http.StatusInternalServerError:
			var (
				body SamlMetadataInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sso", "saml_metadata", err)
			}
			err = ValidateSamlMetadataInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("sso", "saml_metadata", err)
			}
			return nil, NewSamlMetadataInternalError(&body)
		case http.StatusNotFound:
			var (
				body SamlMetadataNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sso", "saml_metadata", err)
			}
			err = ValidateSamlMetadataNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("sso", "saml_metadata", err)
			}
			return nil, NewSamlMetadataNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body SamlMetadataUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sso", "saml_metadata", err)
			}
			err = ValidateSamlMetadataUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("sso", "saml_metadata", err)
			}
			return nil, NewSamlMetadataUnauthorized(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("sso", "saml_metadata", resp.StatusCode, string(body))
		}
	}
}

// BuildSamlAcsRequest instantiates a HTTP request object with method and path
// set to call the "sso" service "saml_acs" endpoint
func (c *Client) BuildSamlAcsRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(*sso.SamlAcsPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("sso", "saml_acs", "*sso.SamlAcsPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: SamlAcsSsoPath(id)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("sso", "saml_acs", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeSamlAcsResponse returns a decoder for responses returned by the sso
// saml_acs endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeSamlAcsResponse may return the following errors:
//   - "bad_request" (type *sso.BadRequestError): http.StatusBadRequest
//   - "conflict" (type *sso.ConflictError): http.StatusConflict
//   - "forbidden" (type *sso.ForbiddenError): http.StatusForbidden
//   - "internal_error" (type *sso.InternalServerError): http.StatusInternalServerError
//   - "not_found" (type *sso.NotFoundError): http.StatusNotFound
//   - "unauthorized" (type *sso.UnauthorizedError): http.StatusUnauthorized
//   - error: internal error
func DecodeSamlAcsResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sso", "saml_acs", err)
			}
			return body, nil
		case http.StatusBadRequest:
			var (
				body SamlAcsBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sso", "saml_acs", err)
			}
			err = ValidateSamlAcsBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("sso", "saml_acs", err)
			}
			return nil, NewSamlAcsBadRequest(&body)
		case http.StatusConflict:
			var (
				body SamlAcsConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sso", "saml_acs", err)
			}
			err = ValidateSamlAcsConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("sso", "saml_acs", err)
			}
			return nil, NewSamlAcsConflict(&body)
		case http.StatusForbidden:
			var (
				body SamlAcsForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sso", "saml_acs", err)
			}
			err = ValidateSamlAcsForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("sso", "saml_acs", err)
			}
			return nil, NewSamlAcsForbidden(&body)
		case http.StatusInternalServerError:
			var (
				body SamlAcsInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sso", "saml_acs", err)
			}
			err = ValidateSamlAcsInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("sso", "saml_acs", err)
			}
			return nil, NewSamlAcsInternalError(&body)
		case http.StatusNotFound:
			var (
				body SamlAcsNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sso", "saml_acs", err)
			}
			err = ValidateSamlAcsNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("sso", "saml_acs", err)
			}
			return nil, NewSamlAcsNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body SamlAcsUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sso", "saml_acs", err)
			}
			err = ValidateSamlAcsUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("sso", "saml_acs", err)
			}
			return nil, NewSamlAcsUnauthorized(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("sso", "saml_acs", resp.StatusCode, string(body))
		}
	}
}

// unmarshalSSOProviderResponseBodyToSsoSSOProvider builds a value of type
// *sso.SSOProvider from a value of type *SSOProviderResponseBody.
func unmarshalSSOProviderResponseBodyToSsoSSOProvider(v *SSOProviderResponseBody) *sso.SSOProvider {
	res := &sso.SSOProvider{
		ID:      *v.ID,
		Name:    *v.Name,
		Type:    *v.Type,
		IconURL: v.IconURL,
	}

	return res
}

// unmarshalUserResponseBodyToSsoUser builds a value of type *sso.User from a
// value of type *UserResponseBody.
func unmarshalUserResponseBodyToSsoUser(v *UserResponseBody) *sso.User {
	if v == nil {
		return nil
	}
	res := &sso.User{
		ID:              *v.ID,
		Email:           *v.Email,
		FirstName:       v.FirstName,
		LastName:        v.LastName,
		EmailVerified:   *v.EmailVerified,
		PhoneNumber:     v.PhoneNumber,
		PhoneVerified:   v.PhoneVerified,
		ProfileImageURL: v.ProfileImageURL,
		Locale:          v.Locale,
		Active:          *v.Active,
		CreatedAt:       *v.CreatedAt,
		UpdatedAt:       *v.UpdatedAt,
	}
	if v.Metadata != nil {
		res.Metadata = make(map[string]any, len(v.Metadata))
		for key, val := range v.Metadata {
			tk := key
			tv := val
			res.Metadata[tk] = tv
		}
	}

	return res
}

// unmarshalIdentityProviderResponseResponseBodyToSsoIdentityProviderResponse
// builds a value of type *sso.IdentityProviderResponse from a value of type
// *IdentityProviderResponseResponseBody.
func unmarshalIdentityProviderResponseResponseBodyToSsoIdentityProviderResponse(v *IdentityProviderResponseResponseBody) *sso.IdentityProviderResponse {
	res := &sso.IdentityProviderResponse{
		ID:                    *v.ID,
		Name:                  *v.Name,
		OrganizationID:        *v.OrganizationID,
		ProviderType:          *v.ProviderType,
		ClientID:              v.ClientID,
		Issuer:                v.Issuer,
		AuthorizationEndpoint: v.AuthorizationEndpoint,
		TokenEndpoint:         v.TokenEndpoint,
		UserinfoEndpoint:      v.UserinfoEndpoint,
		JwksURI:               v.JwksURI,
		MetadataURL:           v.MetadataURL,
		RedirectURI:           v.RedirectURI,
		Active:                *v.Active,
		Primary:               v.Primary,
		CreatedAt:             *v.CreatedAt,
		UpdatedAt:             v.UpdatedAt,
	}
	if v.Domains != nil {
		res.Domains = make([]string, len(v.Domains))
		for i, val := range v.Domains {
			res.Domains[i] = val
		}
	}
	if v.AttributesMapping != nil {
		res.AttributesMapping = make(map[string]string, len(v.AttributesMapping))
		for key, val := range v.AttributesMapping {
			tk := key
			tv := val
			res.AttributesMapping[tk] = tv
		}
	}

	return res
}

// marshalSsoCreateIdentityProviderRequestToCreateIdentityProviderRequestRequestBody
// builds a value of type *CreateIdentityProviderRequestRequestBody from a
// value of type *sso.CreateIdentityProviderRequest.
func marshalSsoCreateIdentityProviderRequestToCreateIdentityProviderRequestRequestBody(v *sso.CreateIdentityProviderRequest) *CreateIdentityProviderRequestRequestBody {
	res := &CreateIdentityProviderRequestRequestBody{
		Name:                  v.Name,
		ProviderType:          v.ProviderType,
		ClientID:              v.ClientID,
		ClientSecret:          v.ClientSecret,
		Issuer:                v.Issuer,
		AuthorizationEndpoint: v.AuthorizationEndpoint,
		TokenEndpoint:         v.TokenEndpoint,
		UserinfoEndpoint:      v.UserinfoEndpoint,
		JwksURI:               v.JwksURI,
		MetadataURL:           v.MetadataURL,
		RedirectURI:           v.RedirectURI,
		Certificate:           v.Certificate,
		PrivateKey:            v.PrivateKey,
		Active:                v.Active,
		Primary:               v.Primary,
	}
	{
		var zero bool
		if res.Active == zero {
			res.Active = true
		}
	}
	{
		var zero bool
		if res.Primary == zero {
			res.Primary = false
		}
	}
	if v.Domains != nil {
		res.Domains = make([]string, len(v.Domains))
		for i, val := range v.Domains {
			res.Domains[i] = val
		}
	}
	if v.AttributesMapping != nil {
		res.AttributesMapping = make(map[string]string, len(v.AttributesMapping))
		for key, val := range v.AttributesMapping {
			tk := key
			tv := val
			res.AttributesMapping[tk] = tv
		}
	}

	return res
}

// marshalCreateIdentityProviderRequestRequestBodyToSsoCreateIdentityProviderRequest
// builds a value of type *sso.CreateIdentityProviderRequest from a value of
// type *CreateIdentityProviderRequestRequestBody.
func marshalCreateIdentityProviderRequestRequestBodyToSsoCreateIdentityProviderRequest(v *CreateIdentityProviderRequestRequestBody) *sso.CreateIdentityProviderRequest {
	res := &sso.CreateIdentityProviderRequest{
		Name:                  v.Name,
		ProviderType:          v.ProviderType,
		ClientID:              v.ClientID,
		ClientSecret:          v.ClientSecret,
		Issuer:                v.Issuer,
		AuthorizationEndpoint: v.AuthorizationEndpoint,
		TokenEndpoint:         v.TokenEndpoint,
		UserinfoEndpoint:      v.UserinfoEndpoint,
		JwksURI:               v.JwksURI,
		MetadataURL:           v.MetadataURL,
		RedirectURI:           v.RedirectURI,
		Certificate:           v.Certificate,
		PrivateKey:            v.PrivateKey,
		Active:                v.Active,
		Primary:               v.Primary,
	}
	{
		var zero bool
		if res.Active == zero {
			res.Active = true
		}
	}
	{
		var zero bool
		if res.Primary == zero {
			res.Primary = false
		}
	}
	if v.Domains != nil {
		res.Domains = make([]string, len(v.Domains))
		for i, val := range v.Domains {
			res.Domains[i] = val
		}
	}
	if v.AttributesMapping != nil {
		res.AttributesMapping = make(map[string]string, len(v.AttributesMapping))
		for key, val := range v.AttributesMapping {
			tk := key
			tv := val
			res.AttributesMapping[tk] = tv
		}
	}

	return res
}

// marshalSsoUpdateIdentityProviderRequestToUpdateIdentityProviderRequestRequestBody
// builds a value of type *UpdateIdentityProviderRequestRequestBody from a
// value of type *sso.UpdateIdentityProviderRequest.
func marshalSsoUpdateIdentityProviderRequestToUpdateIdentityProviderRequestRequestBody(v *sso.UpdateIdentityProviderRequest) *UpdateIdentityProviderRequestRequestBody {
	res := &UpdateIdentityProviderRequestRequestBody{
		Name:                  v.Name,
		ClientID:              v.ClientID,
		ClientSecret:          v.ClientSecret,
		Issuer:                v.Issuer,
		AuthorizationEndpoint: v.AuthorizationEndpoint,
		TokenEndpoint:         v.TokenEndpoint,
		UserinfoEndpoint:      v.UserinfoEndpoint,
		JwksURI:               v.JwksURI,
		MetadataURL:           v.MetadataURL,
		RedirectURI:           v.RedirectURI,
		Certificate:           v.Certificate,
		PrivateKey:            v.PrivateKey,
		Active:                v.Active,
		Primary:               v.Primary,
	}
	if v.Domains != nil {
		res.Domains = make([]string, len(v.Domains))
		for i, val := range v.Domains {
			res.Domains[i] = val
		}
	}
	if v.AttributesMapping != nil {
		res.AttributesMapping = make(map[string]string, len(v.AttributesMapping))
		for key, val := range v.AttributesMapping {
			tk := key
			tv := val
			res.AttributesMapping[tk] = tv
		}
	}

	return res
}

// marshalUpdateIdentityProviderRequestRequestBodyToSsoUpdateIdentityProviderRequest
// builds a value of type *sso.UpdateIdentityProviderRequest from a value of
// type *UpdateIdentityProviderRequestRequestBody.
func marshalUpdateIdentityProviderRequestRequestBodyToSsoUpdateIdentityProviderRequest(v *UpdateIdentityProviderRequestRequestBody) *sso.UpdateIdentityProviderRequest {
	res := &sso.UpdateIdentityProviderRequest{
		Name:                  v.Name,
		ClientID:              v.ClientID,
		ClientSecret:          v.ClientSecret,
		Issuer:                v.Issuer,
		AuthorizationEndpoint: v.AuthorizationEndpoint,
		TokenEndpoint:         v.TokenEndpoint,
		UserinfoEndpoint:      v.UserinfoEndpoint,
		JwksURI:               v.JwksURI,
		MetadataURL:           v.MetadataURL,
		RedirectURI:           v.RedirectURI,
		Certificate:           v.Certificate,
		PrivateKey:            v.PrivateKey,
		Active:                v.Active,
		Primary:               v.Primary,
	}
	if v.Domains != nil {
		res.Domains = make([]string, len(v.Domains))
		for i, val := range v.Domains {
			res.Domains[i] = val
		}
	}
	if v.AttributesMapping != nil {
		res.AttributesMapping = make(map[string]string, len(v.AttributesMapping))
		for key, val := range v.AttributesMapping {
			tk := key
			tv := val
			res.AttributesMapping[tk] = tv
		}
	}

	return res
}
