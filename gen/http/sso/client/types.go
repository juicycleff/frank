// Code generated by goa v3.20.0, DO NOT EDIT.
//
// sso HTTP client types
//
// Command:
// $ goa gen github.com/juicycleff/frank/design -o .

package client

import (
	sso "github.com/juicycleff/frank/gen/sso"
	goa "goa.design/goa/v3/pkg"
)

// CreateIdentityProviderRequestBody is the type of the "sso" service
// "create_identity_provider" endpoint HTTP request body.
type CreateIdentityProviderRequestBody struct {
	// Organization ID
	OrganizationID string                                    `form:"organization_id" json:"organization_id" xml:"organization_id"`
	Provider       *CreateIdentityProviderRequestRequestBody `form:"provider" json:"provider" xml:"provider"`
}

// UpdateIdentityProviderRequestBody is the type of the "sso" service
// "update_identity_provider" endpoint HTTP request body.
type UpdateIdentityProviderRequestBody struct {
	Provider *UpdateIdentityProviderRequestRequestBody `form:"provider" json:"provider" xml:"provider"`
}

// ListProvidersResponseBody is the type of the "sso" service "list_providers"
// endpoint HTTP response body.
type ListProvidersResponseBody struct {
	Providers []*SSOProviderResponseBody `form:"providers,omitempty" json:"providers,omitempty" xml:"providers,omitempty"`
}

// ProviderCallbackResponseBody is the type of the "sso" service
// "provider_callback" endpoint HTTP response body.
type ProviderCallbackResponseBody struct {
	// Whether authentication was successful
	Authenticated *bool `form:"authenticated,omitempty" json:"authenticated,omitempty" xml:"authenticated,omitempty"`
	// User data if authentication successful
	User *UserResponseBody `form:"user,omitempty" json:"user,omitempty" xml:"user,omitempty"`
	// Message to display to the user
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// ListIdentityProvidersResponseBody is the type of the "sso" service
// "list_identity_providers" endpoint HTTP response body.
type ListIdentityProvidersResponseBody struct {
	Providers []*IdentityProviderResponseResponseBody `form:"providers,omitempty" json:"providers,omitempty" xml:"providers,omitempty"`
}

// CreateIdentityProviderResponseBody is the type of the "sso" service
// "create_identity_provider" endpoint HTTP response body.
type CreateIdentityProviderResponseBody struct {
	// Provider ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Provider name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Organization ID
	OrganizationID *string `form:"organization_id,omitempty" json:"organization_id,omitempty" xml:"organization_id,omitempty"`
	// Provider type (oauth2, oidc, saml)
	ProviderType *string `form:"provider_type,omitempty" json:"provider_type,omitempty" xml:"provider_type,omitempty"`
	// OAuth/OIDC client ID
	ClientID *string `form:"client_id,omitempty" json:"client_id,omitempty" xml:"client_id,omitempty"`
	// OIDC issuer URL
	Issuer *string `form:"issuer,omitempty" json:"issuer,omitempty" xml:"issuer,omitempty"`
	// OAuth/OIDC authorization endpoint
	AuthorizationEndpoint *string `form:"authorization_endpoint,omitempty" json:"authorization_endpoint,omitempty" xml:"authorization_endpoint,omitempty"`
	// OAuth/OIDC token endpoint
	TokenEndpoint *string `form:"token_endpoint,omitempty" json:"token_endpoint,omitempty" xml:"token_endpoint,omitempty"`
	// OIDC userinfo endpoint
	UserinfoEndpoint *string `form:"userinfo_endpoint,omitempty" json:"userinfo_endpoint,omitempty" xml:"userinfo_endpoint,omitempty"`
	// OIDC JWKS URI
	JwksURI *string `form:"jwks_uri,omitempty" json:"jwks_uri,omitempty" xml:"jwks_uri,omitempty"`
	// SAML metadata URL
	MetadataURL *string `form:"metadata_url,omitempty" json:"metadata_url,omitempty" xml:"metadata_url,omitempty"`
	// OAuth/OIDC redirect URI
	RedirectURI *string `form:"redirect_uri,omitempty" json:"redirect_uri,omitempty" xml:"redirect_uri,omitempty"`
	// Whether provider is active
	Active *bool `form:"active,omitempty" json:"active,omitempty" xml:"active,omitempty"`
	// Whether this is the primary provider
	Primary *bool `form:"primary,omitempty" json:"primary,omitempty" xml:"primary,omitempty"`
	// Allowed email domains
	Domains []string `form:"domains,omitempty" json:"domains,omitempty" xml:"domains,omitempty"`
	// Attributes mapping
	AttributesMapping map[string]string `form:"attributes_mapping,omitempty" json:"attributes_mapping,omitempty" xml:"attributes_mapping,omitempty"`
	// Creation timestamp
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// Last update timestamp
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// GetIdentityProviderResponseBody is the type of the "sso" service
// "get_identity_provider" endpoint HTTP response body.
type GetIdentityProviderResponseBody struct {
	// Provider ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Provider name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Organization ID
	OrganizationID *string `form:"organization_id,omitempty" json:"organization_id,omitempty" xml:"organization_id,omitempty"`
	// Provider type (oauth2, oidc, saml)
	ProviderType *string `form:"provider_type,omitempty" json:"provider_type,omitempty" xml:"provider_type,omitempty"`
	// OAuth/OIDC client ID
	ClientID *string `form:"client_id,omitempty" json:"client_id,omitempty" xml:"client_id,omitempty"`
	// OIDC issuer URL
	Issuer *string `form:"issuer,omitempty" json:"issuer,omitempty" xml:"issuer,omitempty"`
	// OAuth/OIDC authorization endpoint
	AuthorizationEndpoint *string `form:"authorization_endpoint,omitempty" json:"authorization_endpoint,omitempty" xml:"authorization_endpoint,omitempty"`
	// OAuth/OIDC token endpoint
	TokenEndpoint *string `form:"token_endpoint,omitempty" json:"token_endpoint,omitempty" xml:"token_endpoint,omitempty"`
	// OIDC userinfo endpoint
	UserinfoEndpoint *string `form:"userinfo_endpoint,omitempty" json:"userinfo_endpoint,omitempty" xml:"userinfo_endpoint,omitempty"`
	// OIDC JWKS URI
	JwksURI *string `form:"jwks_uri,omitempty" json:"jwks_uri,omitempty" xml:"jwks_uri,omitempty"`
	// SAML metadata URL
	MetadataURL *string `form:"metadata_url,omitempty" json:"metadata_url,omitempty" xml:"metadata_url,omitempty"`
	// OAuth/OIDC redirect URI
	RedirectURI *string `form:"redirect_uri,omitempty" json:"redirect_uri,omitempty" xml:"redirect_uri,omitempty"`
	// Whether provider is active
	Active *bool `form:"active,omitempty" json:"active,omitempty" xml:"active,omitempty"`
	// Whether this is the primary provider
	Primary *bool `form:"primary,omitempty" json:"primary,omitempty" xml:"primary,omitempty"`
	// Allowed email domains
	Domains []string `form:"domains,omitempty" json:"domains,omitempty" xml:"domains,omitempty"`
	// Attributes mapping
	AttributesMapping map[string]string `form:"attributes_mapping,omitempty" json:"attributes_mapping,omitempty" xml:"attributes_mapping,omitempty"`
	// Creation timestamp
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// Last update timestamp
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// UpdateIdentityProviderResponseBody is the type of the "sso" service
// "update_identity_provider" endpoint HTTP response body.
type UpdateIdentityProviderResponseBody struct {
	// Provider ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Provider name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Organization ID
	OrganizationID *string `form:"organization_id,omitempty" json:"organization_id,omitempty" xml:"organization_id,omitempty"`
	// Provider type (oauth2, oidc, saml)
	ProviderType *string `form:"provider_type,omitempty" json:"provider_type,omitempty" xml:"provider_type,omitempty"`
	// OAuth/OIDC client ID
	ClientID *string `form:"client_id,omitempty" json:"client_id,omitempty" xml:"client_id,omitempty"`
	// OIDC issuer URL
	Issuer *string `form:"issuer,omitempty" json:"issuer,omitempty" xml:"issuer,omitempty"`
	// OAuth/OIDC authorization endpoint
	AuthorizationEndpoint *string `form:"authorization_endpoint,omitempty" json:"authorization_endpoint,omitempty" xml:"authorization_endpoint,omitempty"`
	// OAuth/OIDC token endpoint
	TokenEndpoint *string `form:"token_endpoint,omitempty" json:"token_endpoint,omitempty" xml:"token_endpoint,omitempty"`
	// OIDC userinfo endpoint
	UserinfoEndpoint *string `form:"userinfo_endpoint,omitempty" json:"userinfo_endpoint,omitempty" xml:"userinfo_endpoint,omitempty"`
	// OIDC JWKS URI
	JwksURI *string `form:"jwks_uri,omitempty" json:"jwks_uri,omitempty" xml:"jwks_uri,omitempty"`
	// SAML metadata URL
	MetadataURL *string `form:"metadata_url,omitempty" json:"metadata_url,omitempty" xml:"metadata_url,omitempty"`
	// OAuth/OIDC redirect URI
	RedirectURI *string `form:"redirect_uri,omitempty" json:"redirect_uri,omitempty" xml:"redirect_uri,omitempty"`
	// Whether provider is active
	Active *bool `form:"active,omitempty" json:"active,omitempty" xml:"active,omitempty"`
	// Whether this is the primary provider
	Primary *bool `form:"primary,omitempty" json:"primary,omitempty" xml:"primary,omitempty"`
	// Allowed email domains
	Domains []string `form:"domains,omitempty" json:"domains,omitempty" xml:"domains,omitempty"`
	// Attributes mapping
	AttributesMapping map[string]string `form:"attributes_mapping,omitempty" json:"attributes_mapping,omitempty" xml:"attributes_mapping,omitempty"`
	// Creation timestamp
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// Last update timestamp
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// SamlMetadataResponseBody is the type of the "sso" service "saml_metadata"
// endpoint HTTP response body.
type SamlMetadataResponseBody struct {
	// SAML metadata XML
	Metadata *string `form:"metadata,omitempty" json:"metadata,omitempty" xml:"metadata,omitempty"`
}

// ListProvidersBadRequestResponseBody is the type of the "sso" service
// "list_providers" endpoint HTTP response body for the "bad_request" error.
type ListProvidersBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListProvidersConflictResponseBody is the type of the "sso" service
// "list_providers" endpoint HTTP response body for the "conflict" error.
type ListProvidersConflictResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListProvidersForbiddenResponseBody is the type of the "sso" service
// "list_providers" endpoint HTTP response body for the "forbidden" error.
type ListProvidersForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListProvidersInternalErrorResponseBody is the type of the "sso" service
// "list_providers" endpoint HTTP response body for the "internal_error" error.
type ListProvidersInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListProvidersNotFoundResponseBody is the type of the "sso" service
// "list_providers" endpoint HTTP response body for the "not_found" error.
type ListProvidersNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListProvidersUnauthorizedResponseBody is the type of the "sso" service
// "list_providers" endpoint HTTP response body for the "unauthorized" error.
type ListProvidersUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ProviderAuthBadRequestResponseBody is the type of the "sso" service
// "provider_auth" endpoint HTTP response body for the "bad_request" error.
type ProviderAuthBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ProviderAuthConflictResponseBody is the type of the "sso" service
// "provider_auth" endpoint HTTP response body for the "conflict" error.
type ProviderAuthConflictResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ProviderAuthForbiddenResponseBody is the type of the "sso" service
// "provider_auth" endpoint HTTP response body for the "forbidden" error.
type ProviderAuthForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ProviderAuthInternalErrorResponseBody is the type of the "sso" service
// "provider_auth" endpoint HTTP response body for the "internal_error" error.
type ProviderAuthInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ProviderAuthNotFoundResponseBody is the type of the "sso" service
// "provider_auth" endpoint HTTP response body for the "not_found" error.
type ProviderAuthNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ProviderAuthUnauthorizedResponseBody is the type of the "sso" service
// "provider_auth" endpoint HTTP response body for the "unauthorized" error.
type ProviderAuthUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ProviderCallbackBadRequestResponseBody is the type of the "sso" service
// "provider_callback" endpoint HTTP response body for the "bad_request" error.
type ProviderCallbackBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ProviderCallbackConflictResponseBody is the type of the "sso" service
// "provider_callback" endpoint HTTP response body for the "conflict" error.
type ProviderCallbackConflictResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ProviderCallbackForbiddenResponseBody is the type of the "sso" service
// "provider_callback" endpoint HTTP response body for the "forbidden" error.
type ProviderCallbackForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ProviderCallbackInternalErrorResponseBody is the type of the "sso" service
// "provider_callback" endpoint HTTP response body for the "internal_error"
// error.
type ProviderCallbackInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ProviderCallbackNotFoundResponseBody is the type of the "sso" service
// "provider_callback" endpoint HTTP response body for the "not_found" error.
type ProviderCallbackNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ProviderCallbackUnauthorizedResponseBody is the type of the "sso" service
// "provider_callback" endpoint HTTP response body for the "unauthorized" error.
type ProviderCallbackUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListIdentityProvidersBadRequestResponseBody is the type of the "sso" service
// "list_identity_providers" endpoint HTTP response body for the "bad_request"
// error.
type ListIdentityProvidersBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListIdentityProvidersConflictResponseBody is the type of the "sso" service
// "list_identity_providers" endpoint HTTP response body for the "conflict"
// error.
type ListIdentityProvidersConflictResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListIdentityProvidersForbiddenResponseBody is the type of the "sso" service
// "list_identity_providers" endpoint HTTP response body for the "forbidden"
// error.
type ListIdentityProvidersForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListIdentityProvidersInternalErrorResponseBody is the type of the "sso"
// service "list_identity_providers" endpoint HTTP response body for the
// "internal_error" error.
type ListIdentityProvidersInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListIdentityProvidersNotFoundResponseBody is the type of the "sso" service
// "list_identity_providers" endpoint HTTP response body for the "not_found"
// error.
type ListIdentityProvidersNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListIdentityProvidersUnauthorizedResponseBody is the type of the "sso"
// service "list_identity_providers" endpoint HTTP response body for the
// "unauthorized" error.
type ListIdentityProvidersUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreateIdentityProviderBadRequestResponseBody is the type of the "sso"
// service "create_identity_provider" endpoint HTTP response body for the
// "bad_request" error.
type CreateIdentityProviderBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreateIdentityProviderConflictResponseBody is the type of the "sso" service
// "create_identity_provider" endpoint HTTP response body for the "conflict"
// error.
type CreateIdentityProviderConflictResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreateIdentityProviderForbiddenResponseBody is the type of the "sso" service
// "create_identity_provider" endpoint HTTP response body for the "forbidden"
// error.
type CreateIdentityProviderForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreateIdentityProviderInternalErrorResponseBody is the type of the "sso"
// service "create_identity_provider" endpoint HTTP response body for the
// "internal_error" error.
type CreateIdentityProviderInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreateIdentityProviderNotFoundResponseBody is the type of the "sso" service
// "create_identity_provider" endpoint HTTP response body for the "not_found"
// error.
type CreateIdentityProviderNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreateIdentityProviderUnauthorizedResponseBody is the type of the "sso"
// service "create_identity_provider" endpoint HTTP response body for the
// "unauthorized" error.
type CreateIdentityProviderUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetIdentityProviderBadRequestResponseBody is the type of the "sso" service
// "get_identity_provider" endpoint HTTP response body for the "bad_request"
// error.
type GetIdentityProviderBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetIdentityProviderConflictResponseBody is the type of the "sso" service
// "get_identity_provider" endpoint HTTP response body for the "conflict" error.
type GetIdentityProviderConflictResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetIdentityProviderForbiddenResponseBody is the type of the "sso" service
// "get_identity_provider" endpoint HTTP response body for the "forbidden"
// error.
type GetIdentityProviderForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetIdentityProviderInternalErrorResponseBody is the type of the "sso"
// service "get_identity_provider" endpoint HTTP response body for the
// "internal_error" error.
type GetIdentityProviderInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetIdentityProviderNotFoundResponseBody is the type of the "sso" service
// "get_identity_provider" endpoint HTTP response body for the "not_found"
// error.
type GetIdentityProviderNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetIdentityProviderUnauthorizedResponseBody is the type of the "sso" service
// "get_identity_provider" endpoint HTTP response body for the "unauthorized"
// error.
type GetIdentityProviderUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateIdentityProviderBadRequestResponseBody is the type of the "sso"
// service "update_identity_provider" endpoint HTTP response body for the
// "bad_request" error.
type UpdateIdentityProviderBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateIdentityProviderConflictResponseBody is the type of the "sso" service
// "update_identity_provider" endpoint HTTP response body for the "conflict"
// error.
type UpdateIdentityProviderConflictResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateIdentityProviderForbiddenResponseBody is the type of the "sso" service
// "update_identity_provider" endpoint HTTP response body for the "forbidden"
// error.
type UpdateIdentityProviderForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateIdentityProviderInternalErrorResponseBody is the type of the "sso"
// service "update_identity_provider" endpoint HTTP response body for the
// "internal_error" error.
type UpdateIdentityProviderInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateIdentityProviderNotFoundResponseBody is the type of the "sso" service
// "update_identity_provider" endpoint HTTP response body for the "not_found"
// error.
type UpdateIdentityProviderNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateIdentityProviderUnauthorizedResponseBody is the type of the "sso"
// service "update_identity_provider" endpoint HTTP response body for the
// "unauthorized" error.
type UpdateIdentityProviderUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteIdentityProviderBadRequestResponseBody is the type of the "sso"
// service "delete_identity_provider" endpoint HTTP response body for the
// "bad_request" error.
type DeleteIdentityProviderBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteIdentityProviderConflictResponseBody is the type of the "sso" service
// "delete_identity_provider" endpoint HTTP response body for the "conflict"
// error.
type DeleteIdentityProviderConflictResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteIdentityProviderForbiddenResponseBody is the type of the "sso" service
// "delete_identity_provider" endpoint HTTP response body for the "forbidden"
// error.
type DeleteIdentityProviderForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteIdentityProviderInternalErrorResponseBody is the type of the "sso"
// service "delete_identity_provider" endpoint HTTP response body for the
// "internal_error" error.
type DeleteIdentityProviderInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteIdentityProviderNotFoundResponseBody is the type of the "sso" service
// "delete_identity_provider" endpoint HTTP response body for the "not_found"
// error.
type DeleteIdentityProviderNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteIdentityProviderUnauthorizedResponseBody is the type of the "sso"
// service "delete_identity_provider" endpoint HTTP response body for the
// "unauthorized" error.
type DeleteIdentityProviderUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// SamlMetadataBadRequestResponseBody is the type of the "sso" service
// "saml_metadata" endpoint HTTP response body for the "bad_request" error.
type SamlMetadataBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// SamlMetadataConflictResponseBody is the type of the "sso" service
// "saml_metadata" endpoint HTTP response body for the "conflict" error.
type SamlMetadataConflictResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// SamlMetadataForbiddenResponseBody is the type of the "sso" service
// "saml_metadata" endpoint HTTP response body for the "forbidden" error.
type SamlMetadataForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// SamlMetadataInternalErrorResponseBody is the type of the "sso" service
// "saml_metadata" endpoint HTTP response body for the "internal_error" error.
type SamlMetadataInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// SamlMetadataNotFoundResponseBody is the type of the "sso" service
// "saml_metadata" endpoint HTTP response body for the "not_found" error.
type SamlMetadataNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// SamlMetadataUnauthorizedResponseBody is the type of the "sso" service
// "saml_metadata" endpoint HTTP response body for the "unauthorized" error.
type SamlMetadataUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// SamlAcsBadRequestResponseBody is the type of the "sso" service "saml_acs"
// endpoint HTTP response body for the "bad_request" error.
type SamlAcsBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// SamlAcsConflictResponseBody is the type of the "sso" service "saml_acs"
// endpoint HTTP response body for the "conflict" error.
type SamlAcsConflictResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// SamlAcsForbiddenResponseBody is the type of the "sso" service "saml_acs"
// endpoint HTTP response body for the "forbidden" error.
type SamlAcsForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// SamlAcsInternalErrorResponseBody is the type of the "sso" service "saml_acs"
// endpoint HTTP response body for the "internal_error" error.
type SamlAcsInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// SamlAcsNotFoundResponseBody is the type of the "sso" service "saml_acs"
// endpoint HTTP response body for the "not_found" error.
type SamlAcsNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// SamlAcsUnauthorizedResponseBody is the type of the "sso" service "saml_acs"
// endpoint HTTP response body for the "unauthorized" error.
type SamlAcsUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// SSOProviderResponseBody is used to define fields on response body types.
type SSOProviderResponseBody struct {
	// Provider ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Provider name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Provider type (oauth2, oidc, saml)
	Type *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	// Provider icon URL
	IconURL *string `form:"icon_url,omitempty" json:"icon_url,omitempty" xml:"icon_url,omitempty"`
}

// UserResponseBody is used to define fields on response body types.
type UserResponseBody struct {
	// Whether account is active
	Active *bool `form:"active,omitempty" json:"active,omitempty" xml:"active,omitempty"`
	// Whether email is verified
	EmailVerified *bool `json:"email_verified,emailVerified"`
	// Whether phone is verified
	PhoneVerified *bool `json:"phone_verified,phoneVerified"`
	// URL to user's profile image
	ProfileImageURL *string `json:"profile_image_url,profileImageUrl"`
	// User first name
	FirstName *string `json:"first_name,firstName"`
	// User last name
	LastName *string `json:"last_name,lastName"`
	// User phone number
	PhoneNumber *string `json:"phone_number,phoneNumber"`
	// User metadata
	Metadata map[string]any `json:"metadata"`
	// User locale
	Locale *string `json:"locale"`
	// Email address
	Email *string `json:"email"`
}

// IdentityProviderResponseResponseBody is used to define fields on response
// body types.
type IdentityProviderResponseResponseBody struct {
	// Provider ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Provider name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Organization ID
	OrganizationID *string `form:"organization_id,omitempty" json:"organization_id,omitempty" xml:"organization_id,omitempty"`
	// Provider type (oauth2, oidc, saml)
	ProviderType *string `form:"provider_type,omitempty" json:"provider_type,omitempty" xml:"provider_type,omitempty"`
	// OAuth/OIDC client ID
	ClientID *string `form:"client_id,omitempty" json:"client_id,omitempty" xml:"client_id,omitempty"`
	// OIDC issuer URL
	Issuer *string `form:"issuer,omitempty" json:"issuer,omitempty" xml:"issuer,omitempty"`
	// OAuth/OIDC authorization endpoint
	AuthorizationEndpoint *string `form:"authorization_endpoint,omitempty" json:"authorization_endpoint,omitempty" xml:"authorization_endpoint,omitempty"`
	// OAuth/OIDC token endpoint
	TokenEndpoint *string `form:"token_endpoint,omitempty" json:"token_endpoint,omitempty" xml:"token_endpoint,omitempty"`
	// OIDC userinfo endpoint
	UserinfoEndpoint *string `form:"userinfo_endpoint,omitempty" json:"userinfo_endpoint,omitempty" xml:"userinfo_endpoint,omitempty"`
	// OIDC JWKS URI
	JwksURI *string `form:"jwks_uri,omitempty" json:"jwks_uri,omitempty" xml:"jwks_uri,omitempty"`
	// SAML metadata URL
	MetadataURL *string `form:"metadata_url,omitempty" json:"metadata_url,omitempty" xml:"metadata_url,omitempty"`
	// OAuth/OIDC redirect URI
	RedirectURI *string `form:"redirect_uri,omitempty" json:"redirect_uri,omitempty" xml:"redirect_uri,omitempty"`
	// Whether provider is active
	Active *bool `form:"active,omitempty" json:"active,omitempty" xml:"active,omitempty"`
	// Whether this is the primary provider
	Primary *bool `form:"primary,omitempty" json:"primary,omitempty" xml:"primary,omitempty"`
	// Allowed email domains
	Domains []string `form:"domains,omitempty" json:"domains,omitempty" xml:"domains,omitempty"`
	// Attributes mapping
	AttributesMapping map[string]string `form:"attributes_mapping,omitempty" json:"attributes_mapping,omitempty" xml:"attributes_mapping,omitempty"`
	// Creation timestamp
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// Last update timestamp
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// CreateIdentityProviderRequestRequestBody is used to define fields on request
// body types.
type CreateIdentityProviderRequestRequestBody struct {
	// Provider name
	Name string `form:"name" json:"name" xml:"name"`
	// Provider type
	ProviderType string `form:"provider_type" json:"provider_type" xml:"provider_type"`
	// OAuth/OIDC client ID
	ClientID *string `form:"client_id,omitempty" json:"client_id,omitempty" xml:"client_id,omitempty"`
	// OAuth/OIDC client secret
	ClientSecret *string `form:"client_secret,omitempty" json:"client_secret,omitempty" xml:"client_secret,omitempty"`
	// OIDC issuer URL
	Issuer *string `form:"issuer,omitempty" json:"issuer,omitempty" xml:"issuer,omitempty"`
	// OAuth/OIDC authorization endpoint
	AuthorizationEndpoint *string `form:"authorization_endpoint,omitempty" json:"authorization_endpoint,omitempty" xml:"authorization_endpoint,omitempty"`
	// OAuth/OIDC token endpoint
	TokenEndpoint *string `form:"token_endpoint,omitempty" json:"token_endpoint,omitempty" xml:"token_endpoint,omitempty"`
	// OIDC userinfo endpoint
	UserinfoEndpoint *string `form:"userinfo_endpoint,omitempty" json:"userinfo_endpoint,omitempty" xml:"userinfo_endpoint,omitempty"`
	// OIDC JWKS URI
	JwksURI *string `form:"jwks_uri,omitempty" json:"jwks_uri,omitempty" xml:"jwks_uri,omitempty"`
	// SAML metadata URL
	MetadataURL *string `form:"metadata_url,omitempty" json:"metadata_url,omitempty" xml:"metadata_url,omitempty"`
	// OAuth/OIDC redirect URI
	RedirectURI *string `form:"redirect_uri,omitempty" json:"redirect_uri,omitempty" xml:"redirect_uri,omitempty"`
	// SAML certificate
	Certificate *string `form:"certificate,omitempty" json:"certificate,omitempty" xml:"certificate,omitempty"`
	// SAML private key
	PrivateKey *string `form:"private_key,omitempty" json:"private_key,omitempty" xml:"private_key,omitempty"`
	// Whether provider is active
	Active bool `form:"active" json:"active" xml:"active"`
	// Whether this is the primary provider
	Primary bool `form:"primary" json:"primary" xml:"primary"`
	// Allowed email domains
	Domains []string `form:"domains,omitempty" json:"domains,omitempty" xml:"domains,omitempty"`
	// Attributes mapping
	AttributesMapping map[string]string `form:"attributes_mapping,omitempty" json:"attributes_mapping,omitempty" xml:"attributes_mapping,omitempty"`
}

// UpdateIdentityProviderRequestRequestBody is used to define fields on request
// body types.
type UpdateIdentityProviderRequestRequestBody struct {
	// Provider name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// OAuth/OIDC client ID
	ClientID *string `form:"client_id,omitempty" json:"client_id,omitempty" xml:"client_id,omitempty"`
	// OAuth/OIDC client secret
	ClientSecret *string `form:"client_secret,omitempty" json:"client_secret,omitempty" xml:"client_secret,omitempty"`
	// OIDC issuer URL
	Issuer *string `form:"issuer,omitempty" json:"issuer,omitempty" xml:"issuer,omitempty"`
	// OAuth/OIDC authorization endpoint
	AuthorizationEndpoint *string `form:"authorization_endpoint,omitempty" json:"authorization_endpoint,omitempty" xml:"authorization_endpoint,omitempty"`
	// OAuth/OIDC token endpoint
	TokenEndpoint *string `form:"token_endpoint,omitempty" json:"token_endpoint,omitempty" xml:"token_endpoint,omitempty"`
	// OIDC userinfo endpoint
	UserinfoEndpoint *string `form:"userinfo_endpoint,omitempty" json:"userinfo_endpoint,omitempty" xml:"userinfo_endpoint,omitempty"`
	// OIDC JWKS URI
	JwksURI *string `form:"jwks_uri,omitempty" json:"jwks_uri,omitempty" xml:"jwks_uri,omitempty"`
	// SAML metadata URL
	MetadataURL *string `form:"metadata_url,omitempty" json:"metadata_url,omitempty" xml:"metadata_url,omitempty"`
	// OAuth/OIDC redirect URI
	RedirectURI *string `form:"redirect_uri,omitempty" json:"redirect_uri,omitempty" xml:"redirect_uri,omitempty"`
	// SAML certificate
	Certificate *string `form:"certificate,omitempty" json:"certificate,omitempty" xml:"certificate,omitempty"`
	// SAML private key
	PrivateKey *string `form:"private_key,omitempty" json:"private_key,omitempty" xml:"private_key,omitempty"`
	// Whether provider is active
	Active *bool `form:"active,omitempty" json:"active,omitempty" xml:"active,omitempty"`
	// Whether this is the primary provider
	Primary *bool `form:"primary,omitempty" json:"primary,omitempty" xml:"primary,omitempty"`
	// Allowed email domains
	Domains []string `form:"domains,omitempty" json:"domains,omitempty" xml:"domains,omitempty"`
	// Attributes mapping
	AttributesMapping map[string]string `form:"attributes_mapping,omitempty" json:"attributes_mapping,omitempty" xml:"attributes_mapping,omitempty"`
}

// NewCreateIdentityProviderRequestBody builds the HTTP request body from the
// payload of the "create_identity_provider" endpoint of the "sso" service.
func NewCreateIdentityProviderRequestBody(p *sso.CreateIdentityProviderPayload) *CreateIdentityProviderRequestBody {
	body := &CreateIdentityProviderRequestBody{
		OrganizationID: p.OrganizationID,
	}
	if p.Provider != nil {
		body.Provider = marshalSsoCreateIdentityProviderRequestToCreateIdentityProviderRequestRequestBody(p.Provider)
	}
	return body
}

// NewUpdateIdentityProviderRequestBody builds the HTTP request body from the
// payload of the "update_identity_provider" endpoint of the "sso" service.
func NewUpdateIdentityProviderRequestBody(p *sso.UpdateIdentityProviderPayload) *UpdateIdentityProviderRequestBody {
	body := &UpdateIdentityProviderRequestBody{}
	if p.Provider != nil {
		body.Provider = marshalSsoUpdateIdentityProviderRequestToUpdateIdentityProviderRequestRequestBody(p.Provider)
	}
	return body
}

// NewListProvidersResultOK builds a "sso" service "list_providers" endpoint
// result from a HTTP "OK" response.
func NewListProvidersResultOK(body *ListProvidersResponseBody) *sso.ListProvidersResult {
	v := &sso.ListProvidersResult{}
	v.Providers = make([]*sso.SSOProvider, len(body.Providers))
	for i, val := range body.Providers {
		v.Providers[i] = unmarshalSSOProviderResponseBodyToSsoSSOProvider(val)
	}

	return v
}

// NewListProvidersBadRequest builds a sso service list_providers endpoint
// bad_request error.
func NewListProvidersBadRequest(body *ListProvidersBadRequestResponseBody) *sso.BadRequestError {
	v := &sso.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewListProvidersConflict builds a sso service list_providers endpoint
// conflict error.
func NewListProvidersConflict(body *ListProvidersConflictResponseBody) *sso.ConflictError {
	v := &sso.ConflictError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewListProvidersForbidden builds a sso service list_providers endpoint
// forbidden error.
func NewListProvidersForbidden(body *ListProvidersForbiddenResponseBody) *sso.ForbiddenError {
	v := &sso.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewListProvidersInternalError builds a sso service list_providers endpoint
// internal_error error.
func NewListProvidersInternalError(body *ListProvidersInternalErrorResponseBody) *sso.InternalServerError {
	v := &sso.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewListProvidersNotFound builds a sso service list_providers endpoint
// not_found error.
func NewListProvidersNotFound(body *ListProvidersNotFoundResponseBody) *sso.NotFoundError {
	v := &sso.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewListProvidersUnauthorized builds a sso service list_providers endpoint
// unauthorized error.
func NewListProvidersUnauthorized(body *ListProvidersUnauthorizedResponseBody) *sso.UnauthorizedError {
	v := &sso.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewProviderAuthBadRequest builds a sso service provider_auth endpoint
// bad_request error.
func NewProviderAuthBadRequest(body *ProviderAuthBadRequestResponseBody) *sso.BadRequestError {
	v := &sso.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewProviderAuthConflict builds a sso service provider_auth endpoint conflict
// error.
func NewProviderAuthConflict(body *ProviderAuthConflictResponseBody) *sso.ConflictError {
	v := &sso.ConflictError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewProviderAuthForbidden builds a sso service provider_auth endpoint
// forbidden error.
func NewProviderAuthForbidden(body *ProviderAuthForbiddenResponseBody) *sso.ForbiddenError {
	v := &sso.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewProviderAuthInternalError builds a sso service provider_auth endpoint
// internal_error error.
func NewProviderAuthInternalError(body *ProviderAuthInternalErrorResponseBody) *sso.InternalServerError {
	v := &sso.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewProviderAuthNotFound builds a sso service provider_auth endpoint
// not_found error.
func NewProviderAuthNotFound(body *ProviderAuthNotFoundResponseBody) *sso.NotFoundError {
	v := &sso.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewProviderAuthUnauthorized builds a sso service provider_auth endpoint
// unauthorized error.
func NewProviderAuthUnauthorized(body *ProviderAuthUnauthorizedResponseBody) *sso.UnauthorizedError {
	v := &sso.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewProviderCallbackResultOK builds a "sso" service "provider_callback"
// endpoint result from a HTTP "OK" response.
func NewProviderCallbackResultOK(body *ProviderCallbackResponseBody) *sso.ProviderCallbackResult {
	v := &sso.ProviderCallbackResult{
		Authenticated: *body.Authenticated,
		Message:       *body.Message,
	}
	if body.User != nil {
		v.User = unmarshalUserResponseBodyToDesigntypesUser(body.User)
	}

	return v
}

// NewProviderCallbackBadRequest builds a sso service provider_callback
// endpoint bad_request error.
func NewProviderCallbackBadRequest(body *ProviderCallbackBadRequestResponseBody) *sso.BadRequestError {
	v := &sso.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewProviderCallbackConflict builds a sso service provider_callback endpoint
// conflict error.
func NewProviderCallbackConflict(body *ProviderCallbackConflictResponseBody) *sso.ConflictError {
	v := &sso.ConflictError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewProviderCallbackForbidden builds a sso service provider_callback endpoint
// forbidden error.
func NewProviderCallbackForbidden(body *ProviderCallbackForbiddenResponseBody) *sso.ForbiddenError {
	v := &sso.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewProviderCallbackInternalError builds a sso service provider_callback
// endpoint internal_error error.
func NewProviderCallbackInternalError(body *ProviderCallbackInternalErrorResponseBody) *sso.InternalServerError {
	v := &sso.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewProviderCallbackNotFound builds a sso service provider_callback endpoint
// not_found error.
func NewProviderCallbackNotFound(body *ProviderCallbackNotFoundResponseBody) *sso.NotFoundError {
	v := &sso.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewProviderCallbackUnauthorized builds a sso service provider_callback
// endpoint unauthorized error.
func NewProviderCallbackUnauthorized(body *ProviderCallbackUnauthorizedResponseBody) *sso.UnauthorizedError {
	v := &sso.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewListIdentityProvidersResultOK builds a "sso" service
// "list_identity_providers" endpoint result from a HTTP "OK" response.
func NewListIdentityProvidersResultOK(body *ListIdentityProvidersResponseBody) *sso.ListIdentityProvidersResult {
	v := &sso.ListIdentityProvidersResult{}
	v.Providers = make([]*sso.IdentityProviderResponse, len(body.Providers))
	for i, val := range body.Providers {
		v.Providers[i] = unmarshalIdentityProviderResponseResponseBodyToSsoIdentityProviderResponse(val)
	}

	return v
}

// NewListIdentityProvidersBadRequest builds a sso service
// list_identity_providers endpoint bad_request error.
func NewListIdentityProvidersBadRequest(body *ListIdentityProvidersBadRequestResponseBody) *sso.BadRequestError {
	v := &sso.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewListIdentityProvidersConflict builds a sso service
// list_identity_providers endpoint conflict error.
func NewListIdentityProvidersConflict(body *ListIdentityProvidersConflictResponseBody) *sso.ConflictError {
	v := &sso.ConflictError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewListIdentityProvidersForbidden builds a sso service
// list_identity_providers endpoint forbidden error.
func NewListIdentityProvidersForbidden(body *ListIdentityProvidersForbiddenResponseBody) *sso.ForbiddenError {
	v := &sso.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewListIdentityProvidersInternalError builds a sso service
// list_identity_providers endpoint internal_error error.
func NewListIdentityProvidersInternalError(body *ListIdentityProvidersInternalErrorResponseBody) *sso.InternalServerError {
	v := &sso.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewListIdentityProvidersNotFound builds a sso service
// list_identity_providers endpoint not_found error.
func NewListIdentityProvidersNotFound(body *ListIdentityProvidersNotFoundResponseBody) *sso.NotFoundError {
	v := &sso.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewListIdentityProvidersUnauthorized builds a sso service
// list_identity_providers endpoint unauthorized error.
func NewListIdentityProvidersUnauthorized(body *ListIdentityProvidersUnauthorizedResponseBody) *sso.UnauthorizedError {
	v := &sso.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewCreateIdentityProviderIdentityProviderResponseCreated builds a "sso"
// service "create_identity_provider" endpoint result from a HTTP "Created"
// response.
func NewCreateIdentityProviderIdentityProviderResponseCreated(body *CreateIdentityProviderResponseBody) *sso.IdentityProviderResponse {
	v := &sso.IdentityProviderResponse{
		ID:                    *body.ID,
		Name:                  *body.Name,
		OrganizationID:        *body.OrganizationID,
		ProviderType:          *body.ProviderType,
		ClientID:              body.ClientID,
		Issuer:                body.Issuer,
		AuthorizationEndpoint: body.AuthorizationEndpoint,
		TokenEndpoint:         body.TokenEndpoint,
		UserinfoEndpoint:      body.UserinfoEndpoint,
		JwksURI:               body.JwksURI,
		MetadataURL:           body.MetadataURL,
		RedirectURI:           body.RedirectURI,
		Active:                *body.Active,
		Primary:               body.Primary,
		CreatedAt:             *body.CreatedAt,
		UpdatedAt:             body.UpdatedAt,
	}
	if body.Domains != nil {
		v.Domains = make([]string, len(body.Domains))
		for i, val := range body.Domains {
			v.Domains[i] = val
		}
	}
	if body.AttributesMapping != nil {
		v.AttributesMapping = make(map[string]string, len(body.AttributesMapping))
		for key, val := range body.AttributesMapping {
			tk := key
			tv := val
			v.AttributesMapping[tk] = tv
		}
	}

	return v
}

// NewCreateIdentityProviderBadRequest builds a sso service
// create_identity_provider endpoint bad_request error.
func NewCreateIdentityProviderBadRequest(body *CreateIdentityProviderBadRequestResponseBody) *sso.BadRequestError {
	v := &sso.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewCreateIdentityProviderConflict builds a sso service
// create_identity_provider endpoint conflict error.
func NewCreateIdentityProviderConflict(body *CreateIdentityProviderConflictResponseBody) *sso.ConflictError {
	v := &sso.ConflictError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewCreateIdentityProviderForbidden builds a sso service
// create_identity_provider endpoint forbidden error.
func NewCreateIdentityProviderForbidden(body *CreateIdentityProviderForbiddenResponseBody) *sso.ForbiddenError {
	v := &sso.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewCreateIdentityProviderInternalError builds a sso service
// create_identity_provider endpoint internal_error error.
func NewCreateIdentityProviderInternalError(body *CreateIdentityProviderInternalErrorResponseBody) *sso.InternalServerError {
	v := &sso.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewCreateIdentityProviderNotFound builds a sso service
// create_identity_provider endpoint not_found error.
func NewCreateIdentityProviderNotFound(body *CreateIdentityProviderNotFoundResponseBody) *sso.NotFoundError {
	v := &sso.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewCreateIdentityProviderUnauthorized builds a sso service
// create_identity_provider endpoint unauthorized error.
func NewCreateIdentityProviderUnauthorized(body *CreateIdentityProviderUnauthorizedResponseBody) *sso.UnauthorizedError {
	v := &sso.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewGetIdentityProviderIdentityProviderResponseOK builds a "sso" service
// "get_identity_provider" endpoint result from a HTTP "OK" response.
func NewGetIdentityProviderIdentityProviderResponseOK(body *GetIdentityProviderResponseBody) *sso.IdentityProviderResponse {
	v := &sso.IdentityProviderResponse{
		ID:                    *body.ID,
		Name:                  *body.Name,
		OrganizationID:        *body.OrganizationID,
		ProviderType:          *body.ProviderType,
		ClientID:              body.ClientID,
		Issuer:                body.Issuer,
		AuthorizationEndpoint: body.AuthorizationEndpoint,
		TokenEndpoint:         body.TokenEndpoint,
		UserinfoEndpoint:      body.UserinfoEndpoint,
		JwksURI:               body.JwksURI,
		MetadataURL:           body.MetadataURL,
		RedirectURI:           body.RedirectURI,
		Active:                *body.Active,
		Primary:               body.Primary,
		CreatedAt:             *body.CreatedAt,
		UpdatedAt:             body.UpdatedAt,
	}
	if body.Domains != nil {
		v.Domains = make([]string, len(body.Domains))
		for i, val := range body.Domains {
			v.Domains[i] = val
		}
	}
	if body.AttributesMapping != nil {
		v.AttributesMapping = make(map[string]string, len(body.AttributesMapping))
		for key, val := range body.AttributesMapping {
			tk := key
			tv := val
			v.AttributesMapping[tk] = tv
		}
	}

	return v
}

// NewGetIdentityProviderBadRequest builds a sso service get_identity_provider
// endpoint bad_request error.
func NewGetIdentityProviderBadRequest(body *GetIdentityProviderBadRequestResponseBody) *sso.BadRequestError {
	v := &sso.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewGetIdentityProviderConflict builds a sso service get_identity_provider
// endpoint conflict error.
func NewGetIdentityProviderConflict(body *GetIdentityProviderConflictResponseBody) *sso.ConflictError {
	v := &sso.ConflictError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewGetIdentityProviderForbidden builds a sso service get_identity_provider
// endpoint forbidden error.
func NewGetIdentityProviderForbidden(body *GetIdentityProviderForbiddenResponseBody) *sso.ForbiddenError {
	v := &sso.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewGetIdentityProviderInternalError builds a sso service
// get_identity_provider endpoint internal_error error.
func NewGetIdentityProviderInternalError(body *GetIdentityProviderInternalErrorResponseBody) *sso.InternalServerError {
	v := &sso.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewGetIdentityProviderNotFound builds a sso service get_identity_provider
// endpoint not_found error.
func NewGetIdentityProviderNotFound(body *GetIdentityProviderNotFoundResponseBody) *sso.NotFoundError {
	v := &sso.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewGetIdentityProviderUnauthorized builds a sso service
// get_identity_provider endpoint unauthorized error.
func NewGetIdentityProviderUnauthorized(body *GetIdentityProviderUnauthorizedResponseBody) *sso.UnauthorizedError {
	v := &sso.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewUpdateIdentityProviderIdentityProviderResponseOK builds a "sso" service
// "update_identity_provider" endpoint result from a HTTP "OK" response.
func NewUpdateIdentityProviderIdentityProviderResponseOK(body *UpdateIdentityProviderResponseBody) *sso.IdentityProviderResponse {
	v := &sso.IdentityProviderResponse{
		ID:                    *body.ID,
		Name:                  *body.Name,
		OrganizationID:        *body.OrganizationID,
		ProviderType:          *body.ProviderType,
		ClientID:              body.ClientID,
		Issuer:                body.Issuer,
		AuthorizationEndpoint: body.AuthorizationEndpoint,
		TokenEndpoint:         body.TokenEndpoint,
		UserinfoEndpoint:      body.UserinfoEndpoint,
		JwksURI:               body.JwksURI,
		MetadataURL:           body.MetadataURL,
		RedirectURI:           body.RedirectURI,
		Active:                *body.Active,
		Primary:               body.Primary,
		CreatedAt:             *body.CreatedAt,
		UpdatedAt:             body.UpdatedAt,
	}
	if body.Domains != nil {
		v.Domains = make([]string, len(body.Domains))
		for i, val := range body.Domains {
			v.Domains[i] = val
		}
	}
	if body.AttributesMapping != nil {
		v.AttributesMapping = make(map[string]string, len(body.AttributesMapping))
		for key, val := range body.AttributesMapping {
			tk := key
			tv := val
			v.AttributesMapping[tk] = tv
		}
	}

	return v
}

// NewUpdateIdentityProviderBadRequest builds a sso service
// update_identity_provider endpoint bad_request error.
func NewUpdateIdentityProviderBadRequest(body *UpdateIdentityProviderBadRequestResponseBody) *sso.BadRequestError {
	v := &sso.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewUpdateIdentityProviderConflict builds a sso service
// update_identity_provider endpoint conflict error.
func NewUpdateIdentityProviderConflict(body *UpdateIdentityProviderConflictResponseBody) *sso.ConflictError {
	v := &sso.ConflictError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewUpdateIdentityProviderForbidden builds a sso service
// update_identity_provider endpoint forbidden error.
func NewUpdateIdentityProviderForbidden(body *UpdateIdentityProviderForbiddenResponseBody) *sso.ForbiddenError {
	v := &sso.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewUpdateIdentityProviderInternalError builds a sso service
// update_identity_provider endpoint internal_error error.
func NewUpdateIdentityProviderInternalError(body *UpdateIdentityProviderInternalErrorResponseBody) *sso.InternalServerError {
	v := &sso.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewUpdateIdentityProviderNotFound builds a sso service
// update_identity_provider endpoint not_found error.
func NewUpdateIdentityProviderNotFound(body *UpdateIdentityProviderNotFoundResponseBody) *sso.NotFoundError {
	v := &sso.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewUpdateIdentityProviderUnauthorized builds a sso service
// update_identity_provider endpoint unauthorized error.
func NewUpdateIdentityProviderUnauthorized(body *UpdateIdentityProviderUnauthorizedResponseBody) *sso.UnauthorizedError {
	v := &sso.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewDeleteIdentityProviderBadRequest builds a sso service
// delete_identity_provider endpoint bad_request error.
func NewDeleteIdentityProviderBadRequest(body *DeleteIdentityProviderBadRequestResponseBody) *sso.BadRequestError {
	v := &sso.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewDeleteIdentityProviderConflict builds a sso service
// delete_identity_provider endpoint conflict error.
func NewDeleteIdentityProviderConflict(body *DeleteIdentityProviderConflictResponseBody) *sso.ConflictError {
	v := &sso.ConflictError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewDeleteIdentityProviderForbidden builds a sso service
// delete_identity_provider endpoint forbidden error.
func NewDeleteIdentityProviderForbidden(body *DeleteIdentityProviderForbiddenResponseBody) *sso.ForbiddenError {
	v := &sso.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewDeleteIdentityProviderInternalError builds a sso service
// delete_identity_provider endpoint internal_error error.
func NewDeleteIdentityProviderInternalError(body *DeleteIdentityProviderInternalErrorResponseBody) *sso.InternalServerError {
	v := &sso.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewDeleteIdentityProviderNotFound builds a sso service
// delete_identity_provider endpoint not_found error.
func NewDeleteIdentityProviderNotFound(body *DeleteIdentityProviderNotFoundResponseBody) *sso.NotFoundError {
	v := &sso.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewDeleteIdentityProviderUnauthorized builds a sso service
// delete_identity_provider endpoint unauthorized error.
func NewDeleteIdentityProviderUnauthorized(body *DeleteIdentityProviderUnauthorizedResponseBody) *sso.UnauthorizedError {
	v := &sso.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewSamlMetadataResultOK builds a "sso" service "saml_metadata" endpoint
// result from a HTTP "OK" response.
func NewSamlMetadataResultOK(body *SamlMetadataResponseBody) *sso.SamlMetadataResult {
	v := &sso.SamlMetadataResult{
		Metadata: *body.Metadata,
	}

	return v
}

// NewSamlMetadataBadRequest builds a sso service saml_metadata endpoint
// bad_request error.
func NewSamlMetadataBadRequest(body *SamlMetadataBadRequestResponseBody) *sso.BadRequestError {
	v := &sso.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewSamlMetadataConflict builds a sso service saml_metadata endpoint conflict
// error.
func NewSamlMetadataConflict(body *SamlMetadataConflictResponseBody) *sso.ConflictError {
	v := &sso.ConflictError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewSamlMetadataForbidden builds a sso service saml_metadata endpoint
// forbidden error.
func NewSamlMetadataForbidden(body *SamlMetadataForbiddenResponseBody) *sso.ForbiddenError {
	v := &sso.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewSamlMetadataInternalError builds a sso service saml_metadata endpoint
// internal_error error.
func NewSamlMetadataInternalError(body *SamlMetadataInternalErrorResponseBody) *sso.InternalServerError {
	v := &sso.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewSamlMetadataNotFound builds a sso service saml_metadata endpoint
// not_found error.
func NewSamlMetadataNotFound(body *SamlMetadataNotFoundResponseBody) *sso.NotFoundError {
	v := &sso.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewSamlMetadataUnauthorized builds a sso service saml_metadata endpoint
// unauthorized error.
func NewSamlMetadataUnauthorized(body *SamlMetadataUnauthorizedResponseBody) *sso.UnauthorizedError {
	v := &sso.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewSamlAcsBadRequest builds a sso service saml_acs endpoint bad_request
// error.
func NewSamlAcsBadRequest(body *SamlAcsBadRequestResponseBody) *sso.BadRequestError {
	v := &sso.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewSamlAcsConflict builds a sso service saml_acs endpoint conflict error.
func NewSamlAcsConflict(body *SamlAcsConflictResponseBody) *sso.ConflictError {
	v := &sso.ConflictError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewSamlAcsForbidden builds a sso service saml_acs endpoint forbidden error.
func NewSamlAcsForbidden(body *SamlAcsForbiddenResponseBody) *sso.ForbiddenError {
	v := &sso.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewSamlAcsInternalError builds a sso service saml_acs endpoint
// internal_error error.
func NewSamlAcsInternalError(body *SamlAcsInternalErrorResponseBody) *sso.InternalServerError {
	v := &sso.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewSamlAcsNotFound builds a sso service saml_acs endpoint not_found error.
func NewSamlAcsNotFound(body *SamlAcsNotFoundResponseBody) *sso.NotFoundError {
	v := &sso.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewSamlAcsUnauthorized builds a sso service saml_acs endpoint unauthorized
// error.
func NewSamlAcsUnauthorized(body *SamlAcsUnauthorizedResponseBody) *sso.UnauthorizedError {
	v := &sso.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// ValidateListProvidersResponseBody runs the validations defined on
// list_providers_response_body
func ValidateListProvidersResponseBody(body *ListProvidersResponseBody) (err error) {
	if body.Providers == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("providers", "body"))
	}
	for _, e := range body.Providers {
		if e != nil {
			if err2 := ValidateSSOProviderResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateProviderCallbackResponseBody runs the validations defined on
// provider_callback_response_body
func ValidateProviderCallbackResponseBody(body *ProviderCallbackResponseBody) (err error) {
	if body.Authenticated == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("authenticated", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.User != nil {
		if err2 := ValidateUserResponseBody(body.User); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateListIdentityProvidersResponseBody runs the validations defined on
// list_identity_providers_response_body
func ValidateListIdentityProvidersResponseBody(body *ListIdentityProvidersResponseBody) (err error) {
	if body.Providers == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("providers", "body"))
	}
	for _, e := range body.Providers {
		if e != nil {
			if err2 := ValidateIdentityProviderResponseResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateCreateIdentityProviderResponseBody runs the validations defined on
// create_identity_provider_response_body
func ValidateCreateIdentityProviderResponseBody(body *CreateIdentityProviderResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.OrganizationID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("organization_id", "body"))
	}
	if body.ProviderType == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("provider_type", "body"))
	}
	if body.Active == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("active", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	return
}

// ValidateGetIdentityProviderResponseBody runs the validations defined on
// get_identity_provider_response_body
func ValidateGetIdentityProviderResponseBody(body *GetIdentityProviderResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.OrganizationID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("organization_id", "body"))
	}
	if body.ProviderType == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("provider_type", "body"))
	}
	if body.Active == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("active", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	return
}

// ValidateUpdateIdentityProviderResponseBody runs the validations defined on
// update_identity_provider_response_body
func ValidateUpdateIdentityProviderResponseBody(body *UpdateIdentityProviderResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.OrganizationID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("organization_id", "body"))
	}
	if body.ProviderType == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("provider_type", "body"))
	}
	if body.Active == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("active", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	return
}

// ValidateSamlMetadataResponseBody runs the validations defined on
// saml_metadata_response_body
func ValidateSamlMetadataResponseBody(body *SamlMetadataResponseBody) (err error) {
	if body.Metadata == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("metadata", "body"))
	}
	return
}

// ValidateListProvidersBadRequestResponseBody runs the validations defined on
// list_providers_bad_request_response_body
func ValidateListProvidersBadRequestResponseBody(body *ListProvidersBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateListProvidersConflictResponseBody runs the validations defined on
// list_providers_conflict_response_body
func ValidateListProvidersConflictResponseBody(body *ListProvidersConflictResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateListProvidersForbiddenResponseBody runs the validations defined on
// list_providers_forbidden_response_body
func ValidateListProvidersForbiddenResponseBody(body *ListProvidersForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateListProvidersInternalErrorResponseBody runs the validations defined
// on list_providers_internal_error_response_body
func ValidateListProvidersInternalErrorResponseBody(body *ListProvidersInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateListProvidersNotFoundResponseBody runs the validations defined on
// list_providers_not_found_response_body
func ValidateListProvidersNotFoundResponseBody(body *ListProvidersNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateListProvidersUnauthorizedResponseBody runs the validations defined
// on list_providers_unauthorized_response_body
func ValidateListProvidersUnauthorizedResponseBody(body *ListProvidersUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateProviderAuthBadRequestResponseBody runs the validations defined on
// provider_auth_bad_request_response_body
func ValidateProviderAuthBadRequestResponseBody(body *ProviderAuthBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateProviderAuthConflictResponseBody runs the validations defined on
// provider_auth_conflict_response_body
func ValidateProviderAuthConflictResponseBody(body *ProviderAuthConflictResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateProviderAuthForbiddenResponseBody runs the validations defined on
// provider_auth_forbidden_response_body
func ValidateProviderAuthForbiddenResponseBody(body *ProviderAuthForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateProviderAuthInternalErrorResponseBody runs the validations defined
// on provider_auth_internal_error_response_body
func ValidateProviderAuthInternalErrorResponseBody(body *ProviderAuthInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateProviderAuthNotFoundResponseBody runs the validations defined on
// provider_auth_not_found_response_body
func ValidateProviderAuthNotFoundResponseBody(body *ProviderAuthNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateProviderAuthUnauthorizedResponseBody runs the validations defined on
// provider_auth_unauthorized_response_body
func ValidateProviderAuthUnauthorizedResponseBody(body *ProviderAuthUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateProviderCallbackBadRequestResponseBody runs the validations defined
// on provider_callback_bad_request_response_body
func ValidateProviderCallbackBadRequestResponseBody(body *ProviderCallbackBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateProviderCallbackConflictResponseBody runs the validations defined on
// provider_callback_conflict_response_body
func ValidateProviderCallbackConflictResponseBody(body *ProviderCallbackConflictResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateProviderCallbackForbiddenResponseBody runs the validations defined
// on provider_callback_forbidden_response_body
func ValidateProviderCallbackForbiddenResponseBody(body *ProviderCallbackForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateProviderCallbackInternalErrorResponseBody runs the validations
// defined on provider_callback_internal_error_response_body
func ValidateProviderCallbackInternalErrorResponseBody(body *ProviderCallbackInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateProviderCallbackNotFoundResponseBody runs the validations defined on
// provider_callback_not_found_response_body
func ValidateProviderCallbackNotFoundResponseBody(body *ProviderCallbackNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateProviderCallbackUnauthorizedResponseBody runs the validations
// defined on provider_callback_unauthorized_response_body
func ValidateProviderCallbackUnauthorizedResponseBody(body *ProviderCallbackUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateListIdentityProvidersBadRequestResponseBody runs the validations
// defined on list_identity_providers_bad_request_response_body
func ValidateListIdentityProvidersBadRequestResponseBody(body *ListIdentityProvidersBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateListIdentityProvidersConflictResponseBody runs the validations
// defined on list_identity_providers_conflict_response_body
func ValidateListIdentityProvidersConflictResponseBody(body *ListIdentityProvidersConflictResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateListIdentityProvidersForbiddenResponseBody runs the validations
// defined on list_identity_providers_forbidden_response_body
func ValidateListIdentityProvidersForbiddenResponseBody(body *ListIdentityProvidersForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateListIdentityProvidersInternalErrorResponseBody runs the validations
// defined on list_identity_providers_internal_error_response_body
func ValidateListIdentityProvidersInternalErrorResponseBody(body *ListIdentityProvidersInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateListIdentityProvidersNotFoundResponseBody runs the validations
// defined on list_identity_providers_not_found_response_body
func ValidateListIdentityProvidersNotFoundResponseBody(body *ListIdentityProvidersNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateListIdentityProvidersUnauthorizedResponseBody runs the validations
// defined on list_identity_providers_unauthorized_response_body
func ValidateListIdentityProvidersUnauthorizedResponseBody(body *ListIdentityProvidersUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateIdentityProviderBadRequestResponseBody runs the validations
// defined on create_identity_provider_bad_request_response_body
func ValidateCreateIdentityProviderBadRequestResponseBody(body *CreateIdentityProviderBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateIdentityProviderConflictResponseBody runs the validations
// defined on create_identity_provider_conflict_response_body
func ValidateCreateIdentityProviderConflictResponseBody(body *CreateIdentityProviderConflictResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateIdentityProviderForbiddenResponseBody runs the validations
// defined on create_identity_provider_forbidden_response_body
func ValidateCreateIdentityProviderForbiddenResponseBody(body *CreateIdentityProviderForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateIdentityProviderInternalErrorResponseBody runs the validations
// defined on create_identity_provider_internal_error_response_body
func ValidateCreateIdentityProviderInternalErrorResponseBody(body *CreateIdentityProviderInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateIdentityProviderNotFoundResponseBody runs the validations
// defined on create_identity_provider_not_found_response_body
func ValidateCreateIdentityProviderNotFoundResponseBody(body *CreateIdentityProviderNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateIdentityProviderUnauthorizedResponseBody runs the validations
// defined on create_identity_provider_unauthorized_response_body
func ValidateCreateIdentityProviderUnauthorizedResponseBody(body *CreateIdentityProviderUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetIdentityProviderBadRequestResponseBody runs the validations
// defined on get_identity_provider_bad_request_response_body
func ValidateGetIdentityProviderBadRequestResponseBody(body *GetIdentityProviderBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetIdentityProviderConflictResponseBody runs the validations defined
// on get_identity_provider_conflict_response_body
func ValidateGetIdentityProviderConflictResponseBody(body *GetIdentityProviderConflictResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetIdentityProviderForbiddenResponseBody runs the validations
// defined on get_identity_provider_forbidden_response_body
func ValidateGetIdentityProviderForbiddenResponseBody(body *GetIdentityProviderForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetIdentityProviderInternalErrorResponseBody runs the validations
// defined on get_identity_provider_internal_error_response_body
func ValidateGetIdentityProviderInternalErrorResponseBody(body *GetIdentityProviderInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetIdentityProviderNotFoundResponseBody runs the validations defined
// on get_identity_provider_not_found_response_body
func ValidateGetIdentityProviderNotFoundResponseBody(body *GetIdentityProviderNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetIdentityProviderUnauthorizedResponseBody runs the validations
// defined on get_identity_provider_unauthorized_response_body
func ValidateGetIdentityProviderUnauthorizedResponseBody(body *GetIdentityProviderUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateIdentityProviderBadRequestResponseBody runs the validations
// defined on update_identity_provider_bad_request_response_body
func ValidateUpdateIdentityProviderBadRequestResponseBody(body *UpdateIdentityProviderBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateIdentityProviderConflictResponseBody runs the validations
// defined on update_identity_provider_conflict_response_body
func ValidateUpdateIdentityProviderConflictResponseBody(body *UpdateIdentityProviderConflictResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateIdentityProviderForbiddenResponseBody runs the validations
// defined on update_identity_provider_forbidden_response_body
func ValidateUpdateIdentityProviderForbiddenResponseBody(body *UpdateIdentityProviderForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateIdentityProviderInternalErrorResponseBody runs the validations
// defined on update_identity_provider_internal_error_response_body
func ValidateUpdateIdentityProviderInternalErrorResponseBody(body *UpdateIdentityProviderInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateIdentityProviderNotFoundResponseBody runs the validations
// defined on update_identity_provider_not_found_response_body
func ValidateUpdateIdentityProviderNotFoundResponseBody(body *UpdateIdentityProviderNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateIdentityProviderUnauthorizedResponseBody runs the validations
// defined on update_identity_provider_unauthorized_response_body
func ValidateUpdateIdentityProviderUnauthorizedResponseBody(body *UpdateIdentityProviderUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteIdentityProviderBadRequestResponseBody runs the validations
// defined on delete_identity_provider_bad_request_response_body
func ValidateDeleteIdentityProviderBadRequestResponseBody(body *DeleteIdentityProviderBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteIdentityProviderConflictResponseBody runs the validations
// defined on delete_identity_provider_conflict_response_body
func ValidateDeleteIdentityProviderConflictResponseBody(body *DeleteIdentityProviderConflictResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteIdentityProviderForbiddenResponseBody runs the validations
// defined on delete_identity_provider_forbidden_response_body
func ValidateDeleteIdentityProviderForbiddenResponseBody(body *DeleteIdentityProviderForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteIdentityProviderInternalErrorResponseBody runs the validations
// defined on delete_identity_provider_internal_error_response_body
func ValidateDeleteIdentityProviderInternalErrorResponseBody(body *DeleteIdentityProviderInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteIdentityProviderNotFoundResponseBody runs the validations
// defined on delete_identity_provider_not_found_response_body
func ValidateDeleteIdentityProviderNotFoundResponseBody(body *DeleteIdentityProviderNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteIdentityProviderUnauthorizedResponseBody runs the validations
// defined on delete_identity_provider_unauthorized_response_body
func ValidateDeleteIdentityProviderUnauthorizedResponseBody(body *DeleteIdentityProviderUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateSamlMetadataBadRequestResponseBody runs the validations defined on
// saml_metadata_bad_request_response_body
func ValidateSamlMetadataBadRequestResponseBody(body *SamlMetadataBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateSamlMetadataConflictResponseBody runs the validations defined on
// saml_metadata_conflict_response_body
func ValidateSamlMetadataConflictResponseBody(body *SamlMetadataConflictResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateSamlMetadataForbiddenResponseBody runs the validations defined on
// saml_metadata_forbidden_response_body
func ValidateSamlMetadataForbiddenResponseBody(body *SamlMetadataForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateSamlMetadataInternalErrorResponseBody runs the validations defined
// on saml_metadata_internal_error_response_body
func ValidateSamlMetadataInternalErrorResponseBody(body *SamlMetadataInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateSamlMetadataNotFoundResponseBody runs the validations defined on
// saml_metadata_not_found_response_body
func ValidateSamlMetadataNotFoundResponseBody(body *SamlMetadataNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateSamlMetadataUnauthorizedResponseBody runs the validations defined on
// saml_metadata_unauthorized_response_body
func ValidateSamlMetadataUnauthorizedResponseBody(body *SamlMetadataUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateSamlAcsBadRequestResponseBody runs the validations defined on
// saml_acs_bad_request_response_body
func ValidateSamlAcsBadRequestResponseBody(body *SamlAcsBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateSamlAcsConflictResponseBody runs the validations defined on
// saml_acs_conflict_response_body
func ValidateSamlAcsConflictResponseBody(body *SamlAcsConflictResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateSamlAcsForbiddenResponseBody runs the validations defined on
// saml_acs_forbidden_response_body
func ValidateSamlAcsForbiddenResponseBody(body *SamlAcsForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateSamlAcsInternalErrorResponseBody runs the validations defined on
// saml_acs_internal_error_response_body
func ValidateSamlAcsInternalErrorResponseBody(body *SamlAcsInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateSamlAcsNotFoundResponseBody runs the validations defined on
// saml_acs_not_found_response_body
func ValidateSamlAcsNotFoundResponseBody(body *SamlAcsNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateSamlAcsUnauthorizedResponseBody runs the validations defined on
// saml_acs_unauthorized_response_body
func ValidateSamlAcsUnauthorizedResponseBody(body *SamlAcsUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateSSOProviderResponseBody runs the validations defined on
// SSOProviderResponseBody
func ValidateSSOProviderResponseBody(body *SSOProviderResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "body"))
	}
	return
}

// ValidateUserResponseBody runs the validations defined on UserResponseBody
func ValidateUserResponseBody(body *UserResponseBody) (err error) {
	if body.Active == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("active", "body"))
	}
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.EmailVerified == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email_verified", "body"))
	}
	if body.Email != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", *body.Email, goa.FormatEmail))
	}
	return
}

// ValidateIdentityProviderResponseResponseBody runs the validations defined on
// IdentityProviderResponseResponseBody
func ValidateIdentityProviderResponseResponseBody(body *IdentityProviderResponseResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.OrganizationID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("organization_id", "body"))
	}
	if body.ProviderType == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("provider_type", "body"))
	}
	if body.Active == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("active", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	return
}

// ValidateCreateIdentityProviderRequestRequestBody runs the validations
// defined on CreateIdentityProviderRequestRequestBody
func ValidateCreateIdentityProviderRequestRequestBody(body *CreateIdentityProviderRequestRequestBody) (err error) {
	if !(body.ProviderType == "oauth2" || body.ProviderType == "oidc" || body.ProviderType == "saml") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.provider_type", body.ProviderType, []any{"oauth2", "oidc", "saml"}))
	}
	return
}
