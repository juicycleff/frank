// Code generated by goa v3.20.0, DO NOT EDIT.
//
// organizations client HTTP transport
//
// Command:
// $ goa gen github.com/juicycleff/frank/design -o .

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the organizations service endpoint HTTP clients.
type Client struct {
	// List Doer is the HTTP client used to make requests to the list endpoint.
	ListDoer goahttp.Doer

	// Create Doer is the HTTP client used to make requests to the create endpoint.
	CreateDoer goahttp.Doer

	// Get Doer is the HTTP client used to make requests to the get endpoint.
	GetDoer goahttp.Doer

	// Update Doer is the HTTP client used to make requests to the update endpoint.
	UpdateDoer goahttp.Doer

	// Delete Doer is the HTTP client used to make requests to the delete endpoint.
	DeleteDoer goahttp.Doer

	// ListMembers Doer is the HTTP client used to make requests to the
	// list_members endpoint.
	ListMembersDoer goahttp.Doer

	// AddMember Doer is the HTTP client used to make requests to the add_member
	// endpoint.
	AddMemberDoer goahttp.Doer

	// UpdateMember Doer is the HTTP client used to make requests to the
	// update_member endpoint.
	UpdateMemberDoer goahttp.Doer

	// RemoveMember Doer is the HTTP client used to make requests to the
	// remove_member endpoint.
	RemoveMemberDoer goahttp.Doer

	// ListFeatures Doer is the HTTP client used to make requests to the
	// list_features endpoint.
	ListFeaturesDoer goahttp.Doer

	// EnableFeature Doer is the HTTP client used to make requests to the
	// enable_feature endpoint.
	EnableFeatureDoer goahttp.Doer

	// DisableFeature Doer is the HTTP client used to make requests to the
	// disable_feature endpoint.
	DisableFeatureDoer goahttp.Doer

	// CORS Doer is the HTTP client used to make requests to the  endpoint.
	CORSDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the organizations service
// servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		ListDoer:            doer,
		CreateDoer:          doer,
		GetDoer:             doer,
		UpdateDoer:          doer,
		DeleteDoer:          doer,
		ListMembersDoer:     doer,
		AddMemberDoer:       doer,
		UpdateMemberDoer:    doer,
		RemoveMemberDoer:    doer,
		ListFeaturesDoer:    doer,
		EnableFeatureDoer:   doer,
		DisableFeatureDoer:  doer,
		CORSDoer:            doer,
		RestoreResponseBody: restoreBody,
		scheme:              scheme,
		host:                host,
		decoder:             dec,
		encoder:             enc,
	}
}

// List returns an endpoint that makes HTTP requests to the organizations
// service list server.
func (c *Client) List() goa.Endpoint {
	var (
		encodeRequest  = EncodeListRequest(c.encoder)
		decodeResponse = DecodeListResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildListRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ListDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("organizations", "list", err)
		}
		return decodeResponse(resp)
	}
}

// Create returns an endpoint that makes HTTP requests to the organizations
// service create server.
func (c *Client) Create() goa.Endpoint {
	var (
		encodeRequest  = EncodeCreateRequest(c.encoder)
		decodeResponse = DecodeCreateResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildCreateRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CreateDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("organizations", "create", err)
		}
		return decodeResponse(resp)
	}
}

// Get returns an endpoint that makes HTTP requests to the organizations
// service get server.
func (c *Client) Get() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetRequest(c.encoder)
		decodeResponse = DecodeGetResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGetRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("organizations", "get", err)
		}
		return decodeResponse(resp)
	}
}

// Update returns an endpoint that makes HTTP requests to the organizations
// service update server.
func (c *Client) Update() goa.Endpoint {
	var (
		encodeRequest  = EncodeUpdateRequest(c.encoder)
		decodeResponse = DecodeUpdateResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildUpdateRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UpdateDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("organizations", "update", err)
		}
		return decodeResponse(resp)
	}
}

// Delete returns an endpoint that makes HTTP requests to the organizations
// service delete server.
func (c *Client) Delete() goa.Endpoint {
	var (
		encodeRequest  = EncodeDeleteRequest(c.encoder)
		decodeResponse = DecodeDeleteResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildDeleteRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DeleteDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("organizations", "delete", err)
		}
		return decodeResponse(resp)
	}
}

// ListMembers returns an endpoint that makes HTTP requests to the
// organizations service list_members server.
func (c *Client) ListMembers() goa.Endpoint {
	var (
		encodeRequest  = EncodeListMembersRequest(c.encoder)
		decodeResponse = DecodeListMembersResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildListMembersRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ListMembersDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("organizations", "list_members", err)
		}
		return decodeResponse(resp)
	}
}

// AddMember returns an endpoint that makes HTTP requests to the organizations
// service add_member server.
func (c *Client) AddMember() goa.Endpoint {
	var (
		encodeRequest  = EncodeAddMemberRequest(c.encoder)
		decodeResponse = DecodeAddMemberResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildAddMemberRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.AddMemberDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("organizations", "add_member", err)
		}
		return decodeResponse(resp)
	}
}

// UpdateMember returns an endpoint that makes HTTP requests to the
// organizations service update_member server.
func (c *Client) UpdateMember() goa.Endpoint {
	var (
		encodeRequest  = EncodeUpdateMemberRequest(c.encoder)
		decodeResponse = DecodeUpdateMemberResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildUpdateMemberRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UpdateMemberDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("organizations", "update_member", err)
		}
		return decodeResponse(resp)
	}
}

// RemoveMember returns an endpoint that makes HTTP requests to the
// organizations service remove_member server.
func (c *Client) RemoveMember() goa.Endpoint {
	var (
		encodeRequest  = EncodeRemoveMemberRequest(c.encoder)
		decodeResponse = DecodeRemoveMemberResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildRemoveMemberRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.RemoveMemberDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("organizations", "remove_member", err)
		}
		return decodeResponse(resp)
	}
}

// ListFeatures returns an endpoint that makes HTTP requests to the
// organizations service list_features server.
func (c *Client) ListFeatures() goa.Endpoint {
	var (
		encodeRequest  = EncodeListFeaturesRequest(c.encoder)
		decodeResponse = DecodeListFeaturesResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildListFeaturesRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ListFeaturesDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("organizations", "list_features", err)
		}
		return decodeResponse(resp)
	}
}

// EnableFeature returns an endpoint that makes HTTP requests to the
// organizations service enable_feature server.
func (c *Client) EnableFeature() goa.Endpoint {
	var (
		encodeRequest  = EncodeEnableFeatureRequest(c.encoder)
		decodeResponse = DecodeEnableFeatureResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildEnableFeatureRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.EnableFeatureDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("organizations", "enable_feature", err)
		}
		return decodeResponse(resp)
	}
}

// DisableFeature returns an endpoint that makes HTTP requests to the
// organizations service disable_feature server.
func (c *Client) DisableFeature() goa.Endpoint {
	var (
		encodeRequest  = EncodeDisableFeatureRequest(c.encoder)
		decodeResponse = DecodeDisableFeatureResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildDisableFeatureRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DisableFeatureDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("organizations", "disable_feature", err)
		}
		return decodeResponse(resp)
	}
}
