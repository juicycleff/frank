// Code generated by goa v3.20.0, DO NOT EDIT.
//
// organizations HTTP client types
//
// Command:
// $ goa gen github.com/juicycleff/frank/design -o .

package client

import (
	organizations "github.com/juicycleff/frank/gen/organizations"
	goa "goa.design/goa/v3/pkg"
)

// CreateRequestBody is the type of the "organizations" service "create"
// endpoint HTTP request body.
type CreateRequestBody struct {
	Organization *CreateOrganizationRequestRequestBody `form:"organization" json:"organization" xml:"organization"`
}

// UpdateRequestBody is the type of the "organizations" service "update"
// endpoint HTTP request body.
type UpdateRequestBody struct {
	Organization *UpdateOrganizationRequestRequestBody `form:"organization" json:"organization" xml:"organization"`
}

// AddMemberRequestBody is the type of the "organizations" service "add_member"
// endpoint HTTP request body.
type AddMemberRequestBody struct {
	Member *AddOrganizationMemberRequestRequestBody `form:"member" json:"member" xml:"member"`
}

// UpdateMemberRequestBody is the type of the "organizations" service
// "update_member" endpoint HTTP request body.
type UpdateMemberRequestBody struct {
	Member *UpdateOrganizationMemberRequestRequestBody `form:"member" json:"member" xml:"member"`
}

// EnableFeatureRequestBody is the type of the "organizations" service
// "enable_feature" endpoint HTTP request body.
type EnableFeatureRequestBody struct {
	Feature *EnableFeatureRequestRequestBody `form:"feature" json:"feature" xml:"feature"`
}

// ListResponseBody is the type of the "organizations" service "list" endpoint
// HTTP response body.
type ListResponseBody struct {
	Data       []*OrganizationResponseResponseBody `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	Pagination *PaginationResponseResponseBody     `form:"pagination,omitempty" json:"pagination,omitempty" xml:"pagination,omitempty"`
}

// CreateResponseBody is the type of the "organizations" service "create"
// endpoint HTTP response body.
type CreateResponseBody struct {
	// Organization ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Organization name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Organization slug
	Slug *string `form:"slug,omitempty" json:"slug,omitempty" xml:"slug,omitempty"`
	// Organization domain
	Domain *string `form:"domain,omitempty" json:"domain,omitempty" xml:"domain,omitempty"`
	// Organization logo URL
	LogoURL *string `form:"logo_url,omitempty" json:"logo_url,omitempty" xml:"logo_url,omitempty"`
	// Organization plan
	Plan *string `form:"plan,omitempty" json:"plan,omitempty" xml:"plan,omitempty"`
	// Whether organization is active
	Active *bool `form:"active,omitempty" json:"active,omitempty" xml:"active,omitempty"`
	// Organization metadata
	Metadata map[string]any `form:"metadata,omitempty" json:"metadata,omitempty" xml:"metadata,omitempty"`
	// Trial end date
	TrialEndsAt *string `form:"trial_ends_at,omitempty" json:"trial_ends_at,omitempty" xml:"trial_ends_at,omitempty"`
	// Whether trial has been used
	TrialUsed *bool `form:"trial_used,omitempty" json:"trial_used,omitempty" xml:"trial_used,omitempty"`
	// Creation timestamp
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// Last update timestamp
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// GetResponseBody is the type of the "organizations" service "get" endpoint
// HTTP response body.
type GetResponseBody struct {
	// Organization ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Organization name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Organization slug
	Slug *string `form:"slug,omitempty" json:"slug,omitempty" xml:"slug,omitempty"`
	// Organization domain
	Domain *string `form:"domain,omitempty" json:"domain,omitempty" xml:"domain,omitempty"`
	// Organization logo URL
	LogoURL *string `form:"logo_url,omitempty" json:"logo_url,omitempty" xml:"logo_url,omitempty"`
	// Organization plan
	Plan *string `form:"plan,omitempty" json:"plan,omitempty" xml:"plan,omitempty"`
	// Whether organization is active
	Active *bool `form:"active,omitempty" json:"active,omitempty" xml:"active,omitempty"`
	// Organization metadata
	Metadata map[string]any `form:"metadata,omitempty" json:"metadata,omitempty" xml:"metadata,omitempty"`
	// Trial end date
	TrialEndsAt *string `form:"trial_ends_at,omitempty" json:"trial_ends_at,omitempty" xml:"trial_ends_at,omitempty"`
	// Whether trial has been used
	TrialUsed *bool `form:"trial_used,omitempty" json:"trial_used,omitempty" xml:"trial_used,omitempty"`
	// Creation timestamp
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// Last update timestamp
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// UpdateResponseBody is the type of the "organizations" service "update"
// endpoint HTTP response body.
type UpdateResponseBody struct {
	// Organization ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Organization name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Organization slug
	Slug *string `form:"slug,omitempty" json:"slug,omitempty" xml:"slug,omitempty"`
	// Organization domain
	Domain *string `form:"domain,omitempty" json:"domain,omitempty" xml:"domain,omitempty"`
	// Organization logo URL
	LogoURL *string `form:"logo_url,omitempty" json:"logo_url,omitempty" xml:"logo_url,omitempty"`
	// Organization plan
	Plan *string `form:"plan,omitempty" json:"plan,omitempty" xml:"plan,omitempty"`
	// Whether organization is active
	Active *bool `form:"active,omitempty" json:"active,omitempty" xml:"active,omitempty"`
	// Organization metadata
	Metadata map[string]any `form:"metadata,omitempty" json:"metadata,omitempty" xml:"metadata,omitempty"`
	// Trial end date
	TrialEndsAt *string `form:"trial_ends_at,omitempty" json:"trial_ends_at,omitempty" xml:"trial_ends_at,omitempty"`
	// Whether trial has been used
	TrialUsed *bool `form:"trial_used,omitempty" json:"trial_used,omitempty" xml:"trial_used,omitempty"`
	// Creation timestamp
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// Last update timestamp
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// ListMembersResponseBody is the type of the "organizations" service
// "list_members" endpoint HTTP response body.
type ListMembersResponseBody struct {
	Data       []*OrganizationMemberResponseResponseBody `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	Pagination *PaginationResponseResponseBody           `form:"pagination,omitempty" json:"pagination,omitempty" xml:"pagination,omitempty"`
}

// AddMemberResponseBody is the type of the "organizations" service
// "add_member" endpoint HTTP response body.
type AddMemberResponseBody struct {
	// Success message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdateMemberResponseBody is the type of the "organizations" service
// "update_member" endpoint HTTP response body.
type UpdateMemberResponseBody struct {
	// Success message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// ListFeaturesResponseBody is the type of the "organizations" service
// "list_features" endpoint HTTP response body.
type ListFeaturesResponseBody struct {
	Features []*OrganizationFeatureResponseResponseBody `form:"features,omitempty" json:"features,omitempty" xml:"features,omitempty"`
}

// EnableFeatureResponseBody is the type of the "organizations" service
// "enable_feature" endpoint HTTP response body.
type EnableFeatureResponseBody struct {
	// Success message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// ListBadRequestResponseBody is the type of the "organizations" service "list"
// endpoint HTTP response body for the "bad_request" error.
type ListBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListConflictResponseBody is the type of the "organizations" service "list"
// endpoint HTTP response body for the "conflict" error.
type ListConflictResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListForbiddenResponseBody is the type of the "organizations" service "list"
// endpoint HTTP response body for the "forbidden" error.
type ListForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListInternalErrorResponseBody is the type of the "organizations" service
// "list" endpoint HTTP response body for the "internal_error" error.
type ListInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListNotFoundResponseBody is the type of the "organizations" service "list"
// endpoint HTTP response body for the "not_found" error.
type ListNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListUnauthorizedResponseBody is the type of the "organizations" service
// "list" endpoint HTTP response body for the "unauthorized" error.
type ListUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreateBadRequestResponseBody is the type of the "organizations" service
// "create" endpoint HTTP response body for the "bad_request" error.
type CreateBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreateConflictResponseBody is the type of the "organizations" service
// "create" endpoint HTTP response body for the "conflict" error.
type CreateConflictResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreateForbiddenResponseBody is the type of the "organizations" service
// "create" endpoint HTTP response body for the "forbidden" error.
type CreateForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreateInternalErrorResponseBody is the type of the "organizations" service
// "create" endpoint HTTP response body for the "internal_error" error.
type CreateInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreateNotFoundResponseBody is the type of the "organizations" service
// "create" endpoint HTTP response body for the "not_found" error.
type CreateNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreateUnauthorizedResponseBody is the type of the "organizations" service
// "create" endpoint HTTP response body for the "unauthorized" error.
type CreateUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetBadRequestResponseBody is the type of the "organizations" service "get"
// endpoint HTTP response body for the "bad_request" error.
type GetBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetConflictResponseBody is the type of the "organizations" service "get"
// endpoint HTTP response body for the "conflict" error.
type GetConflictResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetForbiddenResponseBody is the type of the "organizations" service "get"
// endpoint HTTP response body for the "forbidden" error.
type GetForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetInternalErrorResponseBody is the type of the "organizations" service
// "get" endpoint HTTP response body for the "internal_error" error.
type GetInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetNotFoundResponseBody is the type of the "organizations" service "get"
// endpoint HTTP response body for the "not_found" error.
type GetNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetUnauthorizedResponseBody is the type of the "organizations" service "get"
// endpoint HTTP response body for the "unauthorized" error.
type GetUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateBadRequestResponseBody is the type of the "organizations" service
// "update" endpoint HTTP response body for the "bad_request" error.
type UpdateBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateConflictResponseBody is the type of the "organizations" service
// "update" endpoint HTTP response body for the "conflict" error.
type UpdateConflictResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateForbiddenResponseBody is the type of the "organizations" service
// "update" endpoint HTTP response body for the "forbidden" error.
type UpdateForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateInternalErrorResponseBody is the type of the "organizations" service
// "update" endpoint HTTP response body for the "internal_error" error.
type UpdateInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateNotFoundResponseBody is the type of the "organizations" service
// "update" endpoint HTTP response body for the "not_found" error.
type UpdateNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateUnauthorizedResponseBody is the type of the "organizations" service
// "update" endpoint HTTP response body for the "unauthorized" error.
type UpdateUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteBadRequestResponseBody is the type of the "organizations" service
// "delete" endpoint HTTP response body for the "bad_request" error.
type DeleteBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteConflictResponseBody is the type of the "organizations" service
// "delete" endpoint HTTP response body for the "conflict" error.
type DeleteConflictResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteForbiddenResponseBody is the type of the "organizations" service
// "delete" endpoint HTTP response body for the "forbidden" error.
type DeleteForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteInternalErrorResponseBody is the type of the "organizations" service
// "delete" endpoint HTTP response body for the "internal_error" error.
type DeleteInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteNotFoundResponseBody is the type of the "organizations" service
// "delete" endpoint HTTP response body for the "not_found" error.
type DeleteNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteUnauthorizedResponseBody is the type of the "organizations" service
// "delete" endpoint HTTP response body for the "unauthorized" error.
type DeleteUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListMembersBadRequestResponseBody is the type of the "organizations" service
// "list_members" endpoint HTTP response body for the "bad_request" error.
type ListMembersBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListMembersConflictResponseBody is the type of the "organizations" service
// "list_members" endpoint HTTP response body for the "conflict" error.
type ListMembersConflictResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListMembersForbiddenResponseBody is the type of the "organizations" service
// "list_members" endpoint HTTP response body for the "forbidden" error.
type ListMembersForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListMembersInternalErrorResponseBody is the type of the "organizations"
// service "list_members" endpoint HTTP response body for the "internal_error"
// error.
type ListMembersInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListMembersNotFoundResponseBody is the type of the "organizations" service
// "list_members" endpoint HTTP response body for the "not_found" error.
type ListMembersNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListMembersUnauthorizedResponseBody is the type of the "organizations"
// service "list_members" endpoint HTTP response body for the "unauthorized"
// error.
type ListMembersUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// AddMemberBadRequestResponseBody is the type of the "organizations" service
// "add_member" endpoint HTTP response body for the "bad_request" error.
type AddMemberBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// AddMemberConflictResponseBody is the type of the "organizations" service
// "add_member" endpoint HTTP response body for the "conflict" error.
type AddMemberConflictResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// AddMemberForbiddenResponseBody is the type of the "organizations" service
// "add_member" endpoint HTTP response body for the "forbidden" error.
type AddMemberForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// AddMemberInternalErrorResponseBody is the type of the "organizations"
// service "add_member" endpoint HTTP response body for the "internal_error"
// error.
type AddMemberInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// AddMemberNotFoundResponseBody is the type of the "organizations" service
// "add_member" endpoint HTTP response body for the "not_found" error.
type AddMemberNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// AddMemberUnauthorizedResponseBody is the type of the "organizations" service
// "add_member" endpoint HTTP response body for the "unauthorized" error.
type AddMemberUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateMemberBadRequestResponseBody is the type of the "organizations"
// service "update_member" endpoint HTTP response body for the "bad_request"
// error.
type UpdateMemberBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateMemberConflictResponseBody is the type of the "organizations" service
// "update_member" endpoint HTTP response body for the "conflict" error.
type UpdateMemberConflictResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateMemberForbiddenResponseBody is the type of the "organizations" service
// "update_member" endpoint HTTP response body for the "forbidden" error.
type UpdateMemberForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateMemberInternalErrorResponseBody is the type of the "organizations"
// service "update_member" endpoint HTTP response body for the "internal_error"
// error.
type UpdateMemberInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateMemberNotFoundResponseBody is the type of the "organizations" service
// "update_member" endpoint HTTP response body for the "not_found" error.
type UpdateMemberNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateMemberUnauthorizedResponseBody is the type of the "organizations"
// service "update_member" endpoint HTTP response body for the "unauthorized"
// error.
type UpdateMemberUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// RemoveMemberBadRequestResponseBody is the type of the "organizations"
// service "remove_member" endpoint HTTP response body for the "bad_request"
// error.
type RemoveMemberBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// RemoveMemberConflictResponseBody is the type of the "organizations" service
// "remove_member" endpoint HTTP response body for the "conflict" error.
type RemoveMemberConflictResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// RemoveMemberForbiddenResponseBody is the type of the "organizations" service
// "remove_member" endpoint HTTP response body for the "forbidden" error.
type RemoveMemberForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// RemoveMemberInternalErrorResponseBody is the type of the "organizations"
// service "remove_member" endpoint HTTP response body for the "internal_error"
// error.
type RemoveMemberInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// RemoveMemberNotFoundResponseBody is the type of the "organizations" service
// "remove_member" endpoint HTTP response body for the "not_found" error.
type RemoveMemberNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// RemoveMemberUnauthorizedResponseBody is the type of the "organizations"
// service "remove_member" endpoint HTTP response body for the "unauthorized"
// error.
type RemoveMemberUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListFeaturesBadRequestResponseBody is the type of the "organizations"
// service "list_features" endpoint HTTP response body for the "bad_request"
// error.
type ListFeaturesBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListFeaturesConflictResponseBody is the type of the "organizations" service
// "list_features" endpoint HTTP response body for the "conflict" error.
type ListFeaturesConflictResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListFeaturesForbiddenResponseBody is the type of the "organizations" service
// "list_features" endpoint HTTP response body for the "forbidden" error.
type ListFeaturesForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListFeaturesInternalErrorResponseBody is the type of the "organizations"
// service "list_features" endpoint HTTP response body for the "internal_error"
// error.
type ListFeaturesInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListFeaturesNotFoundResponseBody is the type of the "organizations" service
// "list_features" endpoint HTTP response body for the "not_found" error.
type ListFeaturesNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListFeaturesUnauthorizedResponseBody is the type of the "organizations"
// service "list_features" endpoint HTTP response body for the "unauthorized"
// error.
type ListFeaturesUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// EnableFeatureBadRequestResponseBody is the type of the "organizations"
// service "enable_feature" endpoint HTTP response body for the "bad_request"
// error.
type EnableFeatureBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// EnableFeatureConflictResponseBody is the type of the "organizations" service
// "enable_feature" endpoint HTTP response body for the "conflict" error.
type EnableFeatureConflictResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// EnableFeatureForbiddenResponseBody is the type of the "organizations"
// service "enable_feature" endpoint HTTP response body for the "forbidden"
// error.
type EnableFeatureForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// EnableFeatureInternalErrorResponseBody is the type of the "organizations"
// service "enable_feature" endpoint HTTP response body for the
// "internal_error" error.
type EnableFeatureInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// EnableFeatureNotFoundResponseBody is the type of the "organizations" service
// "enable_feature" endpoint HTTP response body for the "not_found" error.
type EnableFeatureNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// EnableFeatureUnauthorizedResponseBody is the type of the "organizations"
// service "enable_feature" endpoint HTTP response body for the "unauthorized"
// error.
type EnableFeatureUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DisableFeatureBadRequestResponseBody is the type of the "organizations"
// service "disable_feature" endpoint HTTP response body for the "bad_request"
// error.
type DisableFeatureBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DisableFeatureConflictResponseBody is the type of the "organizations"
// service "disable_feature" endpoint HTTP response body for the "conflict"
// error.
type DisableFeatureConflictResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DisableFeatureForbiddenResponseBody is the type of the "organizations"
// service "disable_feature" endpoint HTTP response body for the "forbidden"
// error.
type DisableFeatureForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DisableFeatureInternalErrorResponseBody is the type of the "organizations"
// service "disable_feature" endpoint HTTP response body for the
// "internal_error" error.
type DisableFeatureInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DisableFeatureNotFoundResponseBody is the type of the "organizations"
// service "disable_feature" endpoint HTTP response body for the "not_found"
// error.
type DisableFeatureNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DisableFeatureUnauthorizedResponseBody is the type of the "organizations"
// service "disable_feature" endpoint HTTP response body for the "unauthorized"
// error.
type DisableFeatureUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// OrganizationResponseResponseBody is used to define fields on response body
// types.
type OrganizationResponseResponseBody struct {
	// Organization ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Organization name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Organization slug
	Slug *string `form:"slug,omitempty" json:"slug,omitempty" xml:"slug,omitempty"`
	// Organization domain
	Domain *string `form:"domain,omitempty" json:"domain,omitempty" xml:"domain,omitempty"`
	// Organization logo URL
	LogoURL *string `form:"logo_url,omitempty" json:"logo_url,omitempty" xml:"logo_url,omitempty"`
	// Organization plan
	Plan *string `form:"plan,omitempty" json:"plan,omitempty" xml:"plan,omitempty"`
	// Whether organization is active
	Active *bool `form:"active,omitempty" json:"active,omitempty" xml:"active,omitempty"`
	// Organization metadata
	Metadata map[string]any `form:"metadata,omitempty" json:"metadata,omitempty" xml:"metadata,omitempty"`
	// Trial end date
	TrialEndsAt *string `form:"trial_ends_at,omitempty" json:"trial_ends_at,omitempty" xml:"trial_ends_at,omitempty"`
	// Whether trial has been used
	TrialUsed *bool `form:"trial_used,omitempty" json:"trial_used,omitempty" xml:"trial_used,omitempty"`
	// Creation timestamp
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// Last update timestamp
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// PaginationResponseResponseBody is used to define fields on response body
// types.
type PaginationResponseResponseBody struct {
	// Total number of items
	Total *int `form:"total,omitempty" json:"total,omitempty" xml:"total,omitempty"`
	// Current offset
	Offset *int `form:"offset,omitempty" json:"offset,omitempty" xml:"offset,omitempty"`
	// Current limit
	Limit *int `form:"limit,omitempty" json:"limit,omitempty" xml:"limit,omitempty"`
}

// CreateOrganizationRequestRequestBody is used to define fields on request
// body types.
type CreateOrganizationRequestRequestBody struct {
	// Organization name
	Name string `form:"name" json:"name" xml:"name"`
	// Organization slug
	Slug *string `form:"slug,omitempty" json:"slug,omitempty" xml:"slug,omitempty"`
	// Organization domain
	Domain *string `form:"domain,omitempty" json:"domain,omitempty" xml:"domain,omitempty"`
	// Organization logo URL
	LogoURL *string `form:"logo_url,omitempty" json:"logo_url,omitempty" xml:"logo_url,omitempty"`
	// Organization plan
	Plan string `form:"plan" json:"plan" xml:"plan"`
	// Organization metadata
	Metadata map[string]any `form:"metadata,omitempty" json:"metadata,omitempty" xml:"metadata,omitempty"`
	// Number of trial days
	TrialDays *int `form:"trial_days,omitempty" json:"trial_days,omitempty" xml:"trial_days,omitempty"`
	// Features to enable
	Features []string `form:"features,omitempty" json:"features,omitempty" xml:"features,omitempty"`
}

// UpdateOrganizationRequestRequestBody is used to define fields on request
// body types.
type UpdateOrganizationRequestRequestBody struct {
	// Organization name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Organization domain
	Domain *string `form:"domain,omitempty" json:"domain,omitempty" xml:"domain,omitempty"`
	// Organization logo URL
	LogoURL *string `form:"logo_url,omitempty" json:"logo_url,omitempty" xml:"logo_url,omitempty"`
	// Organization plan
	Plan *string `form:"plan,omitempty" json:"plan,omitempty" xml:"plan,omitempty"`
	// Whether organization is active
	Active *bool `form:"active,omitempty" json:"active,omitempty" xml:"active,omitempty"`
	// Organization metadata
	Metadata map[string]any `form:"metadata,omitempty" json:"metadata,omitempty" xml:"metadata,omitempty"`
}

// OrganizationMemberResponseResponseBody is used to define fields on response
// body types.
type OrganizationMemberResponseResponseBody struct {
	// User ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// User email
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// User first name
	FirstName *string `form:"first_name,omitempty" json:"first_name,omitempty" xml:"first_name,omitempty"`
	// User last name
	LastName *string `form:"last_name,omitempty" json:"last_name,omitempty" xml:"last_name,omitempty"`
	// User roles in organization
	Roles []string `form:"roles,omitempty" json:"roles,omitempty" xml:"roles,omitempty"`
	// When user joined the organization
	JoinedAt *string `form:"joined_at,omitempty" json:"joined_at,omitempty" xml:"joined_at,omitempty"`
}

// AddOrganizationMemberRequestRequestBody is used to define fields on request
// body types.
type AddOrganizationMemberRequestRequestBody struct {
	// User ID to add
	UserID string `form:"user_id" json:"user_id" xml:"user_id"`
	// Roles to assign
	Roles []string `form:"roles" json:"roles" xml:"roles"`
}

// UpdateOrganizationMemberRequestRequestBody is used to define fields on
// request body types.
type UpdateOrganizationMemberRequestRequestBody struct {
	// Roles to assign
	Roles []string `form:"roles" json:"roles" xml:"roles"`
}

// OrganizationFeatureResponseResponseBody is used to define fields on response
// body types.
type OrganizationFeatureResponseResponseBody struct {
	// Feature ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Feature key
	Key *string `form:"key,omitempty" json:"key,omitempty" xml:"key,omitempty"`
	// Feature name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Feature description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Whether feature is enabled
	Enabled *bool `form:"enabled,omitempty" json:"enabled,omitempty" xml:"enabled,omitempty"`
	// Whether feature is premium
	IsPremium *bool `form:"is_premium,omitempty" json:"is_premium,omitempty" xml:"is_premium,omitempty"`
	// Feature component category
	Component *string `form:"component,omitempty" json:"component,omitempty" xml:"component,omitempty"`
	// Feature settings
	Settings map[string]any `form:"settings,omitempty" json:"settings,omitempty" xml:"settings,omitempty"`
}

// EnableFeatureRequestRequestBody is used to define fields on request body
// types.
type EnableFeatureRequestRequestBody struct {
	// Feature key to enable
	FeatureKey string `form:"feature_key" json:"feature_key" xml:"feature_key"`
	// Feature settings
	Settings map[string]any `form:"settings,omitempty" json:"settings,omitempty" xml:"settings,omitempty"`
}

// NewCreateRequestBody builds the HTTP request body from the payload of the
// "create" endpoint of the "organizations" service.
func NewCreateRequestBody(p *organizations.CreatePayload) *CreateRequestBody {
	body := &CreateRequestBody{}
	if p.Organization != nil {
		body.Organization = marshalOrganizationsCreateOrganizationRequestToCreateOrganizationRequestRequestBody(p.Organization)
	}
	return body
}

// NewUpdateRequestBody builds the HTTP request body from the payload of the
// "update" endpoint of the "organizations" service.
func NewUpdateRequestBody(p *organizations.UpdatePayload) *UpdateRequestBody {
	body := &UpdateRequestBody{}
	if p.Organization != nil {
		body.Organization = marshalOrganizationsUpdateOrganizationRequestToUpdateOrganizationRequestRequestBody(p.Organization)
	}
	return body
}

// NewAddMemberRequestBody builds the HTTP request body from the payload of the
// "add_member" endpoint of the "organizations" service.
func NewAddMemberRequestBody(p *organizations.AddMemberPayload) *AddMemberRequestBody {
	body := &AddMemberRequestBody{}
	if p.Member != nil {
		body.Member = marshalOrganizationsAddOrganizationMemberRequestToAddOrganizationMemberRequestRequestBody(p.Member)
	}
	return body
}

// NewUpdateMemberRequestBody builds the HTTP request body from the payload of
// the "update_member" endpoint of the "organizations" service.
func NewUpdateMemberRequestBody(p *organizations.UpdateMemberPayload) *UpdateMemberRequestBody {
	body := &UpdateMemberRequestBody{}
	if p.Member != nil {
		body.Member = marshalOrganizationsUpdateOrganizationMemberRequestToUpdateOrganizationMemberRequestRequestBody(p.Member)
	}
	return body
}

// NewEnableFeatureRequestBody builds the HTTP request body from the payload of
// the "enable_feature" endpoint of the "organizations" service.
func NewEnableFeatureRequestBody(p *organizations.EnableFeaturePayload) *EnableFeatureRequestBody {
	body := &EnableFeatureRequestBody{}
	if p.Feature != nil {
		body.Feature = marshalOrganizationsEnableFeatureRequestToEnableFeatureRequestRequestBody(p.Feature)
	}
	return body
}

// NewListResultOK builds a "organizations" service "list" endpoint result from
// a HTTP "OK" response.
func NewListResultOK(body *ListResponseBody) *organizations.ListResult {
	v := &organizations.ListResult{}
	v.Data = make([]*organizations.OrganizationResponse, len(body.Data))
	for i, val := range body.Data {
		v.Data[i] = unmarshalOrganizationResponseResponseBodyToOrganizationsOrganizationResponse(val)
	}
	v.Pagination = unmarshalPaginationResponseResponseBodyToDesigntypesPaginationResponse(body.Pagination)

	return v
}

// NewListBadRequest builds a organizations service list endpoint bad_request
// error.
func NewListBadRequest(body *ListBadRequestResponseBody) *organizations.BadRequestError {
	v := &organizations.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewListConflict builds a organizations service list endpoint conflict error.
func NewListConflict(body *ListConflictResponseBody) *organizations.ConflictError {
	v := &organizations.ConflictError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewListForbidden builds a organizations service list endpoint forbidden
// error.
func NewListForbidden(body *ListForbiddenResponseBody) *organizations.ForbiddenError {
	v := &organizations.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewListInternalError builds a organizations service list endpoint
// internal_error error.
func NewListInternalError(body *ListInternalErrorResponseBody) *organizations.InternalServerError {
	v := &organizations.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewListNotFound builds a organizations service list endpoint not_found error.
func NewListNotFound(body *ListNotFoundResponseBody) *organizations.NotFoundError {
	v := &organizations.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewListUnauthorized builds a organizations service list endpoint
// unauthorized error.
func NewListUnauthorized(body *ListUnauthorizedResponseBody) *organizations.UnauthorizedError {
	v := &organizations.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewCreateOrganizationResponseCreated builds a "organizations" service
// "create" endpoint result from a HTTP "Created" response.
func NewCreateOrganizationResponseCreated(body *CreateResponseBody) *organizations.OrganizationResponse {
	v := &organizations.OrganizationResponse{
		ID:          *body.ID,
		Name:        *body.Name,
		Slug:        *body.Slug,
		Domain:      body.Domain,
		LogoURL:     body.LogoURL,
		Plan:        body.Plan,
		Active:      *body.Active,
		TrialEndsAt: body.TrialEndsAt,
		TrialUsed:   body.TrialUsed,
		CreatedAt:   *body.CreatedAt,
		UpdatedAt:   *body.UpdatedAt,
	}
	if body.Metadata != nil {
		v.Metadata = make(map[string]any, len(body.Metadata))
		for key, val := range body.Metadata {
			tk := key
			tv := val
			v.Metadata[tk] = tv
		}
	}

	return v
}

// NewCreateBadRequest builds a organizations service create endpoint
// bad_request error.
func NewCreateBadRequest(body *CreateBadRequestResponseBody) *organizations.BadRequestError {
	v := &organizations.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewCreateConflict builds a organizations service create endpoint conflict
// error.
func NewCreateConflict(body *CreateConflictResponseBody) *organizations.ConflictError {
	v := &organizations.ConflictError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewCreateForbidden builds a organizations service create endpoint forbidden
// error.
func NewCreateForbidden(body *CreateForbiddenResponseBody) *organizations.ForbiddenError {
	v := &organizations.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewCreateInternalError builds a organizations service create endpoint
// internal_error error.
func NewCreateInternalError(body *CreateInternalErrorResponseBody) *organizations.InternalServerError {
	v := &organizations.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewCreateNotFound builds a organizations service create endpoint not_found
// error.
func NewCreateNotFound(body *CreateNotFoundResponseBody) *organizations.NotFoundError {
	v := &organizations.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewCreateUnauthorized builds a organizations service create endpoint
// unauthorized error.
func NewCreateUnauthorized(body *CreateUnauthorizedResponseBody) *organizations.UnauthorizedError {
	v := &organizations.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewGetOrganizationResponseOK builds a "organizations" service "get" endpoint
// result from a HTTP "OK" response.
func NewGetOrganizationResponseOK(body *GetResponseBody) *organizations.OrganizationResponse {
	v := &organizations.OrganizationResponse{
		ID:          *body.ID,
		Name:        *body.Name,
		Slug:        *body.Slug,
		Domain:      body.Domain,
		LogoURL:     body.LogoURL,
		Plan:        body.Plan,
		Active:      *body.Active,
		TrialEndsAt: body.TrialEndsAt,
		TrialUsed:   body.TrialUsed,
		CreatedAt:   *body.CreatedAt,
		UpdatedAt:   *body.UpdatedAt,
	}
	if body.Metadata != nil {
		v.Metadata = make(map[string]any, len(body.Metadata))
		for key, val := range body.Metadata {
			tk := key
			tv := val
			v.Metadata[tk] = tv
		}
	}

	return v
}

// NewGetBadRequest builds a organizations service get endpoint bad_request
// error.
func NewGetBadRequest(body *GetBadRequestResponseBody) *organizations.BadRequestError {
	v := &organizations.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewGetConflict builds a organizations service get endpoint conflict error.
func NewGetConflict(body *GetConflictResponseBody) *organizations.ConflictError {
	v := &organizations.ConflictError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewGetForbidden builds a organizations service get endpoint forbidden error.
func NewGetForbidden(body *GetForbiddenResponseBody) *organizations.ForbiddenError {
	v := &organizations.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewGetInternalError builds a organizations service get endpoint
// internal_error error.
func NewGetInternalError(body *GetInternalErrorResponseBody) *organizations.InternalServerError {
	v := &organizations.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewGetNotFound builds a organizations service get endpoint not_found error.
func NewGetNotFound(body *GetNotFoundResponseBody) *organizations.NotFoundError {
	v := &organizations.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewGetUnauthorized builds a organizations service get endpoint unauthorized
// error.
func NewGetUnauthorized(body *GetUnauthorizedResponseBody) *organizations.UnauthorizedError {
	v := &organizations.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewUpdateOrganizationResponseOK builds a "organizations" service "update"
// endpoint result from a HTTP "OK" response.
func NewUpdateOrganizationResponseOK(body *UpdateResponseBody) *organizations.OrganizationResponse {
	v := &organizations.OrganizationResponse{
		ID:          *body.ID,
		Name:        *body.Name,
		Slug:        *body.Slug,
		Domain:      body.Domain,
		LogoURL:     body.LogoURL,
		Plan:        body.Plan,
		Active:      *body.Active,
		TrialEndsAt: body.TrialEndsAt,
		TrialUsed:   body.TrialUsed,
		CreatedAt:   *body.CreatedAt,
		UpdatedAt:   *body.UpdatedAt,
	}
	if body.Metadata != nil {
		v.Metadata = make(map[string]any, len(body.Metadata))
		for key, val := range body.Metadata {
			tk := key
			tv := val
			v.Metadata[tk] = tv
		}
	}

	return v
}

// NewUpdateBadRequest builds a organizations service update endpoint
// bad_request error.
func NewUpdateBadRequest(body *UpdateBadRequestResponseBody) *organizations.BadRequestError {
	v := &organizations.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewUpdateConflict builds a organizations service update endpoint conflict
// error.
func NewUpdateConflict(body *UpdateConflictResponseBody) *organizations.ConflictError {
	v := &organizations.ConflictError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewUpdateForbidden builds a organizations service update endpoint forbidden
// error.
func NewUpdateForbidden(body *UpdateForbiddenResponseBody) *organizations.ForbiddenError {
	v := &organizations.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewUpdateInternalError builds a organizations service update endpoint
// internal_error error.
func NewUpdateInternalError(body *UpdateInternalErrorResponseBody) *organizations.InternalServerError {
	v := &organizations.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewUpdateNotFound builds a organizations service update endpoint not_found
// error.
func NewUpdateNotFound(body *UpdateNotFoundResponseBody) *organizations.NotFoundError {
	v := &organizations.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewUpdateUnauthorized builds a organizations service update endpoint
// unauthorized error.
func NewUpdateUnauthorized(body *UpdateUnauthorizedResponseBody) *organizations.UnauthorizedError {
	v := &organizations.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewDeleteBadRequest builds a organizations service delete endpoint
// bad_request error.
func NewDeleteBadRequest(body *DeleteBadRequestResponseBody) *organizations.BadRequestError {
	v := &organizations.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewDeleteConflict builds a organizations service delete endpoint conflict
// error.
func NewDeleteConflict(body *DeleteConflictResponseBody) *organizations.ConflictError {
	v := &organizations.ConflictError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewDeleteForbidden builds a organizations service delete endpoint forbidden
// error.
func NewDeleteForbidden(body *DeleteForbiddenResponseBody) *organizations.ForbiddenError {
	v := &organizations.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewDeleteInternalError builds a organizations service delete endpoint
// internal_error error.
func NewDeleteInternalError(body *DeleteInternalErrorResponseBody) *organizations.InternalServerError {
	v := &organizations.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewDeleteNotFound builds a organizations service delete endpoint not_found
// error.
func NewDeleteNotFound(body *DeleteNotFoundResponseBody) *organizations.NotFoundError {
	v := &organizations.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewDeleteUnauthorized builds a organizations service delete endpoint
// unauthorized error.
func NewDeleteUnauthorized(body *DeleteUnauthorizedResponseBody) *organizations.UnauthorizedError {
	v := &organizations.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewListMembersResultOK builds a "organizations" service "list_members"
// endpoint result from a HTTP "OK" response.
func NewListMembersResultOK(body *ListMembersResponseBody) *organizations.ListMembersResult {
	v := &organizations.ListMembersResult{}
	v.Data = make([]*organizations.OrganizationMemberResponse, len(body.Data))
	for i, val := range body.Data {
		v.Data[i] = unmarshalOrganizationMemberResponseResponseBodyToOrganizationsOrganizationMemberResponse(val)
	}
	v.Pagination = unmarshalPaginationResponseResponseBodyToDesigntypesPaginationResponse(body.Pagination)

	return v
}

// NewListMembersBadRequest builds a organizations service list_members
// endpoint bad_request error.
func NewListMembersBadRequest(body *ListMembersBadRequestResponseBody) *organizations.BadRequestError {
	v := &organizations.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewListMembersConflict builds a organizations service list_members endpoint
// conflict error.
func NewListMembersConflict(body *ListMembersConflictResponseBody) *organizations.ConflictError {
	v := &organizations.ConflictError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewListMembersForbidden builds a organizations service list_members endpoint
// forbidden error.
func NewListMembersForbidden(body *ListMembersForbiddenResponseBody) *organizations.ForbiddenError {
	v := &organizations.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewListMembersInternalError builds a organizations service list_members
// endpoint internal_error error.
func NewListMembersInternalError(body *ListMembersInternalErrorResponseBody) *organizations.InternalServerError {
	v := &organizations.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewListMembersNotFound builds a organizations service list_members endpoint
// not_found error.
func NewListMembersNotFound(body *ListMembersNotFoundResponseBody) *organizations.NotFoundError {
	v := &organizations.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewListMembersUnauthorized builds a organizations service list_members
// endpoint unauthorized error.
func NewListMembersUnauthorized(body *ListMembersUnauthorizedResponseBody) *organizations.UnauthorizedError {
	v := &organizations.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewAddMemberResultOK builds a "organizations" service "add_member" endpoint
// result from a HTTP "OK" response.
func NewAddMemberResultOK(body *AddMemberResponseBody) *organizations.AddMemberResult {
	v := &organizations.AddMemberResult{
		Message: *body.Message,
	}

	return v
}

// NewAddMemberBadRequest builds a organizations service add_member endpoint
// bad_request error.
func NewAddMemberBadRequest(body *AddMemberBadRequestResponseBody) *organizations.BadRequestError {
	v := &organizations.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewAddMemberConflict builds a organizations service add_member endpoint
// conflict error.
func NewAddMemberConflict(body *AddMemberConflictResponseBody) *organizations.ConflictError {
	v := &organizations.ConflictError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewAddMemberForbidden builds a organizations service add_member endpoint
// forbidden error.
func NewAddMemberForbidden(body *AddMemberForbiddenResponseBody) *organizations.ForbiddenError {
	v := &organizations.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewAddMemberInternalError builds a organizations service add_member endpoint
// internal_error error.
func NewAddMemberInternalError(body *AddMemberInternalErrorResponseBody) *organizations.InternalServerError {
	v := &organizations.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewAddMemberNotFound builds a organizations service add_member endpoint
// not_found error.
func NewAddMemberNotFound(body *AddMemberNotFoundResponseBody) *organizations.NotFoundError {
	v := &organizations.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewAddMemberUnauthorized builds a organizations service add_member endpoint
// unauthorized error.
func NewAddMemberUnauthorized(body *AddMemberUnauthorizedResponseBody) *organizations.UnauthorizedError {
	v := &organizations.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewUpdateMemberResultOK builds a "organizations" service "update_member"
// endpoint result from a HTTP "OK" response.
func NewUpdateMemberResultOK(body *UpdateMemberResponseBody) *organizations.UpdateMemberResult {
	v := &organizations.UpdateMemberResult{
		Message: *body.Message,
	}

	return v
}

// NewUpdateMemberBadRequest builds a organizations service update_member
// endpoint bad_request error.
func NewUpdateMemberBadRequest(body *UpdateMemberBadRequestResponseBody) *organizations.BadRequestError {
	v := &organizations.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewUpdateMemberConflict builds a organizations service update_member
// endpoint conflict error.
func NewUpdateMemberConflict(body *UpdateMemberConflictResponseBody) *organizations.ConflictError {
	v := &organizations.ConflictError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewUpdateMemberForbidden builds a organizations service update_member
// endpoint forbidden error.
func NewUpdateMemberForbidden(body *UpdateMemberForbiddenResponseBody) *organizations.ForbiddenError {
	v := &organizations.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewUpdateMemberInternalError builds a organizations service update_member
// endpoint internal_error error.
func NewUpdateMemberInternalError(body *UpdateMemberInternalErrorResponseBody) *organizations.InternalServerError {
	v := &organizations.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewUpdateMemberNotFound builds a organizations service update_member
// endpoint not_found error.
func NewUpdateMemberNotFound(body *UpdateMemberNotFoundResponseBody) *organizations.NotFoundError {
	v := &organizations.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewUpdateMemberUnauthorized builds a organizations service update_member
// endpoint unauthorized error.
func NewUpdateMemberUnauthorized(body *UpdateMemberUnauthorizedResponseBody) *organizations.UnauthorizedError {
	v := &organizations.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewRemoveMemberBadRequest builds a organizations service remove_member
// endpoint bad_request error.
func NewRemoveMemberBadRequest(body *RemoveMemberBadRequestResponseBody) *organizations.BadRequestError {
	v := &organizations.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewRemoveMemberConflict builds a organizations service remove_member
// endpoint conflict error.
func NewRemoveMemberConflict(body *RemoveMemberConflictResponseBody) *organizations.ConflictError {
	v := &organizations.ConflictError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewRemoveMemberForbidden builds a organizations service remove_member
// endpoint forbidden error.
func NewRemoveMemberForbidden(body *RemoveMemberForbiddenResponseBody) *organizations.ForbiddenError {
	v := &organizations.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewRemoveMemberInternalError builds a organizations service remove_member
// endpoint internal_error error.
func NewRemoveMemberInternalError(body *RemoveMemberInternalErrorResponseBody) *organizations.InternalServerError {
	v := &organizations.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewRemoveMemberNotFound builds a organizations service remove_member
// endpoint not_found error.
func NewRemoveMemberNotFound(body *RemoveMemberNotFoundResponseBody) *organizations.NotFoundError {
	v := &organizations.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewRemoveMemberUnauthorized builds a organizations service remove_member
// endpoint unauthorized error.
func NewRemoveMemberUnauthorized(body *RemoveMemberUnauthorizedResponseBody) *organizations.UnauthorizedError {
	v := &organizations.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewListFeaturesResultOK builds a "organizations" service "list_features"
// endpoint result from a HTTP "OK" response.
func NewListFeaturesResultOK(body *ListFeaturesResponseBody) *organizations.ListFeaturesResult {
	v := &organizations.ListFeaturesResult{}
	v.Features = make([]*organizations.OrganizationFeatureResponse, len(body.Features))
	for i, val := range body.Features {
		v.Features[i] = unmarshalOrganizationFeatureResponseResponseBodyToOrganizationsOrganizationFeatureResponse(val)
	}

	return v
}

// NewListFeaturesBadRequest builds a organizations service list_features
// endpoint bad_request error.
func NewListFeaturesBadRequest(body *ListFeaturesBadRequestResponseBody) *organizations.BadRequestError {
	v := &organizations.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewListFeaturesConflict builds a organizations service list_features
// endpoint conflict error.
func NewListFeaturesConflict(body *ListFeaturesConflictResponseBody) *organizations.ConflictError {
	v := &organizations.ConflictError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewListFeaturesForbidden builds a organizations service list_features
// endpoint forbidden error.
func NewListFeaturesForbidden(body *ListFeaturesForbiddenResponseBody) *organizations.ForbiddenError {
	v := &organizations.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewListFeaturesInternalError builds a organizations service list_features
// endpoint internal_error error.
func NewListFeaturesInternalError(body *ListFeaturesInternalErrorResponseBody) *organizations.InternalServerError {
	v := &organizations.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewListFeaturesNotFound builds a organizations service list_features
// endpoint not_found error.
func NewListFeaturesNotFound(body *ListFeaturesNotFoundResponseBody) *organizations.NotFoundError {
	v := &organizations.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewListFeaturesUnauthorized builds a organizations service list_features
// endpoint unauthorized error.
func NewListFeaturesUnauthorized(body *ListFeaturesUnauthorizedResponseBody) *organizations.UnauthorizedError {
	v := &organizations.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewEnableFeatureResultOK builds a "organizations" service "enable_feature"
// endpoint result from a HTTP "OK" response.
func NewEnableFeatureResultOK(body *EnableFeatureResponseBody) *organizations.EnableFeatureResult {
	v := &organizations.EnableFeatureResult{
		Message: *body.Message,
	}

	return v
}

// NewEnableFeatureBadRequest builds a organizations service enable_feature
// endpoint bad_request error.
func NewEnableFeatureBadRequest(body *EnableFeatureBadRequestResponseBody) *organizations.BadRequestError {
	v := &organizations.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewEnableFeatureConflict builds a organizations service enable_feature
// endpoint conflict error.
func NewEnableFeatureConflict(body *EnableFeatureConflictResponseBody) *organizations.ConflictError {
	v := &organizations.ConflictError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewEnableFeatureForbidden builds a organizations service enable_feature
// endpoint forbidden error.
func NewEnableFeatureForbidden(body *EnableFeatureForbiddenResponseBody) *organizations.ForbiddenError {
	v := &organizations.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewEnableFeatureInternalError builds a organizations service enable_feature
// endpoint internal_error error.
func NewEnableFeatureInternalError(body *EnableFeatureInternalErrorResponseBody) *organizations.InternalServerError {
	v := &organizations.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewEnableFeatureNotFound builds a organizations service enable_feature
// endpoint not_found error.
func NewEnableFeatureNotFound(body *EnableFeatureNotFoundResponseBody) *organizations.NotFoundError {
	v := &organizations.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewEnableFeatureUnauthorized builds a organizations service enable_feature
// endpoint unauthorized error.
func NewEnableFeatureUnauthorized(body *EnableFeatureUnauthorizedResponseBody) *organizations.UnauthorizedError {
	v := &organizations.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewDisableFeatureBadRequest builds a organizations service disable_feature
// endpoint bad_request error.
func NewDisableFeatureBadRequest(body *DisableFeatureBadRequestResponseBody) *organizations.BadRequestError {
	v := &organizations.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewDisableFeatureConflict builds a organizations service disable_feature
// endpoint conflict error.
func NewDisableFeatureConflict(body *DisableFeatureConflictResponseBody) *organizations.ConflictError {
	v := &organizations.ConflictError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewDisableFeatureForbidden builds a organizations service disable_feature
// endpoint forbidden error.
func NewDisableFeatureForbidden(body *DisableFeatureForbiddenResponseBody) *organizations.ForbiddenError {
	v := &organizations.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewDisableFeatureInternalError builds a organizations service
// disable_feature endpoint internal_error error.
func NewDisableFeatureInternalError(body *DisableFeatureInternalErrorResponseBody) *organizations.InternalServerError {
	v := &organizations.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewDisableFeatureNotFound builds a organizations service disable_feature
// endpoint not_found error.
func NewDisableFeatureNotFound(body *DisableFeatureNotFoundResponseBody) *organizations.NotFoundError {
	v := &organizations.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewDisableFeatureUnauthorized builds a organizations service disable_feature
// endpoint unauthorized error.
func NewDisableFeatureUnauthorized(body *DisableFeatureUnauthorizedResponseBody) *organizations.UnauthorizedError {
	v := &organizations.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// ValidateListResponseBody runs the validations defined on ListResponseBody
func ValidateListResponseBody(body *ListResponseBody) (err error) {
	if body.Data == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("data", "body"))
	}
	if body.Pagination == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("pagination", "body"))
	}
	for _, e := range body.Data {
		if e != nil {
			if err2 := ValidateOrganizationResponseResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if body.Pagination != nil {
		if err2 := ValidatePaginationResponseResponseBody(body.Pagination); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateCreateResponseBody runs the validations defined on CreateResponseBody
func ValidateCreateResponseBody(body *CreateResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Slug == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("slug", "body"))
	}
	if body.Active == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("active", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	if body.UpdatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("updated_at", "body"))
	}
	return
}

// ValidateGetResponseBody runs the validations defined on GetResponseBody
func ValidateGetResponseBody(body *GetResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Slug == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("slug", "body"))
	}
	if body.Active == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("active", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	if body.UpdatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("updated_at", "body"))
	}
	return
}

// ValidateUpdateResponseBody runs the validations defined on UpdateResponseBody
func ValidateUpdateResponseBody(body *UpdateResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Slug == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("slug", "body"))
	}
	if body.Active == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("active", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	if body.UpdatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("updated_at", "body"))
	}
	return
}

// ValidateListMembersResponseBody runs the validations defined on
// list_members_response_body
func ValidateListMembersResponseBody(body *ListMembersResponseBody) (err error) {
	if body.Data == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("data", "body"))
	}
	if body.Pagination == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("pagination", "body"))
	}
	for _, e := range body.Data {
		if e != nil {
			if err2 := ValidateOrganizationMemberResponseResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if body.Pagination != nil {
		if err2 := ValidatePaginationResponseResponseBody(body.Pagination); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateAddMemberResponseBody runs the validations defined on
// add_member_response_body
func ValidateAddMemberResponseBody(body *AddMemberResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateMemberResponseBody runs the validations defined on
// update_member_response_body
func ValidateUpdateMemberResponseBody(body *UpdateMemberResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateListFeaturesResponseBody runs the validations defined on
// list_features_response_body
func ValidateListFeaturesResponseBody(body *ListFeaturesResponseBody) (err error) {
	if body.Features == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("features", "body"))
	}
	for _, e := range body.Features {
		if e != nil {
			if err2 := ValidateOrganizationFeatureResponseResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateEnableFeatureResponseBody runs the validations defined on
// enable_feature_response_body
func ValidateEnableFeatureResponseBody(body *EnableFeatureResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateListBadRequestResponseBody runs the validations defined on
// list_bad_request_response_body
func ValidateListBadRequestResponseBody(body *ListBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateListConflictResponseBody runs the validations defined on
// list_conflict_response_body
func ValidateListConflictResponseBody(body *ListConflictResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateListForbiddenResponseBody runs the validations defined on
// list_forbidden_response_body
func ValidateListForbiddenResponseBody(body *ListForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateListInternalErrorResponseBody runs the validations defined on
// list_internal_error_response_body
func ValidateListInternalErrorResponseBody(body *ListInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateListNotFoundResponseBody runs the validations defined on
// list_not_found_response_body
func ValidateListNotFoundResponseBody(body *ListNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateListUnauthorizedResponseBody runs the validations defined on
// list_unauthorized_response_body
func ValidateListUnauthorizedResponseBody(body *ListUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateBadRequestResponseBody runs the validations defined on
// create_bad_request_response_body
func ValidateCreateBadRequestResponseBody(body *CreateBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateConflictResponseBody runs the validations defined on
// create_conflict_response_body
func ValidateCreateConflictResponseBody(body *CreateConflictResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateForbiddenResponseBody runs the validations defined on
// create_forbidden_response_body
func ValidateCreateForbiddenResponseBody(body *CreateForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateInternalErrorResponseBody runs the validations defined on
// create_internal_error_response_body
func ValidateCreateInternalErrorResponseBody(body *CreateInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateNotFoundResponseBody runs the validations defined on
// create_not_found_response_body
func ValidateCreateNotFoundResponseBody(body *CreateNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateUnauthorizedResponseBody runs the validations defined on
// create_unauthorized_response_body
func ValidateCreateUnauthorizedResponseBody(body *CreateUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetBadRequestResponseBody runs the validations defined on
// get_bad_request_response_body
func ValidateGetBadRequestResponseBody(body *GetBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetConflictResponseBody runs the validations defined on
// get_conflict_response_body
func ValidateGetConflictResponseBody(body *GetConflictResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetForbiddenResponseBody runs the validations defined on
// get_forbidden_response_body
func ValidateGetForbiddenResponseBody(body *GetForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetInternalErrorResponseBody runs the validations defined on
// get_internal_error_response_body
func ValidateGetInternalErrorResponseBody(body *GetInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetNotFoundResponseBody runs the validations defined on
// get_not_found_response_body
func ValidateGetNotFoundResponseBody(body *GetNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetUnauthorizedResponseBody runs the validations defined on
// get_unauthorized_response_body
func ValidateGetUnauthorizedResponseBody(body *GetUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateBadRequestResponseBody runs the validations defined on
// update_bad_request_response_body
func ValidateUpdateBadRequestResponseBody(body *UpdateBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateConflictResponseBody runs the validations defined on
// update_conflict_response_body
func ValidateUpdateConflictResponseBody(body *UpdateConflictResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateForbiddenResponseBody runs the validations defined on
// update_forbidden_response_body
func ValidateUpdateForbiddenResponseBody(body *UpdateForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateInternalErrorResponseBody runs the validations defined on
// update_internal_error_response_body
func ValidateUpdateInternalErrorResponseBody(body *UpdateInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateNotFoundResponseBody runs the validations defined on
// update_not_found_response_body
func ValidateUpdateNotFoundResponseBody(body *UpdateNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateUnauthorizedResponseBody runs the validations defined on
// update_unauthorized_response_body
func ValidateUpdateUnauthorizedResponseBody(body *UpdateUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteBadRequestResponseBody runs the validations defined on
// delete_bad_request_response_body
func ValidateDeleteBadRequestResponseBody(body *DeleteBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteConflictResponseBody runs the validations defined on
// delete_conflict_response_body
func ValidateDeleteConflictResponseBody(body *DeleteConflictResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteForbiddenResponseBody runs the validations defined on
// delete_forbidden_response_body
func ValidateDeleteForbiddenResponseBody(body *DeleteForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteInternalErrorResponseBody runs the validations defined on
// delete_internal_error_response_body
func ValidateDeleteInternalErrorResponseBody(body *DeleteInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteNotFoundResponseBody runs the validations defined on
// delete_not_found_response_body
func ValidateDeleteNotFoundResponseBody(body *DeleteNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteUnauthorizedResponseBody runs the validations defined on
// delete_unauthorized_response_body
func ValidateDeleteUnauthorizedResponseBody(body *DeleteUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateListMembersBadRequestResponseBody runs the validations defined on
// list_members_bad_request_response_body
func ValidateListMembersBadRequestResponseBody(body *ListMembersBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateListMembersConflictResponseBody runs the validations defined on
// list_members_conflict_response_body
func ValidateListMembersConflictResponseBody(body *ListMembersConflictResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateListMembersForbiddenResponseBody runs the validations defined on
// list_members_forbidden_response_body
func ValidateListMembersForbiddenResponseBody(body *ListMembersForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateListMembersInternalErrorResponseBody runs the validations defined on
// list_members_internal_error_response_body
func ValidateListMembersInternalErrorResponseBody(body *ListMembersInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateListMembersNotFoundResponseBody runs the validations defined on
// list_members_not_found_response_body
func ValidateListMembersNotFoundResponseBody(body *ListMembersNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateListMembersUnauthorizedResponseBody runs the validations defined on
// list_members_unauthorized_response_body
func ValidateListMembersUnauthorizedResponseBody(body *ListMembersUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateAddMemberBadRequestResponseBody runs the validations defined on
// add_member_bad_request_response_body
func ValidateAddMemberBadRequestResponseBody(body *AddMemberBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateAddMemberConflictResponseBody runs the validations defined on
// add_member_conflict_response_body
func ValidateAddMemberConflictResponseBody(body *AddMemberConflictResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateAddMemberForbiddenResponseBody runs the validations defined on
// add_member_forbidden_response_body
func ValidateAddMemberForbiddenResponseBody(body *AddMemberForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateAddMemberInternalErrorResponseBody runs the validations defined on
// add_member_internal_error_response_body
func ValidateAddMemberInternalErrorResponseBody(body *AddMemberInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateAddMemberNotFoundResponseBody runs the validations defined on
// add_member_not_found_response_body
func ValidateAddMemberNotFoundResponseBody(body *AddMemberNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateAddMemberUnauthorizedResponseBody runs the validations defined on
// add_member_unauthorized_response_body
func ValidateAddMemberUnauthorizedResponseBody(body *AddMemberUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateMemberBadRequestResponseBody runs the validations defined on
// update_member_bad_request_response_body
func ValidateUpdateMemberBadRequestResponseBody(body *UpdateMemberBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateMemberConflictResponseBody runs the validations defined on
// update_member_conflict_response_body
func ValidateUpdateMemberConflictResponseBody(body *UpdateMemberConflictResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateMemberForbiddenResponseBody runs the validations defined on
// update_member_forbidden_response_body
func ValidateUpdateMemberForbiddenResponseBody(body *UpdateMemberForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateMemberInternalErrorResponseBody runs the validations defined
// on update_member_internal_error_response_body
func ValidateUpdateMemberInternalErrorResponseBody(body *UpdateMemberInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateMemberNotFoundResponseBody runs the validations defined on
// update_member_not_found_response_body
func ValidateUpdateMemberNotFoundResponseBody(body *UpdateMemberNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateMemberUnauthorizedResponseBody runs the validations defined on
// update_member_unauthorized_response_body
func ValidateUpdateMemberUnauthorizedResponseBody(body *UpdateMemberUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateRemoveMemberBadRequestResponseBody runs the validations defined on
// remove_member_bad_request_response_body
func ValidateRemoveMemberBadRequestResponseBody(body *RemoveMemberBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateRemoveMemberConflictResponseBody runs the validations defined on
// remove_member_conflict_response_body
func ValidateRemoveMemberConflictResponseBody(body *RemoveMemberConflictResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateRemoveMemberForbiddenResponseBody runs the validations defined on
// remove_member_forbidden_response_body
func ValidateRemoveMemberForbiddenResponseBody(body *RemoveMemberForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateRemoveMemberInternalErrorResponseBody runs the validations defined
// on remove_member_internal_error_response_body
func ValidateRemoveMemberInternalErrorResponseBody(body *RemoveMemberInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateRemoveMemberNotFoundResponseBody runs the validations defined on
// remove_member_not_found_response_body
func ValidateRemoveMemberNotFoundResponseBody(body *RemoveMemberNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateRemoveMemberUnauthorizedResponseBody runs the validations defined on
// remove_member_unauthorized_response_body
func ValidateRemoveMemberUnauthorizedResponseBody(body *RemoveMemberUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateListFeaturesBadRequestResponseBody runs the validations defined on
// list_features_bad_request_response_body
func ValidateListFeaturesBadRequestResponseBody(body *ListFeaturesBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateListFeaturesConflictResponseBody runs the validations defined on
// list_features_conflict_response_body
func ValidateListFeaturesConflictResponseBody(body *ListFeaturesConflictResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateListFeaturesForbiddenResponseBody runs the validations defined on
// list_features_forbidden_response_body
func ValidateListFeaturesForbiddenResponseBody(body *ListFeaturesForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateListFeaturesInternalErrorResponseBody runs the validations defined
// on list_features_internal_error_response_body
func ValidateListFeaturesInternalErrorResponseBody(body *ListFeaturesInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateListFeaturesNotFoundResponseBody runs the validations defined on
// list_features_not_found_response_body
func ValidateListFeaturesNotFoundResponseBody(body *ListFeaturesNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateListFeaturesUnauthorizedResponseBody runs the validations defined on
// list_features_unauthorized_response_body
func ValidateListFeaturesUnauthorizedResponseBody(body *ListFeaturesUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateEnableFeatureBadRequestResponseBody runs the validations defined on
// enable_feature_bad_request_response_body
func ValidateEnableFeatureBadRequestResponseBody(body *EnableFeatureBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateEnableFeatureConflictResponseBody runs the validations defined on
// enable_feature_conflict_response_body
func ValidateEnableFeatureConflictResponseBody(body *EnableFeatureConflictResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateEnableFeatureForbiddenResponseBody runs the validations defined on
// enable_feature_forbidden_response_body
func ValidateEnableFeatureForbiddenResponseBody(body *EnableFeatureForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateEnableFeatureInternalErrorResponseBody runs the validations defined
// on enable_feature_internal_error_response_body
func ValidateEnableFeatureInternalErrorResponseBody(body *EnableFeatureInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateEnableFeatureNotFoundResponseBody runs the validations defined on
// enable_feature_not_found_response_body
func ValidateEnableFeatureNotFoundResponseBody(body *EnableFeatureNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateEnableFeatureUnauthorizedResponseBody runs the validations defined
// on enable_feature_unauthorized_response_body
func ValidateEnableFeatureUnauthorizedResponseBody(body *EnableFeatureUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDisableFeatureBadRequestResponseBody runs the validations defined on
// disable_feature_bad_request_response_body
func ValidateDisableFeatureBadRequestResponseBody(body *DisableFeatureBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDisableFeatureConflictResponseBody runs the validations defined on
// disable_feature_conflict_response_body
func ValidateDisableFeatureConflictResponseBody(body *DisableFeatureConflictResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDisableFeatureForbiddenResponseBody runs the validations defined on
// disable_feature_forbidden_response_body
func ValidateDisableFeatureForbiddenResponseBody(body *DisableFeatureForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDisableFeatureInternalErrorResponseBody runs the validations defined
// on disable_feature_internal_error_response_body
func ValidateDisableFeatureInternalErrorResponseBody(body *DisableFeatureInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDisableFeatureNotFoundResponseBody runs the validations defined on
// disable_feature_not_found_response_body
func ValidateDisableFeatureNotFoundResponseBody(body *DisableFeatureNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDisableFeatureUnauthorizedResponseBody runs the validations defined
// on disable_feature_unauthorized_response_body
func ValidateDisableFeatureUnauthorizedResponseBody(body *DisableFeatureUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateOrganizationResponseResponseBody runs the validations defined on
// OrganizationResponseResponseBody
func ValidateOrganizationResponseResponseBody(body *OrganizationResponseResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Slug == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("slug", "body"))
	}
	if body.Active == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("active", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	if body.UpdatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("updated_at", "body"))
	}
	return
}

// ValidatePaginationResponseResponseBody runs the validations defined on
// PaginationResponseResponseBody
func ValidatePaginationResponseResponseBody(body *PaginationResponseResponseBody) (err error) {
	if body.Total == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total", "body"))
	}
	if body.Offset == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("offset", "body"))
	}
	if body.Limit == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("limit", "body"))
	}
	return
}

// ValidateCreateOrganizationRequestRequestBody runs the validations defined on
// CreateOrganizationRequestRequestBody
func ValidateCreateOrganizationRequestRequestBody(body *CreateOrganizationRequestRequestBody) (err error) {
	if body.TrialDays != nil {
		if *body.TrialDays < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.trial_days", *body.TrialDays, 0, true))
		}
	}
	return
}

// ValidateOrganizationMemberResponseResponseBody runs the validations defined
// on OrganizationMemberResponseResponseBody
func ValidateOrganizationMemberResponseResponseBody(body *OrganizationMemberResponseResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Roles == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("roles", "body"))
	}
	if body.JoinedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("joined_at", "body"))
	}
	return
}

// ValidateAddOrganizationMemberRequestRequestBody runs the validations defined
// on AddOrganizationMemberRequestRequestBody
func ValidateAddOrganizationMemberRequestRequestBody(body *AddOrganizationMemberRequestRequestBody) (err error) {
	if body.Roles == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("roles", "body"))
	}
	return
}

// ValidateUpdateOrganizationMemberRequestRequestBody runs the validations
// defined on UpdateOrganizationMemberRequestRequestBody
func ValidateUpdateOrganizationMemberRequestRequestBody(body *UpdateOrganizationMemberRequestRequestBody) (err error) {
	if body.Roles == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("roles", "body"))
	}
	return
}

// ValidateOrganizationFeatureResponseResponseBody runs the validations defined
// on OrganizationFeatureResponseResponseBody
func ValidateOrganizationFeatureResponseResponseBody(body *OrganizationFeatureResponseResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Key == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("key", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Enabled == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("enabled", "body"))
	}
	return
}
