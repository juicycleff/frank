// Code generated by goa v3.20.0, DO NOT EDIT.
//
// organizations HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/juicycleff/frank/design -o .

package client

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	designtypes "github.com/juicycleff/frank/gen/designtypes"
	organizations "github.com/juicycleff/frank/gen/organizations"
	goahttp "goa.design/goa/v3/http"
)

// BuildListRequest instantiates a HTTP request object with method and path set
// to call the "organizations" service "list" endpoint
func (c *Client) BuildListRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListOrganizationsPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("organizations", "list", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeListRequest returns an encoder for requests sent to the organizations
// list server.
func EncodeListRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*organizations.ListPayload)
		if !ok {
			return goahttp.ErrInvalidType("organizations", "list", "*organizations.ListPayload", v)
		}
		if p.JWT != nil {
			head := *p.JWT
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		values := req.URL.Query()
		values.Add("offset", fmt.Sprintf("%v", p.Offset))
		values.Add("limit", fmt.Sprintf("%v", p.Limit))
		if p.Search != nil {
			values.Add("search", *p.Search)
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeListResponse returns a decoder for responses returned by the
// organizations list endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeListResponse may return the following errors:
//   - "bad_request" (type *organizations.BadRequestError): http.StatusBadRequest
//   - "conflict" (type *organizations.ConflictError): http.StatusConflict
//   - "forbidden" (type *organizations.ForbiddenError): http.StatusForbidden
//   - "internal_error" (type *organizations.InternalServerError): http.StatusInternalServerError
//   - "not_found" (type *organizations.NotFoundError): http.StatusNotFound
//   - "unauthorized" (type *organizations.UnauthorizedError): http.StatusUnauthorized
//   - error: internal error
func DecodeListResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("organizations", "list", err)
			}
			err = ValidateListResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("organizations", "list", err)
			}
			res := NewListResultOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body ListBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("organizations", "list", err)
			}
			err = ValidateListBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("organizations", "list", err)
			}
			return nil, NewListBadRequest(&body)
		case http.StatusConflict:
			var (
				body ListConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("organizations", "list", err)
			}
			err = ValidateListConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("organizations", "list", err)
			}
			return nil, NewListConflict(&body)
		case http.StatusForbidden:
			var (
				body ListForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("organizations", "list", err)
			}
			err = ValidateListForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("organizations", "list", err)
			}
			return nil, NewListForbidden(&body)
		case http.StatusInternalServerError:
			var (
				body ListInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("organizations", "list", err)
			}
			err = ValidateListInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("organizations", "list", err)
			}
			return nil, NewListInternalError(&body)
		case http.StatusNotFound:
			var (
				body ListNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("organizations", "list", err)
			}
			err = ValidateListNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("organizations", "list", err)
			}
			return nil, NewListNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body ListUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("organizations", "list", err)
			}
			err = ValidateListUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("organizations", "list", err)
			}
			return nil, NewListUnauthorized(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("organizations", "list", resp.StatusCode, string(body))
		}
	}
}

// BuildCreateRequest instantiates a HTTP request object with method and path
// set to call the "organizations" service "create" endpoint
func (c *Client) BuildCreateRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateOrganizationsPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("organizations", "create", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateRequest returns an encoder for requests sent to the
// organizations create server.
func EncodeCreateRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*organizations.CreatePayload)
		if !ok {
			return goahttp.ErrInvalidType("organizations", "create", "*organizations.CreatePayload", v)
		}
		if p.JWT != nil {
			head := *p.JWT
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		body := NewCreateRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("organizations", "create", err)
		}
		return nil
	}
}

// DecodeCreateResponse returns a decoder for responses returned by the
// organizations create endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeCreateResponse may return the following errors:
//   - "bad_request" (type *organizations.BadRequestError): http.StatusBadRequest
//   - "conflict" (type *organizations.ConflictError): http.StatusConflict
//   - "forbidden" (type *organizations.ForbiddenError): http.StatusForbidden
//   - "internal_error" (type *organizations.InternalServerError): http.StatusInternalServerError
//   - "not_found" (type *organizations.NotFoundError): http.StatusNotFound
//   - "unauthorized" (type *organizations.UnauthorizedError): http.StatusUnauthorized
//   - error: internal error
func DecodeCreateResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body CreateResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("organizations", "create", err)
			}
			err = ValidateCreateResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("organizations", "create", err)
			}
			res := NewCreateOrganizationResponseCreated(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body CreateBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("organizations", "create", err)
			}
			err = ValidateCreateBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("organizations", "create", err)
			}
			return nil, NewCreateBadRequest(&body)
		case http.StatusConflict:
			var (
				body CreateConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("organizations", "create", err)
			}
			err = ValidateCreateConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("organizations", "create", err)
			}
			return nil, NewCreateConflict(&body)
		case http.StatusForbidden:
			var (
				body CreateForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("organizations", "create", err)
			}
			err = ValidateCreateForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("organizations", "create", err)
			}
			return nil, NewCreateForbidden(&body)
		case http.StatusInternalServerError:
			var (
				body CreateInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("organizations", "create", err)
			}
			err = ValidateCreateInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("organizations", "create", err)
			}
			return nil, NewCreateInternalError(&body)
		case http.StatusNotFound:
			var (
				body CreateNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("organizations", "create", err)
			}
			err = ValidateCreateNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("organizations", "create", err)
			}
			return nil, NewCreateNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body CreateUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("organizations", "create", err)
			}
			err = ValidateCreateUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("organizations", "create", err)
			}
			return nil, NewCreateUnauthorized(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("organizations", "create", resp.StatusCode, string(body))
		}
	}
}

// BuildGetRequest instantiates a HTTP request object with method and path set
// to call the "organizations" service "get" endpoint
func (c *Client) BuildGetRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(*organizations.GetPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("organizations", "get", "*organizations.GetPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetOrganizationsPath(id)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("organizations", "get", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetRequest returns an encoder for requests sent to the organizations
// get server.
func EncodeGetRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*organizations.GetPayload)
		if !ok {
			return goahttp.ErrInvalidType("organizations", "get", "*organizations.GetPayload", v)
		}
		if p.JWT != nil {
			head := *p.JWT
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeGetResponse returns a decoder for responses returned by the
// organizations get endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeGetResponse may return the following errors:
//   - "bad_request" (type *organizations.BadRequestError): http.StatusBadRequest
//   - "conflict" (type *organizations.ConflictError): http.StatusConflict
//   - "forbidden" (type *organizations.ForbiddenError): http.StatusForbidden
//   - "internal_error" (type *organizations.InternalServerError): http.StatusInternalServerError
//   - "not_found" (type *organizations.NotFoundError): http.StatusNotFound
//   - "unauthorized" (type *organizations.UnauthorizedError): http.StatusUnauthorized
//   - error: internal error
func DecodeGetResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("organizations", "get", err)
			}
			err = ValidateGetResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("organizations", "get", err)
			}
			res := NewGetOrganizationResponseOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body GetBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("organizations", "get", err)
			}
			err = ValidateGetBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("organizations", "get", err)
			}
			return nil, NewGetBadRequest(&body)
		case http.StatusConflict:
			var (
				body GetConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("organizations", "get", err)
			}
			err = ValidateGetConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("organizations", "get", err)
			}
			return nil, NewGetConflict(&body)
		case http.StatusForbidden:
			var (
				body GetForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("organizations", "get", err)
			}
			err = ValidateGetForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("organizations", "get", err)
			}
			return nil, NewGetForbidden(&body)
		case http.StatusInternalServerError:
			var (
				body GetInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("organizations", "get", err)
			}
			err = ValidateGetInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("organizations", "get", err)
			}
			return nil, NewGetInternalError(&body)
		case http.StatusNotFound:
			var (
				body GetNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("organizations", "get", err)
			}
			err = ValidateGetNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("organizations", "get", err)
			}
			return nil, NewGetNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body GetUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("organizations", "get", err)
			}
			err = ValidateGetUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("organizations", "get", err)
			}
			return nil, NewGetUnauthorized(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("organizations", "get", resp.StatusCode, string(body))
		}
	}
}

// BuildUpdateRequest instantiates a HTTP request object with method and path
// set to call the "organizations" service "update" endpoint
func (c *Client) BuildUpdateRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(*organizations.UpdatePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("organizations", "update", "*organizations.UpdatePayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpdateOrganizationsPath(id)}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("organizations", "update", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpdateRequest returns an encoder for requests sent to the
// organizations update server.
func EncodeUpdateRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*organizations.UpdatePayload)
		if !ok {
			return goahttp.ErrInvalidType("organizations", "update", "*organizations.UpdatePayload", v)
		}
		if p.JWT != nil {
			head := *p.JWT
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		body := NewUpdateRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("organizations", "update", err)
		}
		return nil
	}
}

// DecodeUpdateResponse returns a decoder for responses returned by the
// organizations update endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeUpdateResponse may return the following errors:
//   - "bad_request" (type *organizations.BadRequestError): http.StatusBadRequest
//   - "conflict" (type *organizations.ConflictError): http.StatusConflict
//   - "forbidden" (type *organizations.ForbiddenError): http.StatusForbidden
//   - "internal_error" (type *organizations.InternalServerError): http.StatusInternalServerError
//   - "not_found" (type *organizations.NotFoundError): http.StatusNotFound
//   - "unauthorized" (type *organizations.UnauthorizedError): http.StatusUnauthorized
//   - error: internal error
func DecodeUpdateResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body UpdateResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("organizations", "update", err)
			}
			err = ValidateUpdateResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("organizations", "update", err)
			}
			res := NewUpdateOrganizationResponseOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body UpdateBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("organizations", "update", err)
			}
			err = ValidateUpdateBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("organizations", "update", err)
			}
			return nil, NewUpdateBadRequest(&body)
		case http.StatusConflict:
			var (
				body UpdateConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("organizations", "update", err)
			}
			err = ValidateUpdateConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("organizations", "update", err)
			}
			return nil, NewUpdateConflict(&body)
		case http.StatusForbidden:
			var (
				body UpdateForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("organizations", "update", err)
			}
			err = ValidateUpdateForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("organizations", "update", err)
			}
			return nil, NewUpdateForbidden(&body)
		case http.StatusInternalServerError:
			var (
				body UpdateInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("organizations", "update", err)
			}
			err = ValidateUpdateInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("organizations", "update", err)
			}
			return nil, NewUpdateInternalError(&body)
		case http.StatusNotFound:
			var (
				body UpdateNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("organizations", "update", err)
			}
			err = ValidateUpdateNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("organizations", "update", err)
			}
			return nil, NewUpdateNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body UpdateUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("organizations", "update", err)
			}
			err = ValidateUpdateUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("organizations", "update", err)
			}
			return nil, NewUpdateUnauthorized(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("organizations", "update", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteRequest instantiates a HTTP request object with method and path
// set to call the "organizations" service "delete" endpoint
func (c *Client) BuildDeleteRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(*organizations.DeletePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("organizations", "delete", "*organizations.DeletePayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteOrganizationsPath(id)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("organizations", "delete", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDeleteRequest returns an encoder for requests sent to the
// organizations delete server.
func EncodeDeleteRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*organizations.DeletePayload)
		if !ok {
			return goahttp.ErrInvalidType("organizations", "delete", "*organizations.DeletePayload", v)
		}
		if p.JWT != nil {
			head := *p.JWT
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeDeleteResponse returns a decoder for responses returned by the
// organizations delete endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeDeleteResponse may return the following errors:
//   - "bad_request" (type *organizations.BadRequestError): http.StatusBadRequest
//   - "conflict" (type *organizations.ConflictError): http.StatusConflict
//   - "forbidden" (type *organizations.ForbiddenError): http.StatusForbidden
//   - "internal_error" (type *organizations.InternalServerError): http.StatusInternalServerError
//   - "not_found" (type *organizations.NotFoundError): http.StatusNotFound
//   - "unauthorized" (type *organizations.UnauthorizedError): http.StatusUnauthorized
//   - error: internal error
func DecodeDeleteResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			return nil, nil
		case http.StatusBadRequest:
			var (
				body DeleteBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("organizations", "delete", err)
			}
			err = ValidateDeleteBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("organizations", "delete", err)
			}
			return nil, NewDeleteBadRequest(&body)
		case http.StatusConflict:
			var (
				body DeleteConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("organizations", "delete", err)
			}
			err = ValidateDeleteConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("organizations", "delete", err)
			}
			return nil, NewDeleteConflict(&body)
		case http.StatusForbidden:
			var (
				body DeleteForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("organizations", "delete", err)
			}
			err = ValidateDeleteForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("organizations", "delete", err)
			}
			return nil, NewDeleteForbidden(&body)
		case http.StatusInternalServerError:
			var (
				body DeleteInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("organizations", "delete", err)
			}
			err = ValidateDeleteInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("organizations", "delete", err)
			}
			return nil, NewDeleteInternalError(&body)
		case http.StatusNotFound:
			var (
				body DeleteNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("organizations", "delete", err)
			}
			err = ValidateDeleteNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("organizations", "delete", err)
			}
			return nil, NewDeleteNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body DeleteUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("organizations", "delete", err)
			}
			err = ValidateDeleteUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("organizations", "delete", err)
			}
			return nil, NewDeleteUnauthorized(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("organizations", "delete", resp.StatusCode, string(body))
		}
	}
}

// BuildListMembersRequest instantiates a HTTP request object with method and
// path set to call the "organizations" service "list_members" endpoint
func (c *Client) BuildListMembersRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(*organizations.ListMembersPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("organizations", "list_members", "*organizations.ListMembersPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListMembersOrganizationsPath(id)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("organizations", "list_members", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeListMembersRequest returns an encoder for requests sent to the
// organizations list_members server.
func EncodeListMembersRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*organizations.ListMembersPayload)
		if !ok {
			return goahttp.ErrInvalidType("organizations", "list_members", "*organizations.ListMembersPayload", v)
		}
		if p.JWT != nil {
			head := *p.JWT
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		values := req.URL.Query()
		values.Add("offset", fmt.Sprintf("%v", p.Offset))
		values.Add("limit", fmt.Sprintf("%v", p.Limit))
		if p.Search != nil {
			values.Add("search", *p.Search)
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeListMembersResponse returns a decoder for responses returned by the
// organizations list_members endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeListMembersResponse may return the following errors:
//   - "bad_request" (type *organizations.BadRequestError): http.StatusBadRequest
//   - "conflict" (type *organizations.ConflictError): http.StatusConflict
//   - "forbidden" (type *organizations.ForbiddenError): http.StatusForbidden
//   - "internal_error" (type *organizations.InternalServerError): http.StatusInternalServerError
//   - "not_found" (type *organizations.NotFoundError): http.StatusNotFound
//   - "unauthorized" (type *organizations.UnauthorizedError): http.StatusUnauthorized
//   - error: internal error
func DecodeListMembersResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListMembersResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("organizations", "list_members", err)
			}
			err = ValidateListMembersResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("organizations", "list_members", err)
			}
			res := NewListMembersResultOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body ListMembersBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("organizations", "list_members", err)
			}
			err = ValidateListMembersBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("organizations", "list_members", err)
			}
			return nil, NewListMembersBadRequest(&body)
		case http.StatusConflict:
			var (
				body ListMembersConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("organizations", "list_members", err)
			}
			err = ValidateListMembersConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("organizations", "list_members", err)
			}
			return nil, NewListMembersConflict(&body)
		case http.StatusForbidden:
			var (
				body ListMembersForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("organizations", "list_members", err)
			}
			err = ValidateListMembersForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("organizations", "list_members", err)
			}
			return nil, NewListMembersForbidden(&body)
		case http.StatusInternalServerError:
			var (
				body ListMembersInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("organizations", "list_members", err)
			}
			err = ValidateListMembersInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("organizations", "list_members", err)
			}
			return nil, NewListMembersInternalError(&body)
		case http.StatusNotFound:
			var (
				body ListMembersNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("organizations", "list_members", err)
			}
			err = ValidateListMembersNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("organizations", "list_members", err)
			}
			return nil, NewListMembersNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body ListMembersUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("organizations", "list_members", err)
			}
			err = ValidateListMembersUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("organizations", "list_members", err)
			}
			return nil, NewListMembersUnauthorized(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("organizations", "list_members", resp.StatusCode, string(body))
		}
	}
}

// BuildAddMemberRequest instantiates a HTTP request object with method and
// path set to call the "organizations" service "add_member" endpoint
func (c *Client) BuildAddMemberRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(*organizations.AddMemberPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("organizations", "add_member", "*organizations.AddMemberPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: AddMemberOrganizationsPath(id)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("organizations", "add_member", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeAddMemberRequest returns an encoder for requests sent to the
// organizations add_member server.
func EncodeAddMemberRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*organizations.AddMemberPayload)
		if !ok {
			return goahttp.ErrInvalidType("organizations", "add_member", "*organizations.AddMemberPayload", v)
		}
		if p.JWT != nil {
			head := *p.JWT
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		body := NewAddMemberRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("organizations", "add_member", err)
		}
		return nil
	}
}

// DecodeAddMemberResponse returns a decoder for responses returned by the
// organizations add_member endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeAddMemberResponse may return the following errors:
//   - "bad_request" (type *organizations.BadRequestError): http.StatusBadRequest
//   - "conflict" (type *organizations.ConflictError): http.StatusConflict
//   - "forbidden" (type *organizations.ForbiddenError): http.StatusForbidden
//   - "internal_error" (type *organizations.InternalServerError): http.StatusInternalServerError
//   - "not_found" (type *organizations.NotFoundError): http.StatusNotFound
//   - "unauthorized" (type *organizations.UnauthorizedError): http.StatusUnauthorized
//   - error: internal error
func DecodeAddMemberResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body AddMemberResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("organizations", "add_member", err)
			}
			err = ValidateAddMemberResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("organizations", "add_member", err)
			}
			res := NewAddMemberResultOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body AddMemberBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("organizations", "add_member", err)
			}
			err = ValidateAddMemberBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("organizations", "add_member", err)
			}
			return nil, NewAddMemberBadRequest(&body)
		case http.StatusConflict:
			var (
				body AddMemberConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("organizations", "add_member", err)
			}
			err = ValidateAddMemberConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("organizations", "add_member", err)
			}
			return nil, NewAddMemberConflict(&body)
		case http.StatusForbidden:
			var (
				body AddMemberForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("organizations", "add_member", err)
			}
			err = ValidateAddMemberForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("organizations", "add_member", err)
			}
			return nil, NewAddMemberForbidden(&body)
		case http.StatusInternalServerError:
			var (
				body AddMemberInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("organizations", "add_member", err)
			}
			err = ValidateAddMemberInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("organizations", "add_member", err)
			}
			return nil, NewAddMemberInternalError(&body)
		case http.StatusNotFound:
			var (
				body AddMemberNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("organizations", "add_member", err)
			}
			err = ValidateAddMemberNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("organizations", "add_member", err)
			}
			return nil, NewAddMemberNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body AddMemberUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("organizations", "add_member", err)
			}
			err = ValidateAddMemberUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("organizations", "add_member", err)
			}
			return nil, NewAddMemberUnauthorized(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("organizations", "add_member", resp.StatusCode, string(body))
		}
	}
}

// BuildUpdateMemberRequest instantiates a HTTP request object with method and
// path set to call the "organizations" service "update_member" endpoint
func (c *Client) BuildUpdateMemberRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		id     string
		userID string
	)
	{
		p, ok := v.(*organizations.UpdateMemberPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("organizations", "update_member", "*organizations.UpdateMemberPayload", v)
		}
		id = p.ID
		userID = p.UserID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpdateMemberOrganizationsPath(id, userID)}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("organizations", "update_member", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpdateMemberRequest returns an encoder for requests sent to the
// organizations update_member server.
func EncodeUpdateMemberRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*organizations.UpdateMemberPayload)
		if !ok {
			return goahttp.ErrInvalidType("organizations", "update_member", "*organizations.UpdateMemberPayload", v)
		}
		if p.JWT != nil {
			head := *p.JWT
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		body := NewUpdateMemberRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("organizations", "update_member", err)
		}
		return nil
	}
}

// DecodeUpdateMemberResponse returns a decoder for responses returned by the
// organizations update_member endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeUpdateMemberResponse may return the following errors:
//   - "bad_request" (type *organizations.BadRequestError): http.StatusBadRequest
//   - "conflict" (type *organizations.ConflictError): http.StatusConflict
//   - "forbidden" (type *organizations.ForbiddenError): http.StatusForbidden
//   - "internal_error" (type *organizations.InternalServerError): http.StatusInternalServerError
//   - "not_found" (type *organizations.NotFoundError): http.StatusNotFound
//   - "unauthorized" (type *organizations.UnauthorizedError): http.StatusUnauthorized
//   - error: internal error
func DecodeUpdateMemberResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body UpdateMemberResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("organizations", "update_member", err)
			}
			err = ValidateUpdateMemberResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("organizations", "update_member", err)
			}
			res := NewUpdateMemberResultOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body UpdateMemberBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("organizations", "update_member", err)
			}
			err = ValidateUpdateMemberBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("organizations", "update_member", err)
			}
			return nil, NewUpdateMemberBadRequest(&body)
		case http.StatusConflict:
			var (
				body UpdateMemberConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("organizations", "update_member", err)
			}
			err = ValidateUpdateMemberConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("organizations", "update_member", err)
			}
			return nil, NewUpdateMemberConflict(&body)
		case http.StatusForbidden:
			var (
				body UpdateMemberForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("organizations", "update_member", err)
			}
			err = ValidateUpdateMemberForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("organizations", "update_member", err)
			}
			return nil, NewUpdateMemberForbidden(&body)
		case http.StatusInternalServerError:
			var (
				body UpdateMemberInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("organizations", "update_member", err)
			}
			err = ValidateUpdateMemberInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("organizations", "update_member", err)
			}
			return nil, NewUpdateMemberInternalError(&body)
		case http.StatusNotFound:
			var (
				body UpdateMemberNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("organizations", "update_member", err)
			}
			err = ValidateUpdateMemberNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("organizations", "update_member", err)
			}
			return nil, NewUpdateMemberNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body UpdateMemberUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("organizations", "update_member", err)
			}
			err = ValidateUpdateMemberUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("organizations", "update_member", err)
			}
			return nil, NewUpdateMemberUnauthorized(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("organizations", "update_member", resp.StatusCode, string(body))
		}
	}
}

// BuildRemoveMemberRequest instantiates a HTTP request object with method and
// path set to call the "organizations" service "remove_member" endpoint
func (c *Client) BuildRemoveMemberRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		id     string
		userID string
	)
	{
		p, ok := v.(*organizations.RemoveMemberPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("organizations", "remove_member", "*organizations.RemoveMemberPayload", v)
		}
		id = p.ID
		userID = p.UserID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: RemoveMemberOrganizationsPath(id, userID)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("organizations", "remove_member", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeRemoveMemberRequest returns an encoder for requests sent to the
// organizations remove_member server.
func EncodeRemoveMemberRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*organizations.RemoveMemberPayload)
		if !ok {
			return goahttp.ErrInvalidType("organizations", "remove_member", "*organizations.RemoveMemberPayload", v)
		}
		if p.JWT != nil {
			head := *p.JWT
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeRemoveMemberResponse returns a decoder for responses returned by the
// organizations remove_member endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeRemoveMemberResponse may return the following errors:
//   - "bad_request" (type *organizations.BadRequestError): http.StatusBadRequest
//   - "conflict" (type *organizations.ConflictError): http.StatusConflict
//   - "forbidden" (type *organizations.ForbiddenError): http.StatusForbidden
//   - "internal_error" (type *organizations.InternalServerError): http.StatusInternalServerError
//   - "not_found" (type *organizations.NotFoundError): http.StatusNotFound
//   - "unauthorized" (type *organizations.UnauthorizedError): http.StatusUnauthorized
//   - error: internal error
func DecodeRemoveMemberResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			return nil, nil
		case http.StatusBadRequest:
			var (
				body RemoveMemberBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("organizations", "remove_member", err)
			}
			err = ValidateRemoveMemberBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("organizations", "remove_member", err)
			}
			return nil, NewRemoveMemberBadRequest(&body)
		case http.StatusConflict:
			var (
				body RemoveMemberConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("organizations", "remove_member", err)
			}
			err = ValidateRemoveMemberConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("organizations", "remove_member", err)
			}
			return nil, NewRemoveMemberConflict(&body)
		case http.StatusForbidden:
			var (
				body RemoveMemberForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("organizations", "remove_member", err)
			}
			err = ValidateRemoveMemberForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("organizations", "remove_member", err)
			}
			return nil, NewRemoveMemberForbidden(&body)
		case http.StatusInternalServerError:
			var (
				body RemoveMemberInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("organizations", "remove_member", err)
			}
			err = ValidateRemoveMemberInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("organizations", "remove_member", err)
			}
			return nil, NewRemoveMemberInternalError(&body)
		case http.StatusNotFound:
			var (
				body RemoveMemberNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("organizations", "remove_member", err)
			}
			err = ValidateRemoveMemberNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("organizations", "remove_member", err)
			}
			return nil, NewRemoveMemberNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body RemoveMemberUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("organizations", "remove_member", err)
			}
			err = ValidateRemoveMemberUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("organizations", "remove_member", err)
			}
			return nil, NewRemoveMemberUnauthorized(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("organizations", "remove_member", resp.StatusCode, string(body))
		}
	}
}

// BuildListFeaturesRequest instantiates a HTTP request object with method and
// path set to call the "organizations" service "list_features" endpoint
func (c *Client) BuildListFeaturesRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(*organizations.ListFeaturesPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("organizations", "list_features", "*organizations.ListFeaturesPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListFeaturesOrganizationsPath(id)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("organizations", "list_features", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeListFeaturesRequest returns an encoder for requests sent to the
// organizations list_features server.
func EncodeListFeaturesRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*organizations.ListFeaturesPayload)
		if !ok {
			return goahttp.ErrInvalidType("organizations", "list_features", "*organizations.ListFeaturesPayload", v)
		}
		if p.JWT != nil {
			head := *p.JWT
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeListFeaturesResponse returns a decoder for responses returned by the
// organizations list_features endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeListFeaturesResponse may return the following errors:
//   - "bad_request" (type *organizations.BadRequestError): http.StatusBadRequest
//   - "conflict" (type *organizations.ConflictError): http.StatusConflict
//   - "forbidden" (type *organizations.ForbiddenError): http.StatusForbidden
//   - "internal_error" (type *organizations.InternalServerError): http.StatusInternalServerError
//   - "not_found" (type *organizations.NotFoundError): http.StatusNotFound
//   - "unauthorized" (type *organizations.UnauthorizedError): http.StatusUnauthorized
//   - error: internal error
func DecodeListFeaturesResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListFeaturesResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("organizations", "list_features", err)
			}
			err = ValidateListFeaturesResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("organizations", "list_features", err)
			}
			res := NewListFeaturesResultOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body ListFeaturesBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("organizations", "list_features", err)
			}
			err = ValidateListFeaturesBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("organizations", "list_features", err)
			}
			return nil, NewListFeaturesBadRequest(&body)
		case http.StatusConflict:
			var (
				body ListFeaturesConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("organizations", "list_features", err)
			}
			err = ValidateListFeaturesConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("organizations", "list_features", err)
			}
			return nil, NewListFeaturesConflict(&body)
		case http.StatusForbidden:
			var (
				body ListFeaturesForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("organizations", "list_features", err)
			}
			err = ValidateListFeaturesForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("organizations", "list_features", err)
			}
			return nil, NewListFeaturesForbidden(&body)
		case http.StatusInternalServerError:
			var (
				body ListFeaturesInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("organizations", "list_features", err)
			}
			err = ValidateListFeaturesInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("organizations", "list_features", err)
			}
			return nil, NewListFeaturesInternalError(&body)
		case http.StatusNotFound:
			var (
				body ListFeaturesNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("organizations", "list_features", err)
			}
			err = ValidateListFeaturesNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("organizations", "list_features", err)
			}
			return nil, NewListFeaturesNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body ListFeaturesUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("organizations", "list_features", err)
			}
			err = ValidateListFeaturesUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("organizations", "list_features", err)
			}
			return nil, NewListFeaturesUnauthorized(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("organizations", "list_features", resp.StatusCode, string(body))
		}
	}
}

// BuildEnableFeatureRequest instantiates a HTTP request object with method and
// path set to call the "organizations" service "enable_feature" endpoint
func (c *Client) BuildEnableFeatureRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(*organizations.EnableFeaturePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("organizations", "enable_feature", "*organizations.EnableFeaturePayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: EnableFeatureOrganizationsPath(id)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("organizations", "enable_feature", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeEnableFeatureRequest returns an encoder for requests sent to the
// organizations enable_feature server.
func EncodeEnableFeatureRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*organizations.EnableFeaturePayload)
		if !ok {
			return goahttp.ErrInvalidType("organizations", "enable_feature", "*organizations.EnableFeaturePayload", v)
		}
		if p.JWT != nil {
			head := *p.JWT
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		body := NewEnableFeatureRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("organizations", "enable_feature", err)
		}
		return nil
	}
}

// DecodeEnableFeatureResponse returns a decoder for responses returned by the
// organizations enable_feature endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeEnableFeatureResponse may return the following errors:
//   - "bad_request" (type *organizations.BadRequestError): http.StatusBadRequest
//   - "conflict" (type *organizations.ConflictError): http.StatusConflict
//   - "forbidden" (type *organizations.ForbiddenError): http.StatusForbidden
//   - "internal_error" (type *organizations.InternalServerError): http.StatusInternalServerError
//   - "not_found" (type *organizations.NotFoundError): http.StatusNotFound
//   - "unauthorized" (type *organizations.UnauthorizedError): http.StatusUnauthorized
//   - error: internal error
func DecodeEnableFeatureResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body EnableFeatureResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("organizations", "enable_feature", err)
			}
			err = ValidateEnableFeatureResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("organizations", "enable_feature", err)
			}
			res := NewEnableFeatureResultOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body EnableFeatureBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("organizations", "enable_feature", err)
			}
			err = ValidateEnableFeatureBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("organizations", "enable_feature", err)
			}
			return nil, NewEnableFeatureBadRequest(&body)
		case http.StatusConflict:
			var (
				body EnableFeatureConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("organizations", "enable_feature", err)
			}
			err = ValidateEnableFeatureConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("organizations", "enable_feature", err)
			}
			return nil, NewEnableFeatureConflict(&body)
		case http.StatusForbidden:
			var (
				body EnableFeatureForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("organizations", "enable_feature", err)
			}
			err = ValidateEnableFeatureForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("organizations", "enable_feature", err)
			}
			return nil, NewEnableFeatureForbidden(&body)
		case http.StatusInternalServerError:
			var (
				body EnableFeatureInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("organizations", "enable_feature", err)
			}
			err = ValidateEnableFeatureInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("organizations", "enable_feature", err)
			}
			return nil, NewEnableFeatureInternalError(&body)
		case http.StatusNotFound:
			var (
				body EnableFeatureNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("organizations", "enable_feature", err)
			}
			err = ValidateEnableFeatureNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("organizations", "enable_feature", err)
			}
			return nil, NewEnableFeatureNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body EnableFeatureUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("organizations", "enable_feature", err)
			}
			err = ValidateEnableFeatureUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("organizations", "enable_feature", err)
			}
			return nil, NewEnableFeatureUnauthorized(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("organizations", "enable_feature", resp.StatusCode, string(body))
		}
	}
}

// BuildDisableFeatureRequest instantiates a HTTP request object with method
// and path set to call the "organizations" service "disable_feature" endpoint
func (c *Client) BuildDisableFeatureRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		id         string
		featureKey string
	)
	{
		p, ok := v.(*organizations.DisableFeaturePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("organizations", "disable_feature", "*organizations.DisableFeaturePayload", v)
		}
		id = p.ID
		featureKey = p.FeatureKey
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DisableFeatureOrganizationsPath(id, featureKey)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("organizations", "disable_feature", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDisableFeatureRequest returns an encoder for requests sent to the
// organizations disable_feature server.
func EncodeDisableFeatureRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*organizations.DisableFeaturePayload)
		if !ok {
			return goahttp.ErrInvalidType("organizations", "disable_feature", "*organizations.DisableFeaturePayload", v)
		}
		if p.JWT != nil {
			head := *p.JWT
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeDisableFeatureResponse returns a decoder for responses returned by the
// organizations disable_feature endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeDisableFeatureResponse may return the following errors:
//   - "bad_request" (type *organizations.BadRequestError): http.StatusBadRequest
//   - "conflict" (type *organizations.ConflictError): http.StatusConflict
//   - "forbidden" (type *organizations.ForbiddenError): http.StatusForbidden
//   - "internal_error" (type *organizations.InternalServerError): http.StatusInternalServerError
//   - "not_found" (type *organizations.NotFoundError): http.StatusNotFound
//   - "unauthorized" (type *organizations.UnauthorizedError): http.StatusUnauthorized
//   - error: internal error
func DecodeDisableFeatureResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			return nil, nil
		case http.StatusBadRequest:
			var (
				body DisableFeatureBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("organizations", "disable_feature", err)
			}
			err = ValidateDisableFeatureBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("organizations", "disable_feature", err)
			}
			return nil, NewDisableFeatureBadRequest(&body)
		case http.StatusConflict:
			var (
				body DisableFeatureConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("organizations", "disable_feature", err)
			}
			err = ValidateDisableFeatureConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("organizations", "disable_feature", err)
			}
			return nil, NewDisableFeatureConflict(&body)
		case http.StatusForbidden:
			var (
				body DisableFeatureForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("organizations", "disable_feature", err)
			}
			err = ValidateDisableFeatureForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("organizations", "disable_feature", err)
			}
			return nil, NewDisableFeatureForbidden(&body)
		case http.StatusInternalServerError:
			var (
				body DisableFeatureInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("organizations", "disable_feature", err)
			}
			err = ValidateDisableFeatureInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("organizations", "disable_feature", err)
			}
			return nil, NewDisableFeatureInternalError(&body)
		case http.StatusNotFound:
			var (
				body DisableFeatureNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("organizations", "disable_feature", err)
			}
			err = ValidateDisableFeatureNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("organizations", "disable_feature", err)
			}
			return nil, NewDisableFeatureNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body DisableFeatureUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("organizations", "disable_feature", err)
			}
			err = ValidateDisableFeatureUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("organizations", "disable_feature", err)
			}
			return nil, NewDisableFeatureUnauthorized(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("organizations", "disable_feature", resp.StatusCode, string(body))
		}
	}
}

// unmarshalOrganizationResponseResponseBodyToOrganizationsOrganizationResponse
// builds a value of type *organizations.OrganizationResponse from a value of
// type *OrganizationResponseResponseBody.
func unmarshalOrganizationResponseResponseBodyToOrganizationsOrganizationResponse(v *OrganizationResponseResponseBody) *organizations.OrganizationResponse {
	res := &organizations.OrganizationResponse{
		ID:          *v.ID,
		Name:        *v.Name,
		Slug:        *v.Slug,
		Domain:      v.Domain,
		LogoURL:     v.LogoURL,
		Plan:        v.Plan,
		Active:      *v.Active,
		TrialEndsAt: v.TrialEndsAt,
		TrialUsed:   v.TrialUsed,
		CreatedAt:   *v.CreatedAt,
		UpdatedAt:   *v.UpdatedAt,
	}
	if v.Metadata != nil {
		res.Metadata = make(map[string]any, len(v.Metadata))
		for key, val := range v.Metadata {
			tk := key
			tv := val
			res.Metadata[tk] = tv
		}
	}

	return res
}

// unmarshalPaginationResponseBodyToDesigntypesPagination builds a value of
// type *designtypes.Pagination from a value of type *PaginationResponseBody.
func unmarshalPaginationResponseBodyToDesigntypesPagination(v *PaginationResponseBody) *designtypes.Pagination {
	res := &designtypes.Pagination{
		Offset:      *v.Offset,
		Limit:       *v.Limit,
		Total:       *v.Total,
		TotalPages:  *v.TotalPages,
		CurrentPage: *v.CurrentPage,
		HasNext:     *v.HasNext,
		HasPrevious: *v.HasPrevious,
	}

	return res
}

// marshalOrganizationsCreateOrganizationRequestToCreateOrganizationRequestRequestBody
// builds a value of type *CreateOrganizationRequestRequestBody from a value of
// type *organizations.CreateOrganizationRequest.
func marshalOrganizationsCreateOrganizationRequestToCreateOrganizationRequestRequestBody(v *organizations.CreateOrganizationRequest) *CreateOrganizationRequestRequestBody {
	res := &CreateOrganizationRequestRequestBody{
		Name:      v.Name,
		Slug:      v.Slug,
		Domain:    v.Domain,
		LogoURL:   v.LogoURL,
		Plan:      v.Plan,
		TrialDays: v.TrialDays,
	}
	{
		var zero string
		if res.Plan == zero {
			res.Plan = "free"
		}
	}
	if v.Metadata != nil {
		res.Metadata = make(map[string]any, len(v.Metadata))
		for key, val := range v.Metadata {
			tk := key
			tv := val
			res.Metadata[tk] = tv
		}
	}
	if v.Features != nil {
		res.Features = make([]string, len(v.Features))
		for i, val := range v.Features {
			res.Features[i] = val
		}
	}

	return res
}

// marshalCreateOrganizationRequestRequestBodyToOrganizationsCreateOrganizationRequest
// builds a value of type *organizations.CreateOrganizationRequest from a value
// of type *CreateOrganizationRequestRequestBody.
func marshalCreateOrganizationRequestRequestBodyToOrganizationsCreateOrganizationRequest(v *CreateOrganizationRequestRequestBody) *organizations.CreateOrganizationRequest {
	res := &organizations.CreateOrganizationRequest{
		Name:      v.Name,
		Slug:      v.Slug,
		Domain:    v.Domain,
		LogoURL:   v.LogoURL,
		Plan:      v.Plan,
		TrialDays: v.TrialDays,
	}
	{
		var zero string
		if res.Plan == zero {
			res.Plan = "free"
		}
	}
	if v.Metadata != nil {
		res.Metadata = make(map[string]any, len(v.Metadata))
		for key, val := range v.Metadata {
			tk := key
			tv := val
			res.Metadata[tk] = tv
		}
	}
	if v.Features != nil {
		res.Features = make([]string, len(v.Features))
		for i, val := range v.Features {
			res.Features[i] = val
		}
	}

	return res
}

// marshalOrganizationsUpdateOrganizationRequestToUpdateOrganizationRequestRequestBody
// builds a value of type *UpdateOrganizationRequestRequestBody from a value of
// type *organizations.UpdateOrganizationRequest.
func marshalOrganizationsUpdateOrganizationRequestToUpdateOrganizationRequestRequestBody(v *organizations.UpdateOrganizationRequest) *UpdateOrganizationRequestRequestBody {
	res := &UpdateOrganizationRequestRequestBody{
		Name:    v.Name,
		Domain:  v.Domain,
		LogoURL: v.LogoURL,
		Plan:    v.Plan,
		Active:  v.Active,
	}
	if v.Metadata != nil {
		res.Metadata = make(map[string]any, len(v.Metadata))
		for key, val := range v.Metadata {
			tk := key
			tv := val
			res.Metadata[tk] = tv
		}
	}

	return res
}

// marshalUpdateOrganizationRequestRequestBodyToOrganizationsUpdateOrganizationRequest
// builds a value of type *organizations.UpdateOrganizationRequest from a value
// of type *UpdateOrganizationRequestRequestBody.
func marshalUpdateOrganizationRequestRequestBodyToOrganizationsUpdateOrganizationRequest(v *UpdateOrganizationRequestRequestBody) *organizations.UpdateOrganizationRequest {
	res := &organizations.UpdateOrganizationRequest{
		Name:    v.Name,
		Domain:  v.Domain,
		LogoURL: v.LogoURL,
		Plan:    v.Plan,
		Active:  v.Active,
	}
	if v.Metadata != nil {
		res.Metadata = make(map[string]any, len(v.Metadata))
		for key, val := range v.Metadata {
			tk := key
			tv := val
			res.Metadata[tk] = tv
		}
	}

	return res
}

// unmarshalOrganizationMemberResponseResponseBodyToOrganizationsOrganizationMemberResponse
// builds a value of type *organizations.OrganizationMemberResponse from a
// value of type *OrganizationMemberResponseResponseBody.
func unmarshalOrganizationMemberResponseResponseBodyToOrganizationsOrganizationMemberResponse(v *OrganizationMemberResponseResponseBody) *organizations.OrganizationMemberResponse {
	res := &organizations.OrganizationMemberResponse{
		ID:        *v.ID,
		Email:     *v.Email,
		FirstName: v.FirstName,
		LastName:  v.LastName,
		JoinedAt:  *v.JoinedAt,
	}
	res.Roles = make([]string, len(v.Roles))
	for i, val := range v.Roles {
		res.Roles[i] = val
	}

	return res
}

// marshalOrganizationsAddOrganizationMemberRequestToAddOrganizationMemberRequestRequestBody
// builds a value of type *AddOrganizationMemberRequestRequestBody from a value
// of type *organizations.AddOrganizationMemberRequest.
func marshalOrganizationsAddOrganizationMemberRequestToAddOrganizationMemberRequestRequestBody(v *organizations.AddOrganizationMemberRequest) *AddOrganizationMemberRequestRequestBody {
	res := &AddOrganizationMemberRequestRequestBody{
		UserID: v.UserID,
	}
	if v.Roles != nil {
		res.Roles = make([]string, len(v.Roles))
		for i, val := range v.Roles {
			res.Roles[i] = val
		}
	} else {
		res.Roles = []string{}
	}

	return res
}

// marshalAddOrganizationMemberRequestRequestBodyToOrganizationsAddOrganizationMemberRequest
// builds a value of type *organizations.AddOrganizationMemberRequest from a
// value of type *AddOrganizationMemberRequestRequestBody.
func marshalAddOrganizationMemberRequestRequestBodyToOrganizationsAddOrganizationMemberRequest(v *AddOrganizationMemberRequestRequestBody) *organizations.AddOrganizationMemberRequest {
	res := &organizations.AddOrganizationMemberRequest{
		UserID: v.UserID,
	}
	if v.Roles != nil {
		res.Roles = make([]string, len(v.Roles))
		for i, val := range v.Roles {
			res.Roles[i] = val
		}
	} else {
		res.Roles = []string{}
	}

	return res
}

// marshalOrganizationsUpdateOrganizationMemberRequestToUpdateOrganizationMemberRequestRequestBody
// builds a value of type *UpdateOrganizationMemberRequestRequestBody from a
// value of type *organizations.UpdateOrganizationMemberRequest.
func marshalOrganizationsUpdateOrganizationMemberRequestToUpdateOrganizationMemberRequestRequestBody(v *organizations.UpdateOrganizationMemberRequest) *UpdateOrganizationMemberRequestRequestBody {
	res := &UpdateOrganizationMemberRequestRequestBody{}
	if v.Roles != nil {
		res.Roles = make([]string, len(v.Roles))
		for i, val := range v.Roles {
			res.Roles[i] = val
		}
	} else {
		res.Roles = []string{}
	}

	return res
}

// marshalUpdateOrganizationMemberRequestRequestBodyToOrganizationsUpdateOrganizationMemberRequest
// builds a value of type *organizations.UpdateOrganizationMemberRequest from a
// value of type *UpdateOrganizationMemberRequestRequestBody.
func marshalUpdateOrganizationMemberRequestRequestBodyToOrganizationsUpdateOrganizationMemberRequest(v *UpdateOrganizationMemberRequestRequestBody) *organizations.UpdateOrganizationMemberRequest {
	res := &organizations.UpdateOrganizationMemberRequest{}
	if v.Roles != nil {
		res.Roles = make([]string, len(v.Roles))
		for i, val := range v.Roles {
			res.Roles[i] = val
		}
	} else {
		res.Roles = []string{}
	}

	return res
}

// unmarshalOrganizationFeatureResponseResponseBodyToOrganizationsOrganizationFeatureResponse
// builds a value of type *organizations.OrganizationFeatureResponse from a
// value of type *OrganizationFeatureResponseResponseBody.
func unmarshalOrganizationFeatureResponseResponseBodyToOrganizationsOrganizationFeatureResponse(v *OrganizationFeatureResponseResponseBody) *organizations.OrganizationFeatureResponse {
	res := &organizations.OrganizationFeatureResponse{
		ID:          *v.ID,
		Key:         *v.Key,
		Name:        *v.Name,
		Description: v.Description,
		Enabled:     *v.Enabled,
		IsPremium:   v.IsPremium,
		Component:   v.Component,
	}
	if v.Settings != nil {
		res.Settings = make(map[string]any, len(v.Settings))
		for key, val := range v.Settings {
			tk := key
			tv := val
			res.Settings[tk] = tv
		}
	}

	return res
}

// marshalOrganizationsEnableFeatureRequestToEnableFeatureRequestRequestBody
// builds a value of type *EnableFeatureRequestRequestBody from a value of type
// *organizations.EnableFeatureRequest.
func marshalOrganizationsEnableFeatureRequestToEnableFeatureRequestRequestBody(v *organizations.EnableFeatureRequest) *EnableFeatureRequestRequestBody {
	res := &EnableFeatureRequestRequestBody{
		FeatureKey: v.FeatureKey,
	}
	if v.Settings != nil {
		res.Settings = make(map[string]any, len(v.Settings))
		for key, val := range v.Settings {
			tk := key
			tv := val
			res.Settings[tk] = tv
		}
	}

	return res
}

// marshalEnableFeatureRequestRequestBodyToOrganizationsEnableFeatureRequest
// builds a value of type *organizations.EnableFeatureRequest from a value of
// type *EnableFeatureRequestRequestBody.
func marshalEnableFeatureRequestRequestBodyToOrganizationsEnableFeatureRequest(v *EnableFeatureRequestRequestBody) *organizations.EnableFeatureRequest {
	res := &organizations.EnableFeatureRequest{
		FeatureKey: v.FeatureKey,
	}
	if v.Settings != nil {
		res.Settings = make(map[string]any, len(v.Settings))
		for key, val := range v.Settings {
			tk := key
			tv := val
			res.Settings[tk] = tv
		}
	}

	return res
}
