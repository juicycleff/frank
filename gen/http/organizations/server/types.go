// Code generated by goa v3.20.0, DO NOT EDIT.
//
// organizations HTTP server types
//
// Command:
// $ goa gen github.com/juicycleff/frank/design -o .

package server

import (
	organizations "github.com/juicycleff/frank/gen/organizations"
	goa "goa.design/goa/v3/pkg"
)

// CreateRequestBody is the type of the "organizations" service "create"
// endpoint HTTP request body.
type CreateRequestBody struct {
	Organization *CreateOrganizationRequestRequestBody `form:"organization,omitempty" json:"organization,omitempty" xml:"organization,omitempty"`
}

// UpdateRequestBody is the type of the "organizations" service "update"
// endpoint HTTP request body.
type UpdateRequestBody struct {
	Organization *UpdateOrganizationRequestRequestBody `form:"organization,omitempty" json:"organization,omitempty" xml:"organization,omitempty"`
}

// AddMemberRequestBody is the type of the "organizations" service "add_member"
// endpoint HTTP request body.
type AddMemberRequestBody struct {
	Member *AddOrganizationMemberRequestRequestBody `form:"member,omitempty" json:"member,omitempty" xml:"member,omitempty"`
}

// UpdateMemberRequestBody is the type of the "organizations" service
// "update_member" endpoint HTTP request body.
type UpdateMemberRequestBody struct {
	Member *UpdateOrganizationMemberRequestRequestBody `form:"member,omitempty" json:"member,omitempty" xml:"member,omitempty"`
}

// EnableFeatureRequestBody is the type of the "organizations" service
// "enable_feature" endpoint HTTP request body.
type EnableFeatureRequestBody struct {
	Feature *EnableFeatureRequestRequestBody `form:"feature,omitempty" json:"feature,omitempty" xml:"feature,omitempty"`
}

// ListResponseBody is the type of the "organizations" service "list" endpoint
// HTTP response body.
type ListResponseBody struct {
	Data       []*OrganizationResponseResponseBody `form:"data" json:"data" xml:"data"`
	Pagination *PaginationResponseResponseBody     `form:"pagination" json:"pagination" xml:"pagination"`
}

// CreateResponseBody is the type of the "organizations" service "create"
// endpoint HTTP response body.
type CreateResponseBody struct {
	// Organization ID
	ID string `form:"id" json:"id" xml:"id"`
	// Organization name
	Name string `form:"name" json:"name" xml:"name"`
	// Organization slug
	Slug string `form:"slug" json:"slug" xml:"slug"`
	// Organization domain
	Domain *string `form:"domain,omitempty" json:"domain,omitempty" xml:"domain,omitempty"`
	// Organization logo URL
	LogoURL *string `form:"logo_url,omitempty" json:"logo_url,omitempty" xml:"logo_url,omitempty"`
	// Organization plan
	Plan *string `form:"plan,omitempty" json:"plan,omitempty" xml:"plan,omitempty"`
	// Whether organization is active
	Active bool `form:"active" json:"active" xml:"active"`
	// Organization metadata
	Metadata map[string]any `form:"metadata,omitempty" json:"metadata,omitempty" xml:"metadata,omitempty"`
	// Trial end date
	TrialEndsAt *string `form:"trial_ends_at,omitempty" json:"trial_ends_at,omitempty" xml:"trial_ends_at,omitempty"`
	// Whether trial has been used
	TrialUsed *bool `form:"trial_used,omitempty" json:"trial_used,omitempty" xml:"trial_used,omitempty"`
	// Creation timestamp
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// Last update timestamp
	UpdatedAt string `form:"updated_at" json:"updated_at" xml:"updated_at"`
}

// GetResponseBody is the type of the "organizations" service "get" endpoint
// HTTP response body.
type GetResponseBody struct {
	// Organization ID
	ID string `form:"id" json:"id" xml:"id"`
	// Organization name
	Name string `form:"name" json:"name" xml:"name"`
	// Organization slug
	Slug string `form:"slug" json:"slug" xml:"slug"`
	// Organization domain
	Domain *string `form:"domain,omitempty" json:"domain,omitempty" xml:"domain,omitempty"`
	// Organization logo URL
	LogoURL *string `form:"logo_url,omitempty" json:"logo_url,omitempty" xml:"logo_url,omitempty"`
	// Organization plan
	Plan *string `form:"plan,omitempty" json:"plan,omitempty" xml:"plan,omitempty"`
	// Whether organization is active
	Active bool `form:"active" json:"active" xml:"active"`
	// Organization metadata
	Metadata map[string]any `form:"metadata,omitempty" json:"metadata,omitempty" xml:"metadata,omitempty"`
	// Trial end date
	TrialEndsAt *string `form:"trial_ends_at,omitempty" json:"trial_ends_at,omitempty" xml:"trial_ends_at,omitempty"`
	// Whether trial has been used
	TrialUsed *bool `form:"trial_used,omitempty" json:"trial_used,omitempty" xml:"trial_used,omitempty"`
	// Creation timestamp
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// Last update timestamp
	UpdatedAt string `form:"updated_at" json:"updated_at" xml:"updated_at"`
}

// UpdateResponseBody is the type of the "organizations" service "update"
// endpoint HTTP response body.
type UpdateResponseBody struct {
	// Organization ID
	ID string `form:"id" json:"id" xml:"id"`
	// Organization name
	Name string `form:"name" json:"name" xml:"name"`
	// Organization slug
	Slug string `form:"slug" json:"slug" xml:"slug"`
	// Organization domain
	Domain *string `form:"domain,omitempty" json:"domain,omitempty" xml:"domain,omitempty"`
	// Organization logo URL
	LogoURL *string `form:"logo_url,omitempty" json:"logo_url,omitempty" xml:"logo_url,omitempty"`
	// Organization plan
	Plan *string `form:"plan,omitempty" json:"plan,omitempty" xml:"plan,omitempty"`
	// Whether organization is active
	Active bool `form:"active" json:"active" xml:"active"`
	// Organization metadata
	Metadata map[string]any `form:"metadata,omitempty" json:"metadata,omitempty" xml:"metadata,omitempty"`
	// Trial end date
	TrialEndsAt *string `form:"trial_ends_at,omitempty" json:"trial_ends_at,omitempty" xml:"trial_ends_at,omitempty"`
	// Whether trial has been used
	TrialUsed *bool `form:"trial_used,omitempty" json:"trial_used,omitempty" xml:"trial_used,omitempty"`
	// Creation timestamp
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// Last update timestamp
	UpdatedAt string `form:"updated_at" json:"updated_at" xml:"updated_at"`
}

// ListMembersResponseBody is the type of the "organizations" service
// "list_members" endpoint HTTP response body.
type ListMembersResponseBody struct {
	Data       []*OrganizationMemberResponseResponseBody `form:"data" json:"data" xml:"data"`
	Pagination *PaginationResponseResponseBody           `form:"pagination" json:"pagination" xml:"pagination"`
}

// AddMemberResponseBody is the type of the "organizations" service
// "add_member" endpoint HTTP response body.
type AddMemberResponseBody struct {
	// Success message
	Message string `form:"message" json:"message" xml:"message"`
}

// UpdateMemberResponseBody is the type of the "organizations" service
// "update_member" endpoint HTTP response body.
type UpdateMemberResponseBody struct {
	// Success message
	Message string `form:"message" json:"message" xml:"message"`
}

// ListFeaturesResponseBody is the type of the "organizations" service
// "list_features" endpoint HTTP response body.
type ListFeaturesResponseBody struct {
	Features []*OrganizationFeatureResponseResponseBody `form:"features" json:"features" xml:"features"`
}

// EnableFeatureResponseBody is the type of the "organizations" service
// "enable_feature" endpoint HTTP response body.
type EnableFeatureResponseBody struct {
	// Success message
	Message string `form:"message" json:"message" xml:"message"`
}

// ListBadRequestResponseBody is the type of the "organizations" service "list"
// endpoint HTTP response body for the "bad_request" error.
type ListBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListConflictResponseBody is the type of the "organizations" service "list"
// endpoint HTTP response body for the "conflict" error.
type ListConflictResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListForbiddenResponseBody is the type of the "organizations" service "list"
// endpoint HTTP response body for the "forbidden" error.
type ListForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListInternalErrorResponseBody is the type of the "organizations" service
// "list" endpoint HTTP response body for the "internal_error" error.
type ListInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListNotFoundResponseBody is the type of the "organizations" service "list"
// endpoint HTTP response body for the "not_found" error.
type ListNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListUnauthorizedResponseBody is the type of the "organizations" service
// "list" endpoint HTTP response body for the "unauthorized" error.
type ListUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreateBadRequestResponseBody is the type of the "organizations" service
// "create" endpoint HTTP response body for the "bad_request" error.
type CreateBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreateConflictResponseBody is the type of the "organizations" service
// "create" endpoint HTTP response body for the "conflict" error.
type CreateConflictResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreateForbiddenResponseBody is the type of the "organizations" service
// "create" endpoint HTTP response body for the "forbidden" error.
type CreateForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreateInternalErrorResponseBody is the type of the "organizations" service
// "create" endpoint HTTP response body for the "internal_error" error.
type CreateInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreateNotFoundResponseBody is the type of the "organizations" service
// "create" endpoint HTTP response body for the "not_found" error.
type CreateNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreateUnauthorizedResponseBody is the type of the "organizations" service
// "create" endpoint HTTP response body for the "unauthorized" error.
type CreateUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetBadRequestResponseBody is the type of the "organizations" service "get"
// endpoint HTTP response body for the "bad_request" error.
type GetBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetConflictResponseBody is the type of the "organizations" service "get"
// endpoint HTTP response body for the "conflict" error.
type GetConflictResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetForbiddenResponseBody is the type of the "organizations" service "get"
// endpoint HTTP response body for the "forbidden" error.
type GetForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetInternalErrorResponseBody is the type of the "organizations" service
// "get" endpoint HTTP response body for the "internal_error" error.
type GetInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetNotFoundResponseBody is the type of the "organizations" service "get"
// endpoint HTTP response body for the "not_found" error.
type GetNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetUnauthorizedResponseBody is the type of the "organizations" service "get"
// endpoint HTTP response body for the "unauthorized" error.
type GetUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateBadRequestResponseBody is the type of the "organizations" service
// "update" endpoint HTTP response body for the "bad_request" error.
type UpdateBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateConflictResponseBody is the type of the "organizations" service
// "update" endpoint HTTP response body for the "conflict" error.
type UpdateConflictResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateForbiddenResponseBody is the type of the "organizations" service
// "update" endpoint HTTP response body for the "forbidden" error.
type UpdateForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateInternalErrorResponseBody is the type of the "organizations" service
// "update" endpoint HTTP response body for the "internal_error" error.
type UpdateInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateNotFoundResponseBody is the type of the "organizations" service
// "update" endpoint HTTP response body for the "not_found" error.
type UpdateNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateUnauthorizedResponseBody is the type of the "organizations" service
// "update" endpoint HTTP response body for the "unauthorized" error.
type UpdateUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteBadRequestResponseBody is the type of the "organizations" service
// "delete" endpoint HTTP response body for the "bad_request" error.
type DeleteBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteConflictResponseBody is the type of the "organizations" service
// "delete" endpoint HTTP response body for the "conflict" error.
type DeleteConflictResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteForbiddenResponseBody is the type of the "organizations" service
// "delete" endpoint HTTP response body for the "forbidden" error.
type DeleteForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteInternalErrorResponseBody is the type of the "organizations" service
// "delete" endpoint HTTP response body for the "internal_error" error.
type DeleteInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteNotFoundResponseBody is the type of the "organizations" service
// "delete" endpoint HTTP response body for the "not_found" error.
type DeleteNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteUnauthorizedResponseBody is the type of the "organizations" service
// "delete" endpoint HTTP response body for the "unauthorized" error.
type DeleteUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListMembersBadRequestResponseBody is the type of the "organizations" service
// "list_members" endpoint HTTP response body for the "bad_request" error.
type ListMembersBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListMembersConflictResponseBody is the type of the "organizations" service
// "list_members" endpoint HTTP response body for the "conflict" error.
type ListMembersConflictResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListMembersForbiddenResponseBody is the type of the "organizations" service
// "list_members" endpoint HTTP response body for the "forbidden" error.
type ListMembersForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListMembersInternalErrorResponseBody is the type of the "organizations"
// service "list_members" endpoint HTTP response body for the "internal_error"
// error.
type ListMembersInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListMembersNotFoundResponseBody is the type of the "organizations" service
// "list_members" endpoint HTTP response body for the "not_found" error.
type ListMembersNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListMembersUnauthorizedResponseBody is the type of the "organizations"
// service "list_members" endpoint HTTP response body for the "unauthorized"
// error.
type ListMembersUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// AddMemberBadRequestResponseBody is the type of the "organizations" service
// "add_member" endpoint HTTP response body for the "bad_request" error.
type AddMemberBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// AddMemberConflictResponseBody is the type of the "organizations" service
// "add_member" endpoint HTTP response body for the "conflict" error.
type AddMemberConflictResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// AddMemberForbiddenResponseBody is the type of the "organizations" service
// "add_member" endpoint HTTP response body for the "forbidden" error.
type AddMemberForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// AddMemberInternalErrorResponseBody is the type of the "organizations"
// service "add_member" endpoint HTTP response body for the "internal_error"
// error.
type AddMemberInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// AddMemberNotFoundResponseBody is the type of the "organizations" service
// "add_member" endpoint HTTP response body for the "not_found" error.
type AddMemberNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// AddMemberUnauthorizedResponseBody is the type of the "organizations" service
// "add_member" endpoint HTTP response body for the "unauthorized" error.
type AddMemberUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateMemberBadRequestResponseBody is the type of the "organizations"
// service "update_member" endpoint HTTP response body for the "bad_request"
// error.
type UpdateMemberBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateMemberConflictResponseBody is the type of the "organizations" service
// "update_member" endpoint HTTP response body for the "conflict" error.
type UpdateMemberConflictResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateMemberForbiddenResponseBody is the type of the "organizations" service
// "update_member" endpoint HTTP response body for the "forbidden" error.
type UpdateMemberForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateMemberInternalErrorResponseBody is the type of the "organizations"
// service "update_member" endpoint HTTP response body for the "internal_error"
// error.
type UpdateMemberInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateMemberNotFoundResponseBody is the type of the "organizations" service
// "update_member" endpoint HTTP response body for the "not_found" error.
type UpdateMemberNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateMemberUnauthorizedResponseBody is the type of the "organizations"
// service "update_member" endpoint HTTP response body for the "unauthorized"
// error.
type UpdateMemberUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// RemoveMemberBadRequestResponseBody is the type of the "organizations"
// service "remove_member" endpoint HTTP response body for the "bad_request"
// error.
type RemoveMemberBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// RemoveMemberConflictResponseBody is the type of the "organizations" service
// "remove_member" endpoint HTTP response body for the "conflict" error.
type RemoveMemberConflictResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// RemoveMemberForbiddenResponseBody is the type of the "organizations" service
// "remove_member" endpoint HTTP response body for the "forbidden" error.
type RemoveMemberForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// RemoveMemberInternalErrorResponseBody is the type of the "organizations"
// service "remove_member" endpoint HTTP response body for the "internal_error"
// error.
type RemoveMemberInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// RemoveMemberNotFoundResponseBody is the type of the "organizations" service
// "remove_member" endpoint HTTP response body for the "not_found" error.
type RemoveMemberNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// RemoveMemberUnauthorizedResponseBody is the type of the "organizations"
// service "remove_member" endpoint HTTP response body for the "unauthorized"
// error.
type RemoveMemberUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListFeaturesBadRequestResponseBody is the type of the "organizations"
// service "list_features" endpoint HTTP response body for the "bad_request"
// error.
type ListFeaturesBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListFeaturesConflictResponseBody is the type of the "organizations" service
// "list_features" endpoint HTTP response body for the "conflict" error.
type ListFeaturesConflictResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListFeaturesForbiddenResponseBody is the type of the "organizations" service
// "list_features" endpoint HTTP response body for the "forbidden" error.
type ListFeaturesForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListFeaturesInternalErrorResponseBody is the type of the "organizations"
// service "list_features" endpoint HTTP response body for the "internal_error"
// error.
type ListFeaturesInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListFeaturesNotFoundResponseBody is the type of the "organizations" service
// "list_features" endpoint HTTP response body for the "not_found" error.
type ListFeaturesNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListFeaturesUnauthorizedResponseBody is the type of the "organizations"
// service "list_features" endpoint HTTP response body for the "unauthorized"
// error.
type ListFeaturesUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// EnableFeatureBadRequestResponseBody is the type of the "organizations"
// service "enable_feature" endpoint HTTP response body for the "bad_request"
// error.
type EnableFeatureBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// EnableFeatureConflictResponseBody is the type of the "organizations" service
// "enable_feature" endpoint HTTP response body for the "conflict" error.
type EnableFeatureConflictResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// EnableFeatureForbiddenResponseBody is the type of the "organizations"
// service "enable_feature" endpoint HTTP response body for the "forbidden"
// error.
type EnableFeatureForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// EnableFeatureInternalErrorResponseBody is the type of the "organizations"
// service "enable_feature" endpoint HTTP response body for the
// "internal_error" error.
type EnableFeatureInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// EnableFeatureNotFoundResponseBody is the type of the "organizations" service
// "enable_feature" endpoint HTTP response body for the "not_found" error.
type EnableFeatureNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// EnableFeatureUnauthorizedResponseBody is the type of the "organizations"
// service "enable_feature" endpoint HTTP response body for the "unauthorized"
// error.
type EnableFeatureUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DisableFeatureBadRequestResponseBody is the type of the "organizations"
// service "disable_feature" endpoint HTTP response body for the "bad_request"
// error.
type DisableFeatureBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DisableFeatureConflictResponseBody is the type of the "organizations"
// service "disable_feature" endpoint HTTP response body for the "conflict"
// error.
type DisableFeatureConflictResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DisableFeatureForbiddenResponseBody is the type of the "organizations"
// service "disable_feature" endpoint HTTP response body for the "forbidden"
// error.
type DisableFeatureForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DisableFeatureInternalErrorResponseBody is the type of the "organizations"
// service "disable_feature" endpoint HTTP response body for the
// "internal_error" error.
type DisableFeatureInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DisableFeatureNotFoundResponseBody is the type of the "organizations"
// service "disable_feature" endpoint HTTP response body for the "not_found"
// error.
type DisableFeatureNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DisableFeatureUnauthorizedResponseBody is the type of the "organizations"
// service "disable_feature" endpoint HTTP response body for the "unauthorized"
// error.
type DisableFeatureUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// OrganizationResponseResponseBody is used to define fields on response body
// types.
type OrganizationResponseResponseBody struct {
	// Organization ID
	ID string `form:"id" json:"id" xml:"id"`
	// Organization name
	Name string `form:"name" json:"name" xml:"name"`
	// Organization slug
	Slug string `form:"slug" json:"slug" xml:"slug"`
	// Organization domain
	Domain *string `form:"domain,omitempty" json:"domain,omitempty" xml:"domain,omitempty"`
	// Organization logo URL
	LogoURL *string `form:"logo_url,omitempty" json:"logo_url,omitempty" xml:"logo_url,omitempty"`
	// Organization plan
	Plan *string `form:"plan,omitempty" json:"plan,omitempty" xml:"plan,omitempty"`
	// Whether organization is active
	Active bool `form:"active" json:"active" xml:"active"`
	// Organization metadata
	Metadata map[string]any `form:"metadata,omitempty" json:"metadata,omitempty" xml:"metadata,omitempty"`
	// Trial end date
	TrialEndsAt *string `form:"trial_ends_at,omitempty" json:"trial_ends_at,omitempty" xml:"trial_ends_at,omitempty"`
	// Whether trial has been used
	TrialUsed *bool `form:"trial_used,omitempty" json:"trial_used,omitempty" xml:"trial_used,omitempty"`
	// Creation timestamp
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// Last update timestamp
	UpdatedAt string `form:"updated_at" json:"updated_at" xml:"updated_at"`
}

// PaginationResponseResponseBody is used to define fields on response body
// types.
type PaginationResponseResponseBody struct {
	// Total number of items
	Total int `form:"total" json:"total" xml:"total"`
	// Current offset
	Offset int `form:"offset" json:"offset" xml:"offset"`
	// Current limit
	Limit int `form:"limit" json:"limit" xml:"limit"`
}

// OrganizationMemberResponseResponseBody is used to define fields on response
// body types.
type OrganizationMemberResponseResponseBody struct {
	// User ID
	ID string `form:"id" json:"id" xml:"id"`
	// User email
	Email string `form:"email" json:"email" xml:"email"`
	// User first name
	FirstName *string `form:"first_name,omitempty" json:"first_name,omitempty" xml:"first_name,omitempty"`
	// User last name
	LastName *string `form:"last_name,omitempty" json:"last_name,omitempty" xml:"last_name,omitempty"`
	// User roles in organization
	Roles []string `form:"roles" json:"roles" xml:"roles"`
	// When user joined the organization
	JoinedAt string `form:"joined_at" json:"joined_at" xml:"joined_at"`
}

// OrganizationFeatureResponseResponseBody is used to define fields on response
// body types.
type OrganizationFeatureResponseResponseBody struct {
	// Feature ID
	ID string `form:"id" json:"id" xml:"id"`
	// Feature key
	Key string `form:"key" json:"key" xml:"key"`
	// Feature name
	Name string `form:"name" json:"name" xml:"name"`
	// Feature description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Whether feature is enabled
	Enabled bool `form:"enabled" json:"enabled" xml:"enabled"`
	// Whether feature is premium
	IsPremium *bool `form:"is_premium,omitempty" json:"is_premium,omitempty" xml:"is_premium,omitempty"`
	// Feature component category
	Component *string `form:"component,omitempty" json:"component,omitempty" xml:"component,omitempty"`
	// Feature settings
	Settings map[string]any `form:"settings,omitempty" json:"settings,omitempty" xml:"settings,omitempty"`
}

// CreateOrganizationRequestRequestBody is used to define fields on request
// body types.
type CreateOrganizationRequestRequestBody struct {
	// Organization name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Organization slug
	Slug *string `form:"slug,omitempty" json:"slug,omitempty" xml:"slug,omitempty"`
	// Organization domain
	Domain *string `form:"domain,omitempty" json:"domain,omitempty" xml:"domain,omitempty"`
	// Organization logo URL
	LogoURL *string `form:"logo_url,omitempty" json:"logo_url,omitempty" xml:"logo_url,omitempty"`
	// Organization plan
	Plan *string `form:"plan,omitempty" json:"plan,omitempty" xml:"plan,omitempty"`
	// Organization metadata
	Metadata map[string]any `form:"metadata,omitempty" json:"metadata,omitempty" xml:"metadata,omitempty"`
	// Number of trial days
	TrialDays *int `form:"trial_days,omitempty" json:"trial_days,omitempty" xml:"trial_days,omitempty"`
	// Features to enable
	Features []string `form:"features,omitempty" json:"features,omitempty" xml:"features,omitempty"`
}

// UpdateOrganizationRequestRequestBody is used to define fields on request
// body types.
type UpdateOrganizationRequestRequestBody struct {
	// Organization name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Organization domain
	Domain *string `form:"domain,omitempty" json:"domain,omitempty" xml:"domain,omitempty"`
	// Organization logo URL
	LogoURL *string `form:"logo_url,omitempty" json:"logo_url,omitempty" xml:"logo_url,omitempty"`
	// Organization plan
	Plan *string `form:"plan,omitempty" json:"plan,omitempty" xml:"plan,omitempty"`
	// Whether organization is active
	Active *bool `form:"active,omitempty" json:"active,omitempty" xml:"active,omitempty"`
	// Organization metadata
	Metadata map[string]any `form:"metadata,omitempty" json:"metadata,omitempty" xml:"metadata,omitempty"`
}

// AddOrganizationMemberRequestRequestBody is used to define fields on request
// body types.
type AddOrganizationMemberRequestRequestBody struct {
	// User ID to add
	UserID *string `form:"user_id,omitempty" json:"user_id,omitempty" xml:"user_id,omitempty"`
	// Roles to assign
	Roles []string `form:"roles,omitempty" json:"roles,omitempty" xml:"roles,omitempty"`
}

// UpdateOrganizationMemberRequestRequestBody is used to define fields on
// request body types.
type UpdateOrganizationMemberRequestRequestBody struct {
	// Roles to assign
	Roles []string `form:"roles,omitempty" json:"roles,omitempty" xml:"roles,omitempty"`
}

// EnableFeatureRequestRequestBody is used to define fields on request body
// types.
type EnableFeatureRequestRequestBody struct {
	// Feature key to enable
	FeatureKey *string `form:"feature_key,omitempty" json:"feature_key,omitempty" xml:"feature_key,omitempty"`
	// Feature settings
	Settings map[string]any `form:"settings,omitempty" json:"settings,omitempty" xml:"settings,omitempty"`
}

// NewListResponseBody builds the HTTP response body from the result of the
// "list" endpoint of the "organizations" service.
func NewListResponseBody(res *organizations.ListResult) *ListResponseBody {
	body := &ListResponseBody{}
	if res.Data != nil {
		body.Data = make([]*OrganizationResponseResponseBody, len(res.Data))
		for i, val := range res.Data {
			body.Data[i] = marshalOrganizationsOrganizationResponseToOrganizationResponseResponseBody(val)
		}
	} else {
		body.Data = []*OrganizationResponseResponseBody{}
	}
	if res.Pagination != nil {
		body.Pagination = marshalDesigntypesPaginationResponseToPaginationResponseResponseBody(res.Pagination)
	}
	return body
}

// NewCreateResponseBody builds the HTTP response body from the result of the
// "create" endpoint of the "organizations" service.
func NewCreateResponseBody(res *organizations.OrganizationResponse) *CreateResponseBody {
	body := &CreateResponseBody{
		ID:          res.ID,
		Name:        res.Name,
		Slug:        res.Slug,
		Domain:      res.Domain,
		LogoURL:     res.LogoURL,
		Plan:        res.Plan,
		Active:      res.Active,
		TrialEndsAt: res.TrialEndsAt,
		TrialUsed:   res.TrialUsed,
		CreatedAt:   res.CreatedAt,
		UpdatedAt:   res.UpdatedAt,
	}
	if res.Metadata != nil {
		body.Metadata = make(map[string]any, len(res.Metadata))
		for key, val := range res.Metadata {
			tk := key
			tv := val
			body.Metadata[tk] = tv
		}
	}
	return body
}

// NewGetResponseBody builds the HTTP response body from the result of the
// "get" endpoint of the "organizations" service.
func NewGetResponseBody(res *organizations.OrganizationResponse) *GetResponseBody {
	body := &GetResponseBody{
		ID:          res.ID,
		Name:        res.Name,
		Slug:        res.Slug,
		Domain:      res.Domain,
		LogoURL:     res.LogoURL,
		Plan:        res.Plan,
		Active:      res.Active,
		TrialEndsAt: res.TrialEndsAt,
		TrialUsed:   res.TrialUsed,
		CreatedAt:   res.CreatedAt,
		UpdatedAt:   res.UpdatedAt,
	}
	if res.Metadata != nil {
		body.Metadata = make(map[string]any, len(res.Metadata))
		for key, val := range res.Metadata {
			tk := key
			tv := val
			body.Metadata[tk] = tv
		}
	}
	return body
}

// NewUpdateResponseBody builds the HTTP response body from the result of the
// "update" endpoint of the "organizations" service.
func NewUpdateResponseBody(res *organizations.OrganizationResponse) *UpdateResponseBody {
	body := &UpdateResponseBody{
		ID:          res.ID,
		Name:        res.Name,
		Slug:        res.Slug,
		Domain:      res.Domain,
		LogoURL:     res.LogoURL,
		Plan:        res.Plan,
		Active:      res.Active,
		TrialEndsAt: res.TrialEndsAt,
		TrialUsed:   res.TrialUsed,
		CreatedAt:   res.CreatedAt,
		UpdatedAt:   res.UpdatedAt,
	}
	if res.Metadata != nil {
		body.Metadata = make(map[string]any, len(res.Metadata))
		for key, val := range res.Metadata {
			tk := key
			tv := val
			body.Metadata[tk] = tv
		}
	}
	return body
}

// NewListMembersResponseBody builds the HTTP response body from the result of
// the "list_members" endpoint of the "organizations" service.
func NewListMembersResponseBody(res *organizations.ListMembersResult) *ListMembersResponseBody {
	body := &ListMembersResponseBody{}
	if res.Data != nil {
		body.Data = make([]*OrganizationMemberResponseResponseBody, len(res.Data))
		for i, val := range res.Data {
			body.Data[i] = marshalOrganizationsOrganizationMemberResponseToOrganizationMemberResponseResponseBody(val)
		}
	} else {
		body.Data = []*OrganizationMemberResponseResponseBody{}
	}
	if res.Pagination != nil {
		body.Pagination = marshalDesigntypesPaginationResponseToPaginationResponseResponseBody(res.Pagination)
	}
	return body
}

// NewAddMemberResponseBody builds the HTTP response body from the result of
// the "add_member" endpoint of the "organizations" service.
func NewAddMemberResponseBody(res *organizations.AddMemberResult) *AddMemberResponseBody {
	body := &AddMemberResponseBody{
		Message: res.Message,
	}
	return body
}

// NewUpdateMemberResponseBody builds the HTTP response body from the result of
// the "update_member" endpoint of the "organizations" service.
func NewUpdateMemberResponseBody(res *organizations.UpdateMemberResult) *UpdateMemberResponseBody {
	body := &UpdateMemberResponseBody{
		Message: res.Message,
	}
	return body
}

// NewListFeaturesResponseBody builds the HTTP response body from the result of
// the "list_features" endpoint of the "organizations" service.
func NewListFeaturesResponseBody(res *organizations.ListFeaturesResult) *ListFeaturesResponseBody {
	body := &ListFeaturesResponseBody{}
	if res.Features != nil {
		body.Features = make([]*OrganizationFeatureResponseResponseBody, len(res.Features))
		for i, val := range res.Features {
			body.Features[i] = marshalOrganizationsOrganizationFeatureResponseToOrganizationFeatureResponseResponseBody(val)
		}
	} else {
		body.Features = []*OrganizationFeatureResponseResponseBody{}
	}
	return body
}

// NewEnableFeatureResponseBody builds the HTTP response body from the result
// of the "enable_feature" endpoint of the "organizations" service.
func NewEnableFeatureResponseBody(res *organizations.EnableFeatureResult) *EnableFeatureResponseBody {
	body := &EnableFeatureResponseBody{
		Message: res.Message,
	}
	return body
}

// NewListBadRequestResponseBody builds the HTTP response body from the result
// of the "list" endpoint of the "organizations" service.
func NewListBadRequestResponseBody(res *organizations.BadRequestError) *ListBadRequestResponseBody {
	body := &ListBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewListConflictResponseBody builds the HTTP response body from the result of
// the "list" endpoint of the "organizations" service.
func NewListConflictResponseBody(res *organizations.ConflictError) *ListConflictResponseBody {
	body := &ListConflictResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewListForbiddenResponseBody builds the HTTP response body from the result
// of the "list" endpoint of the "organizations" service.
func NewListForbiddenResponseBody(res *organizations.ForbiddenError) *ListForbiddenResponseBody {
	body := &ListForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewListInternalErrorResponseBody builds the HTTP response body from the
// result of the "list" endpoint of the "organizations" service.
func NewListInternalErrorResponseBody(res *organizations.InternalServerError) *ListInternalErrorResponseBody {
	body := &ListInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewListNotFoundResponseBody builds the HTTP response body from the result of
// the "list" endpoint of the "organizations" service.
func NewListNotFoundResponseBody(res *organizations.NotFoundError) *ListNotFoundResponseBody {
	body := &ListNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewListUnauthorizedResponseBody builds the HTTP response body from the
// result of the "list" endpoint of the "organizations" service.
func NewListUnauthorizedResponseBody(res *organizations.UnauthorizedError) *ListUnauthorizedResponseBody {
	body := &ListUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewCreateBadRequestResponseBody builds the HTTP response body from the
// result of the "create" endpoint of the "organizations" service.
func NewCreateBadRequestResponseBody(res *organizations.BadRequestError) *CreateBadRequestResponseBody {
	body := &CreateBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewCreateConflictResponseBody builds the HTTP response body from the result
// of the "create" endpoint of the "organizations" service.
func NewCreateConflictResponseBody(res *organizations.ConflictError) *CreateConflictResponseBody {
	body := &CreateConflictResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewCreateForbiddenResponseBody builds the HTTP response body from the result
// of the "create" endpoint of the "organizations" service.
func NewCreateForbiddenResponseBody(res *organizations.ForbiddenError) *CreateForbiddenResponseBody {
	body := &CreateForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewCreateInternalErrorResponseBody builds the HTTP response body from the
// result of the "create" endpoint of the "organizations" service.
func NewCreateInternalErrorResponseBody(res *organizations.InternalServerError) *CreateInternalErrorResponseBody {
	body := &CreateInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewCreateNotFoundResponseBody builds the HTTP response body from the result
// of the "create" endpoint of the "organizations" service.
func NewCreateNotFoundResponseBody(res *organizations.NotFoundError) *CreateNotFoundResponseBody {
	body := &CreateNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewCreateUnauthorizedResponseBody builds the HTTP response body from the
// result of the "create" endpoint of the "organizations" service.
func NewCreateUnauthorizedResponseBody(res *organizations.UnauthorizedError) *CreateUnauthorizedResponseBody {
	body := &CreateUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewGetBadRequestResponseBody builds the HTTP response body from the result
// of the "get" endpoint of the "organizations" service.
func NewGetBadRequestResponseBody(res *organizations.BadRequestError) *GetBadRequestResponseBody {
	body := &GetBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewGetConflictResponseBody builds the HTTP response body from the result of
// the "get" endpoint of the "organizations" service.
func NewGetConflictResponseBody(res *organizations.ConflictError) *GetConflictResponseBody {
	body := &GetConflictResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewGetForbiddenResponseBody builds the HTTP response body from the result of
// the "get" endpoint of the "organizations" service.
func NewGetForbiddenResponseBody(res *organizations.ForbiddenError) *GetForbiddenResponseBody {
	body := &GetForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewGetInternalErrorResponseBody builds the HTTP response body from the
// result of the "get" endpoint of the "organizations" service.
func NewGetInternalErrorResponseBody(res *organizations.InternalServerError) *GetInternalErrorResponseBody {
	body := &GetInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewGetNotFoundResponseBody builds the HTTP response body from the result of
// the "get" endpoint of the "organizations" service.
func NewGetNotFoundResponseBody(res *organizations.NotFoundError) *GetNotFoundResponseBody {
	body := &GetNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewGetUnauthorizedResponseBody builds the HTTP response body from the result
// of the "get" endpoint of the "organizations" service.
func NewGetUnauthorizedResponseBody(res *organizations.UnauthorizedError) *GetUnauthorizedResponseBody {
	body := &GetUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewUpdateBadRequestResponseBody builds the HTTP response body from the
// result of the "update" endpoint of the "organizations" service.
func NewUpdateBadRequestResponseBody(res *organizations.BadRequestError) *UpdateBadRequestResponseBody {
	body := &UpdateBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewUpdateConflictResponseBody builds the HTTP response body from the result
// of the "update" endpoint of the "organizations" service.
func NewUpdateConflictResponseBody(res *organizations.ConflictError) *UpdateConflictResponseBody {
	body := &UpdateConflictResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewUpdateForbiddenResponseBody builds the HTTP response body from the result
// of the "update" endpoint of the "organizations" service.
func NewUpdateForbiddenResponseBody(res *organizations.ForbiddenError) *UpdateForbiddenResponseBody {
	body := &UpdateForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewUpdateInternalErrorResponseBody builds the HTTP response body from the
// result of the "update" endpoint of the "organizations" service.
func NewUpdateInternalErrorResponseBody(res *organizations.InternalServerError) *UpdateInternalErrorResponseBody {
	body := &UpdateInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewUpdateNotFoundResponseBody builds the HTTP response body from the result
// of the "update" endpoint of the "organizations" service.
func NewUpdateNotFoundResponseBody(res *organizations.NotFoundError) *UpdateNotFoundResponseBody {
	body := &UpdateNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewUpdateUnauthorizedResponseBody builds the HTTP response body from the
// result of the "update" endpoint of the "organizations" service.
func NewUpdateUnauthorizedResponseBody(res *organizations.UnauthorizedError) *UpdateUnauthorizedResponseBody {
	body := &UpdateUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewDeleteBadRequestResponseBody builds the HTTP response body from the
// result of the "delete" endpoint of the "organizations" service.
func NewDeleteBadRequestResponseBody(res *organizations.BadRequestError) *DeleteBadRequestResponseBody {
	body := &DeleteBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewDeleteConflictResponseBody builds the HTTP response body from the result
// of the "delete" endpoint of the "organizations" service.
func NewDeleteConflictResponseBody(res *organizations.ConflictError) *DeleteConflictResponseBody {
	body := &DeleteConflictResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewDeleteForbiddenResponseBody builds the HTTP response body from the result
// of the "delete" endpoint of the "organizations" service.
func NewDeleteForbiddenResponseBody(res *organizations.ForbiddenError) *DeleteForbiddenResponseBody {
	body := &DeleteForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewDeleteInternalErrorResponseBody builds the HTTP response body from the
// result of the "delete" endpoint of the "organizations" service.
func NewDeleteInternalErrorResponseBody(res *organizations.InternalServerError) *DeleteInternalErrorResponseBody {
	body := &DeleteInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewDeleteNotFoundResponseBody builds the HTTP response body from the result
// of the "delete" endpoint of the "organizations" service.
func NewDeleteNotFoundResponseBody(res *organizations.NotFoundError) *DeleteNotFoundResponseBody {
	body := &DeleteNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewDeleteUnauthorizedResponseBody builds the HTTP response body from the
// result of the "delete" endpoint of the "organizations" service.
func NewDeleteUnauthorizedResponseBody(res *organizations.UnauthorizedError) *DeleteUnauthorizedResponseBody {
	body := &DeleteUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewListMembersBadRequestResponseBody builds the HTTP response body from the
// result of the "list_members" endpoint of the "organizations" service.
func NewListMembersBadRequestResponseBody(res *organizations.BadRequestError) *ListMembersBadRequestResponseBody {
	body := &ListMembersBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewListMembersConflictResponseBody builds the HTTP response body from the
// result of the "list_members" endpoint of the "organizations" service.
func NewListMembersConflictResponseBody(res *organizations.ConflictError) *ListMembersConflictResponseBody {
	body := &ListMembersConflictResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewListMembersForbiddenResponseBody builds the HTTP response body from the
// result of the "list_members" endpoint of the "organizations" service.
func NewListMembersForbiddenResponseBody(res *organizations.ForbiddenError) *ListMembersForbiddenResponseBody {
	body := &ListMembersForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewListMembersInternalErrorResponseBody builds the HTTP response body from
// the result of the "list_members" endpoint of the "organizations" service.
func NewListMembersInternalErrorResponseBody(res *organizations.InternalServerError) *ListMembersInternalErrorResponseBody {
	body := &ListMembersInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewListMembersNotFoundResponseBody builds the HTTP response body from the
// result of the "list_members" endpoint of the "organizations" service.
func NewListMembersNotFoundResponseBody(res *organizations.NotFoundError) *ListMembersNotFoundResponseBody {
	body := &ListMembersNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewListMembersUnauthorizedResponseBody builds the HTTP response body from
// the result of the "list_members" endpoint of the "organizations" service.
func NewListMembersUnauthorizedResponseBody(res *organizations.UnauthorizedError) *ListMembersUnauthorizedResponseBody {
	body := &ListMembersUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewAddMemberBadRequestResponseBody builds the HTTP response body from the
// result of the "add_member" endpoint of the "organizations" service.
func NewAddMemberBadRequestResponseBody(res *organizations.BadRequestError) *AddMemberBadRequestResponseBody {
	body := &AddMemberBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewAddMemberConflictResponseBody builds the HTTP response body from the
// result of the "add_member" endpoint of the "organizations" service.
func NewAddMemberConflictResponseBody(res *organizations.ConflictError) *AddMemberConflictResponseBody {
	body := &AddMemberConflictResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewAddMemberForbiddenResponseBody builds the HTTP response body from the
// result of the "add_member" endpoint of the "organizations" service.
func NewAddMemberForbiddenResponseBody(res *organizations.ForbiddenError) *AddMemberForbiddenResponseBody {
	body := &AddMemberForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewAddMemberInternalErrorResponseBody builds the HTTP response body from the
// result of the "add_member" endpoint of the "organizations" service.
func NewAddMemberInternalErrorResponseBody(res *organizations.InternalServerError) *AddMemberInternalErrorResponseBody {
	body := &AddMemberInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewAddMemberNotFoundResponseBody builds the HTTP response body from the
// result of the "add_member" endpoint of the "organizations" service.
func NewAddMemberNotFoundResponseBody(res *organizations.NotFoundError) *AddMemberNotFoundResponseBody {
	body := &AddMemberNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewAddMemberUnauthorizedResponseBody builds the HTTP response body from the
// result of the "add_member" endpoint of the "organizations" service.
func NewAddMemberUnauthorizedResponseBody(res *organizations.UnauthorizedError) *AddMemberUnauthorizedResponseBody {
	body := &AddMemberUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewUpdateMemberBadRequestResponseBody builds the HTTP response body from the
// result of the "update_member" endpoint of the "organizations" service.
func NewUpdateMemberBadRequestResponseBody(res *organizations.BadRequestError) *UpdateMemberBadRequestResponseBody {
	body := &UpdateMemberBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewUpdateMemberConflictResponseBody builds the HTTP response body from the
// result of the "update_member" endpoint of the "organizations" service.
func NewUpdateMemberConflictResponseBody(res *organizations.ConflictError) *UpdateMemberConflictResponseBody {
	body := &UpdateMemberConflictResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewUpdateMemberForbiddenResponseBody builds the HTTP response body from the
// result of the "update_member" endpoint of the "organizations" service.
func NewUpdateMemberForbiddenResponseBody(res *organizations.ForbiddenError) *UpdateMemberForbiddenResponseBody {
	body := &UpdateMemberForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewUpdateMemberInternalErrorResponseBody builds the HTTP response body from
// the result of the "update_member" endpoint of the "organizations" service.
func NewUpdateMemberInternalErrorResponseBody(res *organizations.InternalServerError) *UpdateMemberInternalErrorResponseBody {
	body := &UpdateMemberInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewUpdateMemberNotFoundResponseBody builds the HTTP response body from the
// result of the "update_member" endpoint of the "organizations" service.
func NewUpdateMemberNotFoundResponseBody(res *organizations.NotFoundError) *UpdateMemberNotFoundResponseBody {
	body := &UpdateMemberNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewUpdateMemberUnauthorizedResponseBody builds the HTTP response body from
// the result of the "update_member" endpoint of the "organizations" service.
func NewUpdateMemberUnauthorizedResponseBody(res *organizations.UnauthorizedError) *UpdateMemberUnauthorizedResponseBody {
	body := &UpdateMemberUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewRemoveMemberBadRequestResponseBody builds the HTTP response body from the
// result of the "remove_member" endpoint of the "organizations" service.
func NewRemoveMemberBadRequestResponseBody(res *organizations.BadRequestError) *RemoveMemberBadRequestResponseBody {
	body := &RemoveMemberBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewRemoveMemberConflictResponseBody builds the HTTP response body from the
// result of the "remove_member" endpoint of the "organizations" service.
func NewRemoveMemberConflictResponseBody(res *organizations.ConflictError) *RemoveMemberConflictResponseBody {
	body := &RemoveMemberConflictResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewRemoveMemberForbiddenResponseBody builds the HTTP response body from the
// result of the "remove_member" endpoint of the "organizations" service.
func NewRemoveMemberForbiddenResponseBody(res *organizations.ForbiddenError) *RemoveMemberForbiddenResponseBody {
	body := &RemoveMemberForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewRemoveMemberInternalErrorResponseBody builds the HTTP response body from
// the result of the "remove_member" endpoint of the "organizations" service.
func NewRemoveMemberInternalErrorResponseBody(res *organizations.InternalServerError) *RemoveMemberInternalErrorResponseBody {
	body := &RemoveMemberInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewRemoveMemberNotFoundResponseBody builds the HTTP response body from the
// result of the "remove_member" endpoint of the "organizations" service.
func NewRemoveMemberNotFoundResponseBody(res *organizations.NotFoundError) *RemoveMemberNotFoundResponseBody {
	body := &RemoveMemberNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewRemoveMemberUnauthorizedResponseBody builds the HTTP response body from
// the result of the "remove_member" endpoint of the "organizations" service.
func NewRemoveMemberUnauthorizedResponseBody(res *organizations.UnauthorizedError) *RemoveMemberUnauthorizedResponseBody {
	body := &RemoveMemberUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewListFeaturesBadRequestResponseBody builds the HTTP response body from the
// result of the "list_features" endpoint of the "organizations" service.
func NewListFeaturesBadRequestResponseBody(res *organizations.BadRequestError) *ListFeaturesBadRequestResponseBody {
	body := &ListFeaturesBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewListFeaturesConflictResponseBody builds the HTTP response body from the
// result of the "list_features" endpoint of the "organizations" service.
func NewListFeaturesConflictResponseBody(res *organizations.ConflictError) *ListFeaturesConflictResponseBody {
	body := &ListFeaturesConflictResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewListFeaturesForbiddenResponseBody builds the HTTP response body from the
// result of the "list_features" endpoint of the "organizations" service.
func NewListFeaturesForbiddenResponseBody(res *organizations.ForbiddenError) *ListFeaturesForbiddenResponseBody {
	body := &ListFeaturesForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewListFeaturesInternalErrorResponseBody builds the HTTP response body from
// the result of the "list_features" endpoint of the "organizations" service.
func NewListFeaturesInternalErrorResponseBody(res *organizations.InternalServerError) *ListFeaturesInternalErrorResponseBody {
	body := &ListFeaturesInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewListFeaturesNotFoundResponseBody builds the HTTP response body from the
// result of the "list_features" endpoint of the "organizations" service.
func NewListFeaturesNotFoundResponseBody(res *organizations.NotFoundError) *ListFeaturesNotFoundResponseBody {
	body := &ListFeaturesNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewListFeaturesUnauthorizedResponseBody builds the HTTP response body from
// the result of the "list_features" endpoint of the "organizations" service.
func NewListFeaturesUnauthorizedResponseBody(res *organizations.UnauthorizedError) *ListFeaturesUnauthorizedResponseBody {
	body := &ListFeaturesUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewEnableFeatureBadRequestResponseBody builds the HTTP response body from
// the result of the "enable_feature" endpoint of the "organizations" service.
func NewEnableFeatureBadRequestResponseBody(res *organizations.BadRequestError) *EnableFeatureBadRequestResponseBody {
	body := &EnableFeatureBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewEnableFeatureConflictResponseBody builds the HTTP response body from the
// result of the "enable_feature" endpoint of the "organizations" service.
func NewEnableFeatureConflictResponseBody(res *organizations.ConflictError) *EnableFeatureConflictResponseBody {
	body := &EnableFeatureConflictResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewEnableFeatureForbiddenResponseBody builds the HTTP response body from the
// result of the "enable_feature" endpoint of the "organizations" service.
func NewEnableFeatureForbiddenResponseBody(res *organizations.ForbiddenError) *EnableFeatureForbiddenResponseBody {
	body := &EnableFeatureForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewEnableFeatureInternalErrorResponseBody builds the HTTP response body from
// the result of the "enable_feature" endpoint of the "organizations" service.
func NewEnableFeatureInternalErrorResponseBody(res *organizations.InternalServerError) *EnableFeatureInternalErrorResponseBody {
	body := &EnableFeatureInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewEnableFeatureNotFoundResponseBody builds the HTTP response body from the
// result of the "enable_feature" endpoint of the "organizations" service.
func NewEnableFeatureNotFoundResponseBody(res *organizations.NotFoundError) *EnableFeatureNotFoundResponseBody {
	body := &EnableFeatureNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewEnableFeatureUnauthorizedResponseBody builds the HTTP response body from
// the result of the "enable_feature" endpoint of the "organizations" service.
func NewEnableFeatureUnauthorizedResponseBody(res *organizations.UnauthorizedError) *EnableFeatureUnauthorizedResponseBody {
	body := &EnableFeatureUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewDisableFeatureBadRequestResponseBody builds the HTTP response body from
// the result of the "disable_feature" endpoint of the "organizations" service.
func NewDisableFeatureBadRequestResponseBody(res *organizations.BadRequestError) *DisableFeatureBadRequestResponseBody {
	body := &DisableFeatureBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewDisableFeatureConflictResponseBody builds the HTTP response body from the
// result of the "disable_feature" endpoint of the "organizations" service.
func NewDisableFeatureConflictResponseBody(res *organizations.ConflictError) *DisableFeatureConflictResponseBody {
	body := &DisableFeatureConflictResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewDisableFeatureForbiddenResponseBody builds the HTTP response body from
// the result of the "disable_feature" endpoint of the "organizations" service.
func NewDisableFeatureForbiddenResponseBody(res *organizations.ForbiddenError) *DisableFeatureForbiddenResponseBody {
	body := &DisableFeatureForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewDisableFeatureInternalErrorResponseBody builds the HTTP response body
// from the result of the "disable_feature" endpoint of the "organizations"
// service.
func NewDisableFeatureInternalErrorResponseBody(res *organizations.InternalServerError) *DisableFeatureInternalErrorResponseBody {
	body := &DisableFeatureInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewDisableFeatureNotFoundResponseBody builds the HTTP response body from the
// result of the "disable_feature" endpoint of the "organizations" service.
func NewDisableFeatureNotFoundResponseBody(res *organizations.NotFoundError) *DisableFeatureNotFoundResponseBody {
	body := &DisableFeatureNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewDisableFeatureUnauthorizedResponseBody builds the HTTP response body from
// the result of the "disable_feature" endpoint of the "organizations" service.
func NewDisableFeatureUnauthorizedResponseBody(res *organizations.UnauthorizedError) *DisableFeatureUnauthorizedResponseBody {
	body := &DisableFeatureUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewListPayload builds a organizations service list endpoint payload.
func NewListPayload(offset int, limit int, search *string, jwt *string) *organizations.ListPayload {
	v := &organizations.ListPayload{}
	v.Offset = offset
	v.Limit = limit
	v.Search = search
	v.JWT = jwt

	return v
}

// NewCreatePayload builds a organizations service create endpoint payload.
func NewCreatePayload(body *CreateRequestBody, jwt *string) *organizations.CreatePayload {
	v := &organizations.CreatePayload{}
	v.Organization = unmarshalCreateOrganizationRequestRequestBodyToOrganizationsCreateOrganizationRequest(body.Organization)
	v.JWT = jwt

	return v
}

// NewGetPayload builds a organizations service get endpoint payload.
func NewGetPayload(id string, jwt *string) *organizations.GetPayload {
	v := &organizations.GetPayload{}
	v.ID = id
	v.JWT = jwt

	return v
}

// NewUpdatePayload builds a organizations service update endpoint payload.
func NewUpdatePayload(body *UpdateRequestBody, id string, jwt *string) *organizations.UpdatePayload {
	v := &organizations.UpdatePayload{}
	v.Organization = unmarshalUpdateOrganizationRequestRequestBodyToOrganizationsUpdateOrganizationRequest(body.Organization)
	v.ID = id
	v.JWT = jwt

	return v
}

// NewDeletePayload builds a organizations service delete endpoint payload.
func NewDeletePayload(id string, jwt *string) *organizations.DeletePayload {
	v := &organizations.DeletePayload{}
	v.ID = id
	v.JWT = jwt

	return v
}

// NewListMembersPayload builds a organizations service list_members endpoint
// payload.
func NewListMembersPayload(id string, offset int, limit int, search *string, jwt *string) *organizations.ListMembersPayload {
	v := &organizations.ListMembersPayload{}
	v.ID = id
	v.Offset = offset
	v.Limit = limit
	v.Search = search
	v.JWT = jwt

	return v
}

// NewAddMemberPayload builds a organizations service add_member endpoint
// payload.
func NewAddMemberPayload(body *AddMemberRequestBody, id string, jwt *string) *organizations.AddMemberPayload {
	v := &organizations.AddMemberPayload{}
	v.Member = unmarshalAddOrganizationMemberRequestRequestBodyToOrganizationsAddOrganizationMemberRequest(body.Member)
	v.ID = id
	v.JWT = jwt

	return v
}

// NewUpdateMemberPayload builds a organizations service update_member endpoint
// payload.
func NewUpdateMemberPayload(body *UpdateMemberRequestBody, id string, userID string, jwt *string) *organizations.UpdateMemberPayload {
	v := &organizations.UpdateMemberPayload{}
	v.Member = unmarshalUpdateOrganizationMemberRequestRequestBodyToOrganizationsUpdateOrganizationMemberRequest(body.Member)
	v.ID = id
	v.UserID = userID
	v.JWT = jwt

	return v
}

// NewRemoveMemberPayload builds a organizations service remove_member endpoint
// payload.
func NewRemoveMemberPayload(id string, userID string, jwt *string) *organizations.RemoveMemberPayload {
	v := &organizations.RemoveMemberPayload{}
	v.ID = id
	v.UserID = userID
	v.JWT = jwt

	return v
}

// NewListFeaturesPayload builds a organizations service list_features endpoint
// payload.
func NewListFeaturesPayload(id string, jwt *string) *organizations.ListFeaturesPayload {
	v := &organizations.ListFeaturesPayload{}
	v.ID = id
	v.JWT = jwt

	return v
}

// NewEnableFeaturePayload builds a organizations service enable_feature
// endpoint payload.
func NewEnableFeaturePayload(body *EnableFeatureRequestBody, id string, jwt *string) *organizations.EnableFeaturePayload {
	v := &organizations.EnableFeaturePayload{}
	v.Feature = unmarshalEnableFeatureRequestRequestBodyToOrganizationsEnableFeatureRequest(body.Feature)
	v.ID = id
	v.JWT = jwt

	return v
}

// NewDisableFeaturePayload builds a organizations service disable_feature
// endpoint payload.
func NewDisableFeaturePayload(id string, featureKey string, jwt *string) *organizations.DisableFeaturePayload {
	v := &organizations.DisableFeaturePayload{}
	v.ID = id
	v.FeatureKey = featureKey
	v.JWT = jwt

	return v
}

// ValidateCreateRequestBody runs the validations defined on CreateRequestBody
func ValidateCreateRequestBody(body *CreateRequestBody) (err error) {
	if body.Organization == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("organization", "body"))
	}
	if body.Organization != nil {
		if err2 := ValidateCreateOrganizationRequestRequestBody(body.Organization); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateUpdateRequestBody runs the validations defined on UpdateRequestBody
func ValidateUpdateRequestBody(body *UpdateRequestBody) (err error) {
	if body.Organization == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("organization", "body"))
	}
	return
}

// ValidateAddMemberRequestBody runs the validations defined on
// add_member_request_body
func ValidateAddMemberRequestBody(body *AddMemberRequestBody) (err error) {
	if body.Member == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("member", "body"))
	}
	if body.Member != nil {
		if err2 := ValidateAddOrganizationMemberRequestRequestBody(body.Member); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateUpdateMemberRequestBody runs the validations defined on
// update_member_request_body
func ValidateUpdateMemberRequestBody(body *UpdateMemberRequestBody) (err error) {
	if body.Member == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("member", "body"))
	}
	if body.Member != nil {
		if err2 := ValidateUpdateOrganizationMemberRequestRequestBody(body.Member); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateEnableFeatureRequestBody runs the validations defined on
// enable_feature_request_body
func ValidateEnableFeatureRequestBody(body *EnableFeatureRequestBody) (err error) {
	if body.Feature == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("feature", "body"))
	}
	if body.Feature != nil {
		if err2 := ValidateEnableFeatureRequestRequestBody(body.Feature); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateCreateOrganizationRequestRequestBody runs the validations defined on
// CreateOrganizationRequestRequestBody
func ValidateCreateOrganizationRequestRequestBody(body *CreateOrganizationRequestRequestBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.TrialDays != nil {
		if *body.TrialDays < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.trial_days", *body.TrialDays, 0, true))
		}
	}
	return
}

// ValidateAddOrganizationMemberRequestRequestBody runs the validations defined
// on AddOrganizationMemberRequestRequestBody
func ValidateAddOrganizationMemberRequestRequestBody(body *AddOrganizationMemberRequestRequestBody) (err error) {
	if body.UserID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("user_id", "body"))
	}
	if body.Roles == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("roles", "body"))
	}
	return
}

// ValidateUpdateOrganizationMemberRequestRequestBody runs the validations
// defined on UpdateOrganizationMemberRequestRequestBody
func ValidateUpdateOrganizationMemberRequestRequestBody(body *UpdateOrganizationMemberRequestRequestBody) (err error) {
	if body.Roles == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("roles", "body"))
	}
	return
}

// ValidateEnableFeatureRequestRequestBody runs the validations defined on
// EnableFeatureRequestRequestBody
func ValidateEnableFeatureRequestRequestBody(body *EnableFeatureRequestRequestBody) (err error) {
	if body.FeatureKey == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("feature_key", "body"))
	}
	return
}
