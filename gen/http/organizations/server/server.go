// Code generated by goa v3.20.0, DO NOT EDIT.
//
// organizations HTTP server
//
// Command:
// $ goa gen github.com/juicycleff/frank/design -o .

package server

import (
	"context"
	"net/http"
	"regexp"

	organizations "github.com/juicycleff/frank/gen/organizations"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
	"goa.design/plugins/v3/cors"
)

// Server lists the organizations service endpoint HTTP handlers.
type Server struct {
	Mounts         []*MountPoint
	List           http.Handler
	Create         http.Handler
	Get            http.Handler
	Update         http.Handler
	Delete         http.Handler
	ListMembers    http.Handler
	AddMember      http.Handler
	UpdateMember   http.Handler
	RemoveMember   http.Handler
	ListFeatures   http.Handler
	EnableFeature  http.Handler
	DisableFeature http.Handler
	CORS           http.Handler
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the organizations service endpoints
// using the provided encoder and decoder. The handlers are mounted on the
// given mux using the HTTP verb and path defined in the design. errhandler is
// called whenever a response fails to be encoded. formatter is used to format
// errors returned by the service methods prior to encoding. Both errhandler
// and formatter are optional and can be nil.
func New(
	e *organizations.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"List", "GET", "/v1/organizations"},
			{"Create", "POST", "/v1/organizations"},
			{"Get", "GET", "/v1/organizations/{id}"},
			{"Update", "PUT", "/v1/organizations/{id}"},
			{"Delete", "DELETE", "/v1/organizations/{id}"},
			{"ListMembers", "GET", "/v1/organizations/{id}/members"},
			{"AddMember", "POST", "/v1/organizations/{id}/members"},
			{"UpdateMember", "PUT", "/v1/organizations/{id}/members/{user_id}"},
			{"RemoveMember", "DELETE", "/v1/organizations/{id}/members/{user_id}"},
			{"ListFeatures", "GET", "/v1/organizations/{id}/features"},
			{"EnableFeature", "POST", "/v1/organizations/{id}/features"},
			{"DisableFeature", "DELETE", "/v1/organizations/{id}/features/{feature_key}"},
			{"CORS", "OPTIONS", "/v1/organizations"},
			{"CORS", "OPTIONS", "/v1/organizations/{id}"},
			{"CORS", "OPTIONS", "/v1/organizations/{id}/members"},
			{"CORS", "OPTIONS", "/v1/organizations/{id}/members/{user_id}"},
			{"CORS", "OPTIONS", "/v1/organizations/{id}/features"},
			{"CORS", "OPTIONS", "/v1/organizations/{id}/features/{feature_key}"},
		},
		List:           NewListHandler(e.List, mux, decoder, encoder, errhandler, formatter),
		Create:         NewCreateHandler(e.Create, mux, decoder, encoder, errhandler, formatter),
		Get:            NewGetHandler(e.Get, mux, decoder, encoder, errhandler, formatter),
		Update:         NewUpdateHandler(e.Update, mux, decoder, encoder, errhandler, formatter),
		Delete:         NewDeleteHandler(e.Delete, mux, decoder, encoder, errhandler, formatter),
		ListMembers:    NewListMembersHandler(e.ListMembers, mux, decoder, encoder, errhandler, formatter),
		AddMember:      NewAddMemberHandler(e.AddMember, mux, decoder, encoder, errhandler, formatter),
		UpdateMember:   NewUpdateMemberHandler(e.UpdateMember, mux, decoder, encoder, errhandler, formatter),
		RemoveMember:   NewRemoveMemberHandler(e.RemoveMember, mux, decoder, encoder, errhandler, formatter),
		ListFeatures:   NewListFeaturesHandler(e.ListFeatures, mux, decoder, encoder, errhandler, formatter),
		EnableFeature:  NewEnableFeatureHandler(e.EnableFeature, mux, decoder, encoder, errhandler, formatter),
		DisableFeature: NewDisableFeatureHandler(e.DisableFeature, mux, decoder, encoder, errhandler, formatter),
		CORS:           NewCORSHandler(),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "organizations" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.List = m(s.List)
	s.Create = m(s.Create)
	s.Get = m(s.Get)
	s.Update = m(s.Update)
	s.Delete = m(s.Delete)
	s.ListMembers = m(s.ListMembers)
	s.AddMember = m(s.AddMember)
	s.UpdateMember = m(s.UpdateMember)
	s.RemoveMember = m(s.RemoveMember)
	s.ListFeatures = m(s.ListFeatures)
	s.EnableFeature = m(s.EnableFeature)
	s.DisableFeature = m(s.DisableFeature)
	s.CORS = m(s.CORS)
}

// MethodNames returns the methods served.
func (s *Server) MethodNames() []string { return organizations.MethodNames[:] }

// Mount configures the mux to serve the organizations endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountListHandler(mux, h.List)
	MountCreateHandler(mux, h.Create)
	MountGetHandler(mux, h.Get)
	MountUpdateHandler(mux, h.Update)
	MountDeleteHandler(mux, h.Delete)
	MountListMembersHandler(mux, h.ListMembers)
	MountAddMemberHandler(mux, h.AddMember)
	MountUpdateMemberHandler(mux, h.UpdateMember)
	MountRemoveMemberHandler(mux, h.RemoveMember)
	MountListFeaturesHandler(mux, h.ListFeatures)
	MountEnableFeatureHandler(mux, h.EnableFeature)
	MountDisableFeatureHandler(mux, h.DisableFeature)
	MountCORSHandler(mux, h.CORS)
}

// Mount configures the mux to serve the organizations endpoints.
func (s *Server) Mount(mux goahttp.Muxer) {
	Mount(mux, s)
}

// MountListHandler configures the mux to serve the "organizations" service
// "list" endpoint.
func MountListHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleOrganizationsOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/v1/organizations", f)
}

// NewListHandler creates a HTTP handler which loads the HTTP request and calls
// the "organizations" service "list" endpoint.
func NewListHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeListRequest(mux, decoder)
		encodeResponse = EncodeListResponse(encoder)
		encodeError    = EncodeListError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "list")
		ctx = context.WithValue(ctx, goa.ServiceKey, "organizations")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountCreateHandler configures the mux to serve the "organizations" service
// "create" endpoint.
func MountCreateHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleOrganizationsOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/v1/organizations", f)
}

// NewCreateHandler creates a HTTP handler which loads the HTTP request and
// calls the "organizations" service "create" endpoint.
func NewCreateHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeCreateRequest(mux, decoder)
		encodeResponse = EncodeCreateResponse(encoder)
		encodeError    = EncodeCreateError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "create")
		ctx = context.WithValue(ctx, goa.ServiceKey, "organizations")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetHandler configures the mux to serve the "organizations" service
// "get" endpoint.
func MountGetHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleOrganizationsOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/v1/organizations/{id}", f)
}

// NewGetHandler creates a HTTP handler which loads the HTTP request and calls
// the "organizations" service "get" endpoint.
func NewGetHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetRequest(mux, decoder)
		encodeResponse = EncodeGetResponse(encoder)
		encodeError    = EncodeGetError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "get")
		ctx = context.WithValue(ctx, goa.ServiceKey, "organizations")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountUpdateHandler configures the mux to serve the "organizations" service
// "update" endpoint.
func MountUpdateHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleOrganizationsOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("PUT", "/v1/organizations/{id}", f)
}

// NewUpdateHandler creates a HTTP handler which loads the HTTP request and
// calls the "organizations" service "update" endpoint.
func NewUpdateHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUpdateRequest(mux, decoder)
		encodeResponse = EncodeUpdateResponse(encoder)
		encodeError    = EncodeUpdateError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "update")
		ctx = context.WithValue(ctx, goa.ServiceKey, "organizations")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountDeleteHandler configures the mux to serve the "organizations" service
// "delete" endpoint.
func MountDeleteHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleOrganizationsOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("DELETE", "/v1/organizations/{id}", f)
}

// NewDeleteHandler creates a HTTP handler which loads the HTTP request and
// calls the "organizations" service "delete" endpoint.
func NewDeleteHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeDeleteRequest(mux, decoder)
		encodeResponse = EncodeDeleteResponse(encoder)
		encodeError    = EncodeDeleteError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "delete")
		ctx = context.WithValue(ctx, goa.ServiceKey, "organizations")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountListMembersHandler configures the mux to serve the "organizations"
// service "list_members" endpoint.
func MountListMembersHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleOrganizationsOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/v1/organizations/{id}/members", f)
}

// NewListMembersHandler creates a HTTP handler which loads the HTTP request
// and calls the "organizations" service "list_members" endpoint.
func NewListMembersHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeListMembersRequest(mux, decoder)
		encodeResponse = EncodeListMembersResponse(encoder)
		encodeError    = EncodeListMembersError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "list_members")
		ctx = context.WithValue(ctx, goa.ServiceKey, "organizations")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountAddMemberHandler configures the mux to serve the "organizations"
// service "add_member" endpoint.
func MountAddMemberHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleOrganizationsOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/v1/organizations/{id}/members", f)
}

// NewAddMemberHandler creates a HTTP handler which loads the HTTP request and
// calls the "organizations" service "add_member" endpoint.
func NewAddMemberHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeAddMemberRequest(mux, decoder)
		encodeResponse = EncodeAddMemberResponse(encoder)
		encodeError    = EncodeAddMemberError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "add_member")
		ctx = context.WithValue(ctx, goa.ServiceKey, "organizations")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountUpdateMemberHandler configures the mux to serve the "organizations"
// service "update_member" endpoint.
func MountUpdateMemberHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleOrganizationsOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("PUT", "/v1/organizations/{id}/members/{user_id}", f)
}

// NewUpdateMemberHandler creates a HTTP handler which loads the HTTP request
// and calls the "organizations" service "update_member" endpoint.
func NewUpdateMemberHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUpdateMemberRequest(mux, decoder)
		encodeResponse = EncodeUpdateMemberResponse(encoder)
		encodeError    = EncodeUpdateMemberError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "update_member")
		ctx = context.WithValue(ctx, goa.ServiceKey, "organizations")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountRemoveMemberHandler configures the mux to serve the "organizations"
// service "remove_member" endpoint.
func MountRemoveMemberHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleOrganizationsOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("DELETE", "/v1/organizations/{id}/members/{user_id}", f)
}

// NewRemoveMemberHandler creates a HTTP handler which loads the HTTP request
// and calls the "organizations" service "remove_member" endpoint.
func NewRemoveMemberHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeRemoveMemberRequest(mux, decoder)
		encodeResponse = EncodeRemoveMemberResponse(encoder)
		encodeError    = EncodeRemoveMemberError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "remove_member")
		ctx = context.WithValue(ctx, goa.ServiceKey, "organizations")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountListFeaturesHandler configures the mux to serve the "organizations"
// service "list_features" endpoint.
func MountListFeaturesHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleOrganizationsOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/v1/organizations/{id}/features", f)
}

// NewListFeaturesHandler creates a HTTP handler which loads the HTTP request
// and calls the "organizations" service "list_features" endpoint.
func NewListFeaturesHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeListFeaturesRequest(mux, decoder)
		encodeResponse = EncodeListFeaturesResponse(encoder)
		encodeError    = EncodeListFeaturesError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "list_features")
		ctx = context.WithValue(ctx, goa.ServiceKey, "organizations")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountEnableFeatureHandler configures the mux to serve the "organizations"
// service "enable_feature" endpoint.
func MountEnableFeatureHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleOrganizationsOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/v1/organizations/{id}/features", f)
}

// NewEnableFeatureHandler creates a HTTP handler which loads the HTTP request
// and calls the "organizations" service "enable_feature" endpoint.
func NewEnableFeatureHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeEnableFeatureRequest(mux, decoder)
		encodeResponse = EncodeEnableFeatureResponse(encoder)
		encodeError    = EncodeEnableFeatureError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "enable_feature")
		ctx = context.WithValue(ctx, goa.ServiceKey, "organizations")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountDisableFeatureHandler configures the mux to serve the "organizations"
// service "disable_feature" endpoint.
func MountDisableFeatureHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleOrganizationsOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("DELETE", "/v1/organizations/{id}/features/{feature_key}", f)
}

// NewDisableFeatureHandler creates a HTTP handler which loads the HTTP request
// and calls the "organizations" service "disable_feature" endpoint.
func NewDisableFeatureHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeDisableFeatureRequest(mux, decoder)
		encodeResponse = EncodeDisableFeatureResponse(encoder)
		encodeError    = EncodeDisableFeatureError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "disable_feature")
		ctx = context.WithValue(ctx, goa.ServiceKey, "organizations")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountCORSHandler configures the mux to serve the CORS endpoints for the
// service organizations.
func MountCORSHandler(mux goahttp.Muxer, h http.Handler) {
	h = HandleOrganizationsOrigin(h)
	mux.Handle("OPTIONS", "/v1/organizations", h.ServeHTTP)
	mux.Handle("OPTIONS", "/v1/organizations/{id}", h.ServeHTTP)
	mux.Handle("OPTIONS", "/v1/organizations/{id}/members", h.ServeHTTP)
	mux.Handle("OPTIONS", "/v1/organizations/{id}/members/{user_id}", h.ServeHTTP)
	mux.Handle("OPTIONS", "/v1/organizations/{id}/features", h.ServeHTTP)
	mux.Handle("OPTIONS", "/v1/organizations/{id}/features/{feature_key}", h.ServeHTTP)
}

// NewCORSHandler creates a HTTP handler which returns a simple 204 response.
func NewCORSHandler() http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		w.WriteHeader(204)
	})
}

// HandleOrganizationsOrigin applies the CORS response headers corresponding to
// the origin for the service organizations.
func HandleOrganizationsOrigin(h http.Handler) http.Handler {
	spec1 := regexp.MustCompile(".*localhost.*")
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		origin := r.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			h.ServeHTTP(w, r)
			return
		}
		if cors.MatchOrigin(origin, "*.frank.com") {
			w.Header().Set("Access-Control-Allow-Origin", origin)
			w.Header().Set("Vary", "Origin")
			w.Header().Set("Access-Control-Max-Age", "100")
			w.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := r.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				w.Header().Set("Access-Control-Allow-Headers", "X-Shared-Secret, X-Api-Version")
				w.WriteHeader(204)
				return
			}
			h.ServeHTTP(w, r)
			return
		}
		if cors.MatchOriginRegexp(origin, spec1) {
			w.Header().Set("Access-Control-Allow-Origin", origin)
			w.Header().Set("Vary", "Origin")
			w.Header().Set("Access-Control-Expose-Headers", "X-Request-Id")
			w.Header().Set("Access-Control-Max-Age", "600")
			w.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := r.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				w.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS")
				w.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
				w.WriteHeader(204)
				return
			}
			h.ServeHTTP(w, r)
			return
		}
		if cors.MatchOrigin(origin, "localhost") {
			w.Header().Set("Access-Control-Allow-Origin", origin)
			w.Header().Set("Vary", "Origin")
			if acrm := r.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				w.WriteHeader(204)
				return
			}
			h.ServeHTTP(w, r)
			return
		}
		h.ServeHTTP(w, r)
		return
	})
}
