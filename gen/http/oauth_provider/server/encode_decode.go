// Code generated by goa v3.20.0, DO NOT EDIT.
//
// oauth_provider HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/juicycleff/frank/design -o .

package server

import (
	"context"
	"errors"
	"io"
	"net/http"
	"strconv"
	"strings"

	designtypes "github.com/juicycleff/frank/gen/designtypes"
	oauthprovider "github.com/juicycleff/frank/gen/oauth_provider"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeAuthorizeResponse returns an encoder for responses returned by the
// oauth_provider authorize endpoint.
func EncodeAuthorizeResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(string)
		ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "text/html")
		enc := encoder(ctx, w)
		body := res
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeAuthorizeRequest returns a decoder for requests sent to the
// oauth_provider authorize endpoint.
func DecodeAuthorizeRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			clientID            string
			responseType        string
			redirectURI         string
			scope               *string
			state               *string
			codeChallenge       *string
			codeChallengeMethod *string
			oauth2              *string
			xAPIKey             *string
			jwt                 *string
			err                 error
		)
		qp := r.URL.Query()
		clientID = qp.Get("client_id")
		if clientID == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("client_id", "query string"))
		}
		responseType = qp.Get("response_type")
		if responseType == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("response_type", "query string"))
		}
		redirectURI = qp.Get("redirect_uri")
		if redirectURI == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("redirect_uri", "query string"))
		}
		scopeRaw := qp.Get("scope")
		if scopeRaw != "" {
			scope = &scopeRaw
		}
		stateRaw := qp.Get("state")
		if stateRaw != "" {
			state = &stateRaw
		}
		codeChallengeRaw := qp.Get("code_challenge")
		if codeChallengeRaw != "" {
			codeChallenge = &codeChallengeRaw
		}
		codeChallengeMethodRaw := qp.Get("code_challenge_method")
		if codeChallengeMethodRaw != "" {
			codeChallengeMethod = &codeChallengeMethodRaw
		}
		oauth2Raw := r.Header.Get("Authorization")
		if oauth2Raw != "" {
			oauth2 = &oauth2Raw
		}
		xAPIKeyRaw := r.Header.Get("Authorization")
		if xAPIKeyRaw != "" {
			xAPIKey = &xAPIKeyRaw
		}
		jwtRaw := r.Header.Get("Authorization")
		if jwtRaw != "" {
			jwt = &jwtRaw
		}
		if err != nil {
			return nil, err
		}
		payload := NewAuthorizePayload(clientID, responseType, redirectURI, scope, state, codeChallenge, codeChallengeMethod, oauth2, xAPIKey, jwt)
		if payload.Oauth2 != nil {
			if strings.Contains(*payload.Oauth2, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.Oauth2, " ", 2)[1]
				payload.Oauth2 = &cred
			}
		}
		if payload.XAPIKey != nil {
			if strings.Contains(*payload.XAPIKey, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.XAPIKey, " ", 2)[1]
				payload.XAPIKey = &cred
			}
		}
		if payload.JWT != nil {
			if strings.Contains(*payload.JWT, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.JWT, " ", 2)[1]
				payload.JWT = &cred
			}
		}

		return payload, nil
	}
}

// EncodeAuthorizeError returns an encoder for errors returned by the authorize
// oauth_provider endpoint.
func EncodeAuthorizeError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "bad_request":
			var res *oauthprovider.BadRequestError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewAuthorizeBadRequestResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "conflict":
			var res *oauthprovider.ConflictError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewAuthorizeConflictResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusConflict)
			return enc.Encode(body)
		case "forbidden":
			var res *oauthprovider.ForbiddenError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewAuthorizeForbiddenResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusForbidden)
			return enc.Encode(body)
		case "internal_error":
			var res *oauthprovider.InternalServerError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewAuthorizeInternalErrorResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "not_found":
			var res *oauthprovider.NotFoundError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewAuthorizeNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "unauthorized":
			var res *oauthprovider.UnauthorizedError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewAuthorizeUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeTokenResponse returns an encoder for responses returned by the
// oauth_provider token endpoint.
func EncodeTokenResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*oauthprovider.TokenResult)
		enc := encoder(ctx, w)
		body := NewTokenResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeTokenRequest returns a decoder for requests sent to the oauth_provider
// token endpoint.
func DecodeTokenRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			grantType    string
			code         *string
			redirectURI  *string
			clientID     *string
			clientSecret *string
			refreshToken *string
			codeVerifier *string
			username     *string
			password     *string
			scope        *string
			oauth2       *string
			xAPIKey      *string
			jwt          *string
			err          error
		)
		qp := r.URL.Query()
		grantType = qp.Get("grant_type")
		if grantType == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("grant_type", "query string"))
		}
		codeRaw := qp.Get("code")
		if codeRaw != "" {
			code = &codeRaw
		}
		redirectURIRaw := qp.Get("redirect_uri")
		if redirectURIRaw != "" {
			redirectURI = &redirectURIRaw
		}
		clientIDRaw := qp.Get("client_id")
		if clientIDRaw != "" {
			clientID = &clientIDRaw
		}
		clientSecretRaw := qp.Get("client_secret")
		if clientSecretRaw != "" {
			clientSecret = &clientSecretRaw
		}
		refreshTokenRaw := qp.Get("refresh_token")
		if refreshTokenRaw != "" {
			refreshToken = &refreshTokenRaw
		}
		codeVerifierRaw := qp.Get("code_verifier")
		if codeVerifierRaw != "" {
			codeVerifier = &codeVerifierRaw
		}
		usernameRaw := qp.Get("username")
		if usernameRaw != "" {
			username = &usernameRaw
		}
		passwordRaw := qp.Get("password")
		if passwordRaw != "" {
			password = &passwordRaw
		}
		scopeRaw := qp.Get("scope")
		if scopeRaw != "" {
			scope = &scopeRaw
		}
		oauth2Raw := r.Header.Get("Authorization")
		if oauth2Raw != "" {
			oauth2 = &oauth2Raw
		}
		xAPIKeyRaw := r.Header.Get("Authorization")
		if xAPIKeyRaw != "" {
			xAPIKey = &xAPIKeyRaw
		}
		jwtRaw := r.Header.Get("Authorization")
		if jwtRaw != "" {
			jwt = &jwtRaw
		}
		if err != nil {
			return nil, err
		}
		payload := NewTokenPayload(grantType, code, redirectURI, clientID, clientSecret, refreshToken, codeVerifier, username, password, scope, oauth2, xAPIKey, jwt)
		if payload.Oauth2 != nil {
			if strings.Contains(*payload.Oauth2, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.Oauth2, " ", 2)[1]
				payload.Oauth2 = &cred
			}
		}
		if payload.XAPIKey != nil {
			if strings.Contains(*payload.XAPIKey, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.XAPIKey, " ", 2)[1]
				payload.XAPIKey = &cred
			}
		}
		if payload.JWT != nil {
			if strings.Contains(*payload.JWT, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.JWT, " ", 2)[1]
				payload.JWT = &cred
			}
		}

		return payload, nil
	}
}

// EncodeTokenError returns an encoder for errors returned by the token
// oauth_provider endpoint.
func EncodeTokenError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "bad_request":
			var res *oauthprovider.BadRequestError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewTokenBadRequestResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "conflict":
			var res *oauthprovider.ConflictError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewTokenConflictResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusConflict)
			return enc.Encode(body)
		case "forbidden":
			var res *oauthprovider.ForbiddenError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewTokenForbiddenResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusForbidden)
			return enc.Encode(body)
		case "internal_error":
			var res *oauthprovider.InternalServerError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewTokenInternalErrorResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "not_found":
			var res *oauthprovider.NotFoundError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewTokenNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "unauthorized":
			var res *oauthprovider.UnauthorizedError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewTokenUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeIntrospectResponse returns an encoder for responses returned by the
// oauth_provider introspect endpoint.
func EncodeIntrospectResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*oauthprovider.IntrospectResult)
		enc := encoder(ctx, w)
		body := NewIntrospectResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeIntrospectRequest returns a decoder for requests sent to the
// oauth_provider introspect endpoint.
func DecodeIntrospectRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			token         string
			tokenTypeHint *string
			oauth2        *string
			xAPIKey       *string
			jwt           *string
			err           error
		)
		qp := r.URL.Query()
		token = qp.Get("token")
		if token == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("token", "query string"))
		}
		tokenTypeHintRaw := qp.Get("token_type_hint")
		if tokenTypeHintRaw != "" {
			tokenTypeHint = &tokenTypeHintRaw
		}
		oauth2Raw := r.Header.Get("Authorization")
		if oauth2Raw != "" {
			oauth2 = &oauth2Raw
		}
		xAPIKeyRaw := r.Header.Get("Authorization")
		if xAPIKeyRaw != "" {
			xAPIKey = &xAPIKeyRaw
		}
		jwtRaw := r.Header.Get("Authorization")
		if jwtRaw != "" {
			jwt = &jwtRaw
		}
		if err != nil {
			return nil, err
		}
		payload := NewIntrospectPayload(token, tokenTypeHint, oauth2, xAPIKey, jwt)
		if payload.Oauth2 != nil {
			if strings.Contains(*payload.Oauth2, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.Oauth2, " ", 2)[1]
				payload.Oauth2 = &cred
			}
		}
		if payload.XAPIKey != nil {
			if strings.Contains(*payload.XAPIKey, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.XAPIKey, " ", 2)[1]
				payload.XAPIKey = &cred
			}
		}
		if payload.JWT != nil {
			if strings.Contains(*payload.JWT, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.JWT, " ", 2)[1]
				payload.JWT = &cred
			}
		}

		return payload, nil
	}
}

// EncodeIntrospectError returns an encoder for errors returned by the
// introspect oauth_provider endpoint.
func EncodeIntrospectError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "bad_request":
			var res *oauthprovider.BadRequestError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewIntrospectBadRequestResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "conflict":
			var res *oauthprovider.ConflictError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewIntrospectConflictResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusConflict)
			return enc.Encode(body)
		case "forbidden":
			var res *oauthprovider.ForbiddenError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewIntrospectForbiddenResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusForbidden)
			return enc.Encode(body)
		case "internal_error":
			var res *oauthprovider.InternalServerError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewIntrospectInternalErrorResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "not_found":
			var res *oauthprovider.NotFoundError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewIntrospectNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "unauthorized":
			var res *oauthprovider.UnauthorizedError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewIntrospectUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeRevokeResponse returns an encoder for responses returned by the
// oauth_provider revoke endpoint.
func EncodeRevokeResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		w.WriteHeader(http.StatusOK)
		return nil
	}
}

// DecodeRevokeRequest returns a decoder for requests sent to the
// oauth_provider revoke endpoint.
func DecodeRevokeRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			token         string
			tokenTypeHint *string
			clientID      *string
			clientSecret  *string
			oauth2        *string
			xAPIKey       *string
			jwt           *string
			err           error
		)
		qp := r.URL.Query()
		token = qp.Get("token")
		if token == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("token", "query string"))
		}
		tokenTypeHintRaw := qp.Get("token_type_hint")
		if tokenTypeHintRaw != "" {
			tokenTypeHint = &tokenTypeHintRaw
		}
		clientIDRaw := qp.Get("client_id")
		if clientIDRaw != "" {
			clientID = &clientIDRaw
		}
		clientSecretRaw := qp.Get("client_secret")
		if clientSecretRaw != "" {
			clientSecret = &clientSecretRaw
		}
		oauth2Raw := r.Header.Get("Authorization")
		if oauth2Raw != "" {
			oauth2 = &oauth2Raw
		}
		xAPIKeyRaw := r.Header.Get("Authorization")
		if xAPIKeyRaw != "" {
			xAPIKey = &xAPIKeyRaw
		}
		jwtRaw := r.Header.Get("Authorization")
		if jwtRaw != "" {
			jwt = &jwtRaw
		}
		if err != nil {
			return nil, err
		}
		payload := NewRevokePayload(token, tokenTypeHint, clientID, clientSecret, oauth2, xAPIKey, jwt)
		if payload.Oauth2 != nil {
			if strings.Contains(*payload.Oauth2, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.Oauth2, " ", 2)[1]
				payload.Oauth2 = &cred
			}
		}
		if payload.XAPIKey != nil {
			if strings.Contains(*payload.XAPIKey, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.XAPIKey, " ", 2)[1]
				payload.XAPIKey = &cred
			}
		}
		if payload.JWT != nil {
			if strings.Contains(*payload.JWT, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.JWT, " ", 2)[1]
				payload.JWT = &cred
			}
		}

		return payload, nil
	}
}

// EncodeRevokeError returns an encoder for errors returned by the revoke
// oauth_provider endpoint.
func EncodeRevokeError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "bad_request":
			var res *oauthprovider.BadRequestError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewRevokeBadRequestResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "conflict":
			var res *oauthprovider.ConflictError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewRevokeConflictResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusConflict)
			return enc.Encode(body)
		case "forbidden":
			var res *oauthprovider.ForbiddenError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewRevokeForbiddenResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusForbidden)
			return enc.Encode(body)
		case "internal_error":
			var res *oauthprovider.InternalServerError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewRevokeInternalErrorResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "not_found":
			var res *oauthprovider.NotFoundError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewRevokeNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "unauthorized":
			var res *oauthprovider.UnauthorizedError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewRevokeUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// DecodeConsentRequest returns a decoder for requests sent to the
// oauth_provider consent endpoint.
func DecodeConsentRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body ConsentRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			var gerr *goa.ServiceError
			if errors.As(err, &gerr) {
				return nil, gerr
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateConsentRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			jwt *string
		)
		jwtRaw := r.Header.Get("Authorization")
		if jwtRaw != "" {
			jwt = &jwtRaw
		}
		payload := NewConsentPayload(&body, jwt)
		if payload.JWT != nil {
			if strings.Contains(*payload.JWT, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.JWT, " ", 2)[1]
				payload.JWT = &cred
			}
		}

		return payload, nil
	}
}

// EncodeConsentError returns an encoder for errors returned by the consent
// oauth_provider endpoint.
func EncodeConsentError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "bad_request":
			var res *oauthprovider.BadRequestError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewConsentBadRequestResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "conflict":
			var res *oauthprovider.ConflictError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewConsentConflictResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusConflict)
			return enc.Encode(body)
		case "forbidden":
			var res *oauthprovider.ForbiddenError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewConsentForbiddenResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusForbidden)
			return enc.Encode(body)
		case "internal_error":
			var res *oauthprovider.InternalServerError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewConsentInternalErrorResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "not_found":
			var res *oauthprovider.NotFoundError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewConsentNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "unauthorized":
			var res *oauthprovider.UnauthorizedError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewConsentUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeUserinfoResponse returns an encoder for responses returned by the
// oauth_provider userinfo endpoint.
func EncodeUserinfoResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*oauthprovider.UserinfoResult)
		enc := encoder(ctx, w)
		body := NewUserinfoResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeUserinfoRequest returns a decoder for requests sent to the
// oauth_provider userinfo endpoint.
func DecodeUserinfoRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			jwt *string
		)
		jwtRaw := r.Header.Get("Authorization")
		if jwtRaw != "" {
			jwt = &jwtRaw
		}
		payload := NewUserinfoPayload(jwt)
		if payload.JWT != nil {
			if strings.Contains(*payload.JWT, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.JWT, " ", 2)[1]
				payload.JWT = &cred
			}
		}

		return payload, nil
	}
}

// EncodeUserinfoError returns an encoder for errors returned by the userinfo
// oauth_provider endpoint.
func EncodeUserinfoError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "bad_request":
			var res *oauthprovider.BadRequestError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewUserinfoBadRequestResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "conflict":
			var res *oauthprovider.ConflictError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewUserinfoConflictResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusConflict)
			return enc.Encode(body)
		case "forbidden":
			var res *oauthprovider.ForbiddenError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewUserinfoForbiddenResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusForbidden)
			return enc.Encode(body)
		case "internal_error":
			var res *oauthprovider.InternalServerError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewUserinfoInternalErrorResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "not_found":
			var res *oauthprovider.NotFoundError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewUserinfoNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "unauthorized":
			var res *oauthprovider.UnauthorizedError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewUserinfoUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeListClientsResponse returns an encoder for responses returned by the
// oauth_provider list_clients endpoint.
func EncodeListClientsResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*oauthprovider.ListClientsResult)
		enc := encoder(ctx, w)
		body := NewListClientsResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeListClientsRequest returns a decoder for requests sent to the
// oauth_provider list_clients endpoint.
func DecodeListClientsRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			offset         int
			limit          int
			organizationID *string
			jwt            *string
			err            error
		)
		qp := r.URL.Query()
		{
			offsetRaw := qp.Get("offset")
			if offsetRaw != "" {
				v, err2 := strconv.ParseInt(offsetRaw, 10, strconv.IntSize)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("offset", offsetRaw, "integer"))
				}
				offset = int(v)
			}
		}
		if offset < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("offset", offset, 0, true))
		}
		{
			limitRaw := qp.Get("limit")
			if limitRaw == "" {
				limit = 20
			} else {
				v, err2 := strconv.ParseInt(limitRaw, 10, strconv.IntSize)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("limit", limitRaw, "integer"))
				}
				limit = int(v)
			}
		}
		if limit < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("limit", limit, 1, true))
		}
		if limit > 100 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("limit", limit, 100, false))
		}
		organizationIDRaw := qp.Get("organization_id")
		if organizationIDRaw != "" {
			organizationID = &organizationIDRaw
		}
		jwtRaw := r.Header.Get("Authorization")
		if jwtRaw != "" {
			jwt = &jwtRaw
		}
		if err != nil {
			return nil, err
		}
		payload := NewListClientsPayload(offset, limit, organizationID, jwt)
		if payload.JWT != nil {
			if strings.Contains(*payload.JWT, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.JWT, " ", 2)[1]
				payload.JWT = &cred
			}
		}

		return payload, nil
	}
}

// EncodeListClientsError returns an encoder for errors returned by the
// list_clients oauth_provider endpoint.
func EncodeListClientsError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "bad_request":
			var res *oauthprovider.BadRequestError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewListClientsBadRequestResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "conflict":
			var res *oauthprovider.ConflictError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewListClientsConflictResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusConflict)
			return enc.Encode(body)
		case "forbidden":
			var res *oauthprovider.ForbiddenError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewListClientsForbiddenResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusForbidden)
			return enc.Encode(body)
		case "internal_error":
			var res *oauthprovider.InternalServerError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewListClientsInternalErrorResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "not_found":
			var res *oauthprovider.NotFoundError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewListClientsNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "unauthorized":
			var res *oauthprovider.UnauthorizedError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewListClientsUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeCreateClientResponse returns an encoder for responses returned by the
// oauth_provider create_client endpoint.
func EncodeCreateClientResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*oauthprovider.OAuthClientWithSecretResponse)
		enc := encoder(ctx, w)
		body := NewCreateClientResponseBody(res)
		w.WriteHeader(http.StatusCreated)
		return enc.Encode(body)
	}
}

// DecodeCreateClientRequest returns a decoder for requests sent to the
// oauth_provider create_client endpoint.
func DecodeCreateClientRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body CreateClientRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			var gerr *goa.ServiceError
			if errors.As(err, &gerr) {
				return nil, gerr
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateCreateClientRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			jwt *string
		)
		jwtRaw := r.Header.Get("Authorization")
		if jwtRaw != "" {
			jwt = &jwtRaw
		}
		payload := NewCreateClientPayload(&body, jwt)
		if payload.JWT != nil {
			if strings.Contains(*payload.JWT, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.JWT, " ", 2)[1]
				payload.JWT = &cred
			}
		}

		return payload, nil
	}
}

// EncodeCreateClientError returns an encoder for errors returned by the
// create_client oauth_provider endpoint.
func EncodeCreateClientError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "bad_request":
			var res *oauthprovider.BadRequestError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewCreateClientBadRequestResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "conflict":
			var res *oauthprovider.ConflictError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewCreateClientConflictResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusConflict)
			return enc.Encode(body)
		case "forbidden":
			var res *oauthprovider.ForbiddenError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewCreateClientForbiddenResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusForbidden)
			return enc.Encode(body)
		case "internal_error":
			var res *oauthprovider.InternalServerError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewCreateClientInternalErrorResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "not_found":
			var res *oauthprovider.NotFoundError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewCreateClientNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "unauthorized":
			var res *oauthprovider.UnauthorizedError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewCreateClientUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeGetClientResponse returns an encoder for responses returned by the
// oauth_provider get_client endpoint.
func EncodeGetClientResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*oauthprovider.OAuthClientResponse)
		enc := encoder(ctx, w)
		body := NewGetClientResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetClientRequest returns a decoder for requests sent to the
// oauth_provider get_client endpoint.
func DecodeGetClientRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			id  string
			jwt *string

			params = mux.Vars(r)
		)
		id = params["id"]
		jwtRaw := r.Header.Get("Authorization")
		if jwtRaw != "" {
			jwt = &jwtRaw
		}
		payload := NewGetClientPayload(id, jwt)
		if payload.JWT != nil {
			if strings.Contains(*payload.JWT, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.JWT, " ", 2)[1]
				payload.JWT = &cred
			}
		}

		return payload, nil
	}
}

// EncodeGetClientError returns an encoder for errors returned by the
// get_client oauth_provider endpoint.
func EncodeGetClientError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "bad_request":
			var res *oauthprovider.BadRequestError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewGetClientBadRequestResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "conflict":
			var res *oauthprovider.ConflictError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewGetClientConflictResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusConflict)
			return enc.Encode(body)
		case "forbidden":
			var res *oauthprovider.ForbiddenError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewGetClientForbiddenResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusForbidden)
			return enc.Encode(body)
		case "internal_error":
			var res *oauthprovider.InternalServerError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewGetClientInternalErrorResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "not_found":
			var res *oauthprovider.NotFoundError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewGetClientNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "unauthorized":
			var res *oauthprovider.UnauthorizedError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewGetClientUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeUpdateClientResponse returns an encoder for responses returned by the
// oauth_provider update_client endpoint.
func EncodeUpdateClientResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*oauthprovider.OAuthClientResponse)
		enc := encoder(ctx, w)
		body := NewUpdateClientResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeUpdateClientRequest returns a decoder for requests sent to the
// oauth_provider update_client endpoint.
func DecodeUpdateClientRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body UpdateClientRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			var gerr *goa.ServiceError
			if errors.As(err, &gerr) {
				return nil, gerr
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateUpdateClientRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			id  string
			jwt *string

			params = mux.Vars(r)
		)
		id = params["id"]
		jwtRaw := r.Header.Get("Authorization")
		if jwtRaw != "" {
			jwt = &jwtRaw
		}
		payload := NewUpdateClientPayload(&body, id, jwt)
		if payload.JWT != nil {
			if strings.Contains(*payload.JWT, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.JWT, " ", 2)[1]
				payload.JWT = &cred
			}
		}

		return payload, nil
	}
}

// EncodeUpdateClientError returns an encoder for errors returned by the
// update_client oauth_provider endpoint.
func EncodeUpdateClientError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "bad_request":
			var res *oauthprovider.BadRequestError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewUpdateClientBadRequestResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "conflict":
			var res *oauthprovider.ConflictError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewUpdateClientConflictResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusConflict)
			return enc.Encode(body)
		case "forbidden":
			var res *oauthprovider.ForbiddenError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewUpdateClientForbiddenResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusForbidden)
			return enc.Encode(body)
		case "internal_error":
			var res *oauthprovider.InternalServerError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewUpdateClientInternalErrorResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "not_found":
			var res *oauthprovider.NotFoundError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewUpdateClientNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "unauthorized":
			var res *oauthprovider.UnauthorizedError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewUpdateClientUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeDeleteClientResponse returns an encoder for responses returned by the
// oauth_provider delete_client endpoint.
func EncodeDeleteClientResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		w.WriteHeader(http.StatusNoContent)
		return nil
	}
}

// DecodeDeleteClientRequest returns a decoder for requests sent to the
// oauth_provider delete_client endpoint.
func DecodeDeleteClientRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			id  string
			jwt *string

			params = mux.Vars(r)
		)
		id = params["id"]
		jwtRaw := r.Header.Get("Authorization")
		if jwtRaw != "" {
			jwt = &jwtRaw
		}
		payload := NewDeleteClientPayload(id, jwt)
		if payload.JWT != nil {
			if strings.Contains(*payload.JWT, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.JWT, " ", 2)[1]
				payload.JWT = &cred
			}
		}

		return payload, nil
	}
}

// EncodeDeleteClientError returns an encoder for errors returned by the
// delete_client oauth_provider endpoint.
func EncodeDeleteClientError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "bad_request":
			var res *oauthprovider.BadRequestError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewDeleteClientBadRequestResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "conflict":
			var res *oauthprovider.ConflictError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewDeleteClientConflictResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusConflict)
			return enc.Encode(body)
		case "forbidden":
			var res *oauthprovider.ForbiddenError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewDeleteClientForbiddenResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusForbidden)
			return enc.Encode(body)
		case "internal_error":
			var res *oauthprovider.InternalServerError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewDeleteClientInternalErrorResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "not_found":
			var res *oauthprovider.NotFoundError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewDeleteClientNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "unauthorized":
			var res *oauthprovider.UnauthorizedError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewDeleteClientUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeRotateClientSecretResponse returns an encoder for responses returned
// by the oauth_provider rotate_client_secret endpoint.
func EncodeRotateClientSecretResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*oauthprovider.RotateClientSecretResult)
		enc := encoder(ctx, w)
		body := NewRotateClientSecretResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeRotateClientSecretRequest returns a decoder for requests sent to the
// oauth_provider rotate_client_secret endpoint.
func DecodeRotateClientSecretRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			id  string
			jwt *string

			params = mux.Vars(r)
		)
		id = params["id"]
		jwtRaw := r.Header.Get("Authorization")
		if jwtRaw != "" {
			jwt = &jwtRaw
		}
		payload := NewRotateClientSecretPayload(id, jwt)
		if payload.JWT != nil {
			if strings.Contains(*payload.JWT, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.JWT, " ", 2)[1]
				payload.JWT = &cred
			}
		}

		return payload, nil
	}
}

// EncodeRotateClientSecretError returns an encoder for errors returned by the
// rotate_client_secret oauth_provider endpoint.
func EncodeRotateClientSecretError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "bad_request":
			var res *oauthprovider.BadRequestError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewRotateClientSecretBadRequestResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "conflict":
			var res *oauthprovider.ConflictError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewRotateClientSecretConflictResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusConflict)
			return enc.Encode(body)
		case "forbidden":
			var res *oauthprovider.ForbiddenError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewRotateClientSecretForbiddenResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusForbidden)
			return enc.Encode(body)
		case "internal_error":
			var res *oauthprovider.InternalServerError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewRotateClientSecretInternalErrorResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "not_found":
			var res *oauthprovider.NotFoundError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewRotateClientSecretNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "unauthorized":
			var res *oauthprovider.UnauthorizedError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewRotateClientSecretUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeListScopesResponse returns an encoder for responses returned by the
// oauth_provider list_scopes endpoint.
func EncodeListScopesResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*oauthprovider.ListScopesResult)
		enc := encoder(ctx, w)
		body := NewListScopesResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeListScopesRequest returns a decoder for requests sent to the
// oauth_provider list_scopes endpoint.
func DecodeListScopesRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			offset int
			limit  int
			jwt    *string
			err    error
		)
		qp := r.URL.Query()
		{
			offsetRaw := qp.Get("offset")
			if offsetRaw != "" {
				v, err2 := strconv.ParseInt(offsetRaw, 10, strconv.IntSize)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("offset", offsetRaw, "integer"))
				}
				offset = int(v)
			}
		}
		if offset < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("offset", offset, 0, true))
		}
		{
			limitRaw := qp.Get("limit")
			if limitRaw == "" {
				limit = 20
			} else {
				v, err2 := strconv.ParseInt(limitRaw, 10, strconv.IntSize)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("limit", limitRaw, "integer"))
				}
				limit = int(v)
			}
		}
		if limit < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("limit", limit, 1, true))
		}
		if limit > 100 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("limit", limit, 100, false))
		}
		jwtRaw := r.Header.Get("Authorization")
		if jwtRaw != "" {
			jwt = &jwtRaw
		}
		if err != nil {
			return nil, err
		}
		payload := NewListScopesPayload(offset, limit, jwt)
		if payload.JWT != nil {
			if strings.Contains(*payload.JWT, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.JWT, " ", 2)[1]
				payload.JWT = &cred
			}
		}

		return payload, nil
	}
}

// EncodeListScopesError returns an encoder for errors returned by the
// list_scopes oauth_provider endpoint.
func EncodeListScopesError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "bad_request":
			var res *oauthprovider.BadRequestError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewListScopesBadRequestResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "conflict":
			var res *oauthprovider.ConflictError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewListScopesConflictResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusConflict)
			return enc.Encode(body)
		case "forbidden":
			var res *oauthprovider.ForbiddenError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewListScopesForbiddenResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusForbidden)
			return enc.Encode(body)
		case "internal_error":
			var res *oauthprovider.InternalServerError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewListScopesInternalErrorResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "not_found":
			var res *oauthprovider.NotFoundError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewListScopesNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "unauthorized":
			var res *oauthprovider.UnauthorizedError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewListScopesUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeCreateScopeResponse returns an encoder for responses returned by the
// oauth_provider create_scope endpoint.
func EncodeCreateScopeResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*oauthprovider.OAuthScopeResponse)
		enc := encoder(ctx, w)
		body := NewCreateScopeResponseBody(res)
		w.WriteHeader(http.StatusCreated)
		return enc.Encode(body)
	}
}

// DecodeCreateScopeRequest returns a decoder for requests sent to the
// oauth_provider create_scope endpoint.
func DecodeCreateScopeRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body CreateScopeRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			var gerr *goa.ServiceError
			if errors.As(err, &gerr) {
				return nil, gerr
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateCreateScopeRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			jwt *string
		)
		jwtRaw := r.Header.Get("Authorization")
		if jwtRaw != "" {
			jwt = &jwtRaw
		}
		payload := NewCreateScopePayload(&body, jwt)
		if payload.JWT != nil {
			if strings.Contains(*payload.JWT, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.JWT, " ", 2)[1]
				payload.JWT = &cred
			}
		}

		return payload, nil
	}
}

// EncodeCreateScopeError returns an encoder for errors returned by the
// create_scope oauth_provider endpoint.
func EncodeCreateScopeError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "bad_request":
			var res *oauthprovider.BadRequestError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewCreateScopeBadRequestResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "conflict":
			var res *oauthprovider.ConflictError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewCreateScopeConflictResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusConflict)
			return enc.Encode(body)
		case "forbidden":
			var res *oauthprovider.ForbiddenError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewCreateScopeForbiddenResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusForbidden)
			return enc.Encode(body)
		case "internal_error":
			var res *oauthprovider.InternalServerError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewCreateScopeInternalErrorResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "not_found":
			var res *oauthprovider.NotFoundError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewCreateScopeNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "unauthorized":
			var res *oauthprovider.UnauthorizedError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewCreateScopeUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeGetScopeResponse returns an encoder for responses returned by the
// oauth_provider get_scope endpoint.
func EncodeGetScopeResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*oauthprovider.OAuthScopeResponse)
		enc := encoder(ctx, w)
		body := NewGetScopeResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetScopeRequest returns a decoder for requests sent to the
// oauth_provider get_scope endpoint.
func DecodeGetScopeRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			id  string
			jwt *string

			params = mux.Vars(r)
		)
		id = params["id"]
		jwtRaw := r.Header.Get("Authorization")
		if jwtRaw != "" {
			jwt = &jwtRaw
		}
		payload := NewGetScopePayload(id, jwt)
		if payload.JWT != nil {
			if strings.Contains(*payload.JWT, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.JWT, " ", 2)[1]
				payload.JWT = &cred
			}
		}

		return payload, nil
	}
}

// EncodeGetScopeError returns an encoder for errors returned by the get_scope
// oauth_provider endpoint.
func EncodeGetScopeError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "bad_request":
			var res *oauthprovider.BadRequestError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewGetScopeBadRequestResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "conflict":
			var res *oauthprovider.ConflictError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewGetScopeConflictResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusConflict)
			return enc.Encode(body)
		case "forbidden":
			var res *oauthprovider.ForbiddenError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewGetScopeForbiddenResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusForbidden)
			return enc.Encode(body)
		case "internal_error":
			var res *oauthprovider.InternalServerError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewGetScopeInternalErrorResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "not_found":
			var res *oauthprovider.NotFoundError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewGetScopeNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "unauthorized":
			var res *oauthprovider.UnauthorizedError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewGetScopeUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeUpdateScopeResponse returns an encoder for responses returned by the
// oauth_provider update_scope endpoint.
func EncodeUpdateScopeResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*oauthprovider.OAuthScopeResponse)
		enc := encoder(ctx, w)
		body := NewUpdateScopeResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeUpdateScopeRequest returns a decoder for requests sent to the
// oauth_provider update_scope endpoint.
func DecodeUpdateScopeRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body UpdateScopeRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			var gerr *goa.ServiceError
			if errors.As(err, &gerr) {
				return nil, gerr
			}
			return nil, goa.DecodePayloadError(err.Error())
		}

		var (
			id  string
			jwt *string

			params = mux.Vars(r)
		)
		id = params["id"]
		jwtRaw := r.Header.Get("Authorization")
		if jwtRaw != "" {
			jwt = &jwtRaw
		}
		payload := NewUpdateScopePayload(&body, id, jwt)
		if payload.JWT != nil {
			if strings.Contains(*payload.JWT, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.JWT, " ", 2)[1]
				payload.JWT = &cred
			}
		}

		return payload, nil
	}
}

// EncodeUpdateScopeError returns an encoder for errors returned by the
// update_scope oauth_provider endpoint.
func EncodeUpdateScopeError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "bad_request":
			var res *oauthprovider.BadRequestError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewUpdateScopeBadRequestResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "conflict":
			var res *oauthprovider.ConflictError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewUpdateScopeConflictResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusConflict)
			return enc.Encode(body)
		case "forbidden":
			var res *oauthprovider.ForbiddenError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewUpdateScopeForbiddenResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusForbidden)
			return enc.Encode(body)
		case "internal_error":
			var res *oauthprovider.InternalServerError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewUpdateScopeInternalErrorResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "not_found":
			var res *oauthprovider.NotFoundError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewUpdateScopeNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "unauthorized":
			var res *oauthprovider.UnauthorizedError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewUpdateScopeUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeDeleteScopeResponse returns an encoder for responses returned by the
// oauth_provider delete_scope endpoint.
func EncodeDeleteScopeResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		w.WriteHeader(http.StatusNoContent)
		return nil
	}
}

// DecodeDeleteScopeRequest returns a decoder for requests sent to the
// oauth_provider delete_scope endpoint.
func DecodeDeleteScopeRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			id  string
			jwt *string

			params = mux.Vars(r)
		)
		id = params["id"]
		jwtRaw := r.Header.Get("Authorization")
		if jwtRaw != "" {
			jwt = &jwtRaw
		}
		payload := NewDeleteScopePayload(id, jwt)
		if payload.JWT != nil {
			if strings.Contains(*payload.JWT, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.JWT, " ", 2)[1]
				payload.JWT = &cred
			}
		}

		return payload, nil
	}
}

// EncodeDeleteScopeError returns an encoder for errors returned by the
// delete_scope oauth_provider endpoint.
func EncodeDeleteScopeError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "bad_request":
			var res *oauthprovider.BadRequestError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewDeleteScopeBadRequestResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "conflict":
			var res *oauthprovider.ConflictError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewDeleteScopeConflictResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusConflict)
			return enc.Encode(body)
		case "forbidden":
			var res *oauthprovider.ForbiddenError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewDeleteScopeForbiddenResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusForbidden)
			return enc.Encode(body)
		case "internal_error":
			var res *oauthprovider.InternalServerError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewDeleteScopeInternalErrorResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "not_found":
			var res *oauthprovider.NotFoundError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewDeleteScopeNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "unauthorized":
			var res *oauthprovider.UnauthorizedError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewDeleteScopeUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeOidcConfigurationResponse returns an encoder for responses returned by
// the oauth_provider oidc_configuration endpoint.
func EncodeOidcConfigurationResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*oauthprovider.OidcConfigurationResult)
		enc := encoder(ctx, w)
		body := NewOidcConfigurationResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// EncodeOidcConfigurationError returns an encoder for errors returned by the
// oidc_configuration oauth_provider endpoint.
func EncodeOidcConfigurationError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "bad_request":
			var res *oauthprovider.BadRequestError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewOidcConfigurationBadRequestResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "conflict":
			var res *oauthprovider.ConflictError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewOidcConfigurationConflictResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusConflict)
			return enc.Encode(body)
		case "forbidden":
			var res *oauthprovider.ForbiddenError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewOidcConfigurationForbiddenResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusForbidden)
			return enc.Encode(body)
		case "internal_error":
			var res *oauthprovider.InternalServerError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewOidcConfigurationInternalErrorResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "not_found":
			var res *oauthprovider.NotFoundError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewOidcConfigurationNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "unauthorized":
			var res *oauthprovider.UnauthorizedError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewOidcConfigurationUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeJwksResponse returns an encoder for responses returned by the
// oauth_provider jwks endpoint.
func EncodeJwksResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*oauthprovider.JwksResult)
		enc := encoder(ctx, w)
		body := NewJwksResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// EncodeJwksError returns an encoder for errors returned by the jwks
// oauth_provider endpoint.
func EncodeJwksError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "bad_request":
			var res *oauthprovider.BadRequestError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewJwksBadRequestResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "conflict":
			var res *oauthprovider.ConflictError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewJwksConflictResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusConflict)
			return enc.Encode(body)
		case "forbidden":
			var res *oauthprovider.ForbiddenError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewJwksForbiddenResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusForbidden)
			return enc.Encode(body)
		case "internal_error":
			var res *oauthprovider.InternalServerError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewJwksInternalErrorResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "not_found":
			var res *oauthprovider.NotFoundError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewJwksNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "unauthorized":
			var res *oauthprovider.UnauthorizedError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewJwksUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// marshalOauthproviderOAuthClientResponseToOAuthClientResponseResponseBody
// builds a value of type *OAuthClientResponseResponseBody from a value of type
// *oauthprovider.OAuthClientResponse.
func marshalOauthproviderOAuthClientResponseToOAuthClientResponseResponseBody(v *oauthprovider.OAuthClientResponse) *OAuthClientResponseResponseBody {
	res := &OAuthClientResponseResponseBody{
		ID:                        v.ID,
		ClientID:                  v.ClientID,
		ClientName:                v.ClientName,
		ClientDescription:         v.ClientDescription,
		ClientURI:                 v.ClientURI,
		LogoURI:                   v.LogoURI,
		Public:                    v.Public,
		Active:                    v.Active,
		OrganizationID:            v.OrganizationID,
		TokenExpirySeconds:        v.TokenExpirySeconds,
		RefreshTokenExpirySeconds: v.RefreshTokenExpirySeconds,
		RequiresPkce:              v.RequiresPkce,
		RequiresConsent:           v.RequiresConsent,
		CreatedAt:                 v.CreatedAt,
		UpdatedAt:                 v.UpdatedAt,
	}
	if v.RedirectUris != nil {
		res.RedirectUris = make([]string, len(v.RedirectUris))
		for i, val := range v.RedirectUris {
			res.RedirectUris[i] = val
		}
	} else {
		res.RedirectUris = []string{}
	}
	if v.PostLogoutRedirectUris != nil {
		res.PostLogoutRedirectUris = make([]string, len(v.PostLogoutRedirectUris))
		for i, val := range v.PostLogoutRedirectUris {
			res.PostLogoutRedirectUris[i] = val
		}
	}
	if v.AllowedCorsOrigins != nil {
		res.AllowedCorsOrigins = make([]string, len(v.AllowedCorsOrigins))
		for i, val := range v.AllowedCorsOrigins {
			res.AllowedCorsOrigins[i] = val
		}
	}
	if v.AllowedGrantTypes != nil {
		res.AllowedGrantTypes = make([]string, len(v.AllowedGrantTypes))
		for i, val := range v.AllowedGrantTypes {
			res.AllowedGrantTypes[i] = val
		}
	} else {
		res.AllowedGrantTypes = []string{}
	}

	return res
}

// marshalDesigntypesPaginationResponseToPaginationResponseResponseBody builds
// a value of type *PaginationResponseResponseBody from a value of type
// *designtypes.PaginationResponse.
func marshalDesigntypesPaginationResponseToPaginationResponseResponseBody(v *designtypes.PaginationResponse) *PaginationResponseResponseBody {
	res := &PaginationResponseResponseBody{
		Total:  v.Total,
		Offset: v.Offset,
		Limit:  v.Limit,
	}

	return res
}

// unmarshalUpdateOAuthClientRequestRequestBodyToOauthproviderUpdateOAuthClientRequest
// builds a value of type *oauthprovider.UpdateOAuthClientRequest from a value
// of type *UpdateOAuthClientRequestRequestBody.
func unmarshalUpdateOAuthClientRequestRequestBodyToOauthproviderUpdateOAuthClientRequest(v *UpdateOAuthClientRequestRequestBody) *oauthprovider.UpdateOAuthClientRequest {
	res := &oauthprovider.UpdateOAuthClientRequest{
		ClientName:                v.ClientName,
		ClientDescription:         v.ClientDescription,
		ClientURI:                 v.ClientURI,
		LogoURI:                   v.LogoURI,
		Public:                    v.Public,
		Active:                    v.Active,
		TokenExpirySeconds:        v.TokenExpirySeconds,
		RefreshTokenExpirySeconds: v.RefreshTokenExpirySeconds,
		RequiresPkce:              v.RequiresPkce,
		RequiresConsent:           v.RequiresConsent,
	}
	if v.RedirectUris != nil {
		res.RedirectUris = make([]string, len(v.RedirectUris))
		for i, val := range v.RedirectUris {
			res.RedirectUris[i] = val
		}
	}
	if v.PostLogoutRedirectUris != nil {
		res.PostLogoutRedirectUris = make([]string, len(v.PostLogoutRedirectUris))
		for i, val := range v.PostLogoutRedirectUris {
			res.PostLogoutRedirectUris[i] = val
		}
	}
	if v.AllowedCorsOrigins != nil {
		res.AllowedCorsOrigins = make([]string, len(v.AllowedCorsOrigins))
		for i, val := range v.AllowedCorsOrigins {
			res.AllowedCorsOrigins[i] = val
		}
	}
	if v.AllowedGrantTypes != nil {
		res.AllowedGrantTypes = make([]string, len(v.AllowedGrantTypes))
		for i, val := range v.AllowedGrantTypes {
			res.AllowedGrantTypes[i] = val
		}
	}

	return res
}

// marshalOauthproviderOAuthScopeResponseToOAuthScopeResponseResponseBody
// builds a value of type *OAuthScopeResponseResponseBody from a value of type
// *oauthprovider.OAuthScopeResponse.
func marshalOauthproviderOAuthScopeResponseToOAuthScopeResponseResponseBody(v *oauthprovider.OAuthScopeResponse) *OAuthScopeResponseResponseBody {
	res := &OAuthScopeResponseResponseBody{
		ID:           v.ID,
		Name:         v.Name,
		Description:  v.Description,
		DefaultScope: v.DefaultScope,
		Public:       v.Public,
	}

	return res
}
