// Code generated by goa v3.20.0, DO NOT EDIT.
//
// oauth_provider HTTP server types
//
// Command:
// $ goa gen github.com/juicycleff/frank/design -o .

package server

import (
	oauthprovider "github.com/juicycleff/frank/gen/oauth_provider"
	goa "goa.design/goa/v3/pkg"
)

// ConsentRequestBody is the type of the "oauth_provider" service "consent"
// endpoint HTTP request body.
type ConsentRequestBody struct {
	// OAuth client ID
	ClientID *string `form:"client_id,omitempty" json:"client_id,omitempty" xml:"client_id,omitempty"`
	// Requested scopes (space-separated)
	Scope *string `form:"scope,omitempty" json:"scope,omitempty" xml:"scope,omitempty"`
	// Redirect URI
	RedirectURI *string `form:"redirect_uri,omitempty" json:"redirect_uri,omitempty" xml:"redirect_uri,omitempty"`
	// OAuth state parameter
	State *string `form:"state,omitempty" json:"state,omitempty" xml:"state,omitempty"`
	// Whether consent is approved
	Approved *bool `form:"approved,omitempty" json:"approved,omitempty" xml:"approved,omitempty"`
}

// CreateClientRequestBody is the type of the "oauth_provider" service
// "create_client" endpoint HTTP request body.
type CreateClientRequestBody struct {
	// Client name
	ClientName *string `form:"client_name,omitempty" json:"client_name,omitempty" xml:"client_name,omitempty"`
	// Client description
	ClientDescription *string `form:"client_description,omitempty" json:"client_description,omitempty" xml:"client_description,omitempty"`
	// Client URI
	ClientURI *string `form:"client_uri,omitempty" json:"client_uri,omitempty" xml:"client_uri,omitempty"`
	// Logo URI
	LogoURI *string `form:"logo_uri,omitempty" json:"logo_uri,omitempty" xml:"logo_uri,omitempty"`
	// Authorized redirect URIs
	RedirectUris []string `form:"redirect_uris,omitempty" json:"redirect_uris,omitempty" xml:"redirect_uris,omitempty"`
	// Authorized post-logout redirect URIs
	PostLogoutRedirectUris []string `form:"post_logout_redirect_uris,omitempty" json:"post_logout_redirect_uris,omitempty" xml:"post_logout_redirect_uris,omitempty"`
	// Allowed CORS origins
	AllowedCorsOrigins []string `form:"allowed_cors_origins,omitempty" json:"allowed_cors_origins,omitempty" xml:"allowed_cors_origins,omitempty"`
	// Allowed grant types
	AllowedGrantTypes []string `form:"allowed_grant_types,omitempty" json:"allowed_grant_types,omitempty" xml:"allowed_grant_types,omitempty"`
	// Whether client is public
	Public *bool `form:"public,omitempty" json:"public,omitempty" xml:"public,omitempty"`
	// Access token expiry in seconds
	TokenExpirySeconds *int `form:"token_expiry_seconds,omitempty" json:"token_expiry_seconds,omitempty" xml:"token_expiry_seconds,omitempty"`
	// Refresh token expiry in seconds
	RefreshTokenExpirySeconds *int `form:"refresh_token_expiry_seconds,omitempty" json:"refresh_token_expiry_seconds,omitempty" xml:"refresh_token_expiry_seconds,omitempty"`
	// Whether PKCE is required
	RequiresPkce *bool `form:"requires_pkce,omitempty" json:"requires_pkce,omitempty" xml:"requires_pkce,omitempty"`
	// Whether user consent is required
	RequiresConsent *bool `form:"requires_consent,omitempty" json:"requires_consent,omitempty" xml:"requires_consent,omitempty"`
}

// UpdateClientRequestBody is the type of the "oauth_provider" service
// "update_client" endpoint HTTP request body.
type UpdateClientRequestBody struct {
	Client *UpdateOAuthClientRequestRequestBody `form:"client,omitempty" json:"client,omitempty" xml:"client,omitempty"`
}

// CreateScopeRequestBody is the type of the "oauth_provider" service
// "create_scope" endpoint HTTP request body.
type CreateScopeRequestBody struct {
	// Scope name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Scope description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Whether this scope is included by default
	DefaultScope *bool `form:"default_scope,omitempty" json:"default_scope,omitempty" xml:"default_scope,omitempty"`
	// Whether this scope can be requested by any client
	Public *bool `form:"public,omitempty" json:"public,omitempty" xml:"public,omitempty"`
}

// UpdateScopeRequestBody is the type of the "oauth_provider" service
// "update_scope" endpoint HTTP request body.
type UpdateScopeRequestBody struct {
	// Scope description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Whether this scope is included by default
	DefaultScope *bool `form:"default_scope,omitempty" json:"default_scope,omitempty" xml:"default_scope,omitempty"`
	// Whether this scope can be requested by any client
	Public *bool `form:"public,omitempty" json:"public,omitempty" xml:"public,omitempty"`
}

// TokenResponseBody is the type of the "oauth_provider" service "token"
// endpoint HTTP response body.
type TokenResponseBody struct {
	// Access token
	AccessToken string `form:"access_token" json:"access_token" xml:"access_token"`
	// Token type
	TokenType string `form:"token_type" json:"token_type" xml:"token_type"`
	// Token expiry in seconds
	ExpiresIn int `form:"expires_in" json:"expires_in" xml:"expires_in"`
	// Refresh token
	RefreshToken *string `form:"refresh_token,omitempty" json:"refresh_token,omitempty" xml:"refresh_token,omitempty"`
	// Granted scopes
	Scope *string `form:"scope,omitempty" json:"scope,omitempty" xml:"scope,omitempty"`
}

// IntrospectResponseBody is the type of the "oauth_provider" service
// "introspect" endpoint HTTP response body.
type IntrospectResponseBody struct {
	// Whether token is active
	Active bool `form:"active" json:"active" xml:"active"`
	// Token scopes
	Scope *string `form:"scope,omitempty" json:"scope,omitempty" xml:"scope,omitempty"`
	// Client ID
	ClientID *string `form:"client_id,omitempty" json:"client_id,omitempty" xml:"client_id,omitempty"`
	// Resource owner username
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// Token type
	TokenType *string `form:"token_type,omitempty" json:"token_type,omitempty" xml:"token_type,omitempty"`
	// Expiry timestamp
	Exp *int `form:"exp,omitempty" json:"exp,omitempty" xml:"exp,omitempty"`
	// Issued at timestamp
	Iat *int `form:"iat,omitempty" json:"iat,omitempty" xml:"iat,omitempty"`
	// Not before timestamp
	Nbf *int `form:"nbf,omitempty" json:"nbf,omitempty" xml:"nbf,omitempty"`
	// Subject (user ID)
	Sub *string `form:"sub,omitempty" json:"sub,omitempty" xml:"sub,omitempty"`
	// Audience
	Aud *string `form:"aud,omitempty" json:"aud,omitempty" xml:"aud,omitempty"`
	// Issuer
	Iss *string `form:"iss,omitempty" json:"iss,omitempty" xml:"iss,omitempty"`
	// JWTAuth ID
	Jti *string `form:"jti,omitempty" json:"jti,omitempty" xml:"jti,omitempty"`
}

// ConsentResponseBody is the type of the "oauth_provider" service "consent"
// endpoint HTTP response body.
type ConsentResponseBody struct {
	// Redirect URI with authorization code
	RedirectURI string `form:"redirect_uri" json:"redirect_uri" xml:"redirect_uri"`
}

// UserinfoResponseBody is the type of the "oauth_provider" service "userinfo"
// endpoint HTTP response body.
type UserinfoResponseBody struct {
	// Subject (user ID)
	Sub string `form:"sub" json:"sub" xml:"sub"`
	// Full name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// First name
	GivenName *string `form:"given_name,omitempty" json:"given_name,omitempty" xml:"given_name,omitempty"`
	// Last name
	FamilyName *string `form:"family_name,omitempty" json:"family_name,omitempty" xml:"family_name,omitempty"`
	// Middle name
	MiddleName *string `form:"middle_name,omitempty" json:"middle_name,omitempty" xml:"middle_name,omitempty"`
	// Nickname
	Nickname *string `form:"nickname,omitempty" json:"nickname,omitempty" xml:"nickname,omitempty"`
	// Preferred username
	PreferredUsername *string `form:"preferred_username,omitempty" json:"preferred_username,omitempty" xml:"preferred_username,omitempty"`
	// Profile URL
	Profile *string `form:"profile,omitempty" json:"profile,omitempty" xml:"profile,omitempty"`
	// Picture URL
	Picture *string `form:"picture,omitempty" json:"picture,omitempty" xml:"picture,omitempty"`
	// Website URL
	Website *string `form:"website,omitempty" json:"website,omitempty" xml:"website,omitempty"`
	// Email address
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// Whether email is verified
	EmailVerified *bool `form:"email_verified,omitempty" json:"email_verified,omitempty" xml:"email_verified,omitempty"`
	// Gender
	Gender *string `form:"gender,omitempty" json:"gender,omitempty" xml:"gender,omitempty"`
	// Birth date
	Birthdate *string `form:"birthdate,omitempty" json:"birthdate,omitempty" xml:"birthdate,omitempty"`
	// Time zone
	Zoneinfo *string `form:"zoneinfo,omitempty" json:"zoneinfo,omitempty" xml:"zoneinfo,omitempty"`
	// Locale
	Locale *string `form:"locale,omitempty" json:"locale,omitempty" xml:"locale,omitempty"`
	// Phone number
	PhoneNumber *string `form:"phone_number,omitempty" json:"phone_number,omitempty" xml:"phone_number,omitempty"`
	// Whether phone number is verified
	PhoneNumberVerified *bool `form:"phone_number_verified,omitempty" json:"phone_number_verified,omitempty" xml:"phone_number_verified,omitempty"`
	// Last update timestamp
	UpdatedAt *int `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// ListClientsResponseBody is the type of the "oauth_provider" service
// "list_clients" endpoint HTTP response body.
type ListClientsResponseBody struct {
	Data       []*OAuthClientResponseResponseBody `form:"data" json:"data" xml:"data"`
	Pagination *PaginationResponseBody            `form:"pagination" json:"pagination" xml:"pagination"`
}

// CreateClientResponseBody is the type of the "oauth_provider" service
// "create_client" endpoint HTTP response body.
type CreateClientResponseBody struct {
	// OAuth client secret
	ClientSecret string `form:"client_secret" json:"client_secret" xml:"client_secret"`
	// Client ID
	ID string `form:"id" json:"id" xml:"id"`
	// OAuth client ID
	ClientID string `form:"client_id" json:"client_id" xml:"client_id"`
	// Client name
	ClientName string `form:"client_name" json:"client_name" xml:"client_name"`
	// Client description
	ClientDescription *string `form:"client_description,omitempty" json:"client_description,omitempty" xml:"client_description,omitempty"`
	// Client URI
	ClientURI *string `form:"client_uri,omitempty" json:"client_uri,omitempty" xml:"client_uri,omitempty"`
	// Logo URI
	LogoURI *string `form:"logo_uri,omitempty" json:"logo_uri,omitempty" xml:"logo_uri,omitempty"`
	// Authorized redirect URIs
	RedirectUris []string `form:"redirect_uris" json:"redirect_uris" xml:"redirect_uris"`
	// Authorized post-logout redirect URIs
	PostLogoutRedirectUris []string `form:"post_logout_redirect_uris,omitempty" json:"post_logout_redirect_uris,omitempty" xml:"post_logout_redirect_uris,omitempty"`
	// Allowed CORS origins
	AllowedCorsOrigins []string `form:"allowed_cors_origins,omitempty" json:"allowed_cors_origins,omitempty" xml:"allowed_cors_origins,omitempty"`
	// Allowed grant types
	AllowedGrantTypes []string `form:"allowed_grant_types" json:"allowed_grant_types" xml:"allowed_grant_types"`
	// Whether client is public
	Public bool `form:"public" json:"public" xml:"public"`
	// Whether client is active
	Active bool `form:"active" json:"active" xml:"active"`
	// Organization ID
	OrganizationID *string `form:"organization_id,omitempty" json:"organization_id,omitempty" xml:"organization_id,omitempty"`
	// Access token expiry in seconds
	TokenExpirySeconds *int `form:"token_expiry_seconds,omitempty" json:"token_expiry_seconds,omitempty" xml:"token_expiry_seconds,omitempty"`
	// Refresh token expiry in seconds
	RefreshTokenExpirySeconds *int `form:"refresh_token_expiry_seconds,omitempty" json:"refresh_token_expiry_seconds,omitempty" xml:"refresh_token_expiry_seconds,omitempty"`
	// Whether PKCE is required
	RequiresPkce *bool `form:"requires_pkce,omitempty" json:"requires_pkce,omitempty" xml:"requires_pkce,omitempty"`
	// Whether user consent is required
	RequiresConsent *bool `form:"requires_consent,omitempty" json:"requires_consent,omitempty" xml:"requires_consent,omitempty"`
	// Creation timestamp
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// Last update timestamp
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// GetClientResponseBody is the type of the "oauth_provider" service
// "get_client" endpoint HTTP response body.
type GetClientResponseBody struct {
	// Client ID
	ID string `form:"id" json:"id" xml:"id"`
	// OAuth client ID
	ClientID string `form:"client_id" json:"client_id" xml:"client_id"`
	// Client name
	ClientName string `form:"client_name" json:"client_name" xml:"client_name"`
	// Client description
	ClientDescription *string `form:"client_description,omitempty" json:"client_description,omitempty" xml:"client_description,omitempty"`
	// Client URI
	ClientURI *string `form:"client_uri,omitempty" json:"client_uri,omitempty" xml:"client_uri,omitempty"`
	// Logo URI
	LogoURI *string `form:"logo_uri,omitempty" json:"logo_uri,omitempty" xml:"logo_uri,omitempty"`
	// Authorized redirect URIs
	RedirectUris []string `form:"redirect_uris" json:"redirect_uris" xml:"redirect_uris"`
	// Authorized post-logout redirect URIs
	PostLogoutRedirectUris []string `form:"post_logout_redirect_uris,omitempty" json:"post_logout_redirect_uris,omitempty" xml:"post_logout_redirect_uris,omitempty"`
	// Allowed CORS origins
	AllowedCorsOrigins []string `form:"allowed_cors_origins,omitempty" json:"allowed_cors_origins,omitempty" xml:"allowed_cors_origins,omitempty"`
	// Allowed grant types
	AllowedGrantTypes []string `form:"allowed_grant_types" json:"allowed_grant_types" xml:"allowed_grant_types"`
	// Whether client is public
	Public bool `form:"public" json:"public" xml:"public"`
	// Whether client is active
	Active bool `form:"active" json:"active" xml:"active"`
	// Organization ID
	OrganizationID *string `form:"organization_id,omitempty" json:"organization_id,omitempty" xml:"organization_id,omitempty"`
	// Access token expiry in seconds
	TokenExpirySeconds *int `form:"token_expiry_seconds,omitempty" json:"token_expiry_seconds,omitempty" xml:"token_expiry_seconds,omitempty"`
	// Refresh token expiry in seconds
	RefreshTokenExpirySeconds *int `form:"refresh_token_expiry_seconds,omitempty" json:"refresh_token_expiry_seconds,omitempty" xml:"refresh_token_expiry_seconds,omitempty"`
	// Whether PKCE is required
	RequiresPkce *bool `form:"requires_pkce,omitempty" json:"requires_pkce,omitempty" xml:"requires_pkce,omitempty"`
	// Whether user consent is required
	RequiresConsent *bool `form:"requires_consent,omitempty" json:"requires_consent,omitempty" xml:"requires_consent,omitempty"`
	// Creation timestamp
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// Last update timestamp
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// UpdateClientResponseBody is the type of the "oauth_provider" service
// "update_client" endpoint HTTP response body.
type UpdateClientResponseBody struct {
	// Client ID
	ID string `form:"id" json:"id" xml:"id"`
	// OAuth client ID
	ClientID string `form:"client_id" json:"client_id" xml:"client_id"`
	// Client name
	ClientName string `form:"client_name" json:"client_name" xml:"client_name"`
	// Client description
	ClientDescription *string `form:"client_description,omitempty" json:"client_description,omitempty" xml:"client_description,omitempty"`
	// Client URI
	ClientURI *string `form:"client_uri,omitempty" json:"client_uri,omitempty" xml:"client_uri,omitempty"`
	// Logo URI
	LogoURI *string `form:"logo_uri,omitempty" json:"logo_uri,omitempty" xml:"logo_uri,omitempty"`
	// Authorized redirect URIs
	RedirectUris []string `form:"redirect_uris" json:"redirect_uris" xml:"redirect_uris"`
	// Authorized post-logout redirect URIs
	PostLogoutRedirectUris []string `form:"post_logout_redirect_uris,omitempty" json:"post_logout_redirect_uris,omitempty" xml:"post_logout_redirect_uris,omitempty"`
	// Allowed CORS origins
	AllowedCorsOrigins []string `form:"allowed_cors_origins,omitempty" json:"allowed_cors_origins,omitempty" xml:"allowed_cors_origins,omitempty"`
	// Allowed grant types
	AllowedGrantTypes []string `form:"allowed_grant_types" json:"allowed_grant_types" xml:"allowed_grant_types"`
	// Whether client is public
	Public bool `form:"public" json:"public" xml:"public"`
	// Whether client is active
	Active bool `form:"active" json:"active" xml:"active"`
	// Organization ID
	OrganizationID *string `form:"organization_id,omitempty" json:"organization_id,omitempty" xml:"organization_id,omitempty"`
	// Access token expiry in seconds
	TokenExpirySeconds *int `form:"token_expiry_seconds,omitempty" json:"token_expiry_seconds,omitempty" xml:"token_expiry_seconds,omitempty"`
	// Refresh token expiry in seconds
	RefreshTokenExpirySeconds *int `form:"refresh_token_expiry_seconds,omitempty" json:"refresh_token_expiry_seconds,omitempty" xml:"refresh_token_expiry_seconds,omitempty"`
	// Whether PKCE is required
	RequiresPkce *bool `form:"requires_pkce,omitempty" json:"requires_pkce,omitempty" xml:"requires_pkce,omitempty"`
	// Whether user consent is required
	RequiresConsent *bool `form:"requires_consent,omitempty" json:"requires_consent,omitempty" xml:"requires_consent,omitempty"`
	// Creation timestamp
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// Last update timestamp
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// RotateClientSecretResponseBody is the type of the "oauth_provider" service
// "rotate_client_secret" endpoint HTTP response body.
type RotateClientSecretResponseBody struct {
	ClientID     string `form:"client_id" json:"client_id" xml:"client_id"`
	ClientSecret string `form:"client_secret" json:"client_secret" xml:"client_secret"`
}

// ListScopesResponseBody is the type of the "oauth_provider" service
// "list_scopes" endpoint HTTP response body.
type ListScopesResponseBody struct {
	Data       []*OAuthScopeResponseResponseBody `form:"data" json:"data" xml:"data"`
	Pagination *PaginationResponseBody           `form:"pagination" json:"pagination" xml:"pagination"`
}

// CreateScopeResponseBody is the type of the "oauth_provider" service
// "create_scope" endpoint HTTP response body.
type CreateScopeResponseBody struct {
	// Scope ID
	ID string `form:"id" json:"id" xml:"id"`
	// Scope name
	Name string `form:"name" json:"name" xml:"name"`
	// Scope description
	Description string `form:"description" json:"description" xml:"description"`
	// Whether this scope is included by default
	DefaultScope bool `form:"default_scope" json:"default_scope" xml:"default_scope"`
	// Whether this scope can be requested by any client
	Public bool `form:"public" json:"public" xml:"public"`
}

// GetScopeResponseBody is the type of the "oauth_provider" service "get_scope"
// endpoint HTTP response body.
type GetScopeResponseBody struct {
	// Scope ID
	ID string `form:"id" json:"id" xml:"id"`
	// Scope name
	Name string `form:"name" json:"name" xml:"name"`
	// Scope description
	Description string `form:"description" json:"description" xml:"description"`
	// Whether this scope is included by default
	DefaultScope bool `form:"default_scope" json:"default_scope" xml:"default_scope"`
	// Whether this scope can be requested by any client
	Public bool `form:"public" json:"public" xml:"public"`
}

// UpdateScopeResponseBody is the type of the "oauth_provider" service
// "update_scope" endpoint HTTP response body.
type UpdateScopeResponseBody struct {
	// Scope ID
	ID string `form:"id" json:"id" xml:"id"`
	// Scope name
	Name string `form:"name" json:"name" xml:"name"`
	// Scope description
	Description string `form:"description" json:"description" xml:"description"`
	// Whether this scope is included by default
	DefaultScope bool `form:"default_scope" json:"default_scope" xml:"default_scope"`
	// Whether this scope can be requested by any client
	Public bool `form:"public" json:"public" xml:"public"`
}

// OidcConfigurationResponseBody is the type of the "oauth_provider" service
// "oidc_configuration" endpoint HTTP response body.
type OidcConfigurationResponseBody struct {
	Issuer                            string   `form:"issuer" json:"issuer" xml:"issuer"`
	AuthorizationEndpoint             string   `form:"authorization_endpoint" json:"authorization_endpoint" xml:"authorization_endpoint"`
	TokenEndpoint                     string   `form:"token_endpoint" json:"token_endpoint" xml:"token_endpoint"`
	UserinfoEndpoint                  string   `form:"userinfo_endpoint" json:"userinfo_endpoint" xml:"userinfo_endpoint"`
	JwksURI                           string   `form:"jwks_uri" json:"jwks_uri" xml:"jwks_uri"`
	RegistrationEndpoint              *string  `form:"registration_endpoint,omitempty" json:"registration_endpoint,omitempty" xml:"registration_endpoint,omitempty"`
	ScopesSupported                   []string `form:"scopes_supported,omitempty" json:"scopes_supported,omitempty" xml:"scopes_supported,omitempty"`
	ResponseTypesSupported            []string `form:"response_types_supported,omitempty" json:"response_types_supported,omitempty" xml:"response_types_supported,omitempty"`
	ResponseModesSupported            []string `form:"response_modes_supported,omitempty" json:"response_modes_supported,omitempty" xml:"response_modes_supported,omitempty"`
	GrantTypesSupported               []string `form:"grant_types_supported,omitempty" json:"grant_types_supported,omitempty" xml:"grant_types_supported,omitempty"`
	SubjectTypesSupported             []string `form:"subject_types_supported,omitempty" json:"subject_types_supported,omitempty" xml:"subject_types_supported,omitempty"`
	IDTokenSigningAlgValuesSupported  []string `form:"id_token_signing_alg_values_supported,omitempty" json:"id_token_signing_alg_values_supported,omitempty" xml:"id_token_signing_alg_values_supported,omitempty"`
	TokenEndpointAuthMethodsSupported []string `form:"token_endpoint_auth_methods_supported,omitempty" json:"token_endpoint_auth_methods_supported,omitempty" xml:"token_endpoint_auth_methods_supported,omitempty"`
	ClaimsSupported                   []string `form:"claims_supported,omitempty" json:"claims_supported,omitempty" xml:"claims_supported,omitempty"`
}

// JwksResponseBody is the type of the "oauth_provider" service "jwks" endpoint
// HTTP response body.
type JwksResponseBody struct {
	Keys []any `form:"keys" json:"keys" xml:"keys"`
}

// AuthorizeBadRequestResponseBody is the type of the "oauth_provider" service
// "authorize" endpoint HTTP response body for the "bad_request" error.
type AuthorizeBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// AuthorizeConflictResponseBody is the type of the "oauth_provider" service
// "authorize" endpoint HTTP response body for the "conflict" error.
type AuthorizeConflictResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// AuthorizeForbiddenResponseBody is the type of the "oauth_provider" service
// "authorize" endpoint HTTP response body for the "forbidden" error.
type AuthorizeForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// AuthorizeInternalErrorResponseBody is the type of the "oauth_provider"
// service "authorize" endpoint HTTP response body for the "internal_error"
// error.
type AuthorizeInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// AuthorizeNotFoundResponseBody is the type of the "oauth_provider" service
// "authorize" endpoint HTTP response body for the "not_found" error.
type AuthorizeNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// AuthorizeUnauthorizedResponseBody is the type of the "oauth_provider"
// service "authorize" endpoint HTTP response body for the "unauthorized" error.
type AuthorizeUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// TokenBadRequestResponseBody is the type of the "oauth_provider" service
// "token" endpoint HTTP response body for the "bad_request" error.
type TokenBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// TokenConflictResponseBody is the type of the "oauth_provider" service
// "token" endpoint HTTP response body for the "conflict" error.
type TokenConflictResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// TokenForbiddenResponseBody is the type of the "oauth_provider" service
// "token" endpoint HTTP response body for the "forbidden" error.
type TokenForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// TokenInternalErrorResponseBody is the type of the "oauth_provider" service
// "token" endpoint HTTP response body for the "internal_error" error.
type TokenInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// TokenNotFoundResponseBody is the type of the "oauth_provider" service
// "token" endpoint HTTP response body for the "not_found" error.
type TokenNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// TokenUnauthorizedResponseBody is the type of the "oauth_provider" service
// "token" endpoint HTTP response body for the "unauthorized" error.
type TokenUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// IntrospectBadRequestResponseBody is the type of the "oauth_provider" service
// "introspect" endpoint HTTP response body for the "bad_request" error.
type IntrospectBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// IntrospectConflictResponseBody is the type of the "oauth_provider" service
// "introspect" endpoint HTTP response body for the "conflict" error.
type IntrospectConflictResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// IntrospectForbiddenResponseBody is the type of the "oauth_provider" service
// "introspect" endpoint HTTP response body for the "forbidden" error.
type IntrospectForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// IntrospectInternalErrorResponseBody is the type of the "oauth_provider"
// service "introspect" endpoint HTTP response body for the "internal_error"
// error.
type IntrospectInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// IntrospectNotFoundResponseBody is the type of the "oauth_provider" service
// "introspect" endpoint HTTP response body for the "not_found" error.
type IntrospectNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// IntrospectUnauthorizedResponseBody is the type of the "oauth_provider"
// service "introspect" endpoint HTTP response body for the "unauthorized"
// error.
type IntrospectUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// RevokeBadRequestResponseBody is the type of the "oauth_provider" service
// "revoke" endpoint HTTP response body for the "bad_request" error.
type RevokeBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// RevokeConflictResponseBody is the type of the "oauth_provider" service
// "revoke" endpoint HTTP response body for the "conflict" error.
type RevokeConflictResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// RevokeForbiddenResponseBody is the type of the "oauth_provider" service
// "revoke" endpoint HTTP response body for the "forbidden" error.
type RevokeForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// RevokeInternalErrorResponseBody is the type of the "oauth_provider" service
// "revoke" endpoint HTTP response body for the "internal_error" error.
type RevokeInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// RevokeNotFoundResponseBody is the type of the "oauth_provider" service
// "revoke" endpoint HTTP response body for the "not_found" error.
type RevokeNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// RevokeUnauthorizedResponseBody is the type of the "oauth_provider" service
// "revoke" endpoint HTTP response body for the "unauthorized" error.
type RevokeUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ConsentBadRequestResponseBody is the type of the "oauth_provider" service
// "consent" endpoint HTTP response body for the "bad_request" error.
type ConsentBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ConsentConflictResponseBody is the type of the "oauth_provider" service
// "consent" endpoint HTTP response body for the "conflict" error.
type ConsentConflictResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ConsentForbiddenResponseBody is the type of the "oauth_provider" service
// "consent" endpoint HTTP response body for the "forbidden" error.
type ConsentForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ConsentInternalErrorResponseBody is the type of the "oauth_provider" service
// "consent" endpoint HTTP response body for the "internal_error" error.
type ConsentInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ConsentNotFoundResponseBody is the type of the "oauth_provider" service
// "consent" endpoint HTTP response body for the "not_found" error.
type ConsentNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ConsentUnauthorizedResponseBody is the type of the "oauth_provider" service
// "consent" endpoint HTTP response body for the "unauthorized" error.
type ConsentUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UserinfoBadRequestResponseBody is the type of the "oauth_provider" service
// "userinfo" endpoint HTTP response body for the "bad_request" error.
type UserinfoBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UserinfoConflictResponseBody is the type of the "oauth_provider" service
// "userinfo" endpoint HTTP response body for the "conflict" error.
type UserinfoConflictResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UserinfoForbiddenResponseBody is the type of the "oauth_provider" service
// "userinfo" endpoint HTTP response body for the "forbidden" error.
type UserinfoForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UserinfoInternalErrorResponseBody is the type of the "oauth_provider"
// service "userinfo" endpoint HTTP response body for the "internal_error"
// error.
type UserinfoInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UserinfoNotFoundResponseBody is the type of the "oauth_provider" service
// "userinfo" endpoint HTTP response body for the "not_found" error.
type UserinfoNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UserinfoUnauthorizedResponseBody is the type of the "oauth_provider" service
// "userinfo" endpoint HTTP response body for the "unauthorized" error.
type UserinfoUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListClientsBadRequestResponseBody is the type of the "oauth_provider"
// service "list_clients" endpoint HTTP response body for the "bad_request"
// error.
type ListClientsBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListClientsConflictResponseBody is the type of the "oauth_provider" service
// "list_clients" endpoint HTTP response body for the "conflict" error.
type ListClientsConflictResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListClientsForbiddenResponseBody is the type of the "oauth_provider" service
// "list_clients" endpoint HTTP response body for the "forbidden" error.
type ListClientsForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListClientsInternalErrorResponseBody is the type of the "oauth_provider"
// service "list_clients" endpoint HTTP response body for the "internal_error"
// error.
type ListClientsInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListClientsNotFoundResponseBody is the type of the "oauth_provider" service
// "list_clients" endpoint HTTP response body for the "not_found" error.
type ListClientsNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListClientsUnauthorizedResponseBody is the type of the "oauth_provider"
// service "list_clients" endpoint HTTP response body for the "unauthorized"
// error.
type ListClientsUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreateClientBadRequestResponseBody is the type of the "oauth_provider"
// service "create_client" endpoint HTTP response body for the "bad_request"
// error.
type CreateClientBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreateClientConflictResponseBody is the type of the "oauth_provider" service
// "create_client" endpoint HTTP response body for the "conflict" error.
type CreateClientConflictResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreateClientForbiddenResponseBody is the type of the "oauth_provider"
// service "create_client" endpoint HTTP response body for the "forbidden"
// error.
type CreateClientForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreateClientInternalErrorResponseBody is the type of the "oauth_provider"
// service "create_client" endpoint HTTP response body for the "internal_error"
// error.
type CreateClientInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreateClientNotFoundResponseBody is the type of the "oauth_provider" service
// "create_client" endpoint HTTP response body for the "not_found" error.
type CreateClientNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreateClientUnauthorizedResponseBody is the type of the "oauth_provider"
// service "create_client" endpoint HTTP response body for the "unauthorized"
// error.
type CreateClientUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetClientBadRequestResponseBody is the type of the "oauth_provider" service
// "get_client" endpoint HTTP response body for the "bad_request" error.
type GetClientBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetClientConflictResponseBody is the type of the "oauth_provider" service
// "get_client" endpoint HTTP response body for the "conflict" error.
type GetClientConflictResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetClientForbiddenResponseBody is the type of the "oauth_provider" service
// "get_client" endpoint HTTP response body for the "forbidden" error.
type GetClientForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetClientInternalErrorResponseBody is the type of the "oauth_provider"
// service "get_client" endpoint HTTP response body for the "internal_error"
// error.
type GetClientInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetClientNotFoundResponseBody is the type of the "oauth_provider" service
// "get_client" endpoint HTTP response body for the "not_found" error.
type GetClientNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetClientUnauthorizedResponseBody is the type of the "oauth_provider"
// service "get_client" endpoint HTTP response body for the "unauthorized"
// error.
type GetClientUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateClientBadRequestResponseBody is the type of the "oauth_provider"
// service "update_client" endpoint HTTP response body for the "bad_request"
// error.
type UpdateClientBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateClientConflictResponseBody is the type of the "oauth_provider" service
// "update_client" endpoint HTTP response body for the "conflict" error.
type UpdateClientConflictResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateClientForbiddenResponseBody is the type of the "oauth_provider"
// service "update_client" endpoint HTTP response body for the "forbidden"
// error.
type UpdateClientForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateClientInternalErrorResponseBody is the type of the "oauth_provider"
// service "update_client" endpoint HTTP response body for the "internal_error"
// error.
type UpdateClientInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateClientNotFoundResponseBody is the type of the "oauth_provider" service
// "update_client" endpoint HTTP response body for the "not_found" error.
type UpdateClientNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateClientUnauthorizedResponseBody is the type of the "oauth_provider"
// service "update_client" endpoint HTTP response body for the "unauthorized"
// error.
type UpdateClientUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteClientBadRequestResponseBody is the type of the "oauth_provider"
// service "delete_client" endpoint HTTP response body for the "bad_request"
// error.
type DeleteClientBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteClientConflictResponseBody is the type of the "oauth_provider" service
// "delete_client" endpoint HTTP response body for the "conflict" error.
type DeleteClientConflictResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteClientForbiddenResponseBody is the type of the "oauth_provider"
// service "delete_client" endpoint HTTP response body for the "forbidden"
// error.
type DeleteClientForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteClientInternalErrorResponseBody is the type of the "oauth_provider"
// service "delete_client" endpoint HTTP response body for the "internal_error"
// error.
type DeleteClientInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteClientNotFoundResponseBody is the type of the "oauth_provider" service
// "delete_client" endpoint HTTP response body for the "not_found" error.
type DeleteClientNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteClientUnauthorizedResponseBody is the type of the "oauth_provider"
// service "delete_client" endpoint HTTP response body for the "unauthorized"
// error.
type DeleteClientUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// RotateClientSecretBadRequestResponseBody is the type of the "oauth_provider"
// service "rotate_client_secret" endpoint HTTP response body for the
// "bad_request" error.
type RotateClientSecretBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// RotateClientSecretConflictResponseBody is the type of the "oauth_provider"
// service "rotate_client_secret" endpoint HTTP response body for the
// "conflict" error.
type RotateClientSecretConflictResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// RotateClientSecretForbiddenResponseBody is the type of the "oauth_provider"
// service "rotate_client_secret" endpoint HTTP response body for the
// "forbidden" error.
type RotateClientSecretForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// RotateClientSecretInternalErrorResponseBody is the type of the
// "oauth_provider" service "rotate_client_secret" endpoint HTTP response body
// for the "internal_error" error.
type RotateClientSecretInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// RotateClientSecretNotFoundResponseBody is the type of the "oauth_provider"
// service "rotate_client_secret" endpoint HTTP response body for the
// "not_found" error.
type RotateClientSecretNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// RotateClientSecretUnauthorizedResponseBody is the type of the
// "oauth_provider" service "rotate_client_secret" endpoint HTTP response body
// for the "unauthorized" error.
type RotateClientSecretUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListScopesBadRequestResponseBody is the type of the "oauth_provider" service
// "list_scopes" endpoint HTTP response body for the "bad_request" error.
type ListScopesBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListScopesConflictResponseBody is the type of the "oauth_provider" service
// "list_scopes" endpoint HTTP response body for the "conflict" error.
type ListScopesConflictResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListScopesForbiddenResponseBody is the type of the "oauth_provider" service
// "list_scopes" endpoint HTTP response body for the "forbidden" error.
type ListScopesForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListScopesInternalErrorResponseBody is the type of the "oauth_provider"
// service "list_scopes" endpoint HTTP response body for the "internal_error"
// error.
type ListScopesInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListScopesNotFoundResponseBody is the type of the "oauth_provider" service
// "list_scopes" endpoint HTTP response body for the "not_found" error.
type ListScopesNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListScopesUnauthorizedResponseBody is the type of the "oauth_provider"
// service "list_scopes" endpoint HTTP response body for the "unauthorized"
// error.
type ListScopesUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreateScopeBadRequestResponseBody is the type of the "oauth_provider"
// service "create_scope" endpoint HTTP response body for the "bad_request"
// error.
type CreateScopeBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreateScopeConflictResponseBody is the type of the "oauth_provider" service
// "create_scope" endpoint HTTP response body for the "conflict" error.
type CreateScopeConflictResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreateScopeForbiddenResponseBody is the type of the "oauth_provider" service
// "create_scope" endpoint HTTP response body for the "forbidden" error.
type CreateScopeForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreateScopeInternalErrorResponseBody is the type of the "oauth_provider"
// service "create_scope" endpoint HTTP response body for the "internal_error"
// error.
type CreateScopeInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreateScopeNotFoundResponseBody is the type of the "oauth_provider" service
// "create_scope" endpoint HTTP response body for the "not_found" error.
type CreateScopeNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreateScopeUnauthorizedResponseBody is the type of the "oauth_provider"
// service "create_scope" endpoint HTTP response body for the "unauthorized"
// error.
type CreateScopeUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetScopeBadRequestResponseBody is the type of the "oauth_provider" service
// "get_scope" endpoint HTTP response body for the "bad_request" error.
type GetScopeBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetScopeConflictResponseBody is the type of the "oauth_provider" service
// "get_scope" endpoint HTTP response body for the "conflict" error.
type GetScopeConflictResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetScopeForbiddenResponseBody is the type of the "oauth_provider" service
// "get_scope" endpoint HTTP response body for the "forbidden" error.
type GetScopeForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetScopeInternalErrorResponseBody is the type of the "oauth_provider"
// service "get_scope" endpoint HTTP response body for the "internal_error"
// error.
type GetScopeInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetScopeNotFoundResponseBody is the type of the "oauth_provider" service
// "get_scope" endpoint HTTP response body for the "not_found" error.
type GetScopeNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetScopeUnauthorizedResponseBody is the type of the "oauth_provider" service
// "get_scope" endpoint HTTP response body for the "unauthorized" error.
type GetScopeUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateScopeBadRequestResponseBody is the type of the "oauth_provider"
// service "update_scope" endpoint HTTP response body for the "bad_request"
// error.
type UpdateScopeBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateScopeConflictResponseBody is the type of the "oauth_provider" service
// "update_scope" endpoint HTTP response body for the "conflict" error.
type UpdateScopeConflictResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateScopeForbiddenResponseBody is the type of the "oauth_provider" service
// "update_scope" endpoint HTTP response body for the "forbidden" error.
type UpdateScopeForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateScopeInternalErrorResponseBody is the type of the "oauth_provider"
// service "update_scope" endpoint HTTP response body for the "internal_error"
// error.
type UpdateScopeInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateScopeNotFoundResponseBody is the type of the "oauth_provider" service
// "update_scope" endpoint HTTP response body for the "not_found" error.
type UpdateScopeNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateScopeUnauthorizedResponseBody is the type of the "oauth_provider"
// service "update_scope" endpoint HTTP response body for the "unauthorized"
// error.
type UpdateScopeUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteScopeBadRequestResponseBody is the type of the "oauth_provider"
// service "delete_scope" endpoint HTTP response body for the "bad_request"
// error.
type DeleteScopeBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteScopeConflictResponseBody is the type of the "oauth_provider" service
// "delete_scope" endpoint HTTP response body for the "conflict" error.
type DeleteScopeConflictResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteScopeForbiddenResponseBody is the type of the "oauth_provider" service
// "delete_scope" endpoint HTTP response body for the "forbidden" error.
type DeleteScopeForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteScopeInternalErrorResponseBody is the type of the "oauth_provider"
// service "delete_scope" endpoint HTTP response body for the "internal_error"
// error.
type DeleteScopeInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteScopeNotFoundResponseBody is the type of the "oauth_provider" service
// "delete_scope" endpoint HTTP response body for the "not_found" error.
type DeleteScopeNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteScopeUnauthorizedResponseBody is the type of the "oauth_provider"
// service "delete_scope" endpoint HTTP response body for the "unauthorized"
// error.
type DeleteScopeUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// OidcConfigurationBadRequestResponseBody is the type of the "oauth_provider"
// service "oidc_configuration" endpoint HTTP response body for the
// "bad_request" error.
type OidcConfigurationBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// OidcConfigurationConflictResponseBody is the type of the "oauth_provider"
// service "oidc_configuration" endpoint HTTP response body for the "conflict"
// error.
type OidcConfigurationConflictResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// OidcConfigurationForbiddenResponseBody is the type of the "oauth_provider"
// service "oidc_configuration" endpoint HTTP response body for the "forbidden"
// error.
type OidcConfigurationForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// OidcConfigurationInternalErrorResponseBody is the type of the
// "oauth_provider" service "oidc_configuration" endpoint HTTP response body
// for the "internal_error" error.
type OidcConfigurationInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// OidcConfigurationNotFoundResponseBody is the type of the "oauth_provider"
// service "oidc_configuration" endpoint HTTP response body for the "not_found"
// error.
type OidcConfigurationNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// OidcConfigurationUnauthorizedResponseBody is the type of the
// "oauth_provider" service "oidc_configuration" endpoint HTTP response body
// for the "unauthorized" error.
type OidcConfigurationUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// JwksBadRequestResponseBody is the type of the "oauth_provider" service
// "jwks" endpoint HTTP response body for the "bad_request" error.
type JwksBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// JwksConflictResponseBody is the type of the "oauth_provider" service "jwks"
// endpoint HTTP response body for the "conflict" error.
type JwksConflictResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// JwksForbiddenResponseBody is the type of the "oauth_provider" service "jwks"
// endpoint HTTP response body for the "forbidden" error.
type JwksForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// JwksInternalErrorResponseBody is the type of the "oauth_provider" service
// "jwks" endpoint HTTP response body for the "internal_error" error.
type JwksInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// JwksNotFoundResponseBody is the type of the "oauth_provider" service "jwks"
// endpoint HTTP response body for the "not_found" error.
type JwksNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// JwksUnauthorizedResponseBody is the type of the "oauth_provider" service
// "jwks" endpoint HTTP response body for the "unauthorized" error.
type JwksUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// OAuthClientResponseResponseBody is used to define fields on response body
// types.
type OAuthClientResponseResponseBody struct {
	// Client ID
	ID string `form:"id" json:"id" xml:"id"`
	// OAuth client ID
	ClientID string `form:"client_id" json:"client_id" xml:"client_id"`
	// Client name
	ClientName string `form:"client_name" json:"client_name" xml:"client_name"`
	// Client description
	ClientDescription *string `form:"client_description,omitempty" json:"client_description,omitempty" xml:"client_description,omitempty"`
	// Client URI
	ClientURI *string `form:"client_uri,omitempty" json:"client_uri,omitempty" xml:"client_uri,omitempty"`
	// Logo URI
	LogoURI *string `form:"logo_uri,omitempty" json:"logo_uri,omitempty" xml:"logo_uri,omitempty"`
	// Authorized redirect URIs
	RedirectUris []string `form:"redirect_uris" json:"redirect_uris" xml:"redirect_uris"`
	// Authorized post-logout redirect URIs
	PostLogoutRedirectUris []string `form:"post_logout_redirect_uris,omitempty" json:"post_logout_redirect_uris,omitempty" xml:"post_logout_redirect_uris,omitempty"`
	// Allowed CORS origins
	AllowedCorsOrigins []string `form:"allowed_cors_origins,omitempty" json:"allowed_cors_origins,omitempty" xml:"allowed_cors_origins,omitempty"`
	// Allowed grant types
	AllowedGrantTypes []string `form:"allowed_grant_types" json:"allowed_grant_types" xml:"allowed_grant_types"`
	// Whether client is public
	Public bool `form:"public" json:"public" xml:"public"`
	// Whether client is active
	Active bool `form:"active" json:"active" xml:"active"`
	// Organization ID
	OrganizationID *string `form:"organization_id,omitempty" json:"organization_id,omitempty" xml:"organization_id,omitempty"`
	// Access token expiry in seconds
	TokenExpirySeconds *int `form:"token_expiry_seconds,omitempty" json:"token_expiry_seconds,omitempty" xml:"token_expiry_seconds,omitempty"`
	// Refresh token expiry in seconds
	RefreshTokenExpirySeconds *int `form:"refresh_token_expiry_seconds,omitempty" json:"refresh_token_expiry_seconds,omitempty" xml:"refresh_token_expiry_seconds,omitempty"`
	// Whether PKCE is required
	RequiresPkce *bool `form:"requires_pkce,omitempty" json:"requires_pkce,omitempty" xml:"requires_pkce,omitempty"`
	// Whether user consent is required
	RequiresConsent *bool `form:"requires_consent,omitempty" json:"requires_consent,omitempty" xml:"requires_consent,omitempty"`
	// Creation timestamp
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// Last update timestamp
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// PaginationResponseBody is used to define fields on response body types.
type PaginationResponseBody struct {
	// Offset
	Offset int `json:"offset"`
	// Limit
	Limit int `json:"limit"`
	// Total number of items
	Total int `json:"total"`
	// Total number of pages
	TotalPages int `json:"total_pages,totalPages"`
	// Current page number
	CurrentPage int `json:"current_page,currentPage"`
	// Has next page
	HasNext bool `json:"has_next,hasNext"`
	// Has previous page
	HasPrevious bool `json:"has_previous,hasPrevious"`
}

// OAuthScopeResponseResponseBody is used to define fields on response body
// types.
type OAuthScopeResponseResponseBody struct {
	// Scope ID
	ID string `form:"id" json:"id" xml:"id"`
	// Scope name
	Name string `form:"name" json:"name" xml:"name"`
	// Scope description
	Description string `form:"description" json:"description" xml:"description"`
	// Whether this scope is included by default
	DefaultScope bool `form:"default_scope" json:"default_scope" xml:"default_scope"`
	// Whether this scope can be requested by any client
	Public bool `form:"public" json:"public" xml:"public"`
}

// UpdateOAuthClientRequestRequestBody is used to define fields on request body
// types.
type UpdateOAuthClientRequestRequestBody struct {
	// Client name
	ClientName *string `form:"client_name,omitempty" json:"client_name,omitempty" xml:"client_name,omitempty"`
	// Client description
	ClientDescription *string `form:"client_description,omitempty" json:"client_description,omitempty" xml:"client_description,omitempty"`
	// Client URI
	ClientURI *string `form:"client_uri,omitempty" json:"client_uri,omitempty" xml:"client_uri,omitempty"`
	// Logo URI
	LogoURI *string `form:"logo_uri,omitempty" json:"logo_uri,omitempty" xml:"logo_uri,omitempty"`
	// Authorized redirect URIs
	RedirectUris []string `form:"redirect_uris,omitempty" json:"redirect_uris,omitempty" xml:"redirect_uris,omitempty"`
	// Authorized post-logout redirect URIs
	PostLogoutRedirectUris []string `form:"post_logout_redirect_uris,omitempty" json:"post_logout_redirect_uris,omitempty" xml:"post_logout_redirect_uris,omitempty"`
	// Allowed CORS origins
	AllowedCorsOrigins []string `form:"allowed_cors_origins,omitempty" json:"allowed_cors_origins,omitempty" xml:"allowed_cors_origins,omitempty"`
	// Allowed grant types
	AllowedGrantTypes []string `form:"allowed_grant_types,omitempty" json:"allowed_grant_types,omitempty" xml:"allowed_grant_types,omitempty"`
	// Whether client is public
	Public *bool `form:"public,omitempty" json:"public,omitempty" xml:"public,omitempty"`
	// Whether client is active
	Active *bool `form:"active,omitempty" json:"active,omitempty" xml:"active,omitempty"`
	// Access token expiry in seconds
	TokenExpirySeconds *int `form:"token_expiry_seconds,omitempty" json:"token_expiry_seconds,omitempty" xml:"token_expiry_seconds,omitempty"`
	// Refresh token expiry in seconds
	RefreshTokenExpirySeconds *int `form:"refresh_token_expiry_seconds,omitempty" json:"refresh_token_expiry_seconds,omitempty" xml:"refresh_token_expiry_seconds,omitempty"`
	// Whether PKCE is required
	RequiresPkce *bool `form:"requires_pkce,omitempty" json:"requires_pkce,omitempty" xml:"requires_pkce,omitempty"`
	// Whether user consent is required
	RequiresConsent *bool `form:"requires_consent,omitempty" json:"requires_consent,omitempty" xml:"requires_consent,omitempty"`
}

// NewTokenResponseBody builds the HTTP response body from the result of the
// "token" endpoint of the "oauth_provider" service.
func NewTokenResponseBody(res *oauthprovider.TokenResult) *TokenResponseBody {
	body := &TokenResponseBody{
		AccessToken:  res.AccessToken,
		TokenType:    res.TokenType,
		ExpiresIn:    res.ExpiresIn,
		RefreshToken: res.RefreshToken,
		Scope:        res.Scope,
	}
	return body
}

// NewIntrospectResponseBody builds the HTTP response body from the result of
// the "introspect" endpoint of the "oauth_provider" service.
func NewIntrospectResponseBody(res *oauthprovider.IntrospectResult) *IntrospectResponseBody {
	body := &IntrospectResponseBody{
		Active:    res.Active,
		Scope:     res.Scope,
		ClientID:  res.ClientID,
		Username:  res.Username,
		TokenType: res.TokenType,
		Exp:       res.Exp,
		Iat:       res.Iat,
		Nbf:       res.Nbf,
		Sub:       res.Sub,
		Aud:       res.Aud,
		Iss:       res.Iss,
		Jti:       res.Jti,
	}
	return body
}

// NewConsentResponseBody builds the HTTP response body from the result of the
// "consent" endpoint of the "oauth_provider" service.
func NewConsentResponseBody(res *oauthprovider.ConsentResult) *ConsentResponseBody {
	body := &ConsentResponseBody{
		RedirectURI: res.RedirectURI,
	}
	return body
}

// NewUserinfoResponseBody builds the HTTP response body from the result of the
// "userinfo" endpoint of the "oauth_provider" service.
func NewUserinfoResponseBody(res *oauthprovider.UserinfoResult) *UserinfoResponseBody {
	body := &UserinfoResponseBody{
		Sub:                 res.Sub,
		Name:                res.Name,
		GivenName:           res.GivenName,
		FamilyName:          res.FamilyName,
		MiddleName:          res.MiddleName,
		Nickname:            res.Nickname,
		PreferredUsername:   res.PreferredUsername,
		Profile:             res.Profile,
		Picture:             res.Picture,
		Website:             res.Website,
		Email:               res.Email,
		EmailVerified:       res.EmailVerified,
		Gender:              res.Gender,
		Birthdate:           res.Birthdate,
		Zoneinfo:            res.Zoneinfo,
		Locale:              res.Locale,
		PhoneNumber:         res.PhoneNumber,
		PhoneNumberVerified: res.PhoneNumberVerified,
		UpdatedAt:           res.UpdatedAt,
	}
	return body
}

// NewListClientsResponseBody builds the HTTP response body from the result of
// the "list_clients" endpoint of the "oauth_provider" service.
func NewListClientsResponseBody(res *oauthprovider.ListClientsResult) *ListClientsResponseBody {
	body := &ListClientsResponseBody{}
	if res.Data != nil {
		body.Data = make([]*OAuthClientResponseResponseBody, len(res.Data))
		for i, val := range res.Data {
			body.Data[i] = marshalOauthproviderOAuthClientResponseToOAuthClientResponseResponseBody(val)
		}
	} else {
		body.Data = []*OAuthClientResponseResponseBody{}
	}
	if res.Pagination != nil {
		body.Pagination = marshalDesigntypesPaginationToPaginationResponseBody(res.Pagination)
	}
	return body
}

// NewCreateClientResponseBody builds the HTTP response body from the result of
// the "create_client" endpoint of the "oauth_provider" service.
func NewCreateClientResponseBody(res *oauthprovider.OAuthClientWithSecretResponse) *CreateClientResponseBody {
	body := &CreateClientResponseBody{
		ClientSecret:              res.ClientSecret,
		ID:                        res.ID,
		ClientID:                  res.ClientID,
		ClientName:                res.ClientName,
		ClientDescription:         res.ClientDescription,
		ClientURI:                 res.ClientURI,
		LogoURI:                   res.LogoURI,
		Public:                    res.Public,
		Active:                    res.Active,
		OrganizationID:            res.OrganizationID,
		TokenExpirySeconds:        res.TokenExpirySeconds,
		RefreshTokenExpirySeconds: res.RefreshTokenExpirySeconds,
		RequiresPkce:              res.RequiresPkce,
		RequiresConsent:           res.RequiresConsent,
		CreatedAt:                 res.CreatedAt,
		UpdatedAt:                 res.UpdatedAt,
	}
	if res.RedirectUris != nil {
		body.RedirectUris = make([]string, len(res.RedirectUris))
		for i, val := range res.RedirectUris {
			body.RedirectUris[i] = val
		}
	} else {
		body.RedirectUris = []string{}
	}
	if res.PostLogoutRedirectUris != nil {
		body.PostLogoutRedirectUris = make([]string, len(res.PostLogoutRedirectUris))
		for i, val := range res.PostLogoutRedirectUris {
			body.PostLogoutRedirectUris[i] = val
		}
	}
	if res.AllowedCorsOrigins != nil {
		body.AllowedCorsOrigins = make([]string, len(res.AllowedCorsOrigins))
		for i, val := range res.AllowedCorsOrigins {
			body.AllowedCorsOrigins[i] = val
		}
	}
	if res.AllowedGrantTypes != nil {
		body.AllowedGrantTypes = make([]string, len(res.AllowedGrantTypes))
		for i, val := range res.AllowedGrantTypes {
			body.AllowedGrantTypes[i] = val
		}
	} else {
		body.AllowedGrantTypes = []string{}
	}
	return body
}

// NewGetClientResponseBody builds the HTTP response body from the result of
// the "get_client" endpoint of the "oauth_provider" service.
func NewGetClientResponseBody(res *oauthprovider.OAuthClientResponse) *GetClientResponseBody {
	body := &GetClientResponseBody{
		ID:                        res.ID,
		ClientID:                  res.ClientID,
		ClientName:                res.ClientName,
		ClientDescription:         res.ClientDescription,
		ClientURI:                 res.ClientURI,
		LogoURI:                   res.LogoURI,
		Public:                    res.Public,
		Active:                    res.Active,
		OrganizationID:            res.OrganizationID,
		TokenExpirySeconds:        res.TokenExpirySeconds,
		RefreshTokenExpirySeconds: res.RefreshTokenExpirySeconds,
		RequiresPkce:              res.RequiresPkce,
		RequiresConsent:           res.RequiresConsent,
		CreatedAt:                 res.CreatedAt,
		UpdatedAt:                 res.UpdatedAt,
	}
	if res.RedirectUris != nil {
		body.RedirectUris = make([]string, len(res.RedirectUris))
		for i, val := range res.RedirectUris {
			body.RedirectUris[i] = val
		}
	} else {
		body.RedirectUris = []string{}
	}
	if res.PostLogoutRedirectUris != nil {
		body.PostLogoutRedirectUris = make([]string, len(res.PostLogoutRedirectUris))
		for i, val := range res.PostLogoutRedirectUris {
			body.PostLogoutRedirectUris[i] = val
		}
	}
	if res.AllowedCorsOrigins != nil {
		body.AllowedCorsOrigins = make([]string, len(res.AllowedCorsOrigins))
		for i, val := range res.AllowedCorsOrigins {
			body.AllowedCorsOrigins[i] = val
		}
	}
	if res.AllowedGrantTypes != nil {
		body.AllowedGrantTypes = make([]string, len(res.AllowedGrantTypes))
		for i, val := range res.AllowedGrantTypes {
			body.AllowedGrantTypes[i] = val
		}
	} else {
		body.AllowedGrantTypes = []string{}
	}
	return body
}

// NewUpdateClientResponseBody builds the HTTP response body from the result of
// the "update_client" endpoint of the "oauth_provider" service.
func NewUpdateClientResponseBody(res *oauthprovider.OAuthClientResponse) *UpdateClientResponseBody {
	body := &UpdateClientResponseBody{
		ID:                        res.ID,
		ClientID:                  res.ClientID,
		ClientName:                res.ClientName,
		ClientDescription:         res.ClientDescription,
		ClientURI:                 res.ClientURI,
		LogoURI:                   res.LogoURI,
		Public:                    res.Public,
		Active:                    res.Active,
		OrganizationID:            res.OrganizationID,
		TokenExpirySeconds:        res.TokenExpirySeconds,
		RefreshTokenExpirySeconds: res.RefreshTokenExpirySeconds,
		RequiresPkce:              res.RequiresPkce,
		RequiresConsent:           res.RequiresConsent,
		CreatedAt:                 res.CreatedAt,
		UpdatedAt:                 res.UpdatedAt,
	}
	if res.RedirectUris != nil {
		body.RedirectUris = make([]string, len(res.RedirectUris))
		for i, val := range res.RedirectUris {
			body.RedirectUris[i] = val
		}
	} else {
		body.RedirectUris = []string{}
	}
	if res.PostLogoutRedirectUris != nil {
		body.PostLogoutRedirectUris = make([]string, len(res.PostLogoutRedirectUris))
		for i, val := range res.PostLogoutRedirectUris {
			body.PostLogoutRedirectUris[i] = val
		}
	}
	if res.AllowedCorsOrigins != nil {
		body.AllowedCorsOrigins = make([]string, len(res.AllowedCorsOrigins))
		for i, val := range res.AllowedCorsOrigins {
			body.AllowedCorsOrigins[i] = val
		}
	}
	if res.AllowedGrantTypes != nil {
		body.AllowedGrantTypes = make([]string, len(res.AllowedGrantTypes))
		for i, val := range res.AllowedGrantTypes {
			body.AllowedGrantTypes[i] = val
		}
	} else {
		body.AllowedGrantTypes = []string{}
	}
	return body
}

// NewRotateClientSecretResponseBody builds the HTTP response body from the
// result of the "rotate_client_secret" endpoint of the "oauth_provider"
// service.
func NewRotateClientSecretResponseBody(res *oauthprovider.RotateClientSecretResult) *RotateClientSecretResponseBody {
	body := &RotateClientSecretResponseBody{
		ClientID:     res.ClientID,
		ClientSecret: res.ClientSecret,
	}
	return body
}

// NewListScopesResponseBody builds the HTTP response body from the result of
// the "list_scopes" endpoint of the "oauth_provider" service.
func NewListScopesResponseBody(res *oauthprovider.ListScopesResult) *ListScopesResponseBody {
	body := &ListScopesResponseBody{}
	if res.Data != nil {
		body.Data = make([]*OAuthScopeResponseResponseBody, len(res.Data))
		for i, val := range res.Data {
			body.Data[i] = marshalOauthproviderOAuthScopeResponseToOAuthScopeResponseResponseBody(val)
		}
	} else {
		body.Data = []*OAuthScopeResponseResponseBody{}
	}
	if res.Pagination != nil {
		body.Pagination = marshalDesigntypesPaginationToPaginationResponseBody(res.Pagination)
	}
	return body
}

// NewCreateScopeResponseBody builds the HTTP response body from the result of
// the "create_scope" endpoint of the "oauth_provider" service.
func NewCreateScopeResponseBody(res *oauthprovider.OAuthScopeResponse) *CreateScopeResponseBody {
	body := &CreateScopeResponseBody{
		ID:           res.ID,
		Name:         res.Name,
		Description:  res.Description,
		DefaultScope: res.DefaultScope,
		Public:       res.Public,
	}
	return body
}

// NewGetScopeResponseBody builds the HTTP response body from the result of the
// "get_scope" endpoint of the "oauth_provider" service.
func NewGetScopeResponseBody(res *oauthprovider.OAuthScopeResponse) *GetScopeResponseBody {
	body := &GetScopeResponseBody{
		ID:           res.ID,
		Name:         res.Name,
		Description:  res.Description,
		DefaultScope: res.DefaultScope,
		Public:       res.Public,
	}
	return body
}

// NewUpdateScopeResponseBody builds the HTTP response body from the result of
// the "update_scope" endpoint of the "oauth_provider" service.
func NewUpdateScopeResponseBody(res *oauthprovider.OAuthScopeResponse) *UpdateScopeResponseBody {
	body := &UpdateScopeResponseBody{
		ID:           res.ID,
		Name:         res.Name,
		Description:  res.Description,
		DefaultScope: res.DefaultScope,
		Public:       res.Public,
	}
	return body
}

// NewOidcConfigurationResponseBody builds the HTTP response body from the
// result of the "oidc_configuration" endpoint of the "oauth_provider" service.
func NewOidcConfigurationResponseBody(res *oauthprovider.OidcConfigurationResult) *OidcConfigurationResponseBody {
	body := &OidcConfigurationResponseBody{
		Issuer:                res.Issuer,
		AuthorizationEndpoint: res.AuthorizationEndpoint,
		TokenEndpoint:         res.TokenEndpoint,
		UserinfoEndpoint:      res.UserinfoEndpoint,
		JwksURI:               res.JwksURI,
		RegistrationEndpoint:  res.RegistrationEndpoint,
	}
	if res.ScopesSupported != nil {
		body.ScopesSupported = make([]string, len(res.ScopesSupported))
		for i, val := range res.ScopesSupported {
			body.ScopesSupported[i] = val
		}
	}
	if res.ResponseTypesSupported != nil {
		body.ResponseTypesSupported = make([]string, len(res.ResponseTypesSupported))
		for i, val := range res.ResponseTypesSupported {
			body.ResponseTypesSupported[i] = val
		}
	}
	if res.ResponseModesSupported != nil {
		body.ResponseModesSupported = make([]string, len(res.ResponseModesSupported))
		for i, val := range res.ResponseModesSupported {
			body.ResponseModesSupported[i] = val
		}
	}
	if res.GrantTypesSupported != nil {
		body.GrantTypesSupported = make([]string, len(res.GrantTypesSupported))
		for i, val := range res.GrantTypesSupported {
			body.GrantTypesSupported[i] = val
		}
	}
	if res.SubjectTypesSupported != nil {
		body.SubjectTypesSupported = make([]string, len(res.SubjectTypesSupported))
		for i, val := range res.SubjectTypesSupported {
			body.SubjectTypesSupported[i] = val
		}
	}
	if res.IDTokenSigningAlgValuesSupported != nil {
		body.IDTokenSigningAlgValuesSupported = make([]string, len(res.IDTokenSigningAlgValuesSupported))
		for i, val := range res.IDTokenSigningAlgValuesSupported {
			body.IDTokenSigningAlgValuesSupported[i] = val
		}
	}
	if res.TokenEndpointAuthMethodsSupported != nil {
		body.TokenEndpointAuthMethodsSupported = make([]string, len(res.TokenEndpointAuthMethodsSupported))
		for i, val := range res.TokenEndpointAuthMethodsSupported {
			body.TokenEndpointAuthMethodsSupported[i] = val
		}
	}
	if res.ClaimsSupported != nil {
		body.ClaimsSupported = make([]string, len(res.ClaimsSupported))
		for i, val := range res.ClaimsSupported {
			body.ClaimsSupported[i] = val
		}
	}
	return body
}

// NewJwksResponseBody builds the HTTP response body from the result of the
// "jwks" endpoint of the "oauth_provider" service.
func NewJwksResponseBody(res *oauthprovider.JwksResult) *JwksResponseBody {
	body := &JwksResponseBody{}
	if res.Keys != nil {
		body.Keys = make([]any, len(res.Keys))
		for i, val := range res.Keys {
			body.Keys[i] = val
		}
	} else {
		body.Keys = []any{}
	}
	return body
}

// NewAuthorizeBadRequestResponseBody builds the HTTP response body from the
// result of the "authorize" endpoint of the "oauth_provider" service.
func NewAuthorizeBadRequestResponseBody(res *oauthprovider.BadRequestError) *AuthorizeBadRequestResponseBody {
	body := &AuthorizeBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewAuthorizeConflictResponseBody builds the HTTP response body from the
// result of the "authorize" endpoint of the "oauth_provider" service.
func NewAuthorizeConflictResponseBody(res *oauthprovider.ConflictError) *AuthorizeConflictResponseBody {
	body := &AuthorizeConflictResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewAuthorizeForbiddenResponseBody builds the HTTP response body from the
// result of the "authorize" endpoint of the "oauth_provider" service.
func NewAuthorizeForbiddenResponseBody(res *oauthprovider.ForbiddenError) *AuthorizeForbiddenResponseBody {
	body := &AuthorizeForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewAuthorizeInternalErrorResponseBody builds the HTTP response body from the
// result of the "authorize" endpoint of the "oauth_provider" service.
func NewAuthorizeInternalErrorResponseBody(res *oauthprovider.InternalServerError) *AuthorizeInternalErrorResponseBody {
	body := &AuthorizeInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewAuthorizeNotFoundResponseBody builds the HTTP response body from the
// result of the "authorize" endpoint of the "oauth_provider" service.
func NewAuthorizeNotFoundResponseBody(res *oauthprovider.NotFoundError) *AuthorizeNotFoundResponseBody {
	body := &AuthorizeNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewAuthorizeUnauthorizedResponseBody builds the HTTP response body from the
// result of the "authorize" endpoint of the "oauth_provider" service.
func NewAuthorizeUnauthorizedResponseBody(res *oauthprovider.UnauthorizedError) *AuthorizeUnauthorizedResponseBody {
	body := &AuthorizeUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewTokenBadRequestResponseBody builds the HTTP response body from the result
// of the "token" endpoint of the "oauth_provider" service.
func NewTokenBadRequestResponseBody(res *oauthprovider.BadRequestError) *TokenBadRequestResponseBody {
	body := &TokenBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewTokenConflictResponseBody builds the HTTP response body from the result
// of the "token" endpoint of the "oauth_provider" service.
func NewTokenConflictResponseBody(res *oauthprovider.ConflictError) *TokenConflictResponseBody {
	body := &TokenConflictResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewTokenForbiddenResponseBody builds the HTTP response body from the result
// of the "token" endpoint of the "oauth_provider" service.
func NewTokenForbiddenResponseBody(res *oauthprovider.ForbiddenError) *TokenForbiddenResponseBody {
	body := &TokenForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewTokenInternalErrorResponseBody builds the HTTP response body from the
// result of the "token" endpoint of the "oauth_provider" service.
func NewTokenInternalErrorResponseBody(res *oauthprovider.InternalServerError) *TokenInternalErrorResponseBody {
	body := &TokenInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewTokenNotFoundResponseBody builds the HTTP response body from the result
// of the "token" endpoint of the "oauth_provider" service.
func NewTokenNotFoundResponseBody(res *oauthprovider.NotFoundError) *TokenNotFoundResponseBody {
	body := &TokenNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewTokenUnauthorizedResponseBody builds the HTTP response body from the
// result of the "token" endpoint of the "oauth_provider" service.
func NewTokenUnauthorizedResponseBody(res *oauthprovider.UnauthorizedError) *TokenUnauthorizedResponseBody {
	body := &TokenUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewIntrospectBadRequestResponseBody builds the HTTP response body from the
// result of the "introspect" endpoint of the "oauth_provider" service.
func NewIntrospectBadRequestResponseBody(res *oauthprovider.BadRequestError) *IntrospectBadRequestResponseBody {
	body := &IntrospectBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewIntrospectConflictResponseBody builds the HTTP response body from the
// result of the "introspect" endpoint of the "oauth_provider" service.
func NewIntrospectConflictResponseBody(res *oauthprovider.ConflictError) *IntrospectConflictResponseBody {
	body := &IntrospectConflictResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewIntrospectForbiddenResponseBody builds the HTTP response body from the
// result of the "introspect" endpoint of the "oauth_provider" service.
func NewIntrospectForbiddenResponseBody(res *oauthprovider.ForbiddenError) *IntrospectForbiddenResponseBody {
	body := &IntrospectForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewIntrospectInternalErrorResponseBody builds the HTTP response body from
// the result of the "introspect" endpoint of the "oauth_provider" service.
func NewIntrospectInternalErrorResponseBody(res *oauthprovider.InternalServerError) *IntrospectInternalErrorResponseBody {
	body := &IntrospectInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewIntrospectNotFoundResponseBody builds the HTTP response body from the
// result of the "introspect" endpoint of the "oauth_provider" service.
func NewIntrospectNotFoundResponseBody(res *oauthprovider.NotFoundError) *IntrospectNotFoundResponseBody {
	body := &IntrospectNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewIntrospectUnauthorizedResponseBody builds the HTTP response body from the
// result of the "introspect" endpoint of the "oauth_provider" service.
func NewIntrospectUnauthorizedResponseBody(res *oauthprovider.UnauthorizedError) *IntrospectUnauthorizedResponseBody {
	body := &IntrospectUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewRevokeBadRequestResponseBody builds the HTTP response body from the
// result of the "revoke" endpoint of the "oauth_provider" service.
func NewRevokeBadRequestResponseBody(res *oauthprovider.BadRequestError) *RevokeBadRequestResponseBody {
	body := &RevokeBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewRevokeConflictResponseBody builds the HTTP response body from the result
// of the "revoke" endpoint of the "oauth_provider" service.
func NewRevokeConflictResponseBody(res *oauthprovider.ConflictError) *RevokeConflictResponseBody {
	body := &RevokeConflictResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewRevokeForbiddenResponseBody builds the HTTP response body from the result
// of the "revoke" endpoint of the "oauth_provider" service.
func NewRevokeForbiddenResponseBody(res *oauthprovider.ForbiddenError) *RevokeForbiddenResponseBody {
	body := &RevokeForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewRevokeInternalErrorResponseBody builds the HTTP response body from the
// result of the "revoke" endpoint of the "oauth_provider" service.
func NewRevokeInternalErrorResponseBody(res *oauthprovider.InternalServerError) *RevokeInternalErrorResponseBody {
	body := &RevokeInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewRevokeNotFoundResponseBody builds the HTTP response body from the result
// of the "revoke" endpoint of the "oauth_provider" service.
func NewRevokeNotFoundResponseBody(res *oauthprovider.NotFoundError) *RevokeNotFoundResponseBody {
	body := &RevokeNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewRevokeUnauthorizedResponseBody builds the HTTP response body from the
// result of the "revoke" endpoint of the "oauth_provider" service.
func NewRevokeUnauthorizedResponseBody(res *oauthprovider.UnauthorizedError) *RevokeUnauthorizedResponseBody {
	body := &RevokeUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewConsentBadRequestResponseBody builds the HTTP response body from the
// result of the "consent" endpoint of the "oauth_provider" service.
func NewConsentBadRequestResponseBody(res *oauthprovider.BadRequestError) *ConsentBadRequestResponseBody {
	body := &ConsentBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewConsentConflictResponseBody builds the HTTP response body from the result
// of the "consent" endpoint of the "oauth_provider" service.
func NewConsentConflictResponseBody(res *oauthprovider.ConflictError) *ConsentConflictResponseBody {
	body := &ConsentConflictResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewConsentForbiddenResponseBody builds the HTTP response body from the
// result of the "consent" endpoint of the "oauth_provider" service.
func NewConsentForbiddenResponseBody(res *oauthprovider.ForbiddenError) *ConsentForbiddenResponseBody {
	body := &ConsentForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewConsentInternalErrorResponseBody builds the HTTP response body from the
// result of the "consent" endpoint of the "oauth_provider" service.
func NewConsentInternalErrorResponseBody(res *oauthprovider.InternalServerError) *ConsentInternalErrorResponseBody {
	body := &ConsentInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewConsentNotFoundResponseBody builds the HTTP response body from the result
// of the "consent" endpoint of the "oauth_provider" service.
func NewConsentNotFoundResponseBody(res *oauthprovider.NotFoundError) *ConsentNotFoundResponseBody {
	body := &ConsentNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewConsentUnauthorizedResponseBody builds the HTTP response body from the
// result of the "consent" endpoint of the "oauth_provider" service.
func NewConsentUnauthorizedResponseBody(res *oauthprovider.UnauthorizedError) *ConsentUnauthorizedResponseBody {
	body := &ConsentUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewUserinfoBadRequestResponseBody builds the HTTP response body from the
// result of the "userinfo" endpoint of the "oauth_provider" service.
func NewUserinfoBadRequestResponseBody(res *oauthprovider.BadRequestError) *UserinfoBadRequestResponseBody {
	body := &UserinfoBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewUserinfoConflictResponseBody builds the HTTP response body from the
// result of the "userinfo" endpoint of the "oauth_provider" service.
func NewUserinfoConflictResponseBody(res *oauthprovider.ConflictError) *UserinfoConflictResponseBody {
	body := &UserinfoConflictResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewUserinfoForbiddenResponseBody builds the HTTP response body from the
// result of the "userinfo" endpoint of the "oauth_provider" service.
func NewUserinfoForbiddenResponseBody(res *oauthprovider.ForbiddenError) *UserinfoForbiddenResponseBody {
	body := &UserinfoForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewUserinfoInternalErrorResponseBody builds the HTTP response body from the
// result of the "userinfo" endpoint of the "oauth_provider" service.
func NewUserinfoInternalErrorResponseBody(res *oauthprovider.InternalServerError) *UserinfoInternalErrorResponseBody {
	body := &UserinfoInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewUserinfoNotFoundResponseBody builds the HTTP response body from the
// result of the "userinfo" endpoint of the "oauth_provider" service.
func NewUserinfoNotFoundResponseBody(res *oauthprovider.NotFoundError) *UserinfoNotFoundResponseBody {
	body := &UserinfoNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewUserinfoUnauthorizedResponseBody builds the HTTP response body from the
// result of the "userinfo" endpoint of the "oauth_provider" service.
func NewUserinfoUnauthorizedResponseBody(res *oauthprovider.UnauthorizedError) *UserinfoUnauthorizedResponseBody {
	body := &UserinfoUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewListClientsBadRequestResponseBody builds the HTTP response body from the
// result of the "list_clients" endpoint of the "oauth_provider" service.
func NewListClientsBadRequestResponseBody(res *oauthprovider.BadRequestError) *ListClientsBadRequestResponseBody {
	body := &ListClientsBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewListClientsConflictResponseBody builds the HTTP response body from the
// result of the "list_clients" endpoint of the "oauth_provider" service.
func NewListClientsConflictResponseBody(res *oauthprovider.ConflictError) *ListClientsConflictResponseBody {
	body := &ListClientsConflictResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewListClientsForbiddenResponseBody builds the HTTP response body from the
// result of the "list_clients" endpoint of the "oauth_provider" service.
func NewListClientsForbiddenResponseBody(res *oauthprovider.ForbiddenError) *ListClientsForbiddenResponseBody {
	body := &ListClientsForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewListClientsInternalErrorResponseBody builds the HTTP response body from
// the result of the "list_clients" endpoint of the "oauth_provider" service.
func NewListClientsInternalErrorResponseBody(res *oauthprovider.InternalServerError) *ListClientsInternalErrorResponseBody {
	body := &ListClientsInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewListClientsNotFoundResponseBody builds the HTTP response body from the
// result of the "list_clients" endpoint of the "oauth_provider" service.
func NewListClientsNotFoundResponseBody(res *oauthprovider.NotFoundError) *ListClientsNotFoundResponseBody {
	body := &ListClientsNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewListClientsUnauthorizedResponseBody builds the HTTP response body from
// the result of the "list_clients" endpoint of the "oauth_provider" service.
func NewListClientsUnauthorizedResponseBody(res *oauthprovider.UnauthorizedError) *ListClientsUnauthorizedResponseBody {
	body := &ListClientsUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewCreateClientBadRequestResponseBody builds the HTTP response body from the
// result of the "create_client" endpoint of the "oauth_provider" service.
func NewCreateClientBadRequestResponseBody(res *oauthprovider.BadRequestError) *CreateClientBadRequestResponseBody {
	body := &CreateClientBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewCreateClientConflictResponseBody builds the HTTP response body from the
// result of the "create_client" endpoint of the "oauth_provider" service.
func NewCreateClientConflictResponseBody(res *oauthprovider.ConflictError) *CreateClientConflictResponseBody {
	body := &CreateClientConflictResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewCreateClientForbiddenResponseBody builds the HTTP response body from the
// result of the "create_client" endpoint of the "oauth_provider" service.
func NewCreateClientForbiddenResponseBody(res *oauthprovider.ForbiddenError) *CreateClientForbiddenResponseBody {
	body := &CreateClientForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewCreateClientInternalErrorResponseBody builds the HTTP response body from
// the result of the "create_client" endpoint of the "oauth_provider" service.
func NewCreateClientInternalErrorResponseBody(res *oauthprovider.InternalServerError) *CreateClientInternalErrorResponseBody {
	body := &CreateClientInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewCreateClientNotFoundResponseBody builds the HTTP response body from the
// result of the "create_client" endpoint of the "oauth_provider" service.
func NewCreateClientNotFoundResponseBody(res *oauthprovider.NotFoundError) *CreateClientNotFoundResponseBody {
	body := &CreateClientNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewCreateClientUnauthorizedResponseBody builds the HTTP response body from
// the result of the "create_client" endpoint of the "oauth_provider" service.
func NewCreateClientUnauthorizedResponseBody(res *oauthprovider.UnauthorizedError) *CreateClientUnauthorizedResponseBody {
	body := &CreateClientUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewGetClientBadRequestResponseBody builds the HTTP response body from the
// result of the "get_client" endpoint of the "oauth_provider" service.
func NewGetClientBadRequestResponseBody(res *oauthprovider.BadRequestError) *GetClientBadRequestResponseBody {
	body := &GetClientBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewGetClientConflictResponseBody builds the HTTP response body from the
// result of the "get_client" endpoint of the "oauth_provider" service.
func NewGetClientConflictResponseBody(res *oauthprovider.ConflictError) *GetClientConflictResponseBody {
	body := &GetClientConflictResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewGetClientForbiddenResponseBody builds the HTTP response body from the
// result of the "get_client" endpoint of the "oauth_provider" service.
func NewGetClientForbiddenResponseBody(res *oauthprovider.ForbiddenError) *GetClientForbiddenResponseBody {
	body := &GetClientForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewGetClientInternalErrorResponseBody builds the HTTP response body from the
// result of the "get_client" endpoint of the "oauth_provider" service.
func NewGetClientInternalErrorResponseBody(res *oauthprovider.InternalServerError) *GetClientInternalErrorResponseBody {
	body := &GetClientInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewGetClientNotFoundResponseBody builds the HTTP response body from the
// result of the "get_client" endpoint of the "oauth_provider" service.
func NewGetClientNotFoundResponseBody(res *oauthprovider.NotFoundError) *GetClientNotFoundResponseBody {
	body := &GetClientNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewGetClientUnauthorizedResponseBody builds the HTTP response body from the
// result of the "get_client" endpoint of the "oauth_provider" service.
func NewGetClientUnauthorizedResponseBody(res *oauthprovider.UnauthorizedError) *GetClientUnauthorizedResponseBody {
	body := &GetClientUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewUpdateClientBadRequestResponseBody builds the HTTP response body from the
// result of the "update_client" endpoint of the "oauth_provider" service.
func NewUpdateClientBadRequestResponseBody(res *oauthprovider.BadRequestError) *UpdateClientBadRequestResponseBody {
	body := &UpdateClientBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewUpdateClientConflictResponseBody builds the HTTP response body from the
// result of the "update_client" endpoint of the "oauth_provider" service.
func NewUpdateClientConflictResponseBody(res *oauthprovider.ConflictError) *UpdateClientConflictResponseBody {
	body := &UpdateClientConflictResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewUpdateClientForbiddenResponseBody builds the HTTP response body from the
// result of the "update_client" endpoint of the "oauth_provider" service.
func NewUpdateClientForbiddenResponseBody(res *oauthprovider.ForbiddenError) *UpdateClientForbiddenResponseBody {
	body := &UpdateClientForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewUpdateClientInternalErrorResponseBody builds the HTTP response body from
// the result of the "update_client" endpoint of the "oauth_provider" service.
func NewUpdateClientInternalErrorResponseBody(res *oauthprovider.InternalServerError) *UpdateClientInternalErrorResponseBody {
	body := &UpdateClientInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewUpdateClientNotFoundResponseBody builds the HTTP response body from the
// result of the "update_client" endpoint of the "oauth_provider" service.
func NewUpdateClientNotFoundResponseBody(res *oauthprovider.NotFoundError) *UpdateClientNotFoundResponseBody {
	body := &UpdateClientNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewUpdateClientUnauthorizedResponseBody builds the HTTP response body from
// the result of the "update_client" endpoint of the "oauth_provider" service.
func NewUpdateClientUnauthorizedResponseBody(res *oauthprovider.UnauthorizedError) *UpdateClientUnauthorizedResponseBody {
	body := &UpdateClientUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewDeleteClientBadRequestResponseBody builds the HTTP response body from the
// result of the "delete_client" endpoint of the "oauth_provider" service.
func NewDeleteClientBadRequestResponseBody(res *oauthprovider.BadRequestError) *DeleteClientBadRequestResponseBody {
	body := &DeleteClientBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewDeleteClientConflictResponseBody builds the HTTP response body from the
// result of the "delete_client" endpoint of the "oauth_provider" service.
func NewDeleteClientConflictResponseBody(res *oauthprovider.ConflictError) *DeleteClientConflictResponseBody {
	body := &DeleteClientConflictResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewDeleteClientForbiddenResponseBody builds the HTTP response body from the
// result of the "delete_client" endpoint of the "oauth_provider" service.
func NewDeleteClientForbiddenResponseBody(res *oauthprovider.ForbiddenError) *DeleteClientForbiddenResponseBody {
	body := &DeleteClientForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewDeleteClientInternalErrorResponseBody builds the HTTP response body from
// the result of the "delete_client" endpoint of the "oauth_provider" service.
func NewDeleteClientInternalErrorResponseBody(res *oauthprovider.InternalServerError) *DeleteClientInternalErrorResponseBody {
	body := &DeleteClientInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewDeleteClientNotFoundResponseBody builds the HTTP response body from the
// result of the "delete_client" endpoint of the "oauth_provider" service.
func NewDeleteClientNotFoundResponseBody(res *oauthprovider.NotFoundError) *DeleteClientNotFoundResponseBody {
	body := &DeleteClientNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewDeleteClientUnauthorizedResponseBody builds the HTTP response body from
// the result of the "delete_client" endpoint of the "oauth_provider" service.
func NewDeleteClientUnauthorizedResponseBody(res *oauthprovider.UnauthorizedError) *DeleteClientUnauthorizedResponseBody {
	body := &DeleteClientUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewRotateClientSecretBadRequestResponseBody builds the HTTP response body
// from the result of the "rotate_client_secret" endpoint of the
// "oauth_provider" service.
func NewRotateClientSecretBadRequestResponseBody(res *oauthprovider.BadRequestError) *RotateClientSecretBadRequestResponseBody {
	body := &RotateClientSecretBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewRotateClientSecretConflictResponseBody builds the HTTP response body from
// the result of the "rotate_client_secret" endpoint of the "oauth_provider"
// service.
func NewRotateClientSecretConflictResponseBody(res *oauthprovider.ConflictError) *RotateClientSecretConflictResponseBody {
	body := &RotateClientSecretConflictResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewRotateClientSecretForbiddenResponseBody builds the HTTP response body
// from the result of the "rotate_client_secret" endpoint of the
// "oauth_provider" service.
func NewRotateClientSecretForbiddenResponseBody(res *oauthprovider.ForbiddenError) *RotateClientSecretForbiddenResponseBody {
	body := &RotateClientSecretForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewRotateClientSecretInternalErrorResponseBody builds the HTTP response body
// from the result of the "rotate_client_secret" endpoint of the
// "oauth_provider" service.
func NewRotateClientSecretInternalErrorResponseBody(res *oauthprovider.InternalServerError) *RotateClientSecretInternalErrorResponseBody {
	body := &RotateClientSecretInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewRotateClientSecretNotFoundResponseBody builds the HTTP response body from
// the result of the "rotate_client_secret" endpoint of the "oauth_provider"
// service.
func NewRotateClientSecretNotFoundResponseBody(res *oauthprovider.NotFoundError) *RotateClientSecretNotFoundResponseBody {
	body := &RotateClientSecretNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewRotateClientSecretUnauthorizedResponseBody builds the HTTP response body
// from the result of the "rotate_client_secret" endpoint of the
// "oauth_provider" service.
func NewRotateClientSecretUnauthorizedResponseBody(res *oauthprovider.UnauthorizedError) *RotateClientSecretUnauthorizedResponseBody {
	body := &RotateClientSecretUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewListScopesBadRequestResponseBody builds the HTTP response body from the
// result of the "list_scopes" endpoint of the "oauth_provider" service.
func NewListScopesBadRequestResponseBody(res *oauthprovider.BadRequestError) *ListScopesBadRequestResponseBody {
	body := &ListScopesBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewListScopesConflictResponseBody builds the HTTP response body from the
// result of the "list_scopes" endpoint of the "oauth_provider" service.
func NewListScopesConflictResponseBody(res *oauthprovider.ConflictError) *ListScopesConflictResponseBody {
	body := &ListScopesConflictResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewListScopesForbiddenResponseBody builds the HTTP response body from the
// result of the "list_scopes" endpoint of the "oauth_provider" service.
func NewListScopesForbiddenResponseBody(res *oauthprovider.ForbiddenError) *ListScopesForbiddenResponseBody {
	body := &ListScopesForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewListScopesInternalErrorResponseBody builds the HTTP response body from
// the result of the "list_scopes" endpoint of the "oauth_provider" service.
func NewListScopesInternalErrorResponseBody(res *oauthprovider.InternalServerError) *ListScopesInternalErrorResponseBody {
	body := &ListScopesInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewListScopesNotFoundResponseBody builds the HTTP response body from the
// result of the "list_scopes" endpoint of the "oauth_provider" service.
func NewListScopesNotFoundResponseBody(res *oauthprovider.NotFoundError) *ListScopesNotFoundResponseBody {
	body := &ListScopesNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewListScopesUnauthorizedResponseBody builds the HTTP response body from the
// result of the "list_scopes" endpoint of the "oauth_provider" service.
func NewListScopesUnauthorizedResponseBody(res *oauthprovider.UnauthorizedError) *ListScopesUnauthorizedResponseBody {
	body := &ListScopesUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewCreateScopeBadRequestResponseBody builds the HTTP response body from the
// result of the "create_scope" endpoint of the "oauth_provider" service.
func NewCreateScopeBadRequestResponseBody(res *oauthprovider.BadRequestError) *CreateScopeBadRequestResponseBody {
	body := &CreateScopeBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewCreateScopeConflictResponseBody builds the HTTP response body from the
// result of the "create_scope" endpoint of the "oauth_provider" service.
func NewCreateScopeConflictResponseBody(res *oauthprovider.ConflictError) *CreateScopeConflictResponseBody {
	body := &CreateScopeConflictResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewCreateScopeForbiddenResponseBody builds the HTTP response body from the
// result of the "create_scope" endpoint of the "oauth_provider" service.
func NewCreateScopeForbiddenResponseBody(res *oauthprovider.ForbiddenError) *CreateScopeForbiddenResponseBody {
	body := &CreateScopeForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewCreateScopeInternalErrorResponseBody builds the HTTP response body from
// the result of the "create_scope" endpoint of the "oauth_provider" service.
func NewCreateScopeInternalErrorResponseBody(res *oauthprovider.InternalServerError) *CreateScopeInternalErrorResponseBody {
	body := &CreateScopeInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewCreateScopeNotFoundResponseBody builds the HTTP response body from the
// result of the "create_scope" endpoint of the "oauth_provider" service.
func NewCreateScopeNotFoundResponseBody(res *oauthprovider.NotFoundError) *CreateScopeNotFoundResponseBody {
	body := &CreateScopeNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewCreateScopeUnauthorizedResponseBody builds the HTTP response body from
// the result of the "create_scope" endpoint of the "oauth_provider" service.
func NewCreateScopeUnauthorizedResponseBody(res *oauthprovider.UnauthorizedError) *CreateScopeUnauthorizedResponseBody {
	body := &CreateScopeUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewGetScopeBadRequestResponseBody builds the HTTP response body from the
// result of the "get_scope" endpoint of the "oauth_provider" service.
func NewGetScopeBadRequestResponseBody(res *oauthprovider.BadRequestError) *GetScopeBadRequestResponseBody {
	body := &GetScopeBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewGetScopeConflictResponseBody builds the HTTP response body from the
// result of the "get_scope" endpoint of the "oauth_provider" service.
func NewGetScopeConflictResponseBody(res *oauthprovider.ConflictError) *GetScopeConflictResponseBody {
	body := &GetScopeConflictResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewGetScopeForbiddenResponseBody builds the HTTP response body from the
// result of the "get_scope" endpoint of the "oauth_provider" service.
func NewGetScopeForbiddenResponseBody(res *oauthprovider.ForbiddenError) *GetScopeForbiddenResponseBody {
	body := &GetScopeForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewGetScopeInternalErrorResponseBody builds the HTTP response body from the
// result of the "get_scope" endpoint of the "oauth_provider" service.
func NewGetScopeInternalErrorResponseBody(res *oauthprovider.InternalServerError) *GetScopeInternalErrorResponseBody {
	body := &GetScopeInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewGetScopeNotFoundResponseBody builds the HTTP response body from the
// result of the "get_scope" endpoint of the "oauth_provider" service.
func NewGetScopeNotFoundResponseBody(res *oauthprovider.NotFoundError) *GetScopeNotFoundResponseBody {
	body := &GetScopeNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewGetScopeUnauthorizedResponseBody builds the HTTP response body from the
// result of the "get_scope" endpoint of the "oauth_provider" service.
func NewGetScopeUnauthorizedResponseBody(res *oauthprovider.UnauthorizedError) *GetScopeUnauthorizedResponseBody {
	body := &GetScopeUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewUpdateScopeBadRequestResponseBody builds the HTTP response body from the
// result of the "update_scope" endpoint of the "oauth_provider" service.
func NewUpdateScopeBadRequestResponseBody(res *oauthprovider.BadRequestError) *UpdateScopeBadRequestResponseBody {
	body := &UpdateScopeBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewUpdateScopeConflictResponseBody builds the HTTP response body from the
// result of the "update_scope" endpoint of the "oauth_provider" service.
func NewUpdateScopeConflictResponseBody(res *oauthprovider.ConflictError) *UpdateScopeConflictResponseBody {
	body := &UpdateScopeConflictResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewUpdateScopeForbiddenResponseBody builds the HTTP response body from the
// result of the "update_scope" endpoint of the "oauth_provider" service.
func NewUpdateScopeForbiddenResponseBody(res *oauthprovider.ForbiddenError) *UpdateScopeForbiddenResponseBody {
	body := &UpdateScopeForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewUpdateScopeInternalErrorResponseBody builds the HTTP response body from
// the result of the "update_scope" endpoint of the "oauth_provider" service.
func NewUpdateScopeInternalErrorResponseBody(res *oauthprovider.InternalServerError) *UpdateScopeInternalErrorResponseBody {
	body := &UpdateScopeInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewUpdateScopeNotFoundResponseBody builds the HTTP response body from the
// result of the "update_scope" endpoint of the "oauth_provider" service.
func NewUpdateScopeNotFoundResponseBody(res *oauthprovider.NotFoundError) *UpdateScopeNotFoundResponseBody {
	body := &UpdateScopeNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewUpdateScopeUnauthorizedResponseBody builds the HTTP response body from
// the result of the "update_scope" endpoint of the "oauth_provider" service.
func NewUpdateScopeUnauthorizedResponseBody(res *oauthprovider.UnauthorizedError) *UpdateScopeUnauthorizedResponseBody {
	body := &UpdateScopeUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewDeleteScopeBadRequestResponseBody builds the HTTP response body from the
// result of the "delete_scope" endpoint of the "oauth_provider" service.
func NewDeleteScopeBadRequestResponseBody(res *oauthprovider.BadRequestError) *DeleteScopeBadRequestResponseBody {
	body := &DeleteScopeBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewDeleteScopeConflictResponseBody builds the HTTP response body from the
// result of the "delete_scope" endpoint of the "oauth_provider" service.
func NewDeleteScopeConflictResponseBody(res *oauthprovider.ConflictError) *DeleteScopeConflictResponseBody {
	body := &DeleteScopeConflictResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewDeleteScopeForbiddenResponseBody builds the HTTP response body from the
// result of the "delete_scope" endpoint of the "oauth_provider" service.
func NewDeleteScopeForbiddenResponseBody(res *oauthprovider.ForbiddenError) *DeleteScopeForbiddenResponseBody {
	body := &DeleteScopeForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewDeleteScopeInternalErrorResponseBody builds the HTTP response body from
// the result of the "delete_scope" endpoint of the "oauth_provider" service.
func NewDeleteScopeInternalErrorResponseBody(res *oauthprovider.InternalServerError) *DeleteScopeInternalErrorResponseBody {
	body := &DeleteScopeInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewDeleteScopeNotFoundResponseBody builds the HTTP response body from the
// result of the "delete_scope" endpoint of the "oauth_provider" service.
func NewDeleteScopeNotFoundResponseBody(res *oauthprovider.NotFoundError) *DeleteScopeNotFoundResponseBody {
	body := &DeleteScopeNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewDeleteScopeUnauthorizedResponseBody builds the HTTP response body from
// the result of the "delete_scope" endpoint of the "oauth_provider" service.
func NewDeleteScopeUnauthorizedResponseBody(res *oauthprovider.UnauthorizedError) *DeleteScopeUnauthorizedResponseBody {
	body := &DeleteScopeUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewOidcConfigurationBadRequestResponseBody builds the HTTP response body
// from the result of the "oidc_configuration" endpoint of the "oauth_provider"
// service.
func NewOidcConfigurationBadRequestResponseBody(res *oauthprovider.BadRequestError) *OidcConfigurationBadRequestResponseBody {
	body := &OidcConfigurationBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewOidcConfigurationConflictResponseBody builds the HTTP response body from
// the result of the "oidc_configuration" endpoint of the "oauth_provider"
// service.
func NewOidcConfigurationConflictResponseBody(res *oauthprovider.ConflictError) *OidcConfigurationConflictResponseBody {
	body := &OidcConfigurationConflictResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewOidcConfigurationForbiddenResponseBody builds the HTTP response body from
// the result of the "oidc_configuration" endpoint of the "oauth_provider"
// service.
func NewOidcConfigurationForbiddenResponseBody(res *oauthprovider.ForbiddenError) *OidcConfigurationForbiddenResponseBody {
	body := &OidcConfigurationForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewOidcConfigurationInternalErrorResponseBody builds the HTTP response body
// from the result of the "oidc_configuration" endpoint of the "oauth_provider"
// service.
func NewOidcConfigurationInternalErrorResponseBody(res *oauthprovider.InternalServerError) *OidcConfigurationInternalErrorResponseBody {
	body := &OidcConfigurationInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewOidcConfigurationNotFoundResponseBody builds the HTTP response body from
// the result of the "oidc_configuration" endpoint of the "oauth_provider"
// service.
func NewOidcConfigurationNotFoundResponseBody(res *oauthprovider.NotFoundError) *OidcConfigurationNotFoundResponseBody {
	body := &OidcConfigurationNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewOidcConfigurationUnauthorizedResponseBody builds the HTTP response body
// from the result of the "oidc_configuration" endpoint of the "oauth_provider"
// service.
func NewOidcConfigurationUnauthorizedResponseBody(res *oauthprovider.UnauthorizedError) *OidcConfigurationUnauthorizedResponseBody {
	body := &OidcConfigurationUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewJwksBadRequestResponseBody builds the HTTP response body from the result
// of the "jwks" endpoint of the "oauth_provider" service.
func NewJwksBadRequestResponseBody(res *oauthprovider.BadRequestError) *JwksBadRequestResponseBody {
	body := &JwksBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewJwksConflictResponseBody builds the HTTP response body from the result of
// the "jwks" endpoint of the "oauth_provider" service.
func NewJwksConflictResponseBody(res *oauthprovider.ConflictError) *JwksConflictResponseBody {
	body := &JwksConflictResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewJwksForbiddenResponseBody builds the HTTP response body from the result
// of the "jwks" endpoint of the "oauth_provider" service.
func NewJwksForbiddenResponseBody(res *oauthprovider.ForbiddenError) *JwksForbiddenResponseBody {
	body := &JwksForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewJwksInternalErrorResponseBody builds the HTTP response body from the
// result of the "jwks" endpoint of the "oauth_provider" service.
func NewJwksInternalErrorResponseBody(res *oauthprovider.InternalServerError) *JwksInternalErrorResponseBody {
	body := &JwksInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewJwksNotFoundResponseBody builds the HTTP response body from the result of
// the "jwks" endpoint of the "oauth_provider" service.
func NewJwksNotFoundResponseBody(res *oauthprovider.NotFoundError) *JwksNotFoundResponseBody {
	body := &JwksNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewJwksUnauthorizedResponseBody builds the HTTP response body from the
// result of the "jwks" endpoint of the "oauth_provider" service.
func NewJwksUnauthorizedResponseBody(res *oauthprovider.UnauthorizedError) *JwksUnauthorizedResponseBody {
	body := &JwksUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewAuthorizePayload builds a oauth_provider service authorize endpoint
// payload.
func NewAuthorizePayload(clientID string, responseType string, redirectURI string, scope *string, state *string, codeChallenge *string, codeChallengeMethod *string, oauth2 *string, xAPIKey *string, jwt *string) *oauthprovider.AuthorizePayload {
	v := &oauthprovider.AuthorizePayload{}
	v.ClientID = clientID
	v.ResponseType = responseType
	v.RedirectURI = redirectURI
	v.Scope = scope
	v.State = state
	v.CodeChallenge = codeChallenge
	v.CodeChallengeMethod = codeChallengeMethod
	v.Oauth2 = oauth2
	v.XAPIKey = xAPIKey
	v.JWT = jwt

	return v
}

// NewTokenPayload builds a oauth_provider service token endpoint payload.
func NewTokenPayload(grantType string, code *string, redirectURI *string, clientID *string, clientSecret *string, refreshToken *string, codeVerifier *string, username *string, password *string, scope *string, oauth2 *string, xAPIKey *string, jwt *string) *oauthprovider.TokenPayload {
	v := &oauthprovider.TokenPayload{}
	v.GrantType = grantType
	v.Code = code
	v.RedirectURI = redirectURI
	v.ClientID = clientID
	v.ClientSecret = clientSecret
	v.RefreshToken = refreshToken
	v.CodeVerifier = codeVerifier
	v.Username = username
	v.Password = password
	v.Scope = scope
	v.Oauth2 = oauth2
	v.XAPIKey = xAPIKey
	v.JWT = jwt

	return v
}

// NewIntrospectPayload builds a oauth_provider service introspect endpoint
// payload.
func NewIntrospectPayload(token string, tokenTypeHint *string, oauth2 *string, xAPIKey *string, jwt *string) *oauthprovider.IntrospectPayload {
	v := &oauthprovider.IntrospectPayload{}
	v.Token = token
	v.TokenTypeHint = tokenTypeHint
	v.Oauth2 = oauth2
	v.XAPIKey = xAPIKey
	v.JWT = jwt

	return v
}

// NewRevokePayload builds a oauth_provider service revoke endpoint payload.
func NewRevokePayload(token string, tokenTypeHint *string, clientID *string, clientSecret *string, oauth2 *string, xAPIKey *string, jwt *string) *oauthprovider.RevokePayload {
	v := &oauthprovider.RevokePayload{}
	v.Token = token
	v.TokenTypeHint = tokenTypeHint
	v.ClientID = clientID
	v.ClientSecret = clientSecret
	v.Oauth2 = oauth2
	v.XAPIKey = xAPIKey
	v.JWT = jwt

	return v
}

// NewConsentPayload builds a oauth_provider service consent endpoint payload.
func NewConsentPayload(body *ConsentRequestBody, jwt *string) *oauthprovider.ConsentPayload {
	v := &oauthprovider.ConsentPayload{
		ClientID:    *body.ClientID,
		Scope:       *body.Scope,
		RedirectURI: *body.RedirectURI,
		State:       body.State,
	}
	if body.Approved != nil {
		v.Approved = *body.Approved
	}
	if body.Approved == nil {
		v.Approved = false
	}
	v.JWT = jwt

	return v
}

// NewUserinfoPayload builds a oauth_provider service userinfo endpoint payload.
func NewUserinfoPayload(jwt *string) *oauthprovider.UserinfoPayload {
	v := &oauthprovider.UserinfoPayload{}
	v.JWT = jwt

	return v
}

// NewListClientsPayload builds a oauth_provider service list_clients endpoint
// payload.
func NewListClientsPayload(offset int, limit int, organizationID *string, jwt *string) *oauthprovider.ListClientsPayload {
	v := &oauthprovider.ListClientsPayload{}
	v.Offset = offset
	v.Limit = limit
	v.OrganizationID = organizationID
	v.JWT = jwt

	return v
}

// NewCreateClientPayload builds a oauth_provider service create_client
// endpoint payload.
func NewCreateClientPayload(body *CreateClientRequestBody, jwt *string) *oauthprovider.CreateClientPayload {
	v := &oauthprovider.CreateClientPayload{
		ClientName:        *body.ClientName,
		ClientDescription: body.ClientDescription,
		ClientURI:         body.ClientURI,
		LogoURI:           body.LogoURI,
	}
	if body.Public != nil {
		v.Public = *body.Public
	}
	if body.TokenExpirySeconds != nil {
		v.TokenExpirySeconds = *body.TokenExpirySeconds
	}
	if body.RefreshTokenExpirySeconds != nil {
		v.RefreshTokenExpirySeconds = *body.RefreshTokenExpirySeconds
	}
	if body.RequiresPkce != nil {
		v.RequiresPkce = *body.RequiresPkce
	}
	if body.RequiresConsent != nil {
		v.RequiresConsent = *body.RequiresConsent
	}
	v.RedirectUris = make([]string, len(body.RedirectUris))
	for i, val := range body.RedirectUris {
		v.RedirectUris[i] = val
	}
	if body.PostLogoutRedirectUris != nil {
		v.PostLogoutRedirectUris = make([]string, len(body.PostLogoutRedirectUris))
		for i, val := range body.PostLogoutRedirectUris {
			v.PostLogoutRedirectUris[i] = val
		}
	}
	if body.AllowedCorsOrigins != nil {
		v.AllowedCorsOrigins = make([]string, len(body.AllowedCorsOrigins))
		for i, val := range body.AllowedCorsOrigins {
			v.AllowedCorsOrigins[i] = val
		}
	}
	if body.AllowedGrantTypes != nil {
		v.AllowedGrantTypes = make([]string, len(body.AllowedGrantTypes))
		for i, val := range body.AllowedGrantTypes {
			v.AllowedGrantTypes[i] = val
		}
	}
	if body.Public == nil {
		v.Public = false
	}
	if body.TokenExpirySeconds == nil {
		v.TokenExpirySeconds = 3600
	}
	if body.RefreshTokenExpirySeconds == nil {
		v.RefreshTokenExpirySeconds = 2592000
	}
	if body.RequiresPkce == nil {
		v.RequiresPkce = true
	}
	if body.RequiresConsent == nil {
		v.RequiresConsent = true
	}
	v.JWT = jwt

	return v
}

// NewGetClientPayload builds a oauth_provider service get_client endpoint
// payload.
func NewGetClientPayload(id string, jwt *string) *oauthprovider.GetClientPayload {
	v := &oauthprovider.GetClientPayload{}
	v.ID = id
	v.JWT = jwt

	return v
}

// NewUpdateClientPayload builds a oauth_provider service update_client
// endpoint payload.
func NewUpdateClientPayload(body *UpdateClientRequestBody, id string, jwt *string) *oauthprovider.UpdateClientPayload {
	v := &oauthprovider.UpdateClientPayload{}
	v.Client = unmarshalUpdateOAuthClientRequestRequestBodyToOauthproviderUpdateOAuthClientRequest(body.Client)
	v.ID = id
	v.JWT = jwt

	return v
}

// NewDeleteClientPayload builds a oauth_provider service delete_client
// endpoint payload.
func NewDeleteClientPayload(id string, jwt *string) *oauthprovider.DeleteClientPayload {
	v := &oauthprovider.DeleteClientPayload{}
	v.ID = id
	v.JWT = jwt

	return v
}

// NewRotateClientSecretPayload builds a oauth_provider service
// rotate_client_secret endpoint payload.
func NewRotateClientSecretPayload(id string, jwt *string) *oauthprovider.RotateClientSecretPayload {
	v := &oauthprovider.RotateClientSecretPayload{}
	v.ID = id
	v.JWT = jwt

	return v
}

// NewListScopesPayload builds a oauth_provider service list_scopes endpoint
// payload.
func NewListScopesPayload(offset int, limit int, jwt *string) *oauthprovider.ListScopesPayload {
	v := &oauthprovider.ListScopesPayload{}
	v.Offset = offset
	v.Limit = limit
	v.JWT = jwt

	return v
}

// NewCreateScopePayload builds a oauth_provider service create_scope endpoint
// payload.
func NewCreateScopePayload(body *CreateScopeRequestBody, jwt *string) *oauthprovider.CreateScopePayload {
	v := &oauthprovider.CreateScopePayload{
		Name:        *body.Name,
		Description: *body.Description,
	}
	if body.DefaultScope != nil {
		v.DefaultScope = *body.DefaultScope
	}
	if body.Public != nil {
		v.Public = *body.Public
	}
	if body.DefaultScope == nil {
		v.DefaultScope = false
	}
	if body.Public == nil {
		v.Public = true
	}
	v.JWT = jwt

	return v
}

// NewGetScopePayload builds a oauth_provider service get_scope endpoint
// payload.
func NewGetScopePayload(id string, jwt *string) *oauthprovider.GetScopePayload {
	v := &oauthprovider.GetScopePayload{}
	v.ID = id
	v.JWT = jwt

	return v
}

// NewUpdateScopePayload builds a oauth_provider service update_scope endpoint
// payload.
func NewUpdateScopePayload(body *UpdateScopeRequestBody, id string, jwt *string) *oauthprovider.UpdateScopePayload {
	v := &oauthprovider.UpdateScopePayload{
		Description:  body.Description,
		DefaultScope: body.DefaultScope,
		Public:       body.Public,
	}
	v.ID = id
	v.JWT = jwt

	return v
}

// NewDeleteScopePayload builds a oauth_provider service delete_scope endpoint
// payload.
func NewDeleteScopePayload(id string, jwt *string) *oauthprovider.DeleteScopePayload {
	v := &oauthprovider.DeleteScopePayload{}
	v.ID = id
	v.JWT = jwt

	return v
}

// ValidateConsentRequestBody runs the validations defined on ConsentRequestBody
func ValidateConsentRequestBody(body *ConsentRequestBody) (err error) {
	if body.ClientID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("client_id", "body"))
	}
	if body.Scope == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("scope", "body"))
	}
	if body.RedirectURI == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("redirect_uri", "body"))
	}
	return
}

// ValidateCreateClientRequestBody runs the validations defined on
// create_client_request_body
func ValidateCreateClientRequestBody(body *CreateClientRequestBody) (err error) {
	if body.ClientName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("client_name", "body"))
	}
	if body.RedirectUris == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("redirect_uris", "body"))
	}
	return
}

// ValidateUpdateClientRequestBody runs the validations defined on
// update_client_request_body
func ValidateUpdateClientRequestBody(body *UpdateClientRequestBody) (err error) {
	if body.Client == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("client", "body"))
	}
	return
}

// ValidateCreateScopeRequestBody runs the validations defined on
// create_scope_request_body
func ValidateCreateScopeRequestBody(body *CreateScopeRequestBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	return
}
