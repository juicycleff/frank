// Code generated by goa v3.20.0, DO NOT EDIT.
//
// oauth_provider HTTP server
//
// Command:
// $ goa gen github.com/juicycleff/frank/design -o .

package server

import (
	"context"
	"net/http"
	"regexp"

	oauthprovider "github.com/juicycleff/frank/gen/oauth_provider"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
	"goa.design/plugins/v3/cors"
)

// Server lists the oauth_provider service endpoint HTTP handlers.
type Server struct {
	Mounts             []*MountPoint
	Authorize          http.Handler
	Token              http.Handler
	Introspect         http.Handler
	Revoke             http.Handler
	Consent            http.Handler
	Userinfo           http.Handler
	ListClients        http.Handler
	CreateClient       http.Handler
	GetClient          http.Handler
	UpdateClient       http.Handler
	DeleteClient       http.Handler
	RotateClientSecret http.Handler
	ListScopes         http.Handler
	CreateScope        http.Handler
	GetScope           http.Handler
	UpdateScope        http.Handler
	DeleteScope        http.Handler
	OidcConfiguration  http.Handler
	Jwks               http.Handler
	CORS               http.Handler
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the oauth_provider service endpoints
// using the provided encoder and decoder. The handlers are mounted on the
// given mux using the HTTP verb and path defined in the design. errhandler is
// called whenever a response fails to be encoded. formatter is used to format
// errors returned by the service methods prior to encoding. Both errhandler
// and formatter are optional and can be nil.
func New(
	e *oauthprovider.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"Authorize", "GET", "/v1/oauth/authorize"},
			{"Token", "POST", "/v1/oauth/token"},
			{"Introspect", "POST", "/v1/oauth/introspect"},
			{"Revoke", "POST", "/v1/oauth/revoke"},
			{"Consent", "POST", "/v1/oauth/consent"},
			{"Userinfo", "GET", "/v1/oauth/userinfo"},
			{"ListClients", "GET", "/v1/oauth/clients"},
			{"CreateClient", "POST", "/v1/oauth/clients"},
			{"GetClient", "GET", "/v1/oauth/clients/{id}"},
			{"UpdateClient", "PUT", "/v1/oauth/clients/{id}"},
			{"DeleteClient", "DELETE", "/v1/oauth/clients/{id}"},
			{"RotateClientSecret", "POST", "/v1/oauth/clients/{id}/rotate-secret"},
			{"ListScopes", "GET", "/v1/oauth/scopes"},
			{"CreateScope", "POST", "/v1/oauth/scopes"},
			{"GetScope", "GET", "/v1/oauth/scopes/{id}"},
			{"UpdateScope", "PUT", "/v1/oauth/scopes/{id}"},
			{"DeleteScope", "DELETE", "/v1/oauth/scopes/{id}"},
			{"OidcConfiguration", "GET", "/v1/oauth/.well-known/openid-configuration"},
			{"Jwks", "GET", "/v1/oauth/.well-known/jwks.json"},
			{"CORS", "OPTIONS", "/v1/oauth/authorize"},
			{"CORS", "OPTIONS", "/v1/oauth/token"},
			{"CORS", "OPTIONS", "/v1/oauth/introspect"},
			{"CORS", "OPTIONS", "/v1/oauth/revoke"},
			{"CORS", "OPTIONS", "/v1/oauth/consent"},
			{"CORS", "OPTIONS", "/v1/oauth/userinfo"},
			{"CORS", "OPTIONS", "/v1/oauth/clients"},
			{"CORS", "OPTIONS", "/v1/oauth/clients/{id}"},
			{"CORS", "OPTIONS", "/v1/oauth/clients/{id}/rotate-secret"},
			{"CORS", "OPTIONS", "/v1/oauth/scopes"},
			{"CORS", "OPTIONS", "/v1/oauth/scopes/{id}"},
			{"CORS", "OPTIONS", "/v1/oauth/.well-known/openid-configuration"},
			{"CORS", "OPTIONS", "/v1/oauth/.well-known/jwks.json"},
		},
		Authorize:          NewAuthorizeHandler(e.Authorize, mux, decoder, encoder, errhandler, formatter),
		Token:              NewTokenHandler(e.Token, mux, decoder, encoder, errhandler, formatter),
		Introspect:         NewIntrospectHandler(e.Introspect, mux, decoder, encoder, errhandler, formatter),
		Revoke:             NewRevokeHandler(e.Revoke, mux, decoder, encoder, errhandler, formatter),
		Consent:            NewConsentHandler(e.Consent, mux, decoder, encoder, errhandler, formatter),
		Userinfo:           NewUserinfoHandler(e.Userinfo, mux, decoder, encoder, errhandler, formatter),
		ListClients:        NewListClientsHandler(e.ListClients, mux, decoder, encoder, errhandler, formatter),
		CreateClient:       NewCreateClientHandler(e.CreateClient, mux, decoder, encoder, errhandler, formatter),
		GetClient:          NewGetClientHandler(e.GetClient, mux, decoder, encoder, errhandler, formatter),
		UpdateClient:       NewUpdateClientHandler(e.UpdateClient, mux, decoder, encoder, errhandler, formatter),
		DeleteClient:       NewDeleteClientHandler(e.DeleteClient, mux, decoder, encoder, errhandler, formatter),
		RotateClientSecret: NewRotateClientSecretHandler(e.RotateClientSecret, mux, decoder, encoder, errhandler, formatter),
		ListScopes:         NewListScopesHandler(e.ListScopes, mux, decoder, encoder, errhandler, formatter),
		CreateScope:        NewCreateScopeHandler(e.CreateScope, mux, decoder, encoder, errhandler, formatter),
		GetScope:           NewGetScopeHandler(e.GetScope, mux, decoder, encoder, errhandler, formatter),
		UpdateScope:        NewUpdateScopeHandler(e.UpdateScope, mux, decoder, encoder, errhandler, formatter),
		DeleteScope:        NewDeleteScopeHandler(e.DeleteScope, mux, decoder, encoder, errhandler, formatter),
		OidcConfiguration:  NewOidcConfigurationHandler(e.OidcConfiguration, mux, decoder, encoder, errhandler, formatter),
		Jwks:               NewJwksHandler(e.Jwks, mux, decoder, encoder, errhandler, formatter),
		CORS:               NewCORSHandler(),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "oauth_provider" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.Authorize = m(s.Authorize)
	s.Token = m(s.Token)
	s.Introspect = m(s.Introspect)
	s.Revoke = m(s.Revoke)
	s.Consent = m(s.Consent)
	s.Userinfo = m(s.Userinfo)
	s.ListClients = m(s.ListClients)
	s.CreateClient = m(s.CreateClient)
	s.GetClient = m(s.GetClient)
	s.UpdateClient = m(s.UpdateClient)
	s.DeleteClient = m(s.DeleteClient)
	s.RotateClientSecret = m(s.RotateClientSecret)
	s.ListScopes = m(s.ListScopes)
	s.CreateScope = m(s.CreateScope)
	s.GetScope = m(s.GetScope)
	s.UpdateScope = m(s.UpdateScope)
	s.DeleteScope = m(s.DeleteScope)
	s.OidcConfiguration = m(s.OidcConfiguration)
	s.Jwks = m(s.Jwks)
	s.CORS = m(s.CORS)
}

// MethodNames returns the methods served.
func (s *Server) MethodNames() []string { return oauthprovider.MethodNames[:] }

// Mount configures the mux to serve the oauth_provider endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountAuthorizeHandler(mux, h.Authorize)
	MountTokenHandler(mux, h.Token)
	MountIntrospectHandler(mux, h.Introspect)
	MountRevokeHandler(mux, h.Revoke)
	MountConsentHandler(mux, h.Consent)
	MountUserinfoHandler(mux, h.Userinfo)
	MountListClientsHandler(mux, h.ListClients)
	MountCreateClientHandler(mux, h.CreateClient)
	MountGetClientHandler(mux, h.GetClient)
	MountUpdateClientHandler(mux, h.UpdateClient)
	MountDeleteClientHandler(mux, h.DeleteClient)
	MountRotateClientSecretHandler(mux, h.RotateClientSecret)
	MountListScopesHandler(mux, h.ListScopes)
	MountCreateScopeHandler(mux, h.CreateScope)
	MountGetScopeHandler(mux, h.GetScope)
	MountUpdateScopeHandler(mux, h.UpdateScope)
	MountDeleteScopeHandler(mux, h.DeleteScope)
	MountOidcConfigurationHandler(mux, h.OidcConfiguration)
	MountJwksHandler(mux, h.Jwks)
	MountCORSHandler(mux, h.CORS)
}

// Mount configures the mux to serve the oauth_provider endpoints.
func (s *Server) Mount(mux goahttp.Muxer) {
	Mount(mux, s)
}

// MountAuthorizeHandler configures the mux to serve the "oauth_provider"
// service "authorize" endpoint.
func MountAuthorizeHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleOauthProviderOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/v1/oauth/authorize", f)
}

// NewAuthorizeHandler creates a HTTP handler which loads the HTTP request and
// calls the "oauth_provider" service "authorize" endpoint.
func NewAuthorizeHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeAuthorizeRequest(mux, decoder)
		encodeResponse = EncodeAuthorizeResponse(encoder)
		encodeError    = EncodeAuthorizeError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "authorize")
		ctx = context.WithValue(ctx, goa.ServiceKey, "oauth_provider")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountTokenHandler configures the mux to serve the "oauth_provider" service
// "token" endpoint.
func MountTokenHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleOauthProviderOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/v1/oauth/token", f)
}

// NewTokenHandler creates a HTTP handler which loads the HTTP request and
// calls the "oauth_provider" service "token" endpoint.
func NewTokenHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeTokenRequest(mux, decoder)
		encodeResponse = EncodeTokenResponse(encoder)
		encodeError    = EncodeTokenError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "token")
		ctx = context.WithValue(ctx, goa.ServiceKey, "oauth_provider")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountIntrospectHandler configures the mux to serve the "oauth_provider"
// service "introspect" endpoint.
func MountIntrospectHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleOauthProviderOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/v1/oauth/introspect", f)
}

// NewIntrospectHandler creates a HTTP handler which loads the HTTP request and
// calls the "oauth_provider" service "introspect" endpoint.
func NewIntrospectHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeIntrospectRequest(mux, decoder)
		encodeResponse = EncodeIntrospectResponse(encoder)
		encodeError    = EncodeIntrospectError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "introspect")
		ctx = context.WithValue(ctx, goa.ServiceKey, "oauth_provider")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountRevokeHandler configures the mux to serve the "oauth_provider" service
// "revoke" endpoint.
func MountRevokeHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleOauthProviderOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/v1/oauth/revoke", f)
}

// NewRevokeHandler creates a HTTP handler which loads the HTTP request and
// calls the "oauth_provider" service "revoke" endpoint.
func NewRevokeHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeRevokeRequest(mux, decoder)
		encodeResponse = EncodeRevokeResponse(encoder)
		encodeError    = EncodeRevokeError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "revoke")
		ctx = context.WithValue(ctx, goa.ServiceKey, "oauth_provider")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountConsentHandler configures the mux to serve the "oauth_provider" service
// "consent" endpoint.
func MountConsentHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleOauthProviderOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/v1/oauth/consent", f)
}

// NewConsentHandler creates a HTTP handler which loads the HTTP request and
// calls the "oauth_provider" service "consent" endpoint.
func NewConsentHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest = DecodeConsentRequest(mux, decoder)
		encodeError   = EncodeConsentError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "consent")
		ctx = context.WithValue(ctx, goa.ServiceKey, "oauth_provider")
		_, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		http.Redirect(w, r, "/redirect/dest", http.StatusTemporaryRedirect)
	})
}

// MountUserinfoHandler configures the mux to serve the "oauth_provider"
// service "userinfo" endpoint.
func MountUserinfoHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleOauthProviderOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/v1/oauth/userinfo", f)
}

// NewUserinfoHandler creates a HTTP handler which loads the HTTP request and
// calls the "oauth_provider" service "userinfo" endpoint.
func NewUserinfoHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUserinfoRequest(mux, decoder)
		encodeResponse = EncodeUserinfoResponse(encoder)
		encodeError    = EncodeUserinfoError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "userinfo")
		ctx = context.WithValue(ctx, goa.ServiceKey, "oauth_provider")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountListClientsHandler configures the mux to serve the "oauth_provider"
// service "list_clients" endpoint.
func MountListClientsHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleOauthProviderOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/v1/oauth/clients", f)
}

// NewListClientsHandler creates a HTTP handler which loads the HTTP request
// and calls the "oauth_provider" service "list_clients" endpoint.
func NewListClientsHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeListClientsRequest(mux, decoder)
		encodeResponse = EncodeListClientsResponse(encoder)
		encodeError    = EncodeListClientsError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "list_clients")
		ctx = context.WithValue(ctx, goa.ServiceKey, "oauth_provider")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountCreateClientHandler configures the mux to serve the "oauth_provider"
// service "create_client" endpoint.
func MountCreateClientHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleOauthProviderOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/v1/oauth/clients", f)
}

// NewCreateClientHandler creates a HTTP handler which loads the HTTP request
// and calls the "oauth_provider" service "create_client" endpoint.
func NewCreateClientHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeCreateClientRequest(mux, decoder)
		encodeResponse = EncodeCreateClientResponse(encoder)
		encodeError    = EncodeCreateClientError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "create_client")
		ctx = context.WithValue(ctx, goa.ServiceKey, "oauth_provider")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetClientHandler configures the mux to serve the "oauth_provider"
// service "get_client" endpoint.
func MountGetClientHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleOauthProviderOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/v1/oauth/clients/{id}", f)
}

// NewGetClientHandler creates a HTTP handler which loads the HTTP request and
// calls the "oauth_provider" service "get_client" endpoint.
func NewGetClientHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetClientRequest(mux, decoder)
		encodeResponse = EncodeGetClientResponse(encoder)
		encodeError    = EncodeGetClientError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "get_client")
		ctx = context.WithValue(ctx, goa.ServiceKey, "oauth_provider")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountUpdateClientHandler configures the mux to serve the "oauth_provider"
// service "update_client" endpoint.
func MountUpdateClientHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleOauthProviderOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("PUT", "/v1/oauth/clients/{id}", f)
}

// NewUpdateClientHandler creates a HTTP handler which loads the HTTP request
// and calls the "oauth_provider" service "update_client" endpoint.
func NewUpdateClientHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUpdateClientRequest(mux, decoder)
		encodeResponse = EncodeUpdateClientResponse(encoder)
		encodeError    = EncodeUpdateClientError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "update_client")
		ctx = context.WithValue(ctx, goa.ServiceKey, "oauth_provider")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountDeleteClientHandler configures the mux to serve the "oauth_provider"
// service "delete_client" endpoint.
func MountDeleteClientHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleOauthProviderOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("DELETE", "/v1/oauth/clients/{id}", f)
}

// NewDeleteClientHandler creates a HTTP handler which loads the HTTP request
// and calls the "oauth_provider" service "delete_client" endpoint.
func NewDeleteClientHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeDeleteClientRequest(mux, decoder)
		encodeResponse = EncodeDeleteClientResponse(encoder)
		encodeError    = EncodeDeleteClientError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "delete_client")
		ctx = context.WithValue(ctx, goa.ServiceKey, "oauth_provider")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountRotateClientSecretHandler configures the mux to serve the
// "oauth_provider" service "rotate_client_secret" endpoint.
func MountRotateClientSecretHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleOauthProviderOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/v1/oauth/clients/{id}/rotate-secret", f)
}

// NewRotateClientSecretHandler creates a HTTP handler which loads the HTTP
// request and calls the "oauth_provider" service "rotate_client_secret"
// endpoint.
func NewRotateClientSecretHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeRotateClientSecretRequest(mux, decoder)
		encodeResponse = EncodeRotateClientSecretResponse(encoder)
		encodeError    = EncodeRotateClientSecretError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "rotate_client_secret")
		ctx = context.WithValue(ctx, goa.ServiceKey, "oauth_provider")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountListScopesHandler configures the mux to serve the "oauth_provider"
// service "list_scopes" endpoint.
func MountListScopesHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleOauthProviderOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/v1/oauth/scopes", f)
}

// NewListScopesHandler creates a HTTP handler which loads the HTTP request and
// calls the "oauth_provider" service "list_scopes" endpoint.
func NewListScopesHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeListScopesRequest(mux, decoder)
		encodeResponse = EncodeListScopesResponse(encoder)
		encodeError    = EncodeListScopesError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "list_scopes")
		ctx = context.WithValue(ctx, goa.ServiceKey, "oauth_provider")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountCreateScopeHandler configures the mux to serve the "oauth_provider"
// service "create_scope" endpoint.
func MountCreateScopeHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleOauthProviderOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/v1/oauth/scopes", f)
}

// NewCreateScopeHandler creates a HTTP handler which loads the HTTP request
// and calls the "oauth_provider" service "create_scope" endpoint.
func NewCreateScopeHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeCreateScopeRequest(mux, decoder)
		encodeResponse = EncodeCreateScopeResponse(encoder)
		encodeError    = EncodeCreateScopeError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "create_scope")
		ctx = context.WithValue(ctx, goa.ServiceKey, "oauth_provider")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetScopeHandler configures the mux to serve the "oauth_provider"
// service "get_scope" endpoint.
func MountGetScopeHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleOauthProviderOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/v1/oauth/scopes/{id}", f)
}

// NewGetScopeHandler creates a HTTP handler which loads the HTTP request and
// calls the "oauth_provider" service "get_scope" endpoint.
func NewGetScopeHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetScopeRequest(mux, decoder)
		encodeResponse = EncodeGetScopeResponse(encoder)
		encodeError    = EncodeGetScopeError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "get_scope")
		ctx = context.WithValue(ctx, goa.ServiceKey, "oauth_provider")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountUpdateScopeHandler configures the mux to serve the "oauth_provider"
// service "update_scope" endpoint.
func MountUpdateScopeHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleOauthProviderOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("PUT", "/v1/oauth/scopes/{id}", f)
}

// NewUpdateScopeHandler creates a HTTP handler which loads the HTTP request
// and calls the "oauth_provider" service "update_scope" endpoint.
func NewUpdateScopeHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUpdateScopeRequest(mux, decoder)
		encodeResponse = EncodeUpdateScopeResponse(encoder)
		encodeError    = EncodeUpdateScopeError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "update_scope")
		ctx = context.WithValue(ctx, goa.ServiceKey, "oauth_provider")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountDeleteScopeHandler configures the mux to serve the "oauth_provider"
// service "delete_scope" endpoint.
func MountDeleteScopeHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleOauthProviderOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("DELETE", "/v1/oauth/scopes/{id}", f)
}

// NewDeleteScopeHandler creates a HTTP handler which loads the HTTP request
// and calls the "oauth_provider" service "delete_scope" endpoint.
func NewDeleteScopeHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeDeleteScopeRequest(mux, decoder)
		encodeResponse = EncodeDeleteScopeResponse(encoder)
		encodeError    = EncodeDeleteScopeError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "delete_scope")
		ctx = context.WithValue(ctx, goa.ServiceKey, "oauth_provider")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountOidcConfigurationHandler configures the mux to serve the
// "oauth_provider" service "oidc_configuration" endpoint.
func MountOidcConfigurationHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleOauthProviderOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/v1/oauth/.well-known/openid-configuration", f)
}

// NewOidcConfigurationHandler creates a HTTP handler which loads the HTTP
// request and calls the "oauth_provider" service "oidc_configuration" endpoint.
func NewOidcConfigurationHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		encodeResponse = EncodeOidcConfigurationResponse(encoder)
		encodeError    = EncodeOidcConfigurationError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "oidc_configuration")
		ctx = context.WithValue(ctx, goa.ServiceKey, "oauth_provider")
		var err error
		res, err := endpoint(ctx, nil)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountJwksHandler configures the mux to serve the "oauth_provider" service
// "jwks" endpoint.
func MountJwksHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleOauthProviderOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/v1/oauth/.well-known/jwks.json", f)
}

// NewJwksHandler creates a HTTP handler which loads the HTTP request and calls
// the "oauth_provider" service "jwks" endpoint.
func NewJwksHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		encodeResponse = EncodeJwksResponse(encoder)
		encodeError    = EncodeJwksError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "jwks")
		ctx = context.WithValue(ctx, goa.ServiceKey, "oauth_provider")
		var err error
		res, err := endpoint(ctx, nil)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountCORSHandler configures the mux to serve the CORS endpoints for the
// service oauth_provider.
func MountCORSHandler(mux goahttp.Muxer, h http.Handler) {
	h = HandleOauthProviderOrigin(h)
	mux.Handle("OPTIONS", "/v1/oauth/authorize", h.ServeHTTP)
	mux.Handle("OPTIONS", "/v1/oauth/token", h.ServeHTTP)
	mux.Handle("OPTIONS", "/v1/oauth/introspect", h.ServeHTTP)
	mux.Handle("OPTIONS", "/v1/oauth/revoke", h.ServeHTTP)
	mux.Handle("OPTIONS", "/v1/oauth/consent", h.ServeHTTP)
	mux.Handle("OPTIONS", "/v1/oauth/userinfo", h.ServeHTTP)
	mux.Handle("OPTIONS", "/v1/oauth/clients", h.ServeHTTP)
	mux.Handle("OPTIONS", "/v1/oauth/clients/{id}", h.ServeHTTP)
	mux.Handle("OPTIONS", "/v1/oauth/clients/{id}/rotate-secret", h.ServeHTTP)
	mux.Handle("OPTIONS", "/v1/oauth/scopes", h.ServeHTTP)
	mux.Handle("OPTIONS", "/v1/oauth/scopes/{id}", h.ServeHTTP)
	mux.Handle("OPTIONS", "/v1/oauth/.well-known/openid-configuration", h.ServeHTTP)
	mux.Handle("OPTIONS", "/v1/oauth/.well-known/jwks.json", h.ServeHTTP)
}

// NewCORSHandler creates a HTTP handler which returns a simple 204 response.
func NewCORSHandler() http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		w.WriteHeader(204)
	})
}

// HandleOauthProviderOrigin applies the CORS response headers corresponding to
// the origin for the service oauth_provider.
func HandleOauthProviderOrigin(h http.Handler) http.Handler {
	spec1 := regexp.MustCompile(".*localhost.*")
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		origin := r.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			h.ServeHTTP(w, r)
			return
		}
		if cors.MatchOrigin(origin, "*.frank.com") {
			w.Header().Set("Access-Control-Allow-Origin", origin)
			w.Header().Set("Vary", "Origin")
			w.Header().Set("Access-Control-Max-Age", "100")
			w.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := r.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				w.Header().Set("Access-Control-Allow-Headers", "X-Shared-Secret, X-Api-Version")
				w.WriteHeader(204)
				return
			}
			h.ServeHTTP(w, r)
			return
		}
		if cors.MatchOriginRegexp(origin, spec1) {
			w.Header().Set("Access-Control-Allow-Origin", origin)
			w.Header().Set("Vary", "Origin")
			w.Header().Set("Access-Control-Expose-Headers", "X-Request-Id")
			w.Header().Set("Access-Control-Max-Age", "600")
			w.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := r.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				w.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS")
				w.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
				w.WriteHeader(204)
				return
			}
			h.ServeHTTP(w, r)
			return
		}
		if cors.MatchOrigin(origin, "localhost") {
			w.Header().Set("Access-Control-Allow-Origin", origin)
			w.Header().Set("Vary", "Origin")
			if acrm := r.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				w.WriteHeader(204)
				return
			}
			h.ServeHTTP(w, r)
			return
		}
		h.ServeHTTP(w, r)
		return
	})
}
