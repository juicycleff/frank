// Code generated by goa v3.20.0, DO NOT EDIT.
//
// oauth_provider client HTTP transport
//
// Command:
// $ goa gen github.com/juicycleff/frank/design -o .

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the oauth_provider service endpoint HTTP clients.
type Client struct {
	// Authorize Doer is the HTTP client used to make requests to the authorize
	// endpoint.
	AuthorizeDoer goahttp.Doer

	// Token Doer is the HTTP client used to make requests to the token endpoint.
	TokenDoer goahttp.Doer

	// Introspect Doer is the HTTP client used to make requests to the introspect
	// endpoint.
	IntrospectDoer goahttp.Doer

	// Revoke Doer is the HTTP client used to make requests to the revoke endpoint.
	RevokeDoer goahttp.Doer

	// Consent Doer is the HTTP client used to make requests to the consent
	// endpoint.
	ConsentDoer goahttp.Doer

	// Userinfo Doer is the HTTP client used to make requests to the userinfo
	// endpoint.
	UserinfoDoer goahttp.Doer

	// ListClients Doer is the HTTP client used to make requests to the
	// list_clients endpoint.
	ListClientsDoer goahttp.Doer

	// CreateClient Doer is the HTTP client used to make requests to the
	// create_client endpoint.
	CreateClientDoer goahttp.Doer

	// GetClient Doer is the HTTP client used to make requests to the get_client
	// endpoint.
	GetClientDoer goahttp.Doer

	// UpdateClient Doer is the HTTP client used to make requests to the
	// update_client endpoint.
	UpdateClientDoer goahttp.Doer

	// DeleteClient Doer is the HTTP client used to make requests to the
	// delete_client endpoint.
	DeleteClientDoer goahttp.Doer

	// RotateClientSecret Doer is the HTTP client used to make requests to the
	// rotate_client_secret endpoint.
	RotateClientSecretDoer goahttp.Doer

	// ListScopes Doer is the HTTP client used to make requests to the list_scopes
	// endpoint.
	ListScopesDoer goahttp.Doer

	// CreateScope Doer is the HTTP client used to make requests to the
	// create_scope endpoint.
	CreateScopeDoer goahttp.Doer

	// GetScope Doer is the HTTP client used to make requests to the get_scope
	// endpoint.
	GetScopeDoer goahttp.Doer

	// UpdateScope Doer is the HTTP client used to make requests to the
	// update_scope endpoint.
	UpdateScopeDoer goahttp.Doer

	// DeleteScope Doer is the HTTP client used to make requests to the
	// delete_scope endpoint.
	DeleteScopeDoer goahttp.Doer

	// OidcConfiguration Doer is the HTTP client used to make requests to the
	// oidc_configuration endpoint.
	OidcConfigurationDoer goahttp.Doer

	// Jwks Doer is the HTTP client used to make requests to the jwks endpoint.
	JwksDoer goahttp.Doer

	// CORS Doer is the HTTP client used to make requests to the  endpoint.
	CORSDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the oauth_provider service
// servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		AuthorizeDoer:          doer,
		TokenDoer:              doer,
		IntrospectDoer:         doer,
		RevokeDoer:             doer,
		ConsentDoer:            doer,
		UserinfoDoer:           doer,
		ListClientsDoer:        doer,
		CreateClientDoer:       doer,
		GetClientDoer:          doer,
		UpdateClientDoer:       doer,
		DeleteClientDoer:       doer,
		RotateClientSecretDoer: doer,
		ListScopesDoer:         doer,
		CreateScopeDoer:        doer,
		GetScopeDoer:           doer,
		UpdateScopeDoer:        doer,
		DeleteScopeDoer:        doer,
		OidcConfigurationDoer:  doer,
		JwksDoer:               doer,
		CORSDoer:               doer,
		RestoreResponseBody:    restoreBody,
		scheme:                 scheme,
		host:                   host,
		decoder:                dec,
		encoder:                enc,
	}
}

// Authorize returns an endpoint that makes HTTP requests to the oauth_provider
// service authorize server.
func (c *Client) Authorize() goa.Endpoint {
	var (
		encodeRequest  = EncodeAuthorizeRequest(c.encoder)
		decodeResponse = DecodeAuthorizeResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildAuthorizeRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.AuthorizeDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("oauth_provider", "authorize", err)
		}
		return decodeResponse(resp)
	}
}

// Token returns an endpoint that makes HTTP requests to the oauth_provider
// service token server.
func (c *Client) Token() goa.Endpoint {
	var (
		encodeRequest  = EncodeTokenRequest(c.encoder)
		decodeResponse = DecodeTokenResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildTokenRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.TokenDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("oauth_provider", "token", err)
		}
		return decodeResponse(resp)
	}
}

// Introspect returns an endpoint that makes HTTP requests to the
// oauth_provider service introspect server.
func (c *Client) Introspect() goa.Endpoint {
	var (
		encodeRequest  = EncodeIntrospectRequest(c.encoder)
		decodeResponse = DecodeIntrospectResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildIntrospectRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.IntrospectDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("oauth_provider", "introspect", err)
		}
		return decodeResponse(resp)
	}
}

// Revoke returns an endpoint that makes HTTP requests to the oauth_provider
// service revoke server.
func (c *Client) Revoke() goa.Endpoint {
	var (
		encodeRequest  = EncodeRevokeRequest(c.encoder)
		decodeResponse = DecodeRevokeResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildRevokeRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.RevokeDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("oauth_provider", "revoke", err)
		}
		return decodeResponse(resp)
	}
}

// Consent returns an endpoint that makes HTTP requests to the oauth_provider
// service consent server.
func (c *Client) Consent() goa.Endpoint {
	var (
		encodeRequest  = EncodeConsentRequest(c.encoder)
		decodeResponse = DecodeConsentResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildConsentRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ConsentDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("oauth_provider", "consent", err)
		}
		return decodeResponse(resp)
	}
}

// Userinfo returns an endpoint that makes HTTP requests to the oauth_provider
// service userinfo server.
func (c *Client) Userinfo() goa.Endpoint {
	var (
		encodeRequest  = EncodeUserinfoRequest(c.encoder)
		decodeResponse = DecodeUserinfoResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildUserinfoRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UserinfoDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("oauth_provider", "userinfo", err)
		}
		return decodeResponse(resp)
	}
}

// ListClients returns an endpoint that makes HTTP requests to the
// oauth_provider service list_clients server.
func (c *Client) ListClients() goa.Endpoint {
	var (
		encodeRequest  = EncodeListClientsRequest(c.encoder)
		decodeResponse = DecodeListClientsResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildListClientsRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ListClientsDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("oauth_provider", "list_clients", err)
		}
		return decodeResponse(resp)
	}
}

// CreateClient returns an endpoint that makes HTTP requests to the
// oauth_provider service create_client server.
func (c *Client) CreateClient() goa.Endpoint {
	var (
		encodeRequest  = EncodeCreateClientRequest(c.encoder)
		decodeResponse = DecodeCreateClientResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildCreateClientRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CreateClientDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("oauth_provider", "create_client", err)
		}
		return decodeResponse(resp)
	}
}

// GetClient returns an endpoint that makes HTTP requests to the oauth_provider
// service get_client server.
func (c *Client) GetClient() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetClientRequest(c.encoder)
		decodeResponse = DecodeGetClientResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGetClientRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetClientDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("oauth_provider", "get_client", err)
		}
		return decodeResponse(resp)
	}
}

// UpdateClient returns an endpoint that makes HTTP requests to the
// oauth_provider service update_client server.
func (c *Client) UpdateClient() goa.Endpoint {
	var (
		encodeRequest  = EncodeUpdateClientRequest(c.encoder)
		decodeResponse = DecodeUpdateClientResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildUpdateClientRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UpdateClientDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("oauth_provider", "update_client", err)
		}
		return decodeResponse(resp)
	}
}

// DeleteClient returns an endpoint that makes HTTP requests to the
// oauth_provider service delete_client server.
func (c *Client) DeleteClient() goa.Endpoint {
	var (
		encodeRequest  = EncodeDeleteClientRequest(c.encoder)
		decodeResponse = DecodeDeleteClientResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildDeleteClientRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DeleteClientDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("oauth_provider", "delete_client", err)
		}
		return decodeResponse(resp)
	}
}

// RotateClientSecret returns an endpoint that makes HTTP requests to the
// oauth_provider service rotate_client_secret server.
func (c *Client) RotateClientSecret() goa.Endpoint {
	var (
		encodeRequest  = EncodeRotateClientSecretRequest(c.encoder)
		decodeResponse = DecodeRotateClientSecretResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildRotateClientSecretRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.RotateClientSecretDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("oauth_provider", "rotate_client_secret", err)
		}
		return decodeResponse(resp)
	}
}

// ListScopes returns an endpoint that makes HTTP requests to the
// oauth_provider service list_scopes server.
func (c *Client) ListScopes() goa.Endpoint {
	var (
		encodeRequest  = EncodeListScopesRequest(c.encoder)
		decodeResponse = DecodeListScopesResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildListScopesRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ListScopesDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("oauth_provider", "list_scopes", err)
		}
		return decodeResponse(resp)
	}
}

// CreateScope returns an endpoint that makes HTTP requests to the
// oauth_provider service create_scope server.
func (c *Client) CreateScope() goa.Endpoint {
	var (
		encodeRequest  = EncodeCreateScopeRequest(c.encoder)
		decodeResponse = DecodeCreateScopeResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildCreateScopeRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CreateScopeDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("oauth_provider", "create_scope", err)
		}
		return decodeResponse(resp)
	}
}

// GetScope returns an endpoint that makes HTTP requests to the oauth_provider
// service get_scope server.
func (c *Client) GetScope() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetScopeRequest(c.encoder)
		decodeResponse = DecodeGetScopeResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGetScopeRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetScopeDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("oauth_provider", "get_scope", err)
		}
		return decodeResponse(resp)
	}
}

// UpdateScope returns an endpoint that makes HTTP requests to the
// oauth_provider service update_scope server.
func (c *Client) UpdateScope() goa.Endpoint {
	var (
		encodeRequest  = EncodeUpdateScopeRequest(c.encoder)
		decodeResponse = DecodeUpdateScopeResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildUpdateScopeRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UpdateScopeDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("oauth_provider", "update_scope", err)
		}
		return decodeResponse(resp)
	}
}

// DeleteScope returns an endpoint that makes HTTP requests to the
// oauth_provider service delete_scope server.
func (c *Client) DeleteScope() goa.Endpoint {
	var (
		encodeRequest  = EncodeDeleteScopeRequest(c.encoder)
		decodeResponse = DecodeDeleteScopeResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildDeleteScopeRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DeleteScopeDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("oauth_provider", "delete_scope", err)
		}
		return decodeResponse(resp)
	}
}

// OidcConfiguration returns an endpoint that makes HTTP requests to the
// oauth_provider service oidc_configuration server.
func (c *Client) OidcConfiguration() goa.Endpoint {
	var (
		decodeResponse = DecodeOidcConfigurationResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildOidcConfigurationRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.OidcConfigurationDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("oauth_provider", "oidc_configuration", err)
		}
		return decodeResponse(resp)
	}
}

// Jwks returns an endpoint that makes HTTP requests to the oauth_provider
// service jwks server.
func (c *Client) Jwks() goa.Endpoint {
	var (
		decodeResponse = DecodeJwksResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildJwksRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.JwksDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("oauth_provider", "jwks", err)
		}
		return decodeResponse(resp)
	}
}
