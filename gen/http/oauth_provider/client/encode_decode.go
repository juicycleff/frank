// Code generated by goa v3.20.0, DO NOT EDIT.
//
// oauth_provider HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/juicycleff/frank/design -o .

package client

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	designtypes "github.com/juicycleff/frank/gen/designtypes"
	oauthprovider "github.com/juicycleff/frank/gen/oauth_provider"
	goahttp "goa.design/goa/v3/http"
)

// BuildAuthorizeRequest instantiates a HTTP request object with method and
// path set to call the "oauth_provider" service "authorize" endpoint
func (c *Client) BuildAuthorizeRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: AuthorizeOauthProviderPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("oauth_provider", "authorize", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeAuthorizeRequest returns an encoder for requests sent to the
// oauth_provider authorize server.
func EncodeAuthorizeRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*oauthprovider.AuthorizePayload)
		if !ok {
			return goahttp.ErrInvalidType("oauth_provider", "authorize", "*oauthprovider.AuthorizePayload", v)
		}
		if p.Oauth2 != nil {
			head := *p.Oauth2
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		if p.XAPIKey != nil {
			head := *p.XAPIKey
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		if p.JWT != nil {
			head := *p.JWT
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		values := req.URL.Query()
		values.Add("client_id", p.ClientID)
		values.Add("response_type", p.ResponseType)
		values.Add("redirect_uri", p.RedirectURI)
		if p.Scope != nil {
			values.Add("scope", *p.Scope)
		}
		if p.State != nil {
			values.Add("state", *p.State)
		}
		if p.CodeChallenge != nil {
			values.Add("code_challenge", *p.CodeChallenge)
		}
		if p.CodeChallengeMethod != nil {
			values.Add("code_challenge_method", *p.CodeChallengeMethod)
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeAuthorizeResponse returns a decoder for responses returned by the
// oauth_provider authorize endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeAuthorizeResponse may return the following errors:
//   - "bad_request" (type *oauthprovider.BadRequestError): http.StatusBadRequest
//   - "conflict" (type *oauthprovider.ConflictError): http.StatusConflict
//   - "forbidden" (type *oauthprovider.ForbiddenError): http.StatusForbidden
//   - "internal_error" (type *oauthprovider.InternalServerError): http.StatusInternalServerError
//   - "not_found" (type *oauthprovider.NotFoundError): http.StatusNotFound
//   - "unauthorized" (type *oauthprovider.UnauthorizedError): http.StatusUnauthorized
//   - error: internal error
func DecodeAuthorizeResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "authorize", err)
			}
			return body, nil
		case http.StatusBadRequest:
			var (
				body AuthorizeBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "authorize", err)
			}
			err = ValidateAuthorizeBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "authorize", err)
			}
			return nil, NewAuthorizeBadRequest(&body)
		case http.StatusConflict:
			var (
				body AuthorizeConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "authorize", err)
			}
			err = ValidateAuthorizeConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "authorize", err)
			}
			return nil, NewAuthorizeConflict(&body)
		case http.StatusForbidden:
			var (
				body AuthorizeForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "authorize", err)
			}
			err = ValidateAuthorizeForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "authorize", err)
			}
			return nil, NewAuthorizeForbidden(&body)
		case http.StatusInternalServerError:
			var (
				body AuthorizeInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "authorize", err)
			}
			err = ValidateAuthorizeInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "authorize", err)
			}
			return nil, NewAuthorizeInternalError(&body)
		case http.StatusNotFound:
			var (
				body AuthorizeNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "authorize", err)
			}
			err = ValidateAuthorizeNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "authorize", err)
			}
			return nil, NewAuthorizeNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body AuthorizeUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "authorize", err)
			}
			err = ValidateAuthorizeUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "authorize", err)
			}
			return nil, NewAuthorizeUnauthorized(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("oauth_provider", "authorize", resp.StatusCode, string(body))
		}
	}
}

// BuildTokenRequest instantiates a HTTP request object with method and path
// set to call the "oauth_provider" service "token" endpoint
func (c *Client) BuildTokenRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: TokenOauthProviderPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("oauth_provider", "token", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeTokenRequest returns an encoder for requests sent to the
// oauth_provider token server.
func EncodeTokenRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*oauthprovider.TokenPayload)
		if !ok {
			return goahttp.ErrInvalidType("oauth_provider", "token", "*oauthprovider.TokenPayload", v)
		}
		if p.Oauth2 != nil {
			head := *p.Oauth2
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		if p.XAPIKey != nil {
			head := *p.XAPIKey
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		if p.JWT != nil {
			head := *p.JWT
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		values := req.URL.Query()
		values.Add("grant_type", p.GrantType)
		if p.Code != nil {
			values.Add("code", *p.Code)
		}
		if p.RedirectURI != nil {
			values.Add("redirect_uri", *p.RedirectURI)
		}
		if p.ClientID != nil {
			values.Add("client_id", *p.ClientID)
		}
		if p.ClientSecret != nil {
			values.Add("client_secret", *p.ClientSecret)
		}
		if p.RefreshToken != nil {
			values.Add("refresh_token", *p.RefreshToken)
		}
		if p.CodeVerifier != nil {
			values.Add("code_verifier", *p.CodeVerifier)
		}
		if p.Username != nil {
			values.Add("username", *p.Username)
		}
		if p.Password != nil {
			values.Add("password", *p.Password)
		}
		if p.Scope != nil {
			values.Add("scope", *p.Scope)
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeTokenResponse returns a decoder for responses returned by the
// oauth_provider token endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeTokenResponse may return the following errors:
//   - "bad_request" (type *oauthprovider.BadRequestError): http.StatusBadRequest
//   - "conflict" (type *oauthprovider.ConflictError): http.StatusConflict
//   - "forbidden" (type *oauthprovider.ForbiddenError): http.StatusForbidden
//   - "internal_error" (type *oauthprovider.InternalServerError): http.StatusInternalServerError
//   - "not_found" (type *oauthprovider.NotFoundError): http.StatusNotFound
//   - "unauthorized" (type *oauthprovider.UnauthorizedError): http.StatusUnauthorized
//   - error: internal error
func DecodeTokenResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body TokenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "token", err)
			}
			err = ValidateTokenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "token", err)
			}
			res := NewTokenResultOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body TokenBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "token", err)
			}
			err = ValidateTokenBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "token", err)
			}
			return nil, NewTokenBadRequest(&body)
		case http.StatusConflict:
			var (
				body TokenConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "token", err)
			}
			err = ValidateTokenConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "token", err)
			}
			return nil, NewTokenConflict(&body)
		case http.StatusForbidden:
			var (
				body TokenForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "token", err)
			}
			err = ValidateTokenForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "token", err)
			}
			return nil, NewTokenForbidden(&body)
		case http.StatusInternalServerError:
			var (
				body TokenInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "token", err)
			}
			err = ValidateTokenInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "token", err)
			}
			return nil, NewTokenInternalError(&body)
		case http.StatusNotFound:
			var (
				body TokenNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "token", err)
			}
			err = ValidateTokenNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "token", err)
			}
			return nil, NewTokenNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body TokenUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "token", err)
			}
			err = ValidateTokenUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "token", err)
			}
			return nil, NewTokenUnauthorized(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("oauth_provider", "token", resp.StatusCode, string(body))
		}
	}
}

// BuildIntrospectRequest instantiates a HTTP request object with method and
// path set to call the "oauth_provider" service "introspect" endpoint
func (c *Client) BuildIntrospectRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: IntrospectOauthProviderPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("oauth_provider", "introspect", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeIntrospectRequest returns an encoder for requests sent to the
// oauth_provider introspect server.
func EncodeIntrospectRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*oauthprovider.IntrospectPayload)
		if !ok {
			return goahttp.ErrInvalidType("oauth_provider", "introspect", "*oauthprovider.IntrospectPayload", v)
		}
		if p.Oauth2 != nil {
			head := *p.Oauth2
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		if p.XAPIKey != nil {
			head := *p.XAPIKey
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		if p.JWT != nil {
			head := *p.JWT
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		values := req.URL.Query()
		values.Add("token", p.Token)
		if p.TokenTypeHint != nil {
			values.Add("token_type_hint", *p.TokenTypeHint)
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeIntrospectResponse returns a decoder for responses returned by the
// oauth_provider introspect endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeIntrospectResponse may return the following errors:
//   - "bad_request" (type *oauthprovider.BadRequestError): http.StatusBadRequest
//   - "conflict" (type *oauthprovider.ConflictError): http.StatusConflict
//   - "forbidden" (type *oauthprovider.ForbiddenError): http.StatusForbidden
//   - "internal_error" (type *oauthprovider.InternalServerError): http.StatusInternalServerError
//   - "not_found" (type *oauthprovider.NotFoundError): http.StatusNotFound
//   - "unauthorized" (type *oauthprovider.UnauthorizedError): http.StatusUnauthorized
//   - error: internal error
func DecodeIntrospectResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body IntrospectResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "introspect", err)
			}
			err = ValidateIntrospectResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "introspect", err)
			}
			res := NewIntrospectResultOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body IntrospectBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "introspect", err)
			}
			err = ValidateIntrospectBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "introspect", err)
			}
			return nil, NewIntrospectBadRequest(&body)
		case http.StatusConflict:
			var (
				body IntrospectConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "introspect", err)
			}
			err = ValidateIntrospectConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "introspect", err)
			}
			return nil, NewIntrospectConflict(&body)
		case http.StatusForbidden:
			var (
				body IntrospectForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "introspect", err)
			}
			err = ValidateIntrospectForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "introspect", err)
			}
			return nil, NewIntrospectForbidden(&body)
		case http.StatusInternalServerError:
			var (
				body IntrospectInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "introspect", err)
			}
			err = ValidateIntrospectInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "introspect", err)
			}
			return nil, NewIntrospectInternalError(&body)
		case http.StatusNotFound:
			var (
				body IntrospectNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "introspect", err)
			}
			err = ValidateIntrospectNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "introspect", err)
			}
			return nil, NewIntrospectNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body IntrospectUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "introspect", err)
			}
			err = ValidateIntrospectUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "introspect", err)
			}
			return nil, NewIntrospectUnauthorized(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("oauth_provider", "introspect", resp.StatusCode, string(body))
		}
	}
}

// BuildRevokeRequest instantiates a HTTP request object with method and path
// set to call the "oauth_provider" service "revoke" endpoint
func (c *Client) BuildRevokeRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: RevokeOauthProviderPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("oauth_provider", "revoke", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeRevokeRequest returns an encoder for requests sent to the
// oauth_provider revoke server.
func EncodeRevokeRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*oauthprovider.RevokePayload)
		if !ok {
			return goahttp.ErrInvalidType("oauth_provider", "revoke", "*oauthprovider.RevokePayload", v)
		}
		if p.Oauth2 != nil {
			head := *p.Oauth2
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		if p.XAPIKey != nil {
			head := *p.XAPIKey
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		if p.JWT != nil {
			head := *p.JWT
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		values := req.URL.Query()
		values.Add("token", p.Token)
		if p.TokenTypeHint != nil {
			values.Add("token_type_hint", *p.TokenTypeHint)
		}
		if p.ClientID != nil {
			values.Add("client_id", *p.ClientID)
		}
		if p.ClientSecret != nil {
			values.Add("client_secret", *p.ClientSecret)
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeRevokeResponse returns a decoder for responses returned by the
// oauth_provider revoke endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeRevokeResponse may return the following errors:
//   - "bad_request" (type *oauthprovider.BadRequestError): http.StatusBadRequest
//   - "conflict" (type *oauthprovider.ConflictError): http.StatusConflict
//   - "forbidden" (type *oauthprovider.ForbiddenError): http.StatusForbidden
//   - "internal_error" (type *oauthprovider.InternalServerError): http.StatusInternalServerError
//   - "not_found" (type *oauthprovider.NotFoundError): http.StatusNotFound
//   - "unauthorized" (type *oauthprovider.UnauthorizedError): http.StatusUnauthorized
//   - error: internal error
func DecodeRevokeResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		case http.StatusBadRequest:
			var (
				body RevokeBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "revoke", err)
			}
			err = ValidateRevokeBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "revoke", err)
			}
			return nil, NewRevokeBadRequest(&body)
		case http.StatusConflict:
			var (
				body RevokeConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "revoke", err)
			}
			err = ValidateRevokeConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "revoke", err)
			}
			return nil, NewRevokeConflict(&body)
		case http.StatusForbidden:
			var (
				body RevokeForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "revoke", err)
			}
			err = ValidateRevokeForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "revoke", err)
			}
			return nil, NewRevokeForbidden(&body)
		case http.StatusInternalServerError:
			var (
				body RevokeInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "revoke", err)
			}
			err = ValidateRevokeInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "revoke", err)
			}
			return nil, NewRevokeInternalError(&body)
		case http.StatusNotFound:
			var (
				body RevokeNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "revoke", err)
			}
			err = ValidateRevokeNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "revoke", err)
			}
			return nil, NewRevokeNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body RevokeUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "revoke", err)
			}
			err = ValidateRevokeUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "revoke", err)
			}
			return nil, NewRevokeUnauthorized(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("oauth_provider", "revoke", resp.StatusCode, string(body))
		}
	}
}

// BuildConsentRequest instantiates a HTTP request object with method and path
// set to call the "oauth_provider" service "consent" endpoint
func (c *Client) BuildConsentRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ConsentOauthProviderPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("oauth_provider", "consent", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeConsentRequest returns an encoder for requests sent to the
// oauth_provider consent server.
func EncodeConsentRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*oauthprovider.ConsentPayload)
		if !ok {
			return goahttp.ErrInvalidType("oauth_provider", "consent", "*oauthprovider.ConsentPayload", v)
		}
		if p.JWT != nil {
			head := *p.JWT
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		body := NewConsentRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("oauth_provider", "consent", err)
		}
		return nil
	}
}

// DecodeConsentResponse returns a decoder for responses returned by the
// oauth_provider consent endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeConsentResponse may return the following errors:
//   - "bad_request" (type *oauthprovider.BadRequestError): http.StatusBadRequest
//   - "conflict" (type *oauthprovider.ConflictError): http.StatusConflict
//   - "forbidden" (type *oauthprovider.ForbiddenError): http.StatusForbidden
//   - "internal_error" (type *oauthprovider.InternalServerError): http.StatusInternalServerError
//   - "not_found" (type *oauthprovider.NotFoundError): http.StatusNotFound
//   - "unauthorized" (type *oauthprovider.UnauthorizedError): http.StatusUnauthorized
//   - error: internal error
func DecodeConsentResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusTemporaryRedirect:
			var (
				body ConsentResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "consent", err)
			}
			err = ValidateConsentResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "consent", err)
			}
			res := NewConsentResultTemporaryRedirect(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body ConsentBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "consent", err)
			}
			err = ValidateConsentBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "consent", err)
			}
			return nil, NewConsentBadRequest(&body)
		case http.StatusConflict:
			var (
				body ConsentConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "consent", err)
			}
			err = ValidateConsentConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "consent", err)
			}
			return nil, NewConsentConflict(&body)
		case http.StatusForbidden:
			var (
				body ConsentForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "consent", err)
			}
			err = ValidateConsentForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "consent", err)
			}
			return nil, NewConsentForbidden(&body)
		case http.StatusInternalServerError:
			var (
				body ConsentInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "consent", err)
			}
			err = ValidateConsentInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "consent", err)
			}
			return nil, NewConsentInternalError(&body)
		case http.StatusNotFound:
			var (
				body ConsentNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "consent", err)
			}
			err = ValidateConsentNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "consent", err)
			}
			return nil, NewConsentNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body ConsentUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "consent", err)
			}
			err = ValidateConsentUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "consent", err)
			}
			return nil, NewConsentUnauthorized(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("oauth_provider", "consent", resp.StatusCode, string(body))
		}
	}
}

// BuildUserinfoRequest instantiates a HTTP request object with method and path
// set to call the "oauth_provider" service "userinfo" endpoint
func (c *Client) BuildUserinfoRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UserinfoOauthProviderPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("oauth_provider", "userinfo", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUserinfoRequest returns an encoder for requests sent to the
// oauth_provider userinfo server.
func EncodeUserinfoRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*oauthprovider.UserinfoPayload)
		if !ok {
			return goahttp.ErrInvalidType("oauth_provider", "userinfo", "*oauthprovider.UserinfoPayload", v)
		}
		if p.JWT != nil {
			head := *p.JWT
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeUserinfoResponse returns a decoder for responses returned by the
// oauth_provider userinfo endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeUserinfoResponse may return the following errors:
//   - "bad_request" (type *oauthprovider.BadRequestError): http.StatusBadRequest
//   - "conflict" (type *oauthprovider.ConflictError): http.StatusConflict
//   - "forbidden" (type *oauthprovider.ForbiddenError): http.StatusForbidden
//   - "internal_error" (type *oauthprovider.InternalServerError): http.StatusInternalServerError
//   - "not_found" (type *oauthprovider.NotFoundError): http.StatusNotFound
//   - "unauthorized" (type *oauthprovider.UnauthorizedError): http.StatusUnauthorized
//   - error: internal error
func DecodeUserinfoResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body UserinfoResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "userinfo", err)
			}
			err = ValidateUserinfoResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "userinfo", err)
			}
			res := NewUserinfoResultOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body UserinfoBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "userinfo", err)
			}
			err = ValidateUserinfoBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "userinfo", err)
			}
			return nil, NewUserinfoBadRequest(&body)
		case http.StatusConflict:
			var (
				body UserinfoConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "userinfo", err)
			}
			err = ValidateUserinfoConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "userinfo", err)
			}
			return nil, NewUserinfoConflict(&body)
		case http.StatusForbidden:
			var (
				body UserinfoForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "userinfo", err)
			}
			err = ValidateUserinfoForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "userinfo", err)
			}
			return nil, NewUserinfoForbidden(&body)
		case http.StatusInternalServerError:
			var (
				body UserinfoInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "userinfo", err)
			}
			err = ValidateUserinfoInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "userinfo", err)
			}
			return nil, NewUserinfoInternalError(&body)
		case http.StatusNotFound:
			var (
				body UserinfoNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "userinfo", err)
			}
			err = ValidateUserinfoNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "userinfo", err)
			}
			return nil, NewUserinfoNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body UserinfoUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "userinfo", err)
			}
			err = ValidateUserinfoUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "userinfo", err)
			}
			return nil, NewUserinfoUnauthorized(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("oauth_provider", "userinfo", resp.StatusCode, string(body))
		}
	}
}

// BuildListClientsRequest instantiates a HTTP request object with method and
// path set to call the "oauth_provider" service "list_clients" endpoint
func (c *Client) BuildListClientsRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListClientsOauthProviderPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("oauth_provider", "list_clients", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeListClientsRequest returns an encoder for requests sent to the
// oauth_provider list_clients server.
func EncodeListClientsRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*oauthprovider.ListClientsPayload)
		if !ok {
			return goahttp.ErrInvalidType("oauth_provider", "list_clients", "*oauthprovider.ListClientsPayload", v)
		}
		if p.JWT != nil {
			head := *p.JWT
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		values := req.URL.Query()
		values.Add("offset", fmt.Sprintf("%v", p.Offset))
		values.Add("limit", fmt.Sprintf("%v", p.Limit))
		if p.OrganizationID != nil {
			values.Add("organization_id", *p.OrganizationID)
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeListClientsResponse returns a decoder for responses returned by the
// oauth_provider list_clients endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeListClientsResponse may return the following errors:
//   - "bad_request" (type *oauthprovider.BadRequestError): http.StatusBadRequest
//   - "conflict" (type *oauthprovider.ConflictError): http.StatusConflict
//   - "forbidden" (type *oauthprovider.ForbiddenError): http.StatusForbidden
//   - "internal_error" (type *oauthprovider.InternalServerError): http.StatusInternalServerError
//   - "not_found" (type *oauthprovider.NotFoundError): http.StatusNotFound
//   - "unauthorized" (type *oauthprovider.UnauthorizedError): http.StatusUnauthorized
//   - error: internal error
func DecodeListClientsResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListClientsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "list_clients", err)
			}
			err = ValidateListClientsResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "list_clients", err)
			}
			res := NewListClientsResultOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body ListClientsBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "list_clients", err)
			}
			err = ValidateListClientsBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "list_clients", err)
			}
			return nil, NewListClientsBadRequest(&body)
		case http.StatusConflict:
			var (
				body ListClientsConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "list_clients", err)
			}
			err = ValidateListClientsConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "list_clients", err)
			}
			return nil, NewListClientsConflict(&body)
		case http.StatusForbidden:
			var (
				body ListClientsForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "list_clients", err)
			}
			err = ValidateListClientsForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "list_clients", err)
			}
			return nil, NewListClientsForbidden(&body)
		case http.StatusInternalServerError:
			var (
				body ListClientsInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "list_clients", err)
			}
			err = ValidateListClientsInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "list_clients", err)
			}
			return nil, NewListClientsInternalError(&body)
		case http.StatusNotFound:
			var (
				body ListClientsNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "list_clients", err)
			}
			err = ValidateListClientsNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "list_clients", err)
			}
			return nil, NewListClientsNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body ListClientsUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "list_clients", err)
			}
			err = ValidateListClientsUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "list_clients", err)
			}
			return nil, NewListClientsUnauthorized(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("oauth_provider", "list_clients", resp.StatusCode, string(body))
		}
	}
}

// BuildCreateClientRequest instantiates a HTTP request object with method and
// path set to call the "oauth_provider" service "create_client" endpoint
func (c *Client) BuildCreateClientRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateClientOauthProviderPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("oauth_provider", "create_client", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateClientRequest returns an encoder for requests sent to the
// oauth_provider create_client server.
func EncodeCreateClientRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*oauthprovider.CreateClientPayload)
		if !ok {
			return goahttp.ErrInvalidType("oauth_provider", "create_client", "*oauthprovider.CreateClientPayload", v)
		}
		if p.JWT != nil {
			head := *p.JWT
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		body := NewCreateClientRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("oauth_provider", "create_client", err)
		}
		return nil
	}
}

// DecodeCreateClientResponse returns a decoder for responses returned by the
// oauth_provider create_client endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeCreateClientResponse may return the following errors:
//   - "bad_request" (type *oauthprovider.BadRequestError): http.StatusBadRequest
//   - "conflict" (type *oauthprovider.ConflictError): http.StatusConflict
//   - "forbidden" (type *oauthprovider.ForbiddenError): http.StatusForbidden
//   - "internal_error" (type *oauthprovider.InternalServerError): http.StatusInternalServerError
//   - "not_found" (type *oauthprovider.NotFoundError): http.StatusNotFound
//   - "unauthorized" (type *oauthprovider.UnauthorizedError): http.StatusUnauthorized
//   - error: internal error
func DecodeCreateClientResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body CreateClientResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "create_client", err)
			}
			err = ValidateCreateClientResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "create_client", err)
			}
			res := NewCreateClientOAuthClientWithSecretResponseCreated(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body CreateClientBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "create_client", err)
			}
			err = ValidateCreateClientBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "create_client", err)
			}
			return nil, NewCreateClientBadRequest(&body)
		case http.StatusConflict:
			var (
				body CreateClientConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "create_client", err)
			}
			err = ValidateCreateClientConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "create_client", err)
			}
			return nil, NewCreateClientConflict(&body)
		case http.StatusForbidden:
			var (
				body CreateClientForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "create_client", err)
			}
			err = ValidateCreateClientForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "create_client", err)
			}
			return nil, NewCreateClientForbidden(&body)
		case http.StatusInternalServerError:
			var (
				body CreateClientInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "create_client", err)
			}
			err = ValidateCreateClientInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "create_client", err)
			}
			return nil, NewCreateClientInternalError(&body)
		case http.StatusNotFound:
			var (
				body CreateClientNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "create_client", err)
			}
			err = ValidateCreateClientNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "create_client", err)
			}
			return nil, NewCreateClientNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body CreateClientUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "create_client", err)
			}
			err = ValidateCreateClientUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "create_client", err)
			}
			return nil, NewCreateClientUnauthorized(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("oauth_provider", "create_client", resp.StatusCode, string(body))
		}
	}
}

// BuildGetClientRequest instantiates a HTTP request object with method and
// path set to call the "oauth_provider" service "get_client" endpoint
func (c *Client) BuildGetClientRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(*oauthprovider.GetClientPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("oauth_provider", "get_client", "*oauthprovider.GetClientPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetClientOauthProviderPath(id)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("oauth_provider", "get_client", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetClientRequest returns an encoder for requests sent to the
// oauth_provider get_client server.
func EncodeGetClientRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*oauthprovider.GetClientPayload)
		if !ok {
			return goahttp.ErrInvalidType("oauth_provider", "get_client", "*oauthprovider.GetClientPayload", v)
		}
		if p.JWT != nil {
			head := *p.JWT
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeGetClientResponse returns a decoder for responses returned by the
// oauth_provider get_client endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeGetClientResponse may return the following errors:
//   - "bad_request" (type *oauthprovider.BadRequestError): http.StatusBadRequest
//   - "conflict" (type *oauthprovider.ConflictError): http.StatusConflict
//   - "forbidden" (type *oauthprovider.ForbiddenError): http.StatusForbidden
//   - "internal_error" (type *oauthprovider.InternalServerError): http.StatusInternalServerError
//   - "not_found" (type *oauthprovider.NotFoundError): http.StatusNotFound
//   - "unauthorized" (type *oauthprovider.UnauthorizedError): http.StatusUnauthorized
//   - error: internal error
func DecodeGetClientResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetClientResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "get_client", err)
			}
			err = ValidateGetClientResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "get_client", err)
			}
			res := NewGetClientOAuthClientResponseOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body GetClientBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "get_client", err)
			}
			err = ValidateGetClientBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "get_client", err)
			}
			return nil, NewGetClientBadRequest(&body)
		case http.StatusConflict:
			var (
				body GetClientConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "get_client", err)
			}
			err = ValidateGetClientConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "get_client", err)
			}
			return nil, NewGetClientConflict(&body)
		case http.StatusForbidden:
			var (
				body GetClientForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "get_client", err)
			}
			err = ValidateGetClientForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "get_client", err)
			}
			return nil, NewGetClientForbidden(&body)
		case http.StatusInternalServerError:
			var (
				body GetClientInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "get_client", err)
			}
			err = ValidateGetClientInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "get_client", err)
			}
			return nil, NewGetClientInternalError(&body)
		case http.StatusNotFound:
			var (
				body GetClientNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "get_client", err)
			}
			err = ValidateGetClientNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "get_client", err)
			}
			return nil, NewGetClientNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body GetClientUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "get_client", err)
			}
			err = ValidateGetClientUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "get_client", err)
			}
			return nil, NewGetClientUnauthorized(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("oauth_provider", "get_client", resp.StatusCode, string(body))
		}
	}
}

// BuildUpdateClientRequest instantiates a HTTP request object with method and
// path set to call the "oauth_provider" service "update_client" endpoint
func (c *Client) BuildUpdateClientRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(*oauthprovider.UpdateClientPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("oauth_provider", "update_client", "*oauthprovider.UpdateClientPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpdateClientOauthProviderPath(id)}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("oauth_provider", "update_client", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpdateClientRequest returns an encoder for requests sent to the
// oauth_provider update_client server.
func EncodeUpdateClientRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*oauthprovider.UpdateClientPayload)
		if !ok {
			return goahttp.ErrInvalidType("oauth_provider", "update_client", "*oauthprovider.UpdateClientPayload", v)
		}
		if p.JWT != nil {
			head := *p.JWT
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		body := NewUpdateClientRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("oauth_provider", "update_client", err)
		}
		return nil
	}
}

// DecodeUpdateClientResponse returns a decoder for responses returned by the
// oauth_provider update_client endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeUpdateClientResponse may return the following errors:
//   - "bad_request" (type *oauthprovider.BadRequestError): http.StatusBadRequest
//   - "conflict" (type *oauthprovider.ConflictError): http.StatusConflict
//   - "forbidden" (type *oauthprovider.ForbiddenError): http.StatusForbidden
//   - "internal_error" (type *oauthprovider.InternalServerError): http.StatusInternalServerError
//   - "not_found" (type *oauthprovider.NotFoundError): http.StatusNotFound
//   - "unauthorized" (type *oauthprovider.UnauthorizedError): http.StatusUnauthorized
//   - error: internal error
func DecodeUpdateClientResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body UpdateClientResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "update_client", err)
			}
			err = ValidateUpdateClientResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "update_client", err)
			}
			res := NewUpdateClientOAuthClientResponseOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body UpdateClientBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "update_client", err)
			}
			err = ValidateUpdateClientBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "update_client", err)
			}
			return nil, NewUpdateClientBadRequest(&body)
		case http.StatusConflict:
			var (
				body UpdateClientConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "update_client", err)
			}
			err = ValidateUpdateClientConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "update_client", err)
			}
			return nil, NewUpdateClientConflict(&body)
		case http.StatusForbidden:
			var (
				body UpdateClientForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "update_client", err)
			}
			err = ValidateUpdateClientForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "update_client", err)
			}
			return nil, NewUpdateClientForbidden(&body)
		case http.StatusInternalServerError:
			var (
				body UpdateClientInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "update_client", err)
			}
			err = ValidateUpdateClientInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "update_client", err)
			}
			return nil, NewUpdateClientInternalError(&body)
		case http.StatusNotFound:
			var (
				body UpdateClientNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "update_client", err)
			}
			err = ValidateUpdateClientNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "update_client", err)
			}
			return nil, NewUpdateClientNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body UpdateClientUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "update_client", err)
			}
			err = ValidateUpdateClientUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "update_client", err)
			}
			return nil, NewUpdateClientUnauthorized(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("oauth_provider", "update_client", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteClientRequest instantiates a HTTP request object with method and
// path set to call the "oauth_provider" service "delete_client" endpoint
func (c *Client) BuildDeleteClientRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(*oauthprovider.DeleteClientPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("oauth_provider", "delete_client", "*oauthprovider.DeleteClientPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteClientOauthProviderPath(id)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("oauth_provider", "delete_client", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDeleteClientRequest returns an encoder for requests sent to the
// oauth_provider delete_client server.
func EncodeDeleteClientRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*oauthprovider.DeleteClientPayload)
		if !ok {
			return goahttp.ErrInvalidType("oauth_provider", "delete_client", "*oauthprovider.DeleteClientPayload", v)
		}
		if p.JWT != nil {
			head := *p.JWT
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeDeleteClientResponse returns a decoder for responses returned by the
// oauth_provider delete_client endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeDeleteClientResponse may return the following errors:
//   - "bad_request" (type *oauthprovider.BadRequestError): http.StatusBadRequest
//   - "conflict" (type *oauthprovider.ConflictError): http.StatusConflict
//   - "forbidden" (type *oauthprovider.ForbiddenError): http.StatusForbidden
//   - "internal_error" (type *oauthprovider.InternalServerError): http.StatusInternalServerError
//   - "not_found" (type *oauthprovider.NotFoundError): http.StatusNotFound
//   - "unauthorized" (type *oauthprovider.UnauthorizedError): http.StatusUnauthorized
//   - error: internal error
func DecodeDeleteClientResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			return nil, nil
		case http.StatusBadRequest:
			var (
				body DeleteClientBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "delete_client", err)
			}
			err = ValidateDeleteClientBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "delete_client", err)
			}
			return nil, NewDeleteClientBadRequest(&body)
		case http.StatusConflict:
			var (
				body DeleteClientConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "delete_client", err)
			}
			err = ValidateDeleteClientConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "delete_client", err)
			}
			return nil, NewDeleteClientConflict(&body)
		case http.StatusForbidden:
			var (
				body DeleteClientForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "delete_client", err)
			}
			err = ValidateDeleteClientForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "delete_client", err)
			}
			return nil, NewDeleteClientForbidden(&body)
		case http.StatusInternalServerError:
			var (
				body DeleteClientInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "delete_client", err)
			}
			err = ValidateDeleteClientInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "delete_client", err)
			}
			return nil, NewDeleteClientInternalError(&body)
		case http.StatusNotFound:
			var (
				body DeleteClientNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "delete_client", err)
			}
			err = ValidateDeleteClientNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "delete_client", err)
			}
			return nil, NewDeleteClientNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body DeleteClientUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "delete_client", err)
			}
			err = ValidateDeleteClientUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "delete_client", err)
			}
			return nil, NewDeleteClientUnauthorized(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("oauth_provider", "delete_client", resp.StatusCode, string(body))
		}
	}
}

// BuildRotateClientSecretRequest instantiates a HTTP request object with
// method and path set to call the "oauth_provider" service
// "rotate_client_secret" endpoint
func (c *Client) BuildRotateClientSecretRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(*oauthprovider.RotateClientSecretPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("oauth_provider", "rotate_client_secret", "*oauthprovider.RotateClientSecretPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: RotateClientSecretOauthProviderPath(id)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("oauth_provider", "rotate_client_secret", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeRotateClientSecretRequest returns an encoder for requests sent to the
// oauth_provider rotate_client_secret server.
func EncodeRotateClientSecretRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*oauthprovider.RotateClientSecretPayload)
		if !ok {
			return goahttp.ErrInvalidType("oauth_provider", "rotate_client_secret", "*oauthprovider.RotateClientSecretPayload", v)
		}
		if p.JWT != nil {
			head := *p.JWT
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeRotateClientSecretResponse returns a decoder for responses returned by
// the oauth_provider rotate_client_secret endpoint. restoreBody controls
// whether the response body should be restored after having been read.
// DecodeRotateClientSecretResponse may return the following errors:
//   - "bad_request" (type *oauthprovider.BadRequestError): http.StatusBadRequest
//   - "conflict" (type *oauthprovider.ConflictError): http.StatusConflict
//   - "forbidden" (type *oauthprovider.ForbiddenError): http.StatusForbidden
//   - "internal_error" (type *oauthprovider.InternalServerError): http.StatusInternalServerError
//   - "not_found" (type *oauthprovider.NotFoundError): http.StatusNotFound
//   - "unauthorized" (type *oauthprovider.UnauthorizedError): http.StatusUnauthorized
//   - error: internal error
func DecodeRotateClientSecretResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body RotateClientSecretResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "rotate_client_secret", err)
			}
			err = ValidateRotateClientSecretResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "rotate_client_secret", err)
			}
			res := NewRotateClientSecretResultOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body RotateClientSecretBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "rotate_client_secret", err)
			}
			err = ValidateRotateClientSecretBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "rotate_client_secret", err)
			}
			return nil, NewRotateClientSecretBadRequest(&body)
		case http.StatusConflict:
			var (
				body RotateClientSecretConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "rotate_client_secret", err)
			}
			err = ValidateRotateClientSecretConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "rotate_client_secret", err)
			}
			return nil, NewRotateClientSecretConflict(&body)
		case http.StatusForbidden:
			var (
				body RotateClientSecretForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "rotate_client_secret", err)
			}
			err = ValidateRotateClientSecretForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "rotate_client_secret", err)
			}
			return nil, NewRotateClientSecretForbidden(&body)
		case http.StatusInternalServerError:
			var (
				body RotateClientSecretInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "rotate_client_secret", err)
			}
			err = ValidateRotateClientSecretInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "rotate_client_secret", err)
			}
			return nil, NewRotateClientSecretInternalError(&body)
		case http.StatusNotFound:
			var (
				body RotateClientSecretNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "rotate_client_secret", err)
			}
			err = ValidateRotateClientSecretNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "rotate_client_secret", err)
			}
			return nil, NewRotateClientSecretNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body RotateClientSecretUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "rotate_client_secret", err)
			}
			err = ValidateRotateClientSecretUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "rotate_client_secret", err)
			}
			return nil, NewRotateClientSecretUnauthorized(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("oauth_provider", "rotate_client_secret", resp.StatusCode, string(body))
		}
	}
}

// BuildListScopesRequest instantiates a HTTP request object with method and
// path set to call the "oauth_provider" service "list_scopes" endpoint
func (c *Client) BuildListScopesRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListScopesOauthProviderPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("oauth_provider", "list_scopes", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeListScopesRequest returns an encoder for requests sent to the
// oauth_provider list_scopes server.
func EncodeListScopesRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*oauthprovider.ListScopesPayload)
		if !ok {
			return goahttp.ErrInvalidType("oauth_provider", "list_scopes", "*oauthprovider.ListScopesPayload", v)
		}
		if p.JWT != nil {
			head := *p.JWT
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		values := req.URL.Query()
		values.Add("offset", fmt.Sprintf("%v", p.Offset))
		values.Add("limit", fmt.Sprintf("%v", p.Limit))
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeListScopesResponse returns a decoder for responses returned by the
// oauth_provider list_scopes endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeListScopesResponse may return the following errors:
//   - "bad_request" (type *oauthprovider.BadRequestError): http.StatusBadRequest
//   - "conflict" (type *oauthprovider.ConflictError): http.StatusConflict
//   - "forbidden" (type *oauthprovider.ForbiddenError): http.StatusForbidden
//   - "internal_error" (type *oauthprovider.InternalServerError): http.StatusInternalServerError
//   - "not_found" (type *oauthprovider.NotFoundError): http.StatusNotFound
//   - "unauthorized" (type *oauthprovider.UnauthorizedError): http.StatusUnauthorized
//   - error: internal error
func DecodeListScopesResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListScopesResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "list_scopes", err)
			}
			err = ValidateListScopesResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "list_scopes", err)
			}
			res := NewListScopesResultOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body ListScopesBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "list_scopes", err)
			}
			err = ValidateListScopesBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "list_scopes", err)
			}
			return nil, NewListScopesBadRequest(&body)
		case http.StatusConflict:
			var (
				body ListScopesConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "list_scopes", err)
			}
			err = ValidateListScopesConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "list_scopes", err)
			}
			return nil, NewListScopesConflict(&body)
		case http.StatusForbidden:
			var (
				body ListScopesForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "list_scopes", err)
			}
			err = ValidateListScopesForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "list_scopes", err)
			}
			return nil, NewListScopesForbidden(&body)
		case http.StatusInternalServerError:
			var (
				body ListScopesInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "list_scopes", err)
			}
			err = ValidateListScopesInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "list_scopes", err)
			}
			return nil, NewListScopesInternalError(&body)
		case http.StatusNotFound:
			var (
				body ListScopesNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "list_scopes", err)
			}
			err = ValidateListScopesNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "list_scopes", err)
			}
			return nil, NewListScopesNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body ListScopesUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "list_scopes", err)
			}
			err = ValidateListScopesUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "list_scopes", err)
			}
			return nil, NewListScopesUnauthorized(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("oauth_provider", "list_scopes", resp.StatusCode, string(body))
		}
	}
}

// BuildCreateScopeRequest instantiates a HTTP request object with method and
// path set to call the "oauth_provider" service "create_scope" endpoint
func (c *Client) BuildCreateScopeRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateScopeOauthProviderPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("oauth_provider", "create_scope", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateScopeRequest returns an encoder for requests sent to the
// oauth_provider create_scope server.
func EncodeCreateScopeRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*oauthprovider.CreateScopePayload)
		if !ok {
			return goahttp.ErrInvalidType("oauth_provider", "create_scope", "*oauthprovider.CreateScopePayload", v)
		}
		if p.JWT != nil {
			head := *p.JWT
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		body := NewCreateScopeRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("oauth_provider", "create_scope", err)
		}
		return nil
	}
}

// DecodeCreateScopeResponse returns a decoder for responses returned by the
// oauth_provider create_scope endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeCreateScopeResponse may return the following errors:
//   - "bad_request" (type *oauthprovider.BadRequestError): http.StatusBadRequest
//   - "conflict" (type *oauthprovider.ConflictError): http.StatusConflict
//   - "forbidden" (type *oauthprovider.ForbiddenError): http.StatusForbidden
//   - "internal_error" (type *oauthprovider.InternalServerError): http.StatusInternalServerError
//   - "not_found" (type *oauthprovider.NotFoundError): http.StatusNotFound
//   - "unauthorized" (type *oauthprovider.UnauthorizedError): http.StatusUnauthorized
//   - error: internal error
func DecodeCreateScopeResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body CreateScopeResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "create_scope", err)
			}
			err = ValidateCreateScopeResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "create_scope", err)
			}
			res := NewCreateScopeOAuthScopeResponseCreated(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body CreateScopeBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "create_scope", err)
			}
			err = ValidateCreateScopeBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "create_scope", err)
			}
			return nil, NewCreateScopeBadRequest(&body)
		case http.StatusConflict:
			var (
				body CreateScopeConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "create_scope", err)
			}
			err = ValidateCreateScopeConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "create_scope", err)
			}
			return nil, NewCreateScopeConflict(&body)
		case http.StatusForbidden:
			var (
				body CreateScopeForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "create_scope", err)
			}
			err = ValidateCreateScopeForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "create_scope", err)
			}
			return nil, NewCreateScopeForbidden(&body)
		case http.StatusInternalServerError:
			var (
				body CreateScopeInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "create_scope", err)
			}
			err = ValidateCreateScopeInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "create_scope", err)
			}
			return nil, NewCreateScopeInternalError(&body)
		case http.StatusNotFound:
			var (
				body CreateScopeNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "create_scope", err)
			}
			err = ValidateCreateScopeNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "create_scope", err)
			}
			return nil, NewCreateScopeNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body CreateScopeUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "create_scope", err)
			}
			err = ValidateCreateScopeUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "create_scope", err)
			}
			return nil, NewCreateScopeUnauthorized(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("oauth_provider", "create_scope", resp.StatusCode, string(body))
		}
	}
}

// BuildGetScopeRequest instantiates a HTTP request object with method and path
// set to call the "oauth_provider" service "get_scope" endpoint
func (c *Client) BuildGetScopeRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(*oauthprovider.GetScopePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("oauth_provider", "get_scope", "*oauthprovider.GetScopePayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetScopeOauthProviderPath(id)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("oauth_provider", "get_scope", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetScopeRequest returns an encoder for requests sent to the
// oauth_provider get_scope server.
func EncodeGetScopeRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*oauthprovider.GetScopePayload)
		if !ok {
			return goahttp.ErrInvalidType("oauth_provider", "get_scope", "*oauthprovider.GetScopePayload", v)
		}
		if p.JWT != nil {
			head := *p.JWT
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeGetScopeResponse returns a decoder for responses returned by the
// oauth_provider get_scope endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeGetScopeResponse may return the following errors:
//   - "bad_request" (type *oauthprovider.BadRequestError): http.StatusBadRequest
//   - "conflict" (type *oauthprovider.ConflictError): http.StatusConflict
//   - "forbidden" (type *oauthprovider.ForbiddenError): http.StatusForbidden
//   - "internal_error" (type *oauthprovider.InternalServerError): http.StatusInternalServerError
//   - "not_found" (type *oauthprovider.NotFoundError): http.StatusNotFound
//   - "unauthorized" (type *oauthprovider.UnauthorizedError): http.StatusUnauthorized
//   - error: internal error
func DecodeGetScopeResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetScopeResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "get_scope", err)
			}
			err = ValidateGetScopeResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "get_scope", err)
			}
			res := NewGetScopeOAuthScopeResponseOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body GetScopeBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "get_scope", err)
			}
			err = ValidateGetScopeBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "get_scope", err)
			}
			return nil, NewGetScopeBadRequest(&body)
		case http.StatusConflict:
			var (
				body GetScopeConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "get_scope", err)
			}
			err = ValidateGetScopeConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "get_scope", err)
			}
			return nil, NewGetScopeConflict(&body)
		case http.StatusForbidden:
			var (
				body GetScopeForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "get_scope", err)
			}
			err = ValidateGetScopeForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "get_scope", err)
			}
			return nil, NewGetScopeForbidden(&body)
		case http.StatusInternalServerError:
			var (
				body GetScopeInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "get_scope", err)
			}
			err = ValidateGetScopeInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "get_scope", err)
			}
			return nil, NewGetScopeInternalError(&body)
		case http.StatusNotFound:
			var (
				body GetScopeNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "get_scope", err)
			}
			err = ValidateGetScopeNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "get_scope", err)
			}
			return nil, NewGetScopeNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body GetScopeUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "get_scope", err)
			}
			err = ValidateGetScopeUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "get_scope", err)
			}
			return nil, NewGetScopeUnauthorized(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("oauth_provider", "get_scope", resp.StatusCode, string(body))
		}
	}
}

// BuildUpdateScopeRequest instantiates a HTTP request object with method and
// path set to call the "oauth_provider" service "update_scope" endpoint
func (c *Client) BuildUpdateScopeRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(*oauthprovider.UpdateScopePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("oauth_provider", "update_scope", "*oauthprovider.UpdateScopePayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpdateScopeOauthProviderPath(id)}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("oauth_provider", "update_scope", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpdateScopeRequest returns an encoder for requests sent to the
// oauth_provider update_scope server.
func EncodeUpdateScopeRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*oauthprovider.UpdateScopePayload)
		if !ok {
			return goahttp.ErrInvalidType("oauth_provider", "update_scope", "*oauthprovider.UpdateScopePayload", v)
		}
		if p.JWT != nil {
			head := *p.JWT
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		body := NewUpdateScopeRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("oauth_provider", "update_scope", err)
		}
		return nil
	}
}

// DecodeUpdateScopeResponse returns a decoder for responses returned by the
// oauth_provider update_scope endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeUpdateScopeResponse may return the following errors:
//   - "bad_request" (type *oauthprovider.BadRequestError): http.StatusBadRequest
//   - "conflict" (type *oauthprovider.ConflictError): http.StatusConflict
//   - "forbidden" (type *oauthprovider.ForbiddenError): http.StatusForbidden
//   - "internal_error" (type *oauthprovider.InternalServerError): http.StatusInternalServerError
//   - "not_found" (type *oauthprovider.NotFoundError): http.StatusNotFound
//   - "unauthorized" (type *oauthprovider.UnauthorizedError): http.StatusUnauthorized
//   - error: internal error
func DecodeUpdateScopeResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body UpdateScopeResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "update_scope", err)
			}
			err = ValidateUpdateScopeResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "update_scope", err)
			}
			res := NewUpdateScopeOAuthScopeResponseOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body UpdateScopeBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "update_scope", err)
			}
			err = ValidateUpdateScopeBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "update_scope", err)
			}
			return nil, NewUpdateScopeBadRequest(&body)
		case http.StatusConflict:
			var (
				body UpdateScopeConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "update_scope", err)
			}
			err = ValidateUpdateScopeConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "update_scope", err)
			}
			return nil, NewUpdateScopeConflict(&body)
		case http.StatusForbidden:
			var (
				body UpdateScopeForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "update_scope", err)
			}
			err = ValidateUpdateScopeForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "update_scope", err)
			}
			return nil, NewUpdateScopeForbidden(&body)
		case http.StatusInternalServerError:
			var (
				body UpdateScopeInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "update_scope", err)
			}
			err = ValidateUpdateScopeInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "update_scope", err)
			}
			return nil, NewUpdateScopeInternalError(&body)
		case http.StatusNotFound:
			var (
				body UpdateScopeNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "update_scope", err)
			}
			err = ValidateUpdateScopeNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "update_scope", err)
			}
			return nil, NewUpdateScopeNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body UpdateScopeUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "update_scope", err)
			}
			err = ValidateUpdateScopeUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "update_scope", err)
			}
			return nil, NewUpdateScopeUnauthorized(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("oauth_provider", "update_scope", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteScopeRequest instantiates a HTTP request object with method and
// path set to call the "oauth_provider" service "delete_scope" endpoint
func (c *Client) BuildDeleteScopeRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(*oauthprovider.DeleteScopePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("oauth_provider", "delete_scope", "*oauthprovider.DeleteScopePayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteScopeOauthProviderPath(id)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("oauth_provider", "delete_scope", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDeleteScopeRequest returns an encoder for requests sent to the
// oauth_provider delete_scope server.
func EncodeDeleteScopeRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*oauthprovider.DeleteScopePayload)
		if !ok {
			return goahttp.ErrInvalidType("oauth_provider", "delete_scope", "*oauthprovider.DeleteScopePayload", v)
		}
		if p.JWT != nil {
			head := *p.JWT
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeDeleteScopeResponse returns a decoder for responses returned by the
// oauth_provider delete_scope endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeDeleteScopeResponse may return the following errors:
//   - "bad_request" (type *oauthprovider.BadRequestError): http.StatusBadRequest
//   - "conflict" (type *oauthprovider.ConflictError): http.StatusConflict
//   - "forbidden" (type *oauthprovider.ForbiddenError): http.StatusForbidden
//   - "internal_error" (type *oauthprovider.InternalServerError): http.StatusInternalServerError
//   - "not_found" (type *oauthprovider.NotFoundError): http.StatusNotFound
//   - "unauthorized" (type *oauthprovider.UnauthorizedError): http.StatusUnauthorized
//   - error: internal error
func DecodeDeleteScopeResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			return nil, nil
		case http.StatusBadRequest:
			var (
				body DeleteScopeBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "delete_scope", err)
			}
			err = ValidateDeleteScopeBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "delete_scope", err)
			}
			return nil, NewDeleteScopeBadRequest(&body)
		case http.StatusConflict:
			var (
				body DeleteScopeConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "delete_scope", err)
			}
			err = ValidateDeleteScopeConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "delete_scope", err)
			}
			return nil, NewDeleteScopeConflict(&body)
		case http.StatusForbidden:
			var (
				body DeleteScopeForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "delete_scope", err)
			}
			err = ValidateDeleteScopeForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "delete_scope", err)
			}
			return nil, NewDeleteScopeForbidden(&body)
		case http.StatusInternalServerError:
			var (
				body DeleteScopeInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "delete_scope", err)
			}
			err = ValidateDeleteScopeInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "delete_scope", err)
			}
			return nil, NewDeleteScopeInternalError(&body)
		case http.StatusNotFound:
			var (
				body DeleteScopeNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "delete_scope", err)
			}
			err = ValidateDeleteScopeNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "delete_scope", err)
			}
			return nil, NewDeleteScopeNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body DeleteScopeUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "delete_scope", err)
			}
			err = ValidateDeleteScopeUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "delete_scope", err)
			}
			return nil, NewDeleteScopeUnauthorized(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("oauth_provider", "delete_scope", resp.StatusCode, string(body))
		}
	}
}

// BuildOidcConfigurationRequest instantiates a HTTP request object with method
// and path set to call the "oauth_provider" service "oidc_configuration"
// endpoint
func (c *Client) BuildOidcConfigurationRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: OidcConfigurationOauthProviderPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("oauth_provider", "oidc_configuration", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeOidcConfigurationResponse returns a decoder for responses returned by
// the oauth_provider oidc_configuration endpoint. restoreBody controls whether
// the response body should be restored after having been read.
// DecodeOidcConfigurationResponse may return the following errors:
//   - "bad_request" (type *oauthprovider.BadRequestError): http.StatusBadRequest
//   - "conflict" (type *oauthprovider.ConflictError): http.StatusConflict
//   - "forbidden" (type *oauthprovider.ForbiddenError): http.StatusForbidden
//   - "internal_error" (type *oauthprovider.InternalServerError): http.StatusInternalServerError
//   - "not_found" (type *oauthprovider.NotFoundError): http.StatusNotFound
//   - "unauthorized" (type *oauthprovider.UnauthorizedError): http.StatusUnauthorized
//   - error: internal error
func DecodeOidcConfigurationResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body OidcConfigurationResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "oidc_configuration", err)
			}
			err = ValidateOidcConfigurationResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "oidc_configuration", err)
			}
			res := NewOidcConfigurationResultOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body OidcConfigurationBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "oidc_configuration", err)
			}
			err = ValidateOidcConfigurationBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "oidc_configuration", err)
			}
			return nil, NewOidcConfigurationBadRequest(&body)
		case http.StatusConflict:
			var (
				body OidcConfigurationConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "oidc_configuration", err)
			}
			err = ValidateOidcConfigurationConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "oidc_configuration", err)
			}
			return nil, NewOidcConfigurationConflict(&body)
		case http.StatusForbidden:
			var (
				body OidcConfigurationForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "oidc_configuration", err)
			}
			err = ValidateOidcConfigurationForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "oidc_configuration", err)
			}
			return nil, NewOidcConfigurationForbidden(&body)
		case http.StatusInternalServerError:
			var (
				body OidcConfigurationInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "oidc_configuration", err)
			}
			err = ValidateOidcConfigurationInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "oidc_configuration", err)
			}
			return nil, NewOidcConfigurationInternalError(&body)
		case http.StatusNotFound:
			var (
				body OidcConfigurationNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "oidc_configuration", err)
			}
			err = ValidateOidcConfigurationNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "oidc_configuration", err)
			}
			return nil, NewOidcConfigurationNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body OidcConfigurationUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "oidc_configuration", err)
			}
			err = ValidateOidcConfigurationUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "oidc_configuration", err)
			}
			return nil, NewOidcConfigurationUnauthorized(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("oauth_provider", "oidc_configuration", resp.StatusCode, string(body))
		}
	}
}

// BuildJwksRequest instantiates a HTTP request object with method and path set
// to call the "oauth_provider" service "jwks" endpoint
func (c *Client) BuildJwksRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: JwksOauthProviderPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("oauth_provider", "jwks", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeJwksResponse returns a decoder for responses returned by the
// oauth_provider jwks endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeJwksResponse may return the following errors:
//   - "bad_request" (type *oauthprovider.BadRequestError): http.StatusBadRequest
//   - "conflict" (type *oauthprovider.ConflictError): http.StatusConflict
//   - "forbidden" (type *oauthprovider.ForbiddenError): http.StatusForbidden
//   - "internal_error" (type *oauthprovider.InternalServerError): http.StatusInternalServerError
//   - "not_found" (type *oauthprovider.NotFoundError): http.StatusNotFound
//   - "unauthorized" (type *oauthprovider.UnauthorizedError): http.StatusUnauthorized
//   - error: internal error
func DecodeJwksResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body JwksResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "jwks", err)
			}
			err = ValidateJwksResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "jwks", err)
			}
			res := NewJwksResultOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body JwksBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "jwks", err)
			}
			err = ValidateJwksBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "jwks", err)
			}
			return nil, NewJwksBadRequest(&body)
		case http.StatusConflict:
			var (
				body JwksConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "jwks", err)
			}
			err = ValidateJwksConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "jwks", err)
			}
			return nil, NewJwksConflict(&body)
		case http.StatusForbidden:
			var (
				body JwksForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "jwks", err)
			}
			err = ValidateJwksForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "jwks", err)
			}
			return nil, NewJwksForbidden(&body)
		case http.StatusInternalServerError:
			var (
				body JwksInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "jwks", err)
			}
			err = ValidateJwksInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "jwks", err)
			}
			return nil, NewJwksInternalError(&body)
		case http.StatusNotFound:
			var (
				body JwksNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "jwks", err)
			}
			err = ValidateJwksNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "jwks", err)
			}
			return nil, NewJwksNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body JwksUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth_provider", "jwks", err)
			}
			err = ValidateJwksUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth_provider", "jwks", err)
			}
			return nil, NewJwksUnauthorized(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("oauth_provider", "jwks", resp.StatusCode, string(body))
		}
	}
}

// unmarshalOAuthClientResponseResponseBodyToOauthproviderOAuthClientResponse
// builds a value of type *oauthprovider.OAuthClientResponse from a value of
// type *OAuthClientResponseResponseBody.
func unmarshalOAuthClientResponseResponseBodyToOauthproviderOAuthClientResponse(v *OAuthClientResponseResponseBody) *oauthprovider.OAuthClientResponse {
	res := &oauthprovider.OAuthClientResponse{
		ID:                        *v.ID,
		ClientID:                  *v.ClientID,
		ClientName:                *v.ClientName,
		ClientDescription:         v.ClientDescription,
		ClientURI:                 v.ClientURI,
		LogoURI:                   v.LogoURI,
		Public:                    *v.Public,
		Active:                    *v.Active,
		OrganizationID:            v.OrganizationID,
		TokenExpirySeconds:        v.TokenExpirySeconds,
		RefreshTokenExpirySeconds: v.RefreshTokenExpirySeconds,
		RequiresPkce:              v.RequiresPkce,
		RequiresConsent:           v.RequiresConsent,
		CreatedAt:                 v.CreatedAt,
		UpdatedAt:                 v.UpdatedAt,
	}
	res.RedirectUris = make([]string, len(v.RedirectUris))
	for i, val := range v.RedirectUris {
		res.RedirectUris[i] = val
	}
	if v.PostLogoutRedirectUris != nil {
		res.PostLogoutRedirectUris = make([]string, len(v.PostLogoutRedirectUris))
		for i, val := range v.PostLogoutRedirectUris {
			res.PostLogoutRedirectUris[i] = val
		}
	}
	if v.AllowedCorsOrigins != nil {
		res.AllowedCorsOrigins = make([]string, len(v.AllowedCorsOrigins))
		for i, val := range v.AllowedCorsOrigins {
			res.AllowedCorsOrigins[i] = val
		}
	}
	res.AllowedGrantTypes = make([]string, len(v.AllowedGrantTypes))
	for i, val := range v.AllowedGrantTypes {
		res.AllowedGrantTypes[i] = val
	}

	return res
}

// unmarshalPaginationResponseBodyToDesigntypesPagination builds a value of
// type *designtypes.Pagination from a value of type *PaginationResponseBody.
func unmarshalPaginationResponseBodyToDesigntypesPagination(v *PaginationResponseBody) *designtypes.Pagination {
	res := &designtypes.Pagination{
		Offset:      *v.Offset,
		Limit:       *v.Limit,
		Total:       *v.Total,
		TotalPages:  *v.TotalPages,
		CurrentPage: *v.CurrentPage,
		HasNext:     *v.HasNext,
		HasPrevious: *v.HasPrevious,
	}

	return res
}

// marshalOauthproviderUpdateOAuthClientRequestToUpdateOAuthClientRequestRequestBody
// builds a value of type *UpdateOAuthClientRequestRequestBody from a value of
// type *oauthprovider.UpdateOAuthClientRequest.
func marshalOauthproviderUpdateOAuthClientRequestToUpdateOAuthClientRequestRequestBody(v *oauthprovider.UpdateOAuthClientRequest) *UpdateOAuthClientRequestRequestBody {
	res := &UpdateOAuthClientRequestRequestBody{
		ClientName:                v.ClientName,
		ClientDescription:         v.ClientDescription,
		ClientURI:                 v.ClientURI,
		LogoURI:                   v.LogoURI,
		Public:                    v.Public,
		Active:                    v.Active,
		TokenExpirySeconds:        v.TokenExpirySeconds,
		RefreshTokenExpirySeconds: v.RefreshTokenExpirySeconds,
		RequiresPkce:              v.RequiresPkce,
		RequiresConsent:           v.RequiresConsent,
	}
	if v.RedirectUris != nil {
		res.RedirectUris = make([]string, len(v.RedirectUris))
		for i, val := range v.RedirectUris {
			res.RedirectUris[i] = val
		}
	}
	if v.PostLogoutRedirectUris != nil {
		res.PostLogoutRedirectUris = make([]string, len(v.PostLogoutRedirectUris))
		for i, val := range v.PostLogoutRedirectUris {
			res.PostLogoutRedirectUris[i] = val
		}
	}
	if v.AllowedCorsOrigins != nil {
		res.AllowedCorsOrigins = make([]string, len(v.AllowedCorsOrigins))
		for i, val := range v.AllowedCorsOrigins {
			res.AllowedCorsOrigins[i] = val
		}
	}
	if v.AllowedGrantTypes != nil {
		res.AllowedGrantTypes = make([]string, len(v.AllowedGrantTypes))
		for i, val := range v.AllowedGrantTypes {
			res.AllowedGrantTypes[i] = val
		}
	}

	return res
}

// marshalUpdateOAuthClientRequestRequestBodyToOauthproviderUpdateOAuthClientRequest
// builds a value of type *oauthprovider.UpdateOAuthClientRequest from a value
// of type *UpdateOAuthClientRequestRequestBody.
func marshalUpdateOAuthClientRequestRequestBodyToOauthproviderUpdateOAuthClientRequest(v *UpdateOAuthClientRequestRequestBody) *oauthprovider.UpdateOAuthClientRequest {
	res := &oauthprovider.UpdateOAuthClientRequest{
		ClientName:                v.ClientName,
		ClientDescription:         v.ClientDescription,
		ClientURI:                 v.ClientURI,
		LogoURI:                   v.LogoURI,
		Public:                    v.Public,
		Active:                    v.Active,
		TokenExpirySeconds:        v.TokenExpirySeconds,
		RefreshTokenExpirySeconds: v.RefreshTokenExpirySeconds,
		RequiresPkce:              v.RequiresPkce,
		RequiresConsent:           v.RequiresConsent,
	}
	if v.RedirectUris != nil {
		res.RedirectUris = make([]string, len(v.RedirectUris))
		for i, val := range v.RedirectUris {
			res.RedirectUris[i] = val
		}
	}
	if v.PostLogoutRedirectUris != nil {
		res.PostLogoutRedirectUris = make([]string, len(v.PostLogoutRedirectUris))
		for i, val := range v.PostLogoutRedirectUris {
			res.PostLogoutRedirectUris[i] = val
		}
	}
	if v.AllowedCorsOrigins != nil {
		res.AllowedCorsOrigins = make([]string, len(v.AllowedCorsOrigins))
		for i, val := range v.AllowedCorsOrigins {
			res.AllowedCorsOrigins[i] = val
		}
	}
	if v.AllowedGrantTypes != nil {
		res.AllowedGrantTypes = make([]string, len(v.AllowedGrantTypes))
		for i, val := range v.AllowedGrantTypes {
			res.AllowedGrantTypes[i] = val
		}
	}

	return res
}

// unmarshalOAuthScopeResponseResponseBodyToOauthproviderOAuthScopeResponse
// builds a value of type *oauthprovider.OAuthScopeResponse from a value of
// type *OAuthScopeResponseResponseBody.
func unmarshalOAuthScopeResponseResponseBodyToOauthproviderOAuthScopeResponse(v *OAuthScopeResponseResponseBody) *oauthprovider.OAuthScopeResponse {
	res := &oauthprovider.OAuthScopeResponse{
		ID:           *v.ID,
		Name:         *v.Name,
		Description:  *v.Description,
		DefaultScope: *v.DefaultScope,
		Public:       *v.Public,
	}

	return res
}
