// Code generated by goa v3.20.0, DO NOT EDIT.
//
// oauth_provider HTTP client types
//
// Command:
// $ goa gen github.com/juicycleff/frank/design -o .

package client

import (
	oauthprovider "github.com/juicycleff/frank/gen/oauth_provider"
	goa "goa.design/goa/v3/pkg"
)

// ConsentRequestBody is the type of the "oauth_provider" service "consent"
// endpoint HTTP request body.
type ConsentRequestBody struct {
	// OAuth client ID
	ClientID string `form:"client_id" json:"client_id" xml:"client_id"`
	// Requested scopes (space-separated)
	Scope string `form:"scope" json:"scope" xml:"scope"`
	// Redirect URI
	RedirectURI string `form:"redirect_uri" json:"redirect_uri" xml:"redirect_uri"`
	// OAuth state parameter
	State *string `form:"state,omitempty" json:"state,omitempty" xml:"state,omitempty"`
	// Whether consent is approved
	Approved bool `form:"approved" json:"approved" xml:"approved"`
}

// CreateClientRequestBody is the type of the "oauth_provider" service
// "create_client" endpoint HTTP request body.
type CreateClientRequestBody struct {
	// Client name
	ClientName string `form:"client_name" json:"client_name" xml:"client_name"`
	// Client description
	ClientDescription *string `form:"client_description,omitempty" json:"client_description,omitempty" xml:"client_description,omitempty"`
	// Client URI
	ClientURI *string `form:"client_uri,omitempty" json:"client_uri,omitempty" xml:"client_uri,omitempty"`
	// Logo URI
	LogoURI *string `form:"logo_uri,omitempty" json:"logo_uri,omitempty" xml:"logo_uri,omitempty"`
	// Authorized redirect URIs
	RedirectUris []string `form:"redirect_uris" json:"redirect_uris" xml:"redirect_uris"`
	// Authorized post-logout redirect URIs
	PostLogoutRedirectUris []string `form:"post_logout_redirect_uris,omitempty" json:"post_logout_redirect_uris,omitempty" xml:"post_logout_redirect_uris,omitempty"`
	// Allowed CORS origins
	AllowedCorsOrigins []string `form:"allowed_cors_origins,omitempty" json:"allowed_cors_origins,omitempty" xml:"allowed_cors_origins,omitempty"`
	// Allowed grant types
	AllowedGrantTypes []string `form:"allowed_grant_types,omitempty" json:"allowed_grant_types,omitempty" xml:"allowed_grant_types,omitempty"`
	// Whether client is public
	Public bool `form:"public" json:"public" xml:"public"`
	// Access token expiry in seconds
	TokenExpirySeconds int `form:"token_expiry_seconds" json:"token_expiry_seconds" xml:"token_expiry_seconds"`
	// Refresh token expiry in seconds
	RefreshTokenExpirySeconds int `form:"refresh_token_expiry_seconds" json:"refresh_token_expiry_seconds" xml:"refresh_token_expiry_seconds"`
	// Whether PKCE is required
	RequiresPkce bool `form:"requires_pkce" json:"requires_pkce" xml:"requires_pkce"`
	// Whether user consent is required
	RequiresConsent bool `form:"requires_consent" json:"requires_consent" xml:"requires_consent"`
}

// UpdateClientRequestBody is the type of the "oauth_provider" service
// "update_client" endpoint HTTP request body.
type UpdateClientRequestBody struct {
	Client *UpdateOAuthClientRequestRequestBody `form:"client" json:"client" xml:"client"`
}

// CreateScopeRequestBody is the type of the "oauth_provider" service
// "create_scope" endpoint HTTP request body.
type CreateScopeRequestBody struct {
	// Scope name
	Name string `form:"name" json:"name" xml:"name"`
	// Scope description
	Description string `form:"description" json:"description" xml:"description"`
	// Whether this scope is included by default
	DefaultScope bool `form:"default_scope" json:"default_scope" xml:"default_scope"`
	// Whether this scope can be requested by any client
	Public bool `form:"public" json:"public" xml:"public"`
}

// UpdateScopeRequestBody is the type of the "oauth_provider" service
// "update_scope" endpoint HTTP request body.
type UpdateScopeRequestBody struct {
	// Scope description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Whether this scope is included by default
	DefaultScope *bool `form:"default_scope,omitempty" json:"default_scope,omitempty" xml:"default_scope,omitempty"`
	// Whether this scope can be requested by any client
	Public *bool `form:"public,omitempty" json:"public,omitempty" xml:"public,omitempty"`
}

// TokenResponseBody is the type of the "oauth_provider" service "token"
// endpoint HTTP response body.
type TokenResponseBody struct {
	// Access token
	AccessToken *string `form:"access_token,omitempty" json:"access_token,omitempty" xml:"access_token,omitempty"`
	// Token type
	TokenType *string `form:"token_type,omitempty" json:"token_type,omitempty" xml:"token_type,omitempty"`
	// Token expiry in seconds
	ExpiresIn *int `form:"expires_in,omitempty" json:"expires_in,omitempty" xml:"expires_in,omitempty"`
	// Refresh token
	RefreshToken *string `form:"refresh_token,omitempty" json:"refresh_token,omitempty" xml:"refresh_token,omitempty"`
	// Granted scopes
	Scope *string `form:"scope,omitempty" json:"scope,omitempty" xml:"scope,omitempty"`
}

// IntrospectResponseBody is the type of the "oauth_provider" service
// "introspect" endpoint HTTP response body.
type IntrospectResponseBody struct {
	// Whether token is active
	Active *bool `form:"active,omitempty" json:"active,omitempty" xml:"active,omitempty"`
	// Token scopes
	Scope *string `form:"scope,omitempty" json:"scope,omitempty" xml:"scope,omitempty"`
	// Client ID
	ClientID *string `form:"client_id,omitempty" json:"client_id,omitempty" xml:"client_id,omitempty"`
	// Resource owner username
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// Token type
	TokenType *string `form:"token_type,omitempty" json:"token_type,omitempty" xml:"token_type,omitempty"`
	// Expiry timestamp
	Exp *int `form:"exp,omitempty" json:"exp,omitempty" xml:"exp,omitempty"`
	// Issued at timestamp
	Iat *int `form:"iat,omitempty" json:"iat,omitempty" xml:"iat,omitempty"`
	// Not before timestamp
	Nbf *int `form:"nbf,omitempty" json:"nbf,omitempty" xml:"nbf,omitempty"`
	// Subject (user ID)
	Sub *string `form:"sub,omitempty" json:"sub,omitempty" xml:"sub,omitempty"`
	// Audience
	Aud *string `form:"aud,omitempty" json:"aud,omitempty" xml:"aud,omitempty"`
	// Issuer
	Iss *string `form:"iss,omitempty" json:"iss,omitempty" xml:"iss,omitempty"`
	// JWTAuth ID
	Jti *string `form:"jti,omitempty" json:"jti,omitempty" xml:"jti,omitempty"`
}

// ConsentResponseBody is the type of the "oauth_provider" service "consent"
// endpoint HTTP response body.
type ConsentResponseBody struct {
	// Redirect URI with authorization code
	RedirectURI *string `form:"redirect_uri,omitempty" json:"redirect_uri,omitempty" xml:"redirect_uri,omitempty"`
}

// UserinfoResponseBody is the type of the "oauth_provider" service "userinfo"
// endpoint HTTP response body.
type UserinfoResponseBody struct {
	// Subject (user ID)
	Sub *string `form:"sub,omitempty" json:"sub,omitempty" xml:"sub,omitempty"`
	// Full name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// First name
	GivenName *string `form:"given_name,omitempty" json:"given_name,omitempty" xml:"given_name,omitempty"`
	// Last name
	FamilyName *string `form:"family_name,omitempty" json:"family_name,omitempty" xml:"family_name,omitempty"`
	// Middle name
	MiddleName *string `form:"middle_name,omitempty" json:"middle_name,omitempty" xml:"middle_name,omitempty"`
	// Nickname
	Nickname *string `form:"nickname,omitempty" json:"nickname,omitempty" xml:"nickname,omitempty"`
	// Preferred username
	PreferredUsername *string `form:"preferred_username,omitempty" json:"preferred_username,omitempty" xml:"preferred_username,omitempty"`
	// Profile URL
	Profile *string `form:"profile,omitempty" json:"profile,omitempty" xml:"profile,omitempty"`
	// Picture URL
	Picture *string `form:"picture,omitempty" json:"picture,omitempty" xml:"picture,omitempty"`
	// Website URL
	Website *string `form:"website,omitempty" json:"website,omitempty" xml:"website,omitempty"`
	// Email address
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// Whether email is verified
	EmailVerified *bool `form:"email_verified,omitempty" json:"email_verified,omitempty" xml:"email_verified,omitempty"`
	// Gender
	Gender *string `form:"gender,omitempty" json:"gender,omitempty" xml:"gender,omitempty"`
	// Birth date
	Birthdate *string `form:"birthdate,omitempty" json:"birthdate,omitempty" xml:"birthdate,omitempty"`
	// Time zone
	Zoneinfo *string `form:"zoneinfo,omitempty" json:"zoneinfo,omitempty" xml:"zoneinfo,omitempty"`
	// Locale
	Locale *string `form:"locale,omitempty" json:"locale,omitempty" xml:"locale,omitempty"`
	// Phone number
	PhoneNumber *string `form:"phone_number,omitempty" json:"phone_number,omitempty" xml:"phone_number,omitempty"`
	// Whether phone number is verified
	PhoneNumberVerified *bool `form:"phone_number_verified,omitempty" json:"phone_number_verified,omitempty" xml:"phone_number_verified,omitempty"`
	// Last update timestamp
	UpdatedAt *int `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// ListClientsResponseBody is the type of the "oauth_provider" service
// "list_clients" endpoint HTTP response body.
type ListClientsResponseBody struct {
	Data       []*OAuthClientResponseResponseBody `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	Pagination *PaginationResponseResponseBody    `form:"pagination,omitempty" json:"pagination,omitempty" xml:"pagination,omitempty"`
}

// CreateClientResponseBody is the type of the "oauth_provider" service
// "create_client" endpoint HTTP response body.
type CreateClientResponseBody struct {
	// OAuth client secret
	ClientSecret *string `form:"client_secret,omitempty" json:"client_secret,omitempty" xml:"client_secret,omitempty"`
	// Client ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// OAuth client ID
	ClientID *string `form:"client_id,omitempty" json:"client_id,omitempty" xml:"client_id,omitempty"`
	// Client name
	ClientName *string `form:"client_name,omitempty" json:"client_name,omitempty" xml:"client_name,omitempty"`
	// Client description
	ClientDescription *string `form:"client_description,omitempty" json:"client_description,omitempty" xml:"client_description,omitempty"`
	// Client URI
	ClientURI *string `form:"client_uri,omitempty" json:"client_uri,omitempty" xml:"client_uri,omitempty"`
	// Logo URI
	LogoURI *string `form:"logo_uri,omitempty" json:"logo_uri,omitempty" xml:"logo_uri,omitempty"`
	// Authorized redirect URIs
	RedirectUris []string `form:"redirect_uris,omitempty" json:"redirect_uris,omitempty" xml:"redirect_uris,omitempty"`
	// Authorized post-logout redirect URIs
	PostLogoutRedirectUris []string `form:"post_logout_redirect_uris,omitempty" json:"post_logout_redirect_uris,omitempty" xml:"post_logout_redirect_uris,omitempty"`
	// Allowed CORS origins
	AllowedCorsOrigins []string `form:"allowed_cors_origins,omitempty" json:"allowed_cors_origins,omitempty" xml:"allowed_cors_origins,omitempty"`
	// Allowed grant types
	AllowedGrantTypes []string `form:"allowed_grant_types,omitempty" json:"allowed_grant_types,omitempty" xml:"allowed_grant_types,omitempty"`
	// Whether client is public
	Public *bool `form:"public,omitempty" json:"public,omitempty" xml:"public,omitempty"`
	// Whether client is active
	Active *bool `form:"active,omitempty" json:"active,omitempty" xml:"active,omitempty"`
	// Organization ID
	OrganizationID *string `form:"organization_id,omitempty" json:"organization_id,omitempty" xml:"organization_id,omitempty"`
	// Access token expiry in seconds
	TokenExpirySeconds *int `form:"token_expiry_seconds,omitempty" json:"token_expiry_seconds,omitempty" xml:"token_expiry_seconds,omitempty"`
	// Refresh token expiry in seconds
	RefreshTokenExpirySeconds *int `form:"refresh_token_expiry_seconds,omitempty" json:"refresh_token_expiry_seconds,omitempty" xml:"refresh_token_expiry_seconds,omitempty"`
	// Whether PKCE is required
	RequiresPkce *bool `form:"requires_pkce,omitempty" json:"requires_pkce,omitempty" xml:"requires_pkce,omitempty"`
	// Whether user consent is required
	RequiresConsent *bool `form:"requires_consent,omitempty" json:"requires_consent,omitempty" xml:"requires_consent,omitempty"`
	// Creation timestamp
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// Last update timestamp
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// GetClientResponseBody is the type of the "oauth_provider" service
// "get_client" endpoint HTTP response body.
type GetClientResponseBody struct {
	// Client ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// OAuth client ID
	ClientID *string `form:"client_id,omitempty" json:"client_id,omitempty" xml:"client_id,omitempty"`
	// Client name
	ClientName *string `form:"client_name,omitempty" json:"client_name,omitempty" xml:"client_name,omitempty"`
	// Client description
	ClientDescription *string `form:"client_description,omitempty" json:"client_description,omitempty" xml:"client_description,omitempty"`
	// Client URI
	ClientURI *string `form:"client_uri,omitempty" json:"client_uri,omitempty" xml:"client_uri,omitempty"`
	// Logo URI
	LogoURI *string `form:"logo_uri,omitempty" json:"logo_uri,omitempty" xml:"logo_uri,omitempty"`
	// Authorized redirect URIs
	RedirectUris []string `form:"redirect_uris,omitempty" json:"redirect_uris,omitempty" xml:"redirect_uris,omitempty"`
	// Authorized post-logout redirect URIs
	PostLogoutRedirectUris []string `form:"post_logout_redirect_uris,omitempty" json:"post_logout_redirect_uris,omitempty" xml:"post_logout_redirect_uris,omitempty"`
	// Allowed CORS origins
	AllowedCorsOrigins []string `form:"allowed_cors_origins,omitempty" json:"allowed_cors_origins,omitempty" xml:"allowed_cors_origins,omitempty"`
	// Allowed grant types
	AllowedGrantTypes []string `form:"allowed_grant_types,omitempty" json:"allowed_grant_types,omitempty" xml:"allowed_grant_types,omitempty"`
	// Whether client is public
	Public *bool `form:"public,omitempty" json:"public,omitempty" xml:"public,omitempty"`
	// Whether client is active
	Active *bool `form:"active,omitempty" json:"active,omitempty" xml:"active,omitempty"`
	// Organization ID
	OrganizationID *string `form:"organization_id,omitempty" json:"organization_id,omitempty" xml:"organization_id,omitempty"`
	// Access token expiry in seconds
	TokenExpirySeconds *int `form:"token_expiry_seconds,omitempty" json:"token_expiry_seconds,omitempty" xml:"token_expiry_seconds,omitempty"`
	// Refresh token expiry in seconds
	RefreshTokenExpirySeconds *int `form:"refresh_token_expiry_seconds,omitempty" json:"refresh_token_expiry_seconds,omitempty" xml:"refresh_token_expiry_seconds,omitempty"`
	// Whether PKCE is required
	RequiresPkce *bool `form:"requires_pkce,omitempty" json:"requires_pkce,omitempty" xml:"requires_pkce,omitempty"`
	// Whether user consent is required
	RequiresConsent *bool `form:"requires_consent,omitempty" json:"requires_consent,omitempty" xml:"requires_consent,omitempty"`
	// Creation timestamp
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// Last update timestamp
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// UpdateClientResponseBody is the type of the "oauth_provider" service
// "update_client" endpoint HTTP response body.
type UpdateClientResponseBody struct {
	// Client ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// OAuth client ID
	ClientID *string `form:"client_id,omitempty" json:"client_id,omitempty" xml:"client_id,omitempty"`
	// Client name
	ClientName *string `form:"client_name,omitempty" json:"client_name,omitempty" xml:"client_name,omitempty"`
	// Client description
	ClientDescription *string `form:"client_description,omitempty" json:"client_description,omitempty" xml:"client_description,omitempty"`
	// Client URI
	ClientURI *string `form:"client_uri,omitempty" json:"client_uri,omitempty" xml:"client_uri,omitempty"`
	// Logo URI
	LogoURI *string `form:"logo_uri,omitempty" json:"logo_uri,omitempty" xml:"logo_uri,omitempty"`
	// Authorized redirect URIs
	RedirectUris []string `form:"redirect_uris,omitempty" json:"redirect_uris,omitempty" xml:"redirect_uris,omitempty"`
	// Authorized post-logout redirect URIs
	PostLogoutRedirectUris []string `form:"post_logout_redirect_uris,omitempty" json:"post_logout_redirect_uris,omitempty" xml:"post_logout_redirect_uris,omitempty"`
	// Allowed CORS origins
	AllowedCorsOrigins []string `form:"allowed_cors_origins,omitempty" json:"allowed_cors_origins,omitempty" xml:"allowed_cors_origins,omitempty"`
	// Allowed grant types
	AllowedGrantTypes []string `form:"allowed_grant_types,omitempty" json:"allowed_grant_types,omitempty" xml:"allowed_grant_types,omitempty"`
	// Whether client is public
	Public *bool `form:"public,omitempty" json:"public,omitempty" xml:"public,omitempty"`
	// Whether client is active
	Active *bool `form:"active,omitempty" json:"active,omitempty" xml:"active,omitempty"`
	// Organization ID
	OrganizationID *string `form:"organization_id,omitempty" json:"organization_id,omitempty" xml:"organization_id,omitempty"`
	// Access token expiry in seconds
	TokenExpirySeconds *int `form:"token_expiry_seconds,omitempty" json:"token_expiry_seconds,omitempty" xml:"token_expiry_seconds,omitempty"`
	// Refresh token expiry in seconds
	RefreshTokenExpirySeconds *int `form:"refresh_token_expiry_seconds,omitempty" json:"refresh_token_expiry_seconds,omitempty" xml:"refresh_token_expiry_seconds,omitempty"`
	// Whether PKCE is required
	RequiresPkce *bool `form:"requires_pkce,omitempty" json:"requires_pkce,omitempty" xml:"requires_pkce,omitempty"`
	// Whether user consent is required
	RequiresConsent *bool `form:"requires_consent,omitempty" json:"requires_consent,omitempty" xml:"requires_consent,omitempty"`
	// Creation timestamp
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// Last update timestamp
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// RotateClientSecretResponseBody is the type of the "oauth_provider" service
// "rotate_client_secret" endpoint HTTP response body.
type RotateClientSecretResponseBody struct {
	ClientID     *string `form:"client_id,omitempty" json:"client_id,omitempty" xml:"client_id,omitempty"`
	ClientSecret *string `form:"client_secret,omitempty" json:"client_secret,omitempty" xml:"client_secret,omitempty"`
}

// ListScopesResponseBody is the type of the "oauth_provider" service
// "list_scopes" endpoint HTTP response body.
type ListScopesResponseBody struct {
	Data       []*OAuthScopeResponseResponseBody `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	Pagination *PaginationResponseResponseBody   `form:"pagination,omitempty" json:"pagination,omitempty" xml:"pagination,omitempty"`
}

// CreateScopeResponseBody is the type of the "oauth_provider" service
// "create_scope" endpoint HTTP response body.
type CreateScopeResponseBody struct {
	// Scope ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Scope name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Scope description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Whether this scope is included by default
	DefaultScope *bool `form:"default_scope,omitempty" json:"default_scope,omitempty" xml:"default_scope,omitempty"`
	// Whether this scope can be requested by any client
	Public *bool `form:"public,omitempty" json:"public,omitempty" xml:"public,omitempty"`
}

// GetScopeResponseBody is the type of the "oauth_provider" service "get_scope"
// endpoint HTTP response body.
type GetScopeResponseBody struct {
	// Scope ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Scope name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Scope description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Whether this scope is included by default
	DefaultScope *bool `form:"default_scope,omitempty" json:"default_scope,omitempty" xml:"default_scope,omitempty"`
	// Whether this scope can be requested by any client
	Public *bool `form:"public,omitempty" json:"public,omitempty" xml:"public,omitempty"`
}

// UpdateScopeResponseBody is the type of the "oauth_provider" service
// "update_scope" endpoint HTTP response body.
type UpdateScopeResponseBody struct {
	// Scope ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Scope name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Scope description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Whether this scope is included by default
	DefaultScope *bool `form:"default_scope,omitempty" json:"default_scope,omitempty" xml:"default_scope,omitempty"`
	// Whether this scope can be requested by any client
	Public *bool `form:"public,omitempty" json:"public,omitempty" xml:"public,omitempty"`
}

// OidcConfigurationResponseBody is the type of the "oauth_provider" service
// "oidc_configuration" endpoint HTTP response body.
type OidcConfigurationResponseBody struct {
	Issuer                            *string  `form:"issuer,omitempty" json:"issuer,omitempty" xml:"issuer,omitempty"`
	AuthorizationEndpoint             *string  `form:"authorization_endpoint,omitempty" json:"authorization_endpoint,omitempty" xml:"authorization_endpoint,omitempty"`
	TokenEndpoint                     *string  `form:"token_endpoint,omitempty" json:"token_endpoint,omitempty" xml:"token_endpoint,omitempty"`
	UserinfoEndpoint                  *string  `form:"userinfo_endpoint,omitempty" json:"userinfo_endpoint,omitempty" xml:"userinfo_endpoint,omitempty"`
	JwksURI                           *string  `form:"jwks_uri,omitempty" json:"jwks_uri,omitempty" xml:"jwks_uri,omitempty"`
	RegistrationEndpoint              *string  `form:"registration_endpoint,omitempty" json:"registration_endpoint,omitempty" xml:"registration_endpoint,omitempty"`
	ScopesSupported                   []string `form:"scopes_supported,omitempty" json:"scopes_supported,omitempty" xml:"scopes_supported,omitempty"`
	ResponseTypesSupported            []string `form:"response_types_supported,omitempty" json:"response_types_supported,omitempty" xml:"response_types_supported,omitempty"`
	ResponseModesSupported            []string `form:"response_modes_supported,omitempty" json:"response_modes_supported,omitempty" xml:"response_modes_supported,omitempty"`
	GrantTypesSupported               []string `form:"grant_types_supported,omitempty" json:"grant_types_supported,omitempty" xml:"grant_types_supported,omitempty"`
	SubjectTypesSupported             []string `form:"subject_types_supported,omitempty" json:"subject_types_supported,omitempty" xml:"subject_types_supported,omitempty"`
	IDTokenSigningAlgValuesSupported  []string `form:"id_token_signing_alg_values_supported,omitempty" json:"id_token_signing_alg_values_supported,omitempty" xml:"id_token_signing_alg_values_supported,omitempty"`
	TokenEndpointAuthMethodsSupported []string `form:"token_endpoint_auth_methods_supported,omitempty" json:"token_endpoint_auth_methods_supported,omitempty" xml:"token_endpoint_auth_methods_supported,omitempty"`
	ClaimsSupported                   []string `form:"claims_supported,omitempty" json:"claims_supported,omitempty" xml:"claims_supported,omitempty"`
}

// JwksResponseBody is the type of the "oauth_provider" service "jwks" endpoint
// HTTP response body.
type JwksResponseBody struct {
	Keys []any `form:"keys,omitempty" json:"keys,omitempty" xml:"keys,omitempty"`
}

// AuthorizeBadRequestResponseBody is the type of the "oauth_provider" service
// "authorize" endpoint HTTP response body for the "bad_request" error.
type AuthorizeBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// AuthorizeConflictResponseBody is the type of the "oauth_provider" service
// "authorize" endpoint HTTP response body for the "conflict" error.
type AuthorizeConflictResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// AuthorizeForbiddenResponseBody is the type of the "oauth_provider" service
// "authorize" endpoint HTTP response body for the "forbidden" error.
type AuthorizeForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// AuthorizeInternalErrorResponseBody is the type of the "oauth_provider"
// service "authorize" endpoint HTTP response body for the "internal_error"
// error.
type AuthorizeInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// AuthorizeNotFoundResponseBody is the type of the "oauth_provider" service
// "authorize" endpoint HTTP response body for the "not_found" error.
type AuthorizeNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// AuthorizeUnauthorizedResponseBody is the type of the "oauth_provider"
// service "authorize" endpoint HTTP response body for the "unauthorized" error.
type AuthorizeUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// TokenBadRequestResponseBody is the type of the "oauth_provider" service
// "token" endpoint HTTP response body for the "bad_request" error.
type TokenBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// TokenConflictResponseBody is the type of the "oauth_provider" service
// "token" endpoint HTTP response body for the "conflict" error.
type TokenConflictResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// TokenForbiddenResponseBody is the type of the "oauth_provider" service
// "token" endpoint HTTP response body for the "forbidden" error.
type TokenForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// TokenInternalErrorResponseBody is the type of the "oauth_provider" service
// "token" endpoint HTTP response body for the "internal_error" error.
type TokenInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// TokenNotFoundResponseBody is the type of the "oauth_provider" service
// "token" endpoint HTTP response body for the "not_found" error.
type TokenNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// TokenUnauthorizedResponseBody is the type of the "oauth_provider" service
// "token" endpoint HTTP response body for the "unauthorized" error.
type TokenUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// IntrospectBadRequestResponseBody is the type of the "oauth_provider" service
// "introspect" endpoint HTTP response body for the "bad_request" error.
type IntrospectBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// IntrospectConflictResponseBody is the type of the "oauth_provider" service
// "introspect" endpoint HTTP response body for the "conflict" error.
type IntrospectConflictResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// IntrospectForbiddenResponseBody is the type of the "oauth_provider" service
// "introspect" endpoint HTTP response body for the "forbidden" error.
type IntrospectForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// IntrospectInternalErrorResponseBody is the type of the "oauth_provider"
// service "introspect" endpoint HTTP response body for the "internal_error"
// error.
type IntrospectInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// IntrospectNotFoundResponseBody is the type of the "oauth_provider" service
// "introspect" endpoint HTTP response body for the "not_found" error.
type IntrospectNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// IntrospectUnauthorizedResponseBody is the type of the "oauth_provider"
// service "introspect" endpoint HTTP response body for the "unauthorized"
// error.
type IntrospectUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// RevokeBadRequestResponseBody is the type of the "oauth_provider" service
// "revoke" endpoint HTTP response body for the "bad_request" error.
type RevokeBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// RevokeConflictResponseBody is the type of the "oauth_provider" service
// "revoke" endpoint HTTP response body for the "conflict" error.
type RevokeConflictResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// RevokeForbiddenResponseBody is the type of the "oauth_provider" service
// "revoke" endpoint HTTP response body for the "forbidden" error.
type RevokeForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// RevokeInternalErrorResponseBody is the type of the "oauth_provider" service
// "revoke" endpoint HTTP response body for the "internal_error" error.
type RevokeInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// RevokeNotFoundResponseBody is the type of the "oauth_provider" service
// "revoke" endpoint HTTP response body for the "not_found" error.
type RevokeNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// RevokeUnauthorizedResponseBody is the type of the "oauth_provider" service
// "revoke" endpoint HTTP response body for the "unauthorized" error.
type RevokeUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ConsentBadRequestResponseBody is the type of the "oauth_provider" service
// "consent" endpoint HTTP response body for the "bad_request" error.
type ConsentBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ConsentConflictResponseBody is the type of the "oauth_provider" service
// "consent" endpoint HTTP response body for the "conflict" error.
type ConsentConflictResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ConsentForbiddenResponseBody is the type of the "oauth_provider" service
// "consent" endpoint HTTP response body for the "forbidden" error.
type ConsentForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ConsentInternalErrorResponseBody is the type of the "oauth_provider" service
// "consent" endpoint HTTP response body for the "internal_error" error.
type ConsentInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ConsentNotFoundResponseBody is the type of the "oauth_provider" service
// "consent" endpoint HTTP response body for the "not_found" error.
type ConsentNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ConsentUnauthorizedResponseBody is the type of the "oauth_provider" service
// "consent" endpoint HTTP response body for the "unauthorized" error.
type ConsentUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UserinfoBadRequestResponseBody is the type of the "oauth_provider" service
// "userinfo" endpoint HTTP response body for the "bad_request" error.
type UserinfoBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UserinfoConflictResponseBody is the type of the "oauth_provider" service
// "userinfo" endpoint HTTP response body for the "conflict" error.
type UserinfoConflictResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UserinfoForbiddenResponseBody is the type of the "oauth_provider" service
// "userinfo" endpoint HTTP response body for the "forbidden" error.
type UserinfoForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UserinfoInternalErrorResponseBody is the type of the "oauth_provider"
// service "userinfo" endpoint HTTP response body for the "internal_error"
// error.
type UserinfoInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UserinfoNotFoundResponseBody is the type of the "oauth_provider" service
// "userinfo" endpoint HTTP response body for the "not_found" error.
type UserinfoNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UserinfoUnauthorizedResponseBody is the type of the "oauth_provider" service
// "userinfo" endpoint HTTP response body for the "unauthorized" error.
type UserinfoUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListClientsBadRequestResponseBody is the type of the "oauth_provider"
// service "list_clients" endpoint HTTP response body for the "bad_request"
// error.
type ListClientsBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListClientsConflictResponseBody is the type of the "oauth_provider" service
// "list_clients" endpoint HTTP response body for the "conflict" error.
type ListClientsConflictResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListClientsForbiddenResponseBody is the type of the "oauth_provider" service
// "list_clients" endpoint HTTP response body for the "forbidden" error.
type ListClientsForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListClientsInternalErrorResponseBody is the type of the "oauth_provider"
// service "list_clients" endpoint HTTP response body for the "internal_error"
// error.
type ListClientsInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListClientsNotFoundResponseBody is the type of the "oauth_provider" service
// "list_clients" endpoint HTTP response body for the "not_found" error.
type ListClientsNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListClientsUnauthorizedResponseBody is the type of the "oauth_provider"
// service "list_clients" endpoint HTTP response body for the "unauthorized"
// error.
type ListClientsUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreateClientBadRequestResponseBody is the type of the "oauth_provider"
// service "create_client" endpoint HTTP response body for the "bad_request"
// error.
type CreateClientBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreateClientConflictResponseBody is the type of the "oauth_provider" service
// "create_client" endpoint HTTP response body for the "conflict" error.
type CreateClientConflictResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreateClientForbiddenResponseBody is the type of the "oauth_provider"
// service "create_client" endpoint HTTP response body for the "forbidden"
// error.
type CreateClientForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreateClientInternalErrorResponseBody is the type of the "oauth_provider"
// service "create_client" endpoint HTTP response body for the "internal_error"
// error.
type CreateClientInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreateClientNotFoundResponseBody is the type of the "oauth_provider" service
// "create_client" endpoint HTTP response body for the "not_found" error.
type CreateClientNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreateClientUnauthorizedResponseBody is the type of the "oauth_provider"
// service "create_client" endpoint HTTP response body for the "unauthorized"
// error.
type CreateClientUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetClientBadRequestResponseBody is the type of the "oauth_provider" service
// "get_client" endpoint HTTP response body for the "bad_request" error.
type GetClientBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetClientConflictResponseBody is the type of the "oauth_provider" service
// "get_client" endpoint HTTP response body for the "conflict" error.
type GetClientConflictResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetClientForbiddenResponseBody is the type of the "oauth_provider" service
// "get_client" endpoint HTTP response body for the "forbidden" error.
type GetClientForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetClientInternalErrorResponseBody is the type of the "oauth_provider"
// service "get_client" endpoint HTTP response body for the "internal_error"
// error.
type GetClientInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetClientNotFoundResponseBody is the type of the "oauth_provider" service
// "get_client" endpoint HTTP response body for the "not_found" error.
type GetClientNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetClientUnauthorizedResponseBody is the type of the "oauth_provider"
// service "get_client" endpoint HTTP response body for the "unauthorized"
// error.
type GetClientUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateClientBadRequestResponseBody is the type of the "oauth_provider"
// service "update_client" endpoint HTTP response body for the "bad_request"
// error.
type UpdateClientBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateClientConflictResponseBody is the type of the "oauth_provider" service
// "update_client" endpoint HTTP response body for the "conflict" error.
type UpdateClientConflictResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateClientForbiddenResponseBody is the type of the "oauth_provider"
// service "update_client" endpoint HTTP response body for the "forbidden"
// error.
type UpdateClientForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateClientInternalErrorResponseBody is the type of the "oauth_provider"
// service "update_client" endpoint HTTP response body for the "internal_error"
// error.
type UpdateClientInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateClientNotFoundResponseBody is the type of the "oauth_provider" service
// "update_client" endpoint HTTP response body for the "not_found" error.
type UpdateClientNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateClientUnauthorizedResponseBody is the type of the "oauth_provider"
// service "update_client" endpoint HTTP response body for the "unauthorized"
// error.
type UpdateClientUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteClientBadRequestResponseBody is the type of the "oauth_provider"
// service "delete_client" endpoint HTTP response body for the "bad_request"
// error.
type DeleteClientBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteClientConflictResponseBody is the type of the "oauth_provider" service
// "delete_client" endpoint HTTP response body for the "conflict" error.
type DeleteClientConflictResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteClientForbiddenResponseBody is the type of the "oauth_provider"
// service "delete_client" endpoint HTTP response body for the "forbidden"
// error.
type DeleteClientForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteClientInternalErrorResponseBody is the type of the "oauth_provider"
// service "delete_client" endpoint HTTP response body for the "internal_error"
// error.
type DeleteClientInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteClientNotFoundResponseBody is the type of the "oauth_provider" service
// "delete_client" endpoint HTTP response body for the "not_found" error.
type DeleteClientNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteClientUnauthorizedResponseBody is the type of the "oauth_provider"
// service "delete_client" endpoint HTTP response body for the "unauthorized"
// error.
type DeleteClientUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// RotateClientSecretBadRequestResponseBody is the type of the "oauth_provider"
// service "rotate_client_secret" endpoint HTTP response body for the
// "bad_request" error.
type RotateClientSecretBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// RotateClientSecretConflictResponseBody is the type of the "oauth_provider"
// service "rotate_client_secret" endpoint HTTP response body for the
// "conflict" error.
type RotateClientSecretConflictResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// RotateClientSecretForbiddenResponseBody is the type of the "oauth_provider"
// service "rotate_client_secret" endpoint HTTP response body for the
// "forbidden" error.
type RotateClientSecretForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// RotateClientSecretInternalErrorResponseBody is the type of the
// "oauth_provider" service "rotate_client_secret" endpoint HTTP response body
// for the "internal_error" error.
type RotateClientSecretInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// RotateClientSecretNotFoundResponseBody is the type of the "oauth_provider"
// service "rotate_client_secret" endpoint HTTP response body for the
// "not_found" error.
type RotateClientSecretNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// RotateClientSecretUnauthorizedResponseBody is the type of the
// "oauth_provider" service "rotate_client_secret" endpoint HTTP response body
// for the "unauthorized" error.
type RotateClientSecretUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListScopesBadRequestResponseBody is the type of the "oauth_provider" service
// "list_scopes" endpoint HTTP response body for the "bad_request" error.
type ListScopesBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListScopesConflictResponseBody is the type of the "oauth_provider" service
// "list_scopes" endpoint HTTP response body for the "conflict" error.
type ListScopesConflictResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListScopesForbiddenResponseBody is the type of the "oauth_provider" service
// "list_scopes" endpoint HTTP response body for the "forbidden" error.
type ListScopesForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListScopesInternalErrorResponseBody is the type of the "oauth_provider"
// service "list_scopes" endpoint HTTP response body for the "internal_error"
// error.
type ListScopesInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListScopesNotFoundResponseBody is the type of the "oauth_provider" service
// "list_scopes" endpoint HTTP response body for the "not_found" error.
type ListScopesNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListScopesUnauthorizedResponseBody is the type of the "oauth_provider"
// service "list_scopes" endpoint HTTP response body for the "unauthorized"
// error.
type ListScopesUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreateScopeBadRequestResponseBody is the type of the "oauth_provider"
// service "create_scope" endpoint HTTP response body for the "bad_request"
// error.
type CreateScopeBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreateScopeConflictResponseBody is the type of the "oauth_provider" service
// "create_scope" endpoint HTTP response body for the "conflict" error.
type CreateScopeConflictResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreateScopeForbiddenResponseBody is the type of the "oauth_provider" service
// "create_scope" endpoint HTTP response body for the "forbidden" error.
type CreateScopeForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreateScopeInternalErrorResponseBody is the type of the "oauth_provider"
// service "create_scope" endpoint HTTP response body for the "internal_error"
// error.
type CreateScopeInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreateScopeNotFoundResponseBody is the type of the "oauth_provider" service
// "create_scope" endpoint HTTP response body for the "not_found" error.
type CreateScopeNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreateScopeUnauthorizedResponseBody is the type of the "oauth_provider"
// service "create_scope" endpoint HTTP response body for the "unauthorized"
// error.
type CreateScopeUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetScopeBadRequestResponseBody is the type of the "oauth_provider" service
// "get_scope" endpoint HTTP response body for the "bad_request" error.
type GetScopeBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetScopeConflictResponseBody is the type of the "oauth_provider" service
// "get_scope" endpoint HTTP response body for the "conflict" error.
type GetScopeConflictResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetScopeForbiddenResponseBody is the type of the "oauth_provider" service
// "get_scope" endpoint HTTP response body for the "forbidden" error.
type GetScopeForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetScopeInternalErrorResponseBody is the type of the "oauth_provider"
// service "get_scope" endpoint HTTP response body for the "internal_error"
// error.
type GetScopeInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetScopeNotFoundResponseBody is the type of the "oauth_provider" service
// "get_scope" endpoint HTTP response body for the "not_found" error.
type GetScopeNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetScopeUnauthorizedResponseBody is the type of the "oauth_provider" service
// "get_scope" endpoint HTTP response body for the "unauthorized" error.
type GetScopeUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateScopeBadRequestResponseBody is the type of the "oauth_provider"
// service "update_scope" endpoint HTTP response body for the "bad_request"
// error.
type UpdateScopeBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateScopeConflictResponseBody is the type of the "oauth_provider" service
// "update_scope" endpoint HTTP response body for the "conflict" error.
type UpdateScopeConflictResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateScopeForbiddenResponseBody is the type of the "oauth_provider" service
// "update_scope" endpoint HTTP response body for the "forbidden" error.
type UpdateScopeForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateScopeInternalErrorResponseBody is the type of the "oauth_provider"
// service "update_scope" endpoint HTTP response body for the "internal_error"
// error.
type UpdateScopeInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateScopeNotFoundResponseBody is the type of the "oauth_provider" service
// "update_scope" endpoint HTTP response body for the "not_found" error.
type UpdateScopeNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateScopeUnauthorizedResponseBody is the type of the "oauth_provider"
// service "update_scope" endpoint HTTP response body for the "unauthorized"
// error.
type UpdateScopeUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteScopeBadRequestResponseBody is the type of the "oauth_provider"
// service "delete_scope" endpoint HTTP response body for the "bad_request"
// error.
type DeleteScopeBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteScopeConflictResponseBody is the type of the "oauth_provider" service
// "delete_scope" endpoint HTTP response body for the "conflict" error.
type DeleteScopeConflictResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteScopeForbiddenResponseBody is the type of the "oauth_provider" service
// "delete_scope" endpoint HTTP response body for the "forbidden" error.
type DeleteScopeForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteScopeInternalErrorResponseBody is the type of the "oauth_provider"
// service "delete_scope" endpoint HTTP response body for the "internal_error"
// error.
type DeleteScopeInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteScopeNotFoundResponseBody is the type of the "oauth_provider" service
// "delete_scope" endpoint HTTP response body for the "not_found" error.
type DeleteScopeNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteScopeUnauthorizedResponseBody is the type of the "oauth_provider"
// service "delete_scope" endpoint HTTP response body for the "unauthorized"
// error.
type DeleteScopeUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// OidcConfigurationBadRequestResponseBody is the type of the "oauth_provider"
// service "oidc_configuration" endpoint HTTP response body for the
// "bad_request" error.
type OidcConfigurationBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// OidcConfigurationConflictResponseBody is the type of the "oauth_provider"
// service "oidc_configuration" endpoint HTTP response body for the "conflict"
// error.
type OidcConfigurationConflictResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// OidcConfigurationForbiddenResponseBody is the type of the "oauth_provider"
// service "oidc_configuration" endpoint HTTP response body for the "forbidden"
// error.
type OidcConfigurationForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// OidcConfigurationInternalErrorResponseBody is the type of the
// "oauth_provider" service "oidc_configuration" endpoint HTTP response body
// for the "internal_error" error.
type OidcConfigurationInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// OidcConfigurationNotFoundResponseBody is the type of the "oauth_provider"
// service "oidc_configuration" endpoint HTTP response body for the "not_found"
// error.
type OidcConfigurationNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// OidcConfigurationUnauthorizedResponseBody is the type of the
// "oauth_provider" service "oidc_configuration" endpoint HTTP response body
// for the "unauthorized" error.
type OidcConfigurationUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// JwksBadRequestResponseBody is the type of the "oauth_provider" service
// "jwks" endpoint HTTP response body for the "bad_request" error.
type JwksBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// JwksConflictResponseBody is the type of the "oauth_provider" service "jwks"
// endpoint HTTP response body for the "conflict" error.
type JwksConflictResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// JwksForbiddenResponseBody is the type of the "oauth_provider" service "jwks"
// endpoint HTTP response body for the "forbidden" error.
type JwksForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// JwksInternalErrorResponseBody is the type of the "oauth_provider" service
// "jwks" endpoint HTTP response body for the "internal_error" error.
type JwksInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// JwksNotFoundResponseBody is the type of the "oauth_provider" service "jwks"
// endpoint HTTP response body for the "not_found" error.
type JwksNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// JwksUnauthorizedResponseBody is the type of the "oauth_provider" service
// "jwks" endpoint HTTP response body for the "unauthorized" error.
type JwksUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// OAuthClientResponseResponseBody is used to define fields on response body
// types.
type OAuthClientResponseResponseBody struct {
	// Client ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// OAuth client ID
	ClientID *string `form:"client_id,omitempty" json:"client_id,omitempty" xml:"client_id,omitempty"`
	// Client name
	ClientName *string `form:"client_name,omitempty" json:"client_name,omitempty" xml:"client_name,omitempty"`
	// Client description
	ClientDescription *string `form:"client_description,omitempty" json:"client_description,omitempty" xml:"client_description,omitempty"`
	// Client URI
	ClientURI *string `form:"client_uri,omitempty" json:"client_uri,omitempty" xml:"client_uri,omitempty"`
	// Logo URI
	LogoURI *string `form:"logo_uri,omitempty" json:"logo_uri,omitempty" xml:"logo_uri,omitempty"`
	// Authorized redirect URIs
	RedirectUris []string `form:"redirect_uris,omitempty" json:"redirect_uris,omitempty" xml:"redirect_uris,omitempty"`
	// Authorized post-logout redirect URIs
	PostLogoutRedirectUris []string `form:"post_logout_redirect_uris,omitempty" json:"post_logout_redirect_uris,omitempty" xml:"post_logout_redirect_uris,omitempty"`
	// Allowed CORS origins
	AllowedCorsOrigins []string `form:"allowed_cors_origins,omitempty" json:"allowed_cors_origins,omitempty" xml:"allowed_cors_origins,omitempty"`
	// Allowed grant types
	AllowedGrantTypes []string `form:"allowed_grant_types,omitempty" json:"allowed_grant_types,omitempty" xml:"allowed_grant_types,omitempty"`
	// Whether client is public
	Public *bool `form:"public,omitempty" json:"public,omitempty" xml:"public,omitempty"`
	// Whether client is active
	Active *bool `form:"active,omitempty" json:"active,omitempty" xml:"active,omitempty"`
	// Organization ID
	OrganizationID *string `form:"organization_id,omitempty" json:"organization_id,omitempty" xml:"organization_id,omitempty"`
	// Access token expiry in seconds
	TokenExpirySeconds *int `form:"token_expiry_seconds,omitempty" json:"token_expiry_seconds,omitempty" xml:"token_expiry_seconds,omitempty"`
	// Refresh token expiry in seconds
	RefreshTokenExpirySeconds *int `form:"refresh_token_expiry_seconds,omitempty" json:"refresh_token_expiry_seconds,omitempty" xml:"refresh_token_expiry_seconds,omitempty"`
	// Whether PKCE is required
	RequiresPkce *bool `form:"requires_pkce,omitempty" json:"requires_pkce,omitempty" xml:"requires_pkce,omitempty"`
	// Whether user consent is required
	RequiresConsent *bool `form:"requires_consent,omitempty" json:"requires_consent,omitempty" xml:"requires_consent,omitempty"`
	// Creation timestamp
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// Last update timestamp
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// PaginationResponseResponseBody is used to define fields on response body
// types.
type PaginationResponseResponseBody struct {
	// Total number of items
	Total *int `form:"total,omitempty" json:"total,omitempty" xml:"total,omitempty"`
	// Current offset
	Offset *int `form:"offset,omitempty" json:"offset,omitempty" xml:"offset,omitempty"`
	// Current limit
	Limit *int `form:"limit,omitempty" json:"limit,omitempty" xml:"limit,omitempty"`
}

// UpdateOAuthClientRequestRequestBody is used to define fields on request body
// types.
type UpdateOAuthClientRequestRequestBody struct {
	// Client name
	ClientName *string `form:"client_name,omitempty" json:"client_name,omitempty" xml:"client_name,omitempty"`
	// Client description
	ClientDescription *string `form:"client_description,omitempty" json:"client_description,omitempty" xml:"client_description,omitempty"`
	// Client URI
	ClientURI *string `form:"client_uri,omitempty" json:"client_uri,omitempty" xml:"client_uri,omitempty"`
	// Logo URI
	LogoURI *string `form:"logo_uri,omitempty" json:"logo_uri,omitempty" xml:"logo_uri,omitempty"`
	// Authorized redirect URIs
	RedirectUris []string `form:"redirect_uris,omitempty" json:"redirect_uris,omitempty" xml:"redirect_uris,omitempty"`
	// Authorized post-logout redirect URIs
	PostLogoutRedirectUris []string `form:"post_logout_redirect_uris,omitempty" json:"post_logout_redirect_uris,omitempty" xml:"post_logout_redirect_uris,omitempty"`
	// Allowed CORS origins
	AllowedCorsOrigins []string `form:"allowed_cors_origins,omitempty" json:"allowed_cors_origins,omitempty" xml:"allowed_cors_origins,omitempty"`
	// Allowed grant types
	AllowedGrantTypes []string `form:"allowed_grant_types,omitempty" json:"allowed_grant_types,omitempty" xml:"allowed_grant_types,omitempty"`
	// Whether client is public
	Public *bool `form:"public,omitempty" json:"public,omitempty" xml:"public,omitempty"`
	// Whether client is active
	Active *bool `form:"active,omitempty" json:"active,omitempty" xml:"active,omitempty"`
	// Access token expiry in seconds
	TokenExpirySeconds *int `form:"token_expiry_seconds,omitempty" json:"token_expiry_seconds,omitempty" xml:"token_expiry_seconds,omitempty"`
	// Refresh token expiry in seconds
	RefreshTokenExpirySeconds *int `form:"refresh_token_expiry_seconds,omitempty" json:"refresh_token_expiry_seconds,omitempty" xml:"refresh_token_expiry_seconds,omitempty"`
	// Whether PKCE is required
	RequiresPkce *bool `form:"requires_pkce,omitempty" json:"requires_pkce,omitempty" xml:"requires_pkce,omitempty"`
	// Whether user consent is required
	RequiresConsent *bool `form:"requires_consent,omitempty" json:"requires_consent,omitempty" xml:"requires_consent,omitempty"`
}

// OAuthScopeResponseResponseBody is used to define fields on response body
// types.
type OAuthScopeResponseResponseBody struct {
	// Scope ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Scope name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Scope description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Whether this scope is included by default
	DefaultScope *bool `form:"default_scope,omitempty" json:"default_scope,omitempty" xml:"default_scope,omitempty"`
	// Whether this scope can be requested by any client
	Public *bool `form:"public,omitempty" json:"public,omitempty" xml:"public,omitempty"`
}

// NewConsentRequestBody builds the HTTP request body from the payload of the
// "consent" endpoint of the "oauth_provider" service.
func NewConsentRequestBody(p *oauthprovider.ConsentPayload) *ConsentRequestBody {
	body := &ConsentRequestBody{
		ClientID:    p.ClientID,
		Scope:       p.Scope,
		RedirectURI: p.RedirectURI,
		State:       p.State,
		Approved:    p.Approved,
	}
	{
		var zero bool
		if body.Approved == zero {
			body.Approved = false
		}
	}
	return body
}

// NewCreateClientRequestBody builds the HTTP request body from the payload of
// the "create_client" endpoint of the "oauth_provider" service.
func NewCreateClientRequestBody(p *oauthprovider.CreateClientPayload) *CreateClientRequestBody {
	body := &CreateClientRequestBody{
		ClientName:                p.ClientName,
		ClientDescription:         p.ClientDescription,
		ClientURI:                 p.ClientURI,
		LogoURI:                   p.LogoURI,
		Public:                    p.Public,
		TokenExpirySeconds:        p.TokenExpirySeconds,
		RefreshTokenExpirySeconds: p.RefreshTokenExpirySeconds,
		RequiresPkce:              p.RequiresPkce,
		RequiresConsent:           p.RequiresConsent,
	}
	if p.RedirectUris != nil {
		body.RedirectUris = make([]string, len(p.RedirectUris))
		for i, val := range p.RedirectUris {
			body.RedirectUris[i] = val
		}
	} else {
		body.RedirectUris = []string{}
	}
	if p.PostLogoutRedirectUris != nil {
		body.PostLogoutRedirectUris = make([]string, len(p.PostLogoutRedirectUris))
		for i, val := range p.PostLogoutRedirectUris {
			body.PostLogoutRedirectUris[i] = val
		}
	}
	if p.AllowedCorsOrigins != nil {
		body.AllowedCorsOrigins = make([]string, len(p.AllowedCorsOrigins))
		for i, val := range p.AllowedCorsOrigins {
			body.AllowedCorsOrigins[i] = val
		}
	}
	if p.AllowedGrantTypes != nil {
		body.AllowedGrantTypes = make([]string, len(p.AllowedGrantTypes))
		for i, val := range p.AllowedGrantTypes {
			body.AllowedGrantTypes[i] = val
		}
	}
	{
		var zero bool
		if body.Public == zero {
			body.Public = false
		}
	}
	{
		var zero int
		if body.TokenExpirySeconds == zero {
			body.TokenExpirySeconds = 3600
		}
	}
	{
		var zero int
		if body.RefreshTokenExpirySeconds == zero {
			body.RefreshTokenExpirySeconds = 2592000
		}
	}
	{
		var zero bool
		if body.RequiresPkce == zero {
			body.RequiresPkce = true
		}
	}
	{
		var zero bool
		if body.RequiresConsent == zero {
			body.RequiresConsent = true
		}
	}
	return body
}

// NewUpdateClientRequestBody builds the HTTP request body from the payload of
// the "update_client" endpoint of the "oauth_provider" service.
func NewUpdateClientRequestBody(p *oauthprovider.UpdateClientPayload) *UpdateClientRequestBody {
	body := &UpdateClientRequestBody{}
	if p.Client != nil {
		body.Client = marshalOauthproviderUpdateOAuthClientRequestToUpdateOAuthClientRequestRequestBody(p.Client)
	}
	return body
}

// NewCreateScopeRequestBody builds the HTTP request body from the payload of
// the "create_scope" endpoint of the "oauth_provider" service.
func NewCreateScopeRequestBody(p *oauthprovider.CreateScopePayload) *CreateScopeRequestBody {
	body := &CreateScopeRequestBody{
		Name:         p.Name,
		Description:  p.Description,
		DefaultScope: p.DefaultScope,
		Public:       p.Public,
	}
	{
		var zero bool
		if body.DefaultScope == zero {
			body.DefaultScope = false
		}
	}
	{
		var zero bool
		if body.Public == zero {
			body.Public = true
		}
	}
	return body
}

// NewUpdateScopeRequestBody builds the HTTP request body from the payload of
// the "update_scope" endpoint of the "oauth_provider" service.
func NewUpdateScopeRequestBody(p *oauthprovider.UpdateScopePayload) *UpdateScopeRequestBody {
	body := &UpdateScopeRequestBody{
		Description:  p.Description,
		DefaultScope: p.DefaultScope,
		Public:       p.Public,
	}
	return body
}

// NewAuthorizeBadRequest builds a oauth_provider service authorize endpoint
// bad_request error.
func NewAuthorizeBadRequest(body *AuthorizeBadRequestResponseBody) *oauthprovider.BadRequestError {
	v := &oauthprovider.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewAuthorizeConflict builds a oauth_provider service authorize endpoint
// conflict error.
func NewAuthorizeConflict(body *AuthorizeConflictResponseBody) *oauthprovider.ConflictError {
	v := &oauthprovider.ConflictError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewAuthorizeForbidden builds a oauth_provider service authorize endpoint
// forbidden error.
func NewAuthorizeForbidden(body *AuthorizeForbiddenResponseBody) *oauthprovider.ForbiddenError {
	v := &oauthprovider.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewAuthorizeInternalError builds a oauth_provider service authorize endpoint
// internal_error error.
func NewAuthorizeInternalError(body *AuthorizeInternalErrorResponseBody) *oauthprovider.InternalServerError {
	v := &oauthprovider.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewAuthorizeNotFound builds a oauth_provider service authorize endpoint
// not_found error.
func NewAuthorizeNotFound(body *AuthorizeNotFoundResponseBody) *oauthprovider.NotFoundError {
	v := &oauthprovider.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewAuthorizeUnauthorized builds a oauth_provider service authorize endpoint
// unauthorized error.
func NewAuthorizeUnauthorized(body *AuthorizeUnauthorizedResponseBody) *oauthprovider.UnauthorizedError {
	v := &oauthprovider.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewTokenResultOK builds a "oauth_provider" service "token" endpoint result
// from a HTTP "OK" response.
func NewTokenResultOK(body *TokenResponseBody) *oauthprovider.TokenResult {
	v := &oauthprovider.TokenResult{
		AccessToken:  *body.AccessToken,
		TokenType:    *body.TokenType,
		ExpiresIn:    *body.ExpiresIn,
		RefreshToken: body.RefreshToken,
		Scope:        body.Scope,
	}

	return v
}

// NewTokenBadRequest builds a oauth_provider service token endpoint
// bad_request error.
func NewTokenBadRequest(body *TokenBadRequestResponseBody) *oauthprovider.BadRequestError {
	v := &oauthprovider.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewTokenConflict builds a oauth_provider service token endpoint conflict
// error.
func NewTokenConflict(body *TokenConflictResponseBody) *oauthprovider.ConflictError {
	v := &oauthprovider.ConflictError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewTokenForbidden builds a oauth_provider service token endpoint forbidden
// error.
func NewTokenForbidden(body *TokenForbiddenResponseBody) *oauthprovider.ForbiddenError {
	v := &oauthprovider.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewTokenInternalError builds a oauth_provider service token endpoint
// internal_error error.
func NewTokenInternalError(body *TokenInternalErrorResponseBody) *oauthprovider.InternalServerError {
	v := &oauthprovider.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewTokenNotFound builds a oauth_provider service token endpoint not_found
// error.
func NewTokenNotFound(body *TokenNotFoundResponseBody) *oauthprovider.NotFoundError {
	v := &oauthprovider.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewTokenUnauthorized builds a oauth_provider service token endpoint
// unauthorized error.
func NewTokenUnauthorized(body *TokenUnauthorizedResponseBody) *oauthprovider.UnauthorizedError {
	v := &oauthprovider.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewIntrospectResultOK builds a "oauth_provider" service "introspect"
// endpoint result from a HTTP "OK" response.
func NewIntrospectResultOK(body *IntrospectResponseBody) *oauthprovider.IntrospectResult {
	v := &oauthprovider.IntrospectResult{
		Active:    *body.Active,
		Scope:     body.Scope,
		ClientID:  body.ClientID,
		Username:  body.Username,
		TokenType: body.TokenType,
		Exp:       body.Exp,
		Iat:       body.Iat,
		Nbf:       body.Nbf,
		Sub:       body.Sub,
		Aud:       body.Aud,
		Iss:       body.Iss,
		Jti:       body.Jti,
	}

	return v
}

// NewIntrospectBadRequest builds a oauth_provider service introspect endpoint
// bad_request error.
func NewIntrospectBadRequest(body *IntrospectBadRequestResponseBody) *oauthprovider.BadRequestError {
	v := &oauthprovider.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewIntrospectConflict builds a oauth_provider service introspect endpoint
// conflict error.
func NewIntrospectConflict(body *IntrospectConflictResponseBody) *oauthprovider.ConflictError {
	v := &oauthprovider.ConflictError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewIntrospectForbidden builds a oauth_provider service introspect endpoint
// forbidden error.
func NewIntrospectForbidden(body *IntrospectForbiddenResponseBody) *oauthprovider.ForbiddenError {
	v := &oauthprovider.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewIntrospectInternalError builds a oauth_provider service introspect
// endpoint internal_error error.
func NewIntrospectInternalError(body *IntrospectInternalErrorResponseBody) *oauthprovider.InternalServerError {
	v := &oauthprovider.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewIntrospectNotFound builds a oauth_provider service introspect endpoint
// not_found error.
func NewIntrospectNotFound(body *IntrospectNotFoundResponseBody) *oauthprovider.NotFoundError {
	v := &oauthprovider.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewIntrospectUnauthorized builds a oauth_provider service introspect
// endpoint unauthorized error.
func NewIntrospectUnauthorized(body *IntrospectUnauthorizedResponseBody) *oauthprovider.UnauthorizedError {
	v := &oauthprovider.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewRevokeBadRequest builds a oauth_provider service revoke endpoint
// bad_request error.
func NewRevokeBadRequest(body *RevokeBadRequestResponseBody) *oauthprovider.BadRequestError {
	v := &oauthprovider.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewRevokeConflict builds a oauth_provider service revoke endpoint conflict
// error.
func NewRevokeConflict(body *RevokeConflictResponseBody) *oauthprovider.ConflictError {
	v := &oauthprovider.ConflictError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewRevokeForbidden builds a oauth_provider service revoke endpoint forbidden
// error.
func NewRevokeForbidden(body *RevokeForbiddenResponseBody) *oauthprovider.ForbiddenError {
	v := &oauthprovider.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewRevokeInternalError builds a oauth_provider service revoke endpoint
// internal_error error.
func NewRevokeInternalError(body *RevokeInternalErrorResponseBody) *oauthprovider.InternalServerError {
	v := &oauthprovider.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewRevokeNotFound builds a oauth_provider service revoke endpoint not_found
// error.
func NewRevokeNotFound(body *RevokeNotFoundResponseBody) *oauthprovider.NotFoundError {
	v := &oauthprovider.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewRevokeUnauthorized builds a oauth_provider service revoke endpoint
// unauthorized error.
func NewRevokeUnauthorized(body *RevokeUnauthorizedResponseBody) *oauthprovider.UnauthorizedError {
	v := &oauthprovider.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewConsentResultTemporaryRedirect builds a "oauth_provider" service
// "consent" endpoint result from a HTTP "TemporaryRedirect" response.
func NewConsentResultTemporaryRedirect(body *ConsentResponseBody) *oauthprovider.ConsentResult {
	v := &oauthprovider.ConsentResult{
		RedirectURI: *body.RedirectURI,
	}

	return v
}

// NewConsentBadRequest builds a oauth_provider service consent endpoint
// bad_request error.
func NewConsentBadRequest(body *ConsentBadRequestResponseBody) *oauthprovider.BadRequestError {
	v := &oauthprovider.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewConsentConflict builds a oauth_provider service consent endpoint conflict
// error.
func NewConsentConflict(body *ConsentConflictResponseBody) *oauthprovider.ConflictError {
	v := &oauthprovider.ConflictError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewConsentForbidden builds a oauth_provider service consent endpoint
// forbidden error.
func NewConsentForbidden(body *ConsentForbiddenResponseBody) *oauthprovider.ForbiddenError {
	v := &oauthprovider.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewConsentInternalError builds a oauth_provider service consent endpoint
// internal_error error.
func NewConsentInternalError(body *ConsentInternalErrorResponseBody) *oauthprovider.InternalServerError {
	v := &oauthprovider.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewConsentNotFound builds a oauth_provider service consent endpoint
// not_found error.
func NewConsentNotFound(body *ConsentNotFoundResponseBody) *oauthprovider.NotFoundError {
	v := &oauthprovider.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewConsentUnauthorized builds a oauth_provider service consent endpoint
// unauthorized error.
func NewConsentUnauthorized(body *ConsentUnauthorizedResponseBody) *oauthprovider.UnauthorizedError {
	v := &oauthprovider.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewUserinfoResultOK builds a "oauth_provider" service "userinfo" endpoint
// result from a HTTP "OK" response.
func NewUserinfoResultOK(body *UserinfoResponseBody) *oauthprovider.UserinfoResult {
	v := &oauthprovider.UserinfoResult{
		Sub:                 *body.Sub,
		Name:                body.Name,
		GivenName:           body.GivenName,
		FamilyName:          body.FamilyName,
		MiddleName:          body.MiddleName,
		Nickname:            body.Nickname,
		PreferredUsername:   body.PreferredUsername,
		Profile:             body.Profile,
		Picture:             body.Picture,
		Website:             body.Website,
		Email:               body.Email,
		EmailVerified:       body.EmailVerified,
		Gender:              body.Gender,
		Birthdate:           body.Birthdate,
		Zoneinfo:            body.Zoneinfo,
		Locale:              body.Locale,
		PhoneNumber:         body.PhoneNumber,
		PhoneNumberVerified: body.PhoneNumberVerified,
		UpdatedAt:           body.UpdatedAt,
	}

	return v
}

// NewUserinfoBadRequest builds a oauth_provider service userinfo endpoint
// bad_request error.
func NewUserinfoBadRequest(body *UserinfoBadRequestResponseBody) *oauthprovider.BadRequestError {
	v := &oauthprovider.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewUserinfoConflict builds a oauth_provider service userinfo endpoint
// conflict error.
func NewUserinfoConflict(body *UserinfoConflictResponseBody) *oauthprovider.ConflictError {
	v := &oauthprovider.ConflictError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewUserinfoForbidden builds a oauth_provider service userinfo endpoint
// forbidden error.
func NewUserinfoForbidden(body *UserinfoForbiddenResponseBody) *oauthprovider.ForbiddenError {
	v := &oauthprovider.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewUserinfoInternalError builds a oauth_provider service userinfo endpoint
// internal_error error.
func NewUserinfoInternalError(body *UserinfoInternalErrorResponseBody) *oauthprovider.InternalServerError {
	v := &oauthprovider.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewUserinfoNotFound builds a oauth_provider service userinfo endpoint
// not_found error.
func NewUserinfoNotFound(body *UserinfoNotFoundResponseBody) *oauthprovider.NotFoundError {
	v := &oauthprovider.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewUserinfoUnauthorized builds a oauth_provider service userinfo endpoint
// unauthorized error.
func NewUserinfoUnauthorized(body *UserinfoUnauthorizedResponseBody) *oauthprovider.UnauthorizedError {
	v := &oauthprovider.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewListClientsResultOK builds a "oauth_provider" service "list_clients"
// endpoint result from a HTTP "OK" response.
func NewListClientsResultOK(body *ListClientsResponseBody) *oauthprovider.ListClientsResult {
	v := &oauthprovider.ListClientsResult{}
	v.Data = make([]*oauthprovider.OAuthClientResponse, len(body.Data))
	for i, val := range body.Data {
		v.Data[i] = unmarshalOAuthClientResponseResponseBodyToOauthproviderOAuthClientResponse(val)
	}
	v.Pagination = unmarshalPaginationResponseResponseBodyToDesigntypesPaginationResponse(body.Pagination)

	return v
}

// NewListClientsBadRequest builds a oauth_provider service list_clients
// endpoint bad_request error.
func NewListClientsBadRequest(body *ListClientsBadRequestResponseBody) *oauthprovider.BadRequestError {
	v := &oauthprovider.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewListClientsConflict builds a oauth_provider service list_clients endpoint
// conflict error.
func NewListClientsConflict(body *ListClientsConflictResponseBody) *oauthprovider.ConflictError {
	v := &oauthprovider.ConflictError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewListClientsForbidden builds a oauth_provider service list_clients
// endpoint forbidden error.
func NewListClientsForbidden(body *ListClientsForbiddenResponseBody) *oauthprovider.ForbiddenError {
	v := &oauthprovider.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewListClientsInternalError builds a oauth_provider service list_clients
// endpoint internal_error error.
func NewListClientsInternalError(body *ListClientsInternalErrorResponseBody) *oauthprovider.InternalServerError {
	v := &oauthprovider.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewListClientsNotFound builds a oauth_provider service list_clients endpoint
// not_found error.
func NewListClientsNotFound(body *ListClientsNotFoundResponseBody) *oauthprovider.NotFoundError {
	v := &oauthprovider.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewListClientsUnauthorized builds a oauth_provider service list_clients
// endpoint unauthorized error.
func NewListClientsUnauthorized(body *ListClientsUnauthorizedResponseBody) *oauthprovider.UnauthorizedError {
	v := &oauthprovider.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewCreateClientOAuthClientWithSecretResponseCreated builds a
// "oauth_provider" service "create_client" endpoint result from a HTTP
// "Created" response.
func NewCreateClientOAuthClientWithSecretResponseCreated(body *CreateClientResponseBody) *oauthprovider.OAuthClientWithSecretResponse {
	v := &oauthprovider.OAuthClientWithSecretResponse{
		ClientSecret:              *body.ClientSecret,
		ID:                        *body.ID,
		ClientID:                  *body.ClientID,
		ClientName:                *body.ClientName,
		ClientDescription:         body.ClientDescription,
		ClientURI:                 body.ClientURI,
		LogoURI:                   body.LogoURI,
		Public:                    *body.Public,
		Active:                    *body.Active,
		OrganizationID:            body.OrganizationID,
		TokenExpirySeconds:        body.TokenExpirySeconds,
		RefreshTokenExpirySeconds: body.RefreshTokenExpirySeconds,
		RequiresPkce:              body.RequiresPkce,
		RequiresConsent:           body.RequiresConsent,
		CreatedAt:                 body.CreatedAt,
		UpdatedAt:                 body.UpdatedAt,
	}
	v.RedirectUris = make([]string, len(body.RedirectUris))
	for i, val := range body.RedirectUris {
		v.RedirectUris[i] = val
	}
	if body.PostLogoutRedirectUris != nil {
		v.PostLogoutRedirectUris = make([]string, len(body.PostLogoutRedirectUris))
		for i, val := range body.PostLogoutRedirectUris {
			v.PostLogoutRedirectUris[i] = val
		}
	}
	if body.AllowedCorsOrigins != nil {
		v.AllowedCorsOrigins = make([]string, len(body.AllowedCorsOrigins))
		for i, val := range body.AllowedCorsOrigins {
			v.AllowedCorsOrigins[i] = val
		}
	}
	v.AllowedGrantTypes = make([]string, len(body.AllowedGrantTypes))
	for i, val := range body.AllowedGrantTypes {
		v.AllowedGrantTypes[i] = val
	}

	return v
}

// NewCreateClientBadRequest builds a oauth_provider service create_client
// endpoint bad_request error.
func NewCreateClientBadRequest(body *CreateClientBadRequestResponseBody) *oauthprovider.BadRequestError {
	v := &oauthprovider.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewCreateClientConflict builds a oauth_provider service create_client
// endpoint conflict error.
func NewCreateClientConflict(body *CreateClientConflictResponseBody) *oauthprovider.ConflictError {
	v := &oauthprovider.ConflictError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewCreateClientForbidden builds a oauth_provider service create_client
// endpoint forbidden error.
func NewCreateClientForbidden(body *CreateClientForbiddenResponseBody) *oauthprovider.ForbiddenError {
	v := &oauthprovider.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewCreateClientInternalError builds a oauth_provider service create_client
// endpoint internal_error error.
func NewCreateClientInternalError(body *CreateClientInternalErrorResponseBody) *oauthprovider.InternalServerError {
	v := &oauthprovider.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewCreateClientNotFound builds a oauth_provider service create_client
// endpoint not_found error.
func NewCreateClientNotFound(body *CreateClientNotFoundResponseBody) *oauthprovider.NotFoundError {
	v := &oauthprovider.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewCreateClientUnauthorized builds a oauth_provider service create_client
// endpoint unauthorized error.
func NewCreateClientUnauthorized(body *CreateClientUnauthorizedResponseBody) *oauthprovider.UnauthorizedError {
	v := &oauthprovider.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewGetClientOAuthClientResponseOK builds a "oauth_provider" service
// "get_client" endpoint result from a HTTP "OK" response.
func NewGetClientOAuthClientResponseOK(body *GetClientResponseBody) *oauthprovider.OAuthClientResponse {
	v := &oauthprovider.OAuthClientResponse{
		ID:                        *body.ID,
		ClientID:                  *body.ClientID,
		ClientName:                *body.ClientName,
		ClientDescription:         body.ClientDescription,
		ClientURI:                 body.ClientURI,
		LogoURI:                   body.LogoURI,
		Public:                    *body.Public,
		Active:                    *body.Active,
		OrganizationID:            body.OrganizationID,
		TokenExpirySeconds:        body.TokenExpirySeconds,
		RefreshTokenExpirySeconds: body.RefreshTokenExpirySeconds,
		RequiresPkce:              body.RequiresPkce,
		RequiresConsent:           body.RequiresConsent,
		CreatedAt:                 body.CreatedAt,
		UpdatedAt:                 body.UpdatedAt,
	}
	v.RedirectUris = make([]string, len(body.RedirectUris))
	for i, val := range body.RedirectUris {
		v.RedirectUris[i] = val
	}
	if body.PostLogoutRedirectUris != nil {
		v.PostLogoutRedirectUris = make([]string, len(body.PostLogoutRedirectUris))
		for i, val := range body.PostLogoutRedirectUris {
			v.PostLogoutRedirectUris[i] = val
		}
	}
	if body.AllowedCorsOrigins != nil {
		v.AllowedCorsOrigins = make([]string, len(body.AllowedCorsOrigins))
		for i, val := range body.AllowedCorsOrigins {
			v.AllowedCorsOrigins[i] = val
		}
	}
	v.AllowedGrantTypes = make([]string, len(body.AllowedGrantTypes))
	for i, val := range body.AllowedGrantTypes {
		v.AllowedGrantTypes[i] = val
	}

	return v
}

// NewGetClientBadRequest builds a oauth_provider service get_client endpoint
// bad_request error.
func NewGetClientBadRequest(body *GetClientBadRequestResponseBody) *oauthprovider.BadRequestError {
	v := &oauthprovider.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewGetClientConflict builds a oauth_provider service get_client endpoint
// conflict error.
func NewGetClientConflict(body *GetClientConflictResponseBody) *oauthprovider.ConflictError {
	v := &oauthprovider.ConflictError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewGetClientForbidden builds a oauth_provider service get_client endpoint
// forbidden error.
func NewGetClientForbidden(body *GetClientForbiddenResponseBody) *oauthprovider.ForbiddenError {
	v := &oauthprovider.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewGetClientInternalError builds a oauth_provider service get_client
// endpoint internal_error error.
func NewGetClientInternalError(body *GetClientInternalErrorResponseBody) *oauthprovider.InternalServerError {
	v := &oauthprovider.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewGetClientNotFound builds a oauth_provider service get_client endpoint
// not_found error.
func NewGetClientNotFound(body *GetClientNotFoundResponseBody) *oauthprovider.NotFoundError {
	v := &oauthprovider.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewGetClientUnauthorized builds a oauth_provider service get_client endpoint
// unauthorized error.
func NewGetClientUnauthorized(body *GetClientUnauthorizedResponseBody) *oauthprovider.UnauthorizedError {
	v := &oauthprovider.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewUpdateClientOAuthClientResponseOK builds a "oauth_provider" service
// "update_client" endpoint result from a HTTP "OK" response.
func NewUpdateClientOAuthClientResponseOK(body *UpdateClientResponseBody) *oauthprovider.OAuthClientResponse {
	v := &oauthprovider.OAuthClientResponse{
		ID:                        *body.ID,
		ClientID:                  *body.ClientID,
		ClientName:                *body.ClientName,
		ClientDescription:         body.ClientDescription,
		ClientURI:                 body.ClientURI,
		LogoURI:                   body.LogoURI,
		Public:                    *body.Public,
		Active:                    *body.Active,
		OrganizationID:            body.OrganizationID,
		TokenExpirySeconds:        body.TokenExpirySeconds,
		RefreshTokenExpirySeconds: body.RefreshTokenExpirySeconds,
		RequiresPkce:              body.RequiresPkce,
		RequiresConsent:           body.RequiresConsent,
		CreatedAt:                 body.CreatedAt,
		UpdatedAt:                 body.UpdatedAt,
	}
	v.RedirectUris = make([]string, len(body.RedirectUris))
	for i, val := range body.RedirectUris {
		v.RedirectUris[i] = val
	}
	if body.PostLogoutRedirectUris != nil {
		v.PostLogoutRedirectUris = make([]string, len(body.PostLogoutRedirectUris))
		for i, val := range body.PostLogoutRedirectUris {
			v.PostLogoutRedirectUris[i] = val
		}
	}
	if body.AllowedCorsOrigins != nil {
		v.AllowedCorsOrigins = make([]string, len(body.AllowedCorsOrigins))
		for i, val := range body.AllowedCorsOrigins {
			v.AllowedCorsOrigins[i] = val
		}
	}
	v.AllowedGrantTypes = make([]string, len(body.AllowedGrantTypes))
	for i, val := range body.AllowedGrantTypes {
		v.AllowedGrantTypes[i] = val
	}

	return v
}

// NewUpdateClientBadRequest builds a oauth_provider service update_client
// endpoint bad_request error.
func NewUpdateClientBadRequest(body *UpdateClientBadRequestResponseBody) *oauthprovider.BadRequestError {
	v := &oauthprovider.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewUpdateClientConflict builds a oauth_provider service update_client
// endpoint conflict error.
func NewUpdateClientConflict(body *UpdateClientConflictResponseBody) *oauthprovider.ConflictError {
	v := &oauthprovider.ConflictError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewUpdateClientForbidden builds a oauth_provider service update_client
// endpoint forbidden error.
func NewUpdateClientForbidden(body *UpdateClientForbiddenResponseBody) *oauthprovider.ForbiddenError {
	v := &oauthprovider.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewUpdateClientInternalError builds a oauth_provider service update_client
// endpoint internal_error error.
func NewUpdateClientInternalError(body *UpdateClientInternalErrorResponseBody) *oauthprovider.InternalServerError {
	v := &oauthprovider.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewUpdateClientNotFound builds a oauth_provider service update_client
// endpoint not_found error.
func NewUpdateClientNotFound(body *UpdateClientNotFoundResponseBody) *oauthprovider.NotFoundError {
	v := &oauthprovider.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewUpdateClientUnauthorized builds a oauth_provider service update_client
// endpoint unauthorized error.
func NewUpdateClientUnauthorized(body *UpdateClientUnauthorizedResponseBody) *oauthprovider.UnauthorizedError {
	v := &oauthprovider.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewDeleteClientBadRequest builds a oauth_provider service delete_client
// endpoint bad_request error.
func NewDeleteClientBadRequest(body *DeleteClientBadRequestResponseBody) *oauthprovider.BadRequestError {
	v := &oauthprovider.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewDeleteClientConflict builds a oauth_provider service delete_client
// endpoint conflict error.
func NewDeleteClientConflict(body *DeleteClientConflictResponseBody) *oauthprovider.ConflictError {
	v := &oauthprovider.ConflictError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewDeleteClientForbidden builds a oauth_provider service delete_client
// endpoint forbidden error.
func NewDeleteClientForbidden(body *DeleteClientForbiddenResponseBody) *oauthprovider.ForbiddenError {
	v := &oauthprovider.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewDeleteClientInternalError builds a oauth_provider service delete_client
// endpoint internal_error error.
func NewDeleteClientInternalError(body *DeleteClientInternalErrorResponseBody) *oauthprovider.InternalServerError {
	v := &oauthprovider.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewDeleteClientNotFound builds a oauth_provider service delete_client
// endpoint not_found error.
func NewDeleteClientNotFound(body *DeleteClientNotFoundResponseBody) *oauthprovider.NotFoundError {
	v := &oauthprovider.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewDeleteClientUnauthorized builds a oauth_provider service delete_client
// endpoint unauthorized error.
func NewDeleteClientUnauthorized(body *DeleteClientUnauthorizedResponseBody) *oauthprovider.UnauthorizedError {
	v := &oauthprovider.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewRotateClientSecretResultOK builds a "oauth_provider" service
// "rotate_client_secret" endpoint result from a HTTP "OK" response.
func NewRotateClientSecretResultOK(body *RotateClientSecretResponseBody) *oauthprovider.RotateClientSecretResult {
	v := &oauthprovider.RotateClientSecretResult{
		ClientID:     *body.ClientID,
		ClientSecret: *body.ClientSecret,
	}

	return v
}

// NewRotateClientSecretBadRequest builds a oauth_provider service
// rotate_client_secret endpoint bad_request error.
func NewRotateClientSecretBadRequest(body *RotateClientSecretBadRequestResponseBody) *oauthprovider.BadRequestError {
	v := &oauthprovider.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewRotateClientSecretConflict builds a oauth_provider service
// rotate_client_secret endpoint conflict error.
func NewRotateClientSecretConflict(body *RotateClientSecretConflictResponseBody) *oauthprovider.ConflictError {
	v := &oauthprovider.ConflictError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewRotateClientSecretForbidden builds a oauth_provider service
// rotate_client_secret endpoint forbidden error.
func NewRotateClientSecretForbidden(body *RotateClientSecretForbiddenResponseBody) *oauthprovider.ForbiddenError {
	v := &oauthprovider.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewRotateClientSecretInternalError builds a oauth_provider service
// rotate_client_secret endpoint internal_error error.
func NewRotateClientSecretInternalError(body *RotateClientSecretInternalErrorResponseBody) *oauthprovider.InternalServerError {
	v := &oauthprovider.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewRotateClientSecretNotFound builds a oauth_provider service
// rotate_client_secret endpoint not_found error.
func NewRotateClientSecretNotFound(body *RotateClientSecretNotFoundResponseBody) *oauthprovider.NotFoundError {
	v := &oauthprovider.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewRotateClientSecretUnauthorized builds a oauth_provider service
// rotate_client_secret endpoint unauthorized error.
func NewRotateClientSecretUnauthorized(body *RotateClientSecretUnauthorizedResponseBody) *oauthprovider.UnauthorizedError {
	v := &oauthprovider.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewListScopesResultOK builds a "oauth_provider" service "list_scopes"
// endpoint result from a HTTP "OK" response.
func NewListScopesResultOK(body *ListScopesResponseBody) *oauthprovider.ListScopesResult {
	v := &oauthprovider.ListScopesResult{}
	v.Data = make([]*oauthprovider.OAuthScopeResponse, len(body.Data))
	for i, val := range body.Data {
		v.Data[i] = unmarshalOAuthScopeResponseResponseBodyToOauthproviderOAuthScopeResponse(val)
	}
	v.Pagination = unmarshalPaginationResponseResponseBodyToDesigntypesPaginationResponse(body.Pagination)

	return v
}

// NewListScopesBadRequest builds a oauth_provider service list_scopes endpoint
// bad_request error.
func NewListScopesBadRequest(body *ListScopesBadRequestResponseBody) *oauthprovider.BadRequestError {
	v := &oauthprovider.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewListScopesConflict builds a oauth_provider service list_scopes endpoint
// conflict error.
func NewListScopesConflict(body *ListScopesConflictResponseBody) *oauthprovider.ConflictError {
	v := &oauthprovider.ConflictError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewListScopesForbidden builds a oauth_provider service list_scopes endpoint
// forbidden error.
func NewListScopesForbidden(body *ListScopesForbiddenResponseBody) *oauthprovider.ForbiddenError {
	v := &oauthprovider.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewListScopesInternalError builds a oauth_provider service list_scopes
// endpoint internal_error error.
func NewListScopesInternalError(body *ListScopesInternalErrorResponseBody) *oauthprovider.InternalServerError {
	v := &oauthprovider.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewListScopesNotFound builds a oauth_provider service list_scopes endpoint
// not_found error.
func NewListScopesNotFound(body *ListScopesNotFoundResponseBody) *oauthprovider.NotFoundError {
	v := &oauthprovider.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewListScopesUnauthorized builds a oauth_provider service list_scopes
// endpoint unauthorized error.
func NewListScopesUnauthorized(body *ListScopesUnauthorizedResponseBody) *oauthprovider.UnauthorizedError {
	v := &oauthprovider.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewCreateScopeOAuthScopeResponseCreated builds a "oauth_provider" service
// "create_scope" endpoint result from a HTTP "Created" response.
func NewCreateScopeOAuthScopeResponseCreated(body *CreateScopeResponseBody) *oauthprovider.OAuthScopeResponse {
	v := &oauthprovider.OAuthScopeResponse{
		ID:           *body.ID,
		Name:         *body.Name,
		Description:  *body.Description,
		DefaultScope: *body.DefaultScope,
		Public:       *body.Public,
	}

	return v
}

// NewCreateScopeBadRequest builds a oauth_provider service create_scope
// endpoint bad_request error.
func NewCreateScopeBadRequest(body *CreateScopeBadRequestResponseBody) *oauthprovider.BadRequestError {
	v := &oauthprovider.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewCreateScopeConflict builds a oauth_provider service create_scope endpoint
// conflict error.
func NewCreateScopeConflict(body *CreateScopeConflictResponseBody) *oauthprovider.ConflictError {
	v := &oauthprovider.ConflictError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewCreateScopeForbidden builds a oauth_provider service create_scope
// endpoint forbidden error.
func NewCreateScopeForbidden(body *CreateScopeForbiddenResponseBody) *oauthprovider.ForbiddenError {
	v := &oauthprovider.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewCreateScopeInternalError builds a oauth_provider service create_scope
// endpoint internal_error error.
func NewCreateScopeInternalError(body *CreateScopeInternalErrorResponseBody) *oauthprovider.InternalServerError {
	v := &oauthprovider.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewCreateScopeNotFound builds a oauth_provider service create_scope endpoint
// not_found error.
func NewCreateScopeNotFound(body *CreateScopeNotFoundResponseBody) *oauthprovider.NotFoundError {
	v := &oauthprovider.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewCreateScopeUnauthorized builds a oauth_provider service create_scope
// endpoint unauthorized error.
func NewCreateScopeUnauthorized(body *CreateScopeUnauthorizedResponseBody) *oauthprovider.UnauthorizedError {
	v := &oauthprovider.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewGetScopeOAuthScopeResponseOK builds a "oauth_provider" service
// "get_scope" endpoint result from a HTTP "OK" response.
func NewGetScopeOAuthScopeResponseOK(body *GetScopeResponseBody) *oauthprovider.OAuthScopeResponse {
	v := &oauthprovider.OAuthScopeResponse{
		ID:           *body.ID,
		Name:         *body.Name,
		Description:  *body.Description,
		DefaultScope: *body.DefaultScope,
		Public:       *body.Public,
	}

	return v
}

// NewGetScopeBadRequest builds a oauth_provider service get_scope endpoint
// bad_request error.
func NewGetScopeBadRequest(body *GetScopeBadRequestResponseBody) *oauthprovider.BadRequestError {
	v := &oauthprovider.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewGetScopeConflict builds a oauth_provider service get_scope endpoint
// conflict error.
func NewGetScopeConflict(body *GetScopeConflictResponseBody) *oauthprovider.ConflictError {
	v := &oauthprovider.ConflictError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewGetScopeForbidden builds a oauth_provider service get_scope endpoint
// forbidden error.
func NewGetScopeForbidden(body *GetScopeForbiddenResponseBody) *oauthprovider.ForbiddenError {
	v := &oauthprovider.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewGetScopeInternalError builds a oauth_provider service get_scope endpoint
// internal_error error.
func NewGetScopeInternalError(body *GetScopeInternalErrorResponseBody) *oauthprovider.InternalServerError {
	v := &oauthprovider.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewGetScopeNotFound builds a oauth_provider service get_scope endpoint
// not_found error.
func NewGetScopeNotFound(body *GetScopeNotFoundResponseBody) *oauthprovider.NotFoundError {
	v := &oauthprovider.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewGetScopeUnauthorized builds a oauth_provider service get_scope endpoint
// unauthorized error.
func NewGetScopeUnauthorized(body *GetScopeUnauthorizedResponseBody) *oauthprovider.UnauthorizedError {
	v := &oauthprovider.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewUpdateScopeOAuthScopeResponseOK builds a "oauth_provider" service
// "update_scope" endpoint result from a HTTP "OK" response.
func NewUpdateScopeOAuthScopeResponseOK(body *UpdateScopeResponseBody) *oauthprovider.OAuthScopeResponse {
	v := &oauthprovider.OAuthScopeResponse{
		ID:           *body.ID,
		Name:         *body.Name,
		Description:  *body.Description,
		DefaultScope: *body.DefaultScope,
		Public:       *body.Public,
	}

	return v
}

// NewUpdateScopeBadRequest builds a oauth_provider service update_scope
// endpoint bad_request error.
func NewUpdateScopeBadRequest(body *UpdateScopeBadRequestResponseBody) *oauthprovider.BadRequestError {
	v := &oauthprovider.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewUpdateScopeConflict builds a oauth_provider service update_scope endpoint
// conflict error.
func NewUpdateScopeConflict(body *UpdateScopeConflictResponseBody) *oauthprovider.ConflictError {
	v := &oauthprovider.ConflictError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewUpdateScopeForbidden builds a oauth_provider service update_scope
// endpoint forbidden error.
func NewUpdateScopeForbidden(body *UpdateScopeForbiddenResponseBody) *oauthprovider.ForbiddenError {
	v := &oauthprovider.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewUpdateScopeInternalError builds a oauth_provider service update_scope
// endpoint internal_error error.
func NewUpdateScopeInternalError(body *UpdateScopeInternalErrorResponseBody) *oauthprovider.InternalServerError {
	v := &oauthprovider.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewUpdateScopeNotFound builds a oauth_provider service update_scope endpoint
// not_found error.
func NewUpdateScopeNotFound(body *UpdateScopeNotFoundResponseBody) *oauthprovider.NotFoundError {
	v := &oauthprovider.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewUpdateScopeUnauthorized builds a oauth_provider service update_scope
// endpoint unauthorized error.
func NewUpdateScopeUnauthorized(body *UpdateScopeUnauthorizedResponseBody) *oauthprovider.UnauthorizedError {
	v := &oauthprovider.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewDeleteScopeBadRequest builds a oauth_provider service delete_scope
// endpoint bad_request error.
func NewDeleteScopeBadRequest(body *DeleteScopeBadRequestResponseBody) *oauthprovider.BadRequestError {
	v := &oauthprovider.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewDeleteScopeConflict builds a oauth_provider service delete_scope endpoint
// conflict error.
func NewDeleteScopeConflict(body *DeleteScopeConflictResponseBody) *oauthprovider.ConflictError {
	v := &oauthprovider.ConflictError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewDeleteScopeForbidden builds a oauth_provider service delete_scope
// endpoint forbidden error.
func NewDeleteScopeForbidden(body *DeleteScopeForbiddenResponseBody) *oauthprovider.ForbiddenError {
	v := &oauthprovider.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewDeleteScopeInternalError builds a oauth_provider service delete_scope
// endpoint internal_error error.
func NewDeleteScopeInternalError(body *DeleteScopeInternalErrorResponseBody) *oauthprovider.InternalServerError {
	v := &oauthprovider.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewDeleteScopeNotFound builds a oauth_provider service delete_scope endpoint
// not_found error.
func NewDeleteScopeNotFound(body *DeleteScopeNotFoundResponseBody) *oauthprovider.NotFoundError {
	v := &oauthprovider.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewDeleteScopeUnauthorized builds a oauth_provider service delete_scope
// endpoint unauthorized error.
func NewDeleteScopeUnauthorized(body *DeleteScopeUnauthorizedResponseBody) *oauthprovider.UnauthorizedError {
	v := &oauthprovider.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewOidcConfigurationResultOK builds a "oauth_provider" service
// "oidc_configuration" endpoint result from a HTTP "OK" response.
func NewOidcConfigurationResultOK(body *OidcConfigurationResponseBody) *oauthprovider.OidcConfigurationResult {
	v := &oauthprovider.OidcConfigurationResult{
		Issuer:                *body.Issuer,
		AuthorizationEndpoint: *body.AuthorizationEndpoint,
		TokenEndpoint:         *body.TokenEndpoint,
		UserinfoEndpoint:      *body.UserinfoEndpoint,
		JwksURI:               *body.JwksURI,
		RegistrationEndpoint:  body.RegistrationEndpoint,
	}
	if body.ScopesSupported != nil {
		v.ScopesSupported = make([]string, len(body.ScopesSupported))
		for i, val := range body.ScopesSupported {
			v.ScopesSupported[i] = val
		}
	}
	if body.ResponseTypesSupported != nil {
		v.ResponseTypesSupported = make([]string, len(body.ResponseTypesSupported))
		for i, val := range body.ResponseTypesSupported {
			v.ResponseTypesSupported[i] = val
		}
	}
	if body.ResponseModesSupported != nil {
		v.ResponseModesSupported = make([]string, len(body.ResponseModesSupported))
		for i, val := range body.ResponseModesSupported {
			v.ResponseModesSupported[i] = val
		}
	}
	if body.GrantTypesSupported != nil {
		v.GrantTypesSupported = make([]string, len(body.GrantTypesSupported))
		for i, val := range body.GrantTypesSupported {
			v.GrantTypesSupported[i] = val
		}
	}
	if body.SubjectTypesSupported != nil {
		v.SubjectTypesSupported = make([]string, len(body.SubjectTypesSupported))
		for i, val := range body.SubjectTypesSupported {
			v.SubjectTypesSupported[i] = val
		}
	}
	if body.IDTokenSigningAlgValuesSupported != nil {
		v.IDTokenSigningAlgValuesSupported = make([]string, len(body.IDTokenSigningAlgValuesSupported))
		for i, val := range body.IDTokenSigningAlgValuesSupported {
			v.IDTokenSigningAlgValuesSupported[i] = val
		}
	}
	if body.TokenEndpointAuthMethodsSupported != nil {
		v.TokenEndpointAuthMethodsSupported = make([]string, len(body.TokenEndpointAuthMethodsSupported))
		for i, val := range body.TokenEndpointAuthMethodsSupported {
			v.TokenEndpointAuthMethodsSupported[i] = val
		}
	}
	if body.ClaimsSupported != nil {
		v.ClaimsSupported = make([]string, len(body.ClaimsSupported))
		for i, val := range body.ClaimsSupported {
			v.ClaimsSupported[i] = val
		}
	}

	return v
}

// NewOidcConfigurationBadRequest builds a oauth_provider service
// oidc_configuration endpoint bad_request error.
func NewOidcConfigurationBadRequest(body *OidcConfigurationBadRequestResponseBody) *oauthprovider.BadRequestError {
	v := &oauthprovider.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewOidcConfigurationConflict builds a oauth_provider service
// oidc_configuration endpoint conflict error.
func NewOidcConfigurationConflict(body *OidcConfigurationConflictResponseBody) *oauthprovider.ConflictError {
	v := &oauthprovider.ConflictError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewOidcConfigurationForbidden builds a oauth_provider service
// oidc_configuration endpoint forbidden error.
func NewOidcConfigurationForbidden(body *OidcConfigurationForbiddenResponseBody) *oauthprovider.ForbiddenError {
	v := &oauthprovider.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewOidcConfigurationInternalError builds a oauth_provider service
// oidc_configuration endpoint internal_error error.
func NewOidcConfigurationInternalError(body *OidcConfigurationInternalErrorResponseBody) *oauthprovider.InternalServerError {
	v := &oauthprovider.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewOidcConfigurationNotFound builds a oauth_provider service
// oidc_configuration endpoint not_found error.
func NewOidcConfigurationNotFound(body *OidcConfigurationNotFoundResponseBody) *oauthprovider.NotFoundError {
	v := &oauthprovider.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewOidcConfigurationUnauthorized builds a oauth_provider service
// oidc_configuration endpoint unauthorized error.
func NewOidcConfigurationUnauthorized(body *OidcConfigurationUnauthorizedResponseBody) *oauthprovider.UnauthorizedError {
	v := &oauthprovider.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewJwksResultOK builds a "oauth_provider" service "jwks" endpoint result
// from a HTTP "OK" response.
func NewJwksResultOK(body *JwksResponseBody) *oauthprovider.JwksResult {
	v := &oauthprovider.JwksResult{}
	v.Keys = make([]any, len(body.Keys))
	for i, val := range body.Keys {
		v.Keys[i] = val
	}

	return v
}

// NewJwksBadRequest builds a oauth_provider service jwks endpoint bad_request
// error.
func NewJwksBadRequest(body *JwksBadRequestResponseBody) *oauthprovider.BadRequestError {
	v := &oauthprovider.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewJwksConflict builds a oauth_provider service jwks endpoint conflict error.
func NewJwksConflict(body *JwksConflictResponseBody) *oauthprovider.ConflictError {
	v := &oauthprovider.ConflictError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewJwksForbidden builds a oauth_provider service jwks endpoint forbidden
// error.
func NewJwksForbidden(body *JwksForbiddenResponseBody) *oauthprovider.ForbiddenError {
	v := &oauthprovider.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewJwksInternalError builds a oauth_provider service jwks endpoint
// internal_error error.
func NewJwksInternalError(body *JwksInternalErrorResponseBody) *oauthprovider.InternalServerError {
	v := &oauthprovider.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewJwksNotFound builds a oauth_provider service jwks endpoint not_found
// error.
func NewJwksNotFound(body *JwksNotFoundResponseBody) *oauthprovider.NotFoundError {
	v := &oauthprovider.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewJwksUnauthorized builds a oauth_provider service jwks endpoint
// unauthorized error.
func NewJwksUnauthorized(body *JwksUnauthorizedResponseBody) *oauthprovider.UnauthorizedError {
	v := &oauthprovider.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// ValidateTokenResponseBody runs the validations defined on TokenResponseBody
func ValidateTokenResponseBody(body *TokenResponseBody) (err error) {
	if body.AccessToken == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("access_token", "body"))
	}
	if body.TokenType == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("token_type", "body"))
	}
	if body.ExpiresIn == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("expires_in", "body"))
	}
	return
}

// ValidateIntrospectResponseBody runs the validations defined on
// IntrospectResponseBody
func ValidateIntrospectResponseBody(body *IntrospectResponseBody) (err error) {
	if body.Active == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("active", "body"))
	}
	return
}

// ValidateConsentResponseBody runs the validations defined on
// ConsentResponseBody
func ValidateConsentResponseBody(body *ConsentResponseBody) (err error) {
	if body.RedirectURI == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("redirect_uri", "body"))
	}
	return
}

// ValidateUserinfoResponseBody runs the validations defined on
// UserinfoResponseBody
func ValidateUserinfoResponseBody(body *UserinfoResponseBody) (err error) {
	if body.Sub == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("sub", "body"))
	}
	return
}

// ValidateListClientsResponseBody runs the validations defined on
// list_clients_response_body
func ValidateListClientsResponseBody(body *ListClientsResponseBody) (err error) {
	if body.Data == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("data", "body"))
	}
	if body.Pagination == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("pagination", "body"))
	}
	for _, e := range body.Data {
		if e != nil {
			if err2 := ValidateOAuthClientResponseResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if body.Pagination != nil {
		if err2 := ValidatePaginationResponseResponseBody(body.Pagination); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateCreateClientResponseBody runs the validations defined on
// create_client_response_body
func ValidateCreateClientResponseBody(body *CreateClientResponseBody) (err error) {
	if body.ClientSecret == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("client_secret", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.ClientID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("client_id", "body"))
	}
	if body.ClientName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("client_name", "body"))
	}
	if body.RedirectUris == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("redirect_uris", "body"))
	}
	if body.AllowedGrantTypes == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("allowed_grant_types", "body"))
	}
	if body.Public == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("public", "body"))
	}
	if body.Active == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("active", "body"))
	}
	return
}

// ValidateGetClientResponseBody runs the validations defined on
// get_client_response_body
func ValidateGetClientResponseBody(body *GetClientResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.ClientID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("client_id", "body"))
	}
	if body.ClientName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("client_name", "body"))
	}
	if body.RedirectUris == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("redirect_uris", "body"))
	}
	if body.AllowedGrantTypes == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("allowed_grant_types", "body"))
	}
	if body.Public == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("public", "body"))
	}
	if body.Active == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("active", "body"))
	}
	return
}

// ValidateUpdateClientResponseBody runs the validations defined on
// update_client_response_body
func ValidateUpdateClientResponseBody(body *UpdateClientResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.ClientID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("client_id", "body"))
	}
	if body.ClientName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("client_name", "body"))
	}
	if body.RedirectUris == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("redirect_uris", "body"))
	}
	if body.AllowedGrantTypes == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("allowed_grant_types", "body"))
	}
	if body.Public == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("public", "body"))
	}
	if body.Active == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("active", "body"))
	}
	return
}

// ValidateRotateClientSecretResponseBody runs the validations defined on
// rotate_client_secret_response_body
func ValidateRotateClientSecretResponseBody(body *RotateClientSecretResponseBody) (err error) {
	if body.ClientID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("client_id", "body"))
	}
	if body.ClientSecret == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("client_secret", "body"))
	}
	return
}

// ValidateListScopesResponseBody runs the validations defined on
// list_scopes_response_body
func ValidateListScopesResponseBody(body *ListScopesResponseBody) (err error) {
	if body.Data == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("data", "body"))
	}
	if body.Pagination == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("pagination", "body"))
	}
	for _, e := range body.Data {
		if e != nil {
			if err2 := ValidateOAuthScopeResponseResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if body.Pagination != nil {
		if err2 := ValidatePaginationResponseResponseBody(body.Pagination); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateCreateScopeResponseBody runs the validations defined on
// create_scope_response_body
func ValidateCreateScopeResponseBody(body *CreateScopeResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.DefaultScope == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("default_scope", "body"))
	}
	if body.Public == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("public", "body"))
	}
	return
}

// ValidateGetScopeResponseBody runs the validations defined on
// get_scope_response_body
func ValidateGetScopeResponseBody(body *GetScopeResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.DefaultScope == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("default_scope", "body"))
	}
	if body.Public == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("public", "body"))
	}
	return
}

// ValidateUpdateScopeResponseBody runs the validations defined on
// update_scope_response_body
func ValidateUpdateScopeResponseBody(body *UpdateScopeResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.DefaultScope == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("default_scope", "body"))
	}
	if body.Public == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("public", "body"))
	}
	return
}

// ValidateOidcConfigurationResponseBody runs the validations defined on
// oidc_configuration_response_body
func ValidateOidcConfigurationResponseBody(body *OidcConfigurationResponseBody) (err error) {
	if body.Issuer == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("issuer", "body"))
	}
	if body.AuthorizationEndpoint == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("authorization_endpoint", "body"))
	}
	if body.TokenEndpoint == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("token_endpoint", "body"))
	}
	if body.UserinfoEndpoint == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("userinfo_endpoint", "body"))
	}
	if body.JwksURI == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("jwks_uri", "body"))
	}
	return
}

// ValidateJwksResponseBody runs the validations defined on JwksResponseBody
func ValidateJwksResponseBody(body *JwksResponseBody) (err error) {
	if body.Keys == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("keys", "body"))
	}
	return
}

// ValidateAuthorizeBadRequestResponseBody runs the validations defined on
// authorize_bad_request_response_body
func ValidateAuthorizeBadRequestResponseBody(body *AuthorizeBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateAuthorizeConflictResponseBody runs the validations defined on
// authorize_conflict_response_body
func ValidateAuthorizeConflictResponseBody(body *AuthorizeConflictResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateAuthorizeForbiddenResponseBody runs the validations defined on
// authorize_forbidden_response_body
func ValidateAuthorizeForbiddenResponseBody(body *AuthorizeForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateAuthorizeInternalErrorResponseBody runs the validations defined on
// authorize_internal_error_response_body
func ValidateAuthorizeInternalErrorResponseBody(body *AuthorizeInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateAuthorizeNotFoundResponseBody runs the validations defined on
// authorize_not_found_response_body
func ValidateAuthorizeNotFoundResponseBody(body *AuthorizeNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateAuthorizeUnauthorizedResponseBody runs the validations defined on
// authorize_unauthorized_response_body
func ValidateAuthorizeUnauthorizedResponseBody(body *AuthorizeUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateTokenBadRequestResponseBody runs the validations defined on
// token_bad_request_response_body
func ValidateTokenBadRequestResponseBody(body *TokenBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateTokenConflictResponseBody runs the validations defined on
// token_conflict_response_body
func ValidateTokenConflictResponseBody(body *TokenConflictResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateTokenForbiddenResponseBody runs the validations defined on
// token_forbidden_response_body
func ValidateTokenForbiddenResponseBody(body *TokenForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateTokenInternalErrorResponseBody runs the validations defined on
// token_internal_error_response_body
func ValidateTokenInternalErrorResponseBody(body *TokenInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateTokenNotFoundResponseBody runs the validations defined on
// token_not_found_response_body
func ValidateTokenNotFoundResponseBody(body *TokenNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateTokenUnauthorizedResponseBody runs the validations defined on
// token_unauthorized_response_body
func ValidateTokenUnauthorizedResponseBody(body *TokenUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateIntrospectBadRequestResponseBody runs the validations defined on
// introspect_bad_request_response_body
func ValidateIntrospectBadRequestResponseBody(body *IntrospectBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateIntrospectConflictResponseBody runs the validations defined on
// introspect_conflict_response_body
func ValidateIntrospectConflictResponseBody(body *IntrospectConflictResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateIntrospectForbiddenResponseBody runs the validations defined on
// introspect_forbidden_response_body
func ValidateIntrospectForbiddenResponseBody(body *IntrospectForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateIntrospectInternalErrorResponseBody runs the validations defined on
// introspect_internal_error_response_body
func ValidateIntrospectInternalErrorResponseBody(body *IntrospectInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateIntrospectNotFoundResponseBody runs the validations defined on
// introspect_not_found_response_body
func ValidateIntrospectNotFoundResponseBody(body *IntrospectNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateIntrospectUnauthorizedResponseBody runs the validations defined on
// introspect_unauthorized_response_body
func ValidateIntrospectUnauthorizedResponseBody(body *IntrospectUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateRevokeBadRequestResponseBody runs the validations defined on
// revoke_bad_request_response_body
func ValidateRevokeBadRequestResponseBody(body *RevokeBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateRevokeConflictResponseBody runs the validations defined on
// revoke_conflict_response_body
func ValidateRevokeConflictResponseBody(body *RevokeConflictResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateRevokeForbiddenResponseBody runs the validations defined on
// revoke_forbidden_response_body
func ValidateRevokeForbiddenResponseBody(body *RevokeForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateRevokeInternalErrorResponseBody runs the validations defined on
// revoke_internal_error_response_body
func ValidateRevokeInternalErrorResponseBody(body *RevokeInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateRevokeNotFoundResponseBody runs the validations defined on
// revoke_not_found_response_body
func ValidateRevokeNotFoundResponseBody(body *RevokeNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateRevokeUnauthorizedResponseBody runs the validations defined on
// revoke_unauthorized_response_body
func ValidateRevokeUnauthorizedResponseBody(body *RevokeUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateConsentBadRequestResponseBody runs the validations defined on
// consent_bad_request_response_body
func ValidateConsentBadRequestResponseBody(body *ConsentBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateConsentConflictResponseBody runs the validations defined on
// consent_conflict_response_body
func ValidateConsentConflictResponseBody(body *ConsentConflictResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateConsentForbiddenResponseBody runs the validations defined on
// consent_forbidden_response_body
func ValidateConsentForbiddenResponseBody(body *ConsentForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateConsentInternalErrorResponseBody runs the validations defined on
// consent_internal_error_response_body
func ValidateConsentInternalErrorResponseBody(body *ConsentInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateConsentNotFoundResponseBody runs the validations defined on
// consent_not_found_response_body
func ValidateConsentNotFoundResponseBody(body *ConsentNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateConsentUnauthorizedResponseBody runs the validations defined on
// consent_unauthorized_response_body
func ValidateConsentUnauthorizedResponseBody(body *ConsentUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUserinfoBadRequestResponseBody runs the validations defined on
// userinfo_bad_request_response_body
func ValidateUserinfoBadRequestResponseBody(body *UserinfoBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUserinfoConflictResponseBody runs the validations defined on
// userinfo_conflict_response_body
func ValidateUserinfoConflictResponseBody(body *UserinfoConflictResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUserinfoForbiddenResponseBody runs the validations defined on
// userinfo_forbidden_response_body
func ValidateUserinfoForbiddenResponseBody(body *UserinfoForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUserinfoInternalErrorResponseBody runs the validations defined on
// userinfo_internal_error_response_body
func ValidateUserinfoInternalErrorResponseBody(body *UserinfoInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUserinfoNotFoundResponseBody runs the validations defined on
// userinfo_not_found_response_body
func ValidateUserinfoNotFoundResponseBody(body *UserinfoNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUserinfoUnauthorizedResponseBody runs the validations defined on
// userinfo_unauthorized_response_body
func ValidateUserinfoUnauthorizedResponseBody(body *UserinfoUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateListClientsBadRequestResponseBody runs the validations defined on
// list_clients_bad_request_response_body
func ValidateListClientsBadRequestResponseBody(body *ListClientsBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateListClientsConflictResponseBody runs the validations defined on
// list_clients_conflict_response_body
func ValidateListClientsConflictResponseBody(body *ListClientsConflictResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateListClientsForbiddenResponseBody runs the validations defined on
// list_clients_forbidden_response_body
func ValidateListClientsForbiddenResponseBody(body *ListClientsForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateListClientsInternalErrorResponseBody runs the validations defined on
// list_clients_internal_error_response_body
func ValidateListClientsInternalErrorResponseBody(body *ListClientsInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateListClientsNotFoundResponseBody runs the validations defined on
// list_clients_not_found_response_body
func ValidateListClientsNotFoundResponseBody(body *ListClientsNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateListClientsUnauthorizedResponseBody runs the validations defined on
// list_clients_unauthorized_response_body
func ValidateListClientsUnauthorizedResponseBody(body *ListClientsUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateClientBadRequestResponseBody runs the validations defined on
// create_client_bad_request_response_body
func ValidateCreateClientBadRequestResponseBody(body *CreateClientBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateClientConflictResponseBody runs the validations defined on
// create_client_conflict_response_body
func ValidateCreateClientConflictResponseBody(body *CreateClientConflictResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateClientForbiddenResponseBody runs the validations defined on
// create_client_forbidden_response_body
func ValidateCreateClientForbiddenResponseBody(body *CreateClientForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateClientInternalErrorResponseBody runs the validations defined
// on create_client_internal_error_response_body
func ValidateCreateClientInternalErrorResponseBody(body *CreateClientInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateClientNotFoundResponseBody runs the validations defined on
// create_client_not_found_response_body
func ValidateCreateClientNotFoundResponseBody(body *CreateClientNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateClientUnauthorizedResponseBody runs the validations defined on
// create_client_unauthorized_response_body
func ValidateCreateClientUnauthorizedResponseBody(body *CreateClientUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetClientBadRequestResponseBody runs the validations defined on
// get_client_bad_request_response_body
func ValidateGetClientBadRequestResponseBody(body *GetClientBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetClientConflictResponseBody runs the validations defined on
// get_client_conflict_response_body
func ValidateGetClientConflictResponseBody(body *GetClientConflictResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetClientForbiddenResponseBody runs the validations defined on
// get_client_forbidden_response_body
func ValidateGetClientForbiddenResponseBody(body *GetClientForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetClientInternalErrorResponseBody runs the validations defined on
// get_client_internal_error_response_body
func ValidateGetClientInternalErrorResponseBody(body *GetClientInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetClientNotFoundResponseBody runs the validations defined on
// get_client_not_found_response_body
func ValidateGetClientNotFoundResponseBody(body *GetClientNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetClientUnauthorizedResponseBody runs the validations defined on
// get_client_unauthorized_response_body
func ValidateGetClientUnauthorizedResponseBody(body *GetClientUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateClientBadRequestResponseBody runs the validations defined on
// update_client_bad_request_response_body
func ValidateUpdateClientBadRequestResponseBody(body *UpdateClientBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateClientConflictResponseBody runs the validations defined on
// update_client_conflict_response_body
func ValidateUpdateClientConflictResponseBody(body *UpdateClientConflictResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateClientForbiddenResponseBody runs the validations defined on
// update_client_forbidden_response_body
func ValidateUpdateClientForbiddenResponseBody(body *UpdateClientForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateClientInternalErrorResponseBody runs the validations defined
// on update_client_internal_error_response_body
func ValidateUpdateClientInternalErrorResponseBody(body *UpdateClientInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateClientNotFoundResponseBody runs the validations defined on
// update_client_not_found_response_body
func ValidateUpdateClientNotFoundResponseBody(body *UpdateClientNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateClientUnauthorizedResponseBody runs the validations defined on
// update_client_unauthorized_response_body
func ValidateUpdateClientUnauthorizedResponseBody(body *UpdateClientUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteClientBadRequestResponseBody runs the validations defined on
// delete_client_bad_request_response_body
func ValidateDeleteClientBadRequestResponseBody(body *DeleteClientBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteClientConflictResponseBody runs the validations defined on
// delete_client_conflict_response_body
func ValidateDeleteClientConflictResponseBody(body *DeleteClientConflictResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteClientForbiddenResponseBody runs the validations defined on
// delete_client_forbidden_response_body
func ValidateDeleteClientForbiddenResponseBody(body *DeleteClientForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteClientInternalErrorResponseBody runs the validations defined
// on delete_client_internal_error_response_body
func ValidateDeleteClientInternalErrorResponseBody(body *DeleteClientInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteClientNotFoundResponseBody runs the validations defined on
// delete_client_not_found_response_body
func ValidateDeleteClientNotFoundResponseBody(body *DeleteClientNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteClientUnauthorizedResponseBody runs the validations defined on
// delete_client_unauthorized_response_body
func ValidateDeleteClientUnauthorizedResponseBody(body *DeleteClientUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateRotateClientSecretBadRequestResponseBody runs the validations
// defined on rotate_client_secret_bad_request_response_body
func ValidateRotateClientSecretBadRequestResponseBody(body *RotateClientSecretBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateRotateClientSecretConflictResponseBody runs the validations defined
// on rotate_client_secret_conflict_response_body
func ValidateRotateClientSecretConflictResponseBody(body *RotateClientSecretConflictResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateRotateClientSecretForbiddenResponseBody runs the validations defined
// on rotate_client_secret_forbidden_response_body
func ValidateRotateClientSecretForbiddenResponseBody(body *RotateClientSecretForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateRotateClientSecretInternalErrorResponseBody runs the validations
// defined on rotate_client_secret_internal_error_response_body
func ValidateRotateClientSecretInternalErrorResponseBody(body *RotateClientSecretInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateRotateClientSecretNotFoundResponseBody runs the validations defined
// on rotate_client_secret_not_found_response_body
func ValidateRotateClientSecretNotFoundResponseBody(body *RotateClientSecretNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateRotateClientSecretUnauthorizedResponseBody runs the validations
// defined on rotate_client_secret_unauthorized_response_body
func ValidateRotateClientSecretUnauthorizedResponseBody(body *RotateClientSecretUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateListScopesBadRequestResponseBody runs the validations defined on
// list_scopes_bad_request_response_body
func ValidateListScopesBadRequestResponseBody(body *ListScopesBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateListScopesConflictResponseBody runs the validations defined on
// list_scopes_conflict_response_body
func ValidateListScopesConflictResponseBody(body *ListScopesConflictResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateListScopesForbiddenResponseBody runs the validations defined on
// list_scopes_forbidden_response_body
func ValidateListScopesForbiddenResponseBody(body *ListScopesForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateListScopesInternalErrorResponseBody runs the validations defined on
// list_scopes_internal_error_response_body
func ValidateListScopesInternalErrorResponseBody(body *ListScopesInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateListScopesNotFoundResponseBody runs the validations defined on
// list_scopes_not_found_response_body
func ValidateListScopesNotFoundResponseBody(body *ListScopesNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateListScopesUnauthorizedResponseBody runs the validations defined on
// list_scopes_unauthorized_response_body
func ValidateListScopesUnauthorizedResponseBody(body *ListScopesUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateScopeBadRequestResponseBody runs the validations defined on
// create_scope_bad_request_response_body
func ValidateCreateScopeBadRequestResponseBody(body *CreateScopeBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateScopeConflictResponseBody runs the validations defined on
// create_scope_conflict_response_body
func ValidateCreateScopeConflictResponseBody(body *CreateScopeConflictResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateScopeForbiddenResponseBody runs the validations defined on
// create_scope_forbidden_response_body
func ValidateCreateScopeForbiddenResponseBody(body *CreateScopeForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateScopeInternalErrorResponseBody runs the validations defined on
// create_scope_internal_error_response_body
func ValidateCreateScopeInternalErrorResponseBody(body *CreateScopeInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateScopeNotFoundResponseBody runs the validations defined on
// create_scope_not_found_response_body
func ValidateCreateScopeNotFoundResponseBody(body *CreateScopeNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateScopeUnauthorizedResponseBody runs the validations defined on
// create_scope_unauthorized_response_body
func ValidateCreateScopeUnauthorizedResponseBody(body *CreateScopeUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetScopeBadRequestResponseBody runs the validations defined on
// get_scope_bad_request_response_body
func ValidateGetScopeBadRequestResponseBody(body *GetScopeBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetScopeConflictResponseBody runs the validations defined on
// get_scope_conflict_response_body
func ValidateGetScopeConflictResponseBody(body *GetScopeConflictResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetScopeForbiddenResponseBody runs the validations defined on
// get_scope_forbidden_response_body
func ValidateGetScopeForbiddenResponseBody(body *GetScopeForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetScopeInternalErrorResponseBody runs the validations defined on
// get_scope_internal_error_response_body
func ValidateGetScopeInternalErrorResponseBody(body *GetScopeInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetScopeNotFoundResponseBody runs the validations defined on
// get_scope_not_found_response_body
func ValidateGetScopeNotFoundResponseBody(body *GetScopeNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetScopeUnauthorizedResponseBody runs the validations defined on
// get_scope_unauthorized_response_body
func ValidateGetScopeUnauthorizedResponseBody(body *GetScopeUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateScopeBadRequestResponseBody runs the validations defined on
// update_scope_bad_request_response_body
func ValidateUpdateScopeBadRequestResponseBody(body *UpdateScopeBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateScopeConflictResponseBody runs the validations defined on
// update_scope_conflict_response_body
func ValidateUpdateScopeConflictResponseBody(body *UpdateScopeConflictResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateScopeForbiddenResponseBody runs the validations defined on
// update_scope_forbidden_response_body
func ValidateUpdateScopeForbiddenResponseBody(body *UpdateScopeForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateScopeInternalErrorResponseBody runs the validations defined on
// update_scope_internal_error_response_body
func ValidateUpdateScopeInternalErrorResponseBody(body *UpdateScopeInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateScopeNotFoundResponseBody runs the validations defined on
// update_scope_not_found_response_body
func ValidateUpdateScopeNotFoundResponseBody(body *UpdateScopeNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateScopeUnauthorizedResponseBody runs the validations defined on
// update_scope_unauthorized_response_body
func ValidateUpdateScopeUnauthorizedResponseBody(body *UpdateScopeUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteScopeBadRequestResponseBody runs the validations defined on
// delete_scope_bad_request_response_body
func ValidateDeleteScopeBadRequestResponseBody(body *DeleteScopeBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteScopeConflictResponseBody runs the validations defined on
// delete_scope_conflict_response_body
func ValidateDeleteScopeConflictResponseBody(body *DeleteScopeConflictResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteScopeForbiddenResponseBody runs the validations defined on
// delete_scope_forbidden_response_body
func ValidateDeleteScopeForbiddenResponseBody(body *DeleteScopeForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteScopeInternalErrorResponseBody runs the validations defined on
// delete_scope_internal_error_response_body
func ValidateDeleteScopeInternalErrorResponseBody(body *DeleteScopeInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteScopeNotFoundResponseBody runs the validations defined on
// delete_scope_not_found_response_body
func ValidateDeleteScopeNotFoundResponseBody(body *DeleteScopeNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteScopeUnauthorizedResponseBody runs the validations defined on
// delete_scope_unauthorized_response_body
func ValidateDeleteScopeUnauthorizedResponseBody(body *DeleteScopeUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateOidcConfigurationBadRequestResponseBody runs the validations defined
// on oidc_configuration_bad_request_response_body
func ValidateOidcConfigurationBadRequestResponseBody(body *OidcConfigurationBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateOidcConfigurationConflictResponseBody runs the validations defined
// on oidc_configuration_conflict_response_body
func ValidateOidcConfigurationConflictResponseBody(body *OidcConfigurationConflictResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateOidcConfigurationForbiddenResponseBody runs the validations defined
// on oidc_configuration_forbidden_response_body
func ValidateOidcConfigurationForbiddenResponseBody(body *OidcConfigurationForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateOidcConfigurationInternalErrorResponseBody runs the validations
// defined on oidc_configuration_internal_error_response_body
func ValidateOidcConfigurationInternalErrorResponseBody(body *OidcConfigurationInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateOidcConfigurationNotFoundResponseBody runs the validations defined
// on oidc_configuration_not_found_response_body
func ValidateOidcConfigurationNotFoundResponseBody(body *OidcConfigurationNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateOidcConfigurationUnauthorizedResponseBody runs the validations
// defined on oidc_configuration_unauthorized_response_body
func ValidateOidcConfigurationUnauthorizedResponseBody(body *OidcConfigurationUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateJwksBadRequestResponseBody runs the validations defined on
// jwks_bad_request_response_body
func ValidateJwksBadRequestResponseBody(body *JwksBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateJwksConflictResponseBody runs the validations defined on
// jwks_conflict_response_body
func ValidateJwksConflictResponseBody(body *JwksConflictResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateJwksForbiddenResponseBody runs the validations defined on
// jwks_forbidden_response_body
func ValidateJwksForbiddenResponseBody(body *JwksForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateJwksInternalErrorResponseBody runs the validations defined on
// jwks_internal_error_response_body
func ValidateJwksInternalErrorResponseBody(body *JwksInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateJwksNotFoundResponseBody runs the validations defined on
// jwks_not_found_response_body
func ValidateJwksNotFoundResponseBody(body *JwksNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateJwksUnauthorizedResponseBody runs the validations defined on
// jwks_unauthorized_response_body
func ValidateJwksUnauthorizedResponseBody(body *JwksUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateOAuthClientResponseResponseBody runs the validations defined on
// OAuthClientResponseResponseBody
func ValidateOAuthClientResponseResponseBody(body *OAuthClientResponseResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.ClientID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("client_id", "body"))
	}
	if body.ClientName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("client_name", "body"))
	}
	if body.RedirectUris == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("redirect_uris", "body"))
	}
	if body.AllowedGrantTypes == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("allowed_grant_types", "body"))
	}
	if body.Public == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("public", "body"))
	}
	if body.Active == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("active", "body"))
	}
	return
}

// ValidatePaginationResponseResponseBody runs the validations defined on
// PaginationResponseResponseBody
func ValidatePaginationResponseResponseBody(body *PaginationResponseResponseBody) (err error) {
	if body.Total == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total", "body"))
	}
	if body.Offset == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("offset", "body"))
	}
	if body.Limit == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("limit", "body"))
	}
	return
}

// ValidateOAuthScopeResponseResponseBody runs the validations defined on
// OAuthScopeResponseResponseBody
func ValidateOAuthScopeResponseResponseBody(body *OAuthScopeResponseResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.DefaultScope == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("default_scope", "body"))
	}
	if body.Public == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("public", "body"))
	}
	return
}
