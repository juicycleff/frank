// Code generated by goa v3.20.0, DO NOT EDIT.
//
// webhooks HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/juicycleff/frank/design -o .

package client

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	designtypes "github.com/juicycleff/frank/gen/designtypes"
	webhooks "github.com/juicycleff/frank/gen/webhooks"
	goahttp "goa.design/goa/v3/http"
)

// BuildListRequest instantiates a HTTP request object with method and path set
// to call the "webhooks" service "list" endpoint
func (c *Client) BuildListRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListWebhooksPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("webhooks", "list", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeListRequest returns an encoder for requests sent to the webhooks list
// server.
func EncodeListRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*webhooks.ListPayload)
		if !ok {
			return goahttp.ErrInvalidType("webhooks", "list", "*webhooks.ListPayload", v)
		}
		if p.JWT != nil {
			head := *p.JWT
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		values := req.URL.Query()
		values.Add("offset", fmt.Sprintf("%v", p.Offset))
		values.Add("limit", fmt.Sprintf("%v", p.Limit))
		if p.OrganizationID != nil {
			values.Add("organization_id", *p.OrganizationID)
		}
		for _, value := range p.EventTypes {
			values.Add("event_types", value)
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeListResponse returns a decoder for responses returned by the webhooks
// list endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeListResponse may return the following errors:
//   - "bad_request" (type *webhooks.BadRequestError): http.StatusBadRequest
//   - "forbidden" (type *webhooks.ForbiddenError): http.StatusForbidden
//   - "internal_error" (type *webhooks.InternalServerError): http.StatusInternalServerError
//   - "not_found" (type *webhooks.NotFoundError): http.StatusNotFound
//   - "unauthorized" (type *webhooks.UnauthorizedError): http.StatusUnauthorized
//   - error: internal error
func DecodeListResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("webhooks", "list", err)
			}
			err = ValidateListResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("webhooks", "list", err)
			}
			res := NewListResultOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body ListBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("webhooks", "list", err)
			}
			err = ValidateListBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("webhooks", "list", err)
			}
			return nil, NewListBadRequest(&body)
		case http.StatusForbidden:
			var (
				body ListForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("webhooks", "list", err)
			}
			err = ValidateListForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("webhooks", "list", err)
			}
			return nil, NewListForbidden(&body)
		case http.StatusInternalServerError:
			var (
				body ListInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("webhooks", "list", err)
			}
			err = ValidateListInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("webhooks", "list", err)
			}
			return nil, NewListInternalError(&body)
		case http.StatusNotFound:
			var (
				body ListNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("webhooks", "list", err)
			}
			err = ValidateListNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("webhooks", "list", err)
			}
			return nil, NewListNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body ListUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("webhooks", "list", err)
			}
			err = ValidateListUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("webhooks", "list", err)
			}
			return nil, NewListUnauthorized(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("webhooks", "list", resp.StatusCode, string(body))
		}
	}
}

// BuildCreateRequest instantiates a HTTP request object with method and path
// set to call the "webhooks" service "create" endpoint
func (c *Client) BuildCreateRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateWebhooksPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("webhooks", "create", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateRequest returns an encoder for requests sent to the webhooks
// create server.
func EncodeCreateRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*webhooks.CreatePayload)
		if !ok {
			return goahttp.ErrInvalidType("webhooks", "create", "*webhooks.CreatePayload", v)
		}
		if p.JWT != nil {
			head := *p.JWT
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		body := NewCreateRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("webhooks", "create", err)
		}
		return nil
	}
}

// DecodeCreateResponse returns a decoder for responses returned by the
// webhooks create endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeCreateResponse may return the following errors:
//   - "bad_request" (type *webhooks.BadRequestError): http.StatusBadRequest
//   - "forbidden" (type *webhooks.ForbiddenError): http.StatusForbidden
//   - "internal_error" (type *webhooks.InternalServerError): http.StatusInternalServerError
//   - "not_found" (type *webhooks.NotFoundError): http.StatusNotFound
//   - "unauthorized" (type *webhooks.UnauthorizedError): http.StatusUnauthorized
//   - error: internal error
func DecodeCreateResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body CreateResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("webhooks", "create", err)
			}
			err = ValidateCreateResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("webhooks", "create", err)
			}
			res := NewCreateWebhookSecretResponseCreated(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body CreateBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("webhooks", "create", err)
			}
			err = ValidateCreateBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("webhooks", "create", err)
			}
			return nil, NewCreateBadRequest(&body)
		case http.StatusForbidden:
			var (
				body CreateForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("webhooks", "create", err)
			}
			err = ValidateCreateForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("webhooks", "create", err)
			}
			return nil, NewCreateForbidden(&body)
		case http.StatusInternalServerError:
			var (
				body CreateInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("webhooks", "create", err)
			}
			err = ValidateCreateInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("webhooks", "create", err)
			}
			return nil, NewCreateInternalError(&body)
		case http.StatusNotFound:
			var (
				body CreateNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("webhooks", "create", err)
			}
			err = ValidateCreateNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("webhooks", "create", err)
			}
			return nil, NewCreateNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body CreateUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("webhooks", "create", err)
			}
			err = ValidateCreateUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("webhooks", "create", err)
			}
			return nil, NewCreateUnauthorized(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("webhooks", "create", resp.StatusCode, string(body))
		}
	}
}

// BuildGetRequest instantiates a HTTP request object with method and path set
// to call the "webhooks" service "get" endpoint
func (c *Client) BuildGetRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(*webhooks.GetPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("webhooks", "get", "*webhooks.GetPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetWebhooksPath(id)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("webhooks", "get", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetRequest returns an encoder for requests sent to the webhooks get
// server.
func EncodeGetRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*webhooks.GetPayload)
		if !ok {
			return goahttp.ErrInvalidType("webhooks", "get", "*webhooks.GetPayload", v)
		}
		if p.JWT != nil {
			head := *p.JWT
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeGetResponse returns a decoder for responses returned by the webhooks
// get endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeGetResponse may return the following errors:
//   - "bad_request" (type *webhooks.BadRequestError): http.StatusBadRequest
//   - "forbidden" (type *webhooks.ForbiddenError): http.StatusForbidden
//   - "internal_error" (type *webhooks.InternalServerError): http.StatusInternalServerError
//   - "not_found" (type *webhooks.NotFoundError): http.StatusNotFound
//   - "unauthorized" (type *webhooks.UnauthorizedError): http.StatusUnauthorized
//   - error: internal error
func DecodeGetResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("webhooks", "get", err)
			}
			err = ValidateGetResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("webhooks", "get", err)
			}
			res := NewGetWebhookResponseOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body GetBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("webhooks", "get", err)
			}
			err = ValidateGetBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("webhooks", "get", err)
			}
			return nil, NewGetBadRequest(&body)
		case http.StatusForbidden:
			var (
				body GetForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("webhooks", "get", err)
			}
			err = ValidateGetForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("webhooks", "get", err)
			}
			return nil, NewGetForbidden(&body)
		case http.StatusInternalServerError:
			var (
				body GetInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("webhooks", "get", err)
			}
			err = ValidateGetInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("webhooks", "get", err)
			}
			return nil, NewGetInternalError(&body)
		case http.StatusNotFound:
			var (
				body GetNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("webhooks", "get", err)
			}
			err = ValidateGetNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("webhooks", "get", err)
			}
			return nil, NewGetNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body GetUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("webhooks", "get", err)
			}
			err = ValidateGetUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("webhooks", "get", err)
			}
			return nil, NewGetUnauthorized(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("webhooks", "get", resp.StatusCode, string(body))
		}
	}
}

// BuildUpdateRequest instantiates a HTTP request object with method and path
// set to call the "webhooks" service "update" endpoint
func (c *Client) BuildUpdateRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(*webhooks.UpdatePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("webhooks", "update", "*webhooks.UpdatePayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpdateWebhooksPath(id)}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("webhooks", "update", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpdateRequest returns an encoder for requests sent to the webhooks
// update server.
func EncodeUpdateRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*webhooks.UpdatePayload)
		if !ok {
			return goahttp.ErrInvalidType("webhooks", "update", "*webhooks.UpdatePayload", v)
		}
		if p.JWT != nil {
			head := *p.JWT
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		body := NewUpdateRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("webhooks", "update", err)
		}
		return nil
	}
}

// DecodeUpdateResponse returns a decoder for responses returned by the
// webhooks update endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeUpdateResponse may return the following errors:
//   - "bad_request" (type *webhooks.BadRequestError): http.StatusBadRequest
//   - "forbidden" (type *webhooks.ForbiddenError): http.StatusForbidden
//   - "internal_error" (type *webhooks.InternalServerError): http.StatusInternalServerError
//   - "not_found" (type *webhooks.NotFoundError): http.StatusNotFound
//   - "unauthorized" (type *webhooks.UnauthorizedError): http.StatusUnauthorized
//   - error: internal error
func DecodeUpdateResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body UpdateResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("webhooks", "update", err)
			}
			err = ValidateUpdateResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("webhooks", "update", err)
			}
			res := NewUpdateWebhookResponseOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body UpdateBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("webhooks", "update", err)
			}
			err = ValidateUpdateBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("webhooks", "update", err)
			}
			return nil, NewUpdateBadRequest(&body)
		case http.StatusForbidden:
			var (
				body UpdateForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("webhooks", "update", err)
			}
			err = ValidateUpdateForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("webhooks", "update", err)
			}
			return nil, NewUpdateForbidden(&body)
		case http.StatusInternalServerError:
			var (
				body UpdateInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("webhooks", "update", err)
			}
			err = ValidateUpdateInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("webhooks", "update", err)
			}
			return nil, NewUpdateInternalError(&body)
		case http.StatusNotFound:
			var (
				body UpdateNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("webhooks", "update", err)
			}
			err = ValidateUpdateNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("webhooks", "update", err)
			}
			return nil, NewUpdateNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body UpdateUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("webhooks", "update", err)
			}
			err = ValidateUpdateUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("webhooks", "update", err)
			}
			return nil, NewUpdateUnauthorized(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("webhooks", "update", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteRequest instantiates a HTTP request object with method and path
// set to call the "webhooks" service "delete" endpoint
func (c *Client) BuildDeleteRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(*webhooks.DeletePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("webhooks", "delete", "*webhooks.DeletePayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteWebhooksPath(id)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("webhooks", "delete", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDeleteRequest returns an encoder for requests sent to the webhooks
// delete server.
func EncodeDeleteRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*webhooks.DeletePayload)
		if !ok {
			return goahttp.ErrInvalidType("webhooks", "delete", "*webhooks.DeletePayload", v)
		}
		if p.JWT != nil {
			head := *p.JWT
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeDeleteResponse returns a decoder for responses returned by the
// webhooks delete endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeDeleteResponse may return the following errors:
//   - "bad_request" (type *webhooks.BadRequestError): http.StatusBadRequest
//   - "forbidden" (type *webhooks.ForbiddenError): http.StatusForbidden
//   - "internal_error" (type *webhooks.InternalServerError): http.StatusInternalServerError
//   - "not_found" (type *webhooks.NotFoundError): http.StatusNotFound
//   - "unauthorized" (type *webhooks.UnauthorizedError): http.StatusUnauthorized
//   - error: internal error
func DecodeDeleteResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			return nil, nil
		case http.StatusBadRequest:
			var (
				body DeleteBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("webhooks", "delete", err)
			}
			err = ValidateDeleteBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("webhooks", "delete", err)
			}
			return nil, NewDeleteBadRequest(&body)
		case http.StatusForbidden:
			var (
				body DeleteForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("webhooks", "delete", err)
			}
			err = ValidateDeleteForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("webhooks", "delete", err)
			}
			return nil, NewDeleteForbidden(&body)
		case http.StatusInternalServerError:
			var (
				body DeleteInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("webhooks", "delete", err)
			}
			err = ValidateDeleteInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("webhooks", "delete", err)
			}
			return nil, NewDeleteInternalError(&body)
		case http.StatusNotFound:
			var (
				body DeleteNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("webhooks", "delete", err)
			}
			err = ValidateDeleteNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("webhooks", "delete", err)
			}
			return nil, NewDeleteNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body DeleteUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("webhooks", "delete", err)
			}
			err = ValidateDeleteUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("webhooks", "delete", err)
			}
			return nil, NewDeleteUnauthorized(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("webhooks", "delete", resp.StatusCode, string(body))
		}
	}
}

// BuildTriggerEventRequest instantiates a HTTP request object with method and
// path set to call the "webhooks" service "trigger_event" endpoint
func (c *Client) BuildTriggerEventRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: TriggerEventWebhooksPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("webhooks", "trigger_event", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeTriggerEventRequest returns an encoder for requests sent to the
// webhooks trigger_event server.
func EncodeTriggerEventRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*webhooks.TriggerEventPayload)
		if !ok {
			return goahttp.ErrInvalidType("webhooks", "trigger_event", "*webhooks.TriggerEventPayload", v)
		}
		if p.JWT != nil {
			head := *p.JWT
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		body := NewTriggerEventRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("webhooks", "trigger_event", err)
		}
		return nil
	}
}

// DecodeTriggerEventResponse returns a decoder for responses returned by the
// webhooks trigger_event endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeTriggerEventResponse may return the following errors:
//   - "bad_request" (type *webhooks.BadRequestError): http.StatusBadRequest
//   - "forbidden" (type *webhooks.ForbiddenError): http.StatusForbidden
//   - "internal_error" (type *webhooks.InternalServerError): http.StatusInternalServerError
//   - "not_found" (type *webhooks.NotFoundError): http.StatusNotFound
//   - "unauthorized" (type *webhooks.UnauthorizedError): http.StatusUnauthorized
//   - error: internal error
func DecodeTriggerEventResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body TriggerEventResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("webhooks", "trigger_event", err)
			}
			err = ValidateTriggerEventResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("webhooks", "trigger_event", err)
			}
			res := NewTriggerEventWebhookEventResponseOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body TriggerEventBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("webhooks", "trigger_event", err)
			}
			err = ValidateTriggerEventBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("webhooks", "trigger_event", err)
			}
			return nil, NewTriggerEventBadRequest(&body)
		case http.StatusForbidden:
			var (
				body TriggerEventForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("webhooks", "trigger_event", err)
			}
			err = ValidateTriggerEventForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("webhooks", "trigger_event", err)
			}
			return nil, NewTriggerEventForbidden(&body)
		case http.StatusInternalServerError:
			var (
				body TriggerEventInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("webhooks", "trigger_event", err)
			}
			err = ValidateTriggerEventInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("webhooks", "trigger_event", err)
			}
			return nil, NewTriggerEventInternalError(&body)
		case http.StatusNotFound:
			var (
				body TriggerEventNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("webhooks", "trigger_event", err)
			}
			err = ValidateTriggerEventNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("webhooks", "trigger_event", err)
			}
			return nil, NewTriggerEventNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body TriggerEventUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("webhooks", "trigger_event", err)
			}
			err = ValidateTriggerEventUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("webhooks", "trigger_event", err)
			}
			return nil, NewTriggerEventUnauthorized(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("webhooks", "trigger_event", resp.StatusCode, string(body))
		}
	}
}

// BuildListEventsRequest instantiates a HTTP request object with method and
// path set to call the "webhooks" service "list_events" endpoint
func (c *Client) BuildListEventsRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(*webhooks.ListEventsPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("webhooks", "list_events", "*webhooks.ListEventsPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListEventsWebhooksPath(id)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("webhooks", "list_events", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeListEventsRequest returns an encoder for requests sent to the webhooks
// list_events server.
func EncodeListEventsRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*webhooks.ListEventsPayload)
		if !ok {
			return goahttp.ErrInvalidType("webhooks", "list_events", "*webhooks.ListEventsPayload", v)
		}
		if p.JWT != nil {
			head := *p.JWT
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		values := req.URL.Query()
		values.Add("offset", fmt.Sprintf("%v", p.Offset))
		values.Add("limit", fmt.Sprintf("%v", p.Limit))
		if p.EventType != nil {
			values.Add("event_type", *p.EventType)
		}
		if p.Delivered != nil {
			values.Add("delivered", fmt.Sprintf("%v", *p.Delivered))
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeListEventsResponse returns a decoder for responses returned by the
// webhooks list_events endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeListEventsResponse may return the following errors:
//   - "bad_request" (type *webhooks.BadRequestError): http.StatusBadRequest
//   - "forbidden" (type *webhooks.ForbiddenError): http.StatusForbidden
//   - "internal_error" (type *webhooks.InternalServerError): http.StatusInternalServerError
//   - "not_found" (type *webhooks.NotFoundError): http.StatusNotFound
//   - "unauthorized" (type *webhooks.UnauthorizedError): http.StatusUnauthorized
//   - error: internal error
func DecodeListEventsResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListEventsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("webhooks", "list_events", err)
			}
			err = ValidateListEventsResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("webhooks", "list_events", err)
			}
			res := NewListEventsResultOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body ListEventsBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("webhooks", "list_events", err)
			}
			err = ValidateListEventsBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("webhooks", "list_events", err)
			}
			return nil, NewListEventsBadRequest(&body)
		case http.StatusForbidden:
			var (
				body ListEventsForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("webhooks", "list_events", err)
			}
			err = ValidateListEventsForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("webhooks", "list_events", err)
			}
			return nil, NewListEventsForbidden(&body)
		case http.StatusInternalServerError:
			var (
				body ListEventsInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("webhooks", "list_events", err)
			}
			err = ValidateListEventsInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("webhooks", "list_events", err)
			}
			return nil, NewListEventsInternalError(&body)
		case http.StatusNotFound:
			var (
				body ListEventsNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("webhooks", "list_events", err)
			}
			err = ValidateListEventsNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("webhooks", "list_events", err)
			}
			return nil, NewListEventsNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body ListEventsUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("webhooks", "list_events", err)
			}
			err = ValidateListEventsUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("webhooks", "list_events", err)
			}
			return nil, NewListEventsUnauthorized(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("webhooks", "list_events", resp.StatusCode, string(body))
		}
	}
}

// BuildReplayEventRequest instantiates a HTTP request object with method and
// path set to call the "webhooks" service "replay_event" endpoint
func (c *Client) BuildReplayEventRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		id      string
		eventID string
	)
	{
		p, ok := v.(*webhooks.ReplayEventPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("webhooks", "replay_event", "*webhooks.ReplayEventPayload", v)
		}
		id = p.ID
		eventID = p.EventID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ReplayEventWebhooksPath(id, eventID)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("webhooks", "replay_event", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeReplayEventRequest returns an encoder for requests sent to the
// webhooks replay_event server.
func EncodeReplayEventRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*webhooks.ReplayEventPayload)
		if !ok {
			return goahttp.ErrInvalidType("webhooks", "replay_event", "*webhooks.ReplayEventPayload", v)
		}
		if p.JWT != nil {
			head := *p.JWT
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeReplayEventResponse returns a decoder for responses returned by the
// webhooks replay_event endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeReplayEventResponse may return the following errors:
//   - "bad_request" (type *webhooks.BadRequestError): http.StatusBadRequest
//   - "forbidden" (type *webhooks.ForbiddenError): http.StatusForbidden
//   - "internal_error" (type *webhooks.InternalServerError): http.StatusInternalServerError
//   - "not_found" (type *webhooks.NotFoundError): http.StatusNotFound
//   - "unauthorized" (type *webhooks.UnauthorizedError): http.StatusUnauthorized
//   - error: internal error
func DecodeReplayEventResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ReplayEventResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("webhooks", "replay_event", err)
			}
			err = ValidateReplayEventResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("webhooks", "replay_event", err)
			}
			res := NewReplayEventWebhookEventResponseOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body ReplayEventBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("webhooks", "replay_event", err)
			}
			err = ValidateReplayEventBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("webhooks", "replay_event", err)
			}
			return nil, NewReplayEventBadRequest(&body)
		case http.StatusForbidden:
			var (
				body ReplayEventForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("webhooks", "replay_event", err)
			}
			err = ValidateReplayEventForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("webhooks", "replay_event", err)
			}
			return nil, NewReplayEventForbidden(&body)
		case http.StatusInternalServerError:
			var (
				body ReplayEventInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("webhooks", "replay_event", err)
			}
			err = ValidateReplayEventInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("webhooks", "replay_event", err)
			}
			return nil, NewReplayEventInternalError(&body)
		case http.StatusNotFound:
			var (
				body ReplayEventNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("webhooks", "replay_event", err)
			}
			err = ValidateReplayEventNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("webhooks", "replay_event", err)
			}
			return nil, NewReplayEventNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body ReplayEventUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("webhooks", "replay_event", err)
			}
			err = ValidateReplayEventUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("webhooks", "replay_event", err)
			}
			return nil, NewReplayEventUnauthorized(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("webhooks", "replay_event", resp.StatusCode, string(body))
		}
	}
}

// BuildReceiveRequest instantiates a HTTP request object with method and path
// set to call the "webhooks" service "receive" endpoint
func (c *Client) BuildReceiveRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(*webhooks.ReceivePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("webhooks", "receive", "*webhooks.ReceivePayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ReceiveWebhooksPath(id)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("webhooks", "receive", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeReceiveResponse returns a decoder for responses returned by the
// webhooks receive endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeReceiveResponse may return the following errors:
//   - "bad_request" (type *webhooks.BadRequestError): http.StatusBadRequest
//   - "forbidden" (type *webhooks.ForbiddenError): http.StatusForbidden
//   - "internal_error" (type *webhooks.InternalServerError): http.StatusInternalServerError
//   - "not_found" (type *webhooks.NotFoundError): http.StatusNotFound
//   - "unauthorized" (type *webhooks.UnauthorizedError): http.StatusUnauthorized
//   - error: internal error
func DecodeReceiveResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ReceiveResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("webhooks", "receive", err)
			}
			err = ValidateReceiveResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("webhooks", "receive", err)
			}
			res := NewReceiveResultOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body ReceiveBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("webhooks", "receive", err)
			}
			err = ValidateReceiveBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("webhooks", "receive", err)
			}
			return nil, NewReceiveBadRequest(&body)
		case http.StatusForbidden:
			var (
				body ReceiveForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("webhooks", "receive", err)
			}
			err = ValidateReceiveForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("webhooks", "receive", err)
			}
			return nil, NewReceiveForbidden(&body)
		case http.StatusInternalServerError:
			var (
				body ReceiveInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("webhooks", "receive", err)
			}
			err = ValidateReceiveInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("webhooks", "receive", err)
			}
			return nil, NewReceiveInternalError(&body)
		case http.StatusNotFound:
			var (
				body ReceiveNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("webhooks", "receive", err)
			}
			err = ValidateReceiveNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("webhooks", "receive", err)
			}
			return nil, NewReceiveNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body ReceiveUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("webhooks", "receive", err)
			}
			err = ValidateReceiveUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("webhooks", "receive", err)
			}
			return nil, NewReceiveUnauthorized(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("webhooks", "receive", resp.StatusCode, string(body))
		}
	}
}

// unmarshalWebhookResponseResponseBodyToWebhooksWebhookResponse builds a value
// of type *webhooks.WebhookResponse from a value of type
// *WebhookResponseResponseBody.
func unmarshalWebhookResponseResponseBodyToWebhooksWebhookResponse(v *WebhookResponseResponseBody) *webhooks.WebhookResponse {
	res := &webhooks.WebhookResponse{
		ID:             *v.ID,
		Name:           *v.Name,
		URL:            *v.URL,
		OrganizationID: *v.OrganizationID,
		Active:         *v.Active,
		Version:        v.Version,
		RetryCount:     v.RetryCount,
		TimeoutMs:      v.TimeoutMs,
		Format:         v.Format,
		CreatedAt:      *v.CreatedAt,
		UpdatedAt:      v.UpdatedAt,
	}
	res.EventTypes = make([]string, len(v.EventTypes))
	for i, val := range v.EventTypes {
		res.EventTypes[i] = val
	}
	if v.Metadata != nil {
		res.Metadata = make(map[string]any, len(v.Metadata))
		for key, val := range v.Metadata {
			tk := key
			tv := val
			res.Metadata[tk] = tv
		}
	}

	return res
}

// unmarshalPaginationResponseResponseBodyToDesigntypesPaginationResponse
// builds a value of type *designtypes.PaginationResponse from a value of type
// *PaginationResponseResponseBody.
func unmarshalPaginationResponseResponseBodyToDesigntypesPaginationResponse(v *PaginationResponseResponseBody) *designtypes.PaginationResponse {
	res := &designtypes.PaginationResponse{
		Total:  *v.Total,
		Offset: *v.Offset,
		Limit:  *v.Limit,
	}

	return res
}

// marshalWebhooksCreateWebhookRequestToCreateWebhookRequestRequestBody builds
// a value of type *CreateWebhookRequestRequestBody from a value of type
// *webhooks.CreateWebhookRequest.
func marshalWebhooksCreateWebhookRequestToCreateWebhookRequestRequestBody(v *webhooks.CreateWebhookRequest) *CreateWebhookRequestRequestBody {
	res := &CreateWebhookRequestRequestBody{
		Name:       v.Name,
		URL:        v.URL,
		RetryCount: v.RetryCount,
		TimeoutMs:  v.TimeoutMs,
		Format:     v.Format,
	}
	if v.EventTypes != nil {
		res.EventTypes = make([]string, len(v.EventTypes))
		for i, val := range v.EventTypes {
			res.EventTypes[i] = val
		}
	} else {
		res.EventTypes = []string{}
	}
	{
		var zero int
		if res.RetryCount == zero {
			res.RetryCount = 3
		}
	}
	{
		var zero int
		if res.TimeoutMs == zero {
			res.TimeoutMs = 5000
		}
	}
	{
		var zero string
		if res.Format == zero {
			res.Format = "json"
		}
	}
	if v.Metadata != nil {
		res.Metadata = make(map[string]any, len(v.Metadata))
		for key, val := range v.Metadata {
			tk := key
			tv := val
			res.Metadata[tk] = tv
		}
	}

	return res
}

// marshalCreateWebhookRequestRequestBodyToWebhooksCreateWebhookRequest builds
// a value of type *webhooks.CreateWebhookRequest from a value of type
// *CreateWebhookRequestRequestBody.
func marshalCreateWebhookRequestRequestBodyToWebhooksCreateWebhookRequest(v *CreateWebhookRequestRequestBody) *webhooks.CreateWebhookRequest {
	res := &webhooks.CreateWebhookRequest{
		Name:       v.Name,
		URL:        v.URL,
		RetryCount: v.RetryCount,
		TimeoutMs:  v.TimeoutMs,
		Format:     v.Format,
	}
	if v.EventTypes != nil {
		res.EventTypes = make([]string, len(v.EventTypes))
		for i, val := range v.EventTypes {
			res.EventTypes[i] = val
		}
	} else {
		res.EventTypes = []string{}
	}
	{
		var zero int
		if res.RetryCount == zero {
			res.RetryCount = 3
		}
	}
	{
		var zero int
		if res.TimeoutMs == zero {
			res.TimeoutMs = 5000
		}
	}
	{
		var zero string
		if res.Format == zero {
			res.Format = "json"
		}
	}
	if v.Metadata != nil {
		res.Metadata = make(map[string]any, len(v.Metadata))
		for key, val := range v.Metadata {
			tk := key
			tv := val
			res.Metadata[tk] = tv
		}
	}

	return res
}

// marshalWebhooksUpdateWebhookRequestToUpdateWebhookRequestRequestBody builds
// a value of type *UpdateWebhookRequestRequestBody from a value of type
// *webhooks.UpdateWebhookRequest.
func marshalWebhooksUpdateWebhookRequestToUpdateWebhookRequestRequestBody(v *webhooks.UpdateWebhookRequest) *UpdateWebhookRequestRequestBody {
	res := &UpdateWebhookRequestRequestBody{
		Name:       v.Name,
		URL:        v.URL,
		Active:     v.Active,
		RetryCount: v.RetryCount,
		TimeoutMs:  v.TimeoutMs,
		Format:     v.Format,
	}
	if v.EventTypes != nil {
		res.EventTypes = make([]string, len(v.EventTypes))
		for i, val := range v.EventTypes {
			res.EventTypes[i] = val
		}
	}
	if v.Metadata != nil {
		res.Metadata = make(map[string]any, len(v.Metadata))
		for key, val := range v.Metadata {
			tk := key
			tv := val
			res.Metadata[tk] = tv
		}
	}

	return res
}

// marshalUpdateWebhookRequestRequestBodyToWebhooksUpdateWebhookRequest builds
// a value of type *webhooks.UpdateWebhookRequest from a value of type
// *UpdateWebhookRequestRequestBody.
func marshalUpdateWebhookRequestRequestBodyToWebhooksUpdateWebhookRequest(v *UpdateWebhookRequestRequestBody) *webhooks.UpdateWebhookRequest {
	res := &webhooks.UpdateWebhookRequest{
		Name:       v.Name,
		URL:        v.URL,
		Active:     v.Active,
		RetryCount: v.RetryCount,
		TimeoutMs:  v.TimeoutMs,
		Format:     v.Format,
	}
	if v.EventTypes != nil {
		res.EventTypes = make([]string, len(v.EventTypes))
		for i, val := range v.EventTypes {
			res.EventTypes[i] = val
		}
	}
	if v.Metadata != nil {
		res.Metadata = make(map[string]any, len(v.Metadata))
		for key, val := range v.Metadata {
			tk := key
			tv := val
			res.Metadata[tk] = tv
		}
	}

	return res
}

// marshalWebhooksTriggerEventRequestToTriggerEventRequestRequestBody builds a
// value of type *TriggerEventRequestRequestBody from a value of type
// *webhooks.TriggerEventRequest.
func marshalWebhooksTriggerEventRequestToTriggerEventRequestRequestBody(v *webhooks.TriggerEventRequest) *TriggerEventRequestRequestBody {
	res := &TriggerEventRequestRequestBody{
		EventType: v.EventType,
		Payload:   v.Payload,
	}
	if v.Headers != nil {
		res.Headers = make(map[string]string, len(v.Headers))
		for key, val := range v.Headers {
			tk := key
			tv := val
			res.Headers[tk] = tv
		}
	}

	return res
}

// marshalTriggerEventRequestRequestBodyToWebhooksTriggerEventRequest builds a
// value of type *webhooks.TriggerEventRequest from a value of type
// *TriggerEventRequestRequestBody.
func marshalTriggerEventRequestRequestBodyToWebhooksTriggerEventRequest(v *TriggerEventRequestRequestBody) *webhooks.TriggerEventRequest {
	res := &webhooks.TriggerEventRequest{
		EventType: v.EventType,
		Payload:   v.Payload,
	}
	if v.Headers != nil {
		res.Headers = make(map[string]string, len(v.Headers))
		for key, val := range v.Headers {
			tk := key
			tv := val
			res.Headers[tk] = tv
		}
	}

	return res
}

// unmarshalWebhookEventResponseResponseBodyToWebhooksWebhookEventResponse
// builds a value of type *webhooks.WebhookEventResponse from a value of type
// *WebhookEventResponseResponseBody.
func unmarshalWebhookEventResponseResponseBodyToWebhooksWebhookEventResponse(v *WebhookEventResponseResponseBody) *webhooks.WebhookEventResponse {
	res := &webhooks.WebhookEventResponse{
		ID:           *v.ID,
		WebhookID:    *v.WebhookID,
		EventType:    *v.EventType,
		Payload:      v.Payload,
		Delivered:    *v.Delivered,
		DeliveredAt:  v.DeliveredAt,
		Attempts:     *v.Attempts,
		NextRetry:    v.NextRetry,
		StatusCode:   v.StatusCode,
		ResponseBody: v.ResponseBody,
		Error:        v.Error,
		CreatedAt:    *v.CreatedAt,
		UpdatedAt:    v.UpdatedAt,
	}
	if v.Headers != nil {
		res.Headers = make(map[string]string, len(v.Headers))
		for key, val := range v.Headers {
			tk := key
			tv := val
			res.Headers[tk] = tv
		}
	}

	return res
}
