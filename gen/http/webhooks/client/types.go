// Code generated by goa v3.20.0, DO NOT EDIT.
//
// webhooks HTTP client types
//
// Command:
// $ goa gen github.com/juicycleff/frank/design -o .

package client

import (
	webhooks "github.com/juicycleff/frank/gen/webhooks"
	goa "goa.design/goa/v3/pkg"
)

// CreateRequestBody is the type of the "webhooks" service "create" endpoint
// HTTP request body.
type CreateRequestBody struct {
	// Organization ID
	OrganizationID string                           `form:"organization_id" json:"organization_id" xml:"organization_id"`
	Webhook        *CreateWebhookRequestRequestBody `form:"webhook" json:"webhook" xml:"webhook"`
}

// UpdateRequestBody is the type of the "webhooks" service "update" endpoint
// HTTP request body.
type UpdateRequestBody struct {
	Webhook *UpdateWebhookRequestRequestBody `form:"webhook" json:"webhook" xml:"webhook"`
}

// TriggerEventRequestBody is the type of the "webhooks" service
// "trigger_event" endpoint HTTP request body.
type TriggerEventRequestBody struct {
	// Organization ID
	OrganizationID string                          `form:"organization_id" json:"organization_id" xml:"organization_id"`
	Event          *TriggerEventRequestRequestBody `form:"event" json:"event" xml:"event"`
}

// ListResponseBody is the type of the "webhooks" service "list" endpoint HTTP
// response body.
type ListResponseBody struct {
	Data       []*WebhookResponseResponseBody  `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	Pagination *PaginationResponseResponseBody `form:"pagination,omitempty" json:"pagination,omitempty" xml:"pagination,omitempty"`
}

// CreateResponseBody is the type of the "webhooks" service "create" endpoint
// HTTP response body.
type CreateResponseBody struct {
	// Webhook secret for signature verification
	Secret *string `form:"secret,omitempty" json:"secret,omitempty" xml:"secret,omitempty"`
	// Webhook ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Webhook name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Webhook URL
	URL *string `form:"url,omitempty" json:"url,omitempty" xml:"url,omitempty"`
	// Organization ID
	OrganizationID *string `form:"organization_id,omitempty" json:"organization_id,omitempty" xml:"organization_id,omitempty"`
	// Whether webhook is active
	Active *bool `form:"active,omitempty" json:"active,omitempty" xml:"active,omitempty"`
	// Event types webhook subscribes to
	EventTypes []string `form:"event_types,omitempty" json:"event_types,omitempty" xml:"event_types,omitempty"`
	// Webhook version
	Version *string `form:"version,omitempty" json:"version,omitempty" xml:"version,omitempty"`
	// Number of retries on failure
	RetryCount *int `form:"retry_count,omitempty" json:"retry_count,omitempty" xml:"retry_count,omitempty"`
	// Timeout in milliseconds
	TimeoutMs *int `form:"timeout_ms,omitempty" json:"timeout_ms,omitempty" xml:"timeout_ms,omitempty"`
	// Payload format (json/form)
	Format *string `form:"format,omitempty" json:"format,omitempty" xml:"format,omitempty"`
	// Webhook metadata
	Metadata map[string]any `form:"metadata,omitempty" json:"metadata,omitempty" xml:"metadata,omitempty"`
	// Creation timestamp
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// Last update timestamp
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// GetResponseBody is the type of the "webhooks" service "get" endpoint HTTP
// response body.
type GetResponseBody struct {
	// Webhook ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Webhook name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Webhook URL
	URL *string `form:"url,omitempty" json:"url,omitempty" xml:"url,omitempty"`
	// Organization ID
	OrganizationID *string `form:"organization_id,omitempty" json:"organization_id,omitempty" xml:"organization_id,omitempty"`
	// Whether webhook is active
	Active *bool `form:"active,omitempty" json:"active,omitempty" xml:"active,omitempty"`
	// Event types webhook subscribes to
	EventTypes []string `form:"event_types,omitempty" json:"event_types,omitempty" xml:"event_types,omitempty"`
	// Webhook version
	Version *string `form:"version,omitempty" json:"version,omitempty" xml:"version,omitempty"`
	// Number of retries on failure
	RetryCount *int `form:"retry_count,omitempty" json:"retry_count,omitempty" xml:"retry_count,omitempty"`
	// Timeout in milliseconds
	TimeoutMs *int `form:"timeout_ms,omitempty" json:"timeout_ms,omitempty" xml:"timeout_ms,omitempty"`
	// Payload format (json/form)
	Format *string `form:"format,omitempty" json:"format,omitempty" xml:"format,omitempty"`
	// Webhook metadata
	Metadata map[string]any `form:"metadata,omitempty" json:"metadata,omitempty" xml:"metadata,omitempty"`
	// Creation timestamp
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// Last update timestamp
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// UpdateResponseBody is the type of the "webhooks" service "update" endpoint
// HTTP response body.
type UpdateResponseBody struct {
	// Webhook ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Webhook name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Webhook URL
	URL *string `form:"url,omitempty" json:"url,omitempty" xml:"url,omitempty"`
	// Organization ID
	OrganizationID *string `form:"organization_id,omitempty" json:"organization_id,omitempty" xml:"organization_id,omitempty"`
	// Whether webhook is active
	Active *bool `form:"active,omitempty" json:"active,omitempty" xml:"active,omitempty"`
	// Event types webhook subscribes to
	EventTypes []string `form:"event_types,omitempty" json:"event_types,omitempty" xml:"event_types,omitempty"`
	// Webhook version
	Version *string `form:"version,omitempty" json:"version,omitempty" xml:"version,omitempty"`
	// Number of retries on failure
	RetryCount *int `form:"retry_count,omitempty" json:"retry_count,omitempty" xml:"retry_count,omitempty"`
	// Timeout in milliseconds
	TimeoutMs *int `form:"timeout_ms,omitempty" json:"timeout_ms,omitempty" xml:"timeout_ms,omitempty"`
	// Payload format (json/form)
	Format *string `form:"format,omitempty" json:"format,omitempty" xml:"format,omitempty"`
	// Webhook metadata
	Metadata map[string]any `form:"metadata,omitempty" json:"metadata,omitempty" xml:"metadata,omitempty"`
	// Creation timestamp
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// Last update timestamp
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// TriggerEventResponseBody is the type of the "webhooks" service
// "trigger_event" endpoint HTTP response body.
type TriggerEventResponseBody struct {
	// Event ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Webhook ID
	WebhookID *string `form:"webhook_id,omitempty" json:"webhook_id,omitempty" xml:"webhook_id,omitempty"`
	// Event type
	EventType *string `form:"event_type,omitempty" json:"event_type,omitempty" xml:"event_type,omitempty"`
	// Event payload
	Payload any `form:"payload,omitempty" json:"payload,omitempty" xml:"payload,omitempty"`
	// Event headers
	Headers map[string]string `form:"headers,omitempty" json:"headers,omitempty" xml:"headers,omitempty"`
	// Whether event was delivered
	Delivered *bool `form:"delivered,omitempty" json:"delivered,omitempty" xml:"delivered,omitempty"`
	// Delivery timestamp
	DeliveredAt *string `form:"delivered_at,omitempty" json:"delivered_at,omitempty" xml:"delivered_at,omitempty"`
	// Number of delivery attempts
	Attempts *int `form:"attempts,omitempty" json:"attempts,omitempty" xml:"attempts,omitempty"`
	// Next retry timestamp
	NextRetry *string `form:"next_retry,omitempty" json:"next_retry,omitempty" xml:"next_retry,omitempty"`
	// HTTP status code from last attempt
	StatusCode *int `form:"status_code,omitempty" json:"status_code,omitempty" xml:"status_code,omitempty"`
	// Response from last attempt
	ResponseBody *string `form:"response_body,omitempty" json:"response_body,omitempty" xml:"response_body,omitempty"`
	// Error from last attempt
	Error *string `form:"error,omitempty" json:"error,omitempty" xml:"error,omitempty"`
	// Creation timestamp
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// Last update timestamp
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// ListEventsResponseBody is the type of the "webhooks" service "list_events"
// endpoint HTTP response body.
type ListEventsResponseBody struct {
	Data       []*WebhookEventResponseResponseBody `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	Pagination *PaginationResponseResponseBody     `form:"pagination,omitempty" json:"pagination,omitempty" xml:"pagination,omitempty"`
}

// ReplayEventResponseBody is the type of the "webhooks" service "replay_event"
// endpoint HTTP response body.
type ReplayEventResponseBody struct {
	// Event ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Webhook ID
	WebhookID *string `form:"webhook_id,omitempty" json:"webhook_id,omitempty" xml:"webhook_id,omitempty"`
	// Event type
	EventType *string `form:"event_type,omitempty" json:"event_type,omitempty" xml:"event_type,omitempty"`
	// Event payload
	Payload any `form:"payload,omitempty" json:"payload,omitempty" xml:"payload,omitempty"`
	// Event headers
	Headers map[string]string `form:"headers,omitempty" json:"headers,omitempty" xml:"headers,omitempty"`
	// Whether event was delivered
	Delivered *bool `form:"delivered,omitempty" json:"delivered,omitempty" xml:"delivered,omitempty"`
	// Delivery timestamp
	DeliveredAt *string `form:"delivered_at,omitempty" json:"delivered_at,omitempty" xml:"delivered_at,omitempty"`
	// Number of delivery attempts
	Attempts *int `form:"attempts,omitempty" json:"attempts,omitempty" xml:"attempts,omitempty"`
	// Next retry timestamp
	NextRetry *string `form:"next_retry,omitempty" json:"next_retry,omitempty" xml:"next_retry,omitempty"`
	// HTTP status code from last attempt
	StatusCode *int `form:"status_code,omitempty" json:"status_code,omitempty" xml:"status_code,omitempty"`
	// Response from last attempt
	ResponseBody *string `form:"response_body,omitempty" json:"response_body,omitempty" xml:"response_body,omitempty"`
	// Error from last attempt
	Error *string `form:"error,omitempty" json:"error,omitempty" xml:"error,omitempty"`
	// Creation timestamp
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// Last update timestamp
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// ReceiveResponseBody is the type of the "webhooks" service "receive" endpoint
// HTTP response body.
type ReceiveResponseBody struct {
	// Success message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// ListBadRequestResponseBody is the type of the "webhooks" service "list"
// endpoint HTTP response body for the "bad_request" error.
type ListBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListForbiddenResponseBody is the type of the "webhooks" service "list"
// endpoint HTTP response body for the "forbidden" error.
type ListForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListInternalErrorResponseBody is the type of the "webhooks" service "list"
// endpoint HTTP response body for the "internal_error" error.
type ListInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListNotFoundResponseBody is the type of the "webhooks" service "list"
// endpoint HTTP response body for the "not_found" error.
type ListNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListUnauthorizedResponseBody is the type of the "webhooks" service "list"
// endpoint HTTP response body for the "unauthorized" error.
type ListUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreateBadRequestResponseBody is the type of the "webhooks" service "create"
// endpoint HTTP response body for the "bad_request" error.
type CreateBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreateForbiddenResponseBody is the type of the "webhooks" service "create"
// endpoint HTTP response body for the "forbidden" error.
type CreateForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreateInternalErrorResponseBody is the type of the "webhooks" service
// "create" endpoint HTTP response body for the "internal_error" error.
type CreateInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreateNotFoundResponseBody is the type of the "webhooks" service "create"
// endpoint HTTP response body for the "not_found" error.
type CreateNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreateUnauthorizedResponseBody is the type of the "webhooks" service
// "create" endpoint HTTP response body for the "unauthorized" error.
type CreateUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetBadRequestResponseBody is the type of the "webhooks" service "get"
// endpoint HTTP response body for the "bad_request" error.
type GetBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetForbiddenResponseBody is the type of the "webhooks" service "get"
// endpoint HTTP response body for the "forbidden" error.
type GetForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetInternalErrorResponseBody is the type of the "webhooks" service "get"
// endpoint HTTP response body for the "internal_error" error.
type GetInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetNotFoundResponseBody is the type of the "webhooks" service "get" endpoint
// HTTP response body for the "not_found" error.
type GetNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetUnauthorizedResponseBody is the type of the "webhooks" service "get"
// endpoint HTTP response body for the "unauthorized" error.
type GetUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateBadRequestResponseBody is the type of the "webhooks" service "update"
// endpoint HTTP response body for the "bad_request" error.
type UpdateBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateForbiddenResponseBody is the type of the "webhooks" service "update"
// endpoint HTTP response body for the "forbidden" error.
type UpdateForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateInternalErrorResponseBody is the type of the "webhooks" service
// "update" endpoint HTTP response body for the "internal_error" error.
type UpdateInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateNotFoundResponseBody is the type of the "webhooks" service "update"
// endpoint HTTP response body for the "not_found" error.
type UpdateNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateUnauthorizedResponseBody is the type of the "webhooks" service
// "update" endpoint HTTP response body for the "unauthorized" error.
type UpdateUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteBadRequestResponseBody is the type of the "webhooks" service "delete"
// endpoint HTTP response body for the "bad_request" error.
type DeleteBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteForbiddenResponseBody is the type of the "webhooks" service "delete"
// endpoint HTTP response body for the "forbidden" error.
type DeleteForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteInternalErrorResponseBody is the type of the "webhooks" service
// "delete" endpoint HTTP response body for the "internal_error" error.
type DeleteInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteNotFoundResponseBody is the type of the "webhooks" service "delete"
// endpoint HTTP response body for the "not_found" error.
type DeleteNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteUnauthorizedResponseBody is the type of the "webhooks" service
// "delete" endpoint HTTP response body for the "unauthorized" error.
type DeleteUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// TriggerEventBadRequestResponseBody is the type of the "webhooks" service
// "trigger_event" endpoint HTTP response body for the "bad_request" error.
type TriggerEventBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// TriggerEventForbiddenResponseBody is the type of the "webhooks" service
// "trigger_event" endpoint HTTP response body for the "forbidden" error.
type TriggerEventForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// TriggerEventInternalErrorResponseBody is the type of the "webhooks" service
// "trigger_event" endpoint HTTP response body for the "internal_error" error.
type TriggerEventInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// TriggerEventNotFoundResponseBody is the type of the "webhooks" service
// "trigger_event" endpoint HTTP response body for the "not_found" error.
type TriggerEventNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// TriggerEventUnauthorizedResponseBody is the type of the "webhooks" service
// "trigger_event" endpoint HTTP response body for the "unauthorized" error.
type TriggerEventUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListEventsBadRequestResponseBody is the type of the "webhooks" service
// "list_events" endpoint HTTP response body for the "bad_request" error.
type ListEventsBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListEventsForbiddenResponseBody is the type of the "webhooks" service
// "list_events" endpoint HTTP response body for the "forbidden" error.
type ListEventsForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListEventsInternalErrorResponseBody is the type of the "webhooks" service
// "list_events" endpoint HTTP response body for the "internal_error" error.
type ListEventsInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListEventsNotFoundResponseBody is the type of the "webhooks" service
// "list_events" endpoint HTTP response body for the "not_found" error.
type ListEventsNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListEventsUnauthorizedResponseBody is the type of the "webhooks" service
// "list_events" endpoint HTTP response body for the "unauthorized" error.
type ListEventsUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ReplayEventBadRequestResponseBody is the type of the "webhooks" service
// "replay_event" endpoint HTTP response body for the "bad_request" error.
type ReplayEventBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ReplayEventForbiddenResponseBody is the type of the "webhooks" service
// "replay_event" endpoint HTTP response body for the "forbidden" error.
type ReplayEventForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ReplayEventInternalErrorResponseBody is the type of the "webhooks" service
// "replay_event" endpoint HTTP response body for the "internal_error" error.
type ReplayEventInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ReplayEventNotFoundResponseBody is the type of the "webhooks" service
// "replay_event" endpoint HTTP response body for the "not_found" error.
type ReplayEventNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ReplayEventUnauthorizedResponseBody is the type of the "webhooks" service
// "replay_event" endpoint HTTP response body for the "unauthorized" error.
type ReplayEventUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ReceiveBadRequestResponseBody is the type of the "webhooks" service
// "receive" endpoint HTTP response body for the "bad_request" error.
type ReceiveBadRequestResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ReceiveForbiddenResponseBody is the type of the "webhooks" service "receive"
// endpoint HTTP response body for the "forbidden" error.
type ReceiveForbiddenResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ReceiveInternalErrorResponseBody is the type of the "webhooks" service
// "receive" endpoint HTTP response body for the "internal_error" error.
type ReceiveInternalErrorResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ReceiveNotFoundResponseBody is the type of the "webhooks" service "receive"
// endpoint HTTP response body for the "not_found" error.
type ReceiveNotFoundResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ReceiveUnauthorizedResponseBody is the type of the "webhooks" service
// "receive" endpoint HTTP response body for the "unauthorized" error.
type ReceiveUnauthorizedResponseBody struct {
	// Error code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// WebhookResponseResponseBody is used to define fields on response body types.
type WebhookResponseResponseBody struct {
	// Webhook ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Webhook name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Webhook URL
	URL *string `form:"url,omitempty" json:"url,omitempty" xml:"url,omitempty"`
	// Organization ID
	OrganizationID *string `form:"organization_id,omitempty" json:"organization_id,omitempty" xml:"organization_id,omitempty"`
	// Whether webhook is active
	Active *bool `form:"active,omitempty" json:"active,omitempty" xml:"active,omitempty"`
	// Event types webhook subscribes to
	EventTypes []string `form:"event_types,omitempty" json:"event_types,omitempty" xml:"event_types,omitempty"`
	// Webhook version
	Version *string `form:"version,omitempty" json:"version,omitempty" xml:"version,omitempty"`
	// Number of retries on failure
	RetryCount *int `form:"retry_count,omitempty" json:"retry_count,omitempty" xml:"retry_count,omitempty"`
	// Timeout in milliseconds
	TimeoutMs *int `form:"timeout_ms,omitempty" json:"timeout_ms,omitempty" xml:"timeout_ms,omitempty"`
	// Payload format (json/form)
	Format *string `form:"format,omitempty" json:"format,omitempty" xml:"format,omitempty"`
	// Webhook metadata
	Metadata map[string]any `form:"metadata,omitempty" json:"metadata,omitempty" xml:"metadata,omitempty"`
	// Creation timestamp
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// Last update timestamp
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// PaginationResponseResponseBody is used to define fields on response body
// types.
type PaginationResponseResponseBody struct {
	// Total number of items
	Total *int `form:"total,omitempty" json:"total,omitempty" xml:"total,omitempty"`
	// Current offset
	Offset *int `form:"offset,omitempty" json:"offset,omitempty" xml:"offset,omitempty"`
	// Current limit
	Limit *int `form:"limit,omitempty" json:"limit,omitempty" xml:"limit,omitempty"`
}

// CreateWebhookRequestRequestBody is used to define fields on request body
// types.
type CreateWebhookRequestRequestBody struct {
	// Webhook name
	Name string `form:"name" json:"name" xml:"name"`
	// Webhook URL
	URL string `form:"url" json:"url" xml:"url"`
	// Event types to subscribe to
	EventTypes []string `form:"event_types" json:"event_types" xml:"event_types"`
	// Number of retries on failure
	RetryCount int `form:"retry_count" json:"retry_count" xml:"retry_count"`
	// Timeout in milliseconds
	TimeoutMs int `form:"timeout_ms" json:"timeout_ms" xml:"timeout_ms"`
	// Payload format
	Format string `form:"format" json:"format" xml:"format"`
	// Webhook metadata
	Metadata map[string]any `form:"metadata,omitempty" json:"metadata,omitempty" xml:"metadata,omitempty"`
}

// UpdateWebhookRequestRequestBody is used to define fields on request body
// types.
type UpdateWebhookRequestRequestBody struct {
	// Webhook name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Webhook URL
	URL *string `form:"url,omitempty" json:"url,omitempty" xml:"url,omitempty"`
	// Whether webhook is active
	Active *bool `form:"active,omitempty" json:"active,omitempty" xml:"active,omitempty"`
	// Event types to subscribe to
	EventTypes []string `form:"event_types,omitempty" json:"event_types,omitempty" xml:"event_types,omitempty"`
	// Number of retries on failure
	RetryCount *int `form:"retry_count,omitempty" json:"retry_count,omitempty" xml:"retry_count,omitempty"`
	// Timeout in milliseconds
	TimeoutMs *int `form:"timeout_ms,omitempty" json:"timeout_ms,omitempty" xml:"timeout_ms,omitempty"`
	// Payload format
	Format *string `form:"format,omitempty" json:"format,omitempty" xml:"format,omitempty"`
	// Webhook metadata
	Metadata map[string]any `form:"metadata,omitempty" json:"metadata,omitempty" xml:"metadata,omitempty"`
}

// TriggerEventRequestRequestBody is used to define fields on request body
// types.
type TriggerEventRequestRequestBody struct {
	// Event type
	EventType string `form:"event_type" json:"event_type" xml:"event_type"`
	// Event payload
	Payload any `form:"payload" json:"payload" xml:"payload"`
	// Custom headers
	Headers map[string]string `form:"headers,omitempty" json:"headers,omitempty" xml:"headers,omitempty"`
}

// WebhookEventResponseResponseBody is used to define fields on response body
// types.
type WebhookEventResponseResponseBody struct {
	// Event ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Webhook ID
	WebhookID *string `form:"webhook_id,omitempty" json:"webhook_id,omitempty" xml:"webhook_id,omitempty"`
	// Event type
	EventType *string `form:"event_type,omitempty" json:"event_type,omitempty" xml:"event_type,omitempty"`
	// Event payload
	Payload any `form:"payload,omitempty" json:"payload,omitempty" xml:"payload,omitempty"`
	// Event headers
	Headers map[string]string `form:"headers,omitempty" json:"headers,omitempty" xml:"headers,omitempty"`
	// Whether event was delivered
	Delivered *bool `form:"delivered,omitempty" json:"delivered,omitempty" xml:"delivered,omitempty"`
	// Delivery timestamp
	DeliveredAt *string `form:"delivered_at,omitempty" json:"delivered_at,omitempty" xml:"delivered_at,omitempty"`
	// Number of delivery attempts
	Attempts *int `form:"attempts,omitempty" json:"attempts,omitempty" xml:"attempts,omitempty"`
	// Next retry timestamp
	NextRetry *string `form:"next_retry,omitempty" json:"next_retry,omitempty" xml:"next_retry,omitempty"`
	// HTTP status code from last attempt
	StatusCode *int `form:"status_code,omitempty" json:"status_code,omitempty" xml:"status_code,omitempty"`
	// Response from last attempt
	ResponseBody *string `form:"response_body,omitempty" json:"response_body,omitempty" xml:"response_body,omitempty"`
	// Error from last attempt
	Error *string `form:"error,omitempty" json:"error,omitempty" xml:"error,omitempty"`
	// Creation timestamp
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// Last update timestamp
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// NewCreateRequestBody builds the HTTP request body from the payload of the
// "create" endpoint of the "webhooks" service.
func NewCreateRequestBody(p *webhooks.CreatePayload) *CreateRequestBody {
	body := &CreateRequestBody{
		OrganizationID: p.OrganizationID,
	}
	if p.Webhook != nil {
		body.Webhook = marshalWebhooksCreateWebhookRequestToCreateWebhookRequestRequestBody(p.Webhook)
	}
	return body
}

// NewUpdateRequestBody builds the HTTP request body from the payload of the
// "update" endpoint of the "webhooks" service.
func NewUpdateRequestBody(p *webhooks.UpdatePayload) *UpdateRequestBody {
	body := &UpdateRequestBody{}
	if p.Webhook != nil {
		body.Webhook = marshalWebhooksUpdateWebhookRequestToUpdateWebhookRequestRequestBody(p.Webhook)
	}
	return body
}

// NewTriggerEventRequestBody builds the HTTP request body from the payload of
// the "trigger_event" endpoint of the "webhooks" service.
func NewTriggerEventRequestBody(p *webhooks.TriggerEventPayload) *TriggerEventRequestBody {
	body := &TriggerEventRequestBody{
		OrganizationID: p.OrganizationID,
	}
	if p.Event != nil {
		body.Event = marshalWebhooksTriggerEventRequestToTriggerEventRequestRequestBody(p.Event)
	}
	return body
}

// NewListResultOK builds a "webhooks" service "list" endpoint result from a
// HTTP "OK" response.
func NewListResultOK(body *ListResponseBody) *webhooks.ListResult {
	v := &webhooks.ListResult{}
	v.Data = make([]*webhooks.WebhookResponse, len(body.Data))
	for i, val := range body.Data {
		v.Data[i] = unmarshalWebhookResponseResponseBodyToWebhooksWebhookResponse(val)
	}
	v.Pagination = unmarshalPaginationResponseResponseBodyToDesigntypesPaginationResponse(body.Pagination)

	return v
}

// NewListBadRequest builds a webhooks service list endpoint bad_request error.
func NewListBadRequest(body *ListBadRequestResponseBody) *webhooks.BadRequestError {
	v := &webhooks.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewListForbidden builds a webhooks service list endpoint forbidden error.
func NewListForbidden(body *ListForbiddenResponseBody) *webhooks.ForbiddenError {
	v := &webhooks.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewListInternalError builds a webhooks service list endpoint internal_error
// error.
func NewListInternalError(body *ListInternalErrorResponseBody) *webhooks.InternalServerError {
	v := &webhooks.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewListNotFound builds a webhooks service list endpoint not_found error.
func NewListNotFound(body *ListNotFoundResponseBody) *webhooks.NotFoundError {
	v := &webhooks.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewListUnauthorized builds a webhooks service list endpoint unauthorized
// error.
func NewListUnauthorized(body *ListUnauthorizedResponseBody) *webhooks.UnauthorizedError {
	v := &webhooks.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewCreateWebhookSecretResponseCreated builds a "webhooks" service "create"
// endpoint result from a HTTP "Created" response.
func NewCreateWebhookSecretResponseCreated(body *CreateResponseBody) *webhooks.WebhookSecretResponse {
	v := &webhooks.WebhookSecretResponse{
		Secret:         *body.Secret,
		ID:             *body.ID,
		Name:           *body.Name,
		URL:            *body.URL,
		OrganizationID: *body.OrganizationID,
		Active:         *body.Active,
		Version:        body.Version,
		RetryCount:     body.RetryCount,
		TimeoutMs:      body.TimeoutMs,
		Format:         body.Format,
		CreatedAt:      *body.CreatedAt,
		UpdatedAt:      body.UpdatedAt,
	}
	v.EventTypes = make([]string, len(body.EventTypes))
	for i, val := range body.EventTypes {
		v.EventTypes[i] = val
	}
	if body.Metadata != nil {
		v.Metadata = make(map[string]any, len(body.Metadata))
		for key, val := range body.Metadata {
			tk := key
			tv := val
			v.Metadata[tk] = tv
		}
	}

	return v
}

// NewCreateBadRequest builds a webhooks service create endpoint bad_request
// error.
func NewCreateBadRequest(body *CreateBadRequestResponseBody) *webhooks.BadRequestError {
	v := &webhooks.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewCreateForbidden builds a webhooks service create endpoint forbidden error.
func NewCreateForbidden(body *CreateForbiddenResponseBody) *webhooks.ForbiddenError {
	v := &webhooks.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewCreateInternalError builds a webhooks service create endpoint
// internal_error error.
func NewCreateInternalError(body *CreateInternalErrorResponseBody) *webhooks.InternalServerError {
	v := &webhooks.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewCreateNotFound builds a webhooks service create endpoint not_found error.
func NewCreateNotFound(body *CreateNotFoundResponseBody) *webhooks.NotFoundError {
	v := &webhooks.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewCreateUnauthorized builds a webhooks service create endpoint unauthorized
// error.
func NewCreateUnauthorized(body *CreateUnauthorizedResponseBody) *webhooks.UnauthorizedError {
	v := &webhooks.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewGetWebhookResponseOK builds a "webhooks" service "get" endpoint result
// from a HTTP "OK" response.
func NewGetWebhookResponseOK(body *GetResponseBody) *webhooks.WebhookResponse {
	v := &webhooks.WebhookResponse{
		ID:             *body.ID,
		Name:           *body.Name,
		URL:            *body.URL,
		OrganizationID: *body.OrganizationID,
		Active:         *body.Active,
		Version:        body.Version,
		RetryCount:     body.RetryCount,
		TimeoutMs:      body.TimeoutMs,
		Format:         body.Format,
		CreatedAt:      *body.CreatedAt,
		UpdatedAt:      body.UpdatedAt,
	}
	v.EventTypes = make([]string, len(body.EventTypes))
	for i, val := range body.EventTypes {
		v.EventTypes[i] = val
	}
	if body.Metadata != nil {
		v.Metadata = make(map[string]any, len(body.Metadata))
		for key, val := range body.Metadata {
			tk := key
			tv := val
			v.Metadata[tk] = tv
		}
	}

	return v
}

// NewGetBadRequest builds a webhooks service get endpoint bad_request error.
func NewGetBadRequest(body *GetBadRequestResponseBody) *webhooks.BadRequestError {
	v := &webhooks.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewGetForbidden builds a webhooks service get endpoint forbidden error.
func NewGetForbidden(body *GetForbiddenResponseBody) *webhooks.ForbiddenError {
	v := &webhooks.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewGetInternalError builds a webhooks service get endpoint internal_error
// error.
func NewGetInternalError(body *GetInternalErrorResponseBody) *webhooks.InternalServerError {
	v := &webhooks.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewGetNotFound builds a webhooks service get endpoint not_found error.
func NewGetNotFound(body *GetNotFoundResponseBody) *webhooks.NotFoundError {
	v := &webhooks.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewGetUnauthorized builds a webhooks service get endpoint unauthorized error.
func NewGetUnauthorized(body *GetUnauthorizedResponseBody) *webhooks.UnauthorizedError {
	v := &webhooks.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewUpdateWebhookResponseOK builds a "webhooks" service "update" endpoint
// result from a HTTP "OK" response.
func NewUpdateWebhookResponseOK(body *UpdateResponseBody) *webhooks.WebhookResponse {
	v := &webhooks.WebhookResponse{
		ID:             *body.ID,
		Name:           *body.Name,
		URL:            *body.URL,
		OrganizationID: *body.OrganizationID,
		Active:         *body.Active,
		Version:        body.Version,
		RetryCount:     body.RetryCount,
		TimeoutMs:      body.TimeoutMs,
		Format:         body.Format,
		CreatedAt:      *body.CreatedAt,
		UpdatedAt:      body.UpdatedAt,
	}
	v.EventTypes = make([]string, len(body.EventTypes))
	for i, val := range body.EventTypes {
		v.EventTypes[i] = val
	}
	if body.Metadata != nil {
		v.Metadata = make(map[string]any, len(body.Metadata))
		for key, val := range body.Metadata {
			tk := key
			tv := val
			v.Metadata[tk] = tv
		}
	}

	return v
}

// NewUpdateBadRequest builds a webhooks service update endpoint bad_request
// error.
func NewUpdateBadRequest(body *UpdateBadRequestResponseBody) *webhooks.BadRequestError {
	v := &webhooks.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewUpdateForbidden builds a webhooks service update endpoint forbidden error.
func NewUpdateForbidden(body *UpdateForbiddenResponseBody) *webhooks.ForbiddenError {
	v := &webhooks.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewUpdateInternalError builds a webhooks service update endpoint
// internal_error error.
func NewUpdateInternalError(body *UpdateInternalErrorResponseBody) *webhooks.InternalServerError {
	v := &webhooks.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewUpdateNotFound builds a webhooks service update endpoint not_found error.
func NewUpdateNotFound(body *UpdateNotFoundResponseBody) *webhooks.NotFoundError {
	v := &webhooks.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewUpdateUnauthorized builds a webhooks service update endpoint unauthorized
// error.
func NewUpdateUnauthorized(body *UpdateUnauthorizedResponseBody) *webhooks.UnauthorizedError {
	v := &webhooks.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewDeleteBadRequest builds a webhooks service delete endpoint bad_request
// error.
func NewDeleteBadRequest(body *DeleteBadRequestResponseBody) *webhooks.BadRequestError {
	v := &webhooks.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewDeleteForbidden builds a webhooks service delete endpoint forbidden error.
func NewDeleteForbidden(body *DeleteForbiddenResponseBody) *webhooks.ForbiddenError {
	v := &webhooks.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewDeleteInternalError builds a webhooks service delete endpoint
// internal_error error.
func NewDeleteInternalError(body *DeleteInternalErrorResponseBody) *webhooks.InternalServerError {
	v := &webhooks.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewDeleteNotFound builds a webhooks service delete endpoint not_found error.
func NewDeleteNotFound(body *DeleteNotFoundResponseBody) *webhooks.NotFoundError {
	v := &webhooks.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewDeleteUnauthorized builds a webhooks service delete endpoint unauthorized
// error.
func NewDeleteUnauthorized(body *DeleteUnauthorizedResponseBody) *webhooks.UnauthorizedError {
	v := &webhooks.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewTriggerEventWebhookEventResponseOK builds a "webhooks" service
// "trigger_event" endpoint result from a HTTP "OK" response.
func NewTriggerEventWebhookEventResponseOK(body *TriggerEventResponseBody) *webhooks.WebhookEventResponse {
	v := &webhooks.WebhookEventResponse{
		ID:           *body.ID,
		WebhookID:    *body.WebhookID,
		EventType:    *body.EventType,
		Payload:      body.Payload,
		Delivered:    *body.Delivered,
		DeliveredAt:  body.DeliveredAt,
		Attempts:     *body.Attempts,
		NextRetry:    body.NextRetry,
		StatusCode:   body.StatusCode,
		ResponseBody: body.ResponseBody,
		Error:        body.Error,
		CreatedAt:    *body.CreatedAt,
		UpdatedAt:    body.UpdatedAt,
	}
	if body.Headers != nil {
		v.Headers = make(map[string]string, len(body.Headers))
		for key, val := range body.Headers {
			tk := key
			tv := val
			v.Headers[tk] = tv
		}
	}

	return v
}

// NewTriggerEventBadRequest builds a webhooks service trigger_event endpoint
// bad_request error.
func NewTriggerEventBadRequest(body *TriggerEventBadRequestResponseBody) *webhooks.BadRequestError {
	v := &webhooks.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewTriggerEventForbidden builds a webhooks service trigger_event endpoint
// forbidden error.
func NewTriggerEventForbidden(body *TriggerEventForbiddenResponseBody) *webhooks.ForbiddenError {
	v := &webhooks.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewTriggerEventInternalError builds a webhooks service trigger_event
// endpoint internal_error error.
func NewTriggerEventInternalError(body *TriggerEventInternalErrorResponseBody) *webhooks.InternalServerError {
	v := &webhooks.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewTriggerEventNotFound builds a webhooks service trigger_event endpoint
// not_found error.
func NewTriggerEventNotFound(body *TriggerEventNotFoundResponseBody) *webhooks.NotFoundError {
	v := &webhooks.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewTriggerEventUnauthorized builds a webhooks service trigger_event endpoint
// unauthorized error.
func NewTriggerEventUnauthorized(body *TriggerEventUnauthorizedResponseBody) *webhooks.UnauthorizedError {
	v := &webhooks.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewListEventsResultOK builds a "webhooks" service "list_events" endpoint
// result from a HTTP "OK" response.
func NewListEventsResultOK(body *ListEventsResponseBody) *webhooks.ListEventsResult {
	v := &webhooks.ListEventsResult{}
	v.Data = make([]*webhooks.WebhookEventResponse, len(body.Data))
	for i, val := range body.Data {
		v.Data[i] = unmarshalWebhookEventResponseResponseBodyToWebhooksWebhookEventResponse(val)
	}
	v.Pagination = unmarshalPaginationResponseResponseBodyToDesigntypesPaginationResponse(body.Pagination)

	return v
}

// NewListEventsBadRequest builds a webhooks service list_events endpoint
// bad_request error.
func NewListEventsBadRequest(body *ListEventsBadRequestResponseBody) *webhooks.BadRequestError {
	v := &webhooks.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewListEventsForbidden builds a webhooks service list_events endpoint
// forbidden error.
func NewListEventsForbidden(body *ListEventsForbiddenResponseBody) *webhooks.ForbiddenError {
	v := &webhooks.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewListEventsInternalError builds a webhooks service list_events endpoint
// internal_error error.
func NewListEventsInternalError(body *ListEventsInternalErrorResponseBody) *webhooks.InternalServerError {
	v := &webhooks.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewListEventsNotFound builds a webhooks service list_events endpoint
// not_found error.
func NewListEventsNotFound(body *ListEventsNotFoundResponseBody) *webhooks.NotFoundError {
	v := &webhooks.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewListEventsUnauthorized builds a webhooks service list_events endpoint
// unauthorized error.
func NewListEventsUnauthorized(body *ListEventsUnauthorizedResponseBody) *webhooks.UnauthorizedError {
	v := &webhooks.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewReplayEventWebhookEventResponseOK builds a "webhooks" service
// "replay_event" endpoint result from a HTTP "OK" response.
func NewReplayEventWebhookEventResponseOK(body *ReplayEventResponseBody) *webhooks.WebhookEventResponse {
	v := &webhooks.WebhookEventResponse{
		ID:           *body.ID,
		WebhookID:    *body.WebhookID,
		EventType:    *body.EventType,
		Payload:      body.Payload,
		Delivered:    *body.Delivered,
		DeliveredAt:  body.DeliveredAt,
		Attempts:     *body.Attempts,
		NextRetry:    body.NextRetry,
		StatusCode:   body.StatusCode,
		ResponseBody: body.ResponseBody,
		Error:        body.Error,
		CreatedAt:    *body.CreatedAt,
		UpdatedAt:    body.UpdatedAt,
	}
	if body.Headers != nil {
		v.Headers = make(map[string]string, len(body.Headers))
		for key, val := range body.Headers {
			tk := key
			tv := val
			v.Headers[tk] = tv
		}
	}

	return v
}

// NewReplayEventBadRequest builds a webhooks service replay_event endpoint
// bad_request error.
func NewReplayEventBadRequest(body *ReplayEventBadRequestResponseBody) *webhooks.BadRequestError {
	v := &webhooks.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewReplayEventForbidden builds a webhooks service replay_event endpoint
// forbidden error.
func NewReplayEventForbidden(body *ReplayEventForbiddenResponseBody) *webhooks.ForbiddenError {
	v := &webhooks.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewReplayEventInternalError builds a webhooks service replay_event endpoint
// internal_error error.
func NewReplayEventInternalError(body *ReplayEventInternalErrorResponseBody) *webhooks.InternalServerError {
	v := &webhooks.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewReplayEventNotFound builds a webhooks service replay_event endpoint
// not_found error.
func NewReplayEventNotFound(body *ReplayEventNotFoundResponseBody) *webhooks.NotFoundError {
	v := &webhooks.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewReplayEventUnauthorized builds a webhooks service replay_event endpoint
// unauthorized error.
func NewReplayEventUnauthorized(body *ReplayEventUnauthorizedResponseBody) *webhooks.UnauthorizedError {
	v := &webhooks.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewReceiveResultOK builds a "webhooks" service "receive" endpoint result
// from a HTTP "OK" response.
func NewReceiveResultOK(body *ReceiveResponseBody) *webhooks.ReceiveResult {
	v := &webhooks.ReceiveResult{
		Message: *body.Message,
	}

	return v
}

// NewReceiveBadRequest builds a webhooks service receive endpoint bad_request
// error.
func NewReceiveBadRequest(body *ReceiveBadRequestResponseBody) *webhooks.BadRequestError {
	v := &webhooks.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewReceiveForbidden builds a webhooks service receive endpoint forbidden
// error.
func NewReceiveForbidden(body *ReceiveForbiddenResponseBody) *webhooks.ForbiddenError {
	v := &webhooks.ForbiddenError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewReceiveInternalError builds a webhooks service receive endpoint
// internal_error error.
func NewReceiveInternalError(body *ReceiveInternalErrorResponseBody) *webhooks.InternalServerError {
	v := &webhooks.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewReceiveNotFound builds a webhooks service receive endpoint not_found
// error.
func NewReceiveNotFound(body *ReceiveNotFoundResponseBody) *webhooks.NotFoundError {
	v := &webhooks.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// NewReceiveUnauthorized builds a webhooks service receive endpoint
// unauthorized error.
func NewReceiveUnauthorized(body *ReceiveUnauthorizedResponseBody) *webhooks.UnauthorizedError {
	v := &webhooks.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
		Details: body.Details,
		ID:      body.ID,
	}

	return v
}

// ValidateListResponseBody runs the validations defined on ListResponseBody
func ValidateListResponseBody(body *ListResponseBody) (err error) {
	if body.Data == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("data", "body"))
	}
	if body.Pagination == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("pagination", "body"))
	}
	for _, e := range body.Data {
		if e != nil {
			if err2 := ValidateWebhookResponseResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if body.Pagination != nil {
		if err2 := ValidatePaginationResponseResponseBody(body.Pagination); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateCreateResponseBody runs the validations defined on CreateResponseBody
func ValidateCreateResponseBody(body *CreateResponseBody) (err error) {
	if body.Secret == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("secret", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.URL == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("url", "body"))
	}
	if body.OrganizationID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("organization_id", "body"))
	}
	if body.Active == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("active", "body"))
	}
	if body.EventTypes == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("event_types", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	return
}

// ValidateGetResponseBody runs the validations defined on GetResponseBody
func ValidateGetResponseBody(body *GetResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.URL == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("url", "body"))
	}
	if body.OrganizationID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("organization_id", "body"))
	}
	if body.Active == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("active", "body"))
	}
	if body.EventTypes == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("event_types", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	return
}

// ValidateUpdateResponseBody runs the validations defined on UpdateResponseBody
func ValidateUpdateResponseBody(body *UpdateResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.URL == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("url", "body"))
	}
	if body.OrganizationID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("organization_id", "body"))
	}
	if body.Active == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("active", "body"))
	}
	if body.EventTypes == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("event_types", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	return
}

// ValidateTriggerEventResponseBody runs the validations defined on
// trigger_event_response_body
func ValidateTriggerEventResponseBody(body *TriggerEventResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.WebhookID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("webhook_id", "body"))
	}
	if body.EventType == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("event_type", "body"))
	}
	if body.Delivered == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("delivered", "body"))
	}
	if body.Attempts == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("attempts", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	return
}

// ValidateListEventsResponseBody runs the validations defined on
// list_events_response_body
func ValidateListEventsResponseBody(body *ListEventsResponseBody) (err error) {
	if body.Data == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("data", "body"))
	}
	if body.Pagination == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("pagination", "body"))
	}
	for _, e := range body.Data {
		if e != nil {
			if err2 := ValidateWebhookEventResponseResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if body.Pagination != nil {
		if err2 := ValidatePaginationResponseResponseBody(body.Pagination); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateReplayEventResponseBody runs the validations defined on
// replay_event_response_body
func ValidateReplayEventResponseBody(body *ReplayEventResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.WebhookID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("webhook_id", "body"))
	}
	if body.EventType == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("event_type", "body"))
	}
	if body.Delivered == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("delivered", "body"))
	}
	if body.Attempts == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("attempts", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	return
}

// ValidateReceiveResponseBody runs the validations defined on
// ReceiveResponseBody
func ValidateReceiveResponseBody(body *ReceiveResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateListBadRequestResponseBody runs the validations defined on
// list_bad_request_response_body
func ValidateListBadRequestResponseBody(body *ListBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateListForbiddenResponseBody runs the validations defined on
// list_forbidden_response_body
func ValidateListForbiddenResponseBody(body *ListForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateListInternalErrorResponseBody runs the validations defined on
// list_internal_error_response_body
func ValidateListInternalErrorResponseBody(body *ListInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateListNotFoundResponseBody runs the validations defined on
// list_not_found_response_body
func ValidateListNotFoundResponseBody(body *ListNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateListUnauthorizedResponseBody runs the validations defined on
// list_unauthorized_response_body
func ValidateListUnauthorizedResponseBody(body *ListUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateBadRequestResponseBody runs the validations defined on
// create_bad_request_response_body
func ValidateCreateBadRequestResponseBody(body *CreateBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateForbiddenResponseBody runs the validations defined on
// create_forbidden_response_body
func ValidateCreateForbiddenResponseBody(body *CreateForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateInternalErrorResponseBody runs the validations defined on
// create_internal_error_response_body
func ValidateCreateInternalErrorResponseBody(body *CreateInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateNotFoundResponseBody runs the validations defined on
// create_not_found_response_body
func ValidateCreateNotFoundResponseBody(body *CreateNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateUnauthorizedResponseBody runs the validations defined on
// create_unauthorized_response_body
func ValidateCreateUnauthorizedResponseBody(body *CreateUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetBadRequestResponseBody runs the validations defined on
// get_bad_request_response_body
func ValidateGetBadRequestResponseBody(body *GetBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetForbiddenResponseBody runs the validations defined on
// get_forbidden_response_body
func ValidateGetForbiddenResponseBody(body *GetForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetInternalErrorResponseBody runs the validations defined on
// get_internal_error_response_body
func ValidateGetInternalErrorResponseBody(body *GetInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetNotFoundResponseBody runs the validations defined on
// get_not_found_response_body
func ValidateGetNotFoundResponseBody(body *GetNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetUnauthorizedResponseBody runs the validations defined on
// get_unauthorized_response_body
func ValidateGetUnauthorizedResponseBody(body *GetUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateBadRequestResponseBody runs the validations defined on
// update_bad_request_response_body
func ValidateUpdateBadRequestResponseBody(body *UpdateBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateForbiddenResponseBody runs the validations defined on
// update_forbidden_response_body
func ValidateUpdateForbiddenResponseBody(body *UpdateForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateInternalErrorResponseBody runs the validations defined on
// update_internal_error_response_body
func ValidateUpdateInternalErrorResponseBody(body *UpdateInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateNotFoundResponseBody runs the validations defined on
// update_not_found_response_body
func ValidateUpdateNotFoundResponseBody(body *UpdateNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateUnauthorizedResponseBody runs the validations defined on
// update_unauthorized_response_body
func ValidateUpdateUnauthorizedResponseBody(body *UpdateUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteBadRequestResponseBody runs the validations defined on
// delete_bad_request_response_body
func ValidateDeleteBadRequestResponseBody(body *DeleteBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteForbiddenResponseBody runs the validations defined on
// delete_forbidden_response_body
func ValidateDeleteForbiddenResponseBody(body *DeleteForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteInternalErrorResponseBody runs the validations defined on
// delete_internal_error_response_body
func ValidateDeleteInternalErrorResponseBody(body *DeleteInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteNotFoundResponseBody runs the validations defined on
// delete_not_found_response_body
func ValidateDeleteNotFoundResponseBody(body *DeleteNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteUnauthorizedResponseBody runs the validations defined on
// delete_unauthorized_response_body
func ValidateDeleteUnauthorizedResponseBody(body *DeleteUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateTriggerEventBadRequestResponseBody runs the validations defined on
// trigger_event_bad_request_response_body
func ValidateTriggerEventBadRequestResponseBody(body *TriggerEventBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateTriggerEventForbiddenResponseBody runs the validations defined on
// trigger_event_forbidden_response_body
func ValidateTriggerEventForbiddenResponseBody(body *TriggerEventForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateTriggerEventInternalErrorResponseBody runs the validations defined
// on trigger_event_internal_error_response_body
func ValidateTriggerEventInternalErrorResponseBody(body *TriggerEventInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateTriggerEventNotFoundResponseBody runs the validations defined on
// trigger_event_not_found_response_body
func ValidateTriggerEventNotFoundResponseBody(body *TriggerEventNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateTriggerEventUnauthorizedResponseBody runs the validations defined on
// trigger_event_unauthorized_response_body
func ValidateTriggerEventUnauthorizedResponseBody(body *TriggerEventUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateListEventsBadRequestResponseBody runs the validations defined on
// list_events_bad_request_response_body
func ValidateListEventsBadRequestResponseBody(body *ListEventsBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateListEventsForbiddenResponseBody runs the validations defined on
// list_events_forbidden_response_body
func ValidateListEventsForbiddenResponseBody(body *ListEventsForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateListEventsInternalErrorResponseBody runs the validations defined on
// list_events_internal_error_response_body
func ValidateListEventsInternalErrorResponseBody(body *ListEventsInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateListEventsNotFoundResponseBody runs the validations defined on
// list_events_not_found_response_body
func ValidateListEventsNotFoundResponseBody(body *ListEventsNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateListEventsUnauthorizedResponseBody runs the validations defined on
// list_events_unauthorized_response_body
func ValidateListEventsUnauthorizedResponseBody(body *ListEventsUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateReplayEventBadRequestResponseBody runs the validations defined on
// replay_event_bad_request_response_body
func ValidateReplayEventBadRequestResponseBody(body *ReplayEventBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateReplayEventForbiddenResponseBody runs the validations defined on
// replay_event_forbidden_response_body
func ValidateReplayEventForbiddenResponseBody(body *ReplayEventForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateReplayEventInternalErrorResponseBody runs the validations defined on
// replay_event_internal_error_response_body
func ValidateReplayEventInternalErrorResponseBody(body *ReplayEventInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateReplayEventNotFoundResponseBody runs the validations defined on
// replay_event_not_found_response_body
func ValidateReplayEventNotFoundResponseBody(body *ReplayEventNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateReplayEventUnauthorizedResponseBody runs the validations defined on
// replay_event_unauthorized_response_body
func ValidateReplayEventUnauthorizedResponseBody(body *ReplayEventUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateReceiveBadRequestResponseBody runs the validations defined on
// receive_bad_request_response_body
func ValidateReceiveBadRequestResponseBody(body *ReceiveBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateReceiveForbiddenResponseBody runs the validations defined on
// receive_forbidden_response_body
func ValidateReceiveForbiddenResponseBody(body *ReceiveForbiddenResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateReceiveInternalErrorResponseBody runs the validations defined on
// receive_internal_error_response_body
func ValidateReceiveInternalErrorResponseBody(body *ReceiveInternalErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateReceiveNotFoundResponseBody runs the validations defined on
// receive_not_found_response_body
func ValidateReceiveNotFoundResponseBody(body *ReceiveNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateReceiveUnauthorizedResponseBody runs the validations defined on
// receive_unauthorized_response_body
func ValidateReceiveUnauthorizedResponseBody(body *ReceiveUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateWebhookResponseResponseBody runs the validations defined on
// WebhookResponseResponseBody
func ValidateWebhookResponseResponseBody(body *WebhookResponseResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.URL == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("url", "body"))
	}
	if body.OrganizationID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("organization_id", "body"))
	}
	if body.Active == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("active", "body"))
	}
	if body.EventTypes == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("event_types", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	return
}

// ValidatePaginationResponseResponseBody runs the validations defined on
// PaginationResponseResponseBody
func ValidatePaginationResponseResponseBody(body *PaginationResponseResponseBody) (err error) {
	if body.Total == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total", "body"))
	}
	if body.Offset == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("offset", "body"))
	}
	if body.Limit == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("limit", "body"))
	}
	return
}

// ValidateCreateWebhookRequestRequestBody runs the validations defined on
// CreateWebhookRequestRequestBody
func ValidateCreateWebhookRequestRequestBody(body *CreateWebhookRequestRequestBody) (err error) {
	if body.EventTypes == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("event_types", "body"))
	}
	err = goa.MergeErrors(err, goa.ValidateFormat("body.url", body.URL, goa.FormatURI))
	if body.RetryCount < 0 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("body.retry_count", body.RetryCount, 0, true))
	}
	if body.RetryCount > 10 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("body.retry_count", body.RetryCount, 10, false))
	}
	if body.TimeoutMs < 1000 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("body.timeout_ms", body.TimeoutMs, 1000, true))
	}
	if body.TimeoutMs > 30000 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("body.timeout_ms", body.TimeoutMs, 30000, false))
	}
	if !(body.Format == "json" || body.Format == "form") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.format", body.Format, []any{"json", "form"}))
	}
	return
}

// ValidateUpdateWebhookRequestRequestBody runs the validations defined on
// UpdateWebhookRequestRequestBody
func ValidateUpdateWebhookRequestRequestBody(body *UpdateWebhookRequestRequestBody) (err error) {
	if body.URL != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.url", *body.URL, goa.FormatURI))
	}
	if body.RetryCount != nil {
		if *body.RetryCount < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.retry_count", *body.RetryCount, 0, true))
		}
	}
	if body.RetryCount != nil {
		if *body.RetryCount > 10 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.retry_count", *body.RetryCount, 10, false))
		}
	}
	if body.TimeoutMs != nil {
		if *body.TimeoutMs < 1000 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.timeout_ms", *body.TimeoutMs, 1000, true))
		}
	}
	if body.TimeoutMs != nil {
		if *body.TimeoutMs > 30000 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.timeout_ms", *body.TimeoutMs, 30000, false))
		}
	}
	if body.Format != nil {
		if !(*body.Format == "json" || *body.Format == "form") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.format", *body.Format, []any{"json", "form"}))
		}
	}
	return
}

// ValidateTriggerEventRequestRequestBody runs the validations defined on
// TriggerEventRequestRequestBody
func ValidateTriggerEventRequestRequestBody(body *TriggerEventRequestRequestBody) (err error) {
	if body.Payload == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("payload", "body"))
	}
	return
}

// ValidateWebhookEventResponseResponseBody runs the validations defined on
// WebhookEventResponseResponseBody
func ValidateWebhookEventResponseResponseBody(body *WebhookEventResponseResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.WebhookID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("webhook_id", "body"))
	}
	if body.EventType == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("event_type", "body"))
	}
	if body.Delivered == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("delivered", "body"))
	}
	if body.Attempts == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("attempts", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	return
}
