// Code generated by goa v3.20.0, DO NOT EDIT.
//
// webhooks client HTTP transport
//
// Command:
// $ goa gen github.com/juicycleff/frank/design -o .

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the webhooks service endpoint HTTP clients.
type Client struct {
	// List Doer is the HTTP client used to make requests to the list endpoint.
	ListDoer goahttp.Doer

	// Create Doer is the HTTP client used to make requests to the create endpoint.
	CreateDoer goahttp.Doer

	// Get Doer is the HTTP client used to make requests to the get endpoint.
	GetDoer goahttp.Doer

	// Update Doer is the HTTP client used to make requests to the update endpoint.
	UpdateDoer goahttp.Doer

	// Delete Doer is the HTTP client used to make requests to the delete endpoint.
	DeleteDoer goahttp.Doer

	// TriggerEvent Doer is the HTTP client used to make requests to the
	// trigger_event endpoint.
	TriggerEventDoer goahttp.Doer

	// ListEvents Doer is the HTTP client used to make requests to the list_events
	// endpoint.
	ListEventsDoer goahttp.Doer

	// ReplayEvent Doer is the HTTP client used to make requests to the
	// replay_event endpoint.
	ReplayEventDoer goahttp.Doer

	// Receive Doer is the HTTP client used to make requests to the receive
	// endpoint.
	ReceiveDoer goahttp.Doer

	// CORS Doer is the HTTP client used to make requests to the  endpoint.
	CORSDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the webhooks service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		ListDoer:            doer,
		CreateDoer:          doer,
		GetDoer:             doer,
		UpdateDoer:          doer,
		DeleteDoer:          doer,
		TriggerEventDoer:    doer,
		ListEventsDoer:      doer,
		ReplayEventDoer:     doer,
		ReceiveDoer:         doer,
		CORSDoer:            doer,
		RestoreResponseBody: restoreBody,
		scheme:              scheme,
		host:                host,
		decoder:             dec,
		encoder:             enc,
	}
}

// List returns an endpoint that makes HTTP requests to the webhooks service
// list server.
func (c *Client) List() goa.Endpoint {
	var (
		encodeRequest  = EncodeListRequest(c.encoder)
		decodeResponse = DecodeListResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildListRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ListDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("webhooks", "list", err)
		}
		return decodeResponse(resp)
	}
}

// Create returns an endpoint that makes HTTP requests to the webhooks service
// create server.
func (c *Client) Create() goa.Endpoint {
	var (
		encodeRequest  = EncodeCreateRequest(c.encoder)
		decodeResponse = DecodeCreateResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildCreateRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CreateDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("webhooks", "create", err)
		}
		return decodeResponse(resp)
	}
}

// Get returns an endpoint that makes HTTP requests to the webhooks service get
// server.
func (c *Client) Get() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetRequest(c.encoder)
		decodeResponse = DecodeGetResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGetRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("webhooks", "get", err)
		}
		return decodeResponse(resp)
	}
}

// Update returns an endpoint that makes HTTP requests to the webhooks service
// update server.
func (c *Client) Update() goa.Endpoint {
	var (
		encodeRequest  = EncodeUpdateRequest(c.encoder)
		decodeResponse = DecodeUpdateResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildUpdateRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UpdateDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("webhooks", "update", err)
		}
		return decodeResponse(resp)
	}
}

// Delete returns an endpoint that makes HTTP requests to the webhooks service
// delete server.
func (c *Client) Delete() goa.Endpoint {
	var (
		encodeRequest  = EncodeDeleteRequest(c.encoder)
		decodeResponse = DecodeDeleteResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildDeleteRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DeleteDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("webhooks", "delete", err)
		}
		return decodeResponse(resp)
	}
}

// TriggerEvent returns an endpoint that makes HTTP requests to the webhooks
// service trigger_event server.
func (c *Client) TriggerEvent() goa.Endpoint {
	var (
		encodeRequest  = EncodeTriggerEventRequest(c.encoder)
		decodeResponse = DecodeTriggerEventResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildTriggerEventRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.TriggerEventDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("webhooks", "trigger_event", err)
		}
		return decodeResponse(resp)
	}
}

// ListEvents returns an endpoint that makes HTTP requests to the webhooks
// service list_events server.
func (c *Client) ListEvents() goa.Endpoint {
	var (
		encodeRequest  = EncodeListEventsRequest(c.encoder)
		decodeResponse = DecodeListEventsResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildListEventsRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ListEventsDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("webhooks", "list_events", err)
		}
		return decodeResponse(resp)
	}
}

// ReplayEvent returns an endpoint that makes HTTP requests to the webhooks
// service replay_event server.
func (c *Client) ReplayEvent() goa.Endpoint {
	var (
		encodeRequest  = EncodeReplayEventRequest(c.encoder)
		decodeResponse = DecodeReplayEventResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildReplayEventRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ReplayEventDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("webhooks", "replay_event", err)
		}
		return decodeResponse(resp)
	}
}

// Receive returns an endpoint that makes HTTP requests to the webhooks service
// receive server.
func (c *Client) Receive() goa.Endpoint {
	var (
		decodeResponse = DecodeReceiveResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildReceiveRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ReceiveDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("webhooks", "receive", err)
		}
		return decodeResponse(resp)
	}
}
