// Code generated by goa v3.20.0, DO NOT EDIT.
//
// webhooks HTTP server types
//
// Command:
// $ goa gen github.com/juicycleff/frank/design -o .

package server

import (
	webhooks "github.com/juicycleff/frank/gen/webhooks"
	goa "goa.design/goa/v3/pkg"
)

// CreateRequestBody is the type of the "webhooks" service "create" endpoint
// HTTP request body.
type CreateRequestBody struct {
	// Organization ID
	OrganizationID *string                          `form:"organization_id,omitempty" json:"organization_id,omitempty" xml:"organization_id,omitempty"`
	Webhook        *CreateWebhookRequestRequestBody `form:"webhook,omitempty" json:"webhook,omitempty" xml:"webhook,omitempty"`
}

// UpdateRequestBody is the type of the "webhooks" service "update" endpoint
// HTTP request body.
type UpdateRequestBody struct {
	Webhook *UpdateWebhookRequestRequestBody `form:"webhook,omitempty" json:"webhook,omitempty" xml:"webhook,omitempty"`
}

// TriggerEventRequestBody is the type of the "webhooks" service
// "trigger_event" endpoint HTTP request body.
type TriggerEventRequestBody struct {
	// Organization ID
	OrganizationID *string                         `form:"organization_id,omitempty" json:"organization_id,omitempty" xml:"organization_id,omitempty"`
	Event          *TriggerEventRequestRequestBody `form:"event,omitempty" json:"event,omitempty" xml:"event,omitempty"`
}

// ListResponseBody is the type of the "webhooks" service "list" endpoint HTTP
// response body.
type ListResponseBody struct {
	Data       []*WebhookResponseResponseBody  `form:"data" json:"data" xml:"data"`
	Pagination *PaginationResponseResponseBody `form:"pagination" json:"pagination" xml:"pagination"`
}

// CreateResponseBody is the type of the "webhooks" service "create" endpoint
// HTTP response body.
type CreateResponseBody struct {
	// Webhook secret for signature verification
	Secret string `form:"secret" json:"secret" xml:"secret"`
	// Webhook ID
	ID string `form:"id" json:"id" xml:"id"`
	// Webhook name
	Name string `form:"name" json:"name" xml:"name"`
	// Webhook URL
	URL string `form:"url" json:"url" xml:"url"`
	// Organization ID
	OrganizationID string `form:"organization_id" json:"organization_id" xml:"organization_id"`
	// Whether webhook is active
	Active bool `form:"active" json:"active" xml:"active"`
	// Event types webhook subscribes to
	EventTypes []string `form:"event_types" json:"event_types" xml:"event_types"`
	// Webhook version
	Version *string `form:"version,omitempty" json:"version,omitempty" xml:"version,omitempty"`
	// Number of retries on failure
	RetryCount *int `form:"retry_count,omitempty" json:"retry_count,omitempty" xml:"retry_count,omitempty"`
	// Timeout in milliseconds
	TimeoutMs *int `form:"timeout_ms,omitempty" json:"timeout_ms,omitempty" xml:"timeout_ms,omitempty"`
	// Payload format (json/form)
	Format *string `form:"format,omitempty" json:"format,omitempty" xml:"format,omitempty"`
	// Webhook metadata
	Metadata map[string]any `form:"metadata,omitempty" json:"metadata,omitempty" xml:"metadata,omitempty"`
	// Creation timestamp
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// Last update timestamp
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// GetResponseBody is the type of the "webhooks" service "get" endpoint HTTP
// response body.
type GetResponseBody struct {
	// Webhook ID
	ID string `form:"id" json:"id" xml:"id"`
	// Webhook name
	Name string `form:"name" json:"name" xml:"name"`
	// Webhook URL
	URL string `form:"url" json:"url" xml:"url"`
	// Organization ID
	OrganizationID string `form:"organization_id" json:"organization_id" xml:"organization_id"`
	// Whether webhook is active
	Active bool `form:"active" json:"active" xml:"active"`
	// Event types webhook subscribes to
	EventTypes []string `form:"event_types" json:"event_types" xml:"event_types"`
	// Webhook version
	Version *string `form:"version,omitempty" json:"version,omitempty" xml:"version,omitempty"`
	// Number of retries on failure
	RetryCount *int `form:"retry_count,omitempty" json:"retry_count,omitempty" xml:"retry_count,omitempty"`
	// Timeout in milliseconds
	TimeoutMs *int `form:"timeout_ms,omitempty" json:"timeout_ms,omitempty" xml:"timeout_ms,omitempty"`
	// Payload format (json/form)
	Format *string `form:"format,omitempty" json:"format,omitempty" xml:"format,omitempty"`
	// Webhook metadata
	Metadata map[string]any `form:"metadata,omitempty" json:"metadata,omitempty" xml:"metadata,omitempty"`
	// Creation timestamp
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// Last update timestamp
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// UpdateResponseBody is the type of the "webhooks" service "update" endpoint
// HTTP response body.
type UpdateResponseBody struct {
	// Webhook ID
	ID string `form:"id" json:"id" xml:"id"`
	// Webhook name
	Name string `form:"name" json:"name" xml:"name"`
	// Webhook URL
	URL string `form:"url" json:"url" xml:"url"`
	// Organization ID
	OrganizationID string `form:"organization_id" json:"organization_id" xml:"organization_id"`
	// Whether webhook is active
	Active bool `form:"active" json:"active" xml:"active"`
	// Event types webhook subscribes to
	EventTypes []string `form:"event_types" json:"event_types" xml:"event_types"`
	// Webhook version
	Version *string `form:"version,omitempty" json:"version,omitempty" xml:"version,omitempty"`
	// Number of retries on failure
	RetryCount *int `form:"retry_count,omitempty" json:"retry_count,omitempty" xml:"retry_count,omitempty"`
	// Timeout in milliseconds
	TimeoutMs *int `form:"timeout_ms,omitempty" json:"timeout_ms,omitempty" xml:"timeout_ms,omitempty"`
	// Payload format (json/form)
	Format *string `form:"format,omitempty" json:"format,omitempty" xml:"format,omitempty"`
	// Webhook metadata
	Metadata map[string]any `form:"metadata,omitempty" json:"metadata,omitempty" xml:"metadata,omitempty"`
	// Creation timestamp
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// Last update timestamp
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// TriggerEventResponseBody is the type of the "webhooks" service
// "trigger_event" endpoint HTTP response body.
type TriggerEventResponseBody struct {
	// Event ID
	ID string `form:"id" json:"id" xml:"id"`
	// Webhook ID
	WebhookID string `form:"webhook_id" json:"webhook_id" xml:"webhook_id"`
	// Event type
	EventType string `form:"event_type" json:"event_type" xml:"event_type"`
	// Event payload
	Payload any `form:"payload,omitempty" json:"payload,omitempty" xml:"payload,omitempty"`
	// Event headers
	Headers map[string]string `form:"headers,omitempty" json:"headers,omitempty" xml:"headers,omitempty"`
	// Whether event was delivered
	Delivered bool `form:"delivered" json:"delivered" xml:"delivered"`
	// Delivery timestamp
	DeliveredAt *string `form:"delivered_at,omitempty" json:"delivered_at,omitempty" xml:"delivered_at,omitempty"`
	// Number of delivery attempts
	Attempts int `form:"attempts" json:"attempts" xml:"attempts"`
	// Next retry timestamp
	NextRetry *string `form:"next_retry,omitempty" json:"next_retry,omitempty" xml:"next_retry,omitempty"`
	// HTTP status code from last attempt
	StatusCode *int `form:"status_code,omitempty" json:"status_code,omitempty" xml:"status_code,omitempty"`
	// Response from last attempt
	ResponseBody *string `form:"response_body,omitempty" json:"response_body,omitempty" xml:"response_body,omitempty"`
	// Error from last attempt
	Error *string `form:"error,omitempty" json:"error,omitempty" xml:"error,omitempty"`
	// Creation timestamp
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// Last update timestamp
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// ListEventsResponseBody is the type of the "webhooks" service "list_events"
// endpoint HTTP response body.
type ListEventsResponseBody struct {
	Data       []*WebhookEventResponseResponseBody `form:"data" json:"data" xml:"data"`
	Pagination *PaginationResponseResponseBody     `form:"pagination" json:"pagination" xml:"pagination"`
}

// ReplayEventResponseBody is the type of the "webhooks" service "replay_event"
// endpoint HTTP response body.
type ReplayEventResponseBody struct {
	// Event ID
	ID string `form:"id" json:"id" xml:"id"`
	// Webhook ID
	WebhookID string `form:"webhook_id" json:"webhook_id" xml:"webhook_id"`
	// Event type
	EventType string `form:"event_type" json:"event_type" xml:"event_type"`
	// Event payload
	Payload any `form:"payload,omitempty" json:"payload,omitempty" xml:"payload,omitempty"`
	// Event headers
	Headers map[string]string `form:"headers,omitempty" json:"headers,omitempty" xml:"headers,omitempty"`
	// Whether event was delivered
	Delivered bool `form:"delivered" json:"delivered" xml:"delivered"`
	// Delivery timestamp
	DeliveredAt *string `form:"delivered_at,omitempty" json:"delivered_at,omitempty" xml:"delivered_at,omitempty"`
	// Number of delivery attempts
	Attempts int `form:"attempts" json:"attempts" xml:"attempts"`
	// Next retry timestamp
	NextRetry *string `form:"next_retry,omitempty" json:"next_retry,omitempty" xml:"next_retry,omitempty"`
	// HTTP status code from last attempt
	StatusCode *int `form:"status_code,omitempty" json:"status_code,omitempty" xml:"status_code,omitempty"`
	// Response from last attempt
	ResponseBody *string `form:"response_body,omitempty" json:"response_body,omitempty" xml:"response_body,omitempty"`
	// Error from last attempt
	Error *string `form:"error,omitempty" json:"error,omitempty" xml:"error,omitempty"`
	// Creation timestamp
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// Last update timestamp
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// ReceiveResponseBody is the type of the "webhooks" service "receive" endpoint
// HTTP response body.
type ReceiveResponseBody struct {
	// Success message
	Message string `form:"message" json:"message" xml:"message"`
}

// ListBadRequestResponseBody is the type of the "webhooks" service "list"
// endpoint HTTP response body for the "bad_request" error.
type ListBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListForbiddenResponseBody is the type of the "webhooks" service "list"
// endpoint HTTP response body for the "forbidden" error.
type ListForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListInternalErrorResponseBody is the type of the "webhooks" service "list"
// endpoint HTTP response body for the "internal_error" error.
type ListInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListNotFoundResponseBody is the type of the "webhooks" service "list"
// endpoint HTTP response body for the "not_found" error.
type ListNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListUnauthorizedResponseBody is the type of the "webhooks" service "list"
// endpoint HTTP response body for the "unauthorized" error.
type ListUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreateBadRequestResponseBody is the type of the "webhooks" service "create"
// endpoint HTTP response body for the "bad_request" error.
type CreateBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreateForbiddenResponseBody is the type of the "webhooks" service "create"
// endpoint HTTP response body for the "forbidden" error.
type CreateForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreateInternalErrorResponseBody is the type of the "webhooks" service
// "create" endpoint HTTP response body for the "internal_error" error.
type CreateInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreateNotFoundResponseBody is the type of the "webhooks" service "create"
// endpoint HTTP response body for the "not_found" error.
type CreateNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreateUnauthorizedResponseBody is the type of the "webhooks" service
// "create" endpoint HTTP response body for the "unauthorized" error.
type CreateUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetBadRequestResponseBody is the type of the "webhooks" service "get"
// endpoint HTTP response body for the "bad_request" error.
type GetBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetForbiddenResponseBody is the type of the "webhooks" service "get"
// endpoint HTTP response body for the "forbidden" error.
type GetForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetInternalErrorResponseBody is the type of the "webhooks" service "get"
// endpoint HTTP response body for the "internal_error" error.
type GetInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetNotFoundResponseBody is the type of the "webhooks" service "get" endpoint
// HTTP response body for the "not_found" error.
type GetNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetUnauthorizedResponseBody is the type of the "webhooks" service "get"
// endpoint HTTP response body for the "unauthorized" error.
type GetUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateBadRequestResponseBody is the type of the "webhooks" service "update"
// endpoint HTTP response body for the "bad_request" error.
type UpdateBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateForbiddenResponseBody is the type of the "webhooks" service "update"
// endpoint HTTP response body for the "forbidden" error.
type UpdateForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateInternalErrorResponseBody is the type of the "webhooks" service
// "update" endpoint HTTP response body for the "internal_error" error.
type UpdateInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateNotFoundResponseBody is the type of the "webhooks" service "update"
// endpoint HTTP response body for the "not_found" error.
type UpdateNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateUnauthorizedResponseBody is the type of the "webhooks" service
// "update" endpoint HTTP response body for the "unauthorized" error.
type UpdateUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteBadRequestResponseBody is the type of the "webhooks" service "delete"
// endpoint HTTP response body for the "bad_request" error.
type DeleteBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteForbiddenResponseBody is the type of the "webhooks" service "delete"
// endpoint HTTP response body for the "forbidden" error.
type DeleteForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteInternalErrorResponseBody is the type of the "webhooks" service
// "delete" endpoint HTTP response body for the "internal_error" error.
type DeleteInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteNotFoundResponseBody is the type of the "webhooks" service "delete"
// endpoint HTTP response body for the "not_found" error.
type DeleteNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteUnauthorizedResponseBody is the type of the "webhooks" service
// "delete" endpoint HTTP response body for the "unauthorized" error.
type DeleteUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// TriggerEventBadRequestResponseBody is the type of the "webhooks" service
// "trigger_event" endpoint HTTP response body for the "bad_request" error.
type TriggerEventBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// TriggerEventForbiddenResponseBody is the type of the "webhooks" service
// "trigger_event" endpoint HTTP response body for the "forbidden" error.
type TriggerEventForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// TriggerEventInternalErrorResponseBody is the type of the "webhooks" service
// "trigger_event" endpoint HTTP response body for the "internal_error" error.
type TriggerEventInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// TriggerEventNotFoundResponseBody is the type of the "webhooks" service
// "trigger_event" endpoint HTTP response body for the "not_found" error.
type TriggerEventNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// TriggerEventUnauthorizedResponseBody is the type of the "webhooks" service
// "trigger_event" endpoint HTTP response body for the "unauthorized" error.
type TriggerEventUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListEventsBadRequestResponseBody is the type of the "webhooks" service
// "list_events" endpoint HTTP response body for the "bad_request" error.
type ListEventsBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListEventsForbiddenResponseBody is the type of the "webhooks" service
// "list_events" endpoint HTTP response body for the "forbidden" error.
type ListEventsForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListEventsInternalErrorResponseBody is the type of the "webhooks" service
// "list_events" endpoint HTTP response body for the "internal_error" error.
type ListEventsInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListEventsNotFoundResponseBody is the type of the "webhooks" service
// "list_events" endpoint HTTP response body for the "not_found" error.
type ListEventsNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListEventsUnauthorizedResponseBody is the type of the "webhooks" service
// "list_events" endpoint HTTP response body for the "unauthorized" error.
type ListEventsUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ReplayEventBadRequestResponseBody is the type of the "webhooks" service
// "replay_event" endpoint HTTP response body for the "bad_request" error.
type ReplayEventBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ReplayEventForbiddenResponseBody is the type of the "webhooks" service
// "replay_event" endpoint HTTP response body for the "forbidden" error.
type ReplayEventForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ReplayEventInternalErrorResponseBody is the type of the "webhooks" service
// "replay_event" endpoint HTTP response body for the "internal_error" error.
type ReplayEventInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ReplayEventNotFoundResponseBody is the type of the "webhooks" service
// "replay_event" endpoint HTTP response body for the "not_found" error.
type ReplayEventNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ReplayEventUnauthorizedResponseBody is the type of the "webhooks" service
// "replay_event" endpoint HTTP response body for the "unauthorized" error.
type ReplayEventUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ReceiveBadRequestResponseBody is the type of the "webhooks" service
// "receive" endpoint HTTP response body for the "bad_request" error.
type ReceiveBadRequestResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ReceiveForbiddenResponseBody is the type of the "webhooks" service "receive"
// endpoint HTTP response body for the "forbidden" error.
type ReceiveForbiddenResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ReceiveInternalErrorResponseBody is the type of the "webhooks" service
// "receive" endpoint HTTP response body for the "internal_error" error.
type ReceiveInternalErrorResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ReceiveNotFoundResponseBody is the type of the "webhooks" service "receive"
// endpoint HTTP response body for the "not_found" error.
type ReceiveNotFoundResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ReceiveUnauthorizedResponseBody is the type of the "webhooks" service
// "receive" endpoint HTTP response body for the "unauthorized" error.
type ReceiveUnauthorizedResponseBody struct {
	// Error code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
	// Additional error details
	Details any `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Unique error ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// WebhookResponseResponseBody is used to define fields on response body types.
type WebhookResponseResponseBody struct {
	// Webhook ID
	ID string `form:"id" json:"id" xml:"id"`
	// Webhook name
	Name string `form:"name" json:"name" xml:"name"`
	// Webhook URL
	URL string `form:"url" json:"url" xml:"url"`
	// Organization ID
	OrganizationID string `form:"organization_id" json:"organization_id" xml:"organization_id"`
	// Whether webhook is active
	Active bool `form:"active" json:"active" xml:"active"`
	// Event types webhook subscribes to
	EventTypes []string `form:"event_types" json:"event_types" xml:"event_types"`
	// Webhook version
	Version *string `form:"version,omitempty" json:"version,omitempty" xml:"version,omitempty"`
	// Number of retries on failure
	RetryCount *int `form:"retry_count,omitempty" json:"retry_count,omitempty" xml:"retry_count,omitempty"`
	// Timeout in milliseconds
	TimeoutMs *int `form:"timeout_ms,omitempty" json:"timeout_ms,omitempty" xml:"timeout_ms,omitempty"`
	// Payload format (json/form)
	Format *string `form:"format,omitempty" json:"format,omitempty" xml:"format,omitempty"`
	// Webhook metadata
	Metadata map[string]any `form:"metadata,omitempty" json:"metadata,omitempty" xml:"metadata,omitempty"`
	// Creation timestamp
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// Last update timestamp
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// PaginationResponseResponseBody is used to define fields on response body
// types.
type PaginationResponseResponseBody struct {
	// Total number of items
	Total int `form:"total" json:"total" xml:"total"`
	// Current offset
	Offset int `form:"offset" json:"offset" xml:"offset"`
	// Current limit
	Limit int `form:"limit" json:"limit" xml:"limit"`
}

// WebhookEventResponseResponseBody is used to define fields on response body
// types.
type WebhookEventResponseResponseBody struct {
	// Event ID
	ID string `form:"id" json:"id" xml:"id"`
	// Webhook ID
	WebhookID string `form:"webhook_id" json:"webhook_id" xml:"webhook_id"`
	// Event type
	EventType string `form:"event_type" json:"event_type" xml:"event_type"`
	// Event payload
	Payload any `form:"payload,omitempty" json:"payload,omitempty" xml:"payload,omitempty"`
	// Event headers
	Headers map[string]string `form:"headers,omitempty" json:"headers,omitempty" xml:"headers,omitempty"`
	// Whether event was delivered
	Delivered bool `form:"delivered" json:"delivered" xml:"delivered"`
	// Delivery timestamp
	DeliveredAt *string `form:"delivered_at,omitempty" json:"delivered_at,omitempty" xml:"delivered_at,omitempty"`
	// Number of delivery attempts
	Attempts int `form:"attempts" json:"attempts" xml:"attempts"`
	// Next retry timestamp
	NextRetry *string `form:"next_retry,omitempty" json:"next_retry,omitempty" xml:"next_retry,omitempty"`
	// HTTP status code from last attempt
	StatusCode *int `form:"status_code,omitempty" json:"status_code,omitempty" xml:"status_code,omitempty"`
	// Response from last attempt
	ResponseBody *string `form:"response_body,omitempty" json:"response_body,omitempty" xml:"response_body,omitempty"`
	// Error from last attempt
	Error *string `form:"error,omitempty" json:"error,omitempty" xml:"error,omitempty"`
	// Creation timestamp
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// Last update timestamp
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// CreateWebhookRequestRequestBody is used to define fields on request body
// types.
type CreateWebhookRequestRequestBody struct {
	// Webhook name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Webhook URL
	URL *string `form:"url,omitempty" json:"url,omitempty" xml:"url,omitempty"`
	// Event types to subscribe to
	EventTypes []string `form:"event_types,omitempty" json:"event_types,omitempty" xml:"event_types,omitempty"`
	// Number of retries on failure
	RetryCount *int `form:"retry_count,omitempty" json:"retry_count,omitempty" xml:"retry_count,omitempty"`
	// Timeout in milliseconds
	TimeoutMs *int `form:"timeout_ms,omitempty" json:"timeout_ms,omitempty" xml:"timeout_ms,omitempty"`
	// Payload format
	Format *string `form:"format,omitempty" json:"format,omitempty" xml:"format,omitempty"`
	// Webhook metadata
	Metadata map[string]any `form:"metadata,omitempty" json:"metadata,omitempty" xml:"metadata,omitempty"`
}

// UpdateWebhookRequestRequestBody is used to define fields on request body
// types.
type UpdateWebhookRequestRequestBody struct {
	// Webhook name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Webhook URL
	URL *string `form:"url,omitempty" json:"url,omitempty" xml:"url,omitempty"`
	// Whether webhook is active
	Active *bool `form:"active,omitempty" json:"active,omitempty" xml:"active,omitempty"`
	// Event types to subscribe to
	EventTypes []string `form:"event_types,omitempty" json:"event_types,omitempty" xml:"event_types,omitempty"`
	// Number of retries on failure
	RetryCount *int `form:"retry_count,omitempty" json:"retry_count,omitempty" xml:"retry_count,omitempty"`
	// Timeout in milliseconds
	TimeoutMs *int `form:"timeout_ms,omitempty" json:"timeout_ms,omitempty" xml:"timeout_ms,omitempty"`
	// Payload format
	Format *string `form:"format,omitempty" json:"format,omitempty" xml:"format,omitempty"`
	// Webhook metadata
	Metadata map[string]any `form:"metadata,omitempty" json:"metadata,omitempty" xml:"metadata,omitempty"`
}

// TriggerEventRequestRequestBody is used to define fields on request body
// types.
type TriggerEventRequestRequestBody struct {
	// Event type
	EventType *string `form:"event_type,omitempty" json:"event_type,omitempty" xml:"event_type,omitempty"`
	// Event payload
	Payload any `form:"payload,omitempty" json:"payload,omitempty" xml:"payload,omitempty"`
	// Custom headers
	Headers map[string]string `form:"headers,omitempty" json:"headers,omitempty" xml:"headers,omitempty"`
}

// NewListResponseBody builds the HTTP response body from the result of the
// "list" endpoint of the "webhooks" service.
func NewListResponseBody(res *webhooks.ListResult) *ListResponseBody {
	body := &ListResponseBody{}
	if res.Data != nil {
		body.Data = make([]*WebhookResponseResponseBody, len(res.Data))
		for i, val := range res.Data {
			body.Data[i] = marshalWebhooksWebhookResponseToWebhookResponseResponseBody(val)
		}
	} else {
		body.Data = []*WebhookResponseResponseBody{}
	}
	if res.Pagination != nil {
		body.Pagination = marshalDesigntypesPaginationResponseToPaginationResponseResponseBody(res.Pagination)
	}
	return body
}

// NewCreateResponseBody builds the HTTP response body from the result of the
// "create" endpoint of the "webhooks" service.
func NewCreateResponseBody(res *webhooks.WebhookSecretResponse) *CreateResponseBody {
	body := &CreateResponseBody{
		Secret:         res.Secret,
		ID:             res.ID,
		Name:           res.Name,
		URL:            res.URL,
		OrganizationID: res.OrganizationID,
		Active:         res.Active,
		Version:        res.Version,
		RetryCount:     res.RetryCount,
		TimeoutMs:      res.TimeoutMs,
		Format:         res.Format,
		CreatedAt:      res.CreatedAt,
		UpdatedAt:      res.UpdatedAt,
	}
	if res.EventTypes != nil {
		body.EventTypes = make([]string, len(res.EventTypes))
		for i, val := range res.EventTypes {
			body.EventTypes[i] = val
		}
	} else {
		body.EventTypes = []string{}
	}
	if res.Metadata != nil {
		body.Metadata = make(map[string]any, len(res.Metadata))
		for key, val := range res.Metadata {
			tk := key
			tv := val
			body.Metadata[tk] = tv
		}
	}
	return body
}

// NewGetResponseBody builds the HTTP response body from the result of the
// "get" endpoint of the "webhooks" service.
func NewGetResponseBody(res *webhooks.WebhookResponse) *GetResponseBody {
	body := &GetResponseBody{
		ID:             res.ID,
		Name:           res.Name,
		URL:            res.URL,
		OrganizationID: res.OrganizationID,
		Active:         res.Active,
		Version:        res.Version,
		RetryCount:     res.RetryCount,
		TimeoutMs:      res.TimeoutMs,
		Format:         res.Format,
		CreatedAt:      res.CreatedAt,
		UpdatedAt:      res.UpdatedAt,
	}
	if res.EventTypes != nil {
		body.EventTypes = make([]string, len(res.EventTypes))
		for i, val := range res.EventTypes {
			body.EventTypes[i] = val
		}
	} else {
		body.EventTypes = []string{}
	}
	if res.Metadata != nil {
		body.Metadata = make(map[string]any, len(res.Metadata))
		for key, val := range res.Metadata {
			tk := key
			tv := val
			body.Metadata[tk] = tv
		}
	}
	return body
}

// NewUpdateResponseBody builds the HTTP response body from the result of the
// "update" endpoint of the "webhooks" service.
func NewUpdateResponseBody(res *webhooks.WebhookResponse) *UpdateResponseBody {
	body := &UpdateResponseBody{
		ID:             res.ID,
		Name:           res.Name,
		URL:            res.URL,
		OrganizationID: res.OrganizationID,
		Active:         res.Active,
		Version:        res.Version,
		RetryCount:     res.RetryCount,
		TimeoutMs:      res.TimeoutMs,
		Format:         res.Format,
		CreatedAt:      res.CreatedAt,
		UpdatedAt:      res.UpdatedAt,
	}
	if res.EventTypes != nil {
		body.EventTypes = make([]string, len(res.EventTypes))
		for i, val := range res.EventTypes {
			body.EventTypes[i] = val
		}
	} else {
		body.EventTypes = []string{}
	}
	if res.Metadata != nil {
		body.Metadata = make(map[string]any, len(res.Metadata))
		for key, val := range res.Metadata {
			tk := key
			tv := val
			body.Metadata[tk] = tv
		}
	}
	return body
}

// NewTriggerEventResponseBody builds the HTTP response body from the result of
// the "trigger_event" endpoint of the "webhooks" service.
func NewTriggerEventResponseBody(res *webhooks.WebhookEventResponse) *TriggerEventResponseBody {
	body := &TriggerEventResponseBody{
		ID:           res.ID,
		WebhookID:    res.WebhookID,
		EventType:    res.EventType,
		Payload:      res.Payload,
		Delivered:    res.Delivered,
		DeliveredAt:  res.DeliveredAt,
		Attempts:     res.Attempts,
		NextRetry:    res.NextRetry,
		StatusCode:   res.StatusCode,
		ResponseBody: res.ResponseBody,
		Error:        res.Error,
		CreatedAt:    res.CreatedAt,
		UpdatedAt:    res.UpdatedAt,
	}
	if res.Headers != nil {
		body.Headers = make(map[string]string, len(res.Headers))
		for key, val := range res.Headers {
			tk := key
			tv := val
			body.Headers[tk] = tv
		}
	}
	return body
}

// NewListEventsResponseBody builds the HTTP response body from the result of
// the "list_events" endpoint of the "webhooks" service.
func NewListEventsResponseBody(res *webhooks.ListEventsResult) *ListEventsResponseBody {
	body := &ListEventsResponseBody{}
	if res.Data != nil {
		body.Data = make([]*WebhookEventResponseResponseBody, len(res.Data))
		for i, val := range res.Data {
			body.Data[i] = marshalWebhooksWebhookEventResponseToWebhookEventResponseResponseBody(val)
		}
	} else {
		body.Data = []*WebhookEventResponseResponseBody{}
	}
	if res.Pagination != nil {
		body.Pagination = marshalDesigntypesPaginationResponseToPaginationResponseResponseBody(res.Pagination)
	}
	return body
}

// NewReplayEventResponseBody builds the HTTP response body from the result of
// the "replay_event" endpoint of the "webhooks" service.
func NewReplayEventResponseBody(res *webhooks.WebhookEventResponse) *ReplayEventResponseBody {
	body := &ReplayEventResponseBody{
		ID:           res.ID,
		WebhookID:    res.WebhookID,
		EventType:    res.EventType,
		Payload:      res.Payload,
		Delivered:    res.Delivered,
		DeliveredAt:  res.DeliveredAt,
		Attempts:     res.Attempts,
		NextRetry:    res.NextRetry,
		StatusCode:   res.StatusCode,
		ResponseBody: res.ResponseBody,
		Error:        res.Error,
		CreatedAt:    res.CreatedAt,
		UpdatedAt:    res.UpdatedAt,
	}
	if res.Headers != nil {
		body.Headers = make(map[string]string, len(res.Headers))
		for key, val := range res.Headers {
			tk := key
			tv := val
			body.Headers[tk] = tv
		}
	}
	return body
}

// NewReceiveResponseBody builds the HTTP response body from the result of the
// "receive" endpoint of the "webhooks" service.
func NewReceiveResponseBody(res *webhooks.ReceiveResult) *ReceiveResponseBody {
	body := &ReceiveResponseBody{
		Message: res.Message,
	}
	return body
}

// NewListBadRequestResponseBody builds the HTTP response body from the result
// of the "list" endpoint of the "webhooks" service.
func NewListBadRequestResponseBody(res *webhooks.BadRequestError) *ListBadRequestResponseBody {
	body := &ListBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewListForbiddenResponseBody builds the HTTP response body from the result
// of the "list" endpoint of the "webhooks" service.
func NewListForbiddenResponseBody(res *webhooks.ForbiddenError) *ListForbiddenResponseBody {
	body := &ListForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewListInternalErrorResponseBody builds the HTTP response body from the
// result of the "list" endpoint of the "webhooks" service.
func NewListInternalErrorResponseBody(res *webhooks.InternalServerError) *ListInternalErrorResponseBody {
	body := &ListInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewListNotFoundResponseBody builds the HTTP response body from the result of
// the "list" endpoint of the "webhooks" service.
func NewListNotFoundResponseBody(res *webhooks.NotFoundError) *ListNotFoundResponseBody {
	body := &ListNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewListUnauthorizedResponseBody builds the HTTP response body from the
// result of the "list" endpoint of the "webhooks" service.
func NewListUnauthorizedResponseBody(res *webhooks.UnauthorizedError) *ListUnauthorizedResponseBody {
	body := &ListUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewCreateBadRequestResponseBody builds the HTTP response body from the
// result of the "create" endpoint of the "webhooks" service.
func NewCreateBadRequestResponseBody(res *webhooks.BadRequestError) *CreateBadRequestResponseBody {
	body := &CreateBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewCreateForbiddenResponseBody builds the HTTP response body from the result
// of the "create" endpoint of the "webhooks" service.
func NewCreateForbiddenResponseBody(res *webhooks.ForbiddenError) *CreateForbiddenResponseBody {
	body := &CreateForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewCreateInternalErrorResponseBody builds the HTTP response body from the
// result of the "create" endpoint of the "webhooks" service.
func NewCreateInternalErrorResponseBody(res *webhooks.InternalServerError) *CreateInternalErrorResponseBody {
	body := &CreateInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewCreateNotFoundResponseBody builds the HTTP response body from the result
// of the "create" endpoint of the "webhooks" service.
func NewCreateNotFoundResponseBody(res *webhooks.NotFoundError) *CreateNotFoundResponseBody {
	body := &CreateNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewCreateUnauthorizedResponseBody builds the HTTP response body from the
// result of the "create" endpoint of the "webhooks" service.
func NewCreateUnauthorizedResponseBody(res *webhooks.UnauthorizedError) *CreateUnauthorizedResponseBody {
	body := &CreateUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewGetBadRequestResponseBody builds the HTTP response body from the result
// of the "get" endpoint of the "webhooks" service.
func NewGetBadRequestResponseBody(res *webhooks.BadRequestError) *GetBadRequestResponseBody {
	body := &GetBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewGetForbiddenResponseBody builds the HTTP response body from the result of
// the "get" endpoint of the "webhooks" service.
func NewGetForbiddenResponseBody(res *webhooks.ForbiddenError) *GetForbiddenResponseBody {
	body := &GetForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewGetInternalErrorResponseBody builds the HTTP response body from the
// result of the "get" endpoint of the "webhooks" service.
func NewGetInternalErrorResponseBody(res *webhooks.InternalServerError) *GetInternalErrorResponseBody {
	body := &GetInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewGetNotFoundResponseBody builds the HTTP response body from the result of
// the "get" endpoint of the "webhooks" service.
func NewGetNotFoundResponseBody(res *webhooks.NotFoundError) *GetNotFoundResponseBody {
	body := &GetNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewGetUnauthorizedResponseBody builds the HTTP response body from the result
// of the "get" endpoint of the "webhooks" service.
func NewGetUnauthorizedResponseBody(res *webhooks.UnauthorizedError) *GetUnauthorizedResponseBody {
	body := &GetUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewUpdateBadRequestResponseBody builds the HTTP response body from the
// result of the "update" endpoint of the "webhooks" service.
func NewUpdateBadRequestResponseBody(res *webhooks.BadRequestError) *UpdateBadRequestResponseBody {
	body := &UpdateBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewUpdateForbiddenResponseBody builds the HTTP response body from the result
// of the "update" endpoint of the "webhooks" service.
func NewUpdateForbiddenResponseBody(res *webhooks.ForbiddenError) *UpdateForbiddenResponseBody {
	body := &UpdateForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewUpdateInternalErrorResponseBody builds the HTTP response body from the
// result of the "update" endpoint of the "webhooks" service.
func NewUpdateInternalErrorResponseBody(res *webhooks.InternalServerError) *UpdateInternalErrorResponseBody {
	body := &UpdateInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewUpdateNotFoundResponseBody builds the HTTP response body from the result
// of the "update" endpoint of the "webhooks" service.
func NewUpdateNotFoundResponseBody(res *webhooks.NotFoundError) *UpdateNotFoundResponseBody {
	body := &UpdateNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewUpdateUnauthorizedResponseBody builds the HTTP response body from the
// result of the "update" endpoint of the "webhooks" service.
func NewUpdateUnauthorizedResponseBody(res *webhooks.UnauthorizedError) *UpdateUnauthorizedResponseBody {
	body := &UpdateUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewDeleteBadRequestResponseBody builds the HTTP response body from the
// result of the "delete" endpoint of the "webhooks" service.
func NewDeleteBadRequestResponseBody(res *webhooks.BadRequestError) *DeleteBadRequestResponseBody {
	body := &DeleteBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewDeleteForbiddenResponseBody builds the HTTP response body from the result
// of the "delete" endpoint of the "webhooks" service.
func NewDeleteForbiddenResponseBody(res *webhooks.ForbiddenError) *DeleteForbiddenResponseBody {
	body := &DeleteForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewDeleteInternalErrorResponseBody builds the HTTP response body from the
// result of the "delete" endpoint of the "webhooks" service.
func NewDeleteInternalErrorResponseBody(res *webhooks.InternalServerError) *DeleteInternalErrorResponseBody {
	body := &DeleteInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewDeleteNotFoundResponseBody builds the HTTP response body from the result
// of the "delete" endpoint of the "webhooks" service.
func NewDeleteNotFoundResponseBody(res *webhooks.NotFoundError) *DeleteNotFoundResponseBody {
	body := &DeleteNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewDeleteUnauthorizedResponseBody builds the HTTP response body from the
// result of the "delete" endpoint of the "webhooks" service.
func NewDeleteUnauthorizedResponseBody(res *webhooks.UnauthorizedError) *DeleteUnauthorizedResponseBody {
	body := &DeleteUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewTriggerEventBadRequestResponseBody builds the HTTP response body from the
// result of the "trigger_event" endpoint of the "webhooks" service.
func NewTriggerEventBadRequestResponseBody(res *webhooks.BadRequestError) *TriggerEventBadRequestResponseBody {
	body := &TriggerEventBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewTriggerEventForbiddenResponseBody builds the HTTP response body from the
// result of the "trigger_event" endpoint of the "webhooks" service.
func NewTriggerEventForbiddenResponseBody(res *webhooks.ForbiddenError) *TriggerEventForbiddenResponseBody {
	body := &TriggerEventForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewTriggerEventInternalErrorResponseBody builds the HTTP response body from
// the result of the "trigger_event" endpoint of the "webhooks" service.
func NewTriggerEventInternalErrorResponseBody(res *webhooks.InternalServerError) *TriggerEventInternalErrorResponseBody {
	body := &TriggerEventInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewTriggerEventNotFoundResponseBody builds the HTTP response body from the
// result of the "trigger_event" endpoint of the "webhooks" service.
func NewTriggerEventNotFoundResponseBody(res *webhooks.NotFoundError) *TriggerEventNotFoundResponseBody {
	body := &TriggerEventNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewTriggerEventUnauthorizedResponseBody builds the HTTP response body from
// the result of the "trigger_event" endpoint of the "webhooks" service.
func NewTriggerEventUnauthorizedResponseBody(res *webhooks.UnauthorizedError) *TriggerEventUnauthorizedResponseBody {
	body := &TriggerEventUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewListEventsBadRequestResponseBody builds the HTTP response body from the
// result of the "list_events" endpoint of the "webhooks" service.
func NewListEventsBadRequestResponseBody(res *webhooks.BadRequestError) *ListEventsBadRequestResponseBody {
	body := &ListEventsBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewListEventsForbiddenResponseBody builds the HTTP response body from the
// result of the "list_events" endpoint of the "webhooks" service.
func NewListEventsForbiddenResponseBody(res *webhooks.ForbiddenError) *ListEventsForbiddenResponseBody {
	body := &ListEventsForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewListEventsInternalErrorResponseBody builds the HTTP response body from
// the result of the "list_events" endpoint of the "webhooks" service.
func NewListEventsInternalErrorResponseBody(res *webhooks.InternalServerError) *ListEventsInternalErrorResponseBody {
	body := &ListEventsInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewListEventsNotFoundResponseBody builds the HTTP response body from the
// result of the "list_events" endpoint of the "webhooks" service.
func NewListEventsNotFoundResponseBody(res *webhooks.NotFoundError) *ListEventsNotFoundResponseBody {
	body := &ListEventsNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewListEventsUnauthorizedResponseBody builds the HTTP response body from the
// result of the "list_events" endpoint of the "webhooks" service.
func NewListEventsUnauthorizedResponseBody(res *webhooks.UnauthorizedError) *ListEventsUnauthorizedResponseBody {
	body := &ListEventsUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewReplayEventBadRequestResponseBody builds the HTTP response body from the
// result of the "replay_event" endpoint of the "webhooks" service.
func NewReplayEventBadRequestResponseBody(res *webhooks.BadRequestError) *ReplayEventBadRequestResponseBody {
	body := &ReplayEventBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewReplayEventForbiddenResponseBody builds the HTTP response body from the
// result of the "replay_event" endpoint of the "webhooks" service.
func NewReplayEventForbiddenResponseBody(res *webhooks.ForbiddenError) *ReplayEventForbiddenResponseBody {
	body := &ReplayEventForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewReplayEventInternalErrorResponseBody builds the HTTP response body from
// the result of the "replay_event" endpoint of the "webhooks" service.
func NewReplayEventInternalErrorResponseBody(res *webhooks.InternalServerError) *ReplayEventInternalErrorResponseBody {
	body := &ReplayEventInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewReplayEventNotFoundResponseBody builds the HTTP response body from the
// result of the "replay_event" endpoint of the "webhooks" service.
func NewReplayEventNotFoundResponseBody(res *webhooks.NotFoundError) *ReplayEventNotFoundResponseBody {
	body := &ReplayEventNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewReplayEventUnauthorizedResponseBody builds the HTTP response body from
// the result of the "replay_event" endpoint of the "webhooks" service.
func NewReplayEventUnauthorizedResponseBody(res *webhooks.UnauthorizedError) *ReplayEventUnauthorizedResponseBody {
	body := &ReplayEventUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewReceiveBadRequestResponseBody builds the HTTP response body from the
// result of the "receive" endpoint of the "webhooks" service.
func NewReceiveBadRequestResponseBody(res *webhooks.BadRequestError) *ReceiveBadRequestResponseBody {
	body := &ReceiveBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewReceiveForbiddenResponseBody builds the HTTP response body from the
// result of the "receive" endpoint of the "webhooks" service.
func NewReceiveForbiddenResponseBody(res *webhooks.ForbiddenError) *ReceiveForbiddenResponseBody {
	body := &ReceiveForbiddenResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewReceiveInternalErrorResponseBody builds the HTTP response body from the
// result of the "receive" endpoint of the "webhooks" service.
func NewReceiveInternalErrorResponseBody(res *webhooks.InternalServerError) *ReceiveInternalErrorResponseBody {
	body := &ReceiveInternalErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewReceiveNotFoundResponseBody builds the HTTP response body from the result
// of the "receive" endpoint of the "webhooks" service.
func NewReceiveNotFoundResponseBody(res *webhooks.NotFoundError) *ReceiveNotFoundResponseBody {
	body := &ReceiveNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewReceiveUnauthorizedResponseBody builds the HTTP response body from the
// result of the "receive" endpoint of the "webhooks" service.
func NewReceiveUnauthorizedResponseBody(res *webhooks.UnauthorizedError) *ReceiveUnauthorizedResponseBody {
	body := &ReceiveUnauthorizedResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Details: res.Details,
		ID:      res.ID,
	}
	return body
}

// NewListPayload builds a webhooks service list endpoint payload.
func NewListPayload(offset int, limit int, organizationID *string, eventTypes []string, jwt *string) *webhooks.ListPayload {
	v := &webhooks.ListPayload{}
	v.Offset = offset
	v.Limit = limit
	v.OrganizationID = organizationID
	v.EventTypes = eventTypes
	v.JWT = jwt

	return v
}

// NewCreatePayload builds a webhooks service create endpoint payload.
func NewCreatePayload(body *CreateRequestBody, jwt *string) *webhooks.CreatePayload {
	v := &webhooks.CreatePayload{
		OrganizationID: *body.OrganizationID,
	}
	v.Webhook = unmarshalCreateWebhookRequestRequestBodyToWebhooksCreateWebhookRequest(body.Webhook)
	v.JWT = jwt

	return v
}

// NewGetPayload builds a webhooks service get endpoint payload.
func NewGetPayload(id string, jwt *string) *webhooks.GetPayload {
	v := &webhooks.GetPayload{}
	v.ID = id
	v.JWT = jwt

	return v
}

// NewUpdatePayload builds a webhooks service update endpoint payload.
func NewUpdatePayload(body *UpdateRequestBody, id string, jwt *string) *webhooks.UpdatePayload {
	v := &webhooks.UpdatePayload{}
	v.Webhook = unmarshalUpdateWebhookRequestRequestBodyToWebhooksUpdateWebhookRequest(body.Webhook)
	v.ID = id
	v.JWT = jwt

	return v
}

// NewDeletePayload builds a webhooks service delete endpoint payload.
func NewDeletePayload(id string, jwt *string) *webhooks.DeletePayload {
	v := &webhooks.DeletePayload{}
	v.ID = id
	v.JWT = jwt

	return v
}

// NewTriggerEventPayload builds a webhooks service trigger_event endpoint
// payload.
func NewTriggerEventPayload(body *TriggerEventRequestBody, jwt *string) *webhooks.TriggerEventPayload {
	v := &webhooks.TriggerEventPayload{
		OrganizationID: *body.OrganizationID,
	}
	v.Event = unmarshalTriggerEventRequestRequestBodyToWebhooksTriggerEventRequest(body.Event)
	v.JWT = jwt

	return v
}

// NewListEventsPayload builds a webhooks service list_events endpoint payload.
func NewListEventsPayload(id string, offset int, limit int, eventType *string, delivered *bool, jwt *string) *webhooks.ListEventsPayload {
	v := &webhooks.ListEventsPayload{}
	v.ID = id
	v.Offset = offset
	v.Limit = limit
	v.EventType = eventType
	v.Delivered = delivered
	v.JWT = jwt

	return v
}

// NewReplayEventPayload builds a webhooks service replay_event endpoint
// payload.
func NewReplayEventPayload(id string, eventID string, jwt *string) *webhooks.ReplayEventPayload {
	v := &webhooks.ReplayEventPayload{}
	v.ID = id
	v.EventID = eventID
	v.JWT = jwt

	return v
}

// NewReceivePayload builds a webhooks service receive endpoint payload.
func NewReceivePayload(id string) *webhooks.ReceivePayload {
	v := &webhooks.ReceivePayload{}
	v.ID = id

	return v
}

// ValidateCreateRequestBody runs the validations defined on CreateRequestBody
func ValidateCreateRequestBody(body *CreateRequestBody) (err error) {
	if body.OrganizationID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("organization_id", "body"))
	}
	if body.Webhook == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("webhook", "body"))
	}
	if body.Webhook != nil {
		if err2 := ValidateCreateWebhookRequestRequestBody(body.Webhook); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateUpdateRequestBody runs the validations defined on UpdateRequestBody
func ValidateUpdateRequestBody(body *UpdateRequestBody) (err error) {
	if body.Webhook == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("webhook", "body"))
	}
	if body.Webhook != nil {
		if err2 := ValidateUpdateWebhookRequestRequestBody(body.Webhook); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateTriggerEventRequestBody runs the validations defined on
// trigger_event_request_body
func ValidateTriggerEventRequestBody(body *TriggerEventRequestBody) (err error) {
	if body.OrganizationID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("organization_id", "body"))
	}
	if body.Event == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("event", "body"))
	}
	if body.Event != nil {
		if err2 := ValidateTriggerEventRequestRequestBody(body.Event); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateCreateWebhookRequestRequestBody runs the validations defined on
// CreateWebhookRequestRequestBody
func ValidateCreateWebhookRequestRequestBody(body *CreateWebhookRequestRequestBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.URL == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("url", "body"))
	}
	if body.EventTypes == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("event_types", "body"))
	}
	if body.URL != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.url", *body.URL, goa.FormatURI))
	}
	if body.RetryCount != nil {
		if *body.RetryCount < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.retry_count", *body.RetryCount, 0, true))
		}
	}
	if body.RetryCount != nil {
		if *body.RetryCount > 10 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.retry_count", *body.RetryCount, 10, false))
		}
	}
	if body.TimeoutMs != nil {
		if *body.TimeoutMs < 1000 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.timeout_ms", *body.TimeoutMs, 1000, true))
		}
	}
	if body.TimeoutMs != nil {
		if *body.TimeoutMs > 30000 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.timeout_ms", *body.TimeoutMs, 30000, false))
		}
	}
	if body.Format != nil {
		if !(*body.Format == "json" || *body.Format == "form") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.format", *body.Format, []any{"json", "form"}))
		}
	}
	return
}

// ValidateUpdateWebhookRequestRequestBody runs the validations defined on
// UpdateWebhookRequestRequestBody
func ValidateUpdateWebhookRequestRequestBody(body *UpdateWebhookRequestRequestBody) (err error) {
	if body.URL != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.url", *body.URL, goa.FormatURI))
	}
	if body.RetryCount != nil {
		if *body.RetryCount < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.retry_count", *body.RetryCount, 0, true))
		}
	}
	if body.RetryCount != nil {
		if *body.RetryCount > 10 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.retry_count", *body.RetryCount, 10, false))
		}
	}
	if body.TimeoutMs != nil {
		if *body.TimeoutMs < 1000 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.timeout_ms", *body.TimeoutMs, 1000, true))
		}
	}
	if body.TimeoutMs != nil {
		if *body.TimeoutMs > 30000 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.timeout_ms", *body.TimeoutMs, 30000, false))
		}
	}
	if body.Format != nil {
		if !(*body.Format == "json" || *body.Format == "form") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.format", *body.Format, []any{"json", "form"}))
		}
	}
	return
}

// ValidateTriggerEventRequestRequestBody runs the validations defined on
// TriggerEventRequestRequestBody
func ValidateTriggerEventRequestRequestBody(body *TriggerEventRequestRequestBody) (err error) {
	if body.EventType == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("event_type", "body"))
	}
	if body.Payload == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("payload", "body"))
	}
	return
}
