// Code generated by goa v3.20.0, DO NOT EDIT.
//
// auth endpoints
//
// Command:
// $ goa gen github.com/juicycleff/frank/design -o .

package auth

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Endpoints wraps the "auth" service endpoints.
type Endpoints struct {
	Login                  goa.Endpoint
	Register               goa.Endpoint
	Logout                 goa.Endpoint
	RefreshToken           goa.Endpoint
	ForgotPassword         goa.Endpoint
	ResetPassword          goa.Endpoint
	VerifyEmail            goa.Endpoint
	SendEmailVerification  goa.Endpoint
	CheckEmailVerification goa.Endpoint
	Me                     goa.Endpoint
	Csrf                   goa.Endpoint
}

// NewEndpoints wraps the methods of the "auth" service with endpoints.
func NewEndpoints(s Service, si ServerInterceptors) *Endpoints {
	// Casting service to Auther interface
	a := s.(Auther)
	endpoints := &Endpoints{
		Login:                  NewLoginEndpoint(s),
		Register:               NewRegisterEndpoint(s),
		Logout:                 NewLogoutEndpoint(s, a.JWTAuth),
		RefreshToken:           NewRefreshTokenEndpoint(s),
		ForgotPassword:         NewForgotPasswordEndpoint(s),
		ResetPassword:          NewResetPasswordEndpoint(s),
		VerifyEmail:            NewVerifyEmailEndpoint(s),
		SendEmailVerification:  NewSendEmailVerificationEndpoint(s),
		CheckEmailVerification: NewCheckEmailVerificationEndpoint(s, a.OAuth2Auth, a.JWTAuth, a.APIKeyAuth),
		Me:                     NewMeEndpoint(s, a.JWTAuth),
		Csrf:                   NewCsrfEndpoint(s),
	}
	endpoints.Login = WrapLoginEndpoint(endpoints.Login, si)
	return endpoints
}

// Use applies the given middleware to all the "auth" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.Login = m(e.Login)
	e.Register = m(e.Register)
	e.Logout = m(e.Logout)
	e.RefreshToken = m(e.RefreshToken)
	e.ForgotPassword = m(e.ForgotPassword)
	e.ResetPassword = m(e.ResetPassword)
	e.VerifyEmail = m(e.VerifyEmail)
	e.SendEmailVerification = m(e.SendEmailVerification)
	e.CheckEmailVerification = m(e.CheckEmailVerification)
	e.Me = m(e.Me)
	e.Csrf = m(e.Csrf)
}

// NewLoginEndpoint returns an endpoint function that calls the method "login"
// of service "auth".
func NewLoginEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*LoginPayload)
		return s.Login(ctx, p)
	}
}

// NewRegisterEndpoint returns an endpoint function that calls the method
// "register" of service "auth".
func NewRegisterEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*RegisterPayload)
		return s.Register(ctx, p)
	}
}

// NewLogoutEndpoint returns an endpoint function that calls the method
// "logout" of service "auth".
func NewLogoutEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*LogoutPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{},
		}
		var token string
		if p.JWT != nil {
			token = *p.JWT
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.Logout(ctx, p)
	}
}

// NewRefreshTokenEndpoint returns an endpoint function that calls the method
// "refresh_token" of service "auth".
func NewRefreshTokenEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*RefreshTokenPayload)
		return s.RefreshToken(ctx, p)
	}
}

// NewForgotPasswordEndpoint returns an endpoint function that calls the method
// "forgot_password" of service "auth".
func NewForgotPasswordEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*ForgotPasswordPayload)
		return s.ForgotPassword(ctx, p)
	}
}

// NewResetPasswordEndpoint returns an endpoint function that calls the method
// "reset_password" of service "auth".
func NewResetPasswordEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*ResetPasswordPayload)
		return s.ResetPassword(ctx, p)
	}
}

// NewVerifyEmailEndpoint returns an endpoint function that calls the method
// "verify_email" of service "auth".
func NewVerifyEmailEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*VerifyEmailPayload)
		return s.VerifyEmail(ctx, p)
	}
}

// NewSendEmailVerificationEndpoint returns an endpoint function that calls the
// method "send_email_verification" of service "auth".
func NewSendEmailVerificationEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*SendEmailVerificationPayload)
		return s.SendEmailVerification(ctx, p)
	}
}

// NewCheckEmailVerificationEndpoint returns an endpoint function that calls
// the method "check_email_verification" of service "auth".
func NewCheckEmailVerificationEndpoint(s Service, authOAuth2Fn security.AuthOAuth2Func, authJWTFn security.AuthJWTFunc, authAPIKeyFn security.AuthAPIKeyFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*CheckEmailVerificationPayload)
		var err error
		sc := security.OAuth2Scheme{
			Name:           "oauth2",
			Scopes:         []string{"profile", "email", "openid", "offline_access", "api"},
			RequiredScopes: []string{},
			Flows: []*security.OAuthFlow{
				&security.OAuthFlow{
					Type:             "authorization_code",
					AuthorizationURL: "/v1/oauth/authorize",
					TokenURL:         "/v1/oauth/token",
					RefreshURL:       "/v1/oauth/refresh",
				},
			},
		}
		var token string
		if p.Oauth2 != nil {
			token = *p.Oauth2
		}
		ctx, err = authOAuth2Fn(ctx, token, &sc)
		if err == nil {
			sc := security.JWTScheme{
				Name:           "jwt",
				Scopes:         []string{"api:read", "api:write"},
				RequiredScopes: []string{},
			}
			var token string
			if p.JWT != nil {
				token = *p.JWT
			}
			ctx, err = authJWTFn(ctx, token, &sc)
		}
		if err == nil {
			sc := security.APIKeyScheme{
				Name:           "api_key",
				Scopes:         []string{},
				RequiredScopes: []string{},
			}
			var key string
			if p.XAPIKey != nil {
				key = *p.XAPIKey
			}
			ctx, err = authAPIKeyFn(ctx, key, &sc)
		}
		if err != nil {
			return nil, err
		}
		return s.CheckEmailVerification(ctx, p)
	}
}

// NewMeEndpoint returns an endpoint function that calls the method "me" of
// service "auth".
func NewMeEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*MePayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{},
		}
		var token string
		if p.JWT != nil {
			token = *p.JWT
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.Me(ctx, p)
	}
}

// NewCsrfEndpoint returns an endpoint function that calls the method "csrf" of
// service "auth".
func NewCsrfEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*CsrfPayload)
		return s.Csrf(ctx, p)
	}
}
