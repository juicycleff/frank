// Code generated by goa v3.20.0, DO NOT EDIT.
//
// auth service
//
// Command:
// $ goa gen github.com/juicycleff/frank/design -o .

package auth

import (
	"context"

	designtypes "github.com/juicycleff/frank/gen/designtypes"
	"goa.design/goa/v3/security"
)

// Authentication service
type Service interface {
	// Authenticate user with email and password
	Login(context.Context, *LoginPayload) (res *LoginResponse, err error)
	// Register a new user
	Register(context.Context, *RegisterPayload) (res *LoginResponse, err error)
	// Log out the current user
	Logout(context.Context, *LogoutPayload) (res *LogoutResult, err error)
	// Refresh an access token
	RefreshToken(context.Context, *RefreshTokenPayload) (res *RefreshTokenResponse, err error)
	// Initiate password reset process
	ForgotPassword(context.Context, *ForgotPasswordPayload) (res *ForgotPasswordResult, err error)
	// Reset password using token
	ResetPassword(context.Context, *ResetPasswordPayload) (res *ResetPasswordResult, err error)
	// Verify email using token
	VerifyEmail(context.Context, *VerifyEmailPayload) (res *VerifyEmailResult, err error)
	// Get current user info
	Me(context.Context, *MePayload) (res *designtypes.User, err error)
	// Generates a CSRF token
	Csrf(context.Context, *CsrfPayload) (res *CSRFTokenResponse, err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// JWTAuth implements the authorization logic for the JWT security scheme.
	JWTAuth(ctx context.Context, token string, schema *security.JWTScheme) (context.Context, error)
	// OAuth2Auth implements the authorization logic for the OAuth2 security scheme.
	OAuth2Auth(ctx context.Context, token string, schema *security.OAuth2Scheme) (context.Context, error)
	// APIKeyAuth implements the authorization logic for the APIKey security scheme.
	APIKeyAuth(ctx context.Context, key string, schema *security.APIKeyScheme) (context.Context, error)
}

// APIName is the name of the API as defined in the design.
const APIName = "frank"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "1.0.0"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "auth"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [9]string{"login", "register", "logout", "refresh_token", "forgot_password", "reset_password", "verify_email", "me", "csrf"}

// Bad request response
type BadRequestError struct {
	// Error code
	Code string
	// Error message
	Message string
	// Additional error details
	Details any
	// Unique error ID
	ID *string
}

// CSRFTokenResponse is the result type of the auth service csrf method.
type CSRFTokenResponse struct {
	// CSRF token
	CsrfToken string
}

// Conflict response
type ConflictError struct {
	// Error code
	Code string
	// Error message
	Message string
	// Additional error details
	Details any
	// Unique error ID
	ID *string
}

// CsrfPayload is the payload type of the auth service csrf method.
type CsrfPayload struct {
	SessionID *string
}

// Forbidden response
type ForbiddenError struct {
	// Error code
	Code string
	// Error message
	Message string
	// Additional error details
	Details any
	// Unique error ID
	ID *string
}

// ForgotPasswordPayload is the payload type of the auth service
// forgot_password method.
type ForgotPasswordPayload struct {
	// OAuth2 access token
	Oauth2 *string
	// API key
	XAPIKey *string
	// JWT token
	JWT *string
	// URL to redirect after password reset
	RedirectURL *string
	SessionID   *string
	// User email
	Email string
}

// ForgotPasswordResult is the result type of the auth service forgot_password
// method.
type ForgotPasswordResult struct {
	Message string
}

// Internal server error response
type InternalServerError struct {
	// Error code
	Code string
	// Error message
	Message string
	// Additional error details
	Details any
	// Unique error ID
	ID *string
}

// LoginPayload is the payload type of the auth service login method.
type LoginPayload struct {
	SessionID *string
	// User email
	Email string
	// User password
	Password string
	// Organization ID if logging into a specific organization
	OrganizationID *string
	// Whether to remember the user
	RememberMe bool
	// CAPTCHA response for protected login
	CaptchaResponse *string
}

// LoginResponse is the result type of the auth service login method.
type LoginResponse struct {
	// Authenticated user
	User *designtypes.User
	// JWTAuth access token
	Token string
	// JWTAuth refresh token
	RefreshToken string
	// CSRF token
	CsrfToken string
	// Token expiry timestamp
	ExpiresAt int64
	// Whether MFA is required to complete authentication
	MfaRequired bool
	// Available MFA methods when MFA is required
	MfaTypes []string
	// Session ID
	SessionID *string
}

// LogoutPayload is the payload type of the auth service logout method.
type LogoutPayload struct {
	JWT       *string
	SessionID *string
}

// LogoutResult is the result type of the auth service logout method.
type LogoutResult struct {
	// Success message
	Message string
}

// MePayload is the payload type of the auth service me method.
type MePayload struct {
	JWT       *string
	SessionID *string
}

// Not found response
type NotFoundError struct {
	// Error code
	Code string
	// Error message
	Message string
	// Additional error details
	Details any
	// Unique error ID
	ID *string
}

// RefreshTokenPayload is the payload type of the auth service refresh_token
// method.
type RefreshTokenPayload struct {
	// OAuth2 access token
	Oauth2 *string
	// API key
	XAPIKey *string
	// JWT token
	JWT       *string
	SessionID *string
	// JWTAuth refresh token
	RefreshToken string
}

// RefreshTokenResponse is the result type of the auth service refresh_token
// method.
type RefreshTokenResponse struct {
	// New JWTAuth access token
	Token string
	// New refresh token
	RefreshToken string
	// Token expiry timestamp
	ExpiresAt int64
}

// RegisterPayload is the payload type of the auth service register method.
type RegisterPayload struct {
	SessionID *string
	// User email
	Email string
	// User password
	Password string
	// User first name
	FirstName *string
	// User last name
	LastName *string
	// Organization ID if creating a user for a specific organization
	OrganizationID *string
	// Additional user metadata
	Metadata map[string]any
}

// ResetPasswordPayload is the payload type of the auth service reset_password
// method.
type ResetPasswordPayload struct {
	SessionID *string
	// Password reset token
	Token string
	// New password
	NewPassword string
}

// ResetPasswordResult is the result type of the auth service reset_password
// method.
type ResetPasswordResult struct {
	Message string
}

// Unauthorized response
type UnauthorizedError struct {
	// Error code
	Code string
	// Error message
	Message string
	// Additional error details
	Details any
	// Unique error ID
	ID *string
}

// VerifyEmailPayload is the payload type of the auth service verify_email
// method.
type VerifyEmailPayload struct {
	SessionID *string
	// Email verification token
	Token string
}

// VerifyEmailResult is the result type of the auth service verify_email method.
type VerifyEmailResult struct {
	Message string
}

// Error returns an error description.
func (e *BadRequestError) Error() string {
	return "Bad request response"
}

// ErrorName returns "BadRequestError".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *BadRequestError) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "BadRequestError".
func (e *BadRequestError) GoaErrorName() string {
	return "bad_request"
}

// Error returns an error description.
func (e *ConflictError) Error() string {
	return "Conflict response"
}

// ErrorName returns "ConflictError".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *ConflictError) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "ConflictError".
func (e *ConflictError) GoaErrorName() string {
	return "conflict"
}

// Error returns an error description.
func (e *ForbiddenError) Error() string {
	return "Forbidden response"
}

// ErrorName returns "ForbiddenError".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *ForbiddenError) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "ForbiddenError".
func (e *ForbiddenError) GoaErrorName() string {
	return "forbidden"
}

// Error returns an error description.
func (e *InternalServerError) Error() string {
	return "Internal server error response"
}

// ErrorName returns "InternalServerError".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *InternalServerError) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "InternalServerError".
func (e *InternalServerError) GoaErrorName() string {
	return "internal_error"
}

// Error returns an error description.
func (e *NotFoundError) Error() string {
	return "Not found response"
}

// ErrorName returns "NotFoundError".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *NotFoundError) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "NotFoundError".
func (e *NotFoundError) GoaErrorName() string {
	return "not_found"
}

// Error returns an error description.
func (e *UnauthorizedError) Error() string {
	return "Unauthorized response"
}

// ErrorName returns "UnauthorizedError".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *UnauthorizedError) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "UnauthorizedError".
func (e *UnauthorizedError) GoaErrorName() string {
	return "unauthorized"
}
