// Code generated by goa v3.20.0, DO NOT EDIT.
//
// email endpoints
//
// Command:
// $ goa gen github.com/juicycleff/frank/design -o .

package email

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Endpoints wraps the "email" service endpoints.
type Endpoints struct {
	ListTemplates     goa.Endpoint
	CreateTemplate    goa.Endpoint
	GetTemplate       goa.Endpoint
	GetTemplateByType goa.Endpoint
	UpdateTemplate    goa.Endpoint
	DeleteTemplate    goa.Endpoint
	Send              goa.Endpoint
	SendTemplate      goa.Endpoint
}

// NewEndpoints wraps the methods of the "email" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	// Casting service to Auther interface
	a := s.(Auther)
	return &Endpoints{
		ListTemplates:     NewListTemplatesEndpoint(s, a.JWTAuth),
		CreateTemplate:    NewCreateTemplateEndpoint(s, a.JWTAuth),
		GetTemplate:       NewGetTemplateEndpoint(s, a.JWTAuth),
		GetTemplateByType: NewGetTemplateByTypeEndpoint(s, a.JWTAuth),
		UpdateTemplate:    NewUpdateTemplateEndpoint(s, a.JWTAuth),
		DeleteTemplate:    NewDeleteTemplateEndpoint(s, a.JWTAuth),
		Send:              NewSendEndpoint(s, a.JWTAuth),
		SendTemplate:      NewSendTemplateEndpoint(s, a.JWTAuth),
	}
}

// Use applies the given middleware to all the "email" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.ListTemplates = m(e.ListTemplates)
	e.CreateTemplate = m(e.CreateTemplate)
	e.GetTemplate = m(e.GetTemplate)
	e.GetTemplateByType = m(e.GetTemplateByType)
	e.UpdateTemplate = m(e.UpdateTemplate)
	e.DeleteTemplate = m(e.DeleteTemplate)
	e.Send = m(e.Send)
	e.SendTemplate = m(e.SendTemplate)
}

// NewListTemplatesEndpoint returns an endpoint function that calls the method
// "list_templates" of service "email".
func NewListTemplatesEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*ListTemplatesPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{},
		}
		var token string
		if p.JWT != nil {
			token = *p.JWT
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.ListTemplates(ctx, p)
	}
}

// NewCreateTemplateEndpoint returns an endpoint function that calls the method
// "create_template" of service "email".
func NewCreateTemplateEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*CreateTemplatePayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{},
		}
		var token string
		if p.JWT != nil {
			token = *p.JWT
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.CreateTemplate(ctx, p)
	}
}

// NewGetTemplateEndpoint returns an endpoint function that calls the method
// "get_template" of service "email".
func NewGetTemplateEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*GetTemplatePayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{},
		}
		var token string
		if p.JWT != nil {
			token = *p.JWT
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.GetTemplate(ctx, p)
	}
}

// NewGetTemplateByTypeEndpoint returns an endpoint function that calls the
// method "get_template_by_type" of service "email".
func NewGetTemplateByTypeEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*GetTemplateByTypePayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{},
		}
		var token string
		if p.JWT != nil {
			token = *p.JWT
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.GetTemplateByType(ctx, p)
	}
}

// NewUpdateTemplateEndpoint returns an endpoint function that calls the method
// "update_template" of service "email".
func NewUpdateTemplateEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*UpdateTemplatePayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{},
		}
		var token string
		if p.JWT != nil {
			token = *p.JWT
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.UpdateTemplate(ctx, p)
	}
}

// NewDeleteTemplateEndpoint returns an endpoint function that calls the method
// "delete_template" of service "email".
func NewDeleteTemplateEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*DeleteTemplatePayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{},
		}
		var token string
		if p.JWT != nil {
			token = *p.JWT
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return nil, s.DeleteTemplate(ctx, p)
	}
}

// NewSendEndpoint returns an endpoint function that calls the method "send" of
// service "email".
func NewSendEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*SendPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{},
		}
		var token string
		if p.JWT != nil {
			token = *p.JWT
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.Send(ctx, p)
	}
}

// NewSendTemplateEndpoint returns an endpoint function that calls the method
// "send_template" of service "email".
func NewSendTemplateEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*SendTemplatePayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{},
		}
		var token string
		if p.JWT != nil {
			token = *p.JWT
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.SendTemplate(ctx, p)
	}
}
