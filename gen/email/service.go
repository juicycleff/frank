// Code generated by goa v3.20.0, DO NOT EDIT.
//
// email service
//
// Command:
// $ goa gen github.com/juicycleff/frank/design -o .

package email

import (
	"context"

	designtypes "github.com/juicycleff/frank/gen/designtypes"
	"goa.design/goa/v3/security"
)

// Email template management and sending service
type Service interface {
	// List email templates
	ListTemplates(context.Context, *ListTemplatesPayload) (res *ListTemplatesResult, err error)
	// Create a new email template
	CreateTemplate(context.Context, *CreateTemplatePayload) (res *EmailTemplateResponse, err error)
	// Get email template by ID
	GetTemplate(context.Context, *GetTemplatePayload) (res *EmailTemplateResponse, err error)
	// Get email template by type
	GetTemplateByType(context.Context, *GetTemplateByTypePayload) (res *EmailTemplateResponse, err error)
	// Update email template
	UpdateTemplate(context.Context, *UpdateTemplatePayload) (res *EmailTemplateResponse, err error)
	// Delete email template
	DeleteTemplate(context.Context, *DeleteTemplatePayload) (err error)
	// Send email
	Send(context.Context, *SendPayload) (res *SendResult, err error)
	// Send email using a template
	SendTemplate(context.Context, *SendTemplatePayload) (res *SendTemplateResult, err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// JWTAuth implements the authorization logic for the JWT security scheme.
	JWTAuth(ctx context.Context, token string, schema *security.JWTScheme) (context.Context, error)
}

// APIName is the name of the API as defined in the design.
const APIName = "frank"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "1.0.0"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "email"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [8]string{"list_templates", "create_template", "get_template", "get_template_by_type", "update_template", "delete_template", "send", "send_template"}

// Bad request response
type BadRequestError struct {
	// Error code
	Code string
	// Error message
	Message string
	// Additional error details
	Details any
	// Unique error ID
	ID *string
}

// Conflict response
type ConflictError struct {
	// Error code
	Code string
	// Error message
	Message string
	// Additional error details
	Details any
	// Unique error ID
	ID *string
}

// CreateTemplatePayload is the payload type of the email service
// create_template method.
type CreateTemplatePayload struct {
	JWT *string
	// Template name
	Name string
	// Email subject
	Subject string
	// Template type
	Type string
	// HTML content
	HTMLContent string
	// Text content
	TextContent *string
	// Organization ID
	OrganizationID *string
	// Whether template is active
	Active bool
	// Whether this is a system template
	System bool
	// Template locale
	Locale string
	// Template metadata
	Metadata map[string]any
}

// DeleteTemplatePayload is the payload type of the email service
// delete_template method.
type DeleteTemplatePayload struct {
	JWT *string
	// Template ID
	ID string
}

// EmailTemplateResponse is the result type of the email service
// create_template method.
type EmailTemplateResponse struct {
	// Template name
	Name string
	// Email subject
	Subject string
	// Template type
	Type string
	// HTML content
	HTMLContent string
	// Text content
	TextContent *string
	// Organization ID
	OrganizationID *string
	// Whether template is active
	Active bool
	// Whether this is a system template
	System bool
	// Template locale
	Locale string
	// Template metadata
	Metadata map[string]any
	// Created At
	ID string `json:"id"`
	// Created At
	CreatedAt string `json:"created_at,createdAt"`
	// Updated At
	UpdatedAt string `json:"updated_at,updatedAt"`
}

// Forbidden response
type ForbiddenError struct {
	// Error code
	Code string
	// Error message
	Message string
	// Additional error details
	Details any
	// Unique error ID
	ID *string
}

// GetTemplateByTypePayload is the payload type of the email service
// get_template_by_type method.
type GetTemplateByTypePayload struct {
	JWT *string
	// Template type
	Type string
	// Organization ID
	OrganizationID *string
	// Template locale
	Locale string
}

// GetTemplatePayload is the payload type of the email service get_template
// method.
type GetTemplatePayload struct {
	JWT *string
	// Template ID
	ID string
}

// Internal server error response
type InternalServerError struct {
	// Error code
	Code string
	// Error message
	Message string
	// Additional error details
	Details any
	// Unique error ID
	ID *string
}

// ListTemplatesPayload is the payload type of the email service list_templates
// method.
type ListTemplatesPayload struct {
	JWT *string
	// Pagination offset
	Offset int
	// Number of items to return
	Limit int
	// Filter by template type
	Type *string
	// Filter by organization ID
	OrganizationID *string
	// Filter by locale
	Locale *string
}

// ListTemplatesResult is the result type of the email service list_templates
// method.
type ListTemplatesResult struct {
	Data       []*EmailTemplateResponse
	Pagination *designtypes.Pagination
}

// Not found response
type NotFoundError struct {
	// Error code
	Code string
	// Error message
	Message string
	// Additional error details
	Details any
	// Unique error ID
	ID *string
}

// SendPayload is the payload type of the email service send method.
type SendPayload struct {
	JWT *string
	// Recipients
	To []string
	// Sender email
	From *string
	// Email subject
	Subject string
	// HTML content
	HTMLContent *string
	// Text content
	TextContent *string
	// CC recipients
	Cc []string
	// BCC recipients
	Bcc []string
	// Reply-to address
	ReplyTo *string
	// Custom headers
	Headers map[string]string
	// Email metadata
	Metadata map[string]any
}

// SendResult is the result type of the email service send method.
type SendResult struct {
	// Success message
	Message string
}

// SendTemplatePayload is the payload type of the email service send_template
// method.
type SendTemplatePayload struct {
	JWT *string
	// Recipients
	To []string
	// Sender email
	From *string
	// Custom subject (overrides template subject)
	Subject *string
	// Template type
	TemplateType string
	// Template data
	TemplateData map[string]any
	// Organization ID
	OrganizationID *string
	// Template locale
	Locale string
	// CC recipients
	Cc []string
	// BCC recipients
	Bcc []string
	// Reply-to address
	ReplyTo *string
	// Custom headers
	Headers map[string]string
	// Email metadata
	Metadata map[string]any
}

// SendTemplateResult is the result type of the email service send_template
// method.
type SendTemplateResult struct {
	// Success message
	Message string
}

// Unauthorized response
type UnauthorizedError struct {
	// Error code
	Code string
	// Error message
	Message string
	// Additional error details
	Details any
	// Unique error ID
	ID *string
}

// Update email template request
type UpdateEmailTemplateRequest struct {
	// Template name
	Name *string
	// Email subject
	Subject *string
	// HTML content
	HTMLContent *string
	// Text content
	TextContent *string
	// Whether template is active
	Active *bool
	// Template locale
	Locale *string
	// Template metadata
	Metadata map[string]any
}

// UpdateTemplatePayload is the payload type of the email service
// update_template method.
type UpdateTemplatePayload struct {
	JWT *string
	// Template ID
	ID       string
	Template *UpdateEmailTemplateRequest
}

// Error returns an error description.
func (e *BadRequestError) Error() string {
	return "Bad request response"
}

// ErrorName returns "BadRequestError".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *BadRequestError) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "BadRequestError".
func (e *BadRequestError) GoaErrorName() string {
	return "bad_request"
}

// Error returns an error description.
func (e *ConflictError) Error() string {
	return "Conflict response"
}

// ErrorName returns "ConflictError".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *ConflictError) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "ConflictError".
func (e *ConflictError) GoaErrorName() string {
	return "conflict"
}

// Error returns an error description.
func (e *ForbiddenError) Error() string {
	return "Forbidden response"
}

// ErrorName returns "ForbiddenError".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *ForbiddenError) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "ForbiddenError".
func (e *ForbiddenError) GoaErrorName() string {
	return "forbidden"
}

// Error returns an error description.
func (e *InternalServerError) Error() string {
	return "Internal server error response"
}

// ErrorName returns "InternalServerError".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *InternalServerError) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "InternalServerError".
func (e *InternalServerError) GoaErrorName() string {
	return "internal_error"
}

// Error returns an error description.
func (e *NotFoundError) Error() string {
	return "Not found response"
}

// ErrorName returns "NotFoundError".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *NotFoundError) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "NotFoundError".
func (e *NotFoundError) GoaErrorName() string {
	return "not_found"
}

// Error returns an error description.
func (e *UnauthorizedError) Error() string {
	return "Unauthorized response"
}

// ErrorName returns "UnauthorizedError".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *UnauthorizedError) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "UnauthorizedError".
func (e *UnauthorizedError) GoaErrorName() string {
	return "unauthorized"
}
