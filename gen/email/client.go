// Code generated by goa v3.20.0, DO NOT EDIT.
//
// email client
//
// Command:
// $ goa gen github.com/juicycleff/frank/design -o .

package email

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Client is the "email" service client.
type Client struct {
	ListTemplatesEndpoint     goa.Endpoint
	CreateTemplateEndpoint    goa.Endpoint
	GetTemplateEndpoint       goa.Endpoint
	GetTemplateByTypeEndpoint goa.Endpoint
	UpdateTemplateEndpoint    goa.Endpoint
	DeleteTemplateEndpoint    goa.Endpoint
	SendEndpoint              goa.Endpoint
	SendTemplateEndpoint      goa.Endpoint
}

// NewClient initializes a "email" service client given the endpoints.
func NewClient(listTemplates, createTemplate, getTemplate, getTemplateByType, updateTemplate, deleteTemplate, send, sendTemplate goa.Endpoint) *Client {
	return &Client{
		ListTemplatesEndpoint:     listTemplates,
		CreateTemplateEndpoint:    createTemplate,
		GetTemplateEndpoint:       getTemplate,
		GetTemplateByTypeEndpoint: getTemplateByType,
		UpdateTemplateEndpoint:    updateTemplate,
		DeleteTemplateEndpoint:    deleteTemplate,
		SendEndpoint:              send,
		SendTemplateEndpoint:      sendTemplate,
	}
}

// ListTemplates calls the "list_templates" endpoint of the "email" service.
// ListTemplates may return the following errors:
//   - "unauthorized" (type *UnauthorizedError)
//   - "bad_request" (type *BadRequestError)
//   - "forbidden" (type *ForbiddenError)
//   - "not_found" (type *NotFoundError)
//   - "internal_error" (type *InternalServerError)
//   - error: internal error
func (c *Client) ListTemplates(ctx context.Context, p *ListTemplatesPayload) (res *ListTemplatesResult, err error) {
	var ires any
	ires, err = c.ListTemplatesEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*ListTemplatesResult), nil
}

// CreateTemplate calls the "create_template" endpoint of the "email" service.
// CreateTemplate may return the following errors:
//   - "bad_request" (type *BadRequestError)
//   - "unauthorized" (type *UnauthorizedError)
//   - "forbidden" (type *ForbiddenError)
//   - "conflict" (type *ConflictError): Template with this type and locale already exists for this organization
//   - "not_found" (type *NotFoundError)
//   - "internal_error" (type *InternalServerError)
//   - error: internal error
func (c *Client) CreateTemplate(ctx context.Context, p *CreateTemplatePayload) (res *EmailTemplateResponse, err error) {
	var ires any
	ires, err = c.CreateTemplateEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*EmailTemplateResponse), nil
}

// GetTemplate calls the "get_template" endpoint of the "email" service.
// GetTemplate may return the following errors:
//   - "not_found" (type *NotFoundError)
//   - "unauthorized" (type *UnauthorizedError)
//   - "bad_request" (type *BadRequestError)
//   - "forbidden" (type *ForbiddenError)
//   - "internal_error" (type *InternalServerError)
//   - error: internal error
func (c *Client) GetTemplate(ctx context.Context, p *GetTemplatePayload) (res *EmailTemplateResponse, err error) {
	var ires any
	ires, err = c.GetTemplateEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*EmailTemplateResponse), nil
}

// GetTemplateByType calls the "get_template_by_type" endpoint of the "email"
// service.
// GetTemplateByType may return the following errors:
//   - "not_found" (type *NotFoundError)
//   - "unauthorized" (type *UnauthorizedError)
//   - "bad_request" (type *BadRequestError)
//   - "forbidden" (type *ForbiddenError)
//   - "internal_error" (type *InternalServerError)
//   - error: internal error
func (c *Client) GetTemplateByType(ctx context.Context, p *GetTemplateByTypePayload) (res *EmailTemplateResponse, err error) {
	var ires any
	ires, err = c.GetTemplateByTypeEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*EmailTemplateResponse), nil
}

// UpdateTemplate calls the "update_template" endpoint of the "email" service.
// UpdateTemplate may return the following errors:
//   - "bad_request" (type *BadRequestError)
//   - "not_found" (type *NotFoundError): Template not found
//   - "unauthorized" (type *UnauthorizedError)
//   - "forbidden" (type *ForbiddenError): Cannot modify system templates
//   - "internal_error" (type *InternalServerError)
//   - error: internal error
func (c *Client) UpdateTemplate(ctx context.Context, p *UpdateTemplatePayload) (res *EmailTemplateResponse, err error) {
	var ires any
	ires, err = c.UpdateTemplateEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*EmailTemplateResponse), nil
}

// DeleteTemplate calls the "delete_template" endpoint of the "email" service.
// DeleteTemplate may return the following errors:
//   - "not_found" (type *NotFoundError)
//   - "unauthorized" (type *UnauthorizedError)
//   - "forbidden" (type *ForbiddenError): Cannot delete system templates
//   - "bad_request" (type *BadRequestError)
//   - "internal_error" (type *InternalServerError)
//   - error: internal error
func (c *Client) DeleteTemplate(ctx context.Context, p *DeleteTemplatePayload) (err error) {
	_, err = c.DeleteTemplateEndpoint(ctx, p)
	return
}

// Send calls the "send" endpoint of the "email" service.
// Send may return the following errors:
//   - "bad_request" (type *BadRequestError)
//   - "unauthorized" (type *UnauthorizedError)
//   - "internal_error" (type *InternalServerError): Failed to send email
//   - "forbidden" (type *ForbiddenError)
//   - "not_found" (type *NotFoundError)
//   - error: internal error
func (c *Client) Send(ctx context.Context, p *SendPayload) (res *SendResult, err error) {
	var ires any
	ires, err = c.SendEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*SendResult), nil
}

// SendTemplate calls the "send_template" endpoint of the "email" service.
// SendTemplate may return the following errors:
//   - "bad_request" (type *BadRequestError)
//   - "unauthorized" (type *UnauthorizedError)
//   - "not_found" (type *NotFoundError): Template not found
//   - "internal_error" (type *InternalServerError): Failed to send email
//   - "forbidden" (type *ForbiddenError)
//   - error: internal error
func (c *Client) SendTemplate(ctx context.Context, p *SendTemplatePayload) (res *SendTemplateResult, err error) {
	var ires any
	ires, err = c.SendTemplateEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*SendTemplateResult), nil
}
