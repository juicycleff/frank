// Code generated by goa v3.20.0, DO NOT EDIT.
//
// health endpoints
//
// Command:
// $ goa gen github.com/juicycleff/frank/design -o .

package health

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "health" service endpoints.
type Endpoints struct {
	Check   goa.Endpoint
	Ready   goa.Endpoint
	Version goa.Endpoint
	Metrics goa.Endpoint
	Debug   goa.Endpoint
}

// NewEndpoints wraps the methods of the "health" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		Check:   NewCheckEndpoint(s),
		Ready:   NewReadyEndpoint(s),
		Version: NewVersionEndpoint(s),
		Metrics: NewMetricsEndpoint(s),
		Debug:   NewDebugEndpoint(s),
	}
}

// Use applies the given middleware to all the "health" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.Check = m(e.Check)
	e.Ready = m(e.Ready)
	e.Version = m(e.Version)
	e.Metrics = m(e.Metrics)
	e.Debug = m(e.Debug)
}

// NewCheckEndpoint returns an endpoint function that calls the method "check"
// of service "health".
func NewCheckEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		return s.Check(ctx)
	}
}

// NewReadyEndpoint returns an endpoint function that calls the method "ready"
// of service "health".
func NewReadyEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		return s.Ready(ctx)
	}
}

// NewVersionEndpoint returns an endpoint function that calls the method
// "version" of service "health".
func NewVersionEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		return s.Version(ctx)
	}
}

// NewMetricsEndpoint returns an endpoint function that calls the method
// "metrics" of service "health".
func NewMetricsEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		return s.Metrics(ctx)
	}
}

// NewDebugEndpoint returns an endpoint function that calls the method "debug"
// of service "health".
func NewDebugEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		return s.Debug(ctx)
	}
}
