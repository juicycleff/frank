// Code generated by goa v3.20.0, DO NOT EDIT.
//
// health service
//
// Command:
// $ goa gen github.com/juicycleff/frank/design -o .

package health

import (
	"context"

	designtypes "github.com/juicycleff/frank/gen/designtypes"
)

// Health check service for monitoring system status
type Service interface {
	// Check system health
	Check(context.Context) (res *designtypes.HealthResponse, err error)
	// Check if the system is ready to receive traffic
	Ready(context.Context) (res *designtypes.ReadyResponse, err error)
	// Get system version information
	Version(context.Context) (res *VersionResult, err error)
	// Get system metrics
	Metrics(context.Context) (res *MetricsResult, err error)
	// Debug information (only available in development mode)
	Debug(context.Context) (res any, err error)
}

// APIName is the name of the API as defined in the design.
const APIName = "frank"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "1.0.0"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "health"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [5]string{"check", "ready", "version", "metrics", "debug"}

// MetricsResult is the result type of the health service metrics method.
type MetricsResult struct {
	// System uptime in seconds
	Uptime int64
	// Memory usage in bytes
	MemoryUsage int64
	// Number of goroutines
	Goroutines int
	// Total request count
	Requests *int64
	// Total error count
	Errors *int64
	// Requests per second
	RequestRate *float32
}

// VersionResult is the result type of the health service version method.
type VersionResult struct {
	// System version
	Version string
	// Build date
	BuildDate string
	// Git commit hash
	GitCommit *string
	// Go version
	GoVersion *string
}
