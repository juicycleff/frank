// Code generated by goa v3.20.0, DO NOT EDIT.
//
// health client
//
// Command:
// $ goa gen github.com/juicycleff/frank/design -o .

package health

import (
	"context"

	designtypes "github.com/juicycleff/frank/gen/designtypes"
	goa "goa.design/goa/v3/pkg"
)

// Client is the "health" service client.
type Client struct {
	CheckEndpoint   goa.Endpoint
	ReadyEndpoint   goa.Endpoint
	VersionEndpoint goa.Endpoint
	MetricsEndpoint goa.Endpoint
	DebugEndpoint   goa.Endpoint
}

// NewClient initializes a "health" service client given the endpoints.
func NewClient(check, ready, version, metrics, debug goa.Endpoint) *Client {
	return &Client{
		CheckEndpoint:   check,
		ReadyEndpoint:   ready,
		VersionEndpoint: version,
		MetricsEndpoint: metrics,
		DebugEndpoint:   debug,
	}
}

// Check calls the "check" endpoint of the "health" service.
func (c *Client) Check(ctx context.Context) (res *designtypes.HealthResponse, err error) {
	var ires any
	ires, err = c.CheckEndpoint(ctx, nil)
	if err != nil {
		return
	}
	return ires.(*designtypes.HealthResponse), nil
}

// Ready calls the "ready" endpoint of the "health" service.
func (c *Client) Ready(ctx context.Context) (res *designtypes.ReadyResponse, err error) {
	var ires any
	ires, err = c.ReadyEndpoint(ctx, nil)
	if err != nil {
		return
	}
	return ires.(*designtypes.ReadyResponse), nil
}

// Version calls the "version" endpoint of the "health" service.
func (c *Client) Version(ctx context.Context) (res *VersionResult, err error) {
	var ires any
	ires, err = c.VersionEndpoint(ctx, nil)
	if err != nil {
		return
	}
	return ires.(*VersionResult), nil
}

// Metrics calls the "metrics" endpoint of the "health" service.
func (c *Client) Metrics(ctx context.Context) (res *MetricsResult, err error) {
	var ires any
	ires, err = c.MetricsEndpoint(ctx, nil)
	if err != nil {
		return
	}
	return ires.(*MetricsResult), nil
}

// Debug calls the "debug" endpoint of the "health" service.
func (c *Client) Debug(ctx context.Context) (res any, err error) {
	var ires any
	ires, err = c.DebugEndpoint(ctx, nil)
	if err != nil {
		return
	}
	return ires.(any), nil
}
