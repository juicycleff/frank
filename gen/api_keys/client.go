// Code generated by goa v3.20.0, DO NOT EDIT.
//
// api_keys client
//
// Command:
// $ goa gen github.com/juicycleff/frank/design -o .

package apikeys

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Client is the "api_keys" service client.
type Client struct {
	ListEndpoint     goa.Endpoint
	CreateEndpoint   goa.Endpoint
	GetEndpoint      goa.Endpoint
	UpdateEndpoint   goa.Endpoint
	DeleteEndpoint   goa.Endpoint
	ValidateEndpoint goa.Endpoint
}

// NewClient initializes a "api_keys" service client given the endpoints.
func NewClient(list, create, get, update, delete_, validate goa.Endpoint) *Client {
	return &Client{
		ListEndpoint:     list,
		CreateEndpoint:   create,
		GetEndpoint:      get,
		UpdateEndpoint:   update,
		DeleteEndpoint:   delete_,
		ValidateEndpoint: validate,
	}
}

// List calls the "list" endpoint of the "api_keys" service.
// List may return the following errors:
//   - "unauthorized" (type *goa.ServiceError)
//   - "bad_request" (type *BadRequestError)
//   - "forbidden" (type *ForbiddenError)
//   - "not_found" (type *NotFoundError)
//   - "internal_error" (type *InternalServerError)
//   - error: internal error
func (c *Client) List(ctx context.Context, p *ListPayload) (res *ListResult, err error) {
	var ires any
	ires, err = c.ListEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*ListResult), nil
}

// Create calls the "create" endpoint of the "api_keys" service.
// Create may return the following errors:
//   - "bad_request" (type *goa.ServiceError)
//   - "unauthorized" (type *goa.ServiceError)
//   - "forbidden" (type *ForbiddenError)
//   - "not_found" (type *NotFoundError)
//   - "internal_error" (type *InternalServerError)
//   - error: internal error
func (c *Client) Create(ctx context.Context, p *CreatePayload) (res *APIKeyWithSecretResponse, err error) {
	var ires any
	ires, err = c.CreateEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*APIKeyWithSecretResponse), nil
}

// Get calls the "get" endpoint of the "api_keys" service.
// Get may return the following errors:
//   - "not_found" (type *goa.ServiceError)
//   - "unauthorized" (type *goa.ServiceError)
//   - "bad_request" (type *BadRequestError)
//   - "forbidden" (type *ForbiddenError)
//   - "internal_error" (type *InternalServerError)
//   - error: internal error
func (c *Client) Get(ctx context.Context, p *GetPayload) (res *APIKeyResponse, err error) {
	var ires any
	ires, err = c.GetEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*APIKeyResponse), nil
}

// Update calls the "update" endpoint of the "api_keys" service.
// Update may return the following errors:
//   - "bad_request" (type *BadRequestError)
//   - "not_found" (type *NotFoundError): API key not found
//   - "unauthorized" (type *UnauthorizedError)
//   - "forbidden" (type *ForbiddenError)
//   - "internal_error" (type *InternalServerError)
//   - error: internal error
func (c *Client) Update(ctx context.Context, p *UpdatePayload) (res *APIKeyResponse, err error) {
	var ires any
	ires, err = c.UpdateEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*APIKeyResponse), nil
}

// Delete calls the "delete" endpoint of the "api_keys" service.
// Delete may return the following errors:
//   - "not_found" (type *NotFoundError)
//   - "unauthorized" (type *UnauthorizedError)
//   - "bad_request" (type *BadRequestError)
//   - "forbidden" (type *ForbiddenError)
//   - "internal_error" (type *InternalServerError)
//   - error: internal error
func (c *Client) Delete(ctx context.Context, p *DeletePayload) (err error) {
	_, err = c.DeleteEndpoint(ctx, p)
	return
}

// Validate calls the "validate" endpoint of the "api_keys" service.
// Validate may return the following errors:
//   - "bad_request" (type *BadRequestError)
//   - "unauthorized" (type *UnauthorizedError)
//   - "forbidden" (type *ForbiddenError)
//   - "not_found" (type *NotFoundError)
//   - "internal_error" (type *InternalServerError)
//   - error: internal error
func (c *Client) Validate(ctx context.Context, p *ValidatePayload) (res *ValidateResult, err error) {
	var ires any
	ires, err = c.ValidateEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*ValidateResult), nil
}
