// Code generated by goa v3.20.0, DO NOT EDIT.
//
// rbac client
//
// Command:
// $ goa gen github.com/juicycleff/frank/design -o .

package rbac

import (
	"context"

	designtypes "github.com/juicycleff/frank/gen/designtypes"
	goa "goa.design/goa/v3/pkg"
)

// Client is the "rbac" service client.
type Client struct {
	ListPermissionsEndpoint      goa.Endpoint
	CreatePermissionEndpoint     goa.Endpoint
	GetPermissionEndpoint        goa.Endpoint
	UpdatePermissionEndpoint     goa.Endpoint
	DeletePermissionEndpoint     goa.Endpoint
	ListRolesEndpoint            goa.Endpoint
	CreateRoleEndpoint           goa.Endpoint
	GetRoleEndpoint              goa.Endpoint
	UpdateRoleEndpoint           goa.Endpoint
	DeleteRoleEndpoint           goa.Endpoint
	ListRolePermissionsEndpoint  goa.Endpoint
	AddRolePermissionEndpoint    goa.Endpoint
	RemoveRolePermissionEndpoint goa.Endpoint
	CheckPermissionEndpoint      goa.Endpoint
	CheckRoleEndpoint            goa.Endpoint
}

// NewClient initializes a "rbac" service client given the endpoints.
func NewClient(listPermissions, createPermission, getPermission, updatePermission, deletePermission, listRoles, createRole, getRole, updateRole, deleteRole, listRolePermissions, addRolePermission, removeRolePermission, checkPermission, checkRole goa.Endpoint) *Client {
	return &Client{
		ListPermissionsEndpoint:      listPermissions,
		CreatePermissionEndpoint:     createPermission,
		GetPermissionEndpoint:        getPermission,
		UpdatePermissionEndpoint:     updatePermission,
		DeletePermissionEndpoint:     deletePermission,
		ListRolesEndpoint:            listRoles,
		CreateRoleEndpoint:           createRole,
		GetRoleEndpoint:              getRole,
		UpdateRoleEndpoint:           updateRole,
		DeleteRoleEndpoint:           deleteRole,
		ListRolePermissionsEndpoint:  listRolePermissions,
		AddRolePermissionEndpoint:    addRolePermission,
		RemoveRolePermissionEndpoint: removeRolePermission,
		CheckPermissionEndpoint:      checkPermission,
		CheckRoleEndpoint:            checkRole,
	}
}

// ListPermissions calls the "list_permissions" endpoint of the "rbac" service.
// ListPermissions may return the following errors:
//   - "unauthorized" (type *UnauthorizedError)
//   - "bad_request" (type *BadRequestError)
//   - "forbidden" (type *ForbiddenError)
//   - "not_found" (type *NotFoundError)
//   - "conflict" (type *ConflictError)
//   - "internal_error" (type *InternalServerError)
//   - error: internal error
func (c *Client) ListPermissions(ctx context.Context, p *ListPermissionsPayload) (res *ListPermissionsResponse, err error) {
	var ires any
	ires, err = c.ListPermissionsEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*ListPermissionsResponse), nil
}

// CreatePermission calls the "create_permission" endpoint of the "rbac"
// service.
// CreatePermission may return the following errors:
//   - "forbidden" (type *ForbiddenError)
//   - "bad_request" (type *BadRequestError)
//   - "unauthorized" (type *UnauthorizedError)
//   - "conflict" (type *ConflictError): Permission with this resource and action already exists
//   - "not_found" (type *NotFoundError)
//   - "internal_error" (type *InternalServerError)
//   - error: internal error
func (c *Client) CreatePermission(ctx context.Context, p *CreatePermissionPayload) (res *designtypes.PermissionResponse, err error) {
	var ires any
	ires, err = c.CreatePermissionEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*designtypes.PermissionResponse), nil
}

// GetPermission calls the "get_permission" endpoint of the "rbac" service.
// GetPermission may return the following errors:
//   - "not_found" (type *NotFoundError)
//   - "unauthorized" (type *UnauthorizedError)
//   - "bad_request" (type *BadRequestError)
//   - "forbidden" (type *ForbiddenError)
//   - "conflict" (type *ConflictError)
//   - "internal_error" (type *InternalServerError)
//   - error: internal error
func (c *Client) GetPermission(ctx context.Context, p *GetPermissionPayload) (res *designtypes.PermissionResponse, err error) {
	var ires any
	ires, err = c.GetPermissionEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*designtypes.PermissionResponse), nil
}

// UpdatePermission calls the "update_permission" endpoint of the "rbac"
// service.
// UpdatePermission may return the following errors:
//   - "not_found" (type *NotFoundError)
//   - "bad_request" (type *BadRequestError)
//   - "unauthorized" (type *UnauthorizedError)
//   - "forbidden" (type *ForbiddenError): Cannot update system permissions
//   - "conflict" (type *ConflictError)
//   - "internal_error" (type *InternalServerError)
//   - error: internal error
func (c *Client) UpdatePermission(ctx context.Context, p *UpdatePermissionPayload) (res *designtypes.PermissionResponse, err error) {
	var ires any
	ires, err = c.UpdatePermissionEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*designtypes.PermissionResponse), nil
}

// DeletePermission calls the "delete_permission" endpoint of the "rbac"
// service.
// DeletePermission may return the following errors:
//   - "not_found" (type *NotFoundError)
//   - "unauthorized" (type *UnauthorizedError)
//   - "forbidden" (type *ForbiddenError): Cannot delete system permissions
//   - "bad_request" (type *BadRequestError)
//   - "conflict" (type *ConflictError)
//   - "internal_error" (type *InternalServerError)
//   - error: internal error
func (c *Client) DeletePermission(ctx context.Context, p *DeletePermissionPayload) (err error) {
	_, err = c.DeletePermissionEndpoint(ctx, p)
	return
}

// ListRoles calls the "list_roles" endpoint of the "rbac" service.
// ListRoles may return the following errors:
//   - "unauthorized" (type *UnauthorizedError)
//   - "bad_request" (type *BadRequestError)
//   - "forbidden" (type *ForbiddenError)
//   - "not_found" (type *NotFoundError)
//   - "conflict" (type *ConflictError)
//   - "internal_error" (type *InternalServerError)
//   - error: internal error
func (c *Client) ListRoles(ctx context.Context, p *ListRolesPayload) (res *ListRolesResult, err error) {
	var ires any
	ires, err = c.ListRolesEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*ListRolesResult), nil
}

// CreateRole calls the "create_role" endpoint of the "rbac" service.
// CreateRole may return the following errors:
//   - "forbidden" (type *ForbiddenError)
//   - "bad_request" (type *BadRequestError)
//   - "unauthorized" (type *UnauthorizedError)
//   - "conflict" (type *ConflictError): Role with this name already exists in the organization
//   - "not_found" (type *NotFoundError)
//   - "internal_error" (type *InternalServerError)
//   - error: internal error
func (c *Client) CreateRole(ctx context.Context, p *CreateRolePayload) (res *designtypes.RoleResponse, err error) {
	var ires any
	ires, err = c.CreateRoleEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*designtypes.RoleResponse), nil
}

// GetRole calls the "get_role" endpoint of the "rbac" service.
// GetRole may return the following errors:
//   - "not_found" (type *NotFoundError)
//   - "unauthorized" (type *UnauthorizedError)
//   - "bad_request" (type *BadRequestError)
//   - "forbidden" (type *ForbiddenError)
//   - "conflict" (type *ConflictError)
//   - "internal_error" (type *InternalServerError)
//   - error: internal error
func (c *Client) GetRole(ctx context.Context, p *GetRolePayload) (res *designtypes.RoleResponse, err error) {
	var ires any
	ires, err = c.GetRoleEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*designtypes.RoleResponse), nil
}

// UpdateRole calls the "update_role" endpoint of the "rbac" service.
// UpdateRole may return the following errors:
//   - "forbidden" (type *ForbiddenError): Cannot update system roles
//   - "bad_request" (type *BadRequestError)
//   - "not_found" (type *NotFoundError)
//   - "unauthorized" (type *UnauthorizedError)
//   - "conflict" (type *ConflictError)
//   - "internal_error" (type *InternalServerError)
//   - error: internal error
func (c *Client) UpdateRole(ctx context.Context, p *UpdateRolePayload) (res *designtypes.RoleResponse, err error) {
	var ires any
	ires, err = c.UpdateRoleEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*designtypes.RoleResponse), nil
}

// DeleteRole calls the "delete_role" endpoint of the "rbac" service.
// DeleteRole may return the following errors:
//   - "forbidden" (type *ForbiddenError): Cannot delete system roles
//   - "not_found" (type *NotFoundError)
//   - "unauthorized" (type *UnauthorizedError)
//   - "bad_request" (type *BadRequestError)
//   - "conflict" (type *ConflictError)
//   - "internal_error" (type *InternalServerError)
//   - error: internal error
func (c *Client) DeleteRole(ctx context.Context, p *DeleteRolePayload) (err error) {
	_, err = c.DeleteRoleEndpoint(ctx, p)
	return
}

// ListRolePermissions calls the "list_role_permissions" endpoint of the "rbac"
// service.
// ListRolePermissions may return the following errors:
//   - "not_found" (type *NotFoundError)
//   - "unauthorized" (type *UnauthorizedError)
//   - "bad_request" (type *BadRequestError)
//   - "forbidden" (type *ForbiddenError)
//   - "conflict" (type *ConflictError)
//   - "internal_error" (type *InternalServerError)
//   - error: internal error
func (c *Client) ListRolePermissions(ctx context.Context, p *ListRolePermissionsPayload) (res *ListRolePermissionsResult, err error) {
	var ires any
	ires, err = c.ListRolePermissionsEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*ListRolePermissionsResult), nil
}

// AddRolePermission calls the "add_role_permission" endpoint of the "rbac"
// service.
// AddRolePermission may return the following errors:
//   - "forbidden" (type *ForbiddenError)
//   - "bad_request" (type *BadRequestError)
//   - "not_found" (type *NotFoundError)
//   - "unauthorized" (type *UnauthorizedError)
//   - "conflict" (type *ConflictError)
//   - "internal_error" (type *InternalServerError)
//   - error: internal error
func (c *Client) AddRolePermission(ctx context.Context, p *AddRolePermissionPayload) (res *AddRolePermissionResult, err error) {
	var ires any
	ires, err = c.AddRolePermissionEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*AddRolePermissionResult), nil
}

// RemoveRolePermission calls the "remove_role_permission" endpoint of the
// "rbac" service.
// RemoveRolePermission may return the following errors:
//   - "not_found" (type *NotFoundError)
//   - "unauthorized" (type *UnauthorizedError)
//   - "forbidden" (type *ForbiddenError)
//   - "bad_request" (type *BadRequestError)
//   - "conflict" (type *ConflictError)
//   - "internal_error" (type *InternalServerError)
//   - error: internal error
func (c *Client) RemoveRolePermission(ctx context.Context, p *RemoveRolePermissionPayload) (err error) {
	_, err = c.RemoveRolePermissionEndpoint(ctx, p)
	return
}

// CheckPermission calls the "check_permission" endpoint of the "rbac" service.
// CheckPermission may return the following errors:
//   - "unauthorized" (type *UnauthorizedError)
//   - "bad_request" (type *BadRequestError)
//   - "forbidden" (type *ForbiddenError)
//   - "not_found" (type *NotFoundError)
//   - "conflict" (type *ConflictError)
//   - "internal_error" (type *InternalServerError)
//   - error: internal error
func (c *Client) CheckPermission(ctx context.Context, p *CheckPermissionPayload) (res *CheckPermissionResult, err error) {
	var ires any
	ires, err = c.CheckPermissionEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*CheckPermissionResult), nil
}

// CheckRole calls the "check_role" endpoint of the "rbac" service.
// CheckRole may return the following errors:
//   - "unauthorized" (type *UnauthorizedError)
//   - "bad_request" (type *BadRequestError)
//   - "forbidden" (type *ForbiddenError)
//   - "not_found" (type *NotFoundError)
//   - "conflict" (type *ConflictError)
//   - "internal_error" (type *InternalServerError)
//   - error: internal error
func (c *Client) CheckRole(ctx context.Context, p *CheckRolePayload) (res *CheckRoleResult, err error) {
	var ires any
	ires, err = c.CheckRoleEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*CheckRoleResult), nil
}
