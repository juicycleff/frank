// Code generated by goa v3.20.0, DO NOT EDIT.
//
// rbac endpoints
//
// Command:
// $ goa gen github.com/juicycleff/frank/design -o .

package rbac

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Endpoints wraps the "rbac" service endpoints.
type Endpoints struct {
	ListPermissions      goa.Endpoint
	CreatePermission     goa.Endpoint
	GetPermission        goa.Endpoint
	UpdatePermission     goa.Endpoint
	DeletePermission     goa.Endpoint
	ListRoles            goa.Endpoint
	CreateRole           goa.Endpoint
	GetRole              goa.Endpoint
	UpdateRole           goa.Endpoint
	DeleteRole           goa.Endpoint
	ListRolePermissions  goa.Endpoint
	AddRolePermission    goa.Endpoint
	RemoveRolePermission goa.Endpoint
	CheckPermission      goa.Endpoint
	CheckRole            goa.Endpoint
}

// NewEndpoints wraps the methods of the "rbac" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	// Casting service to Auther interface
	a := s.(Auther)
	return &Endpoints{
		ListPermissions:      NewListPermissionsEndpoint(s, a.JWTAuth),
		CreatePermission:     NewCreatePermissionEndpoint(s, a.JWTAuth),
		GetPermission:        NewGetPermissionEndpoint(s, a.JWTAuth),
		UpdatePermission:     NewUpdatePermissionEndpoint(s, a.JWTAuth),
		DeletePermission:     NewDeletePermissionEndpoint(s, a.JWTAuth),
		ListRoles:            NewListRolesEndpoint(s, a.JWTAuth),
		CreateRole:           NewCreateRoleEndpoint(s, a.JWTAuth),
		GetRole:              NewGetRoleEndpoint(s, a.JWTAuth),
		UpdateRole:           NewUpdateRoleEndpoint(s, a.JWTAuth),
		DeleteRole:           NewDeleteRoleEndpoint(s, a.JWTAuth),
		ListRolePermissions:  NewListRolePermissionsEndpoint(s, a.JWTAuth),
		AddRolePermission:    NewAddRolePermissionEndpoint(s, a.JWTAuth),
		RemoveRolePermission: NewRemoveRolePermissionEndpoint(s, a.JWTAuth),
		CheckPermission:      NewCheckPermissionEndpoint(s, a.JWTAuth),
		CheckRole:            NewCheckRoleEndpoint(s, a.JWTAuth),
	}
}

// Use applies the given middleware to all the "rbac" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.ListPermissions = m(e.ListPermissions)
	e.CreatePermission = m(e.CreatePermission)
	e.GetPermission = m(e.GetPermission)
	e.UpdatePermission = m(e.UpdatePermission)
	e.DeletePermission = m(e.DeletePermission)
	e.ListRoles = m(e.ListRoles)
	e.CreateRole = m(e.CreateRole)
	e.GetRole = m(e.GetRole)
	e.UpdateRole = m(e.UpdateRole)
	e.DeleteRole = m(e.DeleteRole)
	e.ListRolePermissions = m(e.ListRolePermissions)
	e.AddRolePermission = m(e.AddRolePermission)
	e.RemoveRolePermission = m(e.RemoveRolePermission)
	e.CheckPermission = m(e.CheckPermission)
	e.CheckRole = m(e.CheckRole)
}

// NewListPermissionsEndpoint returns an endpoint function that calls the
// method "list_permissions" of service "rbac".
func NewListPermissionsEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*ListPermissionsPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{},
		}
		var token string
		if p.JWT != nil {
			token = *p.JWT
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.ListPermissions(ctx, p)
	}
}

// NewCreatePermissionEndpoint returns an endpoint function that calls the
// method "create_permission" of service "rbac".
func NewCreatePermissionEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*CreatePermissionPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{},
		}
		var token string
		if p.JWT != nil {
			token = *p.JWT
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.CreatePermission(ctx, p)
	}
}

// NewGetPermissionEndpoint returns an endpoint function that calls the method
// "get_permission" of service "rbac".
func NewGetPermissionEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*GetPermissionPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{},
		}
		var token string
		if p.JWT != nil {
			token = *p.JWT
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.GetPermission(ctx, p)
	}
}

// NewUpdatePermissionEndpoint returns an endpoint function that calls the
// method "update_permission" of service "rbac".
func NewUpdatePermissionEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*UpdatePermissionPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{},
		}
		var token string
		if p.JWT != nil {
			token = *p.JWT
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.UpdatePermission(ctx, p)
	}
}

// NewDeletePermissionEndpoint returns an endpoint function that calls the
// method "delete_permission" of service "rbac".
func NewDeletePermissionEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*DeletePermissionPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{},
		}
		var token string
		if p.JWT != nil {
			token = *p.JWT
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return nil, s.DeletePermission(ctx, p)
	}
}

// NewListRolesEndpoint returns an endpoint function that calls the method
// "list_roles" of service "rbac".
func NewListRolesEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*ListRolesPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{},
		}
		var token string
		if p.JWT != nil {
			token = *p.JWT
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.ListRoles(ctx, p)
	}
}

// NewCreateRoleEndpoint returns an endpoint function that calls the method
// "create_role" of service "rbac".
func NewCreateRoleEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*CreateRolePayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{},
		}
		var token string
		if p.JWT != nil {
			token = *p.JWT
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.CreateRole(ctx, p)
	}
}

// NewGetRoleEndpoint returns an endpoint function that calls the method
// "get_role" of service "rbac".
func NewGetRoleEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*GetRolePayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{},
		}
		var token string
		if p.JWT != nil {
			token = *p.JWT
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.GetRole(ctx, p)
	}
}

// NewUpdateRoleEndpoint returns an endpoint function that calls the method
// "update_role" of service "rbac".
func NewUpdateRoleEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*UpdateRolePayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{},
		}
		var token string
		if p.JWT != nil {
			token = *p.JWT
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.UpdateRole(ctx, p)
	}
}

// NewDeleteRoleEndpoint returns an endpoint function that calls the method
// "delete_role" of service "rbac".
func NewDeleteRoleEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*DeleteRolePayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{},
		}
		var token string
		if p.JWT != nil {
			token = *p.JWT
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return nil, s.DeleteRole(ctx, p)
	}
}

// NewListRolePermissionsEndpoint returns an endpoint function that calls the
// method "list_role_permissions" of service "rbac".
func NewListRolePermissionsEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*ListRolePermissionsPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{},
		}
		var token string
		if p.JWT != nil {
			token = *p.JWT
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.ListRolePermissions(ctx, p)
	}
}

// NewAddRolePermissionEndpoint returns an endpoint function that calls the
// method "add_role_permission" of service "rbac".
func NewAddRolePermissionEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*AddRolePermissionPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{},
		}
		var token string
		if p.JWT != nil {
			token = *p.JWT
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.AddRolePermission(ctx, p)
	}
}

// NewRemoveRolePermissionEndpoint returns an endpoint function that calls the
// method "remove_role_permission" of service "rbac".
func NewRemoveRolePermissionEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*RemoveRolePermissionPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{},
		}
		var token string
		if p.JWT != nil {
			token = *p.JWT
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return nil, s.RemoveRolePermission(ctx, p)
	}
}

// NewCheckPermissionEndpoint returns an endpoint function that calls the
// method "check_permission" of service "rbac".
func NewCheckPermissionEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*CheckPermissionPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{},
		}
		var token string
		if p.JWT != nil {
			token = *p.JWT
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.CheckPermission(ctx, p)
	}
}

// NewCheckRoleEndpoint returns an endpoint function that calls the method
// "check_role" of service "rbac".
func NewCheckRoleEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*CheckRolePayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{},
		}
		var token string
		if p.JWT != nil {
			token = *p.JWT
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.CheckRole(ctx, p)
	}
}
