// Code generated by goa v3.20.0, DO NOT EDIT.
//
// rbac service
//
// Command:
// $ goa gen github.com/juicycleff/frank/design -o .

package rbac

import (
	"context"

	designtypes "github.com/juicycleff/frank/gen/designtypes"
	"goa.design/goa/v3/security"
)

// Role-Based Access Control service
type Service interface {
	// List permissions
	ListPermissions(context.Context, *ListPermissionsPayload) (res *ListPermissionsResponse, err error)
	// Create a new permission
	CreatePermission(context.Context, *CreatePermissionPayload) (res *designtypes.PermissionResponse, err error)
	// Get permission by ID
	GetPermission(context.Context, *GetPermissionPayload) (res *designtypes.PermissionResponse, err error)
	// Update permission
	UpdatePermission(context.Context, *UpdatePermissionPayload) (res *designtypes.PermissionResponse, err error)
	// Delete permission
	DeletePermission(context.Context, *DeletePermissionPayload) (err error)
	// List roles
	ListRoles(context.Context, *ListRolesPayload) (res *ListRolesResult, err error)
	// Create a new role
	CreateRole(context.Context, *CreateRolePayload) (res *designtypes.RoleResponse, err error)
	// Get role by ID
	GetRole(context.Context, *GetRolePayload) (res *designtypes.RoleResponse, err error)
	// Update role
	UpdateRole(context.Context, *UpdateRolePayload) (res *designtypes.RoleResponse, err error)
	// Delete role
	DeleteRole(context.Context, *DeleteRolePayload) (err error)
	// List role permissions
	ListRolePermissions(context.Context, *ListRolePermissionsPayload) (res *ListRolePermissionsResult, err error)
	// Add permission to role
	AddRolePermission(context.Context, *AddRolePermissionPayload) (res *AddRolePermissionResult, err error)
	// Remove permission from role
	RemoveRolePermission(context.Context, *RemoveRolePermissionPayload) (err error)
	// Check if user has a permission
	CheckPermission(context.Context, *CheckPermissionPayload) (res *CheckPermissionResult, err error)
	// Check if user has a role
	CheckRole(context.Context, *CheckRolePayload) (res *CheckRoleResult, err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// JWTAuth implements the authorization logic for the JWT security scheme.
	JWTAuth(ctx context.Context, token string, schema *security.JWTScheme) (context.Context, error)
}

// APIName is the name of the API as defined in the design.
const APIName = "frank"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "1.0.0"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "rbac"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [15]string{"list_permissions", "create_permission", "get_permission", "update_permission", "delete_permission", "list_roles", "create_role", "get_role", "update_role", "delete_role", "list_role_permissions", "add_role_permission", "remove_role_permission", "check_permission", "check_role"}

// AddRolePermissionPayload is the payload type of the rbac service
// add_role_permission method.
type AddRolePermissionPayload struct {
	JWT *string
	// Role ID
	ID         string
	Permission *AddRolePermissionRequest
}

// Add permission to role request
type AddRolePermissionRequest struct {
	// Permission ID
	PermissionID string
}

// AddRolePermissionResult is the result type of the rbac service
// add_role_permission method.
type AddRolePermissionResult struct {
	// Success message
	Message string
}

// Bad request response
type BadRequestError struct {
	// Error code
	Code string
	// Error message
	Message string
	// Additional error details
	Details any
	// Unique error ID
	ID *string
}

// CheckPermissionPayload is the payload type of the rbac service
// check_permission method.
type CheckPermissionPayload struct {
	JWT *string
	// Resource to check
	Resource string
	// Action to check
	Action string
}

// CheckPermissionResult is the result type of the rbac service
// check_permission method.
type CheckPermissionResult struct {
	// Whether user has the permission
	HasPermission bool
}

// CheckRolePayload is the payload type of the rbac service check_role method.
type CheckRolePayload struct {
	JWT *string
	// Role name to check
	Role string
	// Organization ID
	OrganizationID *string
}

// CheckRoleResult is the result type of the rbac service check_role method.
type CheckRoleResult struct {
	// Whether user has the role
	HasRole bool
}

// Conflict response
type ConflictError struct {
	// Error code
	Code string
	// Error message
	Message string
	// Additional error details
	Details any
	// Unique error ID
	ID *string
}

// CreatePermissionPayload is the payload type of the rbac service
// create_permission method.
type CreatePermissionPayload struct {
	JWT        *string
	Permission *CreatePermissionRequest
}

// Create permission request
type CreatePermissionRequest struct {
	// Permission name
	Name string
	// Permission description
	Description string
	// Resource this permission applies to
	Resource string
	// Action this permission allows
	Action string
	// JSON expression for conditional access
	Conditions *string
}

// CreateRolePayload is the payload type of the rbac service create_role method.
type CreateRolePayload struct {
	JWT  *string
	Role *CreateRoleRequest
}

// Create role request
type CreateRoleRequest struct {
	// Role name
	Name string
	// Role description
	Description *string
	// Organization ID
	OrganizationID *string
	// Whether this is a default role for new users
	IsDefault bool
}

// DeletePermissionPayload is the payload type of the rbac service
// delete_permission method.
type DeletePermissionPayload struct {
	JWT *string
	// Permission ID
	ID string
}

// DeleteRolePayload is the payload type of the rbac service delete_role method.
type DeleteRolePayload struct {
	JWT *string
	// Role ID
	ID string
}

// Forbidden response
type ForbiddenError struct {
	// Error code
	Code string
	// Error message
	Message string
	// Additional error details
	Details any
	// Unique error ID
	ID *string
}

// GetPermissionPayload is the payload type of the rbac service get_permission
// method.
type GetPermissionPayload struct {
	JWT *string
	// Permission ID
	ID string
}

// GetRolePayload is the payload type of the rbac service get_role method.
type GetRolePayload struct {
	JWT *string
	// Role ID
	ID string
}

// Internal server error response
type InternalServerError struct {
	// Error code
	Code string
	// Error message
	Message string
	// Additional error details
	Details any
	// Unique error ID
	ID *string
}

// ListPermissionsPayload is the payload type of the rbac service
// list_permissions method.
type ListPermissionsPayload struct {
	JWT *string
	// Pagination offset
	Offset int
	// Number of items to return
	Limit int
	// Filter by resource
	Resource *string
	// Filter by action
	Action *string
	// Search term
	Search *string
}

// ListPermissionsResponse is the result type of the rbac service
// list_permissions method.
type ListPermissionsResponse struct {
	Data       []*designtypes.PermissionResponse
	Pagination *designtypes.PaginationResponse
}

// ListRolePermissionsPayload is the payload type of the rbac service
// list_role_permissions method.
type ListRolePermissionsPayload struct {
	JWT *string
	// Role ID
	ID string
}

// ListRolePermissionsResult is the result type of the rbac service
// list_role_permissions method.
type ListRolePermissionsResult struct {
	Permissions []*designtypes.PermissionResponse
}

// ListRolesPayload is the payload type of the rbac service list_roles method.
type ListRolesPayload struct {
	JWT *string
	// Pagination offset
	Offset int
	// Number of items to return
	Limit int
	// Filter by organization ID
	OrganizationID *string
	// Search term
	Search *string
}

// ListRolesResult is the result type of the rbac service list_roles method.
type ListRolesResult struct {
	Data       []*designtypes.RoleResponse
	Pagination *designtypes.PaginationResponse
}

// Not found response
type NotFoundError struct {
	// Error code
	Code string
	// Error message
	Message string
	// Additional error details
	Details any
	// Unique error ID
	ID *string
}

// RemoveRolePermissionPayload is the payload type of the rbac service
// remove_role_permission method.
type RemoveRolePermissionPayload struct {
	JWT *string
	// Role ID
	ID string
	// Permission ID
	PermissionID string
}

// Unauthorized response
type UnauthorizedError struct {
	// Error code
	Code string
	// Error message
	Message string
	// Additional error details
	Details any
	// Unique error ID
	ID *string
}

// UpdatePermissionPayload is the payload type of the rbac service
// update_permission method.
type UpdatePermissionPayload struct {
	JWT *string
	// Permission ID
	ID         string
	Permission *UpdatePermissionRequest
}

// Update permission request
type UpdatePermissionRequest struct {
	// Permission name
	Name *string
	// Permission description
	Description *string
	// JSON expression for conditional access
	Conditions *string
}

// UpdateRolePayload is the payload type of the rbac service update_role method.
type UpdateRolePayload struct {
	JWT *string
	// Role ID
	ID   string
	Role *UpdateRoleRequest
}

// Update role request
type UpdateRoleRequest struct {
	// Role name
	Name *string
	// Role description
	Description *string
	// Whether this is a default role for new users
	IsDefault *bool
}

// Error returns an error description.
func (e *BadRequestError) Error() string {
	return "Bad request response"
}

// ErrorName returns "BadRequestError".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *BadRequestError) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "BadRequestError".
func (e *BadRequestError) GoaErrorName() string {
	return "bad_request"
}

// Error returns an error description.
func (e *ConflictError) Error() string {
	return "Conflict response"
}

// ErrorName returns "ConflictError".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *ConflictError) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "ConflictError".
func (e *ConflictError) GoaErrorName() string {
	return "conflict"
}

// Error returns an error description.
func (e *ForbiddenError) Error() string {
	return "Forbidden response"
}

// ErrorName returns "ForbiddenError".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *ForbiddenError) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "ForbiddenError".
func (e *ForbiddenError) GoaErrorName() string {
	return "forbidden"
}

// Error returns an error description.
func (e *InternalServerError) Error() string {
	return "Internal server error response"
}

// ErrorName returns "InternalServerError".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *InternalServerError) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "InternalServerError".
func (e *InternalServerError) GoaErrorName() string {
	return "internal_error"
}

// Error returns an error description.
func (e *NotFoundError) Error() string {
	return "Not found response"
}

// ErrorName returns "NotFoundError".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *NotFoundError) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "NotFoundError".
func (e *NotFoundError) GoaErrorName() string {
	return "not_found"
}

// Error returns an error description.
func (e *UnauthorizedError) Error() string {
	return "Unauthorized response"
}

// ErrorName returns "UnauthorizedError".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *UnauthorizedError) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "UnauthorizedError".
func (e *UnauthorizedError) GoaErrorName() string {
	return "unauthorized"
}
