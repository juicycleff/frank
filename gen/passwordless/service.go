// Code generated by goa v3.20.0, DO NOT EDIT.
//
// passwordless service
//
// Command:
// $ goa gen github.com/juicycleff/frank/design -o .

package passwordless

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Passwordless authentication service
type Service interface {
	// Initiate passwordless email authentication
	Email(context.Context, *EmailPayload) (res *EmailResult, err error)
	// Initiate passwordless SMS authentication
	Sms(context.Context, *SmsPayload) (res *SmsResult, err error)
	// Verify passwordless authentication
	Verify(context.Context, *VerifyPayload) (res *VerifyResult, err error)
	// Get available passwordless authentication methods
	Methods(context.Context, *MethodsPayload) (res *MethodsResult, err error)
	// Generate magic link for passwordless login
	MagicLink(context.Context, *MagicLinkPayload) (res *MagicLinkResult, err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// OAuth2Auth implements the authorization logic for the OAuth2 security scheme.
	OAuth2Auth(ctx context.Context, token string, schema *security.OAuth2Scheme) (context.Context, error)
	// APIKeyAuth implements the authorization logic for the APIKey security scheme.
	APIKeyAuth(ctx context.Context, key string, schema *security.APIKeyScheme) (context.Context, error)
	// JWTAuth implements the authorization logic for the JWT security scheme.
	JWTAuth(ctx context.Context, token string, schema *security.JWTScheme) (context.Context, error)
}

// APIName is the name of the API as defined in the design.
const APIName = "frank"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "1.0.0"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "passwordless"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [5]string{"email", "sms", "verify", "methods", "magic_link"}

// Bad request response
type BadRequestError struct {
	// Error code
	Code string
	// Error message
	Message string
	// Additional error details
	Details any
	// Unique error ID
	ID *string
}

// EmailPayload is the payload type of the passwordless service email method.
type EmailPayload struct {
	// OAuth2 access token
	Oauth2 *string
	// API key
	XAPIKey *string
	// JWT token
	JWT *string
	// User email
	Email string
	// URL to redirect after successful authentication
	RedirectURL *string
}

// EmailResult is the result type of the passwordless service email method.
type EmailResult struct {
	// Success message
	Message string
	// Verification ID
	VerificationID string
}

// Forbidden response
type ForbiddenError struct {
	// Error code
	Code string
	// Error message
	Message string
	// Additional error details
	Details any
	// Unique error ID
	ID *string
}

// Internal server error response
type InternalServerError struct {
	// Error code
	Code string
	// Error message
	Message string
	// Additional error details
	Details any
	// Unique error ID
	ID *string
}

// MagicLinkPayload is the payload type of the passwordless service magic_link
// method.
type MagicLinkPayload struct {
	JWT *string
	// User email
	Email string
	// User ID
	UserID string
	// URL to redirect after authentication
	RedirectURL string
	// Link expiry in seconds
	ExpiresIn int
}

// MagicLinkResult is the result type of the passwordless service magic_link
// method.
type MagicLinkResult struct {
	// Generated magic link
	MagicLink string
	// Expiry in seconds
	ExpiresIn int
}

// MethodsPayload is the payload type of the passwordless service methods
// method.
type MethodsPayload struct {
	// OAuth2 access token
	Oauth2 *string
	// API key
	XAPIKey *string
	// JWT token
	JWT *string
}

// MethodsResult is the result type of the passwordless service methods method.
type MethodsResult struct {
	// Whether passwordless auth is enabled
	Enabled bool
	// Available methods
	Methods []string
}

// Not found response
type NotFoundError struct {
	// Error code
	Code string
	// Error message
	Message string
	// Additional error details
	Details any
	// Unique error ID
	ID *string
}

// SmsPayload is the payload type of the passwordless service sms method.
type SmsPayload struct {
	// OAuth2 access token
	Oauth2 *string
	// API key
	XAPIKey *string
	// JWT token
	JWT *string
	// User phone number
	PhoneNumber string
	// URL to redirect after successful authentication
	RedirectURL *string
}

// SmsResult is the result type of the passwordless service sms method.
type SmsResult struct {
	// Success message
	Message string
	// Verification ID
	VerificationID string
}

// Unauthorized response
type UnauthorizedError struct {
	// Error code
	Code string
	// Error message
	Message string
	// Additional error details
	Details any
	// Unique error ID
	ID *string
}

// User information
type User struct {
	// User ID
	ID string
	// User email
	Email string
	// User first name
	FirstName *string
	// User last name
	LastName *string
	// Whether email is verified
	EmailVerified bool
	// User phone number
	PhoneNumber *string
	// Whether phone is verified
	PhoneVerified *bool
	// URL to user's profile image
	ProfileImageURL *string
	// User's locale preference
	Locale *string
	// User metadata
	Metadata map[string]any
	// Whether account is active
	Active bool
	// Account creation timestamp
	CreatedAt string
	// Account last update timestamp
	UpdatedAt string
}

// VerifyPayload is the payload type of the passwordless service verify method.
type VerifyPayload struct {
	// OAuth2 access token
	Oauth2 *string
	// API key
	XAPIKey *string
	// JWT token
	JWT *string
	// Verification token for email authentication
	Token *string
	// Phone number for SMS authentication
	PhoneNumber *string
	// Verification code for SMS authentication
	Code *string
	// Authentication type
	AuthType string
}

// VerifyResult is the result type of the passwordless service verify method.
type VerifyResult struct {
	// Whether authentication was successful
	Authenticated bool
	// User ID
	UserID string
	// User email
	Email *string
	// User data if authentication successful
	User *User
}

// Error returns an error description.
func (e *BadRequestError) Error() string {
	return "Bad request response"
}

// ErrorName returns "BadRequestError".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *BadRequestError) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "BadRequestError".
func (e *BadRequestError) GoaErrorName() string {
	return "bad_request"
}

// Error returns an error description.
func (e *ForbiddenError) Error() string {
	return "Forbidden response"
}

// ErrorName returns "ForbiddenError".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *ForbiddenError) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "ForbiddenError".
func (e *ForbiddenError) GoaErrorName() string {
	return "forbidden"
}

// Error returns an error description.
func (e *InternalServerError) Error() string {
	return "Internal server error response"
}

// ErrorName returns "InternalServerError".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *InternalServerError) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "InternalServerError".
func (e *InternalServerError) GoaErrorName() string {
	return "internal_error"
}

// Error returns an error description.
func (e *NotFoundError) Error() string {
	return "Not found response"
}

// ErrorName returns "NotFoundError".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *NotFoundError) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "NotFoundError".
func (e *NotFoundError) GoaErrorName() string {
	return "not_found"
}

// Error returns an error description.
func (e *UnauthorizedError) Error() string {
	return "Unauthorized response"
}

// ErrorName returns "UnauthorizedError".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *UnauthorizedError) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "UnauthorizedError".
func (e *UnauthorizedError) GoaErrorName() string {
	return "unauthorized"
}

// MakeBadRequest builds a goa.ServiceError from an error.
func MakeBadRequest(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "bad_request", false, false, false)
}

// MakeUnauthorized builds a goa.ServiceError from an error.
func MakeUnauthorized(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "unauthorized", false, false, false)
}
