// Code generated by goa v3.20.0, DO NOT EDIT.
//
// passwordless endpoints
//
// Command:
// $ goa gen github.com/juicycleff/frank/design -o .

package passwordless

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Endpoints wraps the "passwordless" service endpoints.
type Endpoints struct {
	Email     goa.Endpoint
	Sms       goa.Endpoint
	Verify    goa.Endpoint
	Methods   goa.Endpoint
	MagicLink goa.Endpoint
}

// NewEndpoints wraps the methods of the "passwordless" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	// Casting service to Auther interface
	a := s.(Auther)
	return &Endpoints{
		Email:     NewEmailEndpoint(s, a.OAuth2Auth, a.APIKeyAuth, a.JWTAuth),
		Sms:       NewSmsEndpoint(s, a.OAuth2Auth, a.APIKeyAuth, a.JWTAuth),
		Verify:    NewVerifyEndpoint(s, a.OAuth2Auth, a.APIKeyAuth, a.JWTAuth),
		Methods:   NewMethodsEndpoint(s, a.OAuth2Auth, a.APIKeyAuth, a.JWTAuth),
		MagicLink: NewMagicLinkEndpoint(s, a.JWTAuth),
	}
}

// Use applies the given middleware to all the "passwordless" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.Email = m(e.Email)
	e.Sms = m(e.Sms)
	e.Verify = m(e.Verify)
	e.Methods = m(e.Methods)
	e.MagicLink = m(e.MagicLink)
}

// NewEmailEndpoint returns an endpoint function that calls the method "email"
// of service "passwordless".
func NewEmailEndpoint(s Service, authOAuth2Fn security.AuthOAuth2Func, authAPIKeyFn security.AuthAPIKeyFunc, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*EmailPayload)
		var err error
		sc := security.OAuth2Scheme{
			Name:           "oauth2",
			Scopes:         []string{"profile", "email", "openid", "offline_access", "api"},
			RequiredScopes: []string{},
			Flows: []*security.OAuthFlow{
				&security.OAuthFlow{
					Type:             "authorization_code",
					AuthorizationURL: "/v1/oauth/authorize",
					TokenURL:         "/v1/oauth/token",
					RefreshURL:       "/v1/oauth/refresh",
				},
			},
		}
		var token string
		if p.Oauth2 != nil {
			token = *p.Oauth2
		}
		ctx, err = authOAuth2Fn(ctx, token, &sc)
		if err == nil {
			sc := security.APIKeyScheme{
				Name:           "api_key",
				Scopes:         []string{},
				RequiredScopes: []string{},
			}
			var key string
			if p.XAPIKey != nil {
				key = *p.XAPIKey
			}
			ctx, err = authAPIKeyFn(ctx, key, &sc)
		}
		if err == nil {
			sc := security.JWTScheme{
				Name:           "jwt",
				Scopes:         []string{"api:read", "api:write"},
				RequiredScopes: []string{},
			}
			var token string
			if p.JWT != nil {
				token = *p.JWT
			}
			ctx, err = authJWTFn(ctx, token, &sc)
		}
		if err != nil {
			return nil, err
		}
		return s.Email(ctx, p)
	}
}

// NewSmsEndpoint returns an endpoint function that calls the method "sms" of
// service "passwordless".
func NewSmsEndpoint(s Service, authOAuth2Fn security.AuthOAuth2Func, authAPIKeyFn security.AuthAPIKeyFunc, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*SmsPayload)
		var err error
		sc := security.OAuth2Scheme{
			Name:           "oauth2",
			Scopes:         []string{"profile", "email", "openid", "offline_access", "api"},
			RequiredScopes: []string{},
			Flows: []*security.OAuthFlow{
				&security.OAuthFlow{
					Type:             "authorization_code",
					AuthorizationURL: "/v1/oauth/authorize",
					TokenURL:         "/v1/oauth/token",
					RefreshURL:       "/v1/oauth/refresh",
				},
			},
		}
		var token string
		if p.Oauth2 != nil {
			token = *p.Oauth2
		}
		ctx, err = authOAuth2Fn(ctx, token, &sc)
		if err == nil {
			sc := security.APIKeyScheme{
				Name:           "api_key",
				Scopes:         []string{},
				RequiredScopes: []string{},
			}
			var key string
			if p.XAPIKey != nil {
				key = *p.XAPIKey
			}
			ctx, err = authAPIKeyFn(ctx, key, &sc)
		}
		if err == nil {
			sc := security.JWTScheme{
				Name:           "jwt",
				Scopes:         []string{"api:read", "api:write"},
				RequiredScopes: []string{},
			}
			var token string
			if p.JWT != nil {
				token = *p.JWT
			}
			ctx, err = authJWTFn(ctx, token, &sc)
		}
		if err != nil {
			return nil, err
		}
		return s.Sms(ctx, p)
	}
}

// NewVerifyEndpoint returns an endpoint function that calls the method
// "verify" of service "passwordless".
func NewVerifyEndpoint(s Service, authOAuth2Fn security.AuthOAuth2Func, authAPIKeyFn security.AuthAPIKeyFunc, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*VerifyPayload)
		var err error
		sc := security.OAuth2Scheme{
			Name:           "oauth2",
			Scopes:         []string{"profile", "email", "openid", "offline_access", "api"},
			RequiredScopes: []string{},
			Flows: []*security.OAuthFlow{
				&security.OAuthFlow{
					Type:             "authorization_code",
					AuthorizationURL: "/v1/oauth/authorize",
					TokenURL:         "/v1/oauth/token",
					RefreshURL:       "/v1/oauth/refresh",
				},
			},
		}
		var token string
		if p.Oauth2 != nil {
			token = *p.Oauth2
		}
		ctx, err = authOAuth2Fn(ctx, token, &sc)
		if err == nil {
			sc := security.APIKeyScheme{
				Name:           "api_key",
				Scopes:         []string{},
				RequiredScopes: []string{},
			}
			var key string
			if p.XAPIKey != nil {
				key = *p.XAPIKey
			}
			ctx, err = authAPIKeyFn(ctx, key, &sc)
		}
		if err == nil {
			sc := security.JWTScheme{
				Name:           "jwt",
				Scopes:         []string{"api:read", "api:write"},
				RequiredScopes: []string{},
			}
			var token string
			if p.JWT != nil {
				token = *p.JWT
			}
			ctx, err = authJWTFn(ctx, token, &sc)
		}
		if err != nil {
			return nil, err
		}
		return s.Verify(ctx, p)
	}
}

// NewMethodsEndpoint returns an endpoint function that calls the method
// "methods" of service "passwordless".
func NewMethodsEndpoint(s Service, authOAuth2Fn security.AuthOAuth2Func, authAPIKeyFn security.AuthAPIKeyFunc, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*MethodsPayload)
		var err error
		sc := security.OAuth2Scheme{
			Name:           "oauth2",
			Scopes:         []string{"profile", "email", "openid", "offline_access", "api"},
			RequiredScopes: []string{},
			Flows: []*security.OAuthFlow{
				&security.OAuthFlow{
					Type:             "authorization_code",
					AuthorizationURL: "/v1/oauth/authorize",
					TokenURL:         "/v1/oauth/token",
					RefreshURL:       "/v1/oauth/refresh",
				},
			},
		}
		var token string
		if p.Oauth2 != nil {
			token = *p.Oauth2
		}
		ctx, err = authOAuth2Fn(ctx, token, &sc)
		if err == nil {
			sc := security.APIKeyScheme{
				Name:           "api_key",
				Scopes:         []string{},
				RequiredScopes: []string{},
			}
			var key string
			if p.XAPIKey != nil {
				key = *p.XAPIKey
			}
			ctx, err = authAPIKeyFn(ctx, key, &sc)
		}
		if err == nil {
			sc := security.JWTScheme{
				Name:           "jwt",
				Scopes:         []string{"api:read", "api:write"},
				RequiredScopes: []string{},
			}
			var token string
			if p.JWT != nil {
				token = *p.JWT
			}
			ctx, err = authJWTFn(ctx, token, &sc)
		}
		if err != nil {
			return nil, err
		}
		return s.Methods(ctx, p)
	}
}

// NewMagicLinkEndpoint returns an endpoint function that calls the method
// "magic_link" of service "passwordless".
func NewMagicLinkEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*MagicLinkPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{},
		}
		var token string
		if p.JWT != nil {
			token = *p.JWT
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.MagicLink(ctx, p)
	}
}
