// Code generated by goa v3.20.0, DO NOT EDIT.
//
// organizations endpoints
//
// Command:
// $ goa gen github.com/juicycleff/frank/design -o .

package organizations

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Endpoints wraps the "organizations" service endpoints.
type Endpoints struct {
	List           goa.Endpoint
	Create         goa.Endpoint
	Get            goa.Endpoint
	Update         goa.Endpoint
	Delete         goa.Endpoint
	ListMembers    goa.Endpoint
	AddMember      goa.Endpoint
	UpdateMember   goa.Endpoint
	RemoveMember   goa.Endpoint
	ListFeatures   goa.Endpoint
	EnableFeature  goa.Endpoint
	DisableFeature goa.Endpoint
}

// NewEndpoints wraps the methods of the "organizations" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	// Casting service to Auther interface
	a := s.(Auther)
	return &Endpoints{
		List:           NewListEndpoint(s, a.JWTAuth),
		Create:         NewCreateEndpoint(s, a.JWTAuth),
		Get:            NewGetEndpoint(s, a.JWTAuth),
		Update:         NewUpdateEndpoint(s, a.JWTAuth),
		Delete:         NewDeleteEndpoint(s, a.JWTAuth),
		ListMembers:    NewListMembersEndpoint(s, a.JWTAuth),
		AddMember:      NewAddMemberEndpoint(s, a.JWTAuth),
		UpdateMember:   NewUpdateMemberEndpoint(s, a.JWTAuth),
		RemoveMember:   NewRemoveMemberEndpoint(s, a.JWTAuth),
		ListFeatures:   NewListFeaturesEndpoint(s, a.JWTAuth),
		EnableFeature:  NewEnableFeatureEndpoint(s, a.JWTAuth),
		DisableFeature: NewDisableFeatureEndpoint(s, a.JWTAuth),
	}
}

// Use applies the given middleware to all the "organizations" service
// endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.List = m(e.List)
	e.Create = m(e.Create)
	e.Get = m(e.Get)
	e.Update = m(e.Update)
	e.Delete = m(e.Delete)
	e.ListMembers = m(e.ListMembers)
	e.AddMember = m(e.AddMember)
	e.UpdateMember = m(e.UpdateMember)
	e.RemoveMember = m(e.RemoveMember)
	e.ListFeatures = m(e.ListFeatures)
	e.EnableFeature = m(e.EnableFeature)
	e.DisableFeature = m(e.DisableFeature)
}

// NewListEndpoint returns an endpoint function that calls the method "list" of
// service "organizations".
func NewListEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*ListPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{},
		}
		var token string
		if p.JWT != nil {
			token = *p.JWT
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.List(ctx, p)
	}
}

// NewCreateEndpoint returns an endpoint function that calls the method
// "create" of service "organizations".
func NewCreateEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*CreatePayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{},
		}
		var token string
		if p.JWT != nil {
			token = *p.JWT
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.Create(ctx, p)
	}
}

// NewGetEndpoint returns an endpoint function that calls the method "get" of
// service "organizations".
func NewGetEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*GetPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{},
		}
		var token string
		if p.JWT != nil {
			token = *p.JWT
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.Get(ctx, p)
	}
}

// NewUpdateEndpoint returns an endpoint function that calls the method
// "update" of service "organizations".
func NewUpdateEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*UpdatePayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{},
		}
		var token string
		if p.JWT != nil {
			token = *p.JWT
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.Update(ctx, p)
	}
}

// NewDeleteEndpoint returns an endpoint function that calls the method
// "delete" of service "organizations".
func NewDeleteEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*DeletePayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{},
		}
		var token string
		if p.JWT != nil {
			token = *p.JWT
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return nil, s.Delete(ctx, p)
	}
}

// NewListMembersEndpoint returns an endpoint function that calls the method
// "list_members" of service "organizations".
func NewListMembersEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*ListMembersPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{},
		}
		var token string
		if p.JWT != nil {
			token = *p.JWT
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.ListMembers(ctx, p)
	}
}

// NewAddMemberEndpoint returns an endpoint function that calls the method
// "add_member" of service "organizations".
func NewAddMemberEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*AddMemberPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{},
		}
		var token string
		if p.JWT != nil {
			token = *p.JWT
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.AddMember(ctx, p)
	}
}

// NewUpdateMemberEndpoint returns an endpoint function that calls the method
// "update_member" of service "organizations".
func NewUpdateMemberEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*UpdateMemberPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{},
		}
		var token string
		if p.JWT != nil {
			token = *p.JWT
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.UpdateMember(ctx, p)
	}
}

// NewRemoveMemberEndpoint returns an endpoint function that calls the method
// "remove_member" of service "organizations".
func NewRemoveMemberEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*RemoveMemberPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{},
		}
		var token string
		if p.JWT != nil {
			token = *p.JWT
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return nil, s.RemoveMember(ctx, p)
	}
}

// NewListFeaturesEndpoint returns an endpoint function that calls the method
// "list_features" of service "organizations".
func NewListFeaturesEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*ListFeaturesPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{},
		}
		var token string
		if p.JWT != nil {
			token = *p.JWT
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.ListFeatures(ctx, p)
	}
}

// NewEnableFeatureEndpoint returns an endpoint function that calls the method
// "enable_feature" of service "organizations".
func NewEnableFeatureEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*EnableFeaturePayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{},
		}
		var token string
		if p.JWT != nil {
			token = *p.JWT
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.EnableFeature(ctx, p)
	}
}

// NewDisableFeatureEndpoint returns an endpoint function that calls the method
// "disable_feature" of service "organizations".
func NewDisableFeatureEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*DisableFeaturePayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{},
		}
		var token string
		if p.JWT != nil {
			token = *p.JWT
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return nil, s.DisableFeature(ctx, p)
	}
}
