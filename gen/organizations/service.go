// Code generated by goa v3.20.0, DO NOT EDIT.
//
// organizations service
//
// Command:
// $ goa gen github.com/juicycleff/frank/design -o .

package organizations

import (
	"context"

	designtypes "github.com/juicycleff/frank/gen/designtypes"
	"goa.design/goa/v3/security"
)

// Organization management service
type Service interface {
	// List organizations
	List(context.Context, *ListPayload) (res *ListResult, err error)
	// Create a new organization
	Create(context.Context, *CreatePayload) (res *designtypes.Organization, err error)
	// Get organization by ID
	Get(context.Context, *GetPayload) (res *designtypes.Organization, err error)
	// Update organization
	Update(context.Context, *UpdatePayload) (res *designtypes.Organization, err error)
	// Delete organization
	Delete(context.Context, *DeletePayload) (err error)
	// List organization members
	ListMembers(context.Context, *ListMembersPayload) (res *ListMembersResult, err error)
	// Add member to organization
	AddMember(context.Context, *AddMemberPayload) (res *AddMemberResult, err error)
	// Update organization member
	UpdateMember(context.Context, *UpdateMemberPayload) (res *UpdateMemberResult, err error)
	// Remove member from organization
	RemoveMember(context.Context, *RemoveMemberPayload) (err error)
	// List organization features
	ListFeatures(context.Context, *ListFeaturesPayload) (res *ListFeaturesResult, err error)
	// Enable a feature for an organization
	EnableFeature(context.Context, *EnableFeaturePayload) (res *EnableFeatureResult, err error)
	// Disable a feature for an organization
	DisableFeature(context.Context, *DisableFeaturePayload) (err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// JWTAuth implements the authorization logic for the JWT security scheme.
	JWTAuth(ctx context.Context, token string, schema *security.JWTScheme) (context.Context, error)
}

// APIName is the name of the API as defined in the design.
const APIName = "frank"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "1.0.0"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "organizations"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [12]string{"list", "create", "get", "update", "delete", "list_members", "add_member", "update_member", "remove_member", "list_features", "enable_feature", "disable_feature"}

// AddMemberPayload is the payload type of the organizations service add_member
// method.
type AddMemberPayload struct {
	JWT *string
	// Organization ID
	ID     string
	Member *AddOrganizationMemberRequest
}

// AddMemberResult is the result type of the organizations service add_member
// method.
type AddMemberResult struct {
	// Success message
	Message string
}

// Add organization member request
type AddOrganizationMemberRequest struct {
	// User ID to add
	UserID string
	// Roles to assign
	Roles []string
}

// Bad request response
type BadRequestError struct {
	// Error code
	Code string
	// Error message
	Message string
	// Additional error details
	Details any
	// Unique error ID
	ID *string
}

// Conflict response
type ConflictError struct {
	// Error code
	Code string
	// Error message
	Message string
	// Additional error details
	Details any
	// Unique error ID
	ID *string
}

// Create organization request
type CreateOrganizationRequest struct {
	// Organization name
	Name string
	// Organization slug
	Slug *string
	// Organization domain
	Domain *string
	// Organization logo URL
	LogoURL *string
	// Organization plan
	Plan string
	// Organization metadata
	Metadata map[string]any
	// Number of trial days
	TrialDays *int
	// Features to enable
	Features []string
}

// CreatePayload is the payload type of the organizations service create method.
type CreatePayload struct {
	JWT          *string
	Organization *CreateOrganizationRequest
}

// DeletePayload is the payload type of the organizations service delete method.
type DeletePayload struct {
	JWT *string
	// Organization ID
	ID string
}

// DisableFeaturePayload is the payload type of the organizations service
// disable_feature method.
type DisableFeaturePayload struct {
	JWT *string
	// Organization ID
	ID string
	// Feature key
	FeatureKey string
}

// EnableFeaturePayload is the payload type of the organizations service
// enable_feature method.
type EnableFeaturePayload struct {
	JWT *string
	// Organization ID
	ID      string
	Feature *EnableFeatureRequest
}

// Enable feature request
type EnableFeatureRequest struct {
	// Feature key to enable
	FeatureKey string
	// Feature settings
	Settings map[string]any
}

// EnableFeatureResult is the result type of the organizations service
// enable_feature method.
type EnableFeatureResult struct {
	// Success message
	Message string
}

// Forbidden response
type ForbiddenError struct {
	// Error code
	Code string
	// Error message
	Message string
	// Additional error details
	Details any
	// Unique error ID
	ID *string
}

// GetPayload is the payload type of the organizations service get method.
type GetPayload struct {
	JWT *string
	// Organization ID
	ID string
}

// Internal server error response
type InternalServerError struct {
	// Error code
	Code string
	// Error message
	Message string
	// Additional error details
	Details any
	// Unique error ID
	ID *string
}

// ListFeaturesPayload is the payload type of the organizations service
// list_features method.
type ListFeaturesPayload struct {
	JWT *string
	// Organization ID
	ID string
}

// ListFeaturesResult is the result type of the organizations service
// list_features method.
type ListFeaturesResult struct {
	Features []*OrganizationFeatureResponse
}

// ListMembersPayload is the payload type of the organizations service
// list_members method.
type ListMembersPayload struct {
	JWT *string
	// Organization ID
	ID string
	// Pagination offset
	Offset int
	// Number of items to return
	Limit int
	// Search term
	Search *string
}

// ListMembersResult is the result type of the organizations service
// list_members method.
type ListMembersResult struct {
	Data       []*OrganizationMemberResponse
	Pagination *designtypes.Pagination
}

// ListPayload is the payload type of the organizations service list method.
type ListPayload struct {
	JWT *string
	// Pagination offset
	Offset int
	// Number of items to return
	Limit int
	// Search term
	Search *string
}

// ListResult is the result type of the organizations service list method.
type ListResult struct {
	Data       []*designtypes.Organization
	Pagination *designtypes.Pagination
}

// Not found response
type NotFoundError struct {
	// Error code
	Code string
	// Error message
	Message string
	// Additional error details
	Details any
	// Unique error ID
	ID *string
}

// Organization feature information
type OrganizationFeatureResponse struct {
	// Feature ID
	ID string
	// Feature key
	Key string
	// Feature name
	Name string
	// Feature description
	Description *string
	// Whether feature is enabled
	Enabled bool
	// Whether feature is premium
	IsPremium *bool
	// Feature component category
	Component *string
	// Feature settings
	Settings map[string]any
}

// Organization member information
type OrganizationMemberResponse struct {
	// User ID
	ID string
	// User email
	Email string
	// User first name
	FirstName *string
	// User last name
	LastName *string
	// User roles in organization
	Roles []string
	// When user joined the organization
	JoinedAt string
}

// RemoveMemberPayload is the payload type of the organizations service
// remove_member method.
type RemoveMemberPayload struct {
	JWT *string
	// Organization ID
	ID string
	// User ID
	UserID string
}

// Unauthorized response
type UnauthorizedError struct {
	// Error code
	Code string
	// Error message
	Message string
	// Additional error details
	Details any
	// Unique error ID
	ID *string
}

// UpdateMemberPayload is the payload type of the organizations service
// update_member method.
type UpdateMemberPayload struct {
	JWT *string
	// Organization ID
	ID string
	// User ID
	UserID string
	Member *UpdateOrganizationMemberRequest
}

// UpdateMemberResult is the result type of the organizations service
// update_member method.
type UpdateMemberResult struct {
	// Success message
	Message string
}

// Update organization member request
type UpdateOrganizationMemberRequest struct {
	// Roles to assign
	Roles []string
}

// Update organization request
type UpdateOrganizationRequest struct {
	// Organization name
	Name *string
	// Organization domain
	Domain *string
	// Organization logo URL
	LogoURL *string
	// Organization plan
	Plan *string
	// Whether organization is active
	Active *bool
	// Organization metadata
	Metadata map[string]any
}

// UpdatePayload is the payload type of the organizations service update method.
type UpdatePayload struct {
	JWT *string
	// Organization ID
	ID           string
	Organization *UpdateOrganizationRequest
}

// Error returns an error description.
func (e *BadRequestError) Error() string {
	return "Bad request response"
}

// ErrorName returns "BadRequestError".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *BadRequestError) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "BadRequestError".
func (e *BadRequestError) GoaErrorName() string {
	return "bad_request"
}

// Error returns an error description.
func (e *ConflictError) Error() string {
	return "Conflict response"
}

// ErrorName returns "ConflictError".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *ConflictError) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "ConflictError".
func (e *ConflictError) GoaErrorName() string {
	return "conflict"
}

// Error returns an error description.
func (e *ForbiddenError) Error() string {
	return "Forbidden response"
}

// ErrorName returns "ForbiddenError".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *ForbiddenError) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "ForbiddenError".
func (e *ForbiddenError) GoaErrorName() string {
	return "forbidden"
}

// Error returns an error description.
func (e *InternalServerError) Error() string {
	return "Internal server error response"
}

// ErrorName returns "InternalServerError".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *InternalServerError) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "InternalServerError".
func (e *InternalServerError) GoaErrorName() string {
	return "internal_error"
}

// Error returns an error description.
func (e *NotFoundError) Error() string {
	return "Not found response"
}

// ErrorName returns "NotFoundError".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *NotFoundError) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "NotFoundError".
func (e *NotFoundError) GoaErrorName() string {
	return "not_found"
}

// Error returns an error description.
func (e *UnauthorizedError) Error() string {
	return "Unauthorized response"
}

// ErrorName returns "UnauthorizedError".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *UnauthorizedError) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "UnauthorizedError".
func (e *UnauthorizedError) GoaErrorName() string {
	return "unauthorized"
}
