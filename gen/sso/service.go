// Code generated by goa v3.20.0, DO NOT EDIT.
//
// sso service
//
// Command:
// $ goa gen github.com/juicycleff/frank/design -o .

package sso

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Single Sign-On service
type Service interface {
	// List available SSO providers
	ListProviders(context.Context, *ListProvidersPayload) (res *ListProvidersResult, err error)
	// Initiate SSO authentication with a provider
	ProviderAuth(context.Context, *ProviderAuthPayload) (err error)
	// Handle SSO provider callback
	ProviderCallback(context.Context, *ProviderCallbackPayload) (res *ProviderCallbackResult, err error)
	// List identity providers
	ListIdentityProviders(context.Context, *ListIdentityProvidersPayload) (res *ListIdentityProvidersResult, err error)
	// Create a new identity provider
	CreateIdentityProvider(context.Context, *CreateIdentityProviderPayload) (res *IdentityProviderResponse, err error)
	// Get identity provider by ID
	GetIdentityProvider(context.Context, *GetIdentityProviderPayload) (res *IdentityProviderResponse, err error)
	// Update identity provider
	UpdateIdentityProvider(context.Context, *UpdateIdentityProviderPayload) (res *IdentityProviderResponse, err error)
	// Delete identity provider
	DeleteIdentityProvider(context.Context, *DeleteIdentityProviderPayload) (err error)
	// SAML metadata endpoint
	SamlMetadata(context.Context, *SamlMetadataPayload) (res *SamlMetadataResult, err error)
	// SAML assertion consumer service
	SamlAcs(context.Context, *SamlAcsPayload) (res string, err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// OAuth2Auth implements the authorization logic for the OAuth2 security scheme.
	OAuth2Auth(ctx context.Context, token string, schema *security.OAuth2Scheme) (context.Context, error)
	// APIKeyAuth implements the authorization logic for the APIKey security scheme.
	APIKeyAuth(ctx context.Context, key string, schema *security.APIKeyScheme) (context.Context, error)
	// JWTAuth implements the authorization logic for the JWT security scheme.
	JWTAuth(ctx context.Context, token string, schema *security.JWTScheme) (context.Context, error)
}

// APIName is the name of the API as defined in the design.
const APIName = "frank"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "1.0.0"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "sso"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [10]string{"list_providers", "provider_auth", "provider_callback", "list_identity_providers", "create_identity_provider", "get_identity_provider", "update_identity_provider", "delete_identity_provider", "saml_metadata", "saml_acs"}

// Bad request response
type BadRequestError struct {
	// Error code
	Code string
	// Error message
	Message string
	// Additional error details
	Details any
	// Unique error ID
	ID *string
}

// Conflict response
type ConflictError struct {
	// Error code
	Code string
	// Error message
	Message string
	// Additional error details
	Details any
	// Unique error ID
	ID *string
}

// CreateIdentityProviderPayload is the payload type of the sso service
// create_identity_provider method.
type CreateIdentityProviderPayload struct {
	JWT *string
	// Organization ID
	OrganizationID string
	Provider       *CreateIdentityProviderRequest
}

// Create identity provider request
type CreateIdentityProviderRequest struct {
	// Provider name
	Name string
	// Provider type
	ProviderType string
	// OAuth/OIDC client ID
	ClientID *string
	// OAuth/OIDC client secret
	ClientSecret *string
	// OIDC issuer URL
	Issuer *string
	// OAuth/OIDC authorization endpoint
	AuthorizationEndpoint *string
	// OAuth/OIDC token endpoint
	TokenEndpoint *string
	// OIDC userinfo endpoint
	UserinfoEndpoint *string
	// OIDC JWKS URI
	JwksURI *string
	// SAML metadata URL
	MetadataURL *string
	// OAuth/OIDC redirect URI
	RedirectURI *string
	// SAML certificate
	Certificate *string
	// SAML private key
	PrivateKey *string
	// Whether provider is active
	Active bool
	// Whether this is the primary provider
	Primary bool
	// Allowed email domains
	Domains []string
	// Attributes mapping
	AttributesMapping map[string]string
}

// DeleteIdentityProviderPayload is the payload type of the sso service
// delete_identity_provider method.
type DeleteIdentityProviderPayload struct {
	JWT *string
	// Provider ID
	ID string
}

// Forbidden response
type ForbiddenError struct {
	// Error code
	Code string
	// Error message
	Message string
	// Additional error details
	Details any
	// Unique error ID
	ID *string
}

// GetIdentityProviderPayload is the payload type of the sso service
// get_identity_provider method.
type GetIdentityProviderPayload struct {
	JWT *string
	// Provider ID
	ID string
}

// IdentityProviderResponse is the result type of the sso service
// create_identity_provider method.
type IdentityProviderResponse struct {
	// Provider ID
	ID string
	// Provider name
	Name string
	// Organization ID
	OrganizationID string
	// Provider type (oauth2, oidc, saml)
	ProviderType string
	// OAuth/OIDC client ID
	ClientID *string
	// OIDC issuer URL
	Issuer *string
	// OAuth/OIDC authorization endpoint
	AuthorizationEndpoint *string
	// OAuth/OIDC token endpoint
	TokenEndpoint *string
	// OIDC userinfo endpoint
	UserinfoEndpoint *string
	// OIDC JWKS URI
	JwksURI *string
	// SAML metadata URL
	MetadataURL *string
	// OAuth/OIDC redirect URI
	RedirectURI *string
	// Whether provider is active
	Active bool
	// Whether this is the primary provider
	Primary *bool
	// Allowed email domains
	Domains []string
	// Attributes mapping
	AttributesMapping map[string]string
	// Creation timestamp
	CreatedAt string
	// Last update timestamp
	UpdatedAt *string
}

// Internal server error response
type InternalServerError struct {
	// Error code
	Code string
	// Error message
	Message string
	// Additional error details
	Details any
	// Unique error ID
	ID *string
}

// ListIdentityProvidersPayload is the payload type of the sso service
// list_identity_providers method.
type ListIdentityProvidersPayload struct {
	JWT *string
	// Organization ID
	OrganizationID string
}

// ListIdentityProvidersResult is the result type of the sso service
// list_identity_providers method.
type ListIdentityProvidersResult struct {
	Providers []*IdentityProviderResponse
}

// ListProvidersPayload is the payload type of the sso service list_providers
// method.
type ListProvidersPayload struct {
	// OAuth2 access token
	Oauth2 *string
	// API key
	XAPIKey *string
	// JWT token
	JWT *string
	// Organization ID
	OrganizationID *string
}

// ListProvidersResult is the result type of the sso service list_providers
// method.
type ListProvidersResult struct {
	Providers []*SSOProvider
}

// Not found response
type NotFoundError struct {
	// Error code
	Code string
	// Error message
	Message string
	// Additional error details
	Details any
	// Unique error ID
	ID *string
}

// ProviderAuthPayload is the payload type of the sso service provider_auth
// method.
type ProviderAuthPayload struct {
	// OAuth2 access token
	Oauth2 *string
	// API key
	XAPIKey *string
	// JWT token
	JWT *string
	// Provider ID
	Provider string
	// Redirect URI after authentication
	RedirectURI *string
}

// ProviderCallbackPayload is the payload type of the sso service
// provider_callback method.
type ProviderCallbackPayload struct {
	// OAuth2 access token
	Oauth2 *string
	// API key
	XAPIKey *string
	// JWT token
	JWT *string
	// Provider ID
	Provider string
	// Authorization code
	Code *string
	// State parameter
	State *string
	// SAML response
	SAMLResponse *string
	// SAML relay state
	RelayState *string
}

// ProviderCallbackResult is the result type of the sso service
// provider_callback method.
type ProviderCallbackResult struct {
	// Whether authentication was successful
	Authenticated bool
	// User data if authentication successful
	User *User
}

// SSO Provider information
type SSOProvider struct {
	// Provider ID
	ID string
	// Provider name
	Name string
	// Provider type (oauth2, oidc, saml)
	Type string
	// Provider icon URL
	IconURL *string
}

// SamlAcsPayload is the payload type of the sso service saml_acs method.
type SamlAcsPayload struct {
	// Provider ID
	ID string
}

// SamlMetadataPayload is the payload type of the sso service saml_metadata
// method.
type SamlMetadataPayload struct {
	// Provider ID
	ID string
}

// SamlMetadataResult is the result type of the sso service saml_metadata
// method.
type SamlMetadataResult struct {
	// SAML metadata XML
	Metadata string
}

// Unauthorized response
type UnauthorizedError struct {
	// Error code
	Code string
	// Error message
	Message string
	// Additional error details
	Details any
	// Unique error ID
	ID *string
}

// UpdateIdentityProviderPayload is the payload type of the sso service
// update_identity_provider method.
type UpdateIdentityProviderPayload struct {
	JWT *string
	// Provider ID
	ID       string
	Provider *UpdateIdentityProviderRequest
}

// Update identity provider request
type UpdateIdentityProviderRequest struct {
	// Provider name
	Name *string
	// OAuth/OIDC client ID
	ClientID *string
	// OAuth/OIDC client secret
	ClientSecret *string
	// OIDC issuer URL
	Issuer *string
	// OAuth/OIDC authorization endpoint
	AuthorizationEndpoint *string
	// OAuth/OIDC token endpoint
	TokenEndpoint *string
	// OIDC userinfo endpoint
	UserinfoEndpoint *string
	// OIDC JWKS URI
	JwksURI *string
	// SAML metadata URL
	MetadataURL *string
	// OAuth/OIDC redirect URI
	RedirectURI *string
	// SAML certificate
	Certificate *string
	// SAML private key
	PrivateKey *string
	// Whether provider is active
	Active *bool
	// Whether this is the primary provider
	Primary *bool
	// Allowed email domains
	Domains []string
	// Attributes mapping
	AttributesMapping map[string]string
}

// User information
type User struct {
	// User ID
	ID string
	// User email
	Email string
	// User first name
	FirstName *string
	// User last name
	LastName *string
	// Whether email is verified
	EmailVerified bool
	// User phone number
	PhoneNumber *string
	// Whether phone is verified
	PhoneVerified *bool
	// URL to user's profile image
	ProfileImageURL *string
	// User's locale preference
	Locale *string
	// User metadata
	Metadata map[string]any
	// Whether account is active
	Active bool
	// Account creation timestamp
	CreatedAt string
	// Account last update timestamp
	UpdatedAt string
}

// Error returns an error description.
func (e *BadRequestError) Error() string {
	return "Bad request response"
}

// ErrorName returns "BadRequestError".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *BadRequestError) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "BadRequestError".
func (e *BadRequestError) GoaErrorName() string {
	return "bad_request"
}

// Error returns an error description.
func (e *ConflictError) Error() string {
	return "Conflict response"
}

// ErrorName returns "ConflictError".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *ConflictError) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "ConflictError".
func (e *ConflictError) GoaErrorName() string {
	return "conflict"
}

// Error returns an error description.
func (e *ForbiddenError) Error() string {
	return "Forbidden response"
}

// ErrorName returns "ForbiddenError".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *ForbiddenError) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "ForbiddenError".
func (e *ForbiddenError) GoaErrorName() string {
	return "forbidden"
}

// Error returns an error description.
func (e *InternalServerError) Error() string {
	return "Internal server error response"
}

// ErrorName returns "InternalServerError".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *InternalServerError) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "InternalServerError".
func (e *InternalServerError) GoaErrorName() string {
	return "internal_error"
}

// Error returns an error description.
func (e *NotFoundError) Error() string {
	return "Not found response"
}

// ErrorName returns "NotFoundError".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *NotFoundError) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "NotFoundError".
func (e *NotFoundError) GoaErrorName() string {
	return "not_found"
}

// Error returns an error description.
func (e *UnauthorizedError) Error() string {
	return "Unauthorized response"
}

// ErrorName returns "UnauthorizedError".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *UnauthorizedError) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "UnauthorizedError".
func (e *UnauthorizedError) GoaErrorName() string {
	return "unauthorized"
}

// MakeNotFound builds a goa.ServiceError from an error.
func MakeNotFound(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "not_found", false, false, false)
}

// MakeUnauthorized builds a goa.ServiceError from an error.
func MakeUnauthorized(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "unauthorized", false, false, false)
}

// MakeForbidden builds a goa.ServiceError from an error.
func MakeForbidden(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "forbidden", false, false, false)
}

// MakeBadRequest builds a goa.ServiceError from an error.
func MakeBadRequest(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "bad_request", false, false, false)
}
