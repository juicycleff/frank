// Code generated by goa v3.20.0, DO NOT EDIT.
//
// oauth_provider client
//
// Command:
// $ goa gen github.com/juicycleff/frank/design -o .

package oauthprovider

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Client is the "oauth_provider" service client.
type Client struct {
	AuthorizeEndpoint          goa.Endpoint
	TokenEndpoint              goa.Endpoint
	IntrospectEndpoint         goa.Endpoint
	RevokeEndpoint             goa.Endpoint
	ConsentEndpoint            goa.Endpoint
	UserinfoEndpoint           goa.Endpoint
	ListClientsEndpoint        goa.Endpoint
	CreateClientEndpoint       goa.Endpoint
	GetClientEndpoint          goa.Endpoint
	UpdateClientEndpoint       goa.Endpoint
	DeleteClientEndpoint       goa.Endpoint
	RotateClientSecretEndpoint goa.Endpoint
	ListScopesEndpoint         goa.Endpoint
	CreateScopeEndpoint        goa.Endpoint
	GetScopeEndpoint           goa.Endpoint
	UpdateScopeEndpoint        goa.Endpoint
	DeleteScopeEndpoint        goa.Endpoint
	OidcConfigurationEndpoint  goa.Endpoint
	JwksEndpoint               goa.Endpoint
}

// NewClient initializes a "oauth_provider" service client given the endpoints.
func NewClient(authorize, token, introspect, revoke, consent, userinfo, listClients, createClient, getClient, updateClient, deleteClient, rotateClientSecret, listScopes, createScope, getScope, updateScope, deleteScope, oidcConfiguration, jwks goa.Endpoint) *Client {
	return &Client{
		AuthorizeEndpoint:          authorize,
		TokenEndpoint:              token,
		IntrospectEndpoint:         introspect,
		RevokeEndpoint:             revoke,
		ConsentEndpoint:            consent,
		UserinfoEndpoint:           userinfo,
		ListClientsEndpoint:        listClients,
		CreateClientEndpoint:       createClient,
		GetClientEndpoint:          getClient,
		UpdateClientEndpoint:       updateClient,
		DeleteClientEndpoint:       deleteClient,
		RotateClientSecretEndpoint: rotateClientSecret,
		ListScopesEndpoint:         listScopes,
		CreateScopeEndpoint:        createScope,
		GetScopeEndpoint:           getScope,
		UpdateScopeEndpoint:        updateScope,
		DeleteScopeEndpoint:        deleteScope,
		OidcConfigurationEndpoint:  oidcConfiguration,
		JwksEndpoint:               jwks,
	}
}

// Authorize calls the "authorize" endpoint of the "oauth_provider" service.
// Authorize may return the following errors:
//   - "bad_request" (type *BadRequestError)
//   - "unauthorized" (type *UnauthorizedError)
//   - "forbidden" (type *ForbiddenError)
//   - "not_found" (type *NotFoundError)
//   - "conflict" (type *ConflictError)
//   - "internal_error" (type *InternalServerError)
//   - error: internal error
func (c *Client) Authorize(ctx context.Context, p *AuthorizePayload) (res string, err error) {
	var ires any
	ires, err = c.AuthorizeEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(string), nil
}

// Token calls the "token" endpoint of the "oauth_provider" service.
// Token may return the following errors:
//   - "bad_request" (type *BadRequestError)
//   - "unauthorized" (type *UnauthorizedError)
//   - "forbidden" (type *ForbiddenError)
//   - "not_found" (type *NotFoundError)
//   - "conflict" (type *ConflictError)
//   - "internal_error" (type *InternalServerError)
//   - error: internal error
func (c *Client) Token(ctx context.Context, p *TokenPayload) (res *TokenResult, err error) {
	var ires any
	ires, err = c.TokenEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*TokenResult), nil
}

// Introspect calls the "introspect" endpoint of the "oauth_provider" service.
// Introspect may return the following errors:
//   - "unauthorized" (type *UnauthorizedError)
//   - "bad_request" (type *BadRequestError)
//   - "forbidden" (type *ForbiddenError)
//   - "not_found" (type *NotFoundError)
//   - "conflict" (type *ConflictError)
//   - "internal_error" (type *InternalServerError)
//   - error: internal error
func (c *Client) Introspect(ctx context.Context, p *IntrospectPayload) (res *IntrospectResult, err error) {
	var ires any
	ires, err = c.IntrospectEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*IntrospectResult), nil
}

// Revoke calls the "revoke" endpoint of the "oauth_provider" service.
// Revoke may return the following errors:
//   - "bad_request" (type *BadRequestError)
//   - "unauthorized" (type *UnauthorizedError)
//   - "forbidden" (type *ForbiddenError)
//   - "not_found" (type *NotFoundError)
//   - "conflict" (type *ConflictError)
//   - "internal_error" (type *InternalServerError)
//   - error: internal error
func (c *Client) Revoke(ctx context.Context, p *RevokePayload) (err error) {
	_, err = c.RevokeEndpoint(ctx, p)
	return
}

// Consent calls the "consent" endpoint of the "oauth_provider" service.
// Consent may return the following errors:
//   - "unauthorized" (type *UnauthorizedError)
//   - "forbidden" (type *ForbiddenError)
//   - "bad_request" (type *BadRequestError)
//   - "not_found" (type *NotFoundError)
//   - "conflict" (type *ConflictError)
//   - "internal_error" (type *InternalServerError)
//   - error: internal error
func (c *Client) Consent(ctx context.Context, p *ConsentPayload) (res *ConsentResult, err error) {
	var ires any
	ires, err = c.ConsentEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*ConsentResult), nil
}

// Userinfo calls the "userinfo" endpoint of the "oauth_provider" service.
// Userinfo may return the following errors:
//   - "unauthorized" (type *UnauthorizedError)
//   - "bad_request" (type *BadRequestError)
//   - "forbidden" (type *ForbiddenError)
//   - "not_found" (type *NotFoundError)
//   - "conflict" (type *ConflictError)
//   - "internal_error" (type *InternalServerError)
//   - error: internal error
func (c *Client) Userinfo(ctx context.Context, p *UserinfoPayload) (res *UserinfoResult, err error) {
	var ires any
	ires, err = c.UserinfoEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*UserinfoResult), nil
}

// ListClients calls the "list_clients" endpoint of the "oauth_provider"
// service.
// ListClients may return the following errors:
//   - "unauthorized" (type *UnauthorizedError)
//   - "forbidden" (type *ForbiddenError)
//   - "bad_request" (type *BadRequestError)
//   - "not_found" (type *NotFoundError)
//   - "conflict" (type *ConflictError)
//   - "internal_error" (type *InternalServerError)
//   - error: internal error
func (c *Client) ListClients(ctx context.Context, p *ListClientsPayload) (res *ListClientsResult, err error) {
	var ires any
	ires, err = c.ListClientsEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*ListClientsResult), nil
}

// CreateClient calls the "create_client" endpoint of the "oauth_provider"
// service.
// CreateClient may return the following errors:
//   - "not_found" (type *NotFoundError)
//   - "unauthorized" (type *UnauthorizedError)
//   - "forbidden" (type *ForbiddenError)
//   - "bad_request" (type *BadRequestError)
//   - "conflict" (type *ConflictError)
//   - "internal_error" (type *InternalServerError)
//   - error: internal error
func (c *Client) CreateClient(ctx context.Context, p *CreateClientPayload) (res *OAuthClientWithSecretResponse, err error) {
	var ires any
	ires, err = c.CreateClientEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*OAuthClientWithSecretResponse), nil
}

// GetClient calls the "get_client" endpoint of the "oauth_provider" service.
// GetClient may return the following errors:
//   - "not_found" (type *NotFoundError)
//   - "unauthorized" (type *UnauthorizedError)
//   - "forbidden" (type *ForbiddenError)
//   - "bad_request" (type *BadRequestError)
//   - "conflict" (type *ConflictError)
//   - "internal_error" (type *InternalServerError)
//   - error: internal error
func (c *Client) GetClient(ctx context.Context, p *GetClientPayload) (res *OAuthClientResponse, err error) {
	var ires any
	ires, err = c.GetClientEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*OAuthClientResponse), nil
}

// UpdateClient calls the "update_client" endpoint of the "oauth_provider"
// service.
// UpdateClient may return the following errors:
//   - "bad_request" (type *BadRequestError)
//   - "not_found" (type *NotFoundError)
//   - "unauthorized" (type *UnauthorizedError)
//   - "forbidden" (type *ForbiddenError)
//   - "conflict" (type *ConflictError)
//   - "internal_error" (type *InternalServerError)
//   - error: internal error
func (c *Client) UpdateClient(ctx context.Context, p *UpdateClientPayload) (res *OAuthClientResponse, err error) {
	var ires any
	ires, err = c.UpdateClientEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*OAuthClientResponse), nil
}

// DeleteClient calls the "delete_client" endpoint of the "oauth_provider"
// service.
// DeleteClient may return the following errors:
//   - "not_found" (type *NotFoundError)
//   - "unauthorized" (type *UnauthorizedError)
//   - "forbidden" (type *ForbiddenError)
//   - "bad_request" (type *BadRequestError)
//   - "conflict" (type *ConflictError)
//   - "internal_error" (type *InternalServerError)
//   - error: internal error
func (c *Client) DeleteClient(ctx context.Context, p *DeleteClientPayload) (err error) {
	_, err = c.DeleteClientEndpoint(ctx, p)
	return
}

// RotateClientSecret calls the "rotate_client_secret" endpoint of the
// "oauth_provider" service.
// RotateClientSecret may return the following errors:
//   - "not_found" (type *NotFoundError)
//   - "unauthorized" (type *UnauthorizedError)
//   - "forbidden" (type *ForbiddenError)
//   - "bad_request" (type *BadRequestError)
//   - "conflict" (type *ConflictError)
//   - "internal_error" (type *InternalServerError)
//   - error: internal error
func (c *Client) RotateClientSecret(ctx context.Context, p *RotateClientSecretPayload) (res *RotateClientSecretResult, err error) {
	var ires any
	ires, err = c.RotateClientSecretEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*RotateClientSecretResult), nil
}

// ListScopes calls the "list_scopes" endpoint of the "oauth_provider" service.
// ListScopes may return the following errors:
//   - "unauthorized" (type *UnauthorizedError)
//   - "bad_request" (type *BadRequestError)
//   - "forbidden" (type *ForbiddenError)
//   - "not_found" (type *NotFoundError)
//   - "conflict" (type *ConflictError)
//   - "internal_error" (type *InternalServerError)
//   - error: internal error
func (c *Client) ListScopes(ctx context.Context, p *ListScopesPayload) (res *ListScopesResult, err error) {
	var ires any
	ires, err = c.ListScopesEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*ListScopesResult), nil
}

// CreateScope calls the "create_scope" endpoint of the "oauth_provider"
// service.
// CreateScope may return the following errors:
//   - "bad_request" (type *BadRequestError)
//   - "conflict" (type *ConflictError)
//   - "unauthorized" (type *UnauthorizedError)
//   - "forbidden" (type *ForbiddenError)
//   - "not_found" (type *NotFoundError)
//   - "internal_error" (type *InternalServerError)
//   - error: internal error
func (c *Client) CreateScope(ctx context.Context, p *CreateScopePayload) (res *OAuthScopeResponse, err error) {
	var ires any
	ires, err = c.CreateScopeEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*OAuthScopeResponse), nil
}

// GetScope calls the "get_scope" endpoint of the "oauth_provider" service.
// GetScope may return the following errors:
//   - "not_found" (type *NotFoundError)
//   - "unauthorized" (type *UnauthorizedError)
//   - "bad_request" (type *BadRequestError)
//   - "forbidden" (type *ForbiddenError)
//   - "conflict" (type *ConflictError)
//   - "internal_error" (type *InternalServerError)
//   - error: internal error
func (c *Client) GetScope(ctx context.Context, p *GetScopePayload) (res *OAuthScopeResponse, err error) {
	var ires any
	ires, err = c.GetScopeEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*OAuthScopeResponse), nil
}

// UpdateScope calls the "update_scope" endpoint of the "oauth_provider"
// service.
// UpdateScope may return the following errors:
//   - "bad_request" (type *BadRequestError)
//   - "not_found" (type *NotFoundError)
//   - "unauthorized" (type *UnauthorizedError)
//   - "forbidden" (type *ForbiddenError)
//   - "conflict" (type *ConflictError)
//   - "internal_error" (type *InternalServerError)
//   - error: internal error
func (c *Client) UpdateScope(ctx context.Context, p *UpdateScopePayload) (res *OAuthScopeResponse, err error) {
	var ires any
	ires, err = c.UpdateScopeEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*OAuthScopeResponse), nil
}

// DeleteScope calls the "delete_scope" endpoint of the "oauth_provider"
// service.
// DeleteScope may return the following errors:
//   - "not_found" (type *NotFoundError)
//   - "unauthorized" (type *UnauthorizedError)
//   - "forbidden" (type *ForbiddenError)
//   - "bad_request" (type *BadRequestError)
//   - "conflict" (type *ConflictError)
//   - "internal_error" (type *InternalServerError)
//   - error: internal error
func (c *Client) DeleteScope(ctx context.Context, p *DeleteScopePayload) (err error) {
	_, err = c.DeleteScopeEndpoint(ctx, p)
	return
}

// OidcConfiguration calls the "oidc_configuration" endpoint of the
// "oauth_provider" service.
// OidcConfiguration may return the following errors:
//   - "bad_request" (type *BadRequestError)
//   - "unauthorized" (type *UnauthorizedError)
//   - "forbidden" (type *ForbiddenError)
//   - "not_found" (type *NotFoundError)
//   - "conflict" (type *ConflictError)
//   - "internal_error" (type *InternalServerError)
//   - error: internal error
func (c *Client) OidcConfiguration(ctx context.Context) (res *OidcConfigurationResult, err error) {
	var ires any
	ires, err = c.OidcConfigurationEndpoint(ctx, nil)
	if err != nil {
		return
	}
	return ires.(*OidcConfigurationResult), nil
}

// Jwks calls the "jwks" endpoint of the "oauth_provider" service.
// Jwks may return the following errors:
//   - "bad_request" (type *BadRequestError)
//   - "unauthorized" (type *UnauthorizedError)
//   - "forbidden" (type *ForbiddenError)
//   - "not_found" (type *NotFoundError)
//   - "conflict" (type *ConflictError)
//   - "internal_error" (type *InternalServerError)
//   - error: internal error
func (c *Client) Jwks(ctx context.Context) (res *JwksResult, err error) {
	var ires any
	ires, err = c.JwksEndpoint(ctx, nil)
	if err != nil {
		return
	}
	return ires.(*JwksResult), nil
}
