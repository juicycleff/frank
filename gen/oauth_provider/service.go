// Code generated by goa v3.20.0, DO NOT EDIT.
//
// oauth_provider service
//
// Command:
// $ goa gen github.com/juicycleff/frank/design -o .

package oauthprovider

import (
	"context"

	designtypes "github.com/juicycleff/frank/gen/designtypes"
	"goa.design/goa/v3/security"
)

// OAuth2 provider service
type Service interface {
	// OAuth2 authorization endpoint
	Authorize(context.Context, *AuthorizePayload) (res string, err error)
	// OAuth2 token endpoint
	Token(context.Context, *TokenPayload) (res *TokenResult, err error)
	// OAuth2 token introspection endpoint
	Introspect(context.Context, *IntrospectPayload) (res *IntrospectResult, err error)
	// OAuth2 token revocation endpoint
	Revoke(context.Context, *RevokePayload) (err error)
	// Handle user consent for OAuth authorization
	Consent(context.Context, *ConsentPayload) (res *ConsentResult, err error)
	// OAuth2 UserInfo endpoint for OpenID Connect
	Userinfo(context.Context, *UserinfoPayload) (res *UserinfoResult, err error)
	// List OAuth clients
	ListClients(context.Context, *ListClientsPayload) (res *ListClientsResult, err error)
	// Create a new OAuth client
	CreateClient(context.Context, *CreateClientPayload) (res *OAuthClientWithSecretResponse, err error)
	// Get OAuth client by ID
	GetClient(context.Context, *GetClientPayload) (res *OAuthClientResponse, err error)
	// Update OAuth client
	UpdateClient(context.Context, *UpdateClientPayload) (res *OAuthClientResponse, err error)
	// Delete OAuth client
	DeleteClient(context.Context, *DeleteClientPayload) (err error)
	// Rotate OAuth client secret
	RotateClientSecret(context.Context, *RotateClientSecretPayload) (res *RotateClientSecretResult, err error)
	// List OAuth scopes
	ListScopes(context.Context, *ListScopesPayload) (res *ListScopesResult, err error)
	// Create a new OAuth scope
	CreateScope(context.Context, *CreateScopePayload) (res *OAuthScopeResponse, err error)
	// Get OAuth scope by ID
	GetScope(context.Context, *GetScopePayload) (res *OAuthScopeResponse, err error)
	// Update OAuth scope
	UpdateScope(context.Context, *UpdateScopePayload) (res *OAuthScopeResponse, err error)
	// Delete OAuth scope
	DeleteScope(context.Context, *DeleteScopePayload) (err error)
	// OpenID Connect discovery configuration
	OidcConfiguration(context.Context) (res *OidcConfigurationResult, err error)
	// JSON Web Key Set
	Jwks(context.Context) (res *JwksResult, err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// OAuth2Auth implements the authorization logic for the OAuth2 security scheme.
	OAuth2Auth(ctx context.Context, token string, schema *security.OAuth2Scheme) (context.Context, error)
	// APIKeyAuth implements the authorization logic for the APIKey security scheme.
	APIKeyAuth(ctx context.Context, key string, schema *security.APIKeyScheme) (context.Context, error)
	// JWTAuth implements the authorization logic for the JWT security scheme.
	JWTAuth(ctx context.Context, token string, schema *security.JWTScheme) (context.Context, error)
}

// APIName is the name of the API as defined in the design.
const APIName = "frank"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "1.0.0"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "oauth_provider"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [19]string{"authorize", "token", "introspect", "revoke", "consent", "userinfo", "list_clients", "create_client", "get_client", "update_client", "delete_client", "rotate_client_secret", "list_scopes", "create_scope", "get_scope", "update_scope", "delete_scope", "oidc_configuration", "jwks"}

// AuthorizePayload is the payload type of the oauth_provider service authorize
// method.
type AuthorizePayload struct {
	// OAuth2 access token
	Oauth2 *string
	// API key
	XAPIKey *string
	// JWT token
	JWT *string
	// OAuth client identifier
	ClientID string
	// OAuth response type
	ResponseType string
	// Redirect URI after authorization
	RedirectURI string
	// Requested scopes (space-separated)
	Scope *string
	// OAuth state parameter
	State *string
	// PKCE code challenge
	CodeChallenge *string
	// PKCE code challenge method
	CodeChallengeMethod *string
}

// Bad request response
type BadRequestError struct {
	// Error code
	Code string
	// Error message
	Message string
	// Additional error details
	Details any
	// Unique error ID
	ID *string
}

// Conflict response
type ConflictError struct {
	// Error code
	Code string
	// Error message
	Message string
	// Additional error details
	Details any
	// Unique error ID
	ID *string
}

// ConsentPayload is the payload type of the oauth_provider service consent
// method.
type ConsentPayload struct {
	JWT *string
	// OAuth client ID
	ClientID string
	// Requested scopes (space-separated)
	Scope string
	// Redirect URI
	RedirectURI string
	// OAuth state parameter
	State *string
	// Whether consent is approved
	Approved bool
}

// ConsentResult is the result type of the oauth_provider service consent
// method.
type ConsentResult struct {
	// Redirect URI with authorization code
	RedirectURI string
}

// CreateClientPayload is the payload type of the oauth_provider service
// create_client method.
type CreateClientPayload struct {
	JWT *string
	// Client name
	ClientName string
	// Client description
	ClientDescription *string
	// Client URI
	ClientURI *string
	// Logo URI
	LogoURI *string
	// Authorized redirect URIs
	RedirectUris []string
	// Authorized post-logout redirect URIs
	PostLogoutRedirectUris []string
	// Allowed CORS origins
	AllowedCorsOrigins []string
	// Allowed grant types
	AllowedGrantTypes []string
	// Whether client is public
	Public bool
	// Access token expiry in seconds
	TokenExpirySeconds int
	// Refresh token expiry in seconds
	RefreshTokenExpirySeconds int
	// Whether PKCE is required
	RequiresPkce bool
	// Whether user consent is required
	RequiresConsent bool
}

// CreateScopePayload is the payload type of the oauth_provider service
// create_scope method.
type CreateScopePayload struct {
	JWT *string
	// Scope name
	Name string
	// Scope description
	Description string
	// Whether this scope is included by default
	DefaultScope bool
	// Whether this scope can be requested by any client
	Public bool
}

// DeleteClientPayload is the payload type of the oauth_provider service
// delete_client method.
type DeleteClientPayload struct {
	JWT *string
	// Client ID
	ID string
}

// DeleteScopePayload is the payload type of the oauth_provider service
// delete_scope method.
type DeleteScopePayload struct {
	JWT *string
	// Scope ID
	ID string
}

// Forbidden response
type ForbiddenError struct {
	// Error code
	Code string
	// Error message
	Message string
	// Additional error details
	Details any
	// Unique error ID
	ID *string
}

// GetClientPayload is the payload type of the oauth_provider service
// get_client method.
type GetClientPayload struct {
	JWT *string
	// Client ID
	ID string
}

// GetScopePayload is the payload type of the oauth_provider service get_scope
// method.
type GetScopePayload struct {
	JWT *string
	// Scope ID
	ID string
}

// Internal server error response
type InternalServerError struct {
	// Error code
	Code string
	// Error message
	Message string
	// Additional error details
	Details any
	// Unique error ID
	ID *string
}

// IntrospectPayload is the payload type of the oauth_provider service
// introspect method.
type IntrospectPayload struct {
	// OAuth2 access token
	Oauth2 *string
	// API key
	XAPIKey *string
	// JWT token
	JWT *string
	// Token to introspect
	Token string
	// Token type hint
	TokenTypeHint *string
}

// IntrospectResult is the result type of the oauth_provider service introspect
// method.
type IntrospectResult struct {
	// Whether token is active
	Active bool
	// Token scopes
	Scope *string
	// Client ID
	ClientID *string
	// Resource owner username
	Username *string
	// Token type
	TokenType *string
	// Expiry timestamp
	Exp *int
	// Issued at timestamp
	Iat *int
	// Not before timestamp
	Nbf *int
	// Subject (user ID)
	Sub *string
	// Audience
	Aud *string
	// Issuer
	Iss *string
	// JWTAuth ID
	Jti *string
}

// JwksResult is the result type of the oauth_provider service jwks method.
type JwksResult struct {
	Keys []any
}

// ListClientsPayload is the payload type of the oauth_provider service
// list_clients method.
type ListClientsPayload struct {
	JWT *string
	// Pagination offset
	Offset int
	// Number of items to return
	Limit int
	// Filter by organization ID
	OrganizationID *string
}

// ListClientsResult is the result type of the oauth_provider service
// list_clients method.
type ListClientsResult struct {
	Data       []*OAuthClientResponse
	Pagination *designtypes.PaginationResponse
}

// ListScopesPayload is the payload type of the oauth_provider service
// list_scopes method.
type ListScopesPayload struct {
	JWT *string
	// Pagination offset
	Offset int
	// Number of items to return
	Limit int
}

// ListScopesResult is the result type of the oauth_provider service
// list_scopes method.
type ListScopesResult struct {
	Data       []*OAuthScopeResponse
	Pagination *designtypes.PaginationResponse
}

// Not found response
type NotFoundError struct {
	// Error code
	Code string
	// Error message
	Message string
	// Additional error details
	Details any
	// Unique error ID
	ID *string
}

// OAuthClientResponse is the result type of the oauth_provider service
// get_client method.
type OAuthClientResponse struct {
	// Client ID
	ID string
	// OAuth client ID
	ClientID string
	// Client name
	ClientName string
	// Client description
	ClientDescription *string
	// Client URI
	ClientURI *string
	// Logo URI
	LogoURI *string
	// Authorized redirect URIs
	RedirectUris []string
	// Authorized post-logout redirect URIs
	PostLogoutRedirectUris []string
	// Allowed CORS origins
	AllowedCorsOrigins []string
	// Allowed grant types
	AllowedGrantTypes []string
	// Whether client is public
	Public bool
	// Whether client is active
	Active bool
	// Organization ID
	OrganizationID *string
	// Access token expiry in seconds
	TokenExpirySeconds *int
	// Refresh token expiry in seconds
	RefreshTokenExpirySeconds *int
	// Whether PKCE is required
	RequiresPkce *bool
	// Whether user consent is required
	RequiresConsent *bool
	// Creation timestamp
	CreatedAt *string
	// Last update timestamp
	UpdatedAt *string
}

// OAuthClientWithSecretResponse is the result type of the oauth_provider
// service create_client method.
type OAuthClientWithSecretResponse struct {
	// OAuth client secret
	ClientSecret string
	// Client ID
	ID string
	// OAuth client ID
	ClientID string
	// Client name
	ClientName string
	// Client description
	ClientDescription *string
	// Client URI
	ClientURI *string
	// Logo URI
	LogoURI *string
	// Authorized redirect URIs
	RedirectUris []string
	// Authorized post-logout redirect URIs
	PostLogoutRedirectUris []string
	// Allowed CORS origins
	AllowedCorsOrigins []string
	// Allowed grant types
	AllowedGrantTypes []string
	// Whether client is public
	Public bool
	// Whether client is active
	Active bool
	// Organization ID
	OrganizationID *string
	// Access token expiry in seconds
	TokenExpirySeconds *int
	// Refresh token expiry in seconds
	RefreshTokenExpirySeconds *int
	// Whether PKCE is required
	RequiresPkce *bool
	// Whether user consent is required
	RequiresConsent *bool
	// Creation timestamp
	CreatedAt *string
	// Last update timestamp
	UpdatedAt *string
}

// OAuthScopeResponse is the result type of the oauth_provider service
// create_scope method.
type OAuthScopeResponse struct {
	// Scope ID
	ID string
	// Scope name
	Name string
	// Scope description
	Description string
	// Whether this scope is included by default
	DefaultScope bool
	// Whether this scope can be requested by any client
	Public bool
}

// OidcConfigurationResult is the result type of the oauth_provider service
// oidc_configuration method.
type OidcConfigurationResult struct {
	Issuer                            string
	AuthorizationEndpoint             string
	TokenEndpoint                     string
	UserinfoEndpoint                  string
	JwksURI                           string
	RegistrationEndpoint              *string
	ScopesSupported                   []string
	ResponseTypesSupported            []string
	ResponseModesSupported            []string
	GrantTypesSupported               []string
	SubjectTypesSupported             []string
	IDTokenSigningAlgValuesSupported  []string
	TokenEndpointAuthMethodsSupported []string
	ClaimsSupported                   []string
}

// RevokePayload is the payload type of the oauth_provider service revoke
// method.
type RevokePayload struct {
	// OAuth2 access token
	Oauth2 *string
	// API key
	XAPIKey *string
	// JWT token
	JWT *string
	// Token to revoke
	Token string
	// Token type hint
	TokenTypeHint *string
	// Client ID
	ClientID *string
	// Client secret
	ClientSecret *string
}

// RotateClientSecretPayload is the payload type of the oauth_provider service
// rotate_client_secret method.
type RotateClientSecretPayload struct {
	JWT *string
	// Client ID
	ID string
}

// RotateClientSecretResult is the result type of the oauth_provider service
// rotate_client_secret method.
type RotateClientSecretResult struct {
	ClientID     string
	ClientSecret string
}

// TokenPayload is the payload type of the oauth_provider service token method.
type TokenPayload struct {
	// OAuth2 access token
	Oauth2 *string
	// API key
	XAPIKey *string
	// JWT token
	JWT *string
	// Grant type
	GrantType string
	// Authorization code (for authorization_code grant)
	Code *string
	// Redirect URI (for authorization_code grant)
	RedirectURI *string
	// Client ID
	ClientID *string
	// Client secret
	ClientSecret *string
	// Refresh token (for refresh_token grant)
	RefreshToken *string
	// PKCE code verifier (for authorization_code grant)
	CodeVerifier *string
	// Resource owner username (for password grant)
	Username *string
	// Resource owner password (for password grant)
	Password *string
	// Requested scopes (space-separated)
	Scope *string
}

// TokenResult is the result type of the oauth_provider service token method.
type TokenResult struct {
	// Access token
	AccessToken string
	// Token type
	TokenType string
	// Token expiry in seconds
	ExpiresIn int
	// Refresh token
	RefreshToken *string
	// Granted scopes
	Scope *string
}

// Unauthorized response
type UnauthorizedError struct {
	// Error code
	Code string
	// Error message
	Message string
	// Additional error details
	Details any
	// Unique error ID
	ID *string
}

// UpdateClientPayload is the payload type of the oauth_provider service
// update_client method.
type UpdateClientPayload struct {
	JWT *string
	// Client ID
	ID     string
	Client *UpdateOAuthClientRequest
}

// Update OAuth client request
type UpdateOAuthClientRequest struct {
	// Client name
	ClientName *string
	// Client description
	ClientDescription *string
	// Client URI
	ClientURI *string
	// Logo URI
	LogoURI *string
	// Authorized redirect URIs
	RedirectUris []string
	// Authorized post-logout redirect URIs
	PostLogoutRedirectUris []string
	// Allowed CORS origins
	AllowedCorsOrigins []string
	// Allowed grant types
	AllowedGrantTypes []string
	// Whether client is public
	Public *bool
	// Whether client is active
	Active *bool
	// Access token expiry in seconds
	TokenExpirySeconds *int
	// Refresh token expiry in seconds
	RefreshTokenExpirySeconds *int
	// Whether PKCE is required
	RequiresPkce *bool
	// Whether user consent is required
	RequiresConsent *bool
}

// UpdateScopePayload is the payload type of the oauth_provider service
// update_scope method.
type UpdateScopePayload struct {
	JWT *string
	// Scope ID
	ID string
	// Scope description
	Description *string
	// Whether this scope is included by default
	DefaultScope *bool
	// Whether this scope can be requested by any client
	Public *bool
}

// UserinfoPayload is the payload type of the oauth_provider service userinfo
// method.
type UserinfoPayload struct {
	JWT *string
}

// UserinfoResult is the result type of the oauth_provider service userinfo
// method.
type UserinfoResult struct {
	// Subject (user ID)
	Sub string
	// Full name
	Name *string
	// First name
	GivenName *string
	// Last name
	FamilyName *string
	// Middle name
	MiddleName *string
	// Nickname
	Nickname *string
	// Preferred username
	PreferredUsername *string
	// Profile URL
	Profile *string
	// Picture URL
	Picture *string
	// Website URL
	Website *string
	// Email address
	Email *string
	// Whether email is verified
	EmailVerified *bool
	// Gender
	Gender *string
	// Birth date
	Birthdate *string
	// Time zone
	Zoneinfo *string
	// Locale
	Locale *string
	// Phone number
	PhoneNumber *string
	// Whether phone number is verified
	PhoneNumberVerified *bool
	// Last update timestamp
	UpdatedAt *int
}

// Error returns an error description.
func (e *BadRequestError) Error() string {
	return "Bad request response"
}

// ErrorName returns "BadRequestError".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *BadRequestError) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "BadRequestError".
func (e *BadRequestError) GoaErrorName() string {
	return "bad_request"
}

// Error returns an error description.
func (e *ConflictError) Error() string {
	return "Conflict response"
}

// ErrorName returns "ConflictError".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *ConflictError) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "ConflictError".
func (e *ConflictError) GoaErrorName() string {
	return "conflict"
}

// Error returns an error description.
func (e *ForbiddenError) Error() string {
	return "Forbidden response"
}

// ErrorName returns "ForbiddenError".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *ForbiddenError) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "ForbiddenError".
func (e *ForbiddenError) GoaErrorName() string {
	return "forbidden"
}

// Error returns an error description.
func (e *InternalServerError) Error() string {
	return "Internal server error response"
}

// ErrorName returns "InternalServerError".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *InternalServerError) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "InternalServerError".
func (e *InternalServerError) GoaErrorName() string {
	return "internal_error"
}

// Error returns an error description.
func (e *NotFoundError) Error() string {
	return "Not found response"
}

// ErrorName returns "NotFoundError".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *NotFoundError) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "NotFoundError".
func (e *NotFoundError) GoaErrorName() string {
	return "not_found"
}

// Error returns an error description.
func (e *UnauthorizedError) Error() string {
	return "Unauthorized response"
}

// ErrorName returns "UnauthorizedError".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *UnauthorizedError) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "UnauthorizedError".
func (e *UnauthorizedError) GoaErrorName() string {
	return "unauthorized"
}
