// Code generated by goa v3.20.0, DO NOT EDIT.
//
// oauth_provider endpoints
//
// Command:
// $ goa gen github.com/juicycleff/frank/design -o .

package oauthprovider

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Endpoints wraps the "oauth_provider" service endpoints.
type Endpoints struct {
	Authorize          goa.Endpoint
	Token              goa.Endpoint
	Introspect         goa.Endpoint
	Revoke             goa.Endpoint
	Consent            goa.Endpoint
	Userinfo           goa.Endpoint
	ListClients        goa.Endpoint
	CreateClient       goa.Endpoint
	GetClient          goa.Endpoint
	UpdateClient       goa.Endpoint
	DeleteClient       goa.Endpoint
	RotateClientSecret goa.Endpoint
	ListScopes         goa.Endpoint
	CreateScope        goa.Endpoint
	GetScope           goa.Endpoint
	UpdateScope        goa.Endpoint
	DeleteScope        goa.Endpoint
	OidcConfiguration  goa.Endpoint
	Jwks               goa.Endpoint
}

// NewEndpoints wraps the methods of the "oauth_provider" service with
// endpoints.
func NewEndpoints(s Service) *Endpoints {
	// Casting service to Auther interface
	a := s.(Auther)
	return &Endpoints{
		Authorize:          NewAuthorizeEndpoint(s, a.OAuth2Auth, a.APIKeyAuth, a.JWTAuth),
		Token:              NewTokenEndpoint(s, a.OAuth2Auth, a.APIKeyAuth, a.JWTAuth),
		Introspect:         NewIntrospectEndpoint(s, a.OAuth2Auth, a.APIKeyAuth, a.JWTAuth),
		Revoke:             NewRevokeEndpoint(s, a.OAuth2Auth, a.APIKeyAuth, a.JWTAuth),
		Consent:            NewConsentEndpoint(s, a.JWTAuth),
		Userinfo:           NewUserinfoEndpoint(s, a.JWTAuth),
		ListClients:        NewListClientsEndpoint(s, a.JWTAuth),
		CreateClient:       NewCreateClientEndpoint(s, a.JWTAuth),
		GetClient:          NewGetClientEndpoint(s, a.JWTAuth),
		UpdateClient:       NewUpdateClientEndpoint(s, a.JWTAuth),
		DeleteClient:       NewDeleteClientEndpoint(s, a.JWTAuth),
		RotateClientSecret: NewRotateClientSecretEndpoint(s, a.JWTAuth),
		ListScopes:         NewListScopesEndpoint(s, a.JWTAuth),
		CreateScope:        NewCreateScopeEndpoint(s, a.JWTAuth),
		GetScope:           NewGetScopeEndpoint(s, a.JWTAuth),
		UpdateScope:        NewUpdateScopeEndpoint(s, a.JWTAuth),
		DeleteScope:        NewDeleteScopeEndpoint(s, a.JWTAuth),
		OidcConfiguration:  NewOidcConfigurationEndpoint(s),
		Jwks:               NewJwksEndpoint(s),
	}
}

// Use applies the given middleware to all the "oauth_provider" service
// endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.Authorize = m(e.Authorize)
	e.Token = m(e.Token)
	e.Introspect = m(e.Introspect)
	e.Revoke = m(e.Revoke)
	e.Consent = m(e.Consent)
	e.Userinfo = m(e.Userinfo)
	e.ListClients = m(e.ListClients)
	e.CreateClient = m(e.CreateClient)
	e.GetClient = m(e.GetClient)
	e.UpdateClient = m(e.UpdateClient)
	e.DeleteClient = m(e.DeleteClient)
	e.RotateClientSecret = m(e.RotateClientSecret)
	e.ListScopes = m(e.ListScopes)
	e.CreateScope = m(e.CreateScope)
	e.GetScope = m(e.GetScope)
	e.UpdateScope = m(e.UpdateScope)
	e.DeleteScope = m(e.DeleteScope)
	e.OidcConfiguration = m(e.OidcConfiguration)
	e.Jwks = m(e.Jwks)
}

// NewAuthorizeEndpoint returns an endpoint function that calls the method
// "authorize" of service "oauth_provider".
func NewAuthorizeEndpoint(s Service, authOAuth2Fn security.AuthOAuth2Func, authAPIKeyFn security.AuthAPIKeyFunc, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*AuthorizePayload)
		var err error
		sc := security.OAuth2Scheme{
			Name:           "oauth2",
			Scopes:         []string{"profile", "email", "openid", "offline_access", "api"},
			RequiredScopes: []string{},
			Flows: []*security.OAuthFlow{
				&security.OAuthFlow{
					Type:             "authorization_code",
					AuthorizationURL: "/v1/oauth/authorize",
					TokenURL:         "/v1/oauth/token",
					RefreshURL:       "/v1/oauth/refresh",
				},
			},
		}
		var token string
		if p.Oauth2 != nil {
			token = *p.Oauth2
		}
		ctx, err = authOAuth2Fn(ctx, token, &sc)
		if err == nil {
			sc := security.APIKeyScheme{
				Name:           "api_key",
				Scopes:         []string{},
				RequiredScopes: []string{},
			}
			var key string
			if p.XAPIKey != nil {
				key = *p.XAPIKey
			}
			ctx, err = authAPIKeyFn(ctx, key, &sc)
		}
		if err == nil {
			sc := security.JWTScheme{
				Name:           "jwt",
				Scopes:         []string{"api:read", "api:write"},
				RequiredScopes: []string{},
			}
			var token string
			if p.JWT != nil {
				token = *p.JWT
			}
			ctx, err = authJWTFn(ctx, token, &sc)
		}
		if err != nil {
			return nil, err
		}
		return s.Authorize(ctx, p)
	}
}

// NewTokenEndpoint returns an endpoint function that calls the method "token"
// of service "oauth_provider".
func NewTokenEndpoint(s Service, authOAuth2Fn security.AuthOAuth2Func, authAPIKeyFn security.AuthAPIKeyFunc, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*TokenPayload)
		var err error
		sc := security.OAuth2Scheme{
			Name:           "oauth2",
			Scopes:         []string{"profile", "email", "openid", "offline_access", "api"},
			RequiredScopes: []string{},
			Flows: []*security.OAuthFlow{
				&security.OAuthFlow{
					Type:             "authorization_code",
					AuthorizationURL: "/v1/oauth/authorize",
					TokenURL:         "/v1/oauth/token",
					RefreshURL:       "/v1/oauth/refresh",
				},
			},
		}
		var token string
		if p.Oauth2 != nil {
			token = *p.Oauth2
		}
		ctx, err = authOAuth2Fn(ctx, token, &sc)
		if err == nil {
			sc := security.APIKeyScheme{
				Name:           "api_key",
				Scopes:         []string{},
				RequiredScopes: []string{},
			}
			var key string
			if p.XAPIKey != nil {
				key = *p.XAPIKey
			}
			ctx, err = authAPIKeyFn(ctx, key, &sc)
		}
		if err == nil {
			sc := security.JWTScheme{
				Name:           "jwt",
				Scopes:         []string{"api:read", "api:write"},
				RequiredScopes: []string{},
			}
			var token string
			if p.JWT != nil {
				token = *p.JWT
			}
			ctx, err = authJWTFn(ctx, token, &sc)
		}
		if err != nil {
			return nil, err
		}
		return s.Token(ctx, p)
	}
}

// NewIntrospectEndpoint returns an endpoint function that calls the method
// "introspect" of service "oauth_provider".
func NewIntrospectEndpoint(s Service, authOAuth2Fn security.AuthOAuth2Func, authAPIKeyFn security.AuthAPIKeyFunc, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*IntrospectPayload)
		var err error
		sc := security.OAuth2Scheme{
			Name:           "oauth2",
			Scopes:         []string{"profile", "email", "openid", "offline_access", "api"},
			RequiredScopes: []string{},
			Flows: []*security.OAuthFlow{
				&security.OAuthFlow{
					Type:             "authorization_code",
					AuthorizationURL: "/v1/oauth/authorize",
					TokenURL:         "/v1/oauth/token",
					RefreshURL:       "/v1/oauth/refresh",
				},
			},
		}
		var token string
		if p.Oauth2 != nil {
			token = *p.Oauth2
		}
		ctx, err = authOAuth2Fn(ctx, token, &sc)
		if err == nil {
			sc := security.APIKeyScheme{
				Name:           "api_key",
				Scopes:         []string{},
				RequiredScopes: []string{},
			}
			var key string
			if p.XAPIKey != nil {
				key = *p.XAPIKey
			}
			ctx, err = authAPIKeyFn(ctx, key, &sc)
		}
		if err == nil {
			sc := security.JWTScheme{
				Name:           "jwt",
				Scopes:         []string{"api:read", "api:write"},
				RequiredScopes: []string{},
			}
			var token string
			if p.JWT != nil {
				token = *p.JWT
			}
			ctx, err = authJWTFn(ctx, token, &sc)
		}
		if err != nil {
			return nil, err
		}
		return s.Introspect(ctx, p)
	}
}

// NewRevokeEndpoint returns an endpoint function that calls the method
// "revoke" of service "oauth_provider".
func NewRevokeEndpoint(s Service, authOAuth2Fn security.AuthOAuth2Func, authAPIKeyFn security.AuthAPIKeyFunc, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*RevokePayload)
		var err error
		sc := security.OAuth2Scheme{
			Name:           "oauth2",
			Scopes:         []string{"profile", "email", "openid", "offline_access", "api"},
			RequiredScopes: []string{},
			Flows: []*security.OAuthFlow{
				&security.OAuthFlow{
					Type:             "authorization_code",
					AuthorizationURL: "/v1/oauth/authorize",
					TokenURL:         "/v1/oauth/token",
					RefreshURL:       "/v1/oauth/refresh",
				},
			},
		}
		var token string
		if p.Oauth2 != nil {
			token = *p.Oauth2
		}
		ctx, err = authOAuth2Fn(ctx, token, &sc)
		if err == nil {
			sc := security.APIKeyScheme{
				Name:           "api_key",
				Scopes:         []string{},
				RequiredScopes: []string{},
			}
			var key string
			if p.XAPIKey != nil {
				key = *p.XAPIKey
			}
			ctx, err = authAPIKeyFn(ctx, key, &sc)
		}
		if err == nil {
			sc := security.JWTScheme{
				Name:           "jwt",
				Scopes:         []string{"api:read", "api:write"},
				RequiredScopes: []string{},
			}
			var token string
			if p.JWT != nil {
				token = *p.JWT
			}
			ctx, err = authJWTFn(ctx, token, &sc)
		}
		if err != nil {
			return nil, err
		}
		return nil, s.Revoke(ctx, p)
	}
}

// NewConsentEndpoint returns an endpoint function that calls the method
// "consent" of service "oauth_provider".
func NewConsentEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*ConsentPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{},
		}
		var token string
		if p.JWT != nil {
			token = *p.JWT
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.Consent(ctx, p)
	}
}

// NewUserinfoEndpoint returns an endpoint function that calls the method
// "userinfo" of service "oauth_provider".
func NewUserinfoEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*UserinfoPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{},
		}
		var token string
		if p.JWT != nil {
			token = *p.JWT
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.Userinfo(ctx, p)
	}
}

// NewListClientsEndpoint returns an endpoint function that calls the method
// "list_clients" of service "oauth_provider".
func NewListClientsEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*ListClientsPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{},
		}
		var token string
		if p.JWT != nil {
			token = *p.JWT
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.ListClients(ctx, p)
	}
}

// NewCreateClientEndpoint returns an endpoint function that calls the method
// "create_client" of service "oauth_provider".
func NewCreateClientEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*CreateClientPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{},
		}
		var token string
		if p.JWT != nil {
			token = *p.JWT
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.CreateClient(ctx, p)
	}
}

// NewGetClientEndpoint returns an endpoint function that calls the method
// "get_client" of service "oauth_provider".
func NewGetClientEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*GetClientPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{},
		}
		var token string
		if p.JWT != nil {
			token = *p.JWT
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.GetClient(ctx, p)
	}
}

// NewUpdateClientEndpoint returns an endpoint function that calls the method
// "update_client" of service "oauth_provider".
func NewUpdateClientEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*UpdateClientPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{},
		}
		var token string
		if p.JWT != nil {
			token = *p.JWT
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.UpdateClient(ctx, p)
	}
}

// NewDeleteClientEndpoint returns an endpoint function that calls the method
// "delete_client" of service "oauth_provider".
func NewDeleteClientEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*DeleteClientPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{},
		}
		var token string
		if p.JWT != nil {
			token = *p.JWT
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return nil, s.DeleteClient(ctx, p)
	}
}

// NewRotateClientSecretEndpoint returns an endpoint function that calls the
// method "rotate_client_secret" of service "oauth_provider".
func NewRotateClientSecretEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*RotateClientSecretPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{},
		}
		var token string
		if p.JWT != nil {
			token = *p.JWT
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.RotateClientSecret(ctx, p)
	}
}

// NewListScopesEndpoint returns an endpoint function that calls the method
// "list_scopes" of service "oauth_provider".
func NewListScopesEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*ListScopesPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{},
		}
		var token string
		if p.JWT != nil {
			token = *p.JWT
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.ListScopes(ctx, p)
	}
}

// NewCreateScopeEndpoint returns an endpoint function that calls the method
// "create_scope" of service "oauth_provider".
func NewCreateScopeEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*CreateScopePayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{},
		}
		var token string
		if p.JWT != nil {
			token = *p.JWT
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.CreateScope(ctx, p)
	}
}

// NewGetScopeEndpoint returns an endpoint function that calls the method
// "get_scope" of service "oauth_provider".
func NewGetScopeEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*GetScopePayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{},
		}
		var token string
		if p.JWT != nil {
			token = *p.JWT
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.GetScope(ctx, p)
	}
}

// NewUpdateScopeEndpoint returns an endpoint function that calls the method
// "update_scope" of service "oauth_provider".
func NewUpdateScopeEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*UpdateScopePayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{},
		}
		var token string
		if p.JWT != nil {
			token = *p.JWT
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.UpdateScope(ctx, p)
	}
}

// NewDeleteScopeEndpoint returns an endpoint function that calls the method
// "delete_scope" of service "oauth_provider".
func NewDeleteScopeEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*DeleteScopePayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{},
		}
		var token string
		if p.JWT != nil {
			token = *p.JWT
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return nil, s.DeleteScope(ctx, p)
	}
}

// NewOidcConfigurationEndpoint returns an endpoint function that calls the
// method "oidc_configuration" of service "oauth_provider".
func NewOidcConfigurationEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		return s.OidcConfiguration(ctx)
	}
}

// NewJwksEndpoint returns an endpoint function that calls the method "jwks" of
// service "oauth_provider".
func NewJwksEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		return s.Jwks(ctx)
	}
}
